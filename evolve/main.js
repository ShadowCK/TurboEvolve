(() => {
  // src/vars.js
  var save = window.localStorage;
  var global = {
    seed: 1,
    warseed: 1,
    resource: {},
    evolution: {},
    tech: {},
    city: {},
    space: {},
    interstellar: {},
    portal: {},
    eden: {},
    tauceti: {},
    civic: {},
    race: {},
    genes: {},
    blood: {},
    stats: {
      start: Date.now(),
      days: 0,
      tdays: 0
    },
    event: {
      t: 200,
      l: false
    },
    m_event: {
      t: 499,
      l: false
    }
  };
  var tmp_vars = {};
  var breakdown = {
    c: {},
    p: {}
  };
  var power_generated = {};
  var p_on = {};
  var support_on = {};
  var int_on = {};
  var gal_on = {};
  var spire_on = {};
  var quantum_level = 0;
  var achieve_level = 0;
  var universe_level = 0;
  var atrack = { t: 0 };
  function set_qlevel(q_level) {
    quantum_level = q_level;
  }
  function set_alevel(a_level) {
    achieve_level = a_level;
  }
  function set_ulevel(u_level) {
    universe_level = u_level;
  }
  var hell_reports = {};
  var hell_graphs = {};
  var message_logs = {
    view: "all"
  };
  var message_filters = ["all", "progress", "queue", "building_queue", "research_queue", "combat", "spy", "events", "major_events", "minor_events", "achievements", "hell"];
  var callback_queue = /* @__PURE__ */ new Map();
  var active_rituals = {};
  Math.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  };
  global["seed"] = 2;
  global["warseed"] = 2;
  function seededRandom(min, max, alt, useSeed) {
    max = max || 1;
    min = min || 0;
    let seed = useSeed || global[alt ? "warseed" : "seed"];
    let newSeed = (seed * 9301 + 49297) % 233280;
    let rnd = newSeed / 233280;
    if (!useSeed) {
      global[alt ? "warseed" : "seed"] = newSeed;
    }
    return min + rnd * (max - min);
  }
  {
    let global_data = save.getItem("evolved") || false;
    if (global_data) {
      let saveState = JSON.parse(LZString.decompressFromUTF16(global_data));
      if (saveState) {
        global = saveState;
      } else {
        newGameData();
      }
    } else {
      newGameData();
    }
  }
  if (!global["version"]) {
    global["version"] = "0.2.0";
  }
  if (convertVersion(global["version"]) < 2060) {
    Object.keys(global.resource).forEach(function(res) {
      if (global.resource[res].crates) {
        global.resource[res].crates = Math.ceil(global.resource[res].crates / 5);
      }
      if (global.resource[res].containers) {
        global.resource[res].containers = Math.ceil(global.resource[res].containers / 5);
      }
    });
  }
  if (convertVersion(global["version"]) < 2062 && global.civic.taxes !== void 0) {
    switch (Number(global.civic.taxes.tax_rate)) {
      case 0:
        global.civic.taxes.tax_rate = 0;
        break;
      case 1:
        global.civic.taxes.tax_rate = 10;
        break;
      case 2:
        global.civic.taxes.tax_rate = 20;
        break;
      case 3:
        global.civic.taxes.tax_rate = 30;
        break;
      case 4:
        global.civic.taxes.tax_rate = 40;
        break;
      case 5:
        global.civic.taxes.tax_rate = 50;
        break;
    }
  }
  if (convertVersion(global["version"]) === 2062 && global.civic.taxes !== void 0) {
    if (global.civic.taxes.tax_rate == 2) {
      global.civic.taxes.tax_rate = 20;
    }
  }
  if (convertVersion(global["version"]) < 2065 && global.race !== void 0 && global.race.species === "sporgar") {
    delete global.race["crafty"];
    delete global.race["hydrophilic"];
    global.race["infectious"] = 1;
    global.race["parasite"] = 1;
    if (!global.tech["military"] && global.tech["primitive"] && global.tech["primitive"] >= 3) {
      global.civic["garrison"].display = true;
      global.settings.showCivic = true;
      global.city["garrison"] = { count: 0 };
    }
  }
  if (convertVersion(global["version"]) < 3002 && global["space"]) {
    if (global.tech["space"] && global.tech["space"] >= 4) {
      if (!global.space["living_quarters"]) {
        global.space["living_quarters"] = { count: 0, on: 0 };
      }
      if (!global.space["garage"]) {
        global.space["garage"] = { count: 0 };
      }
      if (!global.space["red_mine"]) {
        global.space["red_mine"] = { count: 0, on: 0 };
      }
      if (!global.space["fabrication"]) {
        global.space["fabrication"] = { count: 0, on: 0 };
      }
      if (!global.space["laboratory"]) {
        global.space["laboratory"] = { count: 0, on: 0 };
      }
    }
    if (global.tech["space"] && global.tech["space"] >= 3) {
      if (!global.space["iridium_mine"]) {
        global.space["iridium_mine"] = { count: 0, on: 0 };
      }
      if (!global.space["helium_mine"]) {
        global.space["helium_mine"] = { count: 0, on: 0 };
      }
    }
    if (global.tech["hell"]) {
      if (!global.space["geothermal"]) {
        global.space["geothermal"] = { count: 0, on: 0 };
      }
    }
  }
  if (convertVersion(global["version"]) < 3004 && global["settings"] && global.settings["space"] && global.settings.space.belt) {
    global.space["space_station"] = { count: 0, on: 0, support: 0, s_max: 0 };
  }
  if (convertVersion(global["version"]) < 4001 && global["city"] && global.city["factory"] && !global.city.factory["Nano"]) {
    global.city.factory["Nano"] = 0;
  }
  if (convertVersion(global["version"]) < 4003 && global.stats["achieve"]) {
    Object.keys(global.stats.achieve).forEach(function(key) {
      global.stats.achieve[key] = 1;
    });
  }
  if (convertVersion(global["version"]) < 4010) {
    if (global.stats["achieve"] && global.stats.achieve["doomed"]) {
      global.stats["portals"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 4028 && global.stats["achieve"] && global.stats.achieve["genus_demonic"]) {
    global.stats.achieve["biome_hellscape"] = global.stats.achieve["genus_demonic"];
  }
  if (convertVersion(global["version"]) < 4029 && global.race["mutation"] && global.race["mutation"] > 0) {
    global["resource"]["Genes"] = {
      name: "Genes",
      display: true,
      value: 0,
      amount: 0,
      crates: 0,
      diff: 0,
      delta: 0,
      max: -2,
      rate: 0
    };
    for (let i = 0; i < global.race.mutation; i++) {
      global.resource.Genes.amount += i + 1;
    }
  }
  if (convertVersion(global["version"]) < 4031) {
    if (global.tech && global.tech["gambling"] && global.tech["gambling"] === 2) {
      global.tech["gambling"] = 3;
      global.city.casino["on"] = 0;
    }
    if (global.tech["hunting"] && global.tech["hunting"] >= 3) {
      global.tech["wind_plant"] = 1;
      global.tech["hunting"] = 2;
    }
    let races2 = ["Human", "Humano", "Elf", "Elfo", "Orc", "Cath", "Wolven", "Centaur", "Centauro", "Kobold", "Goblin", "Gnome", "Ogre", "Ogro", "Cyclops", "Ciclope", "Troll", "Tortoisan", "Gecko", "Slitheryn", "Arraak", "Pterodacti", "Dracnid", "Ent", "Cacti", "Sporgar", "Shroomi", "Mantis", "Scorpid", "Antid", "Sharkin", "Octigoran", "Balorg", "Imp"];
    for (let i = 0; i < races2.length; i++) {
      if (global.resource[races2[i]]) {
        global.resource[global.race.species] = global.resource[races2[i]];
        delete global.resource[races2[i]];
        break;
      }
    }
  }
  if (convertVersion(global["version"]) < 4032) {
    if (global.race.species === "balorg") {
      global.race["slaver"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 5e3) {
    global["portal"] = {};
    if (global["city"] && global.city["factory"] && !global.city.factory["Stanene"]) {
      global.city.factory["Stanene"] = 0;
    }
  }
  if (convertVersion(global["version"]) === 5e3) {
    if (global.civic["craftsman"]) {
      global.civic.craftsman["assigned"] = 0;
      if (global.city["foundry"]) {
        let workers = global.city.foundry.Plywood + global.city.foundry.Brick + global.city.foundry.Wrought_Iron + global.city.foundry.Sheet_Metal + global.city.foundry.Mythril + global.city.foundry.Aerogel;
        global.civic.craftsman.workers = workers;
      }
    }
  }
  if (convertVersion(global["version"]) <= 5008 && global["queue"] && global["queue"]["queue"]) {
    global.queue.queue = [];
  }
  if (convertVersion(global["version"]) <= 5011 && global.stats["died"]) {
    global.stats["attacks"] = global.stats["died"];
  }
  if (convertVersion(global["version"]) <= 5016 && global.race.species === "mantis") {
    delete global.race["frail"];
    global.race["cannibalize"] = 1;
    global.city["s_alter"] = {
      count: 0,
      rage: 0,
      mind: 0,
      regen: 0,
      mine: 0,
      harvest: 0
    };
  }
  if (convertVersion(global["version"]) < 6e3) {
    if (global.race.species === "imp" || global.race.species === "balorg") {
      global.race["soul_eater"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 6001) {
    if (global.stats["achieve"]) {
      Object.keys(global.stats.achieve).forEach(function(key) {
        if (!global.stats.achieve[key]["l"]) {
          global.stats.achieve[key] = { l: global.stats.achieve[key] };
        }
      });
    }
  }
  if (convertVersion(global["version"]) < 6004 && global.city["windmill"] && !global.race["soul_eater"] && !global.race["carnivore"]) {
    delete global.city["windmill"];
  }
  if (convertVersion(global["version"]) < 6006 && !global.city["windmill"] && global.tech["wind_plant"] && (global.race["soul_eater"] || global.race["carnivore"])) {
    global.city["windmill"] = { count: 0 };
  }
  if (convertVersion(global["version"]) < 6006 && global.tech["wind_plant"] && !global.race["soul_eater"] && !global.race["carnivore"]) {
    delete global.tech["wind_plant"];
  }
  if (convertVersion(global["version"]) <= 6008 && global["r_queue"] && global["r_queue"]["queue"]) {
    for (let i = 0; i < global.r_queue.queue.length; i++) {
      global.r_queue.queue[i]["time"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 6010 && global.race["Plasmid"]) {
    if (global.race.Plasmid.anti < 0) {
      global.race.Plasmid.anti = 0;
    }
    if (global.race.Plasmid.count < 0) {
      global.race.Plasmid.count = 0;
    }
    if (global.tech["foundry"] && !global.race["kindling_kindred"]) {
      global.resource.Plywood.display = true;
    }
  }
  if (convertVersion(global["version"]) < 6011 && !global.city["ptrait"]) {
    global.city["ptrait"] = "none";
  }
  if (convertVersion(global["version"]) < 6012 && global.portal["fortress"]) {
    global.portal.fortress["s_ntfy"] = "Yes";
  }
  if (convertVersion(global["version"]) < 6014) {
    if (global.race["noble"] && global.tech["currency"] && global.tech["currency"] === 4) {
      global.tech["currency"] = 5;
    }
    if (global["settings"]) {
      global.settings["cLabels"] = true;
    }
  }
  if (convertVersion(global["version"]) < 6016 && global.stats && global.stats["reset"] && global.stats["achieve"]) {
    global.stats["mad"] = global.stats["reset"];
    global.stats["bioseed"] = 0;
    global.stats["blackhole"] = 0;
    let blkhle = ["whitehole", "heavy", "canceled", "eviltwin", "microbang"];
    for (let i = 0; i < blkhle.length; i++) {
      if (global.stats.achieve[blkhle[i]]) {
        global.stats["blackhole"]++;
        global.stats["mad"]--;
      }
    }
    let genus = ["genus_humanoid", "genus_animal", "genus_small", "genus_giant", "genus_reptilian", "genus_avian", "genus_insectoid", "genus_plant", "genus_fungi", "genus_aquatic", "genus_demonic", "genus_angelic"];
    for (let i = 0; i < genus.length; i++) {
      if (global.stats.achieve[genus[i]]) {
        global.stats["bioseed"]++;
        global.stats["mad"]--;
      }
    }
  }
  if (convertVersion(global["version"]) < 6018) {
    if (global["space"] && global.space["swarm_satellite"]) {
      global.space["swarm_satellite"].count *= 2;
    }
  }
  if (convertVersion(global["version"]) < 6020 && global.race["mutation"] && global.race["universe"] && global.race["universe"] === "antimatter" && global.race["mutation"] > 0) {
    let a_level = 1;
    if (global.race["no_trade"]) {
      a_level++;
    }
    if (global.race["no_craft"]) {
      a_level++;
    }
    if (global.race["no_crispr"]) {
      a_level++;
    }
    if (global.race["weak_mastery"]) {
      a_level++;
    }
    global.stats.achieve["cross"] = { l: a_level, a: a_level };
  }
  if (convertVersion(global["version"]) < 7e3) {
    if (!global.civic["govern"]) {
      global.civic["govern"] = {
        type: "oligarchy",
        rev: 0,
        fr: 0
      };
    }
  }
  if (convertVersion(global["version"]) < 7004 && global["queue"] && global["queue"]["queue"]) {
    for (let i = 0; i < global.queue.queue.length; i++) {
      global.queue.queue[i]["q"] = 1;
      global.queue.queue[i]["t_max"] = global.queue.queue[i]["time"];
    }
  }
  if (convertVersion(global["version"]) < 7007 && global["queue"] && global["queue"]["queue"]) {
    for (let i = 0; i < global.queue.queue.length; i++) {
      global.queue.queue[i]["qs"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 7019 && global.race["fraile"]) {
    delete global.race["fraile"];
    global.race["frail"] = 1;
  }
  if (convertVersion(global["version"]) < 7028) {
    if (global.stats["achieve"] && global.stats.achieve["blood_war"] && global.stats.achieve["blood_war"]["e"]) {
      global.stats.achieve["blood_war"].e = void 0;
    }
  }
  if (convertVersion(global["version"]) < 8e3 && global.civic["foreign"]) {
    if (typeof global.civic.foreign.gov0["anx"] === "undefined") {
      global.civic.foreign.gov0["anx"] = false;
    }
    if (typeof global.civic.foreign.gov1["anx"] === "undefined") {
      global.civic.foreign.gov1["anx"] = false;
    }
    if (typeof global.civic.foreign.gov2["anx"] === "undefined") {
      global.civic.foreign.gov2["anx"] = false;
    }
    if (typeof global.civic.foreign.gov0["buy"] === "undefined") {
      global.civic.foreign.gov0["buy"] = false;
    }
    if (typeof global.civic.foreign.gov1["buy"] === "undefined") {
      global.civic.foreign.gov1["buy"] = false;
    }
    if (typeof global.civic.foreign.gov2["buy"] === "undefined") {
      global.civic.foreign.gov2["buy"] = false;
    }
  }
  if (convertVersion(global["version"]) < 8e3) {
    if (global["settings"] && global.settings.hasOwnProperty("tLabels")) {
      delete global.settings["tLabels"];
    }
  }
  if (convertVersion(global["version"]) < 8003) {
    if (global.stats["harmony"] && global.stats["harmony"] > 0) {
      global.stats["harmony"] = parseFloat(global.stats["harmony"].toFixed(2));
      global.race["Harmony"].count = parseFloat(global.race["Harmony"].count.toFixed(2));
    }
  }
  if (convertVersion(global["version"]) < 8017) {
    if (global.city["garrison"]) {
      global.city.garrison["on"] = global.city["garrison"].count;
    }
  }
  if (convertVersion(global["version"]) < 9e3) {
    if (global.settings && global.settings.showCity) {
      global.settings.showCiv = global.settings.showCity;
    }
  }
  if (convertVersion(global["version"]) < 9005) {
    if (global.race.hasOwnProperty("terrifying") && global.tech.hasOwnProperty("gambling") && !global.space.hasOwnProperty("spc_casino")) {
      global.space["spc_casino"] = { count: 0, on: 0 };
    }
  }
  if (convertVersion(global["version"]) < 9009) {
    if (global.genes.hasOwnProperty("ancients") && global.genes["ancients"] >= 3) {
      if (global.genes["ancients"] === 4) {
        global.genes["ancients"] = 5;
      } else {
        global.race.Plasmid.count += 300;
      }
    }
  }
  if (convertVersion(global["version"]) < 9010) {
    ["species", "gods", "old_gods"].forEach((field) => {
      if (global.race[field] === "orge") {
        global.race[field] = "ogre";
      }
    });
    if (global.stats.hasOwnProperty("achieve") && global.stats.achieve.hasOwnProperty("extinct_orge")) {
      global.stats.achieve["extinct_ogre"] = global.stats.achieve["extinct_orge"];
      delete global.stats.achieve["extinct_orge"];
    }
    if (global.resource.hasOwnProperty("orge")) {
      global.resource["ogre"] = global.resource["orge"];
      delete global.resource["orge"];
    }
    if (global["city"] && global.city["factory"] && !global.city.factory["Furs"]) {
      global.city.factory["Furs"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 9014) {
    ["seraph", "unicorn", "custom"].forEach((field) => {
      if (global.race.species === field) {
        if (field === "custom" && global.hasOwnProperty("custom") && global.custom.race0.genus === "angelic" || field !== "custom") {
          global.race["holy"] = 1;
        }
      }
    });
    if (global.hasOwnProperty("arpa") && global.arpa.hasOwnProperty("sequence")) {
      global.arpa.sequence["labs"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 1e5) {
    delete global.city["lumber"];
    delete global.city["stone"];
    global.stats["dark"] = 0;
    if (global.race["Dark"]) {
      global.stats["dark"] = global.race["Dark"].count;
    }
    if (global.city.hasOwnProperty("smelter")) {
      if (!global.city.smelter.hasOwnProperty("Star")) {
        global.city.smelter["Star"] = 0;
      }
      if (!global.city.smelter.hasOwnProperty("StarCap")) {
        global.city.smelter["StarCap"] = 0;
      }
      if (!global.city.smelter.hasOwnProperty("Inferno")) {
        global.city.smelter["Inferno"] = 0;
      }
    }
    if (!global.hasOwnProperty("warseed")) {
      global["warseed"] = global.seed + 1;
      Math.war = global.hasOwnProperty("warseed") ? global.warseed : global.seed;
    }
    if (global.portal.hasOwnProperty("bireme")) {
      global.portal.bireme["crew"] = 0;
      global.portal.bireme["mil"] = 0;
    }
    if (global.portal.hasOwnProperty("transport")) {
      global.portal.transport["crew"] = 0;
      global.portal.transport["mil"] = 0;
      if (!global.portal.transport["cargo"]) {
        global.portal.transport["cargo"] = {
          used: 0,
          max: 0,
          Crystal: 0,
          Lumber: 0,
          Stone: 0,
          Furs: 0,
          Copper: 0,
          Iron: 0,
          Aluminium: 0,
          Cement: 0,
          Coal: 0,
          Oil: 0,
          Uranium: 0,
          Steel: 0,
          Titanium: 0,
          Alloy: 0,
          Polymer: 0,
          Iridium: 0,
          Helium_3: 0,
          Deuterium: 0,
          Neutronium: 0,
          Adamantite: 0,
          Infernite: 0,
          Elerium: 0,
          Nano_Tube: 0,
          Graphene: 0,
          Stanene: 0,
          Bolognium: 0,
          Vitreloy: 0,
          Orichalcum: 0,
          Plywood: 0,
          Brick: 0,
          Wrought_Iron: 0,
          Sheet_Metal: 0,
          Mythril: 0,
          Aerogel: 0,
          Nanoweave: 0,
          Scarletite: 0
        };
      }
    }
    if (global.hasOwnProperty("settings") && global.settings.portal && global.settings.portal.spire && !global.portal.hasOwnProperty("purifier")) {
      global.settings.portal.spire = false;
    }
    if (global.portal.hasOwnProperty("mechbay") && !Array.isArray(global.portal.mechbay.mechs)) {
      global.portal.mechbay.mechs = [];
    }
    if (global.portal["transport"] && global.portal.transport.count >= 1 && !global.tech["hell_spire"]) {
      global.tech["hell_spire"] = 1;
      global.settings.portal.spire = true;
      global.settings.showCargo = true;
      global.portal["purifier"] = { count: 0, on: 0, support: 0, s_max: 0, supply: 0, sup_max: 100, diff: 0 };
      global.portal["port"] = { count: 0, on: 0 };
    }
    if (global.tech.hasOwnProperty("waygate") && !global.portal.hasOwnProperty("waygate")) {
      delete global.tech["waygate"];
    }
    if (!global.hasOwnProperty("blood")) {
      global["blood"] = {};
    }
  }
  if (convertVersion(global["version"]) < 100013) {
    if (global.hasOwnProperty("settings") && global.settings.hasOwnProperty("showPowerGrid") && global.hasOwnProperty("race") && global.race["infiltrator"] && global.hasOwnProperty("tech") && global.tech.hasOwnProperty("high_tech") && global.tech.high_tech >= 2) {
      global.settings.showPowerGrid = true;
    }
  }
  if (convertVersion(global["version"]) < 100014) {
    if (global.race["Dark"]) {
      global.stats["dark"] = global.race["Dark"].count;
    }
    if (global.race["casting"] && global.race["evil"]) {
      global.race.casting.total -= global.race.casting.lumberjack;
      global.race.casting.lumberjack = 0;
    }
    if (global["queue"] && global["queue"]["queue"]) {
      for (let i = 0; i < global.queue.queue.length; i++) {
        if (global.queue.queue[i].type === "arpa") {
          global.queue.queue[i].type = global.queue.queue[i].action;
          global.queue.queue[i].action = "arpa";
        }
      }
    }
  }
  if (convertVersion(global["version"]) < 100015) {
    if (global.race["cataclysm"]) {
      global.settings.showPowerGrid = true;
    }
  }
  if (convertVersion(global["version"]) < 100016) {
    ["l", "a", "e", "h", "m", "mg"].forEach(function(affix) {
      if (global.stats.hasOwnProperty("spire") && global.stats.spire.hasOwnProperty(affix) && global.stats.spire[affix].hasOwnProperty("lord")) {
        global.stats.spire[affix]["dlstr"] = global.stats.spire[affix].lord;
      }
    });
    if (global.hasOwnProperty("special") && global.special.hasOwnProperty("gift") && global.special.gift) {
      global.special.gift = { g2019: true };
    }
  }
  if (convertVersion(global["version"]) < 100017) {
    if (global.hasOwnProperty("settings") && !global.settings.hasOwnProperty("font")) {
      global.settings["font"] = "standard";
    }
    if (global.hasOwnProperty("lastMsg") && global.lastMsg) {
      global.lastMsg = [global.lastMsg];
    }
  }
  if (convertVersion(global["version"]) < 100023) {
    if (global.city.hasOwnProperty("rock_quarry")) {
      global.city.rock_quarry["asbestos"] = 50;
    }
    if (global.race["smoldering"]) {
      global.resource["Chrysotile"] = {
        name: "Chrysotile",
        display: true,
        value: 5,
        amount: 0,
        crates: 0,
        diff: 0,
        delta: 0,
        max: 200,
        rate: 1
      };
      if (!global.race["kindling_kindred"]) {
        global.resource.Lumber.display = false;
        global.resource.Crates.amount += global.resource.Lumber.crates;
        global.resource.Lumber.crates = 0;
        global.resource.Containers.amount += global.resource.Lumber.containers;
        global.resource.Lumber.containers = 0;
        global.resource.Lumber.trade = 0;
        global.resource.Plywood.display = false;
        if (global.city["sawmill"]) {
          delete global.city["sawmill"];
        }
        if (global.city["graveyard"]) {
          delete global.city["graveyard"];
        }
        if (global.city["lumber_yard"]) {
          delete global.city["lumber_yard"];
        }
        delete global.tech["axe"];
        delete global.tech["reclaimer"];
        delete global.tech["saw"];
        global.civic.lumberjack.display = false;
        global.civic.lumberjack.workers = 0;
        global.civic.lumberjack.assigned = 0;
        if (global.civic.d_job === "lumberjack") {
          global.civic.d_job = "unemployed";
        }
        if (global.race["casting"]) {
          global.race.casting.total -= global.race.casting.lumberjack;
          global.race.casting.lumberjack = 0;
        }
        if (global.tech["foundry"]) {
          global.civic.craftsman.workers -= global.city.foundry["Plywood"];
          global.city.foundry.crafting -= global.city.foundry["Plywood"];
          global.city.foundry["Plywood"] = 0;
        }
        if (global.city["s_alter"]) {
          global.city.s_alter.harvest = 0;
        }
        if (global.interstellar["mass_ejector"]) {
          global.interstellar.mass_ejector.total -= global.interstellar.mass_ejector.Lumber;
          global.interstellar.mass_ejector.Lumber = 0;
        }
      }
    }
  }
  if (convertVersion(global["version"]) < 100025) {
    if (global.race["casting"] && global.race["smoldering"]) {
      global.race.casting.total -= global.race.casting.lumberjack;
      global.race.casting.lumberjack = 0;
    }
  }
  if (convertVersion(global["version"]) < 100032) {
    if (global.civic.hasOwnProperty("free")) {
      global.civic["hunter"] = {
        job: "hunter",
        display: global.race["carnivore"] || global.race["soul_eater"],
        workers: global.race["carnivore"] || global.race["soul_eater"] ? global.civic.free : 0,
        max: -1
      };
      global.civic["unemployed"] = {
        job: "unemployed",
        display: !(global.race["carnivore"] || global.race["soul_eater"]),
        workers: global.race["carnivore"] || global.race["soul_eater"] ? 0 : global.civic.free,
        max: -1
      };
      if (global.civic.d_job === "unemployed" && (global.race["carnivore"] || global.race["soul_eater"])) {
        global.civic.d_job = "hunter";
      }
      delete global.civic.free;
    }
  }
  if (convertVersion(global["version"]) < 100033) {
    if (global.hasOwnProperty("special") && global.special.hasOwnProperty("egg")) {
      global.special.egg["2020"] = JSON.parse(JSON.stringify(global.special["egg"]));
      delete global.special.egg.egg1;
      delete global.special.egg.egg2;
      delete global.special.egg.egg3;
      delete global.special.egg.egg4;
      delete global.special.egg.egg5;
      delete global.special.egg.egg6;
      delete global.special.egg.egg7;
      delete global.special.egg.egg8;
      delete global.special.egg.egg9;
      delete global.special.egg.egg10;
      delete global.special.egg.egg11;
      delete global.special.egg.egg12;
    }
  }
  if (convertVersion(global["version"]) < 100035) {
    if (global.race["terrifying"]) {
      delete global.tech["trade"];
      delete global.city["trade"];
    }
  }
  if (convertVersion(global["version"]) < 100040) {
    const dt = /* @__PURE__ */ new Date();
    if (dt.getFullYear() === 2021 && dt.getMonth() === 3 && dt.getDate() <= 14 && global.race.hasOwnProperty("species") && global.race.species === "wolven") {
      global.race["hrt"] = "wolven";
    }
  }
  if (convertVersion(global["version"]) < 100041) {
    global["event"] = {
      t: 499,
      l: false
    };
    global["m_event"] = {
      t: 99,
      l: false
    };
  }
  if (convertVersion(global["version"]) < 101e3) {
    if (global.race["jtype"] && global.race["jtype"] === "animal") {
      global.race["jtype"] = "omnivore";
    }
    if (global.hasOwnProperty("custom") && global.custom.hasOwnProperty("race0") && global.custom.race0.hasOwnProperty("genus") && global.custom.race0.genus === "animal") {
      global.custom.race0.genus = "omnivore";
    }
    if (global.portal.hasOwnProperty("mechbay")) {
      for (let i = 0; i < global.portal.mechbay.mechs.length; i++) {
        if (!global.portal.mechbay.mechs[i].hasOwnProperty("infernal")) {
          global.portal.mechbay.mechs[i]["infernal"] = false;
        }
      }
    }
    if (global.hasOwnProperty("stats") && global.stats.hasOwnProperty("achieve") && global.stats.achieve.hasOwnProperty("genus_animal")) {
      global.stats.achieve["genus_carnivore"] = global.stats.achieve.genus_animal;
      delete global.stats.achieve.genus_animal;
    }
  }
  if (convertVersion(global["version"]) < 101001) {
    if (global.hasOwnProperty("race") && global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("config") && global.race.governor.config.hasOwnProperty("merc")) {
      global.race.governor.config.merc["reserve"] = 100;
    }
  }
  if (convertVersion(global["version"]) < 101002) {
    if (global.race.hasOwnProperty("frenzy")) {
      global.race["blood_thirst"] = global.race["frenzy"];
      delete global.race["frenzy"];
      if (global.city.hasOwnProperty("morale") && global.city.morale.hasOwnProperty("frenzy")) {
        global.city.morale["blood_thirst"] = global.city.morale["frenzy"];
        delete global.city.morale["frenzy"];
      }
    }
    if (global.hasOwnProperty("custom") && global.custom.hasOwnProperty("race0") && global.custom.race0.hasOwnProperty("traits")) {
      for (let i = 0; i < global.custom.race0.traits.length; i++) {
        if (global.custom.race0.traits[i] === "frenzy") {
          global.custom.race0.traits[i] = "blood_thirst";
        }
      }
    }
    if (global.race["jtype"] && global.race["jtype"] === "omnivore") {
      global.race["jtype"] = "carnivore";
    }
    if (global.hasOwnProperty("custom") && global.custom.hasOwnProperty("race0") && global.custom.race0.hasOwnProperty("genus") && global.custom.race0.genus === "omnivore") {
      global.custom.race0.genus = "carnivore";
    }
  }
  if (convertVersion(global["version"]) < 101010) {
    if (global.hasOwnProperty("settings") && !global.settings.hasOwnProperty("q_merge")) {
      global.settings["q_merge"] = "merge_nearby";
    }
  }
  if (convertVersion(global["version"]) < 101011) {
    if (global.hasOwnProperty("settings") && !global.settings.hasOwnProperty("msgFilters")) {
      global.settings["msgFilters"] = {
        all: true,
        progress: true,
        queue: global["queue"] && global.queue.display,
        building_queue: global["r_queue"] && global.r_queue.display,
        research_queue: global["r_queue"] && global.r_queue.display,
        combat: global.civic["garrison"] && global.civic.garrison.display,
        spy: global.tech["spy"] && global.tech.spy >= 2,
        events: true,
        major_events: true,
        minor_events: true,
        achievements: global.stats["achieve"] && Object.keys(global.stats.achieve).length > 0 || global.stats["feat"] && Object.keys(global.stats.feat).length > 0,
        hell: global.settings.showPortal || global.stats.blackhole || global.stats.ascend || global.stats.descend
      };
    }
    if (global.race.hasOwnProperty("inflation")) {
      ["supercollider", "stock_exchange", "launch_facility", "monuments", "railway", "roid_eject", "nexus", "syphon"].forEach(function(arpa2) {
        if (global.tech.hasOwnProperty(arpa2)) {
          global.race.inflation += global.tech[arpa2] * 10;
        }
      });
    }
  }
  if (convertVersion(global["version"]) < 101012) {
    if (global.civic["garrison"]) {
      global.civic.garrison["rate"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 101014) {
    if (global.hasOwnProperty("settings") && global.settings.hasOwnProperty("msgFilters")) {
      Object.keys(global.settings.msgFilters).forEach(function(filter) {
        global.settings.msgFilters[filter] = {
          unlocked: global.settings.msgFilters[filter] ? true : false,
          vis: global.settings.msgFilters[filter] ? true : false,
          max: 60,
          save: 3
        };
      });
    }
    if (global.hasOwnProperty("lastMsg") && global.lastMsg) {
      let lastMsg = {};
      message_filters.forEach(function(filter) {
        lastMsg[filter] = [];
      });
      global.lastMsg.forEach(function(msg) {
        if (msg.t) {
          msg.t.forEach(function(tag) {
            lastMsg[tag].push({ m: msg.m, c: msg.c });
          });
        } else {
          lastMsg.all.push({ m: msg.m, c: msg.c });
        }
      });
      global.lastMsg = lastMsg;
    }
  }
  if (convertVersion(global["version"]) <= 101014 && !global["revision"]) {
    if (global.race["cataclysm"] && global.race["universe"] && global.race["universe"] === "magic" && global.tech["magic"] && global.tech["magic"] >= 2) {
      global.space["pylon"] = { count: 0 };
    }
  }
  if (convertVersion(global["version"]) < 101015) {
    if (global.hasOwnProperty("special") && global.special.hasOwnProperty("trick")) {
      global.special.trick["2020"] = JSON.parse(JSON.stringify(global.special["trick"]));
      delete global.special.trick.trick1;
      delete global.special.trick.trick2;
      delete global.special.trick.trick3;
      delete global.special.trick.trick4;
      delete global.special.trick.trick5;
      delete global.special.trick.trick6;
      delete global.special.trick.trick7;
      delete global.special.trick.trick8;
      delete global.special.trick.trick9;
      delete global.special.trick.trick10;
      delete global.special.trick.trick11;
      delete global.special.trick.trick12;
    }
  }
  if (convertVersion(global["version"]) < 102e3) {
    if (global.hasOwnProperty("portal") && global.portal.hasOwnProperty("fortress") && !global.portal.fortress.hasOwnProperty("nocrew")) {
      global.portal.fortress["nocrew"] = false;
    }
    if (global.city.hasOwnProperty("smelter") && !global.city.smelter.hasOwnProperty("Iridium")) {
      global.city.smelter["Iridium"] = 0;
    }
    if (global.hasOwnProperty("portal") && global.portal.hasOwnProperty("mechbay") && !global.portal.mechbay.hasOwnProperty("active")) {
      global.portal.mechbay["active"] = 0;
      global.portal.mechbay["scouts"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 102001) {
    if (global.race["blood_thirst"] && global.race.blood_thirst > 3) {
      global.race.blood_thirst = 1;
    }
    if (global.race["rainbow"] && global.race.rainbow > 3) {
      global.race.rainbow = 1;
    }
  }
  if (convertVersion(global["version"]) < 102005) {
    if (!global.stats["cores"] && global.race.hasOwnProperty("AICore")) {
      global.stats["cores"] = global.race.AICore.count;
    }
  }
  if (convertVersion(global["version"]) < 102006) {
    if (global.race["artifical"]) {
      if (global.race["calm"]) {
        if (global.resource.hasOwnProperty("Zen")) {
          global.resource.Zen.display = true;
        }
        global.city["meditation"] = { count: 0 };
      }
      if (global.race["cannibalize"]) {
        global.city["s_alter"] = {
          count: 0,
          rage: 0,
          mind: 0,
          regen: 0,
          mine: 0,
          harvest: 0
        };
      }
      if (global.race["magnificent"]) {
        global.city["shrine"] = {
          count: 0,
          morale: 0,
          metal: 0,
          know: 0,
          tax: 0
        };
      }
    }
  }
  if (convertVersion(global["version"]) < 102007) {
    if (global.stats.hasOwnProperty("achieve")) {
      delete global.stats.achieve["extinct_sludge"];
    }
  }
  if (convertVersion(global["version"]) < 102012) {
    if (global.city.hasOwnProperty("ptrait")) {
      global.city.ptrait = global.city.ptrait === "none" ? [] : [global.city.ptrait];
    }
    if (global.tech["hell_ruins"] && global.tech.hell_ruins >= 3) {
      global.tech["hell_vault"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 102015) {
    if (global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("tasks")) {
      for (let task in global.race.governor.tasks) {
        if (global.race.governor.tasks[task] === "asssemble") {
          global.race.governor.tasks[task] = "assemble";
        }
      }
    }
    if (global["settings"] && global.settings.hasOwnProperty("restoreCheck")) {
      delete global.settings["restoreCheck"];
    }
  }
  if (convertVersion(global["version"]) < 102017) {
    if (global.portal.hasOwnProperty("fortress")) {
      global.portal.observe = {
        settings: {
          expanded: false,
          average: false,
          hyperSlow: false,
          display: "game_days",
          dropKills: true,
          dropGems: true
        },
        stats: {
          total: {
            start: { year: global.city.calendar.year, day: global.city.calendar.day },
            days: 0,
            wounded: 0,
            died: 0,
            revived: 0,
            surveyors: 0,
            sieges: 0,
            kills: {
              drones: 0,
              patrols: 0,
              sieges: 0,
              guns: 0,
              soul_forge: 0,
              turrets: 0
            },
            gems: {
              patrols: 0,
              guns: 0,
              soul_forge: 0,
              crafted: 0,
              turrets: 0
            }
          },
          period: {
            start: { year: global.city.calendar.year, day: global.city.calendar.day },
            days: 0,
            wounded: 0,
            died: 0,
            revived: 0,
            surveyors: 0,
            sieges: 0,
            kills: {
              drones: 0,
              patrols: 0,
              sieges: 0,
              guns: 0,
              soul_forge: 0,
              turrets: 0
            },
            gems: {
              patrols: 0,
              guns: 0,
              soul_forge: 0,
              crafted: 0,
              turrets: 0
            }
          }
        },
        graphID: 0,
        graphs: {}
      };
    }
    if (global.tech.hasOwnProperty("genetics") && global.tech.genetics > 1 && global.hasOwnProperty("arpa")) {
      if (!global.arpa.hasOwnProperty("sequence")) {
        global.arpa["sequence"] = {
          max: 5e4,
          progress: 0,
          time: 5e4,
          on: false
        };
      }
      if (!global.arpa.sequence["boost"]) {
        global.arpa.sequence["boost"] = false;
      }
      if (!global.arpa.sequence["auto"]) {
        global.arpa.sequence["auto"] = false;
      }
      if (!global.arpa.sequence["labs"]) {
        global.arpa.sequence["labs"] = 0;
      }
    }
  }
  if (convertVersion(global["version"]) < 102021) {
    if (global.hasOwnProperty("custom") && !global.custom.hasOwnProperty("race0")) {
      let race = global.race.hasOwnProperty("species") ? global.race.species : "protoplasm";
      if (global.galaxy.hasOwnProperty("alien1") && global.galaxy.alien1.id === "custom") {
        global.galaxy.alien1.id = race === "human" ? "elven" : "human";
      }
      if (global.galaxy.hasOwnProperty("alien2") && global.galaxy.alien2.id === "custom") {
        global.galaxy.alien2.id = race === "orc" || global.galaxy.alien1.id === "orc" ? "cath" : "orc";
      }
    }
  }
  if (convertVersion(global["version"]) < 103e3) {
    if (!global.hasOwnProperty("tauceti")) {
      global["tauceti"] = {};
    }
    if (global.race.species === "protoplasm") {
      if (global.evolution.hasOwnProperty("sexual_reproduction")) {
        global.tech["evo"] = global.evolution.sexual_reproduction.count > 0 ? 2 : 1;
        delete global.evolution["sexual_reproduction"];
      }
      [
        ["phagocytosis", { evo: 3, evo_animal: 1 }],
        ["chloroplasts", { evo: 3, evo_plant: 1 }],
        ["chitin", { evo: 3, evo_fungi: 1 }],
        ["exterminate", { evo: 7, evo_synthetic: 2 }],
        ["multicellular", { evo: 4 }],
        ["spores", { evo: 5 }],
        ["poikilohydric", { evo: 5 }],
        ["bilateral_symmetry", { evo: 5, evo_insectoid: 1, evo_mammals: 1, evo_eggshell: 1, evo_aquatic: 1, evo_fey: 1, evo_sand: 1, evo_heat: 1, evo_polar: 1 }],
        ["bryophyte", { evo: 7 }],
        ["athropods", { evo: 7, evo_insectoid: 2 }],
        ["mammals", { evo: 6, evo_humanoid: 1, evo_giant: 1, evo_small: 1, evo_animalism: 1, evo_demonic: 1, evo_angelic: 1 }],
        ["humanoid", { evo: 7, evo_humanoid: 2 }],
        ["gigantism", { evo: 7, evo_giant: 2 }],
        ["dwarfism", { evo: 7, evo_small: 2 }],
        ["animalism", { evo: 7, evo_animalism: 2 }],
        ["carnivore", { evo_animalism: 3, evo_carnivore: 2 }],
        ["herbivore", { evo_animalism: 3, evo_herbivore: 2 }],
        ["omnivore", { evo_animalism: 3, evo_omnivore: 2 }],
        ["celestial", { evo: 7, evo_angelic: 2 }],
        ["demonic", { evo: 7, evo_demonic: 2 }],
        ["aquatic", { evo: 7, evo_aquatic: 2 }],
        ["fey", { evo: 7, evo_fey: 2 }],
        ["heat", { evo: 7, evo_heat: 2 }],
        ["polar", { evo: 7, evo_polar: 2 }],
        ["sand", { evo: 7, evo_sand: 2 }],
        ["eggshell", { evo: 6, evo_eggshell: 2 }],
        ["endothermic", { evo: 7, evo_avian: 2 }],
        ["ectothermic", { evo: 7, evo_reptilian: 2 }],
        ["bunker", { evo_challenge: 1 }]
      ].forEach(function(step) {
        if (global.evolution.hasOwnProperty(step[0]) && global.evolution[step[0]].count > 0) {
          for (let [key, value] of Object.entries(step[1])) {
            global.tech[key] = value;
          }
        }
        delete global.evolution[step[0]];
      });
      global.evolution["mloaded"] = 1;
      global.evolution["gmloaded"] = 1;
    }
  }
  if (convertVersion(global["version"]) < 103001) {
    if (!global.hasOwnProperty("prestige")) {
      global.prestige = {};
    }
    if (global.race.Plasmid && global.race.Plasmid.hasOwnProperty("anti")) {
      global.prestige["AntiPlasmid"] = { count: global.race.Plasmid.anti };
    }
    ["Plasmid", "Phage", "AICore", "Dark", "Harmony"].forEach(function(res) {
      if (global.race.hasOwnProperty(res)) {
        global.prestige[res] = { count: global.race[res].count };
        delete global.race[res];
      }
    });
    ["Artifact", "Blood_Stone"].forEach(function(res) {
      if (global.resource.hasOwnProperty(res)) {
        global.prestige[res] = { count: global.resource[res].amount };
        delete global.resource[res];
      }
    });
    if (!global.stats.hasOwnProperty("synth") && global.race.hasOwnProperty("srace")) {
      global.stats["synth"] = {};
      global.stats.synth[global.race.srace] = true;
    }
    if (global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("config") && global.race.governor.config.hasOwnProperty("trash")) {
      ["Infernite", "Elerium", "Copper", "Iron"].forEach(function(res) {
        if (global.race.governor.config.trash.hasOwnProperty(res) && typeof global.race.governor.config.trash[res] === "number") {
          global.race.governor.config.trash[res] = { v: global.race.governor.config.trash[res], s: true };
        }
      });
    }
  }
  if (convertVersion(global["version"]) < 103002) {
    if (global.portal.hasOwnProperty("observe") && global.portal.observe.hasOwnProperty("stats")) {
      global.portal.observe.stats.period.gems["surveyors"] = 0;
      global.portal.observe.stats.total.gems["surveyors"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 103011) {
    if (global.city.hasOwnProperty("slave_pen") && global.city.slave_pen.hasOwnProperty("slaves")) {
      global.resource.Slave.amount = global.city.slave_pen.slaves;
      delete global.city.slave_pen.slaves;
    }
  }
  if (convertVersion(global["version"]) < 103014) {
    if (global.race["cataclysm"] && !global.race["start_cataclysm"]) {
      global.civic.craftsman.display = true;
    }
    if (global.race["lone_survivor"] && (global.tauceti["tau_factory"] && global.tauceti.tau_factory.count > 0 || global.tauceti["womling_station"] && global.tauceti.womling_station.count > 0)) {
      global.civic.craftsman.display = true;
    }
  }
  if (convertVersion(global["version"]) <= 103015) {
    if (global.portal.hasOwnProperty("harbour")) {
      global.portal["harbor"] = global.portal.harbour;
      delete global.portal.harbour;
    }
  }
  if (convertVersion(global["version"]) <= 103017) {
    if (global.race["broody"]) {
      global.race["gloomy"] = global.race["broody"];
      delete global.race["broody"];
    }
  }
  if (convertVersion(global["version"]) <= 104e3) {
    if (global.city.hasOwnProperty("shrine") && !global.city.shrine.hasOwnProperty("cycle")) {
      global.city.shrine["cycle"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 104001) {
    if (global.tech["elysium"] && global.tech.elysium >= 18) {
      global.tech.elysium--;
      if (global.tech.cement && !global.race["flier"]) {
        global.tech.cement = 8;
      }
    }
  }
  if (convertVersion(global["version"]) < 104002) {
    if (global.city["amphitheatre"] && !global.city.amphitheatre.hasOwnProperty("evil")) {
      global.city.amphitheatre["evil"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 104003) {
    if (global.portal.hasOwnProperty("observe") && global.portal.observe.hasOwnProperty("stats")) {
      global.portal.observe.stats.period.gems["compactor"] ??= 0;
      global.portal.observe.stats.total.gems["compactor"] ??= 0;
    }
  }
  if (convertVersion(global["version"]) <= 104003) {
    if (global.race["pet"] && !global.race.pet.hasOwnProperty("event")) {
      global.race.pet["event"] = 0;
      global.race.pet["pet"] = 0;
    }
  }
  if (convertVersion(global["version"]) < 104008) {
    if (global.race.hasOwnProperty("modified")) {
      let count = global.race["modified"];
      global.race["modified"] = {
        t: count,
        nr: 0,
        na: 0,
        pr: 0,
        pa: 0
      };
    }
  }
  if (convertVersion(global["version"]) < 104009) {
    if (global.city["banquet"] && !global.city["banquet"].level) {
      global.city["banquet"].level = global.city["banquet"].count;
      global.city["banquet"].count = Math.min(1, global.city["banquet"].count);
    }
  }
  global["version"] = "1.4.9";
  delete global["revision"];
  delete global["beta"];
  if (!global.hasOwnProperty("prestige")) {
    global.prestige = {};
  }
  ["Plasmid", "AntiPlasmid", "Phage", "Dark", "Harmony", "AICore", "Artifact", "Blood_Stone", "Supercoiled"].forEach(function(res) {
    if (!global.prestige.hasOwnProperty(res)) {
      global.prestige[res] = { count: 0 };
    }
  });
  if (!global.hasOwnProperty("power")) {
    global["power"] = [];
  }
  if (!global.hasOwnProperty("support")) {
    global["support"] = {};
  }
  [
    "moon",
    "red",
    "belt",
    "alpha",
    "nebula",
    "gateway",
    "alien2",
    "lake",
    "spire",
    "titan",
    "enceladus",
    "eris",
    "tau_home",
    "tau_red",
    "tau_roid",
    "asphodel"
  ].forEach(function(s) {
    if (!global.support.hasOwnProperty(s)) {
      global.support[s] = [];
    }
  });
  if (global.civic["cement_worker"] && global.civic.cement_worker.impact === 0.25) {
    global.civic.cement_worker.impact = 0.4;
  }
  if (!global["settings"]) {
    global["settings"] = {
      showEvolve: true,
      showAchieve: false,
      animated: true,
      disableReset: false,
      font: "standard",
      q_merge: "merge_nearby",
      cLabels: true,
      theme: "gruvboxDark",
      locale: "en-US",
      icon: "star"
    };
  }
  if (!global.settings["space"]) {
    global.settings["space"] = {};
  }
  if (!global.settings.space.hasOwnProperty("home")) {
    global.settings.space["home"] = true;
  }
  setRegionStates(false);
  if (!global.race.hasOwnProperty("inactiveTraits")) {
    if (global.race["forager"]) {
      global.race.inactiveTraits = { herbivore: global.race["forager"], carnivore: global.race["forager"] };
    } else {
      global.race.inactiveTraits = {};
    }
  }
  if (!global.settings["icon"]) {
    global.settings["icon"] = "star";
  }
  if (!global.settings["showResources"]) {
    global.settings["showResources"] = global.settings["showMarket"];
  }
  if (!global.settings["showStorage"]) {
    if (global.city["warehouse"] || global.city["storage_yard"]) {
      global.settings["showStorage"] = true;
    } else {
      global.settings["showStorage"] = false;
    }
  }
  if (!global.settings.hasOwnProperty("touch")) {
    global.settings["touch"] = false;
  }
  if (!global.settings.hasOwnProperty("lowPowerBalance")) {
    global.settings["lowPowerBalance"] = false;
  }
  if (!global["queue"]) {
    global["queue"] = {
      display: false,
      queue: []
    };
  }
  if (!global["r_queue"]) {
    global["r_queue"] = {
      display: false,
      queue: []
    };
  }
  if (!global["queue"]["rename"]) {
    global.queue["rename"] = false;
  }
  if (!global["queue"]["max"]) {
    global.queue["max"] = 0;
  }
  if (!global["r_queue"]["max"]) {
    global.r_queue["max"] = 0;
  }
  if (!global["queue"]["pause"]) {
    global.queue["pause"] = false;
  }
  if (!global["r_queue"]["pause"]) {
    global.r_queue["pause"] = false;
  }
  if (!global["lastMsg"]) {
    global["lastMsg"] = {};
  }
  if (!global.settings["msgFilters"]) {
    global.settings["msgFilters"] = {};
  }
  ["all", "progress", "events", "major_events", "minor_events"].forEach(function(filter) {
    if (!global.settings.msgFilters[filter]) {
      global.settings.msgFilters[filter] = {
        unlocked: true,
        vis: true,
        max: 60,
        save: 3
      };
    }
  });
  message_filters.forEach(function(filter) {
    if (!global.lastMsg[filter]) {
      global.lastMsg[filter] = [];
    }
    if (!global.settings.msgFilters[filter]) {
      global.settings.msgFilters[filter] = {
        unlocked: false,
        vis: false,
        max: 60,
        save: 3
      };
    }
  });
  if (!global.settings["msgQueueHeight"]) {
    global.settings["msgQueueHeight"] = $(`#msgQueue`).outerHeight();
    global.settings["buildQueueHeight"] = $(`#buildQueue`).outerHeight();
  }
  if (!global["space"]) {
    global["space"] = {};
  }
  if (!global["starDock"]) {
    global["starDock"] = {};
  }
  if (!global["interstellar"]) {
    global["interstellar"] = {};
  }
  if (!global["galaxy"]) {
    global["galaxy"] = {};
  }
  if (!global["eden"]) {
    global["eden"] = {};
  }
  if (global.interstellar["mass_ejector"] && !global.interstellar.mass_ejector["Bolognium"]) {
    global.interstellar.mass_ejector["Bolognium"] = 0;
  }
  if (global.interstellar["mass_ejector"] && !global.interstellar.mass_ejector["Vitreloy"]) {
    global.interstellar.mass_ejector["Vitreloy"] = 0;
  }
  if (global.interstellar["mass_ejector"] && !global.interstellar.mass_ejector["Orichalcum"]) {
    global.interstellar.mass_ejector["Orichalcum"] = 0;
  }
  if (global.interstellar["mass_ejector"] && !global.interstellar.mass_ejector["Nanoweave"]) {
    global.interstellar.mass_ejector["Nanoweave"] = 0;
  }
  if (global.interstellar["mass_ejector"] && !global.interstellar.mass_ejector["Scarletite"]) {
    global.interstellar.mass_ejector["Scarletite"] = 0;
  }
  if (!global.hasOwnProperty("pillars")) {
    global["pillars"] = {};
  }
  if (!global.settings.space["alpha"]) {
    global.settings.space["alpha"] = false;
    global.settings.space["proxima"] = false;
    global.settings.space["nebula"] = false;
    global.settings.space["neutron"] = false;
    global.settings.space["blackhole"] = false;
  }
  if (!global.settings["showAchieve"]) {
    global.settings["showAchieve"] = false;
  }
  if (!global.settings["locale"]) {
    global.settings["locale"] = "en-US";
  }
  if (typeof global.settings.pause === "undefined") {
    global.settings["pause"] = false;
  }
  if (typeof global.settings.mKeys === "undefined") {
    global.settings["mKeys"] = true;
  }
  if (typeof global.settings.keyMap === "undefined") {
    global.settings["keyMap"] = {
      x10: "Control",
      //17
      x25: "Shift",
      //16
      x100: "Alt",
      //18
      q: "q"
      //81
    };
  }
  if (typeof global.settings.keyMap.showCiv === "undefined") {
    global.settings.keyMap["showCiv"] = "1";
    global.settings.keyMap["showCivic"] = "2";
    global.settings.keyMap["showResearch"] = "3";
    global.settings.keyMap["showResources"] = "4";
    global.settings.keyMap["showGenetics"] = "5";
    global.settings.keyMap["showAchieve"] = "6";
    global.settings.keyMap["settings"] = "7";
  }
  delete global.settings.keyMap["d"];
  if (typeof global.settings.qAny === "undefined") {
    global.settings["qAny"] = false;
  }
  if (typeof global.settings.sPackOn === "undefined") {
    global.settings["sPackOn"] = true;
  }
  if (typeof global.settings.qAny_res === "undefined") {
    global.settings["qAny_res"] = false;
  }
  if (typeof global.settings.sPackMsg === "undefined") {
    global.settings["sPackMsg"] = false;
  }
  if (typeof global.settings.expose === "undefined") {
    global.settings["expose"] = false;
  }
  if (typeof global.settings.alwaysPower === "undefined") {
    global.settings["alwaysPower"] = false;
  }
  if (typeof global.settings.tabLoad === "undefined") {
    global.settings["tabLoad"] = false;
  }
  if (typeof global.settings.boring === "undefined") {
    global.settings["boring"] = false;
  }
  if (!global.settings.hasOwnProperty("mtorder")) {
    global.settings["mtorder"] = [];
  }
  if (!global.settings.hasOwnProperty("resBar")) {
    global.settings["resBar"] = {};
  }
  function setupStats() {
    [
      "reset",
      "plasmid",
      "antiplasmid",
      "universes",
      "phage",
      "starved",
      "tstarved",
      "died",
      "tdied",
      "sac",
      "tsac",
      "know",
      "tknow",
      "portals",
      "dkills",
      "attacks",
      "cfood",
      "tfood",
      "cstone",
      "tstone",
      "clumber",
      "tlumber",
      "mad",
      "bioseed",
      "cataclysm",
      "blackhole",
      "ascend",
      "descend",
      "apotheosis",
      "terraform",
      "aiappoc",
      "matrix",
      "retire",
      "eden",
      "geck",
      "dark",
      "harmony",
      "blood",
      "cores",
      "artifact",
      "supercoiled",
      "cattle",
      "tcattle",
      "murders",
      "tmurders",
      "psykill",
      "tpsykill",
      "pdebt",
      "uDead"
    ].forEach(function(k) {
      if (!global.stats.hasOwnProperty(k)) {
        global.stats[k] = 0;
      }
    });
    if (!global.stats["achieve"]) {
      global.stats["achieve"] = {};
    }
    if (!global.stats["feat"]) {
      global.stats["feat"] = {};
    }
    if (!global.stats.hasOwnProperty("womling")) {
      global.stats["womling"] = {
        god: { l: 0 },
        lord: { l: 0 },
        friend: { l: 0 }
      };
    }
    if (!global.stats["spire"]) {
      global.stats["spire"] = {};
    }
    if (!global.stats["synth"]) {
      global.stats["synth"] = {};
    }
    if (!global.stats.hasOwnProperty("banana")) {
      global.stats["banana"] = {
        b1: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b2: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b3: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b4: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b5: { l: false, h: false, a: false, e: false, m: false, mg: false }
      };
    }
    if (!global.stats.hasOwnProperty("endless_hunger")) {
      global.stats["endless_hunger"] = {
        b1: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b2: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b3: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b4: { l: false, h: false, a: false, e: false, m: false, mg: false },
        b5: { l: false, h: false, a: false, e: false, m: false, mg: false }
      };
    }
    if (!global.stats.hasOwnProperty("death_tour")) {
      global.stats["death_tour"] = {
        ct: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 },
        bh: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 },
        di: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 },
        ai: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 },
        vc: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 },
        md: { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 }
      };
    }
    if (global.stats["death_tour"] && !global.stats.death_tour.hasOwnProperty("md")) {
      global.stats.death_tour["md"] = { l: 0, h: 0, a: 0, e: 0, m: 0, mg: 0 };
    }
    if (!global.stats["warlord"]) {
      global.stats["warlord"] = { k: false, p: false, a: false, r: false, g: false };
    }
  }
  setupStats();
  if (!global.race["seeded"]) {
    global.race["seeded"] = false;
  }
  if (!global.race["deterioration"]) {
    global.race["deterioration"] = 0;
  }
  if (!global.race["gene_fortify"]) {
    global.race["gene_fortify"] = 0;
  }
  if (!global.race["old_gods"]) {
    global.race["old_gods"] = "none";
  }
  if (!global.race["universe"]) {
    global.race["universe"] = "standard";
  }
  if (!global.genes["minor"]) {
    global.genes["minor"] = {};
  }
  if (!global.race["minor"]) {
    global.race["minor"] = {};
  }
  if (!global.hasOwnProperty("govern")) {
    global["govern"] = {
      governor: {},
      candidate: [],
      policy: {}
    };
  }
  if (!global.settings.hasOwnProperty("showMil")) {
    global.settings["showMil"] = true;
  }
  if (!global.settings.hasOwnProperty("showPowerGrid")) {
    global.settings["showPowerGrid"] = global.hasOwnProperty("tech") && global.tech.hasOwnProperty("high_tech") && global.tech.high_tech >= 2 ? true : false;
  }
  if (!global.settings["affix"]) {
    global.settings["affix"] = "si";
  }
  if (!global["special"]) {
    global["special"] = {};
  }
  if (!global.special["gift"]) {
    global.special["gift"] = {};
  }
  if (!global.special.hasOwnProperty("egg")) {
    global.special["egg"] = {};
  }
  if (!global.special.hasOwnProperty("trick")) {
    global.special["trick"] = {
      trick1: false,
      trick2: false,
      trick3: false,
      trick4: false,
      trick5: false,
      trick6: false,
      trick7: false,
      trick8: false,
      trick9: false,
      trick10: false,
      trick11: false,
      trick12: false
    };
  }
  if (!global.civic["govern"]) {
    global.civic["govern"] = {
      type: "oligarchy",
      rev: 2e3,
      fr: 0
    };
  }
  global.civic.govern.fr = 0;
  if (!global.hasOwnProperty("custom")) {
    global["custom"] = {};
  }
  if (global.custom.hasOwnProperty("planet") && global.custom.planet.hasOwnProperty("biome")) {
    delete global.custom.planet;
  }
  if (global.city.hasOwnProperty("smelter") && !global.city.smelter.hasOwnProperty("cap")) {
    global.city.smelter["cap"] = 0;
  }
  if (!global.civic["homeless"]) {
    global.civic.homeless = 0;
  }
  if (!global.civic["foreign"]) {
    global.civic["foreign"] = {
      gov0: {
        unrest: 0,
        hstl: 100,
        mil: 100,
        eco: 75,
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      },
      gov1: {
        unrest: 0,
        hstl: 0,
        mil: 150,
        eco: 100,
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      },
      gov2: {
        unrest: 0,
        hstl: 50,
        mil: 250,
        eco: 150,
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      }
    };
  }
  if (typeof global.civic.foreign.gov0["trn"] === "undefined") {
    global.civic.foreign.gov0["trn"] = 0;
    global.civic.foreign.gov1["trn"] = 0;
    global.civic.foreign.gov2["trn"] = 0;
    global.civic.foreign.gov0["sab"] = 0;
    global.civic.foreign.gov1["sab"] = 0;
    global.civic.foreign.gov2["sab"] = 0;
    global.civic.foreign.gov0["act"] = "none";
    global.civic.foreign.gov1["act"] = "none";
    global.civic.foreign.gov2["act"] = "none";
  }
  if (typeof global.civic.foreign.gov0["name"] !== "undefined" && global.civic.foreign.gov0.name.s1 === "evo_organism_title") {
    global.civic.foreign.gov0.name.s1 = "Northern";
  }
  if (typeof global.civic.foreign.gov1["name"] !== "undefined" && global.civic.foreign.gov1.name.s1 === "evo_organism_title") {
    global.civic.foreign.gov1.name.s1 = "Southern";
  }
  if (typeof global.civic.foreign.gov2["name"] !== "undefined" && global.civic.foreign.gov2.name.s1 === "evo_organism_title") {
    global.civic.foreign.gov2.name.s1 = "Divine";
  }
  {
    if (global.hasOwnProperty("special") && global.special.hasOwnProperty("gift")) {
      const sdate = new Date(global.stats.start);
      const cdate = /* @__PURE__ */ new Date();
      Object.keys(global.special.gift).forEach(function(gy) {
        let year = Number(gy.substring(1, 5));
        if (year < sdate.getFullYear() || cdate.getFullYear() < year || cdate.getFullYear() === year && cdate.getMonth() !== 11) {
          delete global.special.gift[gy];
        }
      });
    }
  }
  if (!global.settings["queuestyle"]) {
    global.settings["queuestyle"] = "standardqueuestyle";
  }
  if (!global.settings["q_resize"]) {
    global.settings.q_resize = "auto";
  }
  $("html").addClass(global.settings.theme);
  $("html").addClass(global.settings.queuestyle);
  if (!global.settings["at"]) {
    global.settings["at"] = 0;
  }
  if (!global.city["morale"]) {
    global.city["morale"] = {
      current: 0,
      cap: 0,
      potential: 0,
      unemployed: 0,
      stress: 0,
      entertain: 0,
      leadership: 0,
      season: 0,
      weather: 0,
      warmonger: 0,
      rev: 0
    };
  }
  if (!global.city["sun"]) {
    global.city["sun"] = 0;
  }
  if (!global.city["cold"]) {
    global.city["cold"] = 0;
  }
  if (!global.city["hot"]) {
    global.city["hot"] = 0;
  }
  [
    "unemployed",
    "leadership",
    "warmonger",
    "rev",
    "tax",
    "shrine",
    "blood_thirst",
    "broadcast",
    "vr",
    "zoo",
    "bliss_den",
    "restaurant",
    "cap",
    "potential"
  ].forEach(function(k) {
    if (!global.city.morale.hasOwnProperty(k)) {
      global.city.morale[k] = 0;
    }
  });
  if (!global.city["calendar"]) {
    global.city["calendar"] = {
      day: 0,
      year: 0,
      season: 0,
      weather: 2,
      temp: 1,
      moon: 0,
      wind: 0,
      orbit: 365
    };
  }
  if (!global.city.calendar["season"]) {
    global.city.calendar["season"] = 0;
  }
  if (!global.city.calendar["moon"]) {
    global.city.calendar["moon"] = 0;
  }
  if (!global.city.calendar["wind"]) {
    global.city.calendar["wind"] = 0;
  }
  if (!global.city["powered"]) {
    global.city["powered"] = false;
    global.city["power"] = 0;
  }
  if (!global.city["biome"]) {
    global.city["biome"] = "grassland";
  }
  if (!global.city["geology"]) {
    global.city["geology"] = {};
  }
  if (!global.city["market"]) {
    global.city["market"] = {
      qty: 10,
      mtrade: 0,
      trade: 0,
      active: false
    };
  }
  if (global.city["foundry"] && !global.city.foundry["Mythril"]) {
    global.city.foundry["Mythril"] = 0;
  }
  if (global.city["foundry"] && !global.city.foundry["Aerogel"]) {
    global.city.foundry["Aerogel"] = 0;
  }
  if (global.city["foundry"] && !global.city.foundry["Nanoweave"]) {
    global.city.foundry["Nanoweave"] = 0;
  }
  if (global.city["foundry"] && !global.city.foundry["Scarletite"]) {
    global.city.foundry["Scarletite"] = 0;
  }
  if (global.city["foundry"] && !global.city.foundry["Quantium"]) {
    global.city.foundry["Quantium"] = 0;
  }
  if (!global.settings["arpa"]) {
    global.settings["arpa"] = {
      arpaTabs: 0,
      physics: true,
      genetics: false
    };
  }
  if (!global.settings.arpa["crispr"]) {
    global.settings.arpa["crispr"] = false;
  }
  if (!global.settings.arpa["blood"]) {
    global.settings.arpa["blood"] = false;
  }
  if (!global["arpa"]) {
    global["arpa"] = {};
  }
  if (global.city["factory"]) {
    if (!global.city.factory["Lux"]) {
      global.city.factory["Lux"] = 0;
    }
    if (!global.city.factory["Alloy"]) {
      global.city.factory["Alloy"] = 0;
    }
    if (!global.city.factory["Polymer"]) {
      global.city.factory["Polymer"] = 0;
    }
  }
  if (!global.race["mutation"]) {
    global.race["mutation"] = 0;
  }
  if (!global.race["p_mutation"]) {
    global.race["p_mutation"] = 0;
  }
  if (global.race["old_gods"] && global.race["old_gods"] != "none") {
    global.genes["old_gods"] = 1;
  } else {
    delete global.genes["old_gods"];
  }
  if (global.tech["fanaticism"] && global.tech["theology"] && global.tech["theology"] === 2) {
    global.tech["theology"] = 3;
  }
  if (global.tech["fanaticism"] && global.tech["anthropology"] && !global.genes["transcendence"]) {
    delete global.tech["anthropology"];
  }
  if (global.tech["unify"]) {
    if (global.tech["unify"] === 1) {
      delete global.tech["m_boost"];
      delete global.tech["world_control"];
    }
  }
  if (global.city.hasOwnProperty("spc_casino")) {
    global.space["spc_casino"] = { count: 0, on: 0 };
    delete global.city["spc_casino"];
  }
  if (global.tech.hasOwnProperty("nanoweave")) {
    global.resource.Nanoweave.display = true;
  }
  if (!global.civic["new"]) {
    global.civic["new"] = 0;
  }
  if (!global.race["purgatory"]) {
    global.race["purgatory"] = {};
  }
  ["city", "space", "portal", "eden", "tech"].forEach((item) => {
    if (!global.race["purgatory"][item]) {
      global.race["purgatory"][item] = {};
    }
  });
  if (!global.civic["d_job"]) {
    if (global.race["carnivore"] || global.race["soul_eater"]) {
      global.civic["d_job"] = "hunter";
    } else if (global.tech["agriculture"] && global.tech["agriculture"] >= 1) {
      global.civic["d_job"] = "farmer";
    } else {
      global.civic["d_job"] = "unemployed";
    }
  }
  global.settings.animated = true;
  global.settings.disableReset = false;
  if (global["arpa"] && global.arpa["launch_facility"] && global.arpa.launch_facility.rank > 0 && !global.tech["space"]) {
    global.tech["space"] = 1;
  }
  function newGameData() {
    global["race"] = { species: "protoplasm", gods: "none", old_gods: "none", seeded: false };
    global["seed"] = Math.rand(0, 1e4);
    global["warseed"] = Math.rand(0, 1e4);
    global["new"] = true;
  }
  var keyMap = {
    x10: false,
    x25: false,
    x100: false,
    q: false
  };
  function keyMultiplier() {
    let number = 1;
    if (global.settings["mKeys"]) {
      if (keyMap.x10) {
        number *= 10;
      }
      if (keyMap.x25) {
        number *= 25;
      }
      if (keyMap.x100) {
        number *= 100;
      }
    }
    return number;
  }
  function convertVersion(version) {
    let vNum = version.split(".", 3);
    vNum[0] *= 1e5;
    vNum[1] *= 1e3;
    return Number(vNum[0]) + Number(vNum[1]) + Number(vNum[2]);
  }
  function resizeGame() {
    if ($(window).width() >= 1400 && $("#msgQueue:not(.right)")) {
      let build = $("#buildQueue").detach();
      build.addClass("right");
      build.removeClass("has-text-info");
      let queue = $("#msgQueue").detach();
      queue.addClass("right");
      queue.removeClass("has-text-info");
      queue.css("resize", "none");
      $("#queueColumn").addClass("is-one-quarter");
      $("#queueColumn").append(build);
      $("#queueColumn").append(queue);
      $("#mainColumn").removeClass("is-three-quarters");
      $("#mainColumn").addClass("is-half");
    } else if ($(window).width() < 1400 && $("#msgQueue").hasClass("right")) {
      let build = $("#buildQueue").detach();
      build.removeClass("right");
      build.addClass("has-text-info");
      let queue = $("#msgQueue").detach();
      queue.removeClass("right");
      queue.addClass("has-text-info");
      queue.css("resize", "vertical");
      $("#queueColumn").removeClass("is-one-quarter");
      $("#sideQueue").append(build);
      $("#sideQueue").append(queue);
      $("#mainColumn").removeClass("is-half");
      $("#mainColumn").addClass("is-three-quarters");
    }
  }
  var affix_list = {
    si: ["K", "M", "G", "T", "P", "E", "Z", "Y"],
    sln: ["K", "M", "B", "t", "q", "Q", "s", "S"]
  };
  var numFormatShort = new Intl.NumberFormat(void 0, { maximumFractionDigits: 2, maximumSignificantDigits: 3, roundingMode: "trunc", roundingPriority: "lessPrecision" });
  var numFormatLong = new Intl.NumberFormat(void 0, { maximumFractionDigits: 2, maximumSignificantDigits: 4, roundingMode: "trunc", roundingPriority: "lessPrecision" });
  var ADD_16_ULP = 1 + 16 * Number.EPSILON;
  function sizeApproximation(value, precision = 1, precise = false, exact = false) {
    let absValue = Math.abs(value);
    let oom = Math.floor(Math.log10(absValue));
    absValue *= ADD_16_ULP;
    value = value < 0 ? -absValue : value > 0 ? absValue : value;
    if (exact) {
      return value.toLocaleString(void 0, { maximumFractionDigits: precision, roundingMode: "trunc" });
    } else if (oom < 4 || precise) {
      let maxSigFigs = Math.max(
        oom + 1,
        // Full precision for the integer component of large numbers (at least 1e4)
        precision + 1,
        // Requested precision for values with only 1 leading digit
        5
      );
      return value.toLocaleString(void 0, { maximumSignificantDigits: maxSigFigs, maximumFractionDigits: precision, roundingMode: "trunc", roundingPriority: "lessPrecision" });
    } else {
      const oomMod3 = oom % 3;
      const dispShort = oom === 4;
      const forceSI = global.settings.affix !== "eng" && oom >= 27;
      if (global.settings.affix !== "sci" && !forceSI) {
        oom -= oomMod3;
      }
      let affix;
      if (global.settings.affix === "sci" || global.settings.affix === "eng" || forceSI) {
        affix = "e" + oom;
      } else {
        affix = affix_list[global.settings.affix][oom / 3 - 1];
      }
      value /= 10 ** oom;
      if (dispShort) {
        return numFormatShort.format(value) + affix;
      } else {
        return numFormatLong.format(value) + affix;
      }
    }
  }
  $(window).resize(function() {
    resizeGame();
  });
  function srSpeak(text, priority) {
    var el = document.createElement("div");
    var id = "speak-" + Date.now();
    el.setAttribute("id", id);
    el.setAttribute("aria-live", priority || "polite");
    el.classList.add("sr-only");
    document.body.appendChild(el);
    window.setTimeout(function() {
      document.getElementById(id).innerHTML = text;
    }, 100);
    window.setTimeout(function() {
      document.body.removeChild(document.getElementById(id));
    }, 1e3);
  }
  window.soft_reset = function reset(source) {
    try {
      source = source && source === "replicator" ? "replicator" : "soft";
      gtag("event", "reset", { "end": source });
    } catch (err) {
    }
    if (!source) {
      clearSavedMessages();
    }
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let gecks = global.race.hasOwnProperty("geck") ? global.race.geck : 0;
    if (global.race.hasOwnProperty("gecked")) {
      gecks += global.race.gecked;
      global.stats.geck -= global.race.gecked;
    }
    let replace = {
      species: "protoplasm",
      universe: global.race.universe,
      seeded: global.race.seeded,
      probes: global.race.probes,
      seed: global.race.seed,
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false,
      rejuvenated: global.race.hasOwnProperty("rejuvenated") ? global.race.rejuvenated : false
    };
    if (gecks > 0) {
      replace["geck"] = gecks;
    }
    if (srace) {
      replace["srace"] = srace;
    }
    if (global.race["bigbang"]) {
      replace["bigbang"] = true;
    }
    if (global.race["gods"]) {
      replace["gods"] = global.race.gods;
    }
    if (global.race["old_gods"]) {
      replace["old_gods"] = global.race.old_gods;
    }
    if (global.race["rapid_mutation"] && global.race["rapid_mutation"] > 0) {
      replace["rapid_mutation"] = global.race["rapid_mutation"];
    }
    if (global.race["ancient_ruins"] && global.race["ancient_ruins"] > 0) {
      replace["ancient_ruins"] = global.race["ancient_ruins"];
    }
    if (global.race["bigbang"]) {
      replace.universe = "bigbang";
    }
    if (global.race.hasOwnProperty("corruption")) {
      replace["corruption"] = global.race.corruption;
    }
    global["race"] = replace;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    global.city = {
      calendar: {
        day: 0,
        year: 0,
        weather: 2,
        temp: 1,
        moon: 0,
        wind: 0,
        orbit
      },
      biome,
      ptrait: atmo,
      geology: geo
    };
    if (global.tech["theology"] && global.tech["theology"] >= 1) {
      global.tech = { theology: 1 };
    } else {
      global.tech = {};
    }
    clearStates();
    global.new = true;
    global.seed = Math.rand(0, 1e4);
    global.warseed = Math.rand(0, 1e4);
    global.stats["current"] = Date.now();
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  };
  var webWorker = { w: false, s: false, mt: 250, midRatio: 4, longRatio: 20 };
  var intervals = {};
  function clearSavedMessages() {
    message_filters.forEach(function(filter) {
      if (filter !== "achievements") {
        global.lastMsg[filter] = [];
      }
    });
  }
  function setRegionStates(reset3) {
    let regions = {
      base: [
        "showCiv",
        "showCity",
        "showIndustry",
        "showPowerGrid",
        "showMechLab",
        "showShipYard",
        "showResearch",
        "showCivic",
        "showMil",
        "showResources",
        "showMarket",
        "showStorage",
        "showGenetics",
        "showSpace",
        "showDeep",
        "showGalactic",
        "showPortal",
        "showEden",
        "showOuter",
        "showTau",
        "showEjector",
        "showCargo",
        "showAlchemy",
        "showGovernor",
        "arpa",
        "showPsychic",
        "showWish"
      ],
      space: [
        "moon",
        "red",
        "hell",
        "sun",
        "gas",
        "gas_moon",
        "belt",
        "dwarf",
        "alpha",
        "proxima",
        "nebula",
        "neutron",
        "blackhole",
        "sirius",
        "stargate",
        "gateway",
        "gorddon",
        "alien1",
        "alien2",
        "chthonian",
        "titan",
        "enceladus",
        "triton",
        "eris",
        "kuiper"
      ],
      portal: ["fortress", "badlands", "pit", "ruins", "gate", "lake", "spire", "wasteland"],
      eden: ["asphodel", "elysium", "isle", "palace"],
      tau: ["home", "red", "roid", "gas", "gas2", "star"]
    };
    Object.keys(regions).forEach(function(r) {
      if (r === "base") {
        regions[r].forEach(function(v) {
          if (!global.settings.hasOwnProperty(v) || reset3) {
            global.settings[v] = false;
          }
        });
      } else {
        if (!global.settings.hasOwnProperty(r)) {
          global.settings[r] = {};
        }
        regions[r].forEach(function(v) {
          if (!global.settings[r].hasOwnProperty(v) || reset3) {
            global.settings[r][v] = false;
          }
        });
      }
    });
    [
      "civTabs",
      "govTabs",
      "govTabs2",
      "hellTabs",
      "resTabs",
      "spaceTabs",
      "marketTabs",
      "statsTabs"
    ].forEach(function(k) {
      if (!global.settings.hasOwnProperty(k) || reset3) {
        global.settings[k] = 0;
      }
    });
  }
  function clearStates() {
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    global["queue"] = { display: false, queue: [] };
    global["r_queue"] = { display: false, queue: [] };
    global.space = {};
    global.interstellar = {};
    global.galaxy = {};
    global.portal = {};
    global.eden = {};
    global.starDock = {};
    global.tauceti = {};
    global.civic = { new: 0 };
    global.civic["foreign"] = {
      gov0: {
        unrest: 0,
        hstl: Math.floor(seededRandom(80, 100)),
        mil: Math.floor(seededRandom(75, 125)),
        eco: Math.floor(seededRandom(60, 90)),
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      },
      gov1: {
        unrest: 0,
        hstl: Math.floor(seededRandom(0, 20)),
        mil: Math.floor(seededRandom(125, 175)),
        eco: Math.floor(seededRandom(80, 120)),
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      },
      gov2: {
        unrest: 0,
        hstl: Math.floor(seededRandom(40, 60)),
        mil: Math.floor(seededRandom(200, 300)),
        eco: Math.floor(seededRandom(130, 170)),
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none",
        occ: false,
        anx: false,
        buy: false
      }
    };
    if (!global.genes["blood"]) {
      global.prestige.Blood_Stone.count = 0;
    }
    global.resource = {};
    global.evolution = {};
    global.event = { t: 100, l: false };
    global.m_event = { t: 499, l: false };
    global.stats.days = 0;
    global.stats.know = 0;
    global.stats.starved = 0;
    global.stats.died = 0;
    global.stats.attacks = 0;
    global.stats.dkills = 0;
    global.stats.cfood = 0;
    global.stats.cstone = 0;
    global.stats.clumber = 0;
    global.stats.sac = 0;
    global.stats.cattle = 0;
    global.stats.murders = 0;
    global.stats.uDead = 0;
    global.settings.at = 0;
    global.settings.showEvolve = true;
    global.settings.space.home = true;
    setRegionStates(true);
    global.settings.disableReset = false;
    global.settings.pause = false;
    global.arpa = {};
    delete global.race["hrt"];
    if (global.genes["queue"]) {
      global.tech["queue"] = 1;
      global.queue.display = true;
    }
  }
  window.reset = function reset2() {
    try {
      gtag("event", "reset", { "end": "hard" });
    } catch (err) {
    }
    localStorage.removeItem("evolved");
    global = null;
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    window.location.reload();
  };

  // src/locale.js
  var strings;
  getString(global.settings.locale);
  function loc(key, variables) {
    let string = strings[key];
    if (!string) {
      if (global.settings.expose) {
        console.error(`string ${key} not found`);
        console.log(strings);
      }
      return key;
    }
    if (variables) {
      if (variables instanceof Array) {
        for (let i = 0; i < variables.length; i++) {
          let re2 = new RegExp(`%${i}(?!\\d)`, "g");
          if (!re2.exec(string)) {
            if (global.settings.expose) {
              console.error(`"%${i}" was not found in the string "${key}" to be replace by "${variables[i]}"`);
            }
            continue;
          }
          string = string.replace(re2, variables[i]);
        }
        let re = new RegExp("%\\d+(?!\\d)", "g");
        const results = string.match(re);
        if (results && global.settings.expose) {
          console.error(`${results} was found in the string, but there is no variables to make the replacement`);
        }
      } else {
        if (global.settings.expose) {
          console.error('"variables" need be a instance of "Array"');
        }
      }
    }
    return string;
  }
  function getString(locale) {
    $.ajaxSetup({ async: false });
    let defaultString;
    $.getJSON("strings/strings.json", (data) => {
      defaultString = data;
    });
    if (locale != "en-US") {
      let localeString;
      try {
        $.getJSON(`strings/strings.${locale}.json`, (data) => {
          localeString = data;
        });
      } catch (e) {
        console.error(e, e.stack);
      }
      const defSize = defaultString.length;
      if (localeString) {
        Object.assign(defaultString, localeString);
      }
      if (defaultString.length != defSize && global.settings.expose) {
        console.error(`string.${locale}.json has extra keys.`);
      }
    }
    let string_pack = save.getItem("string_pack") || false;
    if (string_pack && global.settings.sPackOn) {
      let themeString;
      try {
        themeString = JSON.parse(LZString.decompressFromUTF16(string_pack));
      } catch (e) {
        console.error(e, e.stack);
      }
      const defSize = defaultString.length;
      if (themeString) {
        Object.assign(defaultString, themeString);
      }
      if (defaultString.length != defSize && global.settings.expose) {
        console.error(`string pack has extra keys.`);
      }
    }
    $.ajaxSetup({ async: true });
    strings = defaultString;
  }
  var locales = {
    "en-US": "English (US)",
    "es-ES": "Spanish (ESP)",
    "pt-BR": "Portugu\xEAs (BR)",
    "de-DE": "Deutsch",
    "it-IT": "Italiano",
    "ru-RU": "\u0420\u0443\u0441\u0441\u043A\u0438\u0439",
    "cs-CZ": "\u010Ce\u0161tina",
    "pl-PL": "Polski",
    "zh-CN": "\u7B80\u4F53\u4E2D\u6587",
    "zh-TW": "\u7E41\u9AD4\u4E2D\u6587",
    "ko-KR": "\uD55C\uAD6D\uC5B4",
    "im-PL": "Igpay-Atinlay",
    "ja-JP": "\u65E5\u672C\u8A9E"
  };

  // src/arpa.js
  function arpa(type) {
    switch (type) {
      case "Physics":
        physics();
        break;
      case "Genetics":
        genetics();
        break;
      case "Monument":
        return pick_monument();
      case "PhysicsTech":
        return arpaProjects;
      case "GeneTech":
        return genePool;
      case "BloodTech":
        return bloodPool;
      case "Crispr":
        crispr();
        break;
      case "Blood":
        blood();
        break;
    }
  }
  var arpaProjects = {
    lhc: {
      title() {
        return eventActive("fool", 2022) ? loc("arpa_projects_railway_title") : loc("arpa_projects_lhc_title");
      },
      desc() {
        return eventActive("fool", 2022) ? loc("arpa_projects_railway_desc") : loc("arpa_projects_lhc_desc");
      },
      reqs: { high_tech: 6 },
      grant: "supercollider",
      effect(nofool) {
        if (eventActive("fool", 2022) && !nofool) {
          return arpaProjects.railway.effect(true);
        }
        let sc = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? global.race["cataclysm"] ? 20 : 8 : global.race["cataclysm"] ? 10 : 4;
        if (global.tech["storage"] >= 6) {
          if (global.race["warlord"]) {
            return loc("arpa_projects_lhc_warlord2", [loc("portal_twisted_lab_title"), sc, 5]);
          } else if (global.tech["particles"] && global.tech["particles"] >= 4) {
            return global.race["cataclysm"] ? loc("arpa_projects_lhc_cataclysm3", [sc]) : loc("arpa_projects_lhc_effect3", [sc, global.race["orbit_decayed"] ? loc("space_home_satellite_title") : wardenLabel()]);
          } else {
            return global.race["cataclysm"] ? loc("arpa_projects_lhc_cataclysm2", [sc]) : loc("arpa_projects_lhc_effect2", [sc, global.race["orbit_decayed"] ? loc("space_home_satellite_title") : wardenLabel()]);
          }
        } else {
          if (global.race["warlord"]) {
            return loc("arpa_projects_lhc_warlord1", [loc("portal_twisted_lab_title"), sc]);
          } else {
            return global.race["cataclysm"] ? loc("arpa_projects_lhc_cataclysm1", [sc]) : global.tech["isolation"] ? loc("arpa_projects_lhc_iso1", [sc, loc("tech_infectious_disease_lab_alt")]) : loc("arpa_projects_lhc_effect1", [sc, global.race["orbit_decayed"] ? loc("space_home_satellite_title") : wardenLabel()]);
          }
        }
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("lhc", offset, 25e5, 1.05, wiki);
        },
        Knowledge(offset, wiki) {
          return costMultiplier("lhc", offset, 5e5, 1.05, wiki);
        },
        Copper(offset, wiki) {
          return costMultiplier("lhc", offset, 125e3, 1.05, wiki);
        },
        Cement(offset, wiki) {
          return costMultiplier("lhc", offset, 25e4, 1.05, wiki);
        },
        Aluminium(offset, wiki) {
          return costMultiplier("lhc", offset, 35e4, 1.05, wiki);
        },
        Titanium(offset, wiki) {
          return costMultiplier("lhc", offset, 5e4, 1.05, wiki);
        },
        Polymer(offset, wiki) {
          return costMultiplier("lhc", offset, 12e3, 1.05, wiki);
        }
      }
    },
    stock_exchange: {
      title: loc("arpa_projects_stock_exchange_title"),
      desc: loc("arpa_projects_stock_exchange_desc"),
      reqs: { banking: 9 },
      grant: "stock_exchange",
      effect() {
        if (global.race["warlord"]) {
          return loc("arpa_projects_stock_exchange_warlord", [structName("casino"), 5, 1]);
        } else if (global.tech["banking"] >= 10) {
          if (global.race["cataclysm"]) {
            return global.tech["gambling"] && global.tech["gambling"] >= 4 ? loc("arpa_projects_stock_exchange_cataclysm2", [loc("space_red_spaceport_title"), 10, structName("casino"), 5, 1]) : loc("arpa_projects_stock_exchange_cataclysm1", [loc("space_red_spaceport_title"), 10]);
          } else {
            return global.tech["gambling"] && global.tech["gambling"] >= 4 ? loc("arpa_projects_stock_exchange_effect3", [loc("city_bank"), 10, loc(`job_banker`), 2, structName("casino"), 5, 1]) : loc("arpa_projects_stock_exchange_effect2", [loc("city_bank"), 10, loc(`job_banker`), 2]);
          }
        } else {
          return loc("arpa_projects_stock_exchange_effect1", [loc("city_bank"), 10]);
        }
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("stock_exchange", offset, 3e6, 1.06, wiki);
        },
        Plywood(offset, wiki) {
          return costMultiplier("stock_exchange", offset, 25e3, 1.06, wiki);
        },
        Brick(offset, wiki) {
          return costMultiplier("stock_exchange", offset, 2e4, 1.06, wiki);
        },
        Wrought_Iron(offset, wiki) {
          return costMultiplier("stock_exchange", offset, 1e4, 1.06, wiki);
        }
      }
    },
    tp_depot: {
      title: loc("galaxy_gateway_depot"),
      desc: loc("arpa_projects_depot_desc"),
      reqs: { high_tech: 6, storage: 4 },
      grant: "tp_depot",
      path: ["truepath"],
      effect() {
        return loc(global.tech["isolation"] ? "arpa_projects_depot_effect_iso" : "arpa_projects_depot_effect", [5, 50]);
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("tp_depot", offset, 18e5, 1.08, wiki);
        },
        Stone(offset, wiki) {
          return costMultiplier("tp_depot", offset, 75e4, 1.08, wiki);
        },
        Iron(offset, wiki) {
          return costMultiplier("tp_depot", offset, 25e4, 1.08, wiki);
        },
        Alloy(offset, wiki) {
          return costMultiplier("tp_depot", offset, 3e4, 1.08, wiki);
        }
      }
    },
    launch_facility: {
      id: "arpalaunch_facility",
      title: loc("arpa_projects_launch_facility_title"),
      desc: loc("arpa_projects_launch_facility_desc"),
      reqs: { high_tech: 7 },
      condition() {
        return global.race["cataclysm"] || global.race["lone_survivor"] || global.race["warlord"] ? false : true;
      },
      grant: "launch_facility",
      rank: 1,
      queue_complete() {
        return global.tech.space >= 1 ? 0 : 1;
      },
      effect() {
        return loc("arpa_projects_launch_facility_effect1");
      },
      cost: {
        Money(offset) {
          return costMultiplier("launch_facility", offset, 2e6, 1.1);
        },
        Knowledge(offset) {
          return costMultiplier("launch_facility", offset, 5e5, 1.1);
        },
        Cement(offset) {
          return costMultiplier("launch_facility", offset, 15e4, 1.1);
        },
        Oil(offset) {
          return costMultiplier("launch_facility", offset, 2e4, 1.1);
        },
        Sheet_Metal(offset) {
          return costMultiplier("launch_facility", offset, 15e3, 1.1);
        },
        Alloy(offset) {
          return costMultiplier("launch_facility", offset, 25e3, 1.1);
        }
      }
    },
    monument: {
      title(wiki) {
        if (wiki) {
          return loc("arpa_project_monument_title");
        }
        switch (global.arpa.m_type) {
          case "Obelisk":
            return loc("arpa_project_monument_obelisk");
          case "Statue":
            return loc("arpa_project_monument_statue");
          case "Sculpture":
            return loc("arpa_project_monument_sculpture");
          case "Monolith":
            return loc("arpa_project_monument_monolith");
          case "Pillar":
            return loc("arpa_project_monument_pillar");
          case "Megalith":
            return loc("arpa_project_monument_megalith");
        }
      },
      desc: loc("arpa_projects_monument_desc"),
      reqs: { monument: 1 },
      grant: "monuments",
      effect() {
        let gasVal = govActive("gaslighter", 2);
        let mcap = gasVal ? 2 - gasVal : 2;
        return loc("arpa_projects_monument_effect1", [mcap]);
      },
      cost: {
        Stone(offset, wiki) {
          return monument_costs("Stone", offset, wiki);
        },
        Aluminium(offset, wiki) {
          return monument_costs("Aluminium", offset, wiki);
        },
        Cement(offset, wiki) {
          return monument_costs("Cement", offset, wiki);
        },
        Steel(offset, wiki) {
          return monument_costs("Steel", offset, wiki);
        },
        Lumber(offset, wiki) {
          return monument_costs("Lumber", offset, wiki);
        },
        Crystal(offset, wiki) {
          return monument_costs("Crystal", offset, wiki);
        }
      }
    },
    railway: {
      title() {
        return eventActive("fool", 2022) ? loc("arpa_projects_lhc_title") : loc("arpa_projects_railway_title");
      },
      desc() {
        return eventActive("fool", 2022) ? loc("arpa_projects_lhc_desc") : loc("arpa_projects_railway_desc");
      },
      reqs: { high_tech: 6, trade: 3 },
      grant: "railway",
      effect(nofool) {
        if (eventActive("fool", 2022) && !nofool) {
          return arpaProjects.lhc.effect(true);
        }
        let routes = global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 2 ? 1 : 0;
        let profit = global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 1 ? 3 : 2;
        let desc = "";
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          routes += global.space["gps"] ? Math.floor(global.space.gps.count / 3) : 0;
          desc = loc("arpa_projects_railway_cataclysm1", [routes, profit, 3, 1]);
        } else if (global.race["warlord"]) {
          routes += 5;
          desc = loc("arpa_projects_railway_warlord1", [routes, profit]);
        } else {
          routes += global.city["storage_yard"] ? Math.floor(global.city.storage_yard.count / 6) : 0;
          desc = loc("arpa_projects_railway_effect1", [routes, profit, 6, 1]);
        }
        if (global.tech["hell_lake"] && global.tech.hell_lake >= 7) {
          desc += ` ${loc("arpa_projects_railway_highway", [1, global.resource.Asphodel_Powder.name, loc("eden_asphodel_harvester_title"), 1])}`;
        }
        return desc;
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("railway", offset, 25e5, 1.08, wiki);
        },
        Lumber(offset, wiki) {
          return costMultiplier("railway", offset, 75e4, 1.08, wiki);
        },
        Iron(offset, wiki) {
          return costMultiplier("railway", offset, 3e5, 1.08, wiki);
        },
        Steel(offset, wiki) {
          return costMultiplier("railway", offset, 45e4, 1.08, wiki);
        }
      }
    },
    roid_eject: {
      title() {
        return loc("arpa_projects_roid_eject_title", [roid_eject_type()]);
      },
      desc() {
        return loc(global.tech["roid_eject"] <= 10 ? "arpa_projects_roid_eject_desc" : "arpa_projects_roid_eject_desc2", [roid_eject_type()]);
      },
      reqs: { blackhole: 6, gateway: 3 },
      grant: "roid_eject",
      effect() {
        let mass = 0;
        let next = 0;
        if (global.tech["roid_eject"]) {
          mass += 0.225 * global.tech["roid_eject"] * (1 + global.tech["roid_eject"] / 12);
          next = 0.225 * (global.tech["roid_eject"] + 1) * (1 + (global.tech["roid_eject"] + 1) / 12) - mass;
        }
        return `<div>${loc("arpa_projects_roid_eject_effect1")}</div><div>${loc("arpa_projects_roid_eject_effect2", [+mass.toFixed(3), +next.toFixed(3), roid_eject_type()])}</div>`;
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("roid_eject", offset, 1875e4, 1.075, wiki);
        },
        Deuterium(offset, wiki) {
          return costMultiplier("roid_eject", offset, 375e3, 1.075, wiki);
        },
        Bolognium(offset, wiki) {
          return costMultiplier("roid_eject", offset, 15e3, 1.075, wiki);
        }
      }
    },
    nexus: {
      title: loc("arpa_projects_nexus_title"),
      desc: loc("arpa_projects_nexus_desc"),
      reqs: { magic: 5 },
      grant: "nexus",
      effect() {
        if (global.tech["roguemagic"] && global.tech.roguemagic >= 7) {
          return `<div>${loc("arpa_projects_nexus_effect1", [5])}</div><div>${loc("witch_hunter_nexus", [4])}</div>`;
        }
        return loc("arpa_projects_nexus_effect1", [5]);
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("nexus", offset, 5e6, 1.12, wiki);
        },
        Crystal(offset, wiki) {
          return costMultiplier("nexus", offset, 6e4, 1.12, wiki);
        },
        Iridium(offset, wiki) {
          return costMultiplier("nexus", offset, 35e3, 1.12, wiki);
        }
      }
    },
    syphon: {
      title: loc("arpa_syphon_title"),
      desc() {
        let desc = "";
        if (global.tech["syphon"] && global.tech.syphon >= 0) {
          desc = `<div>${loc("arpa_syphon_desc")}</div><div class="has-text-danger">${loc("arpa_syphon_desc_warn2")}</div>`;
        } else {
          desc = `<div>${loc("arpa_syphon_desc")}</div><div class="has-text-danger">${loc("arpa_syphon_desc_warn1")}</div>`;
        }
        if (global.race["witch_hunter"]) {
          desc += `<div class="has-text-caution">${loc(`witch_hunter_suspicion`)}</div>`;
        }
        return desc;
      },
      reqs: { veil: 2 },
      grant: "syphon",
      effect() {
        let mana = +(1 / 3 * darkEffect("magic")).toFixed(3);
        if (global.tech["syphon"] && global.tech.syphon >= 60) {
          let gains = calcPrestige("vacuum");
          let plasmidType = loc("resource_Plasmid_plural_name");
          return `<div>${loc("arpa_syphon_effect_main", [mana])}</div><div class="has-text-caution">${loc("arpa_syphon_effect4")}</div><div class="has-text-advanced">${loc("arpa_syphon_effect_reward", [gains.plasmid, gains.phage, gains.dark, plasmidType, 80])}</div>`;
        } else if (global.tech["syphon"] && global.tech.syphon >= 40) {
          return `<div>${loc("arpa_syphon_effect_main", [mana])}</div><div class="has-text-caution">${loc("arpa_syphon_effect3")}</div>`;
        } else if (global.tech["syphon"] && global.tech.syphon >= 20) {
          return `<div>${loc("arpa_syphon_effect_main", [mana])}</div><div class="has-text-caution">${loc("arpa_syphon_effect2")}</div>`;
        } else {
          return `<div>${loc("arpa_syphon_effect_main", [mana])}</div><div class="has-text-caution">${loc("arpa_syphon_effect1")}</div>`;
        }
      },
      cost: {
        Money(offset, wiki) {
          return costMultiplier("syphon", offset, 75e5, 1.025, wiki);
        },
        Mana(offset, wiki) {
          return costMultiplier("syphon", offset, 5e3, 1.025, wiki);
        },
        Crystal(offset, wiki) {
          return costMultiplier("syphon", offset, 1e5, 1.025, wiki);
        },
        Infernite(offset, wiki) {
          return costMultiplier("syphon", offset, 1e4, 1.025, wiki);
        }
      }
    }
  };
  function roid_eject_type() {
    if (!global.tech["roid_eject"] || global.tech["roid_eject"] <= 10) {
      return loc("arpa_projects_roid_eject_asteroid");
      ;
    } else if (global.tech["roid_eject"] <= 25) {
      return loc("arpa_projects_roid_eject_moon");
      ;
    } else if (global.tech["roid_eject"] <= 40) {
      return loc("arpa_projects_roid_eject_dwarf");
      ;
    } else if (global.tech["roid_eject"] <= 60) {
      return loc("arpa_projects_roid_eject_planet");
      ;
    } else {
      return loc("arpa_projects_roid_eject_remnant");
      ;
    }
  }
  var genePool = {
    genetic_memory: {
      id: "genes-genetic_memory",
      title: loc("arpa_genepool_genetic_memory_title"),
      desc: loc("arpa_genepool_genetic_memory_desc"),
      reqs: {},
      grant: ["creep", 1],
      cost: { Plasmid() {
        return 25;
      } },
      action() {
        if (payCrispr("genetic_memory")) {
          return true;
        }
        return false;
      }
    },
    animus: {
      id: "genes-animus",
      title: loc("arpa_genepool_animus_title"),
      desc: loc("arpa_genepool_animus_desc"),
      reqs: { creep: 1 },
      grant: ["creep", 2],
      cost: { Plasmid() {
        return 75;
      } },
      action() {
        if (payCrispr("animus")) {
          return true;
        }
        return false;
      }
    },
    divine_remembrance: {
      id: "genes-divine_remembrance",
      title: loc("arpa_genepool_divine_remembrance_title"),
      desc: loc("arpa_genepool_divine_remembrance_desc"),
      reqs: { creep: 2 },
      grant: ["creep", 3],
      cost: { Plasmid() {
        return 225;
      } },
      action() {
        if (payCrispr("divine_remembrance")) {
          return true;
        }
        return false;
      }
    },
    divine_proportion: {
      id: "genes-divine_proportion",
      title: loc("arpa_genepool_divine_proportion_title"),
      desc: loc("arpa_genepool_divine_proportion_desc"),
      reqs: { creep: 3 },
      grant: ["creep", 4],
      cost: { Plasmid() {
        return 618;
      } },
      action() {
        if (payCrispr("divine_proportion")) {
          return true;
        }
        return false;
      }
    },
    genetic_repository: {
      id: "genes-genetic_repository",
      title: loc("arpa_genepool_genetic_repository_title"),
      desc: loc("arpa_genepool_genetic_repository_desc"),
      reqs: { creep: 4 },
      grant: ["creep", 5],
      cost: { Plasmid() {
        return 999;
      } },
      action() {
        if (payCrispr("genetic_repository")) {
          return true;
        }
        return false;
      }
    },
    spatial_reasoning: {
      id: "genes-spatial_reasoning",
      title: loc("arpa_genepool_spatial_reasoning_title"),
      desc: loc("arpa_genepool_spatial_reasoning_desc"),
      reqs: {},
      grant: ["store", 1],
      cost: { Plasmid() {
        return 50;
      } },
      action() {
        if (payCrispr("spatial_reasoning")) {
          return true;
        }
        return false;
      }
    },
    spatial_superiority: {
      id: "genes-spatial_superiority",
      title: loc("arpa_genepool_spatial_superiority_title"),
      desc: loc("arpa_genepool_spatial_superiority_desc"),
      reqs: { store: 1 },
      grant: ["store", 2],
      cost: { Plasmid() {
        return 125;
      } },
      action() {
        if (payCrispr("spatial_superiority")) {
          return true;
        }
        return false;
      }
    },
    spatial_supremacy: {
      id: "genes-spatial_supremacy",
      title: loc("arpa_genepool_spatial_supremacy_title"),
      desc: loc("arpa_genepool_spatial_supremacy_desc"),
      reqs: { store: 2 },
      grant: ["store", 3],
      cost: { Plasmid() {
        return 325;
      } },
      action() {
        if (payCrispr("spatial_supremacy")) {
          return true;
        }
        return false;
      }
    },
    dimensional_warping: {
      id: "genes-dimensional_warping",
      title: loc("arpa_genepool_dimensional_warping_title"),
      desc: loc("arpa_genepool_dimensional_warping_desc"),
      reqs: { store: 3 },
      grant: ["store", 4],
      cost: { Plasmid() {
        return 500;
      } },
      action() {
        if (payCrispr("dimensional_warping")) {
          return true;
        }
        return false;
      }
    },
    enhanced_muscle_fiber: {
      id: "genes-enhanced_muscle_fiber",
      title: loc("arpa_genepool_enhanced_muscle_fiber_title"),
      desc: loc("arpa_genepool_enhanced_muscle_fiber_desc"),
      reqs: {},
      grant: ["enhance", 1],
      cost: { Plasmid() {
        return 25;
      } },
      action() {
        if (payCrispr("enhanced_muscle_fiber")) {
          return true;
        }
        return false;
      }
    },
    morphogenesis: {
      id: "genes-morphogenesis",
      title: loc("arpa_genepool_morphogenesis_title"),
      desc: loc("arpa_genepool_morphogenesis_desc"),
      reqs: {},
      grant: ["evolve", 1],
      cost: { Plasmid() {
        return 10;
      } },
      action() {
        if (payCrispr("morphogenesis")) {
          return true;
        }
        return false;
      }
    },
    recombination: {
      id: "genes-recombination",
      title: loc("arpa_genepool_recombination_title"),
      desc: loc("arpa_genepool_recombination_desc"),
      reqs: { evolve: 1 },
      grant: ["evolve", 2],
      cost: { Plasmid() {
        return 35;
      } },
      action() {
        if (payCrispr("recombination")) {
          return true;
        }
        return false;
      }
    },
    homologous_recombination: {
      id: "genes-homologous_recombination",
      title: loc("arpa_genepool_homologous_recombination_title"),
      desc: loc("arpa_genepool_homologous_recombination_desc"),
      reqs: { evolve: 2 },
      grant: ["evolve", 3],
      cost: { Plasmid() {
        return 70;
      } },
      action() {
        if (payCrispr("homologous_recombination")) {
          return true;
        }
        return false;
      }
    },
    genetic_reshuffling: {
      id: "genes-genetic_reshuffling",
      title: loc("arpa_genepool_genetic_reshuffling_title"),
      desc: loc("arpa_genepool_genetic_reshuffling_desc"),
      reqs: { evolve: 3 },
      grant: ["evolve", 4],
      cost: { Plasmid() {
        return 175;
      } },
      action() {
        if (payCrispr("genetic_reshuffling")) {
          return true;
        }
        return false;
      }
    },
    recombinant_dna: {
      id: "genes-recombinant_dna",
      title: loc("arpa_genepool_recombinant_dna_title"),
      desc: loc("arpa_genepool_recombinant_dna_desc"),
      reqs: { evolve: 4 },
      grant: ["evolve", 5],
      cost: { Plasmid() {
        return 440;
      } },
      action() {
        if (payCrispr("recombinant_dna")) {
          return true;
        }
        return false;
      }
    },
    chimeric_dna: {
      id: "genes-chimeric_dna",
      title: loc("arpa_genepool_chimeric_dna_title"),
      desc: loc("arpa_genepool_chimeric_dna_desc"),
      reqs: { evolve: 5 },
      grant: ["evolve", 6],
      cost: { Plasmid() {
        return 1100;
      } },
      action() {
        if (payCrispr("chimeric_dna")) {
          return true;
        }
        return false;
      }
    },
    molecular_cloning: {
      id: "genes-molecular_cloning",
      title: loc("arpa_genepool_molecular_cloning_title"),
      desc: loc("arpa_genepool_molecular_cloning_desc"),
      reqs: { evolve: 6 },
      grant: ["evolve", 7],
      cost: { Plasmid() {
        return 2750;
      } },
      action() {
        if (payCrispr("molecular_cloning")) {
          return true;
        }
        return false;
      }
    },
    transgenes: {
      id: "genes-transgenes",
      title: loc("arpa_genepool_transgenes_title"),
      desc: loc("arpa_genepool_transgenes_desc"),
      reqs: { evolve: 7 },
      grant: ["evolve", 8],
      cost: { Plasmid() {
        return 6875;
      } },
      action() {
        if (payCrispr("transgenes")) {
          return true;
        }
        return false;
      }
    },
    synthesis: {
      id: "genes-synthesis",
      title: loc("arpa_genepool_synthesis_title"),
      desc: loc("arpa_genepool_synthesis_desc", [2, 10]),
      reqs: { evolve: 1 },
      grant: ["synthesis", 1],
      cost: { Plasmid() {
        return 25;
      } },
      action() {
        if (payCrispr("synthesis")) {
          return true;
        }
        return false;
      }
    },
    karyokinesis: {
      id: "genes-karyokinesis",
      title: loc("arpa_genepool_karyokinesis_title"),
      desc: loc("arpa_genepool_synthesis_desc", [3, 25]),
      reqs: { synthesis: 1 },
      grant: ["synthesis", 2],
      cost: { Plasmid() {
        return 40;
      } },
      action() {
        if (payCrispr("karyokinesis")) {
          return true;
        }
        return false;
      }
    },
    cytokinesis: {
      id: "genes-cytokinesis",
      title: loc("arpa_genepool_cytokinesis_title"),
      desc: loc("arpa_genepool_synthesis_desc", [4, 50]),
      reqs: { synthesis: 2 },
      grant: ["synthesis", 3],
      cost: { Plasmid() {
        return 55;
      } },
      action() {
        if (payCrispr("cytokinesis")) {
          return true;
        }
        return false;
      }
    },
    mitosis: {
      id: "genes-mitosis",
      title: loc("arpa_genepool_mitosis_title"),
      desc: loc("arpa_genepool_mitosis_desc", [3]),
      reqs: { synthesis: 3, evolve: 2 },
      grant: ["plasma", 1],
      cost: { Plasmid() {
        return 90;
      } },
      action() {
        if (payCrispr("mitosis")) {
          return true;
        }
        return false;
      }
    },
    metaphase: {
      id: "genes-metaphase",
      title: loc("arpa_genepool_metaphase_title"),
      desc: loc("arpa_genepool_mitosis_desc", [5]),
      reqs: { plasma: 1 },
      grant: ["plasma", 2],
      cost: { Plasmid() {
        return 165;
      } },
      action() {
        if (payCrispr("metaphase")) {
          return true;
        }
        return false;
      }
    },
    mutation: {
      id: "genes-mutation",
      title: loc("arpa_genepool_mutation_title"),
      desc: loc("arpa_genepool_mutation_desc"),
      reqs: { synthesis: 3, creep: 5 },
      grant: ["mutation", 1],
      cost: { Plasmid() {
        return 1250;
      } },
      action() {
        if (payCrispr("mutation")) {
          global.genes["mutation"] = 1;
          genetics();
          return true;
        }
        return false;
      }
    },
    transformation: {
      id: "genes-transformation",
      title: loc("arpa_genepool_transformation_title"),
      desc: loc("arpa_genepool_transformation_desc"),
      reqs: { mutation: 1 },
      grant: ["mutation", 2],
      cost: { Plasmid() {
        return 1500;
      } },
      action() {
        if (payCrispr("transformation")) {
          global.genes["mutation"] = 2;
          genetics();
          return true;
        }
        return false;
      }
    },
    metamorphosis: {
      id: "genes-metamorphosis",
      title: loc("arpa_genepool_metamorphosis_title"),
      desc: loc("arpa_genepool_metamorphosis_desc"),
      reqs: { mutation: 2 },
      grant: ["mutation", 3],
      cost: { Plasmid() {
        return 1750;
      } },
      action() {
        if (payCrispr("metamorphosis")) {
          global.genes["mutation"] = 3;
          genetics();
          return true;
        }
        return false;
      }
    },
    replication: {
      id: "genes-replication",
      title: loc("arpa_genepool_replication_title"),
      desc: loc("arpa_genepool_replication_desc"),
      reqs: { evolve: 1 },
      grant: ["birth", 1],
      cost: { Plasmid() {
        return 65;
      } },
      action() {
        if (payCrispr("replication")) {
          return true;
        }
        return false;
      }
    },
    artificer: {
      id: "genes-artificer",
      title: loc("arpa_genepool_artificer_title"),
      desc: loc("arpa_genepool_artificer_desc"),
      reqs: { evolve: 1 },
      grant: ["crafty", 1],
      cost: { Plasmid() {
        return 45;
      } },
      action() {
        if (payCrispr("artificer")) {
          return true;
        }
        return false;
      }
    },
    detail_oriented: {
      id: "genes-detail_oriented",
      title: loc("arpa_genepool_detail_oriented_title"),
      desc: loc("arpa_genepool_crafting_desc", ["50"]),
      reqs: { crafty: 1 },
      grant: ["crafty", 2],
      cost: { Plasmid() {
        return 90;
      } },
      action() {
        if (payCrispr("detail_oriented")) {
          return true;
        }
        return false;
      }
    },
    rigorous: {
      id: "genes-rigorous",
      title: loc("arpa_genepool_rigorous_title"),
      desc: loc("arpa_genepool_crafting_desc", ["100"]),
      reqs: { crafty: 2 },
      grant: ["crafty", 3],
      cost: { Plasmid() {
        return 135;
      } },
      action() {
        if (payCrispr("rigorous")) {
          return true;
        }
        return false;
      }
    },
    geographer: {
      id: "genes-geographer",
      title: loc("arpa_genepool_geographer_title"),
      desc: loc("arpa_genepool_geographer_desc"),
      reqs: { store: 1 },
      grant: ["queue", 1],
      cost: { Plasmid() {
        return 75;
      } },
      action() {
        if (payCrispr("geographer")) {
          return true;
        }
        return false;
      }
    },
    architect: {
      id: "genes-architect",
      title: loc("arpa_genepool_architect_title"),
      desc: loc("arpa_genepool_architect_desc"),
      reqs: { queue: 1 },
      grant: ["queue", 2],
      cost: { Plasmid() {
        return 160;
      } },
      action() {
        if (payCrispr("architect")) {
          return true;
        }
        return false;
      },
      post() {
        calcQueueMax();
        calcRQueueMax();
      }
    },
    precognition: {
      id: "genes-precognition",
      title: loc("arpa_genepool_precognition_title"),
      desc: loc("arpa_genepool_precognition_desc"),
      reqs: { queue: 2 },
      grant: ["queue", 3],
      condition() {
        return global.stats.aiappoc > 0 ? true : false;
      },
      cost: {
        Plasmid() {
          return 3500;
        },
        Phage() {
          return 100;
        },
        AICore() {
          return 1;
        }
      },
      action() {
        if (payCrispr("precognition")) {
          return true;
        }
        return false;
      }
    },
    governance: {
      id: "genes-governance",
      title: loc("arpa_genepool_governance_title"),
      desc: loc("arpa_genepool_governance_desc"),
      reqs: { queue: 2 },
      grant: ["governor", 1],
      cost: {
        Plasmid() {
          return 300;
        },
        Phage() {
          return 25;
        }
      },
      action() {
        if (payCrispr("governance")) {
          return true;
        }
        return false;
      }
    },
    civil_service: {
      id: "genes-civil_service",
      title: loc("arpa_genepool_civil_service_title"),
      desc: loc("arpa_genepool_civil_service_desc"),
      reqs: { governor: 1 },
      grant: ["governor", 2],
      cost: {
        Plasmid() {
          return 1e3;
        },
        Harmony() {
          return 1;
        }
      },
      action() {
        if (payCrispr("civil_service")) {
          return true;
        }
        return false;
      },
      post() {
        if (global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("tasks")) {
          for (let i = 0; i < 6; i++) {
            if (!global.race.governor.tasks.hasOwnProperty(`t${i}`)) {
              global.race.governor.tasks[`t${i}`] = "none";
            }
          }
        }
        defineGovernor();
      }
    },
    bureaucratic_efficiency: {
      id: "genes-bureaucratic_efficiency",
      title: loc("arpa_genepool_bureaucratic_efficiency_title"),
      desc: loc("arpa_genepool_bureaucratic_efficiency_desc"),
      reqs: { governor: 2 },
      grant: ["governor", 3],
      cost: {
        Plasmid() {
          return 2500;
        },
        Artifact() {
          return 1;
        }
      },
      action() {
        if (payCrispr("bureaucratic_efficiency")) {
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      },
      flair() {
        return loc("arpa_genepool_bureaucratic_efficiency_flair");
      }
    },
    hardened_genes: {
      id: "genes-hardened_genes",
      title: loc("arpa_genepool_hardened_genes_title"),
      desc: loc("arpa_genepool_hardened_genes_desc"),
      reqs: {},
      grant: ["challenge", 1],
      cost: { Plasmid() {
        return 5;
      } },
      action() {
        if (payCrispr("hardened_genes")) {
          return true;
        }
        return false;
      }
    },
    unlocked: {
      id: "genes-unlocked",
      title: loc("arpa_genepool_unlocked_title"),
      desc: loc("arpa_genepool_unlocked_desc"),
      reqs: { challenge: 1 },
      grant: ["challenge", 2],
      cost: { Plasmid() {
        return 50;
      } },
      action() {
        if (payCrispr("unlocked")) {
          return true;
        }
        return false;
      },
      post() {
        calc_mastery(true);
      }
    },
    universal: {
      id: "genes-universal",
      title: loc("arpa_genepool_universal_title"),
      desc: loc("arpa_genepool_universal_desc"),
      reqs: { challenge: 2 },
      grant: ["challenge", 3],
      condition() {
        return global.race.universe !== "standard" ? true : false;
      },
      cost: { Plasmid() {
        return 400;
      } },
      action() {
        if (payCrispr("universal")) {
          return true;
        }
        return false;
      },
      post() {
        calc_mastery(true);
      }
    },
    standard: {
      id: "genes-standard",
      title: loc("arpa_genepool_standard_title"),
      desc: loc("arpa_genepool_standard_desc"),
      reqs: { challenge: 3 },
      grant: ["challenge", 4],
      condition() {
        return global.race.universe !== "standard" ? true : false;
      },
      cost: { Plasmid() {
        return 2500;
      } },
      action() {
        if (payCrispr("standard")) {
          return true;
        }
        return false;
      },
      post() {
        calc_mastery(true);
      }
    },
    mastered: {
      id: "genes-mastered",
      title: loc("arpa_genepool_mastered_title"),
      desc: loc("arpa_genepool_mastered_desc"),
      reqs: { challenge: 4 },
      grant: ["challenge", 5],
      cost: { Plasmid() {
        return 4e3;
      } },
      action() {
        if (payCrispr("mastered")) {
          return true;
        }
        return false;
      }
    },
    negotiator: {
      id: "genes-negotiator",
      title: loc("arpa_genepool_negotiator_title"),
      desc: loc("arpa_genepool_negotiator_desc"),
      reqs: { challenge: 2 },
      grant: ["trader", 1],
      cost: { Plasmid() {
        return 750;
      } },
      action() {
        if (payCrispr("negotiator")) {
          global.genes["trader"] = 1;
          updateTrades();
          return true;
        }
        return false;
      }
    },
    haggler: {
      id: "genes-haggler",
      title: loc("arpa_genepool_haggler_title"),
      desc: loc("arpa_genepool_haggler_desc"),
      reqs: { trader: 1 },
      condition() {
        return global.stats.achieve["godslayer"] ? true : false;
      },
      grant: ["trader", 2],
      cost: { Supercoiled() {
        return 10;
      } },
      action() {
        if (payCrispr("haggler")) {
          global.genes["trader"] = 2;
          updateTrades();
          return true;
        }
        return false;
      }
    },
    ancients: {
      id: "genes-ancients",
      title: loc("arpa_genepool_ancients_title"),
      desc: loc("arpa_genepool_ancients_desc"),
      reqs: { evolve: 2 },
      condition() {
        return global.genes["old_gods"] ? true : false;
      },
      grant: ["ancients", 1],
      cost: { Plasmid() {
        return 120;
      } },
      action() {
        if (payCrispr("ancients")) {
          global.genes["ancients"] = 1;
          drawTech();
          return true;
        }
        return false;
      }
    },
    faith: {
      id: "genes-faith",
      title: loc("arpa_genepool_faith_title"),
      desc: loc("arpa_genepool_faith_desc"),
      reqs: { ancients: 1 },
      grant: ["ancients", 2],
      cost: { Plasmid() {
        return 300;
      } },
      action() {
        if (payCrispr("faith")) {
          global.civic.priest.display = true;
          return true;
        }
        return false;
      }
    },
    devotion: {
      id: "genes-devotion",
      title: loc("arpa_genepool_devotion_title"),
      desc: loc("arpa_genepool_devotion_desc"),
      reqs: { ancients: 2 },
      grant: ["ancients", 3],
      cost: { Plasmid() {
        return 600;
      } },
      action() {
        if (payCrispr("devotion")) {
          return true;
        }
        return false;
      }
    },
    acolyte: {
      id: "genes-acolyte",
      title: loc("arpa_genepool_acolyte_title"),
      desc: loc("arpa_genepool_acolyte_desc"),
      reqs: { ancients: 3 },
      grant: ["ancients", 4],
      cost: { Plasmid() {
        return 1e3;
      } },
      action() {
        if (payCrispr("acolyte")) {
          return true;
        }
        return false;
      }
    },
    conviction: {
      id: "genes-conviction",
      title: loc("arpa_genepool_conviction_title"),
      desc: loc("arpa_genepool_conviction_desc"),
      reqs: { ancients: 4 },
      grant: ["ancients", 5],
      cost: { Plasmid() {
        return 1500;
      } },
      action() {
        if (payCrispr("conviction")) {
          return true;
        }
        return false;
      }
    },
    doctrine: {
      id: "genes-doctrine",
      title: loc("arpa_genepool_doctrine_title"),
      desc: loc("arpa_genepool_doctrine_desc"),
      reqs: { ancients: 5 },
      condition() {
        return global.stats.achieve["godslayer"] ? true : false;
      },
      grant: ["ancients", 6],
      cost: { Supercoiled() {
        return 50;
      } },
      action() {
        if (payCrispr("doctrine")) {
          return true;
        }
        return false;
      }
    },
    ideology: {
      id: "genes-ideology",
      title: loc("arpa_genepool_ideology_title"),
      desc: loc("arpa_genepool_ideology_desc"),
      reqs: { ancients: 6 },
      grant: ["ancients", 7],
      cost: { Supercoiled() {
        return 75;
      } },
      action() {
        if (payCrispr("ideology")) {
          return true;
        }
        return false;
      }
    },
    transcendence: {
      id: "genes-transcendence",
      title: loc("arpa_genepool_transcendence_title"),
      desc: loc("arpa_genepool_transcendence_desc"),
      reqs: { ancients: 1, mutation: 3 },
      grant: ["transcendence", 1],
      cost: { Plasmid() {
        return 3e3;
      } },
      action() {
        if (payCrispr("transcendence")) {
          global.genes["transcendence"] = 1;
          drawTech();
          return true;
        }
        return false;
      }
    },
    preeminence: {
      id: "genes-preeminence",
      title: loc("arpa_genepool_preeminence_title"),
      desc: loc("arpa_genepool_preeminence_desc"),
      reqs: { transcendence: 1, challenge: 5, ancients: 7 },
      grant: ["transcendence", 2],
      cost: {
        Supercoiled() {
          return 250;
        },
        Harmony() {
          return 10;
        }
      },
      action() {
        if (payCrispr("preeminence")) {
          return true;
        }
        return false;
      }
    },
    bleeding_effect: {
      id: "genes-bleeding_effect",
      title: loc("arpa_genepool_bleeding_effect_title"),
      desc: loc("arpa_genepool_bleeding_effect_desc", [2.5]),
      reqs: { creep: 2 },
      grant: ["bleed", 1],
      condition() {
        return global.race.universe === "antimatter" ? true : false;
      },
      cost: { Plasmid() {
        return 100;
      } },
      action() {
        if (payCrispr("bleeding_effect")) {
          return true;
        }
        return false;
      }
    },
    synchronicity: {
      id: "genes-synchronicity",
      title: loc("arpa_genepool_synchronicity_title"),
      desc: loc("arpa_genepool_synchronicity_desc", [25]),
      reqs: { bleed: 1 },
      grant: ["bleed", 2],
      cost: { Plasmid() {
        return 500;
      } },
      action() {
        if (payCrispr("synchronicity")) {
          return true;
        }
        return false;
      }
    },
    astral_awareness: {
      id: "genes-astral_awareness",
      title: loc("arpa_genepool_astral_awareness_title"),
      desc: loc("arpa_genepool_astral_awareness_desc"),
      reqs: { bleed: 2 },
      grant: ["bleed", 3],
      cost: { Plasmid() {
        return 1e3;
      } },
      action() {
        if (payCrispr("astral_awareness")) {
          return true;
        }
        return false;
      }
    },
    blood_remembrance: {
      id: "genes-blood_remembrance",
      title: loc("arpa_genepool_blood_remembrance_title"),
      desc: loc("arpa_genepool_blood_remembrance_desc"),
      reqs: {},
      grant: ["blood", 1],
      condition() {
        return global.prestige.Blood_Stone.count >= 1 ? true : false;
      },
      cost: {
        Plasmid() {
          return 1e3;
        },
        Phage() {
          return 10;
        }
      },
      action() {
        if (payCrispr("blood_remembrance")) {
          return true;
        }
        return false;
      }
    },
    blood_sacrifice: {
      id: "genes-blood_sacrifice",
      title: loc("arpa_genepool_blood_sacrifice_title"),
      desc: loc("arpa_genepool_blood_sacrifice_desc"),
      reqs: { blood: 1 },
      grant: ["blood", 2],
      cost: {
        Plasmid() {
          return 3e3;
        },
        Phage() {
          return 100;
        },
        Artifact() {
          return 1;
        }
      },
      action() {
        if (payCrispr("blood_sacrifice")) {
          return true;
        }
        return false;
      }
    },
    essence_absorber: {
      id: "genes-essence_absorber",
      title: loc("arpa_genepool_essence_absorber_title"),
      desc: loc("arpa_genepool_essence_absorber_desc"),
      reqs: { blood: 2 },
      grant: ["blood", 3],
      cost: {
        Plasmid() {
          return 7500;
        },
        Phage() {
          return 250;
        },
        Artifact() {
          return 1;
        }
      },
      action() {
        if (payCrispr("essence_absorber")) {
          return true;
        }
        return false;
      },
      post() {
        blood();
      }
    }
  };
  var bloodPool = {
    purify: {
      id: "blood-purify",
      title: loc("arpa_blood_purify_title"),
      desc: loc("arpa_blood_purify_desc"),
      reqs: {},
      grant: ["spire", 1],
      cost: { Blood_Stone() {
        return 10;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    chum: {
      id: "blood-chum",
      title: loc("arpa_blood_chum_title"),
      desc: loc("arpa_blood_chum_desc"),
      reqs: { spire: 1 },
      grant: ["spire", 2],
      cost: { Blood_Stone() {
        return 25;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    lust: {
      id: "blood-lust",
      title: loc("arpa_blood_lust_title"),
      desc: loc("arpa_blood_lust_desc"),
      reqs: {},
      grant: ["lust", "*"],
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["lust"] || 0)) * 15 + 15;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["lust"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    illuminate: {
      id: "blood-illuminate",
      title: loc("arpa_blood_illuminate_title"),
      desc: loc("arpa_blood_illuminate_desc"),
      reqs: {},
      grant: ["illuminate", "*"],
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["illuminate"] || 0)) * 12 + 12;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["illuminate"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    greed: {
      id: "blood-greed",
      title: loc("arpa_blood_greed_title"),
      desc: loc("arpa_blood_greed_desc"),
      reqs: {},
      grant: ["greed", "*"],
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["greed"] || 0)) * 16 + 16;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["greed"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    hoarder: {
      id: "blood-hoarder",
      title: loc("arpa_blood_hoarder_title"),
      desc: loc("arpa_blood_hoarder_desc"),
      reqs: {},
      grant: ["hoarder", "*"],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["hoarder"] || 0)) * 14 + 14;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["hoarder"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    artisan: {
      id: "blood-artisan",
      title: loc("arpa_blood_artisan_title"),
      desc: loc("arpa_blood_artisan_desc"),
      reqs: {},
      grant: ["artisan", "*"],
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["artisan"] || 0)) * 8 + 8;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["artisan"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    attract: {
      id: "blood-attract",
      title: loc("arpa_blood_attract_title"),
      desc: loc("arpa_blood_attract_desc"),
      reqs: {},
      grant: ["attract", "*"],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["attract"] || 0)) * 4 + 4;
        },
        Artifact(wiki) {
          return ((wiki || 0) + (global.blood["attract"] || 0)) % 5 === 0 ? 1 : 0;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    wrath: {
      id: "blood-wrath",
      title: loc("arpa_blood_wrath_title"),
      desc: loc("arpa_blood_wrath_desc"),
      reqs: {},
      grant: ["wrath", "*"],
      cost: {
        Blood_Stone(wiki) {
          return ((wiki || 0) + (global.blood["wrath"] || 0)) * 2 + 2;
        },
        Artifact() {
          return 1;
        }
      },
      effect() {
        return `<span class="has-text-caution">${loc("arpa_blood_repeat")}</span>`;
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    prepared: {
      id: "blood-prepared",
      title: loc("arpa_blood_prepared_title"),
      desc: loc("arpa_blood_prepared_desc"),
      reqs: {},
      grant: ["prepared", 1],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: { Blood_Stone() {
        return 50;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      },
      post() {
        drawMechLab();
      }
    },
    compact: {
      id: "blood-compact",
      title: loc("arpa_blood_compact_title"),
      desc: loc("arpa_blood_compact_desc"),
      reqs: { prepared: 1 },
      grant: ["prepared", 2],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: { Blood_Stone() {
        return 75;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    infernal: {
      id: "blood-infernal",
      title: loc("arpa_blood_infernal_title"),
      desc: loc("arpa_blood_infernal_desc"),
      reqs: { prepared: 2 },
      grant: ["prepared", 3],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: {
        Blood_Stone() {
          return 125;
        },
        Artifact() {
          return 1;
        }
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    unbound: {
      id: "blood-unbound",
      title: loc("arpa_blood_unbound_title"),
      desc: loc("arpa_blood_unbound_desc"),
      reqs: {},
      grant: ["unbound", 1],
      cost: { Blood_Stone() {
        return 50;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    unbound_resistance: {
      id: "blood-unbound_resistance",
      title: loc("arpa_blood_unbound_resistance_title"),
      desc: loc("arpa_blood_unbound_resistance_desc"),
      reqs: { unbound: 1 },
      grant: ["unbound", 2],
      cost: { Blood_Stone() {
        return 100;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    shadow_war: {
      id: "blood-shadow_war",
      title: loc("arpa_blood_shadow_war_title"),
      desc: loc("arpa_blood_shadow_war_desc"),
      reqs: { unbound: 2 },
      grant: ["unbound", 3],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: {
        Blood_Stone() {
          return 250;
        },
        Artifact() {
          return 2;
        }
      },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    unbound_immunity: {
      id: "blood-unbound_immunity",
      title: loc("arpa_blood_unbound_immunity_title"),
      desc: loc("arpa_blood_unbound_immunity_desc"),
      reqs: { unbound: 3 },
      grant: ["unbound", 4],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: { Blood_Stone() {
        return 500;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    },
    blood_aware: {
      id: "blood-blood_aware",
      title: loc("arpa_blood_blood_aware_title"),
      desc: loc("arpa_blood_blood_aware_desc"),
      reqs: {},
      grant: ["aware", 1],
      condition() {
        return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
      },
      cost: { Blood_Stone() {
        return 10;
      } },
      action() {
        if (payBloodPrice($(this)[0].cost)) {
          return true;
        }
        return false;
      }
    }
  };
  function payCrispr(gene) {
    let afford = true;
    let costs = genePool[gene].cost;
    Object.keys(costs).forEach(function(res) {
      let oRes = res;
      if (res === "Plasmid" && global.race.universe === "antimatter") {
        res = "AntiPlasmid";
      }
      if (global.prestige[res].count < costs[oRes]()) {
        afford = false;
      }
    });
    if (afford) {
      Object.keys(costs).forEach(function(res) {
        let oRes = res;
        if (res === "Plasmid" && global.race.universe === "antimatter") {
          res = "AntiPlasmid";
        }
        global.prestige[res].count -= costs[oRes]();
      });
      return true;
    }
    return false;
  }
  function payBloodPrice(costs) {
    if (checkCosts(costs)) {
      Object.keys(costs).forEach(function(res) {
        global.prestige[res].count -= costs[res]();
      });
      return true;
    }
    return false;
  }
  function drawGenes() {
    Object.keys(actions.genes).forEach(function(gene) {
      removeAction(actions.genes[gene].id);
      if (checkGeneRequirements(gene)) {
        addAction("genes", gene);
      }
    });
  }
  function drawBlood() {
    Object.keys(actions.blood).forEach(function(trait) {
      removeAction(actions.blood[trait].id);
      if (checkBloodRequirements(trait)) {
        addAction("blood", trait);
      }
    });
  }
  function checkGeneRequirements(gene) {
    var isMet = true;
    Object.keys(actions.genes[gene].reqs).forEach(function(req) {
      if (!global.genes[req] || global.genes[req] < actions.genes[gene].reqs[req]) {
        isMet = false;
      }
    });
    if (isMet && (!global.genes[actions.genes[gene].grant[0]] || global.genes[actions.genes[gene].grant[0]] < actions.genes[gene].grant[1])) {
      return true;
    }
    return false;
  }
  function checkBloodRequirements(trait) {
    var isMet = true;
    Object.keys(actions.blood[trait].reqs).forEach(function(req) {
      if (!global.blood[req] || global.blood[req] < actions.blood[trait].reqs[req]) {
        isMet = false;
      }
    });
    if (isMet && (!global.blood[actions.blood[trait].grant[0]] || actions.blood[trait].grant[1] === "*" || global.blood[actions.blood[trait].grant[0]] < actions.blood[trait].grant[1])) {
      return true;
    }
    return false;
  }
  function gainGene(action) {
    var gene = actions.genes[action].grant[0];
    global.genes[gene] = actions.genes[action].grant[1];
    crispr();
  }
  function gainBlood(action) {
    var trait = actions.blood[action].grant[0];
    if (actions.blood[action].grant[1] === "*") {
      global.blood[trait] ? global.blood[trait]++ : global.blood[trait] = 1;
    } else {
      global.blood[trait] = actions.blood[action].grant[1];
    }
    blood();
  }
  function pick_monument() {
    let monuments = [];
    ["Obelisk", "Statue", "Sculpture"].forEach(function(type) {
      if (type !== global.arpa["m_type"]) {
        monuments.push(type);
      }
    });
    if (!global.race["flier"] && global.arpa["m_type"] !== "Monolith") {
      monuments.push("Monolith");
    }
    if (global.race["evil"] && global.arpa["m_type"] !== "Pillar" && !global.race["kindling_kindred"] && !global.race["smoldering"]) {
      monuments.push("Pillar");
    }
    if (global.race.universe === "magic" && global.arpa["m_type"] !== "Megalith") {
      monuments.push("Megalith");
    }
    return monuments[Math.rand(0, monuments.length)];
  }
  function monument_costs(res, offset, wiki) {
    let type = wiki ? wiki.m_type : global.arpa.m_type;
    switch (type) {
      case "Obelisk":
        return res === "Stone" ? costMultiplier("monument", offset, 1e6, 1.1, wiki) : 0;
      case "Statue":
        return res === "Aluminium" ? costMultiplier("monument", offset, 35e4, 1.1, wiki) : 0;
      case "Sculpture":
        return res === "Steel" ? costMultiplier("monument", offset, 3e5, 1.1, wiki) : 0;
      case "Monolith":
        return res === "Cement" ? costMultiplier("monument", offset, 3e5, 1.1, wiki) : 0;
      case "Pillar":
        return res === "Lumber" ? costMultiplier("monument", offset, 1e6, 1.1, wiki) : 0;
      case "Megalith":
        return res === "Crystal" ? costMultiplier("monument", offset, 55e3, 1.1, wiki) : 0;
    }
  }
  function checkRequirements(tech) {
    if (arpaProjects[tech]["condition"] && !arpaProjects[tech].condition()) {
      return false;
    }
    let c_path = global.race["truepath"] ? "truepath" : "standard";
    if (arpaProjects[tech].hasOwnProperty("path") && !arpaProjects[tech].path.includes(c_path)) {
      return false;
    }
    var isMet = true;
    Object.keys(arpaProjects[tech].reqs).forEach(function(req) {
      if (!global.tech[req] || global.tech[req] < arpaProjects[tech].reqs[req]) {
        isMet = false;
      }
    });
    return isMet;
  }
  function payArpaCosts(costs) {
    costs = arpaAdjustCosts(costs);
    if (checkArpaCosts(costs)) {
      Object.keys(costs).forEach(function(res) {
        global["resource"][res].amount -= costs[res]() / 100;
      });
      return true;
    }
    return false;
  }
  function checkArpaCosts(costs) {
    var test = true;
    Object.keys(costs).forEach(function(res) {
      var testCost = Number(costs[res]()) / 100;
      if (testCost > Number(global["resource"][res].amount)) {
        test = false;
        return false;
      }
    });
    return test;
  }
  function arpaAdjustCosts(costs, offset, wiki) {
    costs = creativeAdjust(costs, offset, wiki);
    return adjustCosts({ "cost": costs }, offset, wiki);
  }
  function creativeAdjust(costs, offset, wiki) {
    let fathom = fathomCheck("human");
    if (wiki && wiki.creative || !wiki && global.race["creative"] || !wiki && fathom > 0) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        newCosts[res] = function() {
          let cost = costs[res](offset, wiki);
          if (wiki && wiki.creative || !wiki && global.race["creative"]) {
            cost *= 1 - traits.creative.vars()[1] / 100;
          }
          if (fathom > 0) {
            cost *= 1 - traits.creative.vars(1)[1] / 100 * fathom;
          }
          return cost;
        };
      });
      return newCosts;
    }
    return costs;
  }
  function costMultiplier(project, offset, base, multiplier, wiki) {
    var rank = global.arpa[project] ? global.arpa[project].rank : 0;
    if ((wiki && wiki.creative || !wiki && global.race["creative"]) && project !== "syphon") {
      multiplier -= traits.creative.vars()[0];
    }
    if (offset) {
      rank += offset;
    }
    return Math.round(multiplier ** rank * base);
  }
  function physics() {
    if (global.tech["high_tech"] && global.tech.high_tech >= 6) {
      let parent = $("#arpaPhysics");
      clearElement(parent);
      Object.keys(arpaProjects).forEach(function(project) {
        addProject(parent, project);
      });
    }
  }
  function clearGeneticsDrag() {
    let el = $("#geneticMinor")[0];
    if (el) {
      let sort = Sortable.get(el);
      if (sort) {
        sort.destroy();
      }
    }
  }
  function dragGeneticsList() {
    let el = $("#geneticMinor")[0];
    if (el) {
      Sortable.create(el, {
        onEnd(e) {
          let order = global.settings.mtorder;
          order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
          global.settings.mtorder = order;
          genetics();
        }
      });
    }
  }
  function genetics() {
    let parent = $("#arpaGenetics");
    clearGeneticsDrag();
    clearElement(parent);
    if (!global.settings.arpa.genetics) {
      return false;
    }
    if (global.tech["genetics"] > 1) {
      let genome = $(`<div id="arpaSequence" class="genome"></div>`);
      parent.append(genome);
      let label = global.tech.genetics > 2 ? loc("arpa_gene_mutation") : loc("arpa_sequence_genome");
      if (global.race["artifical"]) {
        label = global.tech.genetics > 2 ? loc("arpa_code_modification") : loc("arpa_decompile_source");
      }
      let sequence = $(`<div><span class="seqlbl has-text-warning">${label}</span> - ${loc("arpa_to_complete")} <span v-html="$options.filters.timer(time)"></span></div>`);
      genome.append(sequence);
      let progress = $(`<progress class="progress" :value="progress" max="${global.arpa.sequence.max}">{{ progress }}%</progress>`);
      genome.append(progress);
      let b_label = global.tech.genetics > 2 ? loc("arpa_mutate") : loc("arpa_sequence");
      if (global.race["artifical"]) {
        b_label = global.tech.genetics > 2 ? loc("arpa_modify") : loc("arpa_decompile");
      }
      let button = $(`<button class="button seq" @click="toggle">${b_label}</button>`);
      genome.append(button);
      if (global.tech["genetics"] >= 5) {
        let boost = $(`<b-tooltip :label="boostLabel(false)" position="is-bottom" animated multilined><button class="button boost" @click="booster" :aria-label="boostLabel(true)">${loc("arpa_boost")}</button></b-tooltip>`);
        genome.append(boost);
      }
      if (global.tech["genetics"] >= 6) {
        let boost = $(`<b-tooltip :label="novoLabel()" position="is-bottom" animated multilined><button class="button" @click="novo" :aria-label="novoLabel()">${loc(global.race["artifical"] ? "arpa_novo_artifical" : "arpa_novo")}</button></b-tooltip>`);
        genome.append(boost);
      }
      if (global.tech["genetics"] >= 7) {
        let boost = $(`<b-tooltip :label="autoLabel(false)" position="is-bottom" animated multilined><button class="button auto" @click="auto_seq" :aria-label="autoLabel(true)">${loc(global.race["artifical"] ? "arpa_auto_compile" : "arpa_auto_sequence")}</button></b-tooltip>`);
        genome.append(boost);
      }
      if (global.arpa.sequence.on) {
        $("#arpaSequence button.seq").addClass("has-text-success");
      }
      if (global.arpa.sequence.boost) {
        $("#arpaSequence button.boost").addClass("has-text-success");
      }
      if (global.arpa.sequence.auto) {
        $("#arpaSequence button.auto").addClass("has-text-success");
      }
      vBind({
        el: `#arpaSequence`,
        data: global.arpa.sequence,
        methods: {
          toggle() {
            if (global.arpa.sequence.on) {
              global.arpa.sequence.on = false;
              $("#arpaSequence button.seq").removeClass("has-text-success");
            } else {
              global.arpa.sequence.on = true;
              $("#arpaSequence button.seq").addClass("has-text-success");
            }
          },
          booster() {
            if (global.arpa.sequence.boost) {
              global.arpa.sequence.boost = false;
              $("#arpaSequence button.boost").removeClass("has-text-success");
            } else {
              global.arpa.sequence.boost = true;
              $("#arpaSequence button.boost").addClass("has-text-success");
            }
          },
          boostLabel(sr) {
            return loc(global.race["artifical"] ? "arpa_boost_artifical_label" : "arpa_boost_label") + (sr ? global.arpa.sequence.boost ? loc("city_on") : loc("city_off") : "");
          },
          novo() {
            let keyMult = keyMultiplier();
            let cost = 2e5;
            if (global.resource.Knowledge.amount >= cost) {
              let maxNovo = Math.floor(global.resource.Knowledge.amount / cost);
              let actualNovo = Math.min(keyMult, maxNovo);
              global.resource.Knowledge.amount -= cost * actualNovo;
              global.resource.Genes.amount += actualNovo;
              let trick = trickOrTreat(8, 12, false);
              if (trick.length > 0) {
                $(`#arpaSequence > div:first`).append(trick);
              }
            }
          },
          novoLabel() {
            return loc(global.race["artifical"] ? "arpa_novo_artifical_label" : "arpa_novo_label", ["200k"]);
          },
          auto_seq() {
            if (global.arpa.sequence.auto) {
              global.arpa.sequence.auto = false;
              $("#arpaSequence button.auto").removeClass("has-text-success");
            } else {
              global.arpa.sequence.auto = true;
              $("#arpaSequence button.auto").addClass("has-text-success");
            }
          },
          autoLabel(sr) {
            return loc(global.race["artifical"] ? "arpa_auto_compile_label" : "arpa_auto_seq_label") + (sr ? global.arpa.sequence.boost ? loc("city_on") : loc("city_off") : "");
          }
        },
        filters: {
          timer(val) {
            if (global.arpa.sequence.on && global.arpa.sequence.labs > 0) {
              if (global.arpa.sequence.boost) {
                return timeFormat(val / (global.arpa.sequence.labs * 2));
              } else {
                return timeFormat(val / global.arpa.sequence.labs);
              }
            } else {
              let egg = easterEgg(14, 12);
              if (egg.length > 0) {
                return egg;
              }
              return loc("time_never");
            }
          }
        }
      });
      popover(
        `popArpaSeq`,
        function() {
          if (global.tech.genetics > 2) {
            return global.race["artifical"] ? loc("arpa_modify_desc") : loc("arpa_mutate_desc");
          } else {
            return global.race["artifical"] ? loc("arpa_decompile_desc") : loc("arpa_sequence_desc");
          }
        },
        {
          elm: `#arpaSequence .seqlbl`,
          classes: `has-background-light has-text-dark`
        }
      );
    }
    if (global.tech["genetics"] > 2) {
      let breakdown2 = $('<div id="geneticBreakdown" class="geneticTraits"></div>');
      $("#arpaGenetics").append(breakdown2);
      let minorList = $('<div id="geneticMinor" class="traitListing"></div>');
      breakdown2.append(minorList);
      if (global.tech["decay"] && global.tech["decay"] >= 2) {
        if (!global.settings.mtorder.includes("fortify")) {
          global.settings.mtorder.push("fortify");
        }
      }
      Object.keys(global.race).forEach(function(trait) {
        if (traits[trait] && traits[trait].type === "minor") {
          if (!global.settings.mtorder.includes(trait)) {
            global.settings.mtorder.push(trait);
          }
        }
      });
      if (global.genes["challenge"] && global.genes["challenge"] >= 5) {
        if (!global.settings.mtorder.includes("mastery")) {
          global.settings.mtorder.push("mastery");
        }
      }
      let minor = false;
      let minor_list = [];
      global.settings.mtorder.forEach(function(trait) {
        if (traits[trait] && traits[trait].type === "minor" || trait === "mastery" || trait === "fortify") {
          if (trait !== "fortify" || global.tech["decay"] && global.tech["decay"] >= 2) {
            if (!["promiscuous", "content", "resilient", "industrious", "tactical", "fibroblast"].includes(trait) && global.race["lone_survivor"] || !global.race["lone_survivor"]) {
              minor = true;
              bindTrait(minorList, trait);
              minor_list.push(trait);
            }
          }
        }
      });
      breakdown2.append(`<div class="trait major has-text-success" role="heading" aria-level="3">${loc("arpa_race_genetic_traids", [flib("name")])}</div>`);
      let traitName = traitSkin("name");
      let remove_list = [];
      let null_list = [];
      let traitListing = $(`<div class="traitListing"></div>`);
      breakdown2.append(traitListing);
      let trait_listing = deepClone(global.race);
      if (eventActive("fool", 2023)) {
        trait_listing["hooved"] = 1;
      }
      Object.keys(trait_listing).forEach(function(trait) {
        if (traits[trait] && traits[trait].type !== "minor" && traits[trait].type !== "special" && trait !== "evil" && trait !== "soul_eater" && trait !== "artifical") {
          let mimicTraits = [
            ...global.race["ss_traits"] ? global.race["ss_traits"] : [],
            ...global.race["iTraits"] ? Object.keys(global.race["iTraits"]) : []
          ];
          let readOnly = false;
          if (mimicTraits.includes(trait)) {
            readOnly = true;
          } else if (["sludge", "ultra_sludge"].includes(global.race.species) && (trait === "ooze" || global.race["modified"])) {
            readOnly = true;
          } else if (!global.race.hasOwnProperty(trait)) {
            readOnly = true;
          } else if (global.race.hasOwnProperty("absorbed") && global.race.absorbed.map((r) => races[r].fanaticism).includes(trait) || global.race["warlord"] && ["iron_wood", "unified", "apex_predator"].includes(trait)) {
            readOnly = true;
          } else if (trait === "forager" && mimicTraits.some((item) => ["herbivore", "carnivore"].includes(item))) {
            readOnly = true;
          }
          if (!readOnly && (traits[trait].type === "major" && global.genes["mutation"] || traits[trait].type === "genus" && global.genes["mutation"] && global.genes["mutation"] >= 2)) {
            let major = $(`<div class="traitRow"></div>`);
            let purge = $(`<span class="remove${trait} basic-button has-text-danger" role="button" :aria-label="removeCost('${trait}')" @click="purge('${trait}')">${loc("arpa_remove_button")}</span>`);
            remove_list.push(trait);
            major.append(purge);
            major.append($(`<span class="trait has-text-warning" id="raceTrait${trait}">${traitName[trait] ? traitName[trait] : traits[trait].name} (${loc(`arpa_genepool_rank`, [traitRank(trait)])})</span>`));
            traitListing.append(major);
          } else {
            null_list.push(trait);
            traitListing.append(`<div class="traitRow trait${trait}"><div class="trait has-text-warning${global.genes["mutation"] ? " indent" : ""}">${traitName[trait] ? traitName[trait] : traits[trait].name} (${loc(`arpa_genepool_rank`, [traitRank(trait)])})</div></div>`);
          }
        }
      });
      let offspec_traits = [];
      let trait_list = [];
      if (global.genes["mutation"] && global.genes["mutation"] >= 3) {
        if (global.race.species !== "hellspawn" && (global.race.species !== "sludge" && global.race.species !== "ultra_sludge" || !global.race["modified"])) {
          breakdown2.append(`<div class="trait major has-text-success" role="heading" aria-level="3">${loc("arpa_race_genetic_gain")}</div>`);
          let conflict_traits = ["dumb", "smart"];
          let mainType = races[global.race.species].type === "hybrid" ? global.race.maintype : races[global.race.species].type;
          let speciesTypes = races[global.race.species].type === "hybrid" ? races[global.race.species].hybrid : [races[global.race.species].type];
          Object.keys(races).forEach(function(race) {
            if (race !== "junker" && race !== "sludge" && race !== "ultra_sludge" && race !== "custom" && (speciesTypes.includes(races[race].type) || races[race].type === "hybrid" && race === global.race.species)) {
              Object.keys(races[race].traits).forEach(function(trait) {
                if (!global.race[trait] && trait !== "soul_eater") {
                  let conflict_pos = conflict_traits.indexOf(trait);
                  if (conflict_pos === -1) {
                    trait_list.push(trait);
                    if (races[race].type !== mainType && race !== global.race.species) {
                      offspec_traits.push(trait);
                    }
                  } else {
                    let is_conflict = false;
                    switch (conflict_pos % 2) {
                      case 0:
                        if (global.race[conflict_traits[conflict_pos + 1]]) {
                          is_conflict = true;
                        }
                        break;
                      case 1:
                        if (global.race[conflict_traits[conflict_pos - 1]]) {
                          is_conflict = true;
                        }
                        break;
                    }
                    if (!is_conflict) {
                      trait_list.push(trait);
                      if (races[race].type !== mainType) {
                        offspec_traits.push(trait);
                      }
                    }
                  }
                }
              });
            }
          });
          let addListing = $(`<div class="traitListing"></div>`);
          breakdown2.append(addListing);
          for (let i = 0; i < trait_list.length; i++) {
            let trait = trait_list[i];
            if (!["catnip", "anise"].includes(trait)) {
              let major = $(`<div class="traitRow"></div>`);
              let add = $(`<span class="add${trait} basic-button has-text-success" role="button" :aria-label="addCost('${trait}')" @click="gain('${trait}')">${loc("arpa_gain_button")}</span>`);
              major.append(add);
              major.append($(`<span class="trait has-text-warning" id="raceTrait${trait}">${traitName[trait] ? traitName[trait] : traits[trait].name} (${loc(`arpa_genepool_rank`, [offspec_traits[trait] ? 0.5 : 1])})</span>`));
              addListing.append(major);
            }
          }
        }
      }
      if (minor) {
        breakdown2.prepend(`<div class="trait minor has-text-success" role="heading" aria-level="3">${loc("arpa_race_genetic_minor_traits", [flib("name")])}</div>`);
      }
      let rmCost = function(t, label) {
        let cost = traits[t].val * 5;
        if (["custom", "hybrid", "sludge", "ultra_sludge"].includes(global.race.species)) {
          cost *= 10;
        }
        if (global.race[t] && traits[t].val < 0) {
          switch (global.race[t]) {
            case 0.1:
              cost *= 4;
              break;
            case 0.25:
              cost *= 3;
              break;
            case 0.5:
              cost *= 2;
              break;
          }
        }
        if (cost < 0) {
          cost *= -1;
        }
        if (global.race["modified"]) {
          cost += global.race.modified.t * 10;
          if (traits[t].val < 0) {
            cost += global.race.modified.nr * 10;
          }
        }
        if (label) {
          return loc("arpa_remove", [traitSkin("name", t), cost, global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name")]);
        }
        return cost;
      };
      let addCost = function(t, label) {
        let cost = traits[t].val * 5;
        if (["custom", "hybrid", "sludge", "ultra_sludge"].includes(global.race.species)) {
          cost *= 10;
        }
        if (cost < 0) {
          cost *= -1;
        }
        if (global.race["modified"]) {
          cost += global.race.modified.t * 10;
          if (traits[t].val >= 0) {
            cost += global.race.modified.pa * 10;
          }
        }
        if (label) {
          return loc("arpa_gain", [traitSkin("name", t), cost, global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name")]);
        }
        return cost;
      };
      let mGeneCost = function(t) {
        let cost = fibonacci(global.race.minor[t] ? global.race.minor[t] + 4 : 4);
        if (t === "mastery") {
          cost *= 5;
        }
        return loc("arpa_gene_buy", [traitSkin("name", t), sizeApproximation(cost), global.resource.Genes.name]);
      };
      let mPhageCost = function(t) {
        let cost = fibonacci(global.genes.minor[t] ? global.genes.minor[t] + 4 : 4);
        if (t === "mastery") {
          cost *= 2;
        }
        return loc("arpa_phage_buy", [traitSkin("name", t), sizeApproximation(cost), loc(`resource_Phage_name`)]);
      };
      vBind({
        el: `#geneticBreakdown`,
        data: {
          genes: global.genes,
          race: global.race
        },
        methods: {
          gene(t) {
            let curr_iteration = 0;
            let iterations = keyMultiplier();
            let can_purchase = true;
            let redraw = false;
            while (curr_iteration < iterations && can_purchase) {
              let cost = fibonacci(global.race.minor[t] ? global.race.minor[t] + 4 : 4);
              if (t === "mastery") {
                cost *= 5;
              }
              if (global.resource.Genes.amount >= cost) {
                global.resource.Genes.amount -= cost;
                global.race.minor[t] ? global.race.minor[t]++ : global.race.minor[t] = 1;
                global.race[t] ? global.race[t]++ : global.race[t] = 1;
                redraw = true;
              } else {
                can_purchase = false;
              }
              curr_iteration++;
            }
            if (redraw) {
              if (t === "mastery") {
                calc_mastery(true);
              }
              genetics();
              if (t === "persuasive") {
                updateTrades();
              }
            }
          },
          phage(t) {
            let curr_iteration = 0;
            let iterations = keyMultiplier();
            let can_purchase = true;
            let redraw = false;
            while (curr_iteration < iterations && can_purchase) {
              let cost = fibonacci(global.genes.minor[t] ? global.genes.minor[t] + 4 : 4);
              if (t === "mastery") {
                cost *= 2;
              }
              if (global.prestige.Phage.count >= cost) {
                global.prestige.Phage.count -= cost;
                global.genes.minor[t] ? global.genes.minor[t]++ : global.genes.minor[t] = 1;
                global.race[t] ? global.race[t]++ : global.race[t] = 1;
                redraw = true;
              } else {
                can_purchase = false;
              }
              curr_iteration++;
            }
            if (redraw) {
              if (t === "mastery") {
                calc_mastery(true);
              }
              genetics();
              if (t === "persuasive") {
                updateTrades();
              }
            }
          },
          purge(t) {
            if (["sludge", "ultra_sludge"].includes(global.race.species) && (global.race["modified"] || t === "ooze")) {
              return;
            }
            let cost = rmCost(t, false);
            let res = global.race.universe === "antimatter" ? "AntiPlasmid" : "Plasmid";
            if (global.prestige[res].count >= cost) {
              global.prestige[res].count -= cost;
              let rank = global.race[t];
              delete global.race[t];
              if (!global.race["modified"]) {
                global.race["modified"] = {
                  t: 0,
                  nr: 0,
                  na: 0,
                  pr: 0,
                  pa: 0
                };
              }
              global.race.modified.t++;
              if (traits[t].val >= 0) {
                global.race.modified.pr++;
              } else {
                global.race.modified.nr++;
              }
              if (t === "forager") {
                delete global.race.inactiveTraits["herbivore"];
                delete global.race.inactiveTraits["carnivore"];
              }
              cleanRemoveTrait(t, rank);
              genetics();
              drawTech();
              drawCity();
              let count = 0;
              Object.keys(global.race).forEach(function(trait) {
                if (traits[trait] && (traits[trait].type == "major" || traits[trait].type == "genus") && trait !== "evil") {
                  count++;
                }
              });
              if (count === 0) {
                unlockFeat("blank_slate");
              }
            }
          },
          gain(t) {
            if (["hellspawn"].includes(global.race.species)) {
              return;
            } else if (["sludge", "ultra_sludge"].includes(global.race.species) && global.race["modified"]) {
              return;
            }
            let cost = addCost(t, false);
            let res = global.race.universe === "antimatter" ? "AntiPlasmid" : "Plasmid";
            if (global.prestige[res].count >= cost) {
              global.prestige[res].count -= cost;
              global.race[t] = 1;
              if (!global.race.hasOwnProperty("modified")) {
                global.race["modified"] = {
                  t: 0,
                  nr: 0,
                  na: 0,
                  pr: 0,
                  pa: 0
                };
              }
              global.race.modified.t++;
              if (traits[t].val >= 0) {
                global.race.modified.pa++;
              } else {
                global.race.modified.na++;
              }
              cleanAddTrait(t);
              if (offspec_traits.includes(t)) {
                setTraitRank(t, { down: true });
              }
              genetics();
              drawTech();
              drawCity();
              combineTraits();
            }
          },
          geneCost(t) {
            return mGeneCost(t);
          },
          phageCost(t) {
            return mPhageCost(t);
          },
          traitEffect(t) {
            return loc(`trait_${t}_effect`);
          },
          removeCost(t) {
            return rmCost(t, true);
          },
          addCost(t) {
            return addCost(t, true);
          },
          genePurchasable(t) {
            let cost = fibonacci(global.race.minor[t] ? global.race.minor[t] + 4 : 4);
            if (t === "mastery") {
              cost *= 5;
            }
            return global.resource.Genes.amount >= cost;
          },
          phagePurchasable(t) {
            let cost = fibonacci(global.genes.minor[t] ? global.genes.minor[t] + 4 : 4);
            if (t === "mastery") {
              cost *= 2;
            }
            return global.prestige.Phage.count >= cost;
          }
        }
      });
      minor_list.forEach(function(t) {
        popover(
          `popGenetrait${t}`,
          function() {
            return mGeneCost(t);
          },
          {
            elm: `#geneticBreakdown .t-${t} .gbuy`,
            classes: `has-background-light has-text-dark`
          }
        );
        if (global.prestige.Phage.count > 0) {
          popover(
            `popGenetrait${t}`,
            function() {
              return mPhageCost(t);
            },
            {
              elm: `#geneticBreakdown .t-${t} .pbuy`,
              classes: `has-background-light has-text-dark`
            }
          );
        }
        popover(
          `popGenetrait${t}`,
          function() {
            if (global.stats.feat["novice"] && global.stats.achieve["apocalypse"] && global.stats.achieve.apocalypse.l > 0) {
              return `<div>${traitSkin("desc", t)}</div><div>${loc(`trait_${t}_effect`)}</div>`;
            } else {
              return traitSkin("desc", t);
            }
          },
          {
            elm: `#geneticBreakdown .t-${t} .name`,
            classes: `has-background-light has-text-dark`
          }
        );
      });
      remove_list.forEach(function(t) {
        popover(
          `popRemoveBkdwn${t}`,
          function() {
            return rmCost(t, true);
          },
          {
            elm: `#geneticBreakdown .remove${t}`,
            classes: `has-background-light has-text-dark`
          }
        );
        let id = `raceTrait${t}`;
        let desc = $(`<div></div>`);
        getTraitDesc(desc, t, { trank: traitRank(t) });
        popover(id, desc, { wide: true, classes: "w30" });
      });
      null_list.forEach(function(t) {
        let id = `raceTrait${t}`;
        let desc = $(`<div></div>`);
        getTraitDesc(desc, t, { trank: traitRank(t) });
        popover(id, desc, { elm: `#geneticBreakdown .trait${t}`, wide: true, classes: "w30" });
      });
      trait_list.forEach(function(t) {
        popover(
          `popAddBkdwn${t}`,
          function() {
            return addCost(t, true);
          },
          {
            elm: `#geneticBreakdown .add${t}`,
            classes: `has-background-light has-text-dark`
          }
        );
        let id = `raceTrait${t}`;
        let desc = $(`<div></div>`);
        getTraitDesc(desc, t, { trank: offspec_traits.includes(t) ? 0.5 : 1 });
        popover(id, desc, { wide: true, classes: "w30" });
      });
      dragGeneticsList();
    }
  }
  function sequenceLabs() {
    let labs = global.race["cataclysm"] || global.race["orbit_decayed"] ? support_on["exotic_lab"] : global.race["warlord"] ? p_on["twisted_lab"] : p_on["biolab"];
    if (global.tech["isolation"]) {
      labs = support_on["infectious_disease_lab"] * 5;
    }
    if (global.race["lone_survivor"]) {
      labs += 2;
    }
    if (labs > 0 && global.city.ptrait.includes("toxic")) {
      labs += planetTraits.toxic.vars()[0];
    }
    if (labs > 0 && global.race["elemental"] && traits.elemental.vars()[0] === "frost") {
      labs *= 1 + highPopAdjust(global.resource[global.race.species].amount * traits.elemental.vars()[4] / 100);
    }
    return Math.round(labs);
  }
  function bindTrait(breakdown2, trait) {
    let m_trait = $(`<div class="trait t-${trait} traitRow"></div>`);
    let gene = $(`<h4 class="is-sr-only">${trait}</h4><span v-bind:class="['basic-button', 'gene', 'gbuy', genePurchasable('${trait}') ? '' : 'has-text-fade']" role="button" :aria-label="geneCost('${trait}')" @click="gene('${trait}')">${global.resource.Genes.name} (${global.race.minor[trait] || 0})</span>`);
    m_trait.append(gene);
    if (global.prestige.Phage.count > 0) {
      let phage = $(`<span v-bind:class="['basic-button', 'gene', 'pbuy', phagePurchasable('${trait}') ? '' : 'has-text-fade']" role="button" :aria-label="phageCost('${trait}')" @click="phage('${trait}')">${loc("resource_Phage_name")} (${global.genes.minor[trait] || 0})</span>`);
      m_trait.append(phage);
    }
    let total = global.race[trait] > 1 ? `(${global.race[trait]}) ` : "";
    m_trait.append(`<span class="has-text-warning name">${total}${traitSkin("name", trait)}</span>`);
    breakdown2.append(m_trait);
  }
  function crispr() {
    if (global.tech["genetics"] && global.tech["genetics"] > 3 || global["sim"]) {
      clearElement($("#arpaCrispr"));
      $("#arpaCrispr").append(`<div class="has-text-warning">${loc("arpa_crispr_desc")}</div>`);
      $("#arpaCrispr").append('<div id="genes"></div>');
      drawGenes();
    }
  }
  function blood() {
    if (global.tech["b_stone"] && global.tech["b_stone"] >= 2) {
      clearElement($("#arpaBlood"));
      $("#arpaBlood").append(`<div class="has-text-warning">${loc("arpa_blood_desc")}</div>`);
      $("#arpaBlood").append('<div id="blood"></div>');
      drawBlood();
    }
  }
  function addProject(parent, project) {
    if (checkRequirements(project)) {
      if (!global.arpa[project]) {
        global.arpa[project] = {
          complete: 0,
          rank: 0
        };
      }
      if (arpaProjects[project]["rank"] && global.arpa[project].rank >= arpaProjects[project].rank) {
        return;
      }
      let current = $(`<div id="arpa${project}" class="arpaProject"></div>`);
      parent.append(current);
      let title = typeof arpaProjects[project].title === "string" ? arpaProjects[project].title : arpaProjects[project].title();
      let head = $(`<div class="head"><span class="desc has-text-warning" role="heading" aria-level="3">${title}</span><a v-on:click="srDescAndEffect" class="is-sr-only" role="button">{{ projectName() }} description</a><span aria-hidden="true" v-show="rank" class="rank">{{ rank | level }}</span><span class="is-sr-only">{{ rank | level }}</span></div>`);
      current.append(head);
      let progress = $(`<div class="pbar"><progress class="progress" :value="complete" max="100"></progress><span class="progress-value has-text-danger">{{ complete }}%</span></div>`);
      head.append(progress);
      let buy = $('<div class="buy"></div>');
      current.append(buy);
      buy.append($(`<button :aria-label="loc('queue') + ' ' + projectName()" class="button" @click="queue('${project}')">${loc("queue")}</button>`));
      buy.append($(`<button :aria-label="arpaProjectSRCosts('1','${project}')" class="button x1" @click="build('${project}',1)">1%</button>`));
      buy.append($(`<button :aria-label="arpaProjectSRCosts('10','${project}')" class="button x10" @click="build('${project}',10)">10%</button>`));
      buy.append($(`<button :aria-label="arpaProjectSRCosts('25','${project}')" class="button x25" @click="build('${project}',25)">25%</button>`));
      buy.append($(`<button :aria-label="arpaProjectSRCosts('100','${project}')" class="button x100" @click="build('${project}',100)">{{ complete | remain }}%</button>`));
      vBind({
        el: `#arpa${project}`,
        data: global.arpa[project],
        methods: {
          loc,
          queue(pro) {
            if (global.tech["queue"]) {
              let keyMult = keyMultiplier();
              for (let i = 0; i < keyMult; i++) {
                let arpaId = `arpa${pro}`;
                let used = 0;
                let buid_max = arpaProjects[pro]["queue_complete"] ? arpaProjects[pro].queue_complete() : Number.MAX_SAFE_INTEGER;
                for (var j = 0; j < global.queue.queue.length; j++) {
                  used += Math.ceil(global.queue.queue[j].q / global.queue.queue[j].qs);
                  if (global.queue.queue[j].id === arpaId) {
                    buid_max -= global.queue.queue[j].q;
                  }
                }
                if (used < global.queue.max && buid_max > 0) {
                  if (global.settings.q_merge !== "merge_never" && global.queue.queue.length > 0 && global.queue.queue[global.queue.queue.length - 1].id === arpaId) {
                    global.queue.queue[global.queue.queue.length - 1].q++;
                  } else {
                    let title2 = typeof arpaProjects[pro].title === "string" ? arpaProjects[pro].title : arpaProjects[pro].title();
                    global.queue.queue.push({ id: arpaId, action: "arpa", type: pro, label: title2, cna: false, time: 0, q: 1, qs: 1, t_max: 0 });
                  }
                  buildQueue();
                } else {
                  break;
                }
              }
            }
          },
          build(pro, num) {
            buildArpa(pro, num, true);
          },
          srDescAndEffect() {
            let desc = typeof arpaProjects[project].desc === "string" ? arpaProjects[project].desc : arpaProjects[project].desc();
            let effect = arpaProjects[project].effect();
            return srSpeak(`${desc}
${effect}`);
          },
          projectName() {
            return typeof arpaProjects[project].title === "string" ? arpaProjects[project].title : arpaProjects[project].title();
          },
          arpaProjectSRCosts(id, project2) {
            let inc = id === "100" ? 100 - global.arpa[project2].complete : id;
            var cost = `Construct ${inc}%. Costs:`;
            var costs = arpaAdjustCosts(arpaProjects[project2].cost);
            Object.keys(costs).forEach(function(res) {
              var res_cost = +(costs[res]() * (inc / 100)).toFixed(0);
              if (res_cost > 0) {
                var label = res === "Money" ? "$" : global.resource[res].name + ": ";
                var afford = global.resource[res].amount >= res_cost ? "" : ` ${loc("insufficient")} ${global.resource[res].name}.`;
                cost = cost + ` ${label} ${sizeApproximation(res_cost, 2)}.${afford}`;
              }
            });
            return cost;
          }
        },
        filters: {
          remain(val) {
            return 100 - val;
          },
          level(num) {
            return loc("arpa_level", [num]);
          }
        }
      });
      popover(
        `popArpa${project}`,
        function() {
          return arpaProjects[project].desc;
        },
        {
          elm: `#arpa${project} .head .desc`,
          classes: `has-background-light has-text-dark`
        }
      );
      popover(
        `popArpa${project}`,
        function() {
          return arpaProjects[project].effect();
        },
        {
          elm: `#arpa${project} .head .rank`,
          classes: `has-background-light has-text-dark`
        }
      );
      let classes = [1, 10, 25, 100];
      for (let i = 0; i < classes.length; i++) {
        let id = classes[i];
        popover(
          `popArpa${project}${id}`,
          function() {
            return arpaProjectCosts(id, project);
          },
          {
            elm: `#arpa${project} .buy .x${id}`,
            classes: `has-background-light has-text-dark`
          }
        );
      }
    }
  }
  function buildArpa(pro, num, update, queue) {
    let completed = false;
    if (num === 100) {
      num = 100 - global.arpa[pro].complete;
    }
    for (let i = 0; i < num; i++) {
      if (payArpaCosts(arpaProjects[pro].cost)) {
        global.arpa[pro].complete++;
        if (global.arpa[pro].complete >= 100) {
          global.arpa[pro].rank++;
          global.arpa[pro].complete = 0;
          global.tech[arpaProjects[pro].grant] = global.arpa[pro].rank;
          completed = true;
          if (pro === "monument") {
            global.arpa["m_type"] = pick_monument();
            $(`#arpa${pro} .head .desc`).html(arpaProjects[pro].title());
            updateQueueNames(false, ["arpamonument"]);
          }
          if (pro === "roid_eject") {
            $(`#arpa${pro} .head .desc`).html(arpaProjects[pro].title());
            updateQueueNames(false, ["arparoid_eject"]);
          }
          if (pro === "launch_facility") {
            global.settings.showSpace = true;
            global.tech["space"] = 1;
            clearPopper("popArpalaunch_facility");
            [1, 10, 25, 100].forEach(function(amount) {
              clearPopper(`popArpalaunch_facility${amount}`);
            });
            if (!queue) {
              removeFromQueue(["arpalaunch_facility"]);
            }
            physics();
            renderSpace();
            messageQueue(loc("arpa_projects_launch_facility_msg"), "info", false, ["progress"]);
          }
          if (global.race["inflation"]) {
            global.race.inflation += 10;
          }
          drawTech();
        }
      }
    }
    if (update) {
      let amounts = [1, 10, 25, 100];
      let popper = $("#popper");
      let pid = popper.data("id");
      for (let i = 0; i < amounts.length; i++) {
        if (pid === `popArpa${pro}${amounts[i]}`) {
          clearElement(popper);
          popper.append(arpaProjectCosts(amounts[i], pro));
          break;
        }
      }
    }
    return completed;
  }
  function arpaProjectCosts(id, project) {
    let inc = id === 100 ? 100 - global.arpa[project].complete : id;
    var cost = $("<div></div>");
    var costs = arpaAdjustCosts(arpaProjects[project].cost);
    let tc = arpaTimeCheck(arpaProjects[project], inc / 100, false, true);
    Object.keys(costs).forEach(function(res) {
      var res_cost = +(costs[res]() * (inc / 100)).toFixed(0);
      if (res_cost > 0) {
        var label = res === "Money" ? "$" : global.resource[res].name + ": ";
        var color = global.resource[res].amount >= res_cost ? "has-text-dark" : res === tc.r ? "has-text-danger" : "has-text-alert";
        cost.append($(`<div class="${color}" data-${res}="${res_cost}">${label}${sizeApproximation(res_cost, 2)}</div>`));
      }
    });
    return cost;
  }
  function updateTrades() {
    Object.keys(global.resource).forEach(function(res) {
      vBind({ el: `#market-${res}` }, "update");
    });
    vBind({ el: `#galaxyTrade` }, "update");
  }

  // src/resets.js
  function warhead() {
    if (!global.civic.mad.armed && !global.race["cataclysm"]) {
      if (!global["sim"]) {
        save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
      }
      clearSavedMessages();
      tagEvent("reset", {
        "end": "mad"
      });
      let god = global.race.species;
      let old_god = global.race.gods;
      let orbit = global.city.calendar.orbit;
      let biome = global.city.biome;
      let atmo = global.city.ptrait;
      let geo = global.city.geology;
      let gains = calcPrestige("mad");
      global.stats.mad++;
      updateResetStats();
      if (global.race.universe === "antimatter") {
        global.prestige.AntiPlasmid.count += gains.plasmid;
        global.stats.antiplasmid += gains.plasmid;
      } else {
        global.prestige.Plasmid.count += gains.plasmid;
        global.stats.plasmid += gains.plasmid;
      }
      global.stats.pdebt = gains.pdebt;
      unlockAchieve(`apocalypse`);
      unlockAchieve(`squished`, true);
      unlockAchieve(`extinct_${god}`);
      if (global.civic.govern.type === "anarchy") {
        unlockAchieve(`anarchist`);
      }
      if (global.city.biome === "hellscape" && races[global.race.species].type !== "demonic") {
        unlockFeat("take_no_advice");
      }
      if (global.race["truepath"]) {
        unlockAchieve("ashanddust");
      }
      checkAchievements();
      grandDeathTour("md");
      let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
      let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
      global["race"] = {
        species: "protoplasm",
        gods: god,
        old_gods: old_god,
        rapid_mutation: 1,
        ancient_ruins: 1,
        universe: global.race.universe,
        seeded: false,
        ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
      };
      if (corruption > 0) {
        global.race["corruption"] = corruption;
      }
      if (srace) {
        global.race["srace"] = srace;
      }
      resetCommon({
        orbit,
        biome,
        ptrait: atmo,
        geology: geo
      });
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
      window.location.reload();
    }
  }
  function bioseed() {
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "bioseed"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let genus = races[god].type === "hybrid" ? global.race.maintype : races[god].type;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let gains = calcPrestige("bioseed");
    global.stats.bioseed++;
    updateResetStats();
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    unlockAchieve(`seeder`);
    unlockAchieve(`biome_${biome}`);
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    unlockAchieve(`genus_${genus}`);
    if (global.race["gravity_well"]) {
      unlockAchieve(`escape_velocity`);
    }
    if (global.race["truepath"]) {
      unlockAchieve(`exodus`);
    }
    if (atmo.includes("dense") && global.race.universe === "heavy") {
      unlockAchieve(`double_density`);
    }
    if (global.race["junker"] && global.race.species === "junker") {
      unlockFeat("organ_harvester");
    }
    if (global.city.biome === "hellscape" && races[global.race.species].type !== "demonic") {
      unlockFeat("ill_advised");
    }
    if (typeof global.tech["world_control"] === "undefined") {
      unlockAchieve(`cult_of_personality`);
    }
    if (global.race["cataclysm"]) {
      unlockAchieve("iron_will", false, 5);
    }
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    let good_rocks = 0;
    let bad_rocks = 0;
    Object.keys(global.city.geology).forEach(function(g) {
      if (global.city.geology[g] > 0) {
        good_rocks++;
      } else if (global.city.geology[g] < 0) {
        bad_rocks++;
      }
    });
    if (good_rocks >= 4) {
      unlockAchieve("miners_dream");
    }
    if (bad_rocks >= 3) {
      unlockFeat("rocky_road");
    }
    if (global.race["steelen"] && global.race["steelen"] >= 1) {
      unlockAchieve(`steelen`);
    }
    switch (global.race.universe) {
      case "micro":
        if (global.race["small"] || global.race["compact"]) {
          unlockAchieve(`macro`, true);
        } else {
          unlockAchieve(`marble`, true);
        }
        break;
      default:
        break;
    }
    checkAchievements();
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    let probes = global.starDock.probes.count + 1;
    let gecks = global.starDock.hasOwnProperty("geck") ? global.starDock.geck.count : 0;
    if (global.stats.achieve["explorer"]) {
      probes += global.stats.achieve["explorer"].l;
    }
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: true,
      probes,
      geck: gecks,
      seed: Math.floor(seededRandom(1e4)),
      ascended: false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: false
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function cataclysm_end() {
    if (global.city.ptrait.includes("unstable") && global.tech["quaked"]) {
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      if (!global["sim"]) {
        save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
      }
      tagEvent("reset", {
        "end": "cataclysm"
      });
      clearSavedMessages();
      let gains = calcPrestige("cataclysm");
      global.stats.cataclysm++;
      updateResetStats();
      global.prestige.Phage.count += gains.phage;
      global.stats.phage += gains.phage;
      if (global.race.universe === "antimatter") {
        global.prestige.AntiPlasmid.count += gains.plasmid;
        global.stats.antiplasmid += gains.plasmid;
      } else {
        global.prestige.Plasmid.count += gains.plasmid;
        global.stats.plasmid += gains.plasmid;
      }
      global.stats.pdebt = gains.pdebt;
      unlockAchieve(`squished`, true);
      unlockAchieve(`extinct_${global.race.species}`);
      if (global.city.biome === "hellscape" && races[global.race.species].type !== "demonic") {
        unlockFeat("take_no_advice");
      }
      checkAchievements();
      unlockAchieve("shaken");
      if (global.race["cataclysm"]) {
        unlockAchieve("failed_history");
      }
      grandDeathTour("ct");
      let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
      let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
      let mainType = global.race.hasOwnProperty("maintype") ? global.race.maintype : false;
      global["race"] = {
        species: global.race.species,
        gods: global.race.gods,
        old_gods: global.race.old_gods,
        universe: global.race.universe,
        seeded: false,
        ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
      };
      if (corruption > 0) {
        global.race["corruption"] = corruption;
      }
      if (srace) {
        global.race["srace"] = srace;
      }
      if (mainType) {
        global.race["maintype"] = mainType;
      }
      resetCommon({
        orbit: global.city.calendar.orbit,
        biome: global.city.biome,
        ptrait: global.city.ptrait,
        geology: global.city.geology
      });
      if (global.race.universe === "antimatter") {
        global.race["weak_mastery"] = 1;
      } else {
        global.race["no_plasmid"] = 1;
      }
      let genes = ["crispr", "trade", "craft"];
      for (let i = 0; i < genes.length; i++) {
        global.race[`no_${genes[i]}`] = 1;
      }
      global.race["start_cataclysm"] = 1;
      global.race["cataclysm"] = 1;
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
      window.location.reload();
    }
  }
  function big_bang() {
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "blackhole"
    });
    unlockAchieve(`extinct_${global.race.species}`);
    switch (global.race.universe) {
      case "heavy":
        unlockAchieve(`heavy`);
        break;
      case "antimatter":
        unlockAchieve(`canceled`);
        break;
      case "evil":
        unlockAchieve(`eviltwin`);
        break;
      case "micro":
        unlockAchieve(`microbang`, true);
        break;
      case "standard":
        unlockAchieve(`whitehole`);
        break;
      default:
        break;
    }
    if (global.space.hasOwnProperty("spaceport") && global.space.spaceport.count === 0) {
      unlockAchieve(`red_dead`);
    }
    unlockAchieve(`squished`, true);
    if (global.race.universe === "evil" && races[global.race.species].type === "angelic") {
      unlockFeat("nephilim");
    }
    if (global.race["junker"] && global.race.species === "junker") {
      unlockFeat("the_misery");
    }
    if (global.race["decay"]) {
      unlockAchieve(`dissipated`);
    }
    if (global.race["steelen"]) {
      unlockFeat("steelem");
    }
    grandDeathTour("bh");
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let gains = calcPrestige("bigbang");
    checkAchievements();
    global.stats.blackhole++;
    updateResetStats();
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Dark.count = +(global.prestige.Dark.count + gains.dark).toFixed(3);
    global.stats.dark = +(global.stats.dark + gains.dark).toFixed(3);
    global.stats.universes++;
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: "bigbang",
      seeded: true,
      bigbang: true,
      probes: 4,
      //geck: gecks,
      seed: Math.floor(seededRandom(1e4)),
      ascended: false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: false
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function vacuumCollapse() {
    if (global.tech.syphon >= 80 && global.race.universe === "magic") {
      global.tech.syphon = 79;
      global.arpa.syphon.rank = 79;
      global.arpa.syphon.complete = 99;
      global.queue.queue = [];
      global.stats["current"] = Date.now();
      if (!global["sim"]) {
        save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
      }
      clearSavedMessages();
      tagEvent("reset", {
        "end": "vacuum"
      });
      unlockAchieve(`extinct_${global.race.species}`);
      unlockAchieve(`pw_apocalypse`);
      if (global.space.hasOwnProperty("spaceport") && global.space.spaceport.count === 0) {
        unlockAchieve(`red_dead`);
      }
      if (!global.race["modified"] && global.race.species === "balorg") {
        unlockAchieve("pass");
      }
      if (global.race["junker"] && global.race.species === "junker") {
        unlockFeat("the_misery");
      }
      if (global.race["decay"]) {
        unlockAchieve(`dissipated`);
      }
      if (global.race["steelen"]) {
        unlockFeat("steelem");
      }
      grandDeathTour("vc");
      let god = global.race.species;
      let old_god = global.race.gods;
      let orbit = global.city.calendar.orbit;
      let biome = global.city.biome;
      let atmo = global.city.ptrait;
      let gains = calcPrestige("vacuum");
      checkAchievements();
      global.stats.blackhole++;
      updateResetStats();
      global.prestige.Phage.count += gains.phage;
      global.stats.phage += gains.phage;
      if (global.race.universe === "antimatter") {
        global.prestige.AntiPlasmid.count += gains.plasmid;
        global.stats.antiplasmid += gains.plasmid;
      } else {
        global.prestige.Plasmid.count += gains.plasmid;
        global.stats.plasmid += gains.plasmid;
      }
      global.stats.pdebt = gains.pdebt;
      global.prestige.Dark.count = +(global.prestige.Dark.count + gains.dark).toFixed(3);
      global.stats.dark = +(global.stats.dark + gains.dark).toFixed(3);
      global.stats.universes++;
      let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
      let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
      global["race"] = {
        species: "protoplasm",
        gods: god,
        old_gods: old_god,
        universe: "bigbang",
        seeded: true,
        bigbang: true,
        probes: 4,
        //geck: gecks,
        seed: Math.floor(seededRandom(1e4)),
        ascended: false
      };
      if (corruption > 0) {
        global.race["corruption"] = corruption;
      }
      if (srace) {
        global.race["srace"] = srace;
      }
      resetCommon({
        orbit,
        biome,
        ptrait: atmo,
        geology: false
      });
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
      window.location.reload();
    }
  }
  function ascend() {
    clearSavedMessages();
    tagEvent("reset", {
      "end": "ascend"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("ascend");
    global.stats.ascend++;
    updateResetStats();
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Harmony.count = parseFloat((global.prestige.Harmony.count + gains.harmony).toFixed(2));
    global.stats.harmony = parseFloat((global.stats.harmony + gains.harmony).toFixed(2));
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    if (typeof global.tech["world_control"] === "undefined") {
      unlockAchieve(`cult_of_personality`);
    }
    let good_rocks = 0;
    Object.keys(global.city.geology).forEach(function(g) {
      if (global.city.geology[g] > 0) {
        good_rocks++;
      }
    });
    if (good_rocks >= 4) {
      unlockAchieve("miners_dream");
    }
    if (!global.galaxy.hasOwnProperty("dreadnought") || global.galaxy.dreadnought.count === 0) {
      unlockAchieve(`dreaded`);
    }
    if (!global.race["modified"] && (global.race.species === "synth" || global.race.species === "nano") && global.race["emfield"]) {
      unlockFeat("digital_ascension");
    }
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    checkAchievements();
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: true
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    Object.keys(geo).forEach(function(g) {
      geo[g] = +(geo[g] + 0.02).toFixed(2);
    });
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function descension() {
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "descension"
    });
    unlockAchieve(`squished`, true);
    unlockAchieve(`extinct_${global.race.species}`);
    if (global.race["witch_hunter"] && global.tech["forbidden"] >= 5 && global.race.universe === "magic") {
      unlockAchieve(`nightmare`);
    } else {
      unlockAchieve(`corrupted`);
    }
    if (global.race["fasting"] && global.tech["dish_reset"]) {
      let affix2 = universeAffix();
      global.stats["endless_hunger"].b5[affix2] = true;
      if (affix2 !== "m" && affix2 !== "l") {
        global.stats["endless_hunger"].b5.l = true;
      }
      if (global.stats.starved === 0) {
        unlockFeat("immortal");
      }
    }
    if (races[global.race.species].type === "angelic") {
      unlockFeat("twisted");
    }
    if (global.race["junker"] && global.race.species === "junker") {
      unlockFeat("the_misery");
    }
    if (!global.race["modified"] && global.race["junker"] && global.race.species === "junker") {
      unlockFeat(`garbage_pie`);
    }
    if (global.race["cataclysm"]) {
      unlockFeat(`finish_line`);
    }
    if (global.race["ooze"] && global.race.species === "sludge") {
      unlockFeat("slime_lord");
    }
    grandDeathTour("di");
    let gains = calcPrestige("descend");
    global.prestige.Artifact.count += gains.artifact;
    global.stats.artifact += gains.artifact;
    let affix = universeAffix();
    if (global.stats.spire.hasOwnProperty(affix)) {
      if (global.stats.spire[affix].hasOwnProperty("lord")) {
        global.stats.spire[affix].lord++;
      } else {
        global.stats.spire[affix]["lord"] = 1;
      }
      if (global.tech["dl_reset"]) {
        global.stats.spire[affix]["dlstr"] = 0;
      } else {
        if (global.stats.spire[affix].hasOwnProperty("dlstr")) {
          global.stats.spire[affix].dlstr++;
        } else {
          global.stats.spire[affix]["dlstr"] = 1;
        }
      }
    }
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    global.stats.descend++;
    updateResetStats();
    checkAchievements();
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      corruption: 5,
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
    };
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function apotheosis() {
    clearSavedMessages();
    tagEvent("reset", {
      "end": "apotheosis"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("apotheosis");
    global.stats.apotheosis++;
    updateResetStats();
    global.prestige.Supercoiled.count += gains.supercoiled;
    global.stats.supercoiled += gains.supercoiled;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    if (global.race["warlord"]) {
      global.prestige.Artifact.count += gains.artifact;
      global.stats.artifact += gains.artifact;
    }
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    if (typeof global.tech["world_control"] === "undefined") {
      unlockAchieve(`cult_of_personality`);
    }
    let good_rocks = 0;
    Object.keys(global.city.geology).forEach(function(g) {
      if (global.city.geology[g] > 0) {
        good_rocks++;
      }
    });
    if (good_rocks >= 4) {
      unlockAchieve("miners_dream");
    }
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    checkAchievements();
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: true
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    Object.keys(geo).forEach(function(g) {
      geo[g] = +(geo[g] + 0.02).toFixed(2);
    });
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function terraform(planet) {
    clearSavedMessages();
    tagEvent("reset", {
      "end": "terraform"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = planet.biome;
    let atmo = planet.traitlist;
    let geo = planet.geology;
    let gains = calcPrestige("terraform");
    global.stats.terraform++;
    updateResetStats();
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Harmony.count = parseFloat((global.prestige.Harmony.count + gains.harmony).toFixed(2));
    global.stats.harmony = parseFloat((global.stats.harmony + gains.harmony).toFixed(2));
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    if (typeof global.tech["world_control"] === "undefined") {
      unlockAchieve(`cult_of_personality`);
    }
    let good_rocks = 0;
    Object.keys(global.city.geology).forEach(function(g) {
      if (global.city.geology[g] > 0) {
        good_rocks++;
      }
    });
    if (good_rocks >= 4) {
      unlockAchieve("miners_dream");
    }
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    checkAchievements();
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false,
      rejuvenated: true
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function aiApocalypse() {
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "ai apocalypse"
    });
    unlockAchieve(`extinct_${global.race.species}`);
    unlockAchieve(`obsolete`);
    unlockAchieve(`squished`, true);
    if (global.race["junker"] && global.race.species === "junker") {
      unlockFeat("the_misery");
    }
    grandDeathTour("ai");
    let god = global.race.species;
    let old_god = global.race.gods;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("ai");
    checkAchievements();
    global.stats.aiappoc++;
    updateResetStats();
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.AICore.count += gains.cores;
    global.stats.cores += gains.cores;
    let srace = races[god].type !== "synthetic" && !["junker", "sludge", "ultra_sludge"].includes(god) ? god : global.race.hasOwnProperty("srace") ? global.race.srace : god;
    global.stats.synth[god] = true;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      srace,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function matrix() {
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "matrix"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let genus = races[god].type === "hybrid" ? global.race.maintype : races[god].type;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("matrix");
    unlockAchieve(`biome_${biome}`);
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    unlockAchieve(`genus_${genus}`);
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    unlockAchieve(`bluepill`);
    trackWomling();
    checkAchievements();
    global.stats.matrix++;
    updateResetStats();
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    global.prestige.AICore.count += gains.cores;
    global.stats.cores += gains.cores;
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function retirement() {
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "retired"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let genus = races[god].type === "hybrid" ? global.race.maintype : races[god].type;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("retired");
    unlockAchieve(`biome_${biome}`);
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    unlockAchieve(`genus_${genus}`);
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    unlockAchieve(`retired`);
    trackWomling();
    checkAchievements();
    global.stats.retire++;
    updateResetStats();
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    global.prestige.AICore.count += gains.cores;
    global.stats.cores += gains.cores;
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function gardenOfEden() {
    if (webWorker.w) {
      webWorker.w.terminate();
    }
    if (!global["sim"]) {
      save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
    }
    clearSavedMessages();
    tagEvent("reset", {
      "end": "eden"
    });
    let god = global.race.species;
    let old_god = global.race.gods;
    let genus = races[god].type === "hybrid" ? global.race.maintype : races[god].type;
    let orbit = global.city.calendar.orbit;
    let biome = global.city.biome;
    let atmo = global.city.ptrait;
    let geo = global.city.geology;
    let gains = calcPrestige("eden");
    unlockAchieve(`biome_${biome}`);
    atmo.forEach(function(a) {
      if (planetTraits.hasOwnProperty(a)) {
        unlockAchieve(`atmo_${a}`);
      }
    });
    unlockAchieve(`genus_${genus}`);
    if (global.race["gross_enabled"] && global.race["ooze"] && global.race.species !== "custom" && global.race.species !== "sludge" && global.race.species != "hybrid") {
      unlockAchieve(`gross`);
    }
    unlockAchieve(`adam_eve`);
    trackWomling();
    checkAchievements();
    global.stats.eden++;
    updateResetStats();
    if (global.race.universe === "antimatter") {
      global.prestige.AntiPlasmid.count += gains.plasmid;
      global.stats.antiplasmid += gains.plasmid;
    } else {
      global.prestige.Plasmid.count += gains.plasmid;
      global.stats.plasmid += gains.plasmid;
    }
    global.stats.pdebt = gains.pdebt;
    global.prestige.Phage.count += gains.phage;
    global.stats.phage += gains.phage;
    global.prestige.AICore.count += gains.cores;
    global.stats.cores += gains.cores;
    let srace = global.race.hasOwnProperty("srace") ? global.race.srace : false;
    let corruption = global.race.hasOwnProperty("corruption") && global.race.corruption > 1 ? global.race.corruption - 1 : 0;
    global["race"] = {
      species: "protoplasm",
      gods: god,
      old_gods: old_god,
      universe: global.race.universe,
      seeded: false,
      seed: Math.floor(seededRandom(1e4)),
      ascended: global.race.hasOwnProperty("ascended") ? global.race.ascended : false
    };
    if (corruption > 0) {
      global.race["corruption"] = corruption;
    }
    if (srace) {
      global.race["srace"] = srace;
    }
    resetCommon({
      orbit,
      biome,
      ptrait: atmo,
      geology: geo
    });
    save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    window.location.reload();
  }
  function resetCommon(args) {
    global.city = {
      calendar: {
        day: 0,
        year: 0,
        weather: 2,
        temp: 1,
        moon: 0,
        wind: 0,
        orbit: args.orbit
      },
      biome: args.biome,
      ptrait: args.ptrait
    };
    if (args.geology) {
      global.city["geology"] = args.geology;
    }
    global.tech = { theology: 1 };
    clearStates();
    global.new = true;
    global.seed = Math.rand(0, 1e4);
  }
  function trackWomling() {
    let uni = universeAffix();
    if (global.race["womling_friend"]) {
      if (uni !== "m") {
        global.stats.womling.friend.l++;
      }
      if (uni !== "l") {
        if (!global.stats.womling.friend.hasOwnProperty(uni)) {
          global.stats.womling.friend[uni] = 0;
        }
        global.stats.womling.friend[uni]++;
      }
    } else if (global.race["womling_lord"]) {
      if (uni !== "m") {
        global.stats.womling.lord.l++;
      }
      if (uni !== "l") {
        if (!global.stats.womling.lord.hasOwnProperty(uni)) {
          global.stats.womling.lord[uni] = 0;
        }
        global.stats.womling.lord[uni]++;
      }
    } else if (global.race["womling_god"]) {
      if (uni !== "m") {
        global.stats.womling.god.l++;
      }
      if (uni !== "l") {
        if (!global.stats.womling.god.hasOwnProperty(uni)) {
          global.stats.womling.god[uni] = 0;
        }
        global.stats.womling.god[uni]++;
      }
    }
    if (global.stats.womling.friend.l > 0 && global.stats.womling.lord.l > 0 && global.stats.womling.god.l > 0) {
      unlockAchieve("overlord", uni === "m" ? true : false, alevel(), "l");
    }
    if (global.stats.womling.friend[uni] > 0 && global.stats.womling.lord[uni] > 0 && global.stats.womling.god[uni] > 0) {
      unlockAchieve("overlord", uni === "m" ? true : false, alevel(), uni);
    }
  }
  function grandDeathTour(type) {
    if (global.race.species === "ultra_sludge") {
      let rank = alevel();
      let uni = universeAffix();
      if (global.stats.death_tour[type][uni] < rank) {
        global.stats.death_tour[type][uni] = rank;
      }
      let gdt_rank = 5;
      Object.keys(global.stats.death_tour).forEach(function(k) {
        let universe = 0;
        Object.keys(global.stats.death_tour[k]).forEach(function(u) {
          if (u !== "m" && global.stats.death_tour[k][u] > universe) {
            universe = global.stats.death_tour[k][u];
          }
        });
        if (gdt_rank > universe) {
          gdt_rank = universe;
        }
      });
      if (gdt_rank > 0) {
        unlockFeat("grand_death_tour", false, gdt_rank);
      }
    }
  }

  // src/truepath.js
  var outerTruth = {
    spc_titan: {
      info: {
        name() {
          return planetName().titan;
        },
        desc() {
          return loc("space_titan_info_desc", [planetName().titan, races[global.race.species].home]);
        },
        support: "electrolysis",
        zone: "outer",
        syndicate() {
          return global.tech["titan"] && global.tech.titan >= 3 && global.tech["enceladus"] && global.tech.enceladus >= 2 ? true : false;
        },
        syndicate_cap() {
          if (global.tech["triton"]) {
            return global.tech.outer >= 4 ? 2e3 : 1e3;
          }
          return 600;
        }
      },
      titan_mission: {
        id: "space-titan_mission",
        title() {
          return loc("space_mission_title", [planetName().titan]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().titan]);
        },
        reqs: { outer: 1 },
        grant: ["titan", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.titan >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(o, wiki) {
            return +fuel_adjust(25e4, false, wiki).toFixed(0);
          },
          Elerium() {
            return 100;
          }
        },
        effect() {
          return loc("space_titan_mission_effect", [planetName().titan]);
        },
        action() {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_titan_mission_action", [planetName().titan, races[global.race.species].home]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      titan_spaceport: {
        id: "space-titan_spaceport",
        title: loc("space_red_spaceport_title"),
        desc: `<div>${loc("space_red_spaceport_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { titan: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("titan_spaceport", offset, 25e5, 1.32);
          },
          Lumber(offset) {
            return spaceCostMultiplier("titan_spaceport", offset, 75e4, 1.32);
          },
          Cement(offset) {
            return spaceCostMultiplier("titan_spaceport", offset, 35e4, 1.32);
          },
          Mythril(offset) {
            return spaceCostMultiplier("titan_spaceport", offset, 1e4, 1.32);
          }
        },
        effect() {
          let water = global.resource.Water.display ? `<div>${loc("plus_max_resource", [sizeApproximation(spatialReasoning(250)), global.resource.Water.name])}</div>` : ``;
          let support = global.tech["enceladus"] && global.tech.enceladus >= 2 ? `<div>+${loc(`galaxy_alien2_support`, [$(this)[0].support(), planetName().enceladus])}</div>` : ``;
          let storage = global.tech["titan"] && global.tech.titan >= 5 ? `<div>${loc(`space_titan_spaceport_storage`, [25])}</div>` : ``;
          return `${support}${water}${storage}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        support() {
          return 2;
        },
        powered() {
          return powerCostMod(10);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("titan_spaceport");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["titan_spaceport", "space"]
          };
        },
        post() {
          if (global.tech["titan"] === 1) {
            global.tech["titan"] = 2;
            drawTech();
          }
        }
      },
      electrolysis: {
        id: "space-electrolysis",
        title: loc("space_electrolysis_title"),
        desc() {
          return `<div>${loc("space_electrolysis_title")}</div><div class="has-text-special">${loc("space_electrolysis_req", [global.resource.Water.name])}</div>`;
        },
        reqs: { titan: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("electrolysis", offset, 1e6, 1.25);
          },
          Copper(offset) {
            return spaceCostMultiplier("electrolysis", offset, 185e3, 1.25);
          },
          Steel(offset) {
            return spaceCostMultiplier("electrolysis", offset, 22e4, 1.25);
          },
          Polymer(offset) {
            return spaceCostMultiplier("electrolysis", offset, 38e4, 1.25);
          }
        },
        effect(wiki) {
          let support = `<div>+${loc(`galaxy_alien2_support`, [$(this)[0].support(wiki), planetName().titan])}</div>`;
          return `${support}<div class="has-text-caution">${loc("space_electrolysis_use", [$(this)[0].support_fuel().a, global.resource.Water.name, $(this)[0].powered()])}</div>`;
        },
        support(wiki) {
          return global.tech["titan_ai_core"] && global.tech.titan_ai_core >= 2 && (wiki ? global.space.ai_core2.on : p_on["ai_core2"]) ? 3 : 2;
        },
        support_fuel() {
          return { r: "Water", a: 35 };
        },
        powered() {
          return powerCostMod(8);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("electrolysis");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["electrolysis", "space"]
          };
        },
        post() {
          if (global.tech["titan"] === 3) {
            global.tech["titan"] = 4;
            drawTech();
          }
        }
      },
      hydrogen_plant: {
        id: "space-hydrogen_plant",
        title: loc("space_hydrogen_plant_title"),
        desc() {
          return `<div>${loc("space_hydrogen_plant_title")}</div><div class="has-text-special">${loc("space_hydrogen_plant_req")}</div>`;
        },
        reqs: { titan_power: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hydrogen_plant", offset, 15e5, 1.28);
          },
          Iridium(offset) {
            return spaceCostMultiplier("hydrogen_plant", offset, 292e3, 1.28);
          },
          Stanene(offset) {
            return spaceCostMultiplier("hydrogen_plant", offset, 599e3, 1.28);
          },
          Cement(offset) {
            return spaceCostMultiplier("hydrogen_plant", offset, 18e4, 1.28);
          }
        },
        effect() {
          return `<span>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered()])}</span>, <span class="has-text-caution">${loc("space_hydrogen_plant_effect", [1, loc("space_electrolysis_title")])}</span>`;
        },
        support() {
          return 2;
        },
        powered() {
          return powerModifier(-22);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("hydrogen_plant");
            if (global.space.electrolysis.on > global.space.hydrogen_plant.on) {
              global.space.hydrogen_plant.on++;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["hydrogen_plant", "space"]
          };
        }
      },
      titan_quarters: {
        id: "space-titan_quarters",
        title: loc("interstellar_habitat_title"),
        desc() {
          return `<div>${loc("interstellar_habitat_title")}</div><div class="has-text-special">${loc("space_habitat_req", [planetName().titan, global.resource.Food.name, global.resource.Water.name])}</div>`;
        },
        reqs: { titan: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("titan_quarters", offset, 12e5, 1.28);
          },
          Furs(offset) {
            return spaceCostMultiplier("titan_quarters", offset, 85e3, 1.28);
          },
          Plywood(offset) {
            return spaceCostMultiplier("titan_quarters", offset, 1e5, 1.28);
          },
          Horseshoe() {
            return global.race["hooved"] ? 1 : 0;
          }
        },
        effect() {
          let gain = jobScale(1);
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().titan])}</div><div>${loc("plus_max_resource", [jobScale(1), global.race["truepath"] ? loc("job_colonist_tp", [planetName().titan]) : loc("colonist")])}</div><div>${loc("plus_max_resource", [gain, loc("citizen")])}</div><div class="has-text-caution">${loc(`spend`, [$(this)[0].support_fuel()[0].a, global.resource[$(this)[0].support_fuel()[0].r].name])}</div><div class="has-text-caution">${loc(`spend`, [$(this)[0].support_fuel()[1].a, global.resource[$(this)[0].support_fuel()[1].r].name])}</div>`;
        },
        s_type: "titan",
        support() {
          return -1;
        },
        support_fuel() {
          return [{ r: "Water", a: 12 }, { r: "Food", a: 500 }];
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("titan_quarters");
            global.civic.titan_colonist.display = true;
            if (powerOnNewStruct($(this)[0])) {
              global.resource[global.race.species].max += jobScale(1);
              let hiredMax = jobScale(1);
              global.civic.titan_colonist.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.titan_colonist.workers += hired;
            }
            if (global.space.titan_quarters.count === 1) {
              renderSpace();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["titan_quarters", "space"]
          };
        },
        citizens() {
          let gain = 1;
          if (global.race["high_pop"]) {
            gain *= traits.high_pop.vars()[0];
          }
          return gain;
        }
      },
      titan_mine: {
        id: "space-titan_mine",
        title() {
          return structName("mine");
        },
        desc() {
          return `<div>${loc("space_red_mine_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().titan])}</div>`;
        },
        reqs: { titan: 4 },
        condition() {
          return global.space["titan_quarters"] && global.space.titan_quarters.count > 0 ? true : false;
        },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("titan_mine", offset, 475e3, 1.28);
          },
          Lumber(offset) {
            return spaceCostMultiplier("titan_mine", offset, 568e3, 1.28);
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("titan_mine", offset, 25e4, 1.28);
          }
        },
        effect() {
          let adam_val = production("titan_mine", "adamantite");
          let alum_val = production("titan_mine", "aluminium");
          let adamantite = +adam_val.toFixed(3);
          let aluminium = +alum_val.toFixed(3);
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().titan])}</div><div>${loc("space_red_mine_effect", [adamantite, global.resource.Adamantite.name])}</div><div>${loc("space_red_mine_effect", [aluminium, global.resource.Aluminium.name])}</div>`;
        },
        s_type: "titan",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        special() {
          return true;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("titan_mine");
            powerOnNewStruct($(this)[0]);
            if (global.space.titan_mine.count === 1) {
              global.resource.Adamantite.display = true;
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, ratio: 90 },
            p: ["titan_mine", "space"]
          };
        }
      },
      storehouse: {
        id: "space-storehouse",
        title: loc("space_storehouse_title"),
        desc: loc("space_storehouse_title"),
        reqs: { titan: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("storehouse", offset, 175e3, 1.28);
          },
          Lumber(offset) {
            return spaceCostMultiplier("storehouse", offset, 1e5, 1.28);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("storehouse", offset, 12e4, 1.28);
          },
          Cement(offset) {
            return spaceCostMultiplier("storehouse", offset, 45e3, 1.28);
          }
        },
        wide: true,
        res() {
          return [
            "Lumber",
            "Stone",
            "Furs",
            "Copper",
            "Iron",
            "Aluminium",
            "Cement",
            "Coal",
            "Steel",
            "Titanium",
            "Alloy",
            "Polymer",
            "Iridium",
            "Chrysotile",
            "Nano_Tube",
            "Neutronium",
            "Adamantite"
          ];
        },
        heavy(res) {
          return ["Copper", "Iron", "Steel", "Titanium", "Iridium", "Neutronium", "Adamantite"].includes(res) ? true : false;
        },
        val(res) {
          switch (res) {
            case "Lumber":
              return 3e3;
            case "Stone":
              return 3e3;
            case "Chrysotile":
              return 3e3;
            case "Furs":
              return 1700;
            case "Copper":
              return 1520;
            case "Iron":
              return 1400;
            case "Aluminium":
              return 1280;
            case "Cement":
              return 1120;
            case "Coal":
              return 480;
            case "Steel":
              return 240;
            case "Titanium":
              return 160;
            case "Alloy":
              return 180;
            case "Polymer":
              return 150;
            case "Iridium":
              return 175;
            case "Nano_Tube":
              return 120;
            case "Neutronium":
              return 64;
            case "Adamantite":
              return 72;
            default:
              return 0;
          }
        },
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = tpStorageMultiplier("storehouse", false, wiki);
          let h_multiplier = tpStorageMultiplier("storehouse", true, wiki);
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let heavy = $(this)[0].heavy(res);
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * (heavy ? h_multiplier : multiplier)).toFixed(0), 1);
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage = storage + "</div>";
          return storage;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("storehouse");
            let multiplier = tpStorageMultiplier("storehouse", false);
            let h_multiplier = tpStorageMultiplier("storehouse", true);
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                let heavy = $(this)[0].heavy(res);
                global.resource[res].max += spatialReasoning($(this)[0].val(res)) * (heavy ? h_multiplier : multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["storehouse", "space"]
          };
        }
      },
      titan_bank: {
        id: "space-titan_bank",
        title: loc("city_bank"),
        desc() {
          return loc("city_bank_desc", [planetName().titan]);
        },
        reqs: { titan: 6 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("titan_bank", offset, traitCostMod("untrustworthy", 25e5), 1.32);
          },
          Titanium(offset) {
            return spaceCostMultiplier("titan_bank", offset, traitCostMod("untrustworthy", 38e4), 1.32);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("titan_bank", offset, traitCostMod("untrustworthy", 5e3), 1.32);
          }
        },
        effect() {
          let vault = bank_vault() * 2;
          vault = spatialReasoning(vault);
          vault = (+vault.toFixed(0)).toLocaleString();
          return loc("plus_max_resource", [`$${vault}`, global.resource.Money.name]);
        },
        action() {
          if (payCosts($(this)[0])) {
            global["resource"]["Money"].max += spatialReasoning(1800);
            incrementStruct("titan_bank");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["titan_bank", "space"]
          };
        }
      },
      g_factory: {
        id: "space-g_factory",
        title: loc("interstellar_g_factory_title"),
        desc() {
          return `<div>${loc("interstellar_g_factory_title")}</div><div class="has-text-special">${loc("space_support", [planetName().titan])}</div>`;
        },
        reqs: { graphene: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("g_factory", offset, 95e4, 1.28);
          },
          Copper(offset) {
            return spaceCostMultiplier("g_factory", offset, 165e3, 1.28);
          },
          Stone(offset) {
            return spaceCostMultiplier("g_factory", offset, 22e4, 1.28);
          },
          Adamantite(offset) {
            return spaceCostMultiplier("g_factory", offset, 12500, 1.28);
          }
        },
        effect() {
          let graphene = 0.05;
          if (global.race["high_pop"]) {
            graphene = +highPopAdjust(graphene).toFixed(3);
          }
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().titan])}</div><div>${loc("space_red_mine_effect", [graphene, global.resource.Graphene.name])}</div><div>${loc("interstellar_g_factory_effect")}</div>`;
        },
        s_type: "titan",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        special: true,
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("g_factory");
            global.resource.Graphene.display = true;
            if (powerOnNewStruct($(this)[0])) {
              if (global.race["kindling_kindred"] || global.race["smoldering"]) {
                global.space.g_factory.Oil++;
              } else {
                global.space.g_factory.Lumber++;
              }
            }
            global.settings.showIndustry = true;
            defineIndustry();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, Lumber: 0, Coal: 0, Oil: 0 },
            p: ["g_factory", "space"]
          };
        }
      },
      sam: {
        id: "space-sam",
        title: loc("space_sam_title"),
        desc() {
          return `<div>${loc("space_sam_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { titan: 7 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("sam", offset, 25e5, 1.28);
          },
          Steel(offset) {
            return spaceCostMultiplier("sam", offset, 45e4, 1.28);
          },
          Elerium(offset) {
            return spaceCostMultiplier("sam", offset, 120, 1.28);
          },
          Brick(offset) {
            return spaceCostMultiplier("sam", offset, 16e4, 1.28);
          }
        },
        effect() {
          let desc = `<div>${loc("galaxy_defense_platform_effect", [25])}</div>`;
          return desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(5);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("sam");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["sam", "space"]
          };
        },
        post() {
          vBind({ el: `#spc_titansynd` }, "update");
        }
      },
      decoder: {
        id: "space-decoder",
        title: loc("space_decoder_title"),
        desc() {
          return `<div>${loc("space_decoder_title")}</div><div class="has-text-special">${loc("requires_power_support_combo", [planetName().titan, global.resource.Cipher.name])}</div>`;
        },
        reqs: { titan: 8 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("decoder", offset, 125e5, 1.275);
          },
          Elerium(offset) {
            return spaceCostMultiplier("decoder", offset, 750, 1.275);
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("decoder", offset, 33e4, 1.275);
          },
          Quantium(offset) {
            return spaceCostMultiplier("decoder", offset, 18e4, 1.275);
          }
        },
        effect(wiki) {
          let cipher = $(this)[0].support_fuel().a;
          let know = 2500;
          if (global.race["high_pop"]) {
            know = highPopAdjust(know);
          }
          if (wiki ? global.space?.ai_core2?.on ?? 0 : p_on["ai_core2"]) {
            know *= 1.25;
          }
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().titan])}</div>`;
          desc += `<div>${loc("space_red_exotic_lab_effect1", [know])}</div>`;
          return desc + `<div class="has-text-caution">${loc("spend", [cipher, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
        },
        s_type: "titan",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        support_fuel() {
          return { r: "Cipher", a: 0.06 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("decoder");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["decoder", "space"]
          };
        }
      },
      ai_core: {
        id: "space-ai_core",
        title: loc("space_ai_core"),
        desc(wiki) {
          if (!global.space.hasOwnProperty("ai_core") || global.space.ai_core.count < 100 || wiki) {
            return `<div>${loc("space_ai_core")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>` + (global.space.hasOwnProperty("ai_core") && global.space.ai_core.count >= 100 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          } else {
            return `<div>${loc("space_ai_core")}</div>`;
          }
        },
        reqs: { titan: 9 },
        path: ["truepath"],
        condition() {
          return global.space.ai_core.count >= 100 ? false : true;
        },
        queue_size: 10,
        queue_complete() {
          return 100 - global.space.ai_core.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 25e5 : 0;
          },
          Cement(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 18e4 : 0;
          },
          Aluminium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 25e4 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 250 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 125e3 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 5e4 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 1e5 : 0;
          },
          Cipher(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0) < 100 ? 750 : 0;
          }
        },
        effect(wiki) {
          let effectText = `<div>${loc("space_ai_core_effect")}</div>`;
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("ai_core") ? global.space.ai_core.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            effectText += `<div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return outerTruth.spc_titan.ai_core2.effect(wiki);
          }
          return effectText;
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.space.ai_core.count < 100) {
              incrementStruct("ai_core");
              if (global.space.ai_core.count >= 100) {
                global.tech["titan_ai_core"] = 1;
                initStruct(outerTruth.spc_titan.ai_core2);
                incrementStruct("ai_core2", "space");
                powerOnNewStruct(outerTruth.spc_titan.ai_core2);
                renderSpace();
                drawTech();
                if (global.city.ptrait.includes("kamikaze") && !global.race["tidal_decay"]) {
                  messageQueue(loc("planet_kamikaze_stabilize", [races[global.race.species].home, 100]), "info", false, ["progress"]);
                }
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ai_core", "space"]
          };
        }
      },
      ai_core2: {
        id: "space-ai_core2",
        title: loc("space_ai_core"),
        desc() {
          return `<div>${loc("space_ai_core")}</div><div class="has-text-special">${loc("space_electrolysis_req", [global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        reqs: { titan_ai_core: 1 },
        path: ["truepath"],
        condition() {
          return global.space.hasOwnProperty("ai_core") && global.space.ai_core.count >= 100 ? true : false;
        },
        wiki: false,
        queue_complete() {
          return 0;
        },
        cost: {},
        powered() {
          return powerCostMod(100);
        },
        p_fuel() {
          return { r: "Water", a: 1e3 };
        },
        effect(wiki) {
          let value = 25;
          let desc = `<div class="has-text-warning">${loc("interstellar_citadel_stat", [+get_qlevel(wiki).toFixed(1)])}</div>`;
          desc += `<div>${loc("interstellar_citadel_effect", [value])}</div><div>${loc("space_ai_core_effect2", [value])}</div>`;
          if (global.tech["titan_ai_core"] && global.tech.titan_ai_core >= 2) {
            desc += `<div>${loc("space_ai_core_effect3", [50])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("space_electrolysis_use", [$(this)[0].p_fuel().a, global.resource[$(this)[0].p_fuel().r].name, $(this)[0].powered()])}</div>`;
          if (global.tech["titan_ai_core"] && global.tech.titan_ai_core >= 3) {
            let drift = +calcAIDrift(wiki).toFixed(1);
            desc += `<div class="has-text-advanced">${loc("space_ai_core_effect4", [drift])}</div>`;
          }
          return desc;
        },
        action() {
          return false;
        },
        flair() {
          return global.space.hasOwnProperty("ai_core2") && global.space.ai_core2.on >= 1 ? loc(`space_ai_core_flair`) : loc(`space_ai_core_flair2`);
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ai_core2", "space"]
          };
        }
      },
      ai_colonist: {
        id: "space-ai_colonist",
        title: loc("space_ai_colonist_title"),
        desc() {
          return `<div>${loc("space_ai_colonist_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { titan_ai_core: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 112e6, 1.35);
          },
          Alloy(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 75e4, 1.35);
          },
          Elerium(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 500, 1.35);
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 525e3, 1.35);
          },
          Quantium(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 15e4, 1.35);
          },
          Cipher(offset) {
            return spaceCostMultiplier("ai_colonist", offset, 1e4, 1.35);
          }
        },
        effect() {
          return `<div>${loc("plus_max_resource", [jobScale(1), global.race["truepath"] ? loc("job_colonist_tp", [planetName().titan]) : loc("colonist")])}</div><div>${loc("space_ai_colonist_effect", [jobScale(1), planetName().titan])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(10);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("ai_colonist");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ai_colonist", "space"]
          };
        },
        flair: loc(`tech_combat_droids_flair`)
      },
      wonder_gardens: {
        id: "space-wonder_gardens",
        title() {
          return loc("space_wonder_gardens", [planetName().titan]);
        },
        desc() {
          return loc("space_wonder_gardens", [planetName().titan]);
        },
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.portal["wonder_gardens"] ? true : false;
        },
        trait: ["wish"],
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action() {
          return false;
        }
      }
    },
    spc_enceladus: {
      info: {
        name() {
          return planetName().enceladus;
        },
        desc() {
          return loc("space_enceladus_info_desc", [planetName().enceladus, races[global.race.species].home]);
        },
        support: "titan_spaceport",
        zone: "outer",
        syndicate() {
          return global.tech["titan"] && global.tech.titan >= 3 && global.tech["enceladus"] && global.tech.enceladus >= 2 ? true : false;
        },
        syndicate_cap() {
          if (global.tech["triton"]) {
            return global.tech.outer >= 4 ? 1500 : 1e3;
          }
          return 600;
        }
      },
      enceladus_mission: {
        id: "space-enceladus_mission",
        title() {
          return loc("space_mission_title", [planetName().enceladus]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().enceladus]);
        },
        reqs: { outer: 1 },
        grant: ["enceladus", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.enceladus >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(25e4, false, wiki).toFixed(0);
          },
          Elerium() {
            return 100;
          }
        },
        effect() {
          return loc("space_titan_mission_effect", [planetName().enceladus]);
        },
        action() {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_enceladus_mission_action", [planetName().enceladus]), "info", false, ["progress"]);
            global.resource.Water.display = true;
            return true;
          }
          return false;
        }
      },
      water_freighter: {
        id: "space-water_freighter",
        title: loc("space_water_freighter_title"),
        desc() {
          return `<div>${loc("space_water_freighter_title")}</div><div class="has-text-special">${loc("space_support", [planetName().enceladus])}</div>`;
        },
        reqs: { enceladus: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("water_freighter", offset, 45e4, 1.25);
          },
          Iron(offset) {
            return spaceCostMultiplier("water_freighter", offset, 362e3, 1.25);
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("water_freighter", offset, 125e3, 1.25);
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("water_freighter", offset, 75e3, 1.25);
          }
        },
        effect(wiki) {
          let helium = +fuel_adjust(5, true, wiki).toFixed(2);
          let water = +production("water_freighter").toFixed(2);
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().enceladus])}</div><div>${loc("produce", [water, global.resource.Water.name])}</div><div class="has-text-caution">${loc(`space_belt_station_effect3`, [helium])}</div>`;
        },
        s_type: "enceladus",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("water_freighter");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["water_freighter", "space"]
          };
        }
      },
      zero_g_lab: {
        id: "space-zero_g_lab",
        title: loc("tech_zero_g_lab"),
        desc() {
          return `<div>${loc("tech_zero_g_lab")}</div><div class="has-text-special">${loc("requires_power_support", [planetName().enceladus])}</div>`;
        },
        reqs: { enceladus: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("zero_g_lab", offset, 5e6, 1.25);
          },
          Alloy(offset) {
            return spaceCostMultiplier("zero_g_lab", offset, 125e3, 1.25);
          },
          Graphene(offset) {
            return spaceCostMultiplier("zero_g_lab", offset, 225e3, 1.25);
          },
          Stanene(offset) {
            return spaceCostMultiplier("zero_g_lab", offset, 6e5, 1.25);
          }
        },
        effect() {
          let synd = syndicate("spc_enceladus");
          let know = Math.round(1e4 * synd);
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().enceladus])}</div><div>${loc("city_max_knowledge", [know])}</div>`;
          if (global.resource.Quantium.display) {
            desc = desc + `<div>${loc("space_zero_g_lab_effect", [jobScale(1)])}</div>`;
          }
          if (global.resource.Cipher.display) {
            desc = desc + `<div>${loc("plus_max_resource", [1e4, global.resource.Cipher.name])}</div>`;
          }
          return desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        s_type: "enceladus",
        support() {
          return -1;
        },
        powered() {
          return powerCostMod(12);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("zero_g_lab");
            powerOnNewStruct($(this)[0]);
            if (global.space.zero_g_lab.count === 1 && global.tech["quantium"]) {
              loadFoundry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["zero_g_lab", "space"]
          };
        },
        postPower(on) {
          limitCraftsmen("Quantium");
        }
      },
      operating_base: {
        id: "space-operating_base",
        title: loc("tech_operating_base"),
        desc() {
          return `<div>${loc("tech_operating_base")}</div><div class="has-text-special">${loc("requires_power_support", [planetName().enceladus])}</div>`;
        },
        reqs: { enceladus: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("operating_base", offset, 75e5, 1.3);
          },
          Furs(offset) {
            return spaceCostMultiplier("operating_base", offset, 5e5, 1.3);
          },
          Adamantite(offset) {
            return spaceCostMultiplier("operating_base", offset, 375e3, 1.3);
          },
          Stanene(offset) {
            return spaceCostMultiplier("operating_base", offset, 75e4, 1.3);
          },
          Mythril(offset) {
            return spaceCostMultiplier("operating_base", offset, 225e3, 1.3);
          },
          Horseshoe() {
            return global.race["hooved"] ? 4 : 0;
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().enceladus])}</div>`;
          desc += `<div>${loc("galaxy_defense_platform_effect", [50])}</div>`;
          desc += loc("plus_max_resource", [$(this)[0].soldiers(), loc("civics_garrison_soldiers")]);
          if (global.race["orbit_decayed"]) {
            let healing = global.tech["medic"] * 5;
            desc += `<div>${loc("city_hospital_effect", [healing])}</div>`;
          }
          return desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        s_type: "enceladus",
        support() {
          return -1;
        },
        powered() {
          return powerCostMod(10);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("operating_base");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["operating_base", "space"]
          };
        },
        soldiers() {
          let soldiers = global.race["grenadier"] ? 3 : 4;
          return jobScale(soldiers);
        },
        post() {
          vBind({ el: `#spc_enceladussynd` }, "update");
        }
      },
      munitions_depot: {
        id: "space-munitions_depot",
        title: loc("tech_munitions_depot"),
        desc: loc("tech_munitions_depot"),
        category: "storage",
        era: "solar",
        reqs: { enceladus: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("munitions_depot", offset, 5e6, 1.22);
          },
          Iron(offset) {
            return spaceCostMultiplier("munitions_depot", offset, 185e3, 1.22);
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("munitions_depot", offset, 1e5, 1.22);
          }
        },
        effect() {
          let containers = 25;
          return `<div>${loc("plus_max_crates", [containers])}</div><div>${loc("plus_max_containers", [containers])}</div>`;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("munitions_depot");
            global.resource.Crates.max += 25;
            global.resource.Containers.max += 25;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["munitions_depot", "space"]
          };
        }
      }
    },
    spc_triton: {
      info: {
        name() {
          return planetName().triton;
        },
        desc() {
          return loc("space_triton_info_desc", [planetName().triton, races[global.race.species].home]);
        },
        zone: "outer",
        syndicate() {
          return global.tech["triton"] && global.tech.triton >= 2 ? true : false;
        },
        syndicate_cap() {
          return global.tech["outer"] && global.tech.outer >= 4 ? 5e3 : 3e3;
        },
        extra(region) {
          if (global.tech["triton"] && global.tech.triton >= 3) {
            $(`#${region}`).append(`<div id="${region}resist" v-show="${region}" class="syndThreat has-text-caution">${loc("space_ground_resist")} <span class="has-text-danger" v-html="threat(enemy,troops)"></span></div>`);
            vBind({
              el: `#${region}resist`,
              data: global.space.fob,
              methods: {
                threat(e, t) {
                  let wounded = global.civic.garrison.wounded - garrisonSize();
                  if (wounded < 0) {
                    wounded = 0;
                  }
                  let d = +(e - armyRating(t, "army", wounded)).toFixed(0);
                  return d < 0 ? 0 : d;
                }
              }
            });
          }
        }
      },
      triton_mission: {
        id: "space-triton_mission",
        title() {
          return loc("space_mission_title", [planetName().triton]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().triton]);
        },
        reqs: { outer: 2 },
        grant: ["triton", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.triton >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(6e5, false, wiki).toFixed(0);
          },
          Elerium() {
            return 2500;
          }
        },
        effect() {
          return loc("space_triton_mission_effect", [planetName().triton]);
        },
        action() {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_triton_mission_action", [planetName().triton]), "info", false, ["progress"]);
            global.space.syndicate["spc_triton"] = 1250;
            global.space.syndicate["spc_titan"] += 250;
            global.space.syndicate["spc_enceladus"] += 250;
            return true;
          }
          return false;
        }
      },
      fob: {
        id: "space-fob",
        title: loc("space_fob_title"),
        desc() {
          return `<div>${loc("tech_fob")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { triton: 2 },
        path: ["truepath"],
        queue_complete() {
          return 1 - global.space.fob.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 25e7, 1.1);
          },
          Copper(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 8e6, 1.1);
          },
          Uranium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 5e4, 1.1);
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 25e5, 1.1);
          },
          Graphene(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 3e6, 1.1);
          },
          Sheet_Metal(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 75e5, 1.1);
          },
          Quantium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) >= 1 ? 0 : spaceCostMultiplier("fob", offset, 5e5, 1.1);
          },
          Horseshoe(offset) {
            return global.race["hooved"] && (offset || 0) + (global.space.hasOwnProperty("fob") ? global.space.fob.count : 0) < 1 ? 10 : 0;
          }
        },
        effect(wiki) {
          let troops = garrisonSize();
          let max_troops = garrisonSize(true);
          let desc = `<div>${loc("galaxy_defense_platform_effect", [500])}</div>`;
          desc += loc("plus_max_resource", [$(this)[0].soldiers(), loc("civics_garrison_soldiers")]);
          desc += `<div class="has-text-warning"><span class="soldier">${loc("civics_garrison_soldiers")}:</span> <span>${troops}</span> / <span>${max_troops}<span></div>`;
          desc += `<div class="has-text-warning"><span class="wounded">${loc("civics_garrison_wounded")}:</span> <span>${global.civic["garrison"] ? global.civic.garrison.wounded : 0}</span></div>`;
          desc += `<div class="has-text-warning">${loc("space_fob_landed", [global.space["fob"] ? global.space.fob.troops : 0])}</div>`;
          let helium = +fuel_adjust(125, true, wiki).toFixed(2);
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), helium, global.resource.Helium_3.name])}</div>`;
        },
        powered() {
          return powerCostMod(50);
        },
        action() {
          if (global.space.fob.count < 1 && payCosts($(this)[0])) {
            incrementStruct("fob");
            powerOnNewStruct($(this)[0]);
            if (global.tech["triton"] === 2) {
              global.tech["triton"] = 3;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, troops: 0, enemy: 0 },
            p: ["fob", "space"]
          };
        },
        soldiers() {
          let soldiers = global.race["grenadier"] ? 6 : 10;
          return jobScale(soldiers);
        },
        post() {
          drawTech();
          renderSpace();
          messageQueue(loc("space_fob_msg"), "info", false, ["progress"]);
        }
      },
      lander: {
        id: "space-lander",
        title: loc("space_lander_title"),
        desc() {
          return `<div>${loc("space_lander_title")}</div><div class="has-text-special">${loc("requires_soldiers")}</div><div class="has-text-special">${loc("space_red_space_barracks_desc_req")}</div>`;
        },
        reqs: { triton: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("lander", offset, 24e5, 1.15);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("lander", offset, 185e3, 1.15);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("lander", offset, 1e4, 1.15);
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("lander", offset, 158e3, 1.15);
          }
        },
        powered() {
          return 0;
        },
        effect(wiki) {
          let oil = +fuel_adjust(50, true, wiki).toFixed(2);
          let data = ``;
          if (global.space["crashed_ship"] && global.space.crashed_ship.count === 100) {
            data = `<div>${loc(`space_lander_effect3`, [production("lander"), global.resource.Cipher.name])}</div>`;
          }
          return `<div>${loc("space_lander_effect", [planetName().triton])}</div>${data}<div class="has-text-warning">${loc(`space_lander_effect2`, [jobScale(3)])}</div><div class="has-text-caution">${loc("space_red_space_barracks_effect2", [oil])}</div>`;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("lander");
            global.space.lander.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["lander", "space"]
          };
        }
      },
      crashed_ship: {
        id: "space-crashed_ship",
        title: loc("space_crashed_ship_title"),
        desc() {
          return `<div>${loc("space_crashed_ship_title")}</div>`;
        },
        reqs: { triton: 3 },
        path: ["truepath"],
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          let control = global.space["crashed_ship"] ? global.space.crashed_ship.count : 0;
          return `<div>${loc(`space_crashed_ship_effect`, [control])}</div>`;
        },
        action() {
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["crashed_ship", "space"]
          };
        }
      }
    },
    spc_kuiper: {
      info: {
        name() {
          return loc(`space_kuiper_title`);
        },
        desc() {
          return loc("space_kuiper_desc");
        },
        zone: "outer",
        syndicate() {
          return global.tech["kuiper"] ? true : false;
        },
        syndicate_cap() {
          return 2500;
        }
      },
      kuiper_mission: {
        id: "space-kuiper_mission",
        title() {
          return loc("space_mission_title", [loc(`space_kuiper_title`)]);
        },
        desc() {
          return loc("space_mission_desc", [loc(`space_kuiper_title`)]);
        },
        reqs: { outer: 7 },
        grant: ["kuiper", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.kuiper >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(1e6, false, wiki).toFixed(0);
          },
          Elerium() {
            return 1e3;
          }
        },
        effect() {
          return loc("space_kuiper_mission_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            initStruct(outerTruth.spc_kuiper.orichalcum_mine);
            initStruct(outerTruth.spc_kuiper.uranium_mine);
            initStruct(outerTruth.spc_kuiper.neutronium_mine);
            global.space.syndicate["spc_kuiper"] = 500;
            messageQueue(loc("space_kuiper_mission_action"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      orichalcum_mine: {
        id: "space-orichalcum_mine",
        title() {
          return loc("space_kuiper_mine", [global.resource.Orichalcum.name]);
        },
        desc() {
          return `<div>${loc("space_kuiper_mine", [global.resource.Orichalcum.name])}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { kuiper: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("orichalcum_mine", offset, 25e6, 1.25);
          },
          Graphene(offset) {
            return spaceCostMultiplier("orichalcum_mine", offset, 9e5, 1.25);
          },
          Elerium(offset) {
            return spaceCostMultiplier("orichalcum_mine", offset, 200, 1.25);
          },
          Mythril(offset) {
            return spaceCostMultiplier("orichalcum_mine", offset, 45e4, 1.25);
          },
          Quantium(offset) {
            return spaceCostMultiplier("orichalcum_mine", offset, 15e4, 1.25);
          }
        },
        effect(wiki) {
          let mineral = +production("orichalcum_mine").toFixed(3);
          let fuel = +fuel_adjust($(this)[0].p_fuel().a, true, wiki).toFixed(1);
          let desc = `<div>${loc("gain", [mineral, global.resource.Orichalcum.name])}</div>`;
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        powered() {
          return powerCostMod(10);
        },
        p_fuel() {
          return { r: "Oil", a: 200 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("orichalcum_mine");
            global.resource.Orichalcum.display = true;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["orichalcum_mine", "space"]
          };
        }
      },
      uranium_mine: {
        id: "space-uranium_mine",
        title() {
          return loc("space_kuiper_mine", [global.resource.Uranium.name]);
        },
        desc() {
          return `<div>${loc("space_kuiper_mine", [global.resource.Uranium.name])}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { kuiper: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("uranium_mine", offset, 5e6, 1.25);
          },
          Iridium(offset) {
            return spaceCostMultiplier("uranium_mine", offset, 25e4, 1.25);
          },
          Steel(offset) {
            return spaceCostMultiplier("uranium_mine", offset, 62e4, 1.25);
          }
        },
        effect(wiki) {
          let mineral = +production("uranium_mine").toFixed(3);
          let fuel = +fuel_adjust($(this)[0].p_fuel().a, true, wiki).toFixed(1);
          let desc = `<div>${loc("gain", [mineral, global.resource.Uranium.name])}</div>`;
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        powered() {
          return powerCostMod(5);
        },
        p_fuel() {
          return { r: "Oil", a: 60 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("uranium_mine");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["uranium_mine", "space"]
          };
        }
      },
      neutronium_mine: {
        id: "space-neutronium_mine",
        title() {
          return loc("space_kuiper_mine", [global.resource.Neutronium.name]);
        },
        desc() {
          return `<div>${loc("space_kuiper_mine", [global.resource.Neutronium.name])}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { kuiper: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("neutronium_mine", offset, 8e6, 1.25);
          },
          Adamantite(offset) {
            return spaceCostMultiplier("neutronium_mine", offset, 65e4, 1.25);
          },
          Stanene(offset) {
            return spaceCostMultiplier("neutronium_mine", offset, 125e4, 1.25);
          }
        },
        effect(wiki) {
          let mineral = +production("neutronium_mine").toFixed(3);
          let fuel = +fuel_adjust($(this)[0].p_fuel().a, true, wiki).toFixed(1);
          let desc = `<div>${loc("gain", [mineral, global.resource.Neutronium.name])}</div>`;
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        powered() {
          return powerCostMod(8);
        },
        p_fuel() {
          return { r: "Oil", a: 60 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("neutronium_mine");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["neutronium_mine", "space"]
          };
        }
      },
      elerium_mine: {
        id: "space-elerium_mine",
        title() {
          return loc("space_kuiper_mine", [global.resource.Elerium.name]);
        },
        desc() {
          return `<div>${loc("space_kuiper_mine", [global.resource.Elerium.name])}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { kuiper: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elerium_mine", offset, 2e7, 1.25);
          },
          Titanium(offset) {
            return spaceCostMultiplier("elerium_mine", offset, 25e4, 1.25);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("elerium_mine", offset, 12e4, 1.25);
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("elerium_mine", offset, 175e3, 1.25);
          }
        },
        effect(wiki) {
          let mineral = +production("elerium_mine").toFixed(3);
          let fuel = +fuel_adjust($(this)[0].p_fuel().a, true, wiki).toFixed(1);
          let desc = `<div>${loc("gain", [mineral, global.resource.Elerium.name])}</div>`;
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        powered() {
          return powerCostMod(12);
        },
        p_fuel() {
          return { r: "Oil", a: 125 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("elerium_mine");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elerium_mine", "space"]
          };
        }
      }
    },
    spc_eris: {
      info: {
        name() {
          return planetName().eris;
        },
        desc() {
          return loc("space_eris_info_desc", [planetName().eris]);
        },
        support: "drone_control",
        zone: "outer",
        syndicate() {
          return global.tech["eris"] ? true : false;
        },
        syndicate_cap() {
          return 7500;
        },
        extra(region) {
          if (global.tech["eris"] && global.tech["eris"] === 1) {
            $(`#${region}`).append(`<div id="${region}scanned" v-show="${region}" class="syndThreat has-text-caution">${loc("space_scanned")} <span class="has-text-info">{{ eris_scan }}%</span></div>`);
            vBind({
              el: `#${region}scanned`,
              data: global.tech
            });
          }
        }
      },
      eris_mission: {
        id: "space-eris_mission",
        title() {
          return loc("space_mission_title", [planetName().eris]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().eris]);
        },
        reqs: { outer: 7 },
        grant: ["eris", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.eris >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(125e4, false, wiki).toFixed(0);
          },
          Elerium() {
            return 1250;
          }
        },
        effect() {
          return loc("space_eris_mission_effect", [planetName().eris]);
        },
        action() {
          if (payCosts($(this)[0])) {
            global.space.syndicate["spc_eris"] = 4e3;
            messageQueue(loc("space_eris_mission_action", [planetName().eris]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      drone_control: {
        id: "space-drone_control",
        title() {
          return loc("space_drone_control", [planetName().titan]);
        },
        desc() {
          return `<div>${loc("space_drone_control", [planetName().titan])}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        reqs: { eris: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("drone_control", offset, 75e6, 1.3);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("drone_control", offset, 1e5, 1.3);
          },
          Stanene(offset) {
            return spaceCostMultiplier("drone_control", offset, 45e4, 1.3);
          },
          Quantium(offset) {
            return spaceCostMultiplier("drone_control", offset, 3e5, 1.3);
          }
        },
        effect() {
          let fuel = $(this)[0].p_fuel().a;
          let desc = `<div>+${loc(`galaxy_alien2_support`, [$(this)[0].support(), planetName().eris])}</div>`;
          return desc + `<div class="has-text-caution">${loc("requires_power_combo_effect", [$(this)[0].powered(), fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        support() {
          return 5;
        },
        powered() {
          return powerCostMod(25);
        },
        p_fuel() {
          return { r: "Uranium", a: 5 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("drone_control");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["drone_control", "space"]
          };
        }
      },
      shock_trooper: {
        id: "space-shock_trooper",
        title: loc("space_shock_trooper_title"),
        desc() {
          return `<div>${loc("space_shock_trooper_title")}</div><div class="has-text-special">${loc("space_support", [planetName().eris])}</div>`;
        },
        reqs: { eris: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("shock_trooper", offset, 425e4, 1.225);
          },
          Polymer(offset) {
            return spaceCostMultiplier("shock_trooper", offset, 375e3, 1.225);
          },
          Adamantite(offset) {
            return spaceCostMultiplier("shock_trooper", offset, 5e5, 1.225);
          },
          Graphene(offset) {
            return spaceCostMultiplier("shock_trooper", offset, 22e4, 1.225);
          },
          Elerium(offset) {
            return spaceCostMultiplier("shock_trooper", offset, 350, 1.225);
          }
        },
        effect() {
          let rating = Math.round(armyRating(1, "army", 0) * syndicate("spc_eris"));
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().eris])}</div>`;
          if (global.space["digsite"] && global.space.digsite.count === 100) {
            desc = `<div>${loc(`space_lander_effect3`, [production("shock_trooper"), global.resource.Cipher.name])}</div>`;
          }
          return desc + `<div>${loc(`space_digsite_offense`, [rating])}</div>`;
        },
        s_type: "eris",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("shock_trooper");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["shock_trooper", "space"]
          };
        }
      },
      tank: {
        id: "space-tank",
        title: loc("space_tank_title"),
        desc() {
          return `<div>${loc("space_tank_title")}</div><div class="has-text-special">${loc("space_support", [planetName().eris])}</div>`;
        },
        reqs: { eris: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tank", offset, 1e8, 1.25);
          },
          Alloy(offset) {
            return spaceCostMultiplier("tank", offset, 125e4, 1.25);
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("tank", offset, 6e5, 1.25);
          },
          Mythril(offset) {
            return spaceCostMultiplier("tank", offset, 5e5, 1.25);
          },
          Uranium(offset) {
            return spaceCostMultiplier("tank", offset, 25e3, 1.25);
          }
        },
        effect() {
          let rating = Math.round(100 * syndicate("spc_eris"));
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().eris])}</div>`;
          if (global.space["digsite"] && global.space.digsite.count === 100) {
            desc = `<div>${loc(`space_lander_effect3`, [production("tank"), global.resource.Cipher.name])}</div>`;
          }
          return desc + `<div>${loc(`space_digsite_offense`, [rating])}</div>`;
        },
        s_type: "eris",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("tank");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tank", "space"]
          };
        }
      },
      digsite: {
        id: "space-digsite",
        title: loc("space_digsite_title"),
        desc() {
          return `<div>${loc("space_digsite_title")}</div>`;
        },
        reqs: { eris: 3 },
        path: ["truepath"],
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          let control = global.space["digsite"] ? global.space.digsite.count : 0;
          return `<div>${loc(`space_crashed_ship_effect`, [control])}</div>`;
        },
        action() {
          return false;
        },
        struct() {
          return {
            d: { count: 0, enemy: 1e4 },
            p: ["digsite", "space"]
          };
        }
      }
    }
  };
  var tauCetiModules = {
    tau_star: {
      info: {
        name() {
          return loc("tab_tauceti");
        },
        desc() {
          return loc("tau_star", [loc("tab_tauceti"), loc("space_sun_info_name")]);
        }
      },
      ringworld: {
        id: "tauceti-ringworld",
        title: loc("tau_star_ringworld"),
        desc(wiki) {
          if (!global.tauceti.hasOwnProperty("ringworld") || global.tauceti.ringworld.count < 1e3 || wiki) {
            return `<div>${loc("tau_star_ringworld")}</div><div class="has-text-special">${loc("requires_segments", [1e3])}</div>`;
          } else {
            return `<div>${loc("tau_star_ringworld")}</div>`;
          }
        },
        reqs: { matrix: 2 },
        path: ["truepath"],
        queue_size: 50,
        queue_complete() {
          return 1e3 - global.tauceti.ringworld.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 1e7 : 1e8 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 2e4 : 1e5 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 7e4 : 35e4 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 2e5 : 1e6 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 17600 : 88e3 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 25e3 : 125e3 : 0;
          },
          Unobtainium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? global.race["lone_survivor"] ? 360 : 1800 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0) < 1e3 ? wom_recycle(global.race["lone_survivor"] ? 10100 : 101e3) : 0;
          }
        },
        effect(wiki) {
          let effectText = "";
          let count = (wiki?.count ?? 0) + (global.tauceti.hasOwnProperty("ringworld") ? global.tauceti.ringworld.count : 0);
          if (count < 1e3) {
            let remain = 1e3 - count;
            effectText += `<div>${loc("tau_star_ringworld_effect")}</div>`;
            effectText += `<div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            effectText += `<div class="has-text-special">${loc("space_dwarf_reactor_effect1", [global.race["lone_survivor"] ? 100 : 1e4])}</div>`;
          }
          return effectText;
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.tauceti.ringworld.count < 1e3) {
              incrementStruct("ringworld", "tauceti");
              if (global.tauceti.ringworld.count >= 1e3) {
                if (global.race["lone_survivor"]) {
                  global.tech["eden"] = 1;
                } else {
                  global.tech.matrix = 3;
                  global.tauceti["matrix"] = { count: 1, on: 0 };
                }
                drawTech();
                renderTauCeti();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["ringworld", "tauceti"]
          };
        }
      },
      matrix: {
        id: "tauceti-matrix",
        title: loc("tau_star_matrix"),
        desc() {
          return `<div>${loc("tau_star_matrix")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { matrix: 3 },
        condition() {
          return global.tauceti.ringworld.count >= 1e3 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        powered() {
          return 1e4;
        },
        postPower(o) {
          if (o && p_on["matrix"]) {
            global.tech.matrix = 4;
            renderTauCeti();
          } else {
            if (global.tech.matrix > 3) {
              global.tech.matrix = 3;
              renderTauCeti();
            }
            if (o) {
              return true;
            }
          }
        },
        effect() {
          let reward = matrixProjection();
          let power = $(this)[0].powered();
          let power_label = power > 0 ? `<div class="has-text-caution">${loc("minus_power", [power])}</div>` : "";
          return `<div>${loc("tau_star_matrix_effect")}</div>${reward}${power_label}`;
        },
        action() {
          return false;
        }
      },
      blue_pill: {
        id: "tauceti-blue_pill",
        title: loc("tau_star_blue_pill"),
        desc: loc("tau_star_blue_pill"),
        wiki: false,
        reqs: { matrix: 4 },
        queue_complete() {
          return 0;
        },
        no_multi: true,
        cost: {},
        effect() {
          let reward = matrixProjection();
          return `<div>${loc("tau_star_blue_pill_effect")}</div>${reward}`;
        },
        action() {
          if (payCosts($(this)[0])) {
            let pill = function() {
              ctx.fillStyle = "#0001";
              ctx.fillRect(0, 0, w, h);
              ctx.fillStyle = "#0f0";
              ctx.font = "15pt monospace";
              ypos.forEach((y, ind) => {
                const text = String.fromCharCode(Math.rand(65382, 65438));
                const x = ind * 20;
                ctx.fillText(text, x, y);
                if (y > 100 + Math.random() * 1e4) ypos[ind] = 0;
                else ypos[ind] = y + 20;
              });
            };
            $(`body`).append(`<canvas id="matrix" class="font-overlay"/>`);
            const canvas = document.getElementById("matrix");
            const ctx = canvas.getContext("2d");
            const w = canvas.width = document.body.offsetWidth;
            const h = canvas.height = document.body.offsetHeight;
            const cols = Math.floor(w / 20) + 1;
            const ypos = Array(cols).fill(0);
            setInterval(pill, 50);
            setTimeout(function() {
              matrix();
            }, 5e3);
            return true;
          }
          return false;
        }
      },
      goe_facility: {
        id: "tauceti-goe_facility",
        title: loc("tau_star_goe_facility"),
        desc() {
          return `<div>${loc("tau_star_goe_facility")}</div>`;
        },
        reqs: { eden: 2 },
        condition() {
          return global.tauceti.ringworld.count >= 1e3 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        cost: {
          Money(o) {
            return 1e6;
          },
          Copper(o) {
            return 1e7;
          },
          Graphene(o) {
            return 5e6;
          },
          Stanene(o) {
            return 8e6;
          },
          Elerium(o) {
            return 1e4;
          }
        },
        effect() {
          let reward = edenProjection();
          return `<div>${loc("tau_star_goe_facility_effect")}</div>${reward}`;
        },
        action() {
          if (payCosts($(this)[0])) {
            let costs = adjustCosts(tauCetiModules.tau_star.goe_facility);
            Object.keys(costs).forEach(function(res) {
              global.resource[res].amount += costs[res]();
            });
            gardenOfEden();
            return false;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["goe_facility", "tauceti"]
          };
        }
      }
    },
    tau_home: {
      info: {
        name() {
          return loc("tau_planet", [races[global.race.species].home]);
        },
        desc() {
          return loc("tau_home", [races[global.race.species].home]);
        },
        support: "orbital_station",
        extra(region) {
          if (global.tech["tau_home"] && global.tech.tau_home >= 2 && !tauEnabled()) {
            $(`#${region}`).append(`<div id="${region}Mats" v-show="tauShow()" class="syndThreat has-text-warning">${loc("resource_Materials_name")} <span class="has-text-info">{{ amount | round | locale }}</span> / <span class="has-text-info">{{ max | locale }}</span></div>`);
            vBind({
              el: `#${region}Mats`,
              data: global.resource.Materials,
              methods: {
                tauShow() {
                  return !tauEnabled();
                }
              },
              filters: {
                round(v) {
                  return +v.toFixed(0);
                },
                locale(v) {
                  return v.toLocaleString();
                }
              }
            });
          }
        }
      },
      home_mission: {
        id: "tauceti-home_mission",
        title() {
          return loc("tau_new_mission_title", [races[global.race.species].home]);
        },
        desc() {
          return loc("tau_new_mission_title", [races[global.race.species].home]);
        },
        reqs: { tauceti: 2 },
        grant: ["tau_home", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_home >= 1 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e9;
          }
        },
        effect() {
          return loc("tau_new_mission_effect", [races[global.race.species].home]);
        },
        action() {
          if (payCosts($(this)[0])) {
            initStruct(tauCetiModules.tau_home.colony);
            initStruct(tauCetiModules.tau_home.mining_pit);
            messageQueue(loc("tau_home_mission_result", [races[global.race.species].home]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      dismantle: {
        id: "tauceti-dismantle",
        title() {
          return loc("tau_home_dismantle");
        },
        desc() {
          return loc("tau_home_dismantle");
        },
        reqs: { tau_home: 1 },
        grant: ["tau_home", 2],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_home >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e8;
          }
        },
        effect() {
          let explorer = "Explorer";
          if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
            let shipId = global.space.shipyard.ships.findIndex((x) => x.location === "tauceti" && x.class === "explorer");
            if (shipId !== -1) {
              explorer = global.space.shipyard.ships[shipId].name;
            }
          }
          return loc("tau_home_dismantle_effect", [explorer]);
        },
        action() {
          let shipId = -1;
          if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
            shipId = global.space.shipyard.ships.findIndex((x) => x.location === "tauceti" && x.class === "explorer");
          }
          if (shipId >= 0 && payCosts($(this)[0])) {
            global.space.shipyard.ships.splice(shipId, 1);
            incrementStruct("orbital_station", "tauceti");
            incrementStruct("colony", "tauceti");
            incrementStruct("mining_pit", "tauceti");
            global.civic.pit_miner.display = true;
            global.resource.Materials.display = true;
            if (powerOnNewStruct($(tauCetiModules.tau_home.orbital_station)[0])) {
              global.tauceti.colony.on++;
              global.tauceti.mining_pit.on++;
              let hiredMax = $(tauCetiModules.tau_home.mining_pit)[0].workers();
              global.civic.pit_miner.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.pit_miner.workers += hired;
            }
            drawShips();
            return true;
          }
          return false;
        }
      },
      orbital_station: {
        id: "tauceti-orbital_station",
        title: loc("tau_home_orbital_station"),
        desc: `<div>${loc("tau_home_orbital_station")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { tau_home: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("orbital_station", offset, 8e7, 1.3, "tauceti");
          },
          Materials(offset) {
            return tauEnabled() ? 0 : spaceCostMultiplier("orbital_station", offset, 5e5, 1.3, "tauceti");
          },
          Helium_3(offset) {
            return tauEnabled() ? spaceCostMultiplier("orbital_station", offset, int_fuel_adjust(25e4), 1.3, "tauceti") : 0;
          },
          Copper(offset) {
            return tauEnabled() ? spaceCostMultiplier("orbital_station", offset, 125e4, 1.3, "tauceti") : 0;
          },
          Adamantite(offset) {
            return tauEnabled() ? spaceCostMultiplier("orbital_station", offset, 9e5, 1.3, "tauceti") : 0;
          }
        },
        effect() {
          let helium = spatialReasoning(15e3);
          let fuel = +int_fuel_adjust($(this)[0].support_fuel().a).toFixed(1);
          let desc = `<div>${loc("space_red_spaceport_effect1", [loc("tau_planet", [races[global.race.species].home]), $(this)[0].support()])}</div>`;
          desc += `<div>${loc("plus_max_resource", [helium.toLocaleString(), global.resource.Helium_3.name])}</div>`;
          if (global.race.universe === "evil" && (global.race["lone_survivor"] || global.tech["isolation"])) {
            desc += `<div>${loc("plus_max_resource", [1, global.resource.Authority.name])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("spend_power", [fuel, global.resource[$(this)[0].support_fuel().r].name, $(this)[0].powered()])}</div>`;
          return desc;
        },
        support_fuel() {
          return { r: "Helium_3", a: global.tech["isolation"] ? global.race["lone_survivor"] ? 5 : 25 : 400 };
        },
        support() {
          return 3;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? global.race["lone_survivor"] ? 4 : 6 : 30);
        },
        refresh: true,
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("orbital_station", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["orbital_station", "tauceti"]
          };
        }
      },
      colony: {
        id: "tauceti-colony",
        title: loc("tau_home_colony"),
        desc() {
          return `<div>${loc("tau_home_colony_desc", [races[global.race.species].home])}</div><div class="has-text-special">${loc("requires_power_support_combo", [races[global.race.species].home, global.resource.Food.name])}</div>`;
        },
        reqs: { tau_home: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("colony", offset, 1575e4, 1.225, "tauceti");
          },
          Materials(offset) {
            return tauEnabled() ? 0 : spaceCostMultiplier("colony", offset, 65e4, 1.225, "tauceti");
          },
          Furs(offset) {
            return tauEnabled() ? spaceCostMultiplier("colony", offset, 72e4, 1.225, "tauceti") : 0;
          },
          Graphene(offset) {
            return tauEnabled() ? spaceCostMultiplier("colony", offset, 485e3, 1.225, "tauceti") : 0;
          },
          Brick(offset) {
            return tauEnabled() ? spaceCostMultiplier("colony", offset, wom_recycle(88e4), 1.225, "tauceti") : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          let containers = global.tech["isolation"] ? 900 : 250;
          let fuel = +$(this)[0].support_fuel().a.toFixed(1);
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), races[global.race.species].home])}</div>`;
          if (!global.race["lone_survivor"]) {
            desc = desc + `<div>${loc("plus_max_citizens", [pop])}</div>`;
          }
          if (global.tech["isolation"]) {
            let vault = bank_vault() * 25;
            vault = spatialReasoning(vault);
            vault = (+vault.toFixed(0)).toLocaleString();
            desc += `<div>${loc("plus_max_resource", [`$${vault}`, global.resource.Money.name])}</div>`;
          }
          desc += `<div>${loc("tau_home_colony_effect", [50, races[global.race.species].home])}</div>`;
          if (global.tech["isolation"]) {
            let gasVal = govActive("gaslighter", 0);
            let mVal = ((gasVal || 0) + (global.tech.broadcast || 0)) * 2;
            desc += `<div>${loc("space_red_vr_center_effect1", [mVal])}</div>`;
          }
          desc += `<div>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</div><div>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</div>`;
          if (global.race.universe === "evil" && (global.race["lone_survivor"] || global.tech["isolation"])) {
            desc += `<div>${loc("plus_resource", [5, global.resource.Authority.name])}</div>`;
          }
          if (global.race["lone_survivor"]) {
            desc += `<div>${loc("gain", [-fuel, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
          } else {
            desc += `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
          }
          return desc;
        },
        s_type: "tau_home",
        support() {
          return -2;
        },
        support_fuel() {
          return { r: "Food", a: global.tech["isolation"] ? global.race["lone_survivor"] ? -2 : 75 : 1e3 };
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("colony", "tauceti");
            powerOnNewStruct($(this)[0]);
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["colony", "tauceti"]
          };
        },
        citizens() {
          let pop = global.tech["isolation"] ? 8 : 5;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return global.race["lone_survivor"] ? 0 : pop;
        }
      },
      tau_housing: {
        id: "tauceti-tau_housing",
        title() {
          return housingLabel("small");
        },
        desc() {
          return $(this)[0].citizens() === 1 ? loc("city_basic_housing_desc") : loc("city_basic_housing_desc_plural", [$(this)[0].citizens()]);
        },
        category: "residential",
        reqs: { housing: 1, isolation: 1 },
        condition() {
          return global.race["lone_survivor"] ? false : true;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tau_housing", offset, 15e4, 1.15, "tauceti");
          },
          Lumber(offset) {
            return global.race["kindling_kindred"] || global.race["smoldering"] ? 0 : spaceCostMultiplier("tau_housing", offset, 125e3, 1.25, "tauceti");
          },
          Stone(offset) {
            return global.race["kindling_kindred"] ? spaceCostMultiplier("tau_housing", offset, 125e3, 1.25, "tauceti") : 0;
          },
          Chrysotile(offset) {
            return global.race["smoldering"] ? spaceCostMultiplier("tau_housing", offset, 5e4, 1.25, "tauceti") : 0;
          },
          Horseshoe() {
            return global.race["hooved"] ? 1 : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          return global.race["sappy"] ? `<div>${loc("plus_max_resource", [pop, loc("citizen")])}</div><div>${loc("city_grove_effect", [2.5])}</div>` : loc("plus_max_resource", [pop, loc("citizen")]);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("tau_housing", "tauceti");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["tau_housing", "tauceti"]
          };
        },
        citizens() {
          let pop = 1;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      captive_housing: buildTemplate(`captive_housing`, "tauceti"),
      pylon: {
        id: "tauceti-pylon",
        title: loc("tau_home_pylon"),
        desc: loc("tau_home_pylon"),
        reqs: { magic: 2 },
        condition() {
          return global.tech["isolation"] && global.tauceti.hasOwnProperty("pylon") ? true : false;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("pylon", offset, 50, 1.48, "tauceti");
          },
          Stone(offset) {
            return spaceCostMultiplier("pylon", offset, 100, 1.42, "tauceti");
          },
          Crystal(offset) {
            return spaceCostMultiplier("pylon", offset, 8, 1.42, "tauceti") - 3;
          }
        },
        effect() {
          let max = spatialReasoning(2);
          let mana = +(0.0125 * darkEffect("magic")).toFixed(3);
          return `<div>${loc("gain", [mana, global.resource.Mana.name])}</div><div>${loc("plus_max_resource", [max, global.resource.Mana.name])}</div>`;
        },
        special() {
          return global.tech["magic"] && global.tech.magic >= 3 ? true : false;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("pylon", "tauceti");
            global.resource.Mana.max += spatialReasoning(2);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["pylon", "tauceti"]
          };
        }
      },
      cloning_facility: {
        id: `tauceti-cloning_facility`,
        title: loc("tau_home_cloning"),
        desc() {
          return loc("tau_home_cloning_desc", [races[global.race.species].name]);
        },
        category: "military",
        reqs: { cloning: 1 },
        path: ["truepath"],
        queue_complete() {
          return global.resource[global.race.species].max - global.resource[global.race.species].amount;
        },
        cost: {
          Money(offset) {
            return global["resource"][global.race.species].amount ? spaceCostMultiplier("citizen", offset, Math.round((global.race["high_pop"] ? 1e5 : 125e3) / jobScale(1)), global.race["high_pop"] ? 1.01 : 1.02, "tauceti", global.race["high_pop"] ? 1.003 : 1.005) : 0;
          },
          Copper(offset) {
            return !global.race["artifical"] || global.race["deconstructor"] ? 0 : global["resource"][global.race.species].amount >= 5 ? spaceCostMultiplier("citizen", offset, Math.round(50 / jobScale(1)), 1.01, "tauceti", global.race["high_pop"] ? 1.0032 : 1.005) : 0;
          },
          Aluminium(offset) {
            return !global.race["artifical"] || global.race["deconstructor"] ? 0 : global["resource"][global.race.species].amount >= 5 ? spaceCostMultiplier("citizen", offset, Math.round(50 / jobScale(1)), 1.01, "tauceti", global.race["high_pop"] ? 1.0032 : 1.005) : 0;
          },
          Nanite(offset) {
            return global.race["deconstructor"] ? global["resource"][global.race.species].amount >= 3 ? spaceCostMultiplier("citizen", offset, Math.round(500 / jobScale(1)), 1.01, "tauceti", global.race["high_pop"] ? 1.0032 : 1.005) : 0 : 0;
          }
        },
        effect() {
          let warn = "";
          if (global["resource"][global.race.species].max === global["resource"][global.race.species].amount) {
            warn = `<div class="has-text-caution">${loc("city_assembly_effect_warn")}</div>`;
          }
          return `<div>${loc("tau_home_cloning_effect", [races[global.race.species].name])}</div>${warn}`;
        },
        action() {
          if (global["resource"][global.race.species].max > global["resource"][global.race.species].amount && payCosts($(this)[0])) {
            global["resource"][global.race.species].amount++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["cloning_facility", "tauceti"]
          };
        }
      },
      horseshoe: buildTemplate(`horseshoe`, "tauceti"),
      bonfire: buildTemplate(`bonfire`, "tauceti"),
      firework: buildTemplate(`firework`, "tauceti"),
      assembly: buildTemplate(`assembly`, "tauceti"),
      nanite_factory: buildTemplate(`nanite_factory`, "tauceti"),
      tau_farm: {
        id: "tauceti-tau_farm",
        title: loc("tau_home_tau_farm"),
        desc() {
          return `<div>${loc("tau_home_tau_farm")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { tau_home: 7 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tau_farm", offset, 135e6, 1.25, "tauceti");
          },
          Stone(offset) {
            return spaceCostMultiplier("tau_farm", offset, 921e4, 1.25, "tauceti");
          },
          Steel(offset) {
            return spaceCostMultiplier("tau_farm", offset, 6295e3, 1.25, "tauceti");
          },
          Water(offset) {
            return spaceCostMultiplier("tau_farm", offset, 1e4, 1.25, "tauceti");
          }
        },
        effect() {
          let desc = `<div>${loc("space_red_spaceport_effect1", [loc("tau_planet", [races[global.race.species].home]), $(this)[0].support()])}</div>`;
          desc = desc + `<div>${loc("produce", [+production("tau_farm", "food").toFixed(2), global.resource.Food.name])}</div>`;
          if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
            desc = desc + `<div>${loc("produce", [+production("tau_farm", "lumber").toFixed(2), global.resource.Lumber.name])}</div>`;
          }
          if (global.tech["isolation"]) {
            let water = +production("tau_farm", "water").toFixed(2);
            desc = desc + `<div>${loc("produce", [water, global.resource.Water.name])}</div>`;
            if (global.race["artifical"]) {
              let sig_cap = spatialReasoning(350);
              desc = desc + `<div>${loc("city_transmitter_effect", [sig_cap])}</div>`;
            }
          }
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        support() {
          return 1;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 1 : 4);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("tau_farm", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tau_farm", "tauceti"]
          };
        }
      },
      mining_pit: {
        id: "tauceti-mining_pit",
        title: loc("tau_home_mining_pit"),
        desc() {
          return `<div>${loc("tau_home_mining_pit")}</div><div class="has-text-special">${loc("space_support", [races[global.race.species].home])}</div>`;
        },
        reqs: { tau_home: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mining_pit", offset, 425e4, 1.225, "tauceti");
          },
          Materials(offset) {
            return tauEnabled() ? 0 : spaceCostMultiplier("mining_pit", offset, 35e4, 1.225, "tauceti");
          },
          Lumber(offset) {
            return tauEnabled() ? spaceCostMultiplier("mining_pit", offset, 235e4, 1.225, "tauceti") : 0;
          },
          Iron(offset) {
            return tauEnabled() ? spaceCostMultiplier("mining_pit", offset, 835e3, 1.225, "tauceti") : 0;
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), races[global.race.species].home])}</div>`;
          desc = desc + `<div>${loc("plus_max_resource", [$(this)[0].workers(), loc("job_pit_miner")])}</div>`;
          if (!tauEnabled()) {
            desc = desc + `<div>${loc("plus_max_resource", [1e6, loc("resource_Materials_name")])}</div>`;
            desc = desc + `<div>${loc("tau_home_mining_pit_effect", [global.resource.Materials.name])}</div>`;
          } else {
            if (global.tech["isolation"]) {
              if (global.race["lone_survivor"]) {
                let res_list = [global.resource.Bolognium.name, global.resource.Adamantite.name, global.resource.Stone.name, global.resource.Copper.name, global.resource.Iron.name, global.resource.Aluminium.name, global.resource.Coal.name];
                if (global.race["smoldering"]) {
                  res_list.push(global.resource.Chrysotile.name);
                  desc = desc + `<div>${loc("tau_home_mining_pit_effect2cs", res_list)}</div>`;
                } else {
                  desc = desc + `<div>${loc("tau_home_mining_pit_effect2c", res_list)}</div>`;
                }
              } else {
                let res_list = [global.resource.Bolognium.name, global.resource.Adamantite.name, global.resource.Stone.name, global.resource.Copper.name, global.resource.Coal.name];
                if (global.race["smoldering"]) {
                  res_list.push(global.resource.Chrysotile.name);
                  desc = desc + `<div>${loc("tau_home_mining_pit_effect2bs", res_list)}</div>`;
                } else {
                  desc = desc + `<div>${loc("tau_home_mining_pit_effect2b", res_list)}</div>`;
                }
              }
              desc = desc + `<div>${loc("production", [8, global.resource.Cement.name])}</div>`;
            } else {
              let res_list = [global.resource.Bolognium.name, global.resource.Adamantite.name, global.resource.Stone.name];
              if (global.race["smoldering"]) {
                res_list.push(global.resource.Chrysotile.name);
                desc = desc + `<div>${loc("tau_home_mining_pit_effect2s", res_list)}</div>`;
              } else {
                desc = desc + `<div>${loc("tau_home_mining_pit_effect2", res_list)}</div>`;
              }
            }
          }
          return desc;
        },
        s_type: "tau_home",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        workers() {
          return jobScale(global.tech["isolation"] ? 6 : 8);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("mining_pit", "tauceti");
            if (powerOnNewStruct($(this)[0])) {
              let hiredMax = $(this)[0].workers();
              global.civic.pit_miner.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.pit_miner.workers += hired;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["mining_pit", "tauceti"]
          };
        }
      },
      excavate: {
        id: "tauceti-excavate",
        title: loc("tau_home_excavate"),
        desc() {
          return `<div>${loc("tau_home_excavate")}</div>`;
        },
        reqs: { tau_home: 2 },
        grant: ["tau_home", 3],
        path: ["truepath"],
        cost: {
          Money(o) {
            return 165e7;
          },
          Materials(o) {
            return 75e4;
          }
        },
        effect() {
          return loc("tau_home_excavate_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            messageQueue(loc("tau_home_excavate_msg"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      alien_outpost: {
        id: "tauceti-alien_outpost",
        title: loc("tech_alien_outpost"),
        desc() {
          return `<div>${loc("tech_alien_outpost")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { tau_home: 4 },
        path: ["truepath"],
        cost: {},
        queue_complete() {
          return 0;
        },
        effect() {
          let desc = `<div>${loc("plus_max_resource", ["20%", global.resource.Knowledge.name])}</div>`;
          if (global.tech["isolation"]) {
            desc = desc + `<div>${loc("plus_max_resource", [(global.race["lone_survivor"] ? 35e5 : 65e5).toLocaleString(), global.resource.Knowledge.name])}</div>`;
            desc = desc + `<div>${loc("plus_max_resource", [2e5.toLocaleString(), global.resource.Cipher.name])}</div>`;
            desc = desc + `<div>${loc(`space_lander_effect3`, [production("alien_outpost"), global.resource.Cipher.name])}</div>`;
          }
          if (global.tech["outpost_boost"]) {
            desc = desc + `<div>${loc("tech_alien_outpost_effect2")}</div>`;
          }
          if (global.race["lone_survivor"]) {
            desc = desc + `<div>${loc("city_wardenclyffe_effect1", [jobScale(1), global.civic.professor.name])}</div>`;
          }
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? global.race["lone_survivor"] ? 8 : 25 : 100);
        },
        special() {
          return global.tech["replicator"] ? true : false;
        },
        action() {
          return false;
        },
        struct() {
          return {
            d: { count: 1, on: 0 },
            p: ["alien_outpost", "tauceti"]
          };
        }
      },
      jump_gate: {
        id: "tauceti-jump_gate",
        title: loc("tau_jump_gate"),
        desc(wiki) {
          if (!global.tauceti.hasOwnProperty("jump_gate") || global.tauceti.jump_gate.count < 100 || wiki) {
            return `<div>${loc("tau_jump_gate")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("tau_jump_gate")}</div>`;
          }
        },
        reqs: { tauceti: 3 },
        condition() {
          return global.tech["isolation"] ? 0 : 1;
        },
        path: ["truepath"],
        queue_size: 10,
        queue_complete() {
          return 100 - global.tauceti.jump_gate.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("jump_gate") ? global.tauceti.jump_gate.count : 0) < 100 ? 1e6 : 0;
          },
          Materials(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("jump_gate") ? global.tauceti.jump_gate.count : 0) < 100 ? 12500 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.tauceti.hasOwnProperty("jump_gate") ? global.tauceti.jump_gate.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("tau_jump_gate_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("tau_jump_gate_effect");
          }
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.tauceti.jump_gate.count < 100) {
              incrementStruct("jump_gate", "tauceti");
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["jump_gate", "tauceti"]
          };
        }
      },
      fusion_generator: {
        id: "tauceti-fusion_generator",
        title: loc("tech_fusion_generator"),
        desc() {
          return `<div>${loc("tech_fusion_generator")}</div><div class="has-text-special">${loc("requires_res", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { tau_home: 6 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("fusion_generator", offset, 188e6, 1.25, "tauceti");
          },
          Iridium(offset) {
            return spaceCostMultiplier("fusion_generator", offset, 555e4, 1.25, "tauceti");
          },
          Stanene(offset) {
            return spaceCostMultiplier("fusion_generator", offset, 7003500, 1.25, "tauceti");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("fusion_generator", offset, wom_recycle(95e3), 1.25, "tauceti");
          }
        },
        effect() {
          let fuel = +int_fuel_adjust($(this)[0].p_fuel().a).toFixed(1);
          let desc = `<div>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered()])}</div>`;
          if (global.race["lone_survivor"]) {
            desc = desc + `<div>${loc("gain", [-fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
          } else {
            desc = desc + `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
          }
          return desc;
        },
        p_fuel() {
          return { r: "Helium_3", a: global.tech["isolation"] ? global.race["lone_survivor"] ? -15 : 75 : 500 };
        },
        powered() {
          return powerModifier(-32);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("fusion_generator", "tauceti");
            global.tauceti.fusion_generator.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["fusion_generator", "tauceti"]
          };
        }
      },
      repository: {
        id: "tauceti-repository",
        title: loc("tech_repository"),
        desc: loc("tech_repository"),
        reqs: { tau_home: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("repository", offset, 1028e4, 1.28, "tauceti");
          },
          Iron(offset) {
            return spaceCostMultiplier("repository", offset, 18e5, 1.28, "tauceti");
          },
          Cement(offset) {
            return spaceCostMultiplier("repository", offset, 15e5, 1.28, "tauceti");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("repository", offset, 215e3, 1.28, "tauceti");
          }
        },
        wide: true,
        res() {
          let res = [
            "Lumber",
            "Stone",
            "Furs",
            "Copper",
            "Iron",
            "Aluminium",
            "Cement",
            "Coal",
            "Steel",
            "Titanium",
            "Crystal",
            "Alloy",
            "Polymer",
            "Iridium",
            "Chrysotile",
            "Nano_Tube",
            "Neutronium",
            "Adamantite",
            "Unobtainium"
          ];
          if (global.tech["isolation"]) {
            res.push("Oil");
            res.push("Helium_3");
            res.push("Uranium");
            res.push("Water");
          }
          return res;
        },
        val(res) {
          switch (res) {
            case "Lumber":
              return 3e4;
            case "Stone":
              return 3e4;
            case "Chrysotile":
              return 3e4;
            case "Crystal":
              return 10;
            case "Furs":
              return 17e3;
            case "Copper":
              return 15200;
            case "Iron":
              return 14e3;
            case "Aluminium":
              return 12800;
            case "Cement":
              return 11200;
            case "Coal":
              return 4800;
            case "Steel":
              return 2400;
            case "Titanium":
              return 1600;
            case "Alloy":
              return 1800;
            case "Polymer":
              return 1500;
            case "Iridium":
              return 1750;
            case "Nano_Tube":
              return 1200;
            case "Neutronium":
              return 640;
            case "Adamantite":
              return 720;
            case "Unobtainium":
              return 1e3;
            case "Oil":
              return 680;
            case "Helium_3":
              return 575;
            case "Uranium":
              return 125;
            case "Water":
              return 15;
            case "Elerium":
              return 3;
            default:
              return 0;
          }
        },
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = tpStorageMultiplier("repository", false, wiki);
          let containers = 250;
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * multiplier).toFixed(0), 1);
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          if (global.tech["isolation"]) {
            storage = storage + `<span>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</span><span>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</span>`;
          }
          storage = storage + "</div>";
          return storage;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("repository", "tauceti");
            let containers = 250;
            global.resource.Crates.max += containers;
            global.resource.Containers.max += containers;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            let multiplier = tpStorageMultiplier("repository");
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                global.resource[res].max += spatialReasoning($(this)[0].val(res)) * multiplier;
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["repository", "tauceti"]
          };
        }
      },
      tau_factory: {
        id: "tauceti-tau_factory",
        title: loc("tau_home_tau_factory"),
        desc() {
          return `<div>${loc("tau_home_tau_factory")}</div><div class="has-text-special">${loc("requires_power_support", [races[global.race.species].home])}</div>`;
        },
        reqs: { tau_home: 8 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tau_factory", offset, 269e6, 1.25, "tauceti");
          },
          Titanium(offset) {
            return spaceCostMultiplier("tau_factory", offset, 3e6, 1.25, "tauceti");
          },
          Elerium(offset) {
            return spaceCostMultiplier("tau_factory", offset, 850, 1.25, "tauceti");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("tau_factory", offset, 25e4, 1.25, "tauceti");
          },
          Quantium(offset) {
            return spaceCostMultiplier("tau_factory", offset, wom_recycle(425e3), 1.25, "tauceti");
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), races[global.race.species].home])}</div>`;
          desc = desc + `<div>${loc("tau_home_tau_factory_effect", [$(this)[0].manufacturing()])}</div>`;
          if (global.tech["isolation"]) {
            if (!global.race["flier"]) {
              desc = desc + `<div>${loc("plus_max_resource", [jobScale(2), loc(`job_cement_worker`)])}</div>`;
            }
            desc = desc + `<div>${loc("space_red_fabrication_effect1", [jobScale(5)])}</div>`;
          }
          desc = desc + `<div>${loc("city_crafted_mats", [global.tech["isolation"] ? 275 : 90])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        special: true,
        s_type: "tau_home",
        support() {
          return -1;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 2 : 5);
        },
        manufacturing() {
          return global.tech["isolation"] ? 5 : 3;
        },
        action() {
          if (payCosts($(this)[0])) {
            global.civic.craftsman.display = true;
            incrementStruct("tau_factory", "tauceti");
            if (powerOnNewStruct($(this)[0])) {
              global.city.factory.Alloy += $(this)[0].manufacturing();
            }
            return true;
          }
          return false;
        },
        post() {
          if (global.race["lone_survivor"]) {
            defineIndustry();
          }
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tau_factory", "tauceti"]
          };
        }
      },
      infectious_disease_lab: {
        id: "tauceti-infectious_disease_lab",
        title() {
          return global.tech["isolation"] ? loc("tech_infectious_disease_lab_alt") : loc(global.race["artifical"] ? "tech_infectious_disease_lab_s" : "tech_infectious_disease_lab");
        },
        desc() {
          return `<div>${$(this)[0].title()}</div><div class="has-text-special">${loc("requires_power_support", [races[global.race.species].home])}</div>`;
        },
        reqs: { disease: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("infectious_disease_lab", offset, 1e9, 1.25, "tauceti");
          },
          Alloy(offset) {
            return spaceCostMultiplier("infectious_disease_lab", offset, 325e5, 1.25, "tauceti");
          },
          Polymer(offset) {
            return spaceCostMultiplier("infectious_disease_lab", offset, 5e7, 1.25, "tauceti");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("infectious_disease_lab", offset, 25e5, 1.25, "tauceti");
          },
          Unobtainium(offset) {
            return spaceCostMultiplier("infectious_disease_lab", offset, 64e3, 1.25, "tauceti");
          }
        },
        effect() {
          let sci = 39616;
          if (global.tech["supercollider"] && global.tech["isolation"]) {
            let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
            sci *= global.tech["supercollider"] / ratio + 1;
          }
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), races[global.race.species].home])}</div>`;
          desc = desc + `<div>${loc("city_max_knowledge", [Math.round(sci).toLocaleString()])}</div>`;
          if (global.tech["isolation"]) {
            let elerium = spatialReasoning(375);
            desc = desc + `<div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div>`;
            desc = desc + `<div>${loc("city_wardenclyffe_effect1", [jobScale(2), global.civic.professor.name])}</div>`;
            desc = desc + `<div>${loc("city_wardenclyffe_effect1", [jobScale(1), global.civic.scientist.name])}</div>`;
            desc = desc + `<div>${loc("space_zero_g_lab_effect", [jobScale(1)])}</div>`;
            desc = desc + `<div>${loc("city_library_effect", [75])}</div>`;
          }
          if (global.tech["alien_crafting"]) {
            desc = desc + `<div>${loc("production", [65, global.resource.Quantium.name])}</div>`;
          }
          if (global.tech["focus_cure"]) {
            desc = desc + `<div>${loc("tau_home_disease_lab_cure", [+global.tauceti.infectious_disease_lab.cure.toFixed(1)])}</div>`;
            if (global.race.hasOwnProperty("vax")) {
              desc = desc + `<div>${loc("tau_home_disease_lab_vax", [+global.race.vax.toFixed(2)])}</div>`;
            }
          }
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        s_type: "tau_home",
        support() {
          return -1;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? global.race["lone_survivor"] ? 2 : 8 : 35);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("infectious_disease_lab", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, cure: 0 },
            p: ["infectious_disease_lab", "tauceti"]
          };
        },
        post() {
          if (global.tech.disease === 1) {
            global.tech.disease = 2;
            messageQueue(loc("tau_plague4", [loc("tab_tauceti")]), "info", false, ["progress"]);
            drawTech();
          }
          loadFoundry();
        },
        postPower(on) {
          limitCraftsmen("Quantium");
        }
      },
      tauceti_casino: {
        id: "tauceti-tauceti_casino",
        title: loc("city_casino"),
        desc: loc("city_casino"),
        category: "commercial",
        reqs: { gambling: 1, isolation: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tauceti_casino", offset, 145e4, 1.35, "tauceti");
          },
          Furs(offset) {
            return spaceCostMultiplier("tauceti_casino", offset, 95e3, 1.35, "tauceti");
          },
          Cement(offset) {
            return spaceCostMultiplier("tauceti_casino", offset, 12e4, 1.35, "tauceti");
          },
          Plywood(offset) {
            return spaceCostMultiplier("tauceti_casino", offset, wom_recycle(55e3), 1.35, "tauceti");
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          let desc = global.race["lone_survivor"] ? `` : `<div>${loc("plus_max_resource", [pop, loc("citizen")])}</div>`;
          desc = desc + casinoEffect();
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(global.race["lone_survivor"] ? 1 : 2);
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("tauceti_casino", "tauceti");
            if (global.tech["theatre"] && !global.race["joyless"]) {
              global.civic.entertainer.max += jobScale(1);
              global.civic.entertainer.display = true;
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tauceti_casino", "tauceti"]
          };
        },
        citizens() {
          let gain = 1;
          if (global.race["high_pop"]) {
            gain *= traits.high_pop.vars()[0];
          }
          return global.race["lone_survivor"] ? 0 : gain;
        },
        flair: loc("city_casino_flair")
      },
      tau_cultural_center: {
        id: "tauceti-tau_cultural_center",
        title: loc("tech_cultural_center"),
        desc() {
          return `<div>${loc("tech_cultural_center")}</div><div class="has-text-special">${loc("space_electrolysis_req", [global.resource[$(this)[0].p_fuel().r].name])}</div>`;
        },
        category: "commercial",
        reqs: { tau_culture: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tau_cultural_center", offset, 9145e4, 1.35, "tauceti");
          },
          Copper(offset) {
            return spaceCostMultiplier("tau_cultural_center", offset, 585e4, 1.35, "tauceti");
          },
          Coal(offset) {
            return spaceCostMultiplier("tau_cultural_center", offset, 465e3, 1.35, "tauceti");
          },
          Polymer(offset) {
            return spaceCostMultiplier("tau_cultural_center", offset, 3792e3, 1.35, "tauceti");
          }
        },
        effect() {
          let womling = 8;
          let modifier = 1;
          if (global.civic.govern.type === "corpocracy") {
            modifier = 2;
          } else if (global.civic.govern.type === "socialist") {
            modifier = 0.8;
          }
          let cas = 20 * modifier;
          let mon = 5 * modifier;
          let bake = 15 * modifier;
          let desc = `<div class="has-text-caution">${loc("tau_home_cultureal_effect1", [$(this)[0].p_fuel().a, global.resource[$(this)[0].p_fuel().r].name, $(this)[0].title])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [cas, structName("casino")])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [mon, loc(`arpa_project_monument_title`)])}</div>`;
          desc += `<div>${loc("tau_home_cultureal_effect2", [womling, loc("tau_red_womlings")])}</div>`;
          if (global.tech.tau_culture >= 2) {
            desc += `<div>${loc("tau_home_cultureal_effect3", [bake, loc(`tau_gas2_alien_station_data2_r${global.race.tau_food_item || 0}`)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(1);
        },
        p_fuel() {
          return { r: "Food", a: global.race["lone_survivor"] ? 25 : 500 };
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("tau_cultural_center", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tau_cultural_center", "tauceti"]
          };
        }
      }
    },
    tau_red: {
      info: {
        name() {
          return loc("tau_planet", [planetName().red]);
        },
        desc() {
          return loc("tau_red", [planetName().red]);
        },
        support: "orbital_platform",
        extra(region) {
          if (global.tech["tau_red"] && global.tech.tau_red >= 5) {
            $(`#${region}`).append(`<div id="${region}Womlings" class="syndThreat has-text-warning">${loc("tau_red_womling_prod")} <span class="has-text-info">{{ prod }}%</span></div>`);
            vBind({
              el: `#${region}Womlings`,
              data: global.tauceti.overseer
            });
          }
        }
      },
      red_mission: {
        id: "tauceti-red_mission",
        title() {
          return loc("tau_new_mission_title", [planetName().red]);
        },
        desc() {
          return loc("tau_new_mission_title", [planetName().red]);
        },
        reqs: { tauceti: 2 },
        grant: ["tau_red", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_red >= 1 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e9;
          }
        },
        effect() {
          return loc("tau_new_mission_effect", [planetName().red]);
        },
        action() {
          if (payCosts($(this)[0])) {
            global.tauceti["settlement"] = { count: 0, on: 0 };
            messageQueue(loc("tau_red_mission_result", [planetName().red]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      orbital_platform: {
        id: "tauceti-orbital_platform",
        title: loc("tau_red_orbital_platform"),
        desc: `<div>${loc("tau_red_orbital_platform")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { tau_red: 1, tauceti: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("orbital_platform", offset, 5e7, 1.3, "tauceti");
          },
          Oil(offset) {
            return tauEnabled() ? spaceCostMultiplier("orbital_platform", offset, int_fuel_adjust(wom_repulse(275e3)), 1.3, "tauceti") : 0;
          },
          Aluminium(offset) {
            return spaceCostMultiplier("orbital_platform", offset, 178e4, 1.3, "tauceti");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("orbital_platform", offset, 45e4, 1.3, "tauceti");
          }
        },
        effect() {
          let oil = spatialReasoning(17500);
          let fuel = +int_fuel_adjust($(this)[0].support_fuel().a).toFixed(1);
          let desc = `<div>${loc("space_red_spaceport_effect1", [loc("tau_planet", [planetName().red]), $(this)[0].support()])}</div>`;
          desc = desc + `<div>${loc("plus_max_resource", [oil.toLocaleString(), global.resource.Oil.name])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("spend_power", [fuel, global.resource[$(this)[0].support_fuel().r].name, $(this)[0].powered()])}</div>`;
          return desc;
        },
        support_fuel() {
          return { r: global.race["lone_survivor"] ? "Helium_3" : "Oil", a: global.tech["isolation"] ? global.race["lone_survivor"] ? 8 : 32 : 125 };
        },
        support() {
          let sup = global.tech["womling_logistics"] ? 2.5 : 2;
          if (global.race["lone_survivor"]) {
            sup *= 2;
          }
          return sup;
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? global.race["lone_survivor"] ? 2 : 3 : 18);
        },
        refresh: true,
        action() {
          if (tauEnabled() && payCosts($(this)[0])) {
            incrementStruct("orbital_platform", "tauceti");
            powerOnNewStruct($(this)[0]);
            if (global.tech["tau_red"] === 1) {
              global.tech["tau_red"] = 2;
              messageQueue(loc("tau_red_orbital_platform_msg", [loc("tau_planet", [planetName().red]), loc("tau_planet", [races[global.race.species].home])]), "info", false, ["progress"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["orbital_platform", "tauceti"]
          };
        }
      },
      contact: {
        id: "tauceti-contact",
        title() {
          return loc("tau_red_contact");
        },
        desc() {
          return loc("tau_red_contact");
        },
        reqs: { tau_red: 4 },
        grant: ["tau_red", 5],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_red >= 5 ? 0 : 1;
        },
        cost: {
          Money() {
            return 6e8;
          },
          Food() {
            return global.race["lone_survivor"] && global.race["artifical"] ? 62e3 : 25e5;
          }
        },
        effect() {
          return loc("tau_red_contact_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            global.race["womling_friend"] = 1;
            defineWomlings();
            return true;
          }
          return false;
        }
      },
      introduce: {
        id: "tauceti-introduce",
        title() {
          return loc("tau_red_introduce");
        },
        desc() {
          return loc("tau_red_introduce");
        },
        reqs: { tau_red: 4 },
        grant: ["tau_red", 5],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_red >= 5 ? 0 : 1;
        },
        cost: {
          Knowledge() {
            return 7e6;
          }
        },
        effect() {
          return loc("tau_red_introduce_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            global.race["womling_god"] = 1;
            defineWomlings();
            return true;
          }
          return false;
        }
      },
      subjugate: {
        id: "tauceti-subjugate",
        title() {
          return loc("tau_red_subjugate");
        },
        desc() {
          return loc("tau_red_subjugate");
        },
        reqs: { tau_red: 4 },
        grant: ["tau_red", 5],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_red >= 5 ? 0 : 1;
        },
        cost: {
          Money() {
            return 285e7;
          }
        },
        effect() {
          return loc("tau_red_subjugate_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            global.race["womling_lord"] = 1;
            defineWomlings();
            return true;
          }
          return false;
        }
      },
      jeff: {
        id: "tauceti-jeff",
        title() {
          return loc("tau_red_jeff");
        },
        desc() {
          return loc("tau_red_jeff");
        },
        reqs: { tau_red: 5 },
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_red >= 5 ? 0 : 1;
        },
        cost: {},
        effect() {
          let injured = global.tauceti["overseer"] ? global.tauceti.overseer.injured : 0;
          if (global.tauceti["overseer"] && global.tauceti.overseer.pop < injured) {
            injured = global.tauceti.overseer.pop;
          }
          let desc = `<div>${loc("tau_red_jeff_effect1", [global.tauceti["overseer"] ? global.tauceti.overseer.pop : 0])}</div>`;
          desc = desc + `<div>${loc("tau_red_jeff_effect2", [global.tauceti["overseer"] ? global.tauceti.overseer.working : 0])}</div>`;
          desc = desc + `<div>${loc("tau_red_jeff_effect3", [injured])}</div>`;
          desc = desc + `<div>${loc("tau_red_jeff_effect4", [global.tauceti["overseer"] ? global.tauceti.overseer.loyal : 0])}</div>`;
          desc = desc + `<div>${loc("tau_red_jeff_effect5", [global.tauceti["overseer"] ? global.tauceti.overseer.morale : 0])}</div>`;
          if (global.tech.hasOwnProperty("womling_tech")) {
            desc = desc + `<div>${loc("tau_red_jeff_effect6", [global.tech.womling_tech])}</div>`;
          }
          desc = desc + `<div class="divide-line">${loc("job_farmer")}: ${global.tauceti["womling_farm"] ? global.tauceti.womling_farm.farmers : 0}</div>`;
          desc = desc + `<div>${loc("job_miner")}: ${global.tauceti["womling_mine"] ? global.tauceti.womling_mine.miners : 0}</div>`;
          if (global.tauceti["womling_lab"]) {
            desc = desc + `<div>${loc("job_scientist")}: ${global.tauceti["womling_lab"] ? global.tauceti.womling_lab.scientist : 0}</div>`;
          }
          return desc;
        },
        action() {
          return false;
        }
      },
      overseer: {
        id: "tauceti-overseer",
        title() {
          return $(this)[0].name();
        },
        desc() {
          return `<div>${$(this)[0].name()}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        name() {
          if (global.race["womling_lord"]) {
            return loc("tau_red_overseer");
          } else if (global.race["womling_god"]) {
            return loc("tau_red_womgod");
          } else {
            return loc("tau_red_womally");
          }
        },
        reqs: { tau_red: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("overseer", offset, 6e6, 1.28, "tauceti");
          },
          Cement(offset) {
            return spaceCostMultiplier("overseer", offset, 245e4, 1.28, "tauceti");
          },
          Alloy(offset) {
            return global.race["womling_friend"] ? spaceCostMultiplier("overseer", offset, 185e4, 1.28, "tauceti") : 0;
          },
          Neutronium(offset) {
            return global.race["womling_lord"] ? spaceCostMultiplier("overseer", offset, 165e3, 1.28, "tauceti") : 0;
          },
          Titanium(offset) {
            return global.race["womling_god"] ? spaceCostMultiplier("overseer", offset, 225e4, 1.28, "tauceti") : 0;
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          desc = desc + `<div>${loc("tau_red_overseer_effect", [$(this)[0].val()])}</div>`;
          return desc;
        },
        val() {
          let val = 0;
          if (global.race["womling_lord"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 12 : 10;
          } else if (global.race["womling_god"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 6 : 5;
          } else if (global.race["womling_friend"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 10 : 8;
          }
          if (global.race["lone_survivor"]) {
            val *= 2;
          }
          return val;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("overseer", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, pop: 0, working: 0, injured: 0, morale: 0, loyal: 0, prod: 0 },
            p: ["overseer", "tauceti"]
          };
        }
      },
      womling_village: {
        id: "tauceti-womling_village",
        title: loc("tau_red_womling_village"),
        desc() {
          return `<div>${loc("tau_red_womling_village")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { tau_red: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_village", offset, 1e7, 1.28, "tauceti");
          },
          Stone(offset) {
            return spaceCostMultiplier("womling_village", offset, 225e4, 1.28, "tauceti");
          },
          Plywood(offset) {
            return spaceCostMultiplier("womling_village", offset, wom_recycle(125e4), 1.28, "tauceti");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("womling_village", offset, wom_recycle(4e5), 1.28, "tauceti");
          }
        },
        effect() {
          let pop = global.tech["womling_pop"] && global.tech.womling_pop >= 2 ? 6 : 5;
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_village_effect", [pop])}</div>`;
          if (global.tech["tau_junksale"]) {
            desc = desc + `<div>${loc("tau_red_womling_village_effect2", [40, loc(`tau_gas2_alien_station_data4_r${global.race.tau_junk_item || 0}`)])}</div>`;
          }
          return desc;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("womling_village", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 1, on: 1 },
            p: ["womling_village", "tauceti"]
          };
        }
      },
      womling_farm: {
        id: "tauceti-womling_farm",
        title: loc("tau_red_womling_farm"),
        desc() {
          return `<div>${loc("tau_red_womling_farm")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { tau_red: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_farm", offset, 24e6, 1.28, "tauceti");
          },
          Iron(offset) {
            return spaceCostMultiplier("womling_farm", offset, 95e5, 1.28, "tauceti");
          },
          Water(offset) {
            return spaceCostMultiplier("womling_farm", offset, 5e3, 1.28, "tauceti");
          }
        },
        effect() {
          let food = global.tech["womling_pop"] ? 16 : 12;
          if (global.tech["womling_gene"]) {
            food += 4;
          }
          let farmers = global.tauceti.hasOwnProperty("womling_farm") ? global.tauceti.womling_farm.farmers : 0;
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_farm_effect", [food])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_employ", [2])}</div>`;
          if (global.tech["isolation"]) {
            desc = desc + `<div>${loc("tau_red_womling_generate", [global.resource.Furs.name])}</div>`;
          }
          desc = desc + `<div>${loc("tau_red_womling_farm_effect2", [food / 2 * farmers])}</div>`;
          return desc;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("womling_farm", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 1, on: 1, farmers: 0 },
            p: ["womling_farm", "tauceti"]
          };
        }
      },
      womling_mine: {
        id: "tauceti-womling_mine",
        title: loc("tau_red_womling_mine"),
        desc() {
          return `<div>${loc("tau_red_womling_mine")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { tau_red: 5 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_mine", offset, 125e5, 1.28, "tauceti");
          },
          Lumber(offset) {
            return spaceCostMultiplier("womling_mine", offset, 128e5, 1.28, "tauceti");
          },
          Steel(offset) {
            return spaceCostMultiplier("womling_mine", offset, 45e5, 1.28, "tauceti");
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          if (global.tech["isolation"]) {
            if (global.race["lone_survivor"]) {
              desc = desc + `<div>${loc("tau_red_womling_mine_effect_c", [
                global.resource.Unobtainium.name,
                global.resource.Uranium.name,
                global.resource.Titanium.name,
                global.resource.Iron.name,
                global.resource.Copper.name,
                global.resource.Aluminium.name,
                global.resource.Neutronium.name,
                global.resource.Iridium.name
              ])}</div>`;
            } else {
              desc = desc + `<div>${loc("tau_red_womling_mine_effect_b", [global.resource.Unobtainium.name, global.resource.Uranium.name, global.resource.Titanium.name])}</div>`;
            }
          } else {
            desc = desc + `<div>${loc("tau_red_womling_mine_effect_a", [global.resource.Unobtainium.name])}</div>`;
          }
          desc = desc + `<div>${loc("tau_red_womling_employ", [6])}</div>`;
          return desc;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("womling_mine", "tauceti");
            global.resource.Unobtainium.display = true;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, miners: 0 },
            p: ["womling_mine", "tauceti"]
          };
        },
        flair() {
          return loc("tau_red_womling_mine_flair");
        }
      },
      womling_fun: {
        id: "tauceti-womling_fun",
        title() {
          return $(this)[0].name();
        },
        desc() {
          return `<div>${$(this)[0].name()}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        name() {
          if (global.race["womling_lord"]) {
            return loc("tau_red_womling_fun1");
          } else if (global.race["womling_god"]) {
            return loc("tau_red_womling_fun2");
          } else {
            return loc("tau_red_womling_fun3");
          }
        },
        reqs: { tau_red: 6 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_fun", offset, 38e5, 1.28, "tauceti");
          },
          Food(offset) {
            return global.race["womling_friend"] ? spaceCostMultiplier("womling_fun", offset, 175e3, 1.28, "tauceti") : 0;
          },
          Lumber(offset) {
            return spaceCostMultiplier("womling_fun", offset, 5e5, 1.28, "tauceti");
          },
          Stone(offset) {
            return spaceCostMultiplier("womling_fun", offset, 5e5, 1.28, "tauceti");
          },
          Furs(offset) {
            return global.race["womling_lord"] || global.race["womling_god"] ? spaceCostMultiplier("womling_fun", offset, 835e3, 1.28, "tauceti") : 0;
          },
          Copper(offset) {
            return global.race["womling_lord"] ? spaceCostMultiplier("womling_fun", offset, 1125e3, 1.28, "tauceti") : 0;
          },
          Alloy(offset) {
            return global.race["womling_god"] ? spaceCostMultiplier("womling_fun", offset, 656e3, 1.28, "tauceti") : 0;
          },
          Water(offset) {
            return global.race["womling_friend"] ? spaceCostMultiplier("womling_fun", offset, 3500, 1.28, "tauceti") : 0;
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_fun_effect", [$(this)[0].val()])}</div>`;
          return desc;
        },
        val() {
          let val = 0;
          if (global.race["womling_lord"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 24 : 20;
          } else if (global.race["womling_god"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 12 : 10;
          } else if (global.race["womling_friend"]) {
            val = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 18 : 15;
          }
          if (global.race["lone_survivor"]) {
            val *= 2;
          }
          return val;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("womling_fun", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["womling_fun", "tauceti"]
          };
        }
      },
      womling_lab: {
        id: "tauceti-womling_lab",
        title: loc("interstellar_laboratory_title"),
        desc() {
          return `<div>${loc("interstellar_laboratory_title")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { tau_red: 7 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_lab", offset, 65e6, 1.28, "tauceti");
          },
          Elerium(offset) {
            return spaceCostMultiplier("womling_lab", offset, 1200, 1.28, "tauceti");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("womling_lab", offset, 25e5, 1.28, "tauceti");
          },
          Unobtainium(offset) {
            return spaceCostMultiplier("womling_lab", offset, 1e4, 1.28, "tauceti");
          },
          Quantium(offset) {
            return spaceCostMultiplier("womling_lab", offset, wom_recycle(95e3), 1.28, "tauceti");
          }
        },
        effect() {
          let overseer = global.tauceti.hasOwnProperty("overseer") ? global.tauceti.overseer.prod : 100;
          let know = Math.round(25e3 * overseer / 100);
          let desc = `<div class="has-text-caution">${loc("tau_new_support", [$(this)[0].support(), planetName().red])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_lab_effect", [know])}</div>`;
          desc = desc + `<div>${loc("tau_red_womling_employ_single", [1])}</div>`;
          return desc;
        },
        s_type: "tau_red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("womling_lab", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, scientist: 0, tech: 0 },
            p: ["womling_lab", "tauceti"]
          };
        }
      }
    },
    tau_gas: {
      info: {
        name(n, k) {
          let key = k || "gas_name";
          let ns = key === "gas_name" ? 0 : 1;
          if (n || global.race[key]) {
            switch (n || global.race[key]) {
              case 1: {
                let tracked = global.race.universe === "antimatter" ? "plasmid" : "antiplasmid";
                switch (Math.round(global.stats[tracked] + ns) % 3) {
                  case 1:
                    return loc("tau_planet", [planetName().gas]);
                  case 2:
                    return loc("tau_gas_title0a", [planetName().gas]);
                  default:
                    return loc("tau_gas_title0b", [planetName().gas]);
                }
              }
              case 2: {
                switch (Math.round(global.stats.reset + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title1a");
                  case 2:
                    return loc("tau_gas_title1b");
                  default:
                    return loc("tau_gas_title1c");
                }
              }
              case 3: {
                switch (Math.round(global.stats.mad + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title2a");
                  case 2:
                    return loc("tau_gas_title2b");
                  default:
                    return loc("tau_gas_title2c");
                }
              }
              case 4: {
                switch (Math.round(global.stats.bioseed + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title3a", [races[global.race.gods].solar.gas]);
                  case 2:
                    return loc("tau_gas_title3b", [races[global.race.old_gods].name]);
                  default:
                    return loc("tau_gas_title3c", [races[global.race.species].name]);
                }
              }
              case 5: {
                switch (Math.round(global.stats.portals + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title4a", [planetName().gas]);
                  case 2:
                    return loc("tau_gas_title4b", [flib("reverse", planetName().gas)]);
                  default:
                    return loc("tau_gas_title4c");
                }
              }
              case 6: {
                switch (Math.round(global.stats.womling.friend.l + global.stats.womling.lord.l + global.stats.womling.god.l + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title5a");
                  case 2:
                    return loc("tau_gas_title5b");
                  default:
                    return loc("tau_gas_title5c");
                }
              }
              case 7: {
                switch (Math.round(global.stats.tdays + ns) % 3) {
                  case 1:
                    return loc("tau_gas_title6a");
                  case 2:
                    return loc("tau_gas_title6b");
                  default:
                    return loc("tau_gas_title6c");
                }
              }
              default:
                return key === "gas_name" ? loc("tau_gas_title") : loc("tau_gas2_title");
            }
          }
          return key === "gas_name" ? loc("tau_gas_title") : loc("tau_gas2_title");
        },
        desc() {
          return loc("tau_gas_desc");
        }
      },
      gas_contest: {
        id: "tauceti-gas_contest",
        title() {
          return loc("tau_gas_contest_title");
        },
        desc() {
          return loc("tau_gas_contest_title");
        },
        reqs: { tauceti: 5 },
        grant: ["tau_gas", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_gas >= 1 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e7;
          }
        },
        effect() {
          return global.race["lone_survivor"] ? loc("tau_gas_contest_effect_alt") : loc("tau_gas_contest_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            return true;
          }
          return false;
        }
      },
      refueling_station: {
        id: "tauceti-refueling_station",
        title() {
          return loc("tau_gas_refueling_station_title");
        },
        desc() {
          return `<div>${loc("tau_gas_refueling_station_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { tau_gas: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("refueling_station", offset, 68e6, 1.28, "tauceti");
          },
          Graphene(offset) {
            return spaceCostMultiplier("refueling_station", offset, 25e5, 1.28, "tauceti");
          },
          Unobtainium(offset) {
            return spaceCostMultiplier("refueling_station", offset, 5500, 1.28, "tauceti");
          },
          Mythril(offset) {
            return spaceCostMultiplier("refueling_station", offset, wom_recycle(6e4), 1.28, "tauceti");
          }
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 2 : 5);
        },
        effect() {
          let helium_prod = +production("refueling_station").toFixed(2);
          let helium_tank = spatialReasoning(1e4);
          let desc = `<div>${loc("space_gas_mining_effect1", [helium_prod])}</div>`;
          desc = desc + `<div>${loc("plus_max_resource", [helium_tank.toLocaleString(), global.resource.Helium_3.name])}</div>`;
          if (global.tech["tau_whale"] >= 2) {
            let oil_tank = spatialReasoning(6500);
            desc = desc + `<div>${loc("plus_max_resource", [oil_tank.toLocaleString(), global.resource.Oil.name])}</div>`;
          }
          if (global.tech["isolation"]) {
            desc = desc + `<div>${loc("interstellar_g_factory_effect")}</div>`;
          }
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        special() {
          return global.tech["isolation"] ? true : false;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("refueling_station", "tauceti");
            if (powerOnNewStruct($(this)[0])) {
              if (global.tech["isolation"]) {
                if (global.race["kindling_kindred"] || global.race["smoldering"]) {
                  global.space.g_factory.Oil++;
                } else {
                  global.space.g_factory.Lumber++;
                }
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["refueling_station", "tauceti"]
          };
        },
        post() {
          if (global.tech.tau_gas === 2) {
            global.tech.tau_gas = 3;
            defineIndustry();
            drawTech();
          }
        }
      },
      ore_refinery: {
        id: "tauceti-ore_refinery",
        title() {
          return loc("tau_gas_ore_refinery_title");
        },
        desc() {
          return `<div>${loc("tau_gas_ore_refinery_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { tau_gas: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ore_refinery", offset, 52e6, 1.28, "tauceti");
          },
          Iridium(offset) {
            return spaceCostMultiplier("ore_refinery", offset, 16e5, 1.28, "tauceti");
          },
          Unobtainium(offset) {
            return spaceCostMultiplier("ore_refinery", offset, 800, 1.28, "tauceti");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("ore_refinery", offset, wom_recycle(118e3), 1.28, "tauceti");
          }
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 2 : 8);
        },
        smelting() {
          return global.tech["isolation"] ? 12 : 4;
        },
        effect() {
          let ore = global.tauceti.hasOwnProperty("ore_refinery") ? global.tauceti.ore_refinery.fill : 0;
          let max = global.tauceti.hasOwnProperty("ore_refinery") ? global.tauceti.ore_refinery.max : 0;
          let refine = +production("ore_refinery").toFixed(2);
          let desc = `<div>${loc("tau_gas_ore_refinery_effect", [+ore.toFixed(2)])}</div>`;
          desc = desc + `<div>${loc("tau_gas_ore_refinery_effect2", [max])}</div>`;
          desc = desc + `<div>${loc("tau_gas_ore_refinery_effect3", [refine])}</div>`;
          desc = desc + `<div>${loc("interstellar_stellar_forge_effect3", [$(this)[0].smelting()])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        special: true,
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("ore_refinery", "tauceti");
            if (powerOnNewStruct($(this)[0])) {
              let num_smelters = $(this)[0].smelting();
              addSmelter(num_smelters, "Steel", global.race["evil"] ? "Wood" : "Oil");
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, max: 0, fill: 0 },
            p: ["ore_refinery", "tauceti"]
          };
        },
        post() {
          if (global.tech.tau_roid === 3) {
            global.tech.tau_roid = 4;
            renderTauCeti();
            drawTech();
          }
        }
      },
      whaling_station: {
        id: "tauceti-whaling_station",
        title() {
          return loc("tau_gas_whaling_station_title");
        },
        desc() {
          return `<div>${loc("tau_gas_whaling_station_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { tau_whale: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("whaling_station", offset, 72e6, 1.28, "tauceti");
          },
          Steel(offset) {
            return spaceCostMultiplier("whaling_station", offset, 18e5, 1.28, "tauceti");
          },
          Polymer(offset) {
            return spaceCostMultiplier("whaling_station", offset, 955e3, 1.28, "tauceti");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("whaling_station", offset, 268e3, 1.28, "tauceti");
          }
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 2 : 6);
        },
        effect() {
          let blubber = global.tauceti.hasOwnProperty("whaling_station") ? global.tauceti.whaling_station.fill : 0;
          let max = global.tauceti.hasOwnProperty("whaling_station") ? global.tauceti.whaling_station.max : 0;
          let refine = +production("whaling_station").toFixed(2);
          let desc = `<div>${loc("tau_gas_whaling_station_effect", [+blubber.toFixed(2)])}</div>`;
          desc = desc + `<div>${loc("tau_gas_whaling_station_effect2", [max])}</div>`;
          desc = desc + `<div>${loc("tau_gas_whaling_station_effect3", [refine])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("whaling_station", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, max: 0, fill: 0 },
            p: ["whaling_station", "tauceti"]
          };
        },
        post() {
          if (global.tech.tau_whale === 1) {
            global.tech.tau_whale = 2;
            renderTauCeti();
          }
        }
      },
      womling_station: {
        id: "tauceti-womling_station",
        title() {
          return loc("tau_gas_womling_station_title");
        },
        desc() {
          return `<div>${loc("tau_gas_womling_station_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { womling_technicians: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("womling_station", offset, 1334e5, 1.26, "tauceti");
          },
          Furs(offset) {
            return spaceCostMultiplier("womling_station", offset, 3805e3, 1.26, "tauceti");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("womling_station", offset, 85e5, 1.26, "tauceti");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("womling_station", offset, 909e3, 1.26, "tauceti");
          }
        },
        powered() {
          return powerCostMod(global.tech["isolation"] ? 3 : 6);
        },
        effect() {
          let prod = global.tech["isolation"] ? 30 : 8;
          if (global.tech["womling_gene"]) {
            prod *= 1.25;
          }
          let desc = `<div>${loc("production", [prod, tauCetiModules.tau_gas.info.name()])}</div>`;
          if (!global.race["flier"]) {
            desc = desc + `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_cement_worker`)])}</div>`;
          }
          desc = desc + `<div>${loc("space_red_fabrication_effect1", [jobScale(1)])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action() {
          if (payCosts($(this)[0])) {
            global.civic.craftsman.display = true;
            incrementStruct("womling_station", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["womling_station", "tauceti"]
          };
        }
      }
    },
    tau_roid: {
      info: {
        name() {
          return loc("tau_roid_title");
        },
        desc() {
          return loc("tau_roid_desc");
        },
        support: "patrol_ship"
      },
      roid_mission: {
        id: "tauceti-roid_mission",
        title() {
          return loc("space_mission_title", [loc("tau_roid_title")]);
        },
        desc() {
          return loc("space_mission_desc", [loc("tau_roid_title")]);
        },
        reqs: { tauceti: 5 },
        grant: ["tau_roid", 1],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_roid >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +int_fuel_adjust(125e4, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("tau_roid_mission_effect", [loc("tau_roid_title")]);
        },
        action() {
          if (payCosts($(this)[0])) {
            messageQueue(loc("tau_roid_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      patrol_ship: {
        id: "tauceti-patrol_ship",
        title: loc("tau_roid_patrol_ship"),
        desc() {
          return `<div>${loc("tau_roid_patrol_ship")}</div><div class="has-text-special">${loc("requires_res", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { tau_roid: 3 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("patrol_ship", offset, 45e6, 1.25, "tauceti");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("patrol_ship", offset, 18e5, 1.25, "tauceti");
          },
          Elerium(offset) {
            return spaceCostMultiplier("patrol_ship", offset, 520, 1.25, "tauceti");
          },
          Stanene(offset) {
            return spaceCostMultiplier("patrol_ship", offset, 2675e3, 1.25, "tauceti");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("patrol_ship", offset, 115e4, 1.25, "tauceti");
          }
        },
        effect() {
          let fuel = +int_fuel_adjust($(this)[0].support_fuel().a).toFixed(1);
          let desc = `<div>${loc("tau_roid_patrol_ship_security", [$(this)[0].support()])}</div>`;
          desc = desc + `<div>${loc("tau_roid_patrol_ship_effect")}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
          return desc;
        },
        support_fuel() {
          return { r: "Helium_3", a: global.tech["isolation"] ? 15 : 250 };
        },
        support() {
          return 1;
        },
        powered() {
          return 0;
        },
        refresh: true,
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("patrol_ship", "tauceti");
            global.tauceti.patrol_ship.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["patrol_ship", "tauceti"]
          };
        }
      },
      mining_ship: {
        id: "tauceti-mining_ship",
        title: loc("tau_roid_mining_ship"),
        desc() {
          return `<div>${loc("tau_roid_mining_ship")}</div>`;
        },
        reqs: { tau_roid: 4 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mining_ship", offset, 28e6, 1.28, "tauceti");
          },
          Uranium(offset) {
            return spaceCostMultiplier("mining_ship", offset, 12500, 1.28, "tauceti");
          },
          Titanium(offset) {
            return spaceCostMultiplier("mining_ship", offset, 22e5, 1.28, "tauceti");
          },
          Alloy(offset) {
            return spaceCostMultiplier("mining_ship", offset, 175e4, 1.28, "tauceti");
          }
        },
        effect() {
          let fuel = +int_fuel_adjust($(this)[0].support_fuel().a).toFixed(1);
          let mine = +production("mining_ship").toFixed(2);
          let desc = `<div>${loc("tau_roid_mining_ship_effect", [mine])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
          return desc;
        },
        s_type: "tau_roid",
        support_fuel() {
          return { r: "Helium_3", a: global.tech["isolation"] ? 12 : 75 };
        },
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        special: true,
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("mining_ship", "tauceti");
            powerOnNewStruct($(this)[0]);
            if (global.tauceti.mining_ship.count === 1) {
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, common: 50, uncommon: 50, rare: 50 },
            p: ["mining_ship", "tauceti"]
          };
        }
      },
      whaling_ship: {
        id: "tauceti-whaling_ship",
        title: loc("tau_roid_whaling_ship"),
        desc() {
          return `<div>${loc("tau_roid_whaling_ship")}</div>`;
        },
        reqs: { tau_whale: 2 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("whaling_ship", offset, 35e6, 1.28, "tauceti");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("whaling_ship", offset, 34e5, 1.28, "tauceti");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("whaling_ship", offset, 168e3, 1.28, "tauceti");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("whaling_ship", offset, 8e5, 1.28, "tauceti");
          }
        },
        effect() {
          let fuel = +int_fuel_adjust($(this)[0].support_fuel().a).toFixed(1);
          let mine = +production("whaling_ship").toFixed(2);
          let desc = `<div>${loc("tau_roid_whaling_ship_effect", [mine])}</div>`;
          desc = desc + `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].support_fuel().r].name])}</div>`;
          return desc;
        },
        s_type: "tau_roid",
        support_fuel() {
          return { r: "Helium_3", a: global.tech["isolation"] ? 14 : 90 };
        },
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action() {
          if (payCosts($(this)[0])) {
            incrementStruct("whaling_ship", "tauceti");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["whaling_ship", "tauceti"]
          };
        }
      }
    },
    tau_gas2: {
      info: {
        name(n) {
          return tauCetiModules.tau_gas.info.name(n || global.race["gas_name2"] || false, "gas_name2");
        },
        desc() {
          return loc("tau_gas2_desc", [tauCetiModules.tau_gas.info.name()]);
        }
      },
      gas_contest2: {
        id: "tauceti-gas_contest2",
        title() {
          return loc("tau_gas2_contest_title");
        },
        desc() {
          return loc("tau_gas2_contest_title");
        },
        reqs: { tau_gas2: 1 },
        grant: ["tau_gas2", 2],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_gas2 >= 1 ? 0 : 1;
        },
        cost: {
          Money() {
            return 25e6;
          }
        },
        effect() {
          return loc("tau_gas2_contest_effect");
        },
        action() {
          if (payCosts($(this)[0])) {
            return true;
          }
          return false;
        },
        flair() {
          return loc("tau_gas2_contest_flair");
        }
      },
      alien_station_survey: {
        id: "tauceti-alien_station_survey",
        title: loc("tau_gas2_alien_station"),
        desc: loc("tau_gas2_alien_station"),
        reqs: { tau_gas2: 3 },
        grant: ["tau_gas2", 4],
        path: ["truepath"],
        queue_complete() {
          return global.tech.tau_gas3 >= 4 ? 0 : 1;
        },
        cost: {
          Money() {
            return global.race["lone_survivor"] ? 15e8 : 3e9;
          },
          Helium_3() {
            return 5e6;
          }
        },
        effect() {
          return loc("tau_gas2_alien_station_repair_effect", [tauCetiModules.tau_gas2.info.name()]);
        },
        action() {
          if (payCosts($(this)[0])) {
            initStruct(tauCetiModules.tau_gas2.alien_station);
            messageQueue(loc("tau_gas2_alien_station_msg", [tauCetiModules.tau_gas2.info.name()]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      alien_station: {
        id: "tauceti-alien_station",
        title: loc("tau_gas2_alien_station"),
        desc(wiki) {
          if (!global.tauceti.hasOwnProperty("alien_station") || global.tauceti.alien_station.count < 100 || wiki) {
            return `<div>${loc("tau_gas2_alien_station")}</div>` + (global.tauceti.hasOwnProperty("alien_station") && global.tauceti.alien_station.count >= 100 ? `<div class="has-text-special">${loc("space_dwarf_reactor_desc_req")}</div>` : `<div class="has-text-special">${loc("tau_gas2_alien_station_repair")}</div>`);
          } else {
            return `<div>${loc("tau_gas2_alien_station")}</div>`;
          }
        },
        reqs: { tau_gas2: 4 },
        condition() {
          return global.tauceti.alien_station.count < 100 ? true : false;
        },
        path: ["truepath"],
        queue_size: 5,
        queue_complete() {
          return 100 - global.tauceti.alien_station.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0) < 100 ? global.race["lone_survivor"] ? 12e6 : 5e7 : 0;
          },
          Aluminium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0) < 100 ? global.race["lone_survivor"] ? 256e3 : 256e4 : 0;
          },
          Polymer(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0) < 100 ? global.race["lone_survivor"] ? 198900 : 989e3 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0) < 100 ? wom_recycle(125e3) : 0;
          },
          Cipher(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0) < 100 ? global.race["lone_survivor"] ? 256 : 2001 : 0;
          }
        },
        effect(wiki) {
          let effectText = "";
          let count = (wiki?.count ?? 0) + (global.tauceti.hasOwnProperty("alien_station") ? global.tauceti.alien_station.count : 0);
          if (count < 100) {
            effectText += `<div class="has-text-special">${loc("tau_gas2_alien_station_repaired", [count])}</div>`;
            return effectText;
          } else {
            return tauCetiModules.tau_gas2.alien_space_station.effect(wiki);
          }
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.tauceti.alien_station.count < 100) {
              incrementStruct("alien_station", "tauceti");
              if (global.tauceti.alien_station.count >= 100) {
                global.tech.tau_gas2 = 5;
                global.tauceti["alien_space_station"] = { count: 1, on: 0 };
                drawTech();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["alien_station", "tauceti"]
          };
        },
        post() {
          if (global.tauceti.hasOwnProperty("alien_space_station")) {
            if (global.resource.Elerium.diff >= 10) {
              global.tauceti.alien_space_station.on = 1;
            }
            renderTauCeti();
          }
        }
      },
      alien_space_station: {
        id: "tauceti-alien_space_station",
        title: loc("tau_gas2_alien_station"),
        desc() {
          return `<div>${loc("tau_gas2_alien_station")}</div><div class="has-text-special">${loc("space_dwarf_reactor_desc_req")}</div>`;
        },
        reqs: { tau_gas2: 5 },
        path: ["truepath"],
        cost: {},
        queue_complete() {
          return 0;
        },
        special() {
          return global.tech["tau_gas2"] && global.tech.tau_gas2 === 6 && (!global.tech["alien_data"] || global.tech.alien_data < 6) ? true : false;
        },
        wiki: false,
        effect() {
          let fuel = $(this)[0].p_fuel().a;
          let desc = `<div>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered()])}</div>`;
          if (global.tech["tau_gas2"] && global.tech.tau_gas2 >= 6 && global.tauceti.alien_space_station.hasOwnProperty("decrypted")) {
            let devisor = global.race["lone_survivor"] ? 1e5 : 25e6;
            let decrypted = +(global.tauceti.alien_space_station.decrypted / devisor).toFixed(2);
            if (decrypted > 100) {
              decrypted = 100;
            }
            desc = desc + `<div>${loc("tau_gas2_alien_station_effect", [decrypted])}</div>`;
          }
          desc = desc + `<div class="has-text-caution">${loc("spend", [fuel, global.resource[$(this)[0].p_fuel().r].name])}</div>`;
          return desc;
        },
        p_fuel() {
          return { r: "Elerium", a: global.race["lone_survivor"] ? 1 : 10 };
        },
        powered() {
          return powerModifier(-75);
        },
        action() {
          return false;
        }
      },
      matrioshka_brain: {
        id: "tauceti-matrioshka_brain",
        title: loc("tech_matrioshka_brain"),
        desc(wiki) {
          if (!global.tauceti.hasOwnProperty("matrioshka_brain") || global.tauceti.matrioshka_brain.count < 1e3 || wiki) {
            return `<div>${loc("tech_matrioshka_brain")}</div><div class="has-text-special">${loc("requires_segments", [1e3])}</div>`;
          } else {
            return `<div>${loc("tech_matrioshka_brain")}</div>`;
          }
        },
        reqs: { tau_gas2: 7 },
        condition() {
          return global.tauceti["matrioshka_brain"] ? true : false;
        },
        path: ["truepath"],
        queue_size: 50,
        queue_complete() {
          return 1e3 - global.tauceti.matrioshka_brain.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 2e7 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 45e3 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 16e4 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 666e3 : 0;
          },
          Stanene(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 61600 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 44e3 : 0;
          },
          Unobtainium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? 1200 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0) < 1e3 ? wom_recycle(64e3) : 0;
          }
        },
        effect(wiki) {
          let effectText = "";
          let count = (wiki?.count ?? 0) + (global.tauceti.hasOwnProperty("matrioshka_brain") ? global.tauceti.matrioshka_brain.count : 0);
          if (count < 1e3) {
            effectText += `<div class="has-text-special">${loc("tau_gas2_matrioshka_brain_seg", [1e3 - count])}</div>`;
          }
          return effectText;
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.tauceti.matrioshka_brain.count < 1e3) {
              incrementStruct("matrioshka_brain", "tauceti");
              if (global.tauceti.matrioshka_brain.count >= 1e3) {
                global.tech["m_brain"] = 1;
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["matrioshka_brain", "tauceti"]
          };
        }
      },
      ignition_device: {
        id: "tauceti-ignition_device",
        title: loc("tech_ignition_device"),
        desc(wiki) {
          if (!global.tauceti.hasOwnProperty("ignition_device") || global.tauceti.ignition_device.count < 10 || wiki) {
            return `<div>${loc("tech_ignition_device")}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("tech_ignition_device")}</div>`;
          }
        },
        reqs: { tau_gas2: 8 },
        condition() {
          return global.tauceti["ignition_device"] && global.tauceti.ignition_device.count < 10 ? true : false;
        },
        path: ["truepath"],
        queue_size: 1,
        queue_complete() {
          return 10 - global.tauceti.ignition_device.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? 25e7 : 0;
          },
          Uranium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? 5e4 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? 25e3 : 0;
          },
          Graphene(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? 225e5 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? 15e6 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0) < 10 ? wom_recycle(8e6) : 0;
          }
        },
        effect(wiki) {
          let effectText = "";
          let count = (wiki?.count ?? 0) + (global.tauceti.hasOwnProperty("ignition_device") ? global.tauceti.ignition_device.count : 0);
          if (count < 10) {
            effectText += `<div class="has-text-special">${loc("tau_gas2_ignition_device_seg", [10 - count])}</div>`;
          }
          return effectText;
        },
        action() {
          if (payCosts($(this)[0])) {
            if (global.tauceti.ignition_device.count < 10) {
              incrementStruct("ignition_device", "tauceti");
              if (global.tauceti.ignition_device.count >= 10) {
                global.tech["m_ignite"] = 1;
                renderTauCeti();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["ignition_device", "tauceti"]
          };
        }
      },
      ignite_gas_giant: {
        id: "tauceti-ignite_gas_giant",
        title() {
          return loc("tau_gas2_ignite_gas_giant", [tauCetiModules.tau_gas2.info.name()]);
        },
        desc() {
          return loc("tau_gas2_ignite_gas_giant", [tauCetiModules.tau_gas2.info.name()]);
        },
        reqs: { tau_gas2: 8, m_ignite: 1 },
        grant: ["m_ignite", 2],
        queue_size: 1,
        queue_complete() {
          return false;
        },
        path: ["truepath"],
        cost: {
          Helium_3() {
            return 75e5;
          }
        },
        effect() {
          let desc = `<div>${loc("tau_gas2_ignite_gas_giant_effect", [loc("tech_matrioshka_brain")])}</div>`;
          if (!global.tech["m_brain"]) {
            desc = desc + `<div class="has-text-warning">${loc("tau_gas2_ignite_gas_giant_effect2", [loc("tech_matrioshka_brain")])}</div>`;
          } else {
            desc = desc + `<div>${loc("tau_gas2_ignite_gas_giant_effect3")}</div>`;
            desc += retireProjection();
          }
          return desc;
        },
        action() {
          if (global.tech["m_brain"] && payCosts($(this)[0])) {
            retirement();
            return true;
          }
          return false;
        }
      }
    }
  };
  for (let i = 1; i < 9; i++) {
    tauCetiModules.tau_gas[`gas_contest-a${i}`] = {
      id: `tauceti-gas_contest-a${i}`,
      title() {
        return tauCetiModules.tau_gas.info.name(i);
      },
      desc() {
        return tauCetiModules.tau_gas.info.name(i);
      },
      reqs: { tau_gas: 1 },
      grant: ["tau_gas", 2],
      path: ["truepath"],
      wiki: false,
      queue_complete() {
        return global.tech.tau_gas >= 2 ? 0 : 1;
      },
      cost: {},
      effect() {
        return loc(i === 8 ? "tau_gas_contest_reject" : "tau_gas_contest_pick", [tauCetiModules.tau_gas.info.name(i)]);
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race["gas_name"] = i;
          initStruct(tauCetiModules.tau_gas.refueling_station);
          return true;
        }
        return false;
      }
    };
    tauCetiModules.tau_gas2[`gas_contest-b${i}`] = {
      id: `tauceti-gas_contest-b${i}`,
      title() {
        return tauCetiModules.tau_gas2.info.name(i);
      },
      desc() {
        return tauCetiModules.tau_gas2.info.name(i);
      },
      reqs: { tau_gas2: 2 },
      grant: ["tau_gas2", 3],
      path: ["truepath"],
      wiki: false,
      queue_complete() {
        return global.tech.tau_gas2 >= 3 ? 0 : 1;
      },
      cost: {},
      effect() {
        return loc(i === 8 ? "tau_gas2_contest_reject" : "tau_gas_contest_pick", [tauCetiModules.tau_gas2.info.name(i)]);
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race["gas_name2"] = i;
          return true;
        }
        return false;
      }
    };
  }
  function matrixProjection() {
    let gains = calcPrestige("matrix");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
    let skilled = global.stats.retire === global.stats.matrix + 1 ? `<div class="has-text-advanced">${loc("tau_star_matrix_skilled", [1])}</div>` : ``;
    return `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.phage, loc("resource_Phage_name")])}</div><div class="has-text-advanced">${loc("tau_star_matrix_servants", [1])}</div>${skilled}`;
  }
  function retireProjection() {
    let gains = calcPrestige("retired");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
    let skilled = global.stats.retire + 1 === global.stats.matrix ? `<div class="has-text-advanced">${loc("tau_star_matrix_skilled", [1])}</div>` : ``;
    return `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.phage, loc("resource_Phage_name")])}</div><div class="has-text-advanced">${loc("tau_star_matrix_servants", [1])}</div>${skilled}`;
  }
  function edenProjection() {
    let gains = calcPrestige("eden");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
    return `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.phage, loc("resource_Phage_name")])}</div><div class="has-text-advanced">${loc("tau_star_matrix_servants", [1])}</div>`;
  }
  function defineWomlings() {
    initStruct(tauCetiModules.tau_red.overseer);
    initStruct(tauCetiModules.tau_red.womling_village);
    initStruct(tauCetiModules.tau_red.womling_mine);
    initStruct(tauCetiModules.tau_red.womling_fun);
    initStruct(tauCetiModules.tau_red.womling_farm);
    if (global.race["lone_survivor"]) {
      global.tauceti.womling_village.count = 2;
      global.tauceti.womling_village.on = 2;
      global.tauceti.womling_mine.count = 1;
      global.tauceti.womling_mine.on = 1;
    }
  }
  function wom_repulse(v) {
    if (global.tech["womling_tech"] && global.tech["womling_logistics"] && global.tech.womling_logistics >= 2) {
      v *= 0.94 ** global.tech.womling_tech;
    }
    return v;
  }
  function wom_recycle(v) {
    if (global.tech["womling_tech"] && global.tech["womling_recycling"] && global.tech.womling_recycling >= 1) {
      v *= (global.tech["isolation"] ? 0.97 : 0.98) ** global.tech.womling_tech;
    }
    return v;
  }
  function outerTruthTech() {
    return outerTruth;
  }
  function tauCetiTech() {
    return tauCetiModules;
  }
  function tauEnabled() {
    if (global.tech["tauceti"] && global.tech.tauceti >= 4) {
      return true;
    }
    return false;
  }
  function checkPathRequirements(era, region, action) {
    switch (era) {
      case "tauceti":
        return checkRequirements2(tauCetiModules, region, action);
    }
  }
  function renderTauCeti() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 6)) {
      return;
    }
    let parent = $("#tauceti");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc("tab_tauceti")}</h2>`));
    if (!global.tech["tauceti"] || global.tech.tauceti < 2) {
      return;
    }
    Object.keys(tauCetiModules).forEach(function(region) {
      let show = region.replace("tau_", "");
      if (global.settings.tau[`${show}`]) {
        let name = typeof tauCetiModules[region].info.name === "string" ? tauCetiModules[region].info.name : tauCetiModules[region].info.name();
        let property = ``;
        if (tauCetiModules[region].info.hasOwnProperty("prop")) {
          property = tauCetiModules[region].info.prop();
        }
        if (tauCetiModules[region].info["support"]) {
          let support = tauCetiModules[region].info["support"];
          if (tauCetiModules[region].info["hide_support"]) {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
          } else {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3> <span v-show="s_max">{{ support }}/{{ s_max }}</span>${property}</div></div>`);
          }
          vBind({
            el: `#sr${region}`,
            data: global.tauceti[support],
            filters: {
              filter() {
                return tauCetiModules[region].info.filter(...arguments);
              }
            }
          });
        } else {
          parent.append(`<div id="${region}" class="space"><div><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
        }
        popover(
          region,
          function() {
            return typeof tauCetiModules[region].info.desc === "string" ? tauCetiModules[region].info.desc : tauCetiModules[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        Object.keys(tauCetiModules[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(tauCetiModules, region, tech)) {
            let c_action = tauCetiModules[region][tech];
            setAction(c_action, "tauceti", tech);
          }
        });
        if (tauCetiModules[region].info.hasOwnProperty("extra")) {
          tauCetiModules[region].info.extra(region);
        }
      }
    });
  }
  function drawShipYard() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 5)) {
      return;
    }
    setOrbits();
    clearShipDrag();
    clearElement($("#dwarfShipYard"));
    if (global.space.hasOwnProperty("shipyard") && global.settings.showShipYard) {
      let yard = $(`#dwarfShipYard`);
      if (!global.space.shipyard.hasOwnProperty("blueprint")) {
        global.space.shipyard["blueprint"] = {
          class: "corvette",
          armor: "steel",
          weapon: "railgun",
          engine: "ion",
          power: "diesel",
          sensor: "radar",
          name: getRandomShipName()
        };
      }
      let plans = $(`<div id="shipPlans"></div>`);
      yard.append(plans);
      let shipStats = $(`<div class="stats"></div>`);
      plans.append(shipStats);
      shipStats.append(`<div class="registry"><span class="has-text-caution">${loc(`outer_shipyard_registry`)}</span>: <b-input v-model="b.name" maxlength="25" class="nameplate"></b-input></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`crew`)}</span> <span v-html="crewText()"></span></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`power`)}</span> <span v-html="powerText()"></span></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`firepower`)}</span> <span v-html="fireText()"></span></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`outer_shipyard_sensors`)}</span> <span v-html="sensorText()"></span></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`speed`)}</span> <span v-html="speedText()"></span></div>`);
      shipStats.append(`<div><span class="has-text-caution">${loc(`outer_shipyard_fuel`)}</span> <span v-html="fuelText()"></span></div>`);
      plans.append(`<div id="shipYardCosts" class="costList"></div>`);
      let options = $(`<div class="shipBayOptions"></div>`);
      plans.append(options);
      let shipConfig = {
        class: ["corvette", "frigate", "destroyer", "cruiser", "battlecruiser", "dreadnought", "explorer"],
        power: ["solar", "diesel", "fission", "fusion", "elerium"],
        weapon: ["railgun", "laser", "p_laser", "plasma", "phaser", "disruptor"],
        armor: ["steel", "alloy", "neutronium"],
        engine: ["ion", "tie", "pulse", "photon", "vacuum", "emdrive"],
        sensor: ["visual", "radar", "lidar", "quantum"]
      };
      Object.keys(shipConfig).forEach(function(k) {
        let values = ``;
        shipConfig[k].forEach(function(v, idx) {
          values += `<b-dropdown-item aria-role="listitem" v-on:click="setVal('${k}','${v}')" class="${k} a${idx}" data-val="${v}" v-show="avail('${k}','${idx}','${v}')">${loc(`outer_shipyard_${k}_${v}`)}</b-dropdown-item>`;
        });
        options.append(`<b-dropdown :triggers="['hover', 'click']" aria-role="list">
                <button class="button is-info" slot="trigger">
                    <span>${loc(`outer_shipyard_${k}`)}: {{ b.${k} | lbl('${k}') }}</span>
                </button>${values}
            </b-dropdown>`);
      });
      let assemble = $(`<div class="assemble"></div>`);
      assemble.append(`<button class="button is-info" slot="trigger" v-on:click="build()"><span>${loc("outer_shipyard_build")}</span></button>`);
      assemble.append(`<span><b-checkbox class="patrol" v-model="s.expand" v-on:input="redraw()">${loc("outer_shipyard_fleet_details")}</b-checkbox></span>`);
      assemble.append(`<span><b-checkbox class="patrol" v-model="s.sort" v-on:input="redraw()">${loc("outer_shipyard_fleet_sort")}</b-checkbox></span>`);
      plans.append(assemble);
      assemble.append(`<div><span>${loc(`outer_shipyard_park`, [planetName().dwarf])}</span><a href="#" class="solarMap" @click="trigModal">${loc(`outer_shipyard_map`)}</span></a>`);
      updateCosts();
      let modal = {
        template: '<div id="modalBox" class="modalBox"></div>'
      };
      vBind({
        el: "#shipPlans",
        data: {
          b: global.space.shipyard.blueprint,
          s: global.space.shipyard
        },
        methods: {
          setVal(b, v) {
            if (b === "class" && v === "explorer") {
              global.space.shipyard.blueprint.engine = "emdrive";
              global.space.shipyard.blueprint.weapon = "railgun";
              if (global.tech.syard_armor >= 3) {
                global.space.shipyard.blueprint.armor = "neutronium";
              }
              if (global.tech.syard_sensor >= 4) {
                global.space.shipyard.blueprint.sensor = "quantum";
              }
              if (global.tech.syard_power >= 4) {
                global.space.shipyard.blueprint.power = "elerium";
              }
            } else if (b === "class" && v !== "explorer" && global.space.shipyard.blueprint.class === "explorer") {
              global.space.shipyard.blueprint.engine = "ion";
            }
            global.space.shipyard.blueprint[b] = v;
            updateCosts();
          },
          avail(k, i, v) {
            if ((k === "class" || k === "engine") && global.tech["tauceti"] && (v === "emdrive" || v === "explorer")) {
              return true;
            } else if (global.space.shipyard.blueprint.class === "explorer") {
              if (k === "weapon") {
                return i === 1 ? true : false;
              } else if (k === "engine") {
                return i === 6 ? true : false;
              } else if (k === "sensor") {
                return i === 4 ? true : false;
              }
            }
            return global.tech[`syard_${k}`] > i ? true : false;
          },
          crewText() {
            return shipCrewSize(global.space.shipyard.blueprint);
          },
          powerText() {
            let power = shipPower(global.space.shipyard.blueprint);
            if (power < 0) {
              return `<span class="has-text-danger">${power}kW</span>`;
            }
            return `${power}kW`;
          },
          fireText() {
            return shipAttackPower(global.space.shipyard.blueprint);
          },
          sensorText() {
            return sensorRange(global.space.shipyard.blueprint) + "km";
          },
          speedText() {
            let speed = 1495978707e-1 / 225 / 24 / 3600 * shipSpeed(global.space.shipyard.blueprint);
            return Math.round(speed) + "km/s";
          },
          fuelText() {
            let fuel = shipFuelUse(global.space.shipyard.blueprint);
            if (fuel.res) {
              return `-${fuel.burn} ${global.resource[fuel.res].name}`;
            } else {
              return `N/A`;
            }
          },
          build() {
            if (shipPower(global.space.shipyard.blueprint) >= 0) {
              let raw = shipCosts(global.space.shipyard.blueprint);
              let costs = {};
              Object.keys(raw).forEach(function(res) {
                costs[res] = function() {
                  return raw[res];
                };
              });
              if (!(global.settings.qKey && keyMap.q) && payCosts(false, costs)) {
                let ship = deepClone(global.space.shipyard.blueprint);
                buildTPShip(ship, false);
              } else {
                let used = 0;
                for (let j = 0; j < global.queue.queue.length; j++) {
                  used += Math.ceil(global.queue.queue[j].q / global.queue.queue[j].qs);
                }
                if (used < global.queue.max) {
                  let blueprint = deepClone(global.space.shipyard.blueprint);
                  global.queue.queue.push({
                    id: `tp-ship-${Math.rand(0, 1e5)}`,
                    action: "tp-ship",
                    type: blueprint,
                    label: blueprint.name,
                    cna: false,
                    time: 0,
                    q: 1,
                    qs: 1,
                    t_max: 0,
                    bres: false
                  });
                  global.space.shipyard.blueprint.name = getRandomShipName();
                  buildQueue();
                }
              }
            }
          },
          trigModal() {
            this.$buefy.modal.open({
              parent: this,
              component: modal
            });
            let checkExist = setInterval(function() {
              if ($("#modalBox").length > 0) {
                clearInterval(checkExist);
                solarModal();
              }
            }, 50);
          },
          redraw() {
            drawShips();
          }
        },
        filters: {
          lbl(l, c) {
            return loc(`outer_shipyard_${c}_${l}`);
          }
        }
      });
      Object.keys(shipConfig).forEach(function(type) {
        for (let i = 0; i < $(`#shipPlans .${type}`).length; i++) {
          popover(
            `shipPlans${type}${i}`,
            function(obj) {
              let val = $(obj.this).attr(`data-val`);
              return loc(`outer_shipyard_${type}_${val}_desc`);
            },
            {
              elm: `#shipPlans .${type}.a${i}`,
              placement: "right"
            }
          );
        }
      });
      yard.append($(`<div id="shipList" class="sticky"></div>`));
      drawShips();
    }
  }
  function buildTPShipQueue(action) {
    if (payCosts(false, action.cost)) {
      buildTPShip(deepClone(action.bp, true));
      return true;
    }
    return false;
  }
  function TPShipDesc(parent, obj) {
    let ship = obj.type;
    let raw = shipCosts(ship);
    let costs = {};
    Object.keys(raw).forEach(function(res) {
      costs[res] = function() {
        return raw[res];
      };
    });
    var desc = $(`<div class="shipPopper"></div>`);
    var shipPattern = $(`<div class="divider">${loc(`outer_shipyard_class_${ship.class}`)} | ${loc(`outer_shipyard_engine_${ship.engine}`)} | ${loc(`outer_shipyard_weapon_${ship.weapon}`)} | ${loc(`outer_shipyard_power_${ship.power}`)} | ${loc(`outer_shipyard_sensor_${ship.sensor}`)}</div>`);
    parent.append(desc);
    desc.append(shipPattern);
    var cost = $('<div class="costList"></div>');
    desc.append(cost);
    let tc = timeCheck({ id: ship.name, cost: costs, doNotAdjustCost: true }, false, true);
    Object.keys(costs).forEach(function(res) {
      if (costs[res]() > 0) {
        var label = res === "Money" ? "$" : global.resource[res].name + ": ";
        var color = global.resource[res].amount >= costs[res]() ? "has-text-dark" : res === tc.r ? "has-text-danger" : "has-text-alert";
        cost.append($(`<div class="${color}" data-${res}="${costs[res]()}">${label}${sizeApproximation(costs[res](), 2)}</div>`));
      }
    });
    if (tc && tc["t"]) {
      desc.append($(`<div class="divider"></div><div id="popTimer" class="flair has-text-advanced">{{ t | timer }}</div>`));
      vBind({
        el: "#popTimer",
        data: tc,
        filters: {
          timer(t) {
            return loc("action_ready", [timeFormat(t)]);
          }
        }
      });
    }
    return desc;
  }
  function buildTPShip(ship, queue) {
    ship["location"] = "spc_dwarf";
    ship["xy"] = genXYcoord("spc_dwarf");
    ship["origin"] = deepClone(ship["xy"]);
    ship["destination"] = deepClone(ship["xy"]);
    ship["transit"] = 0;
    ship["dist"] = 0;
    ship["damage"] = 0;
    ship["fueled"] = false;
    if (ship.name.length === 0) {
      ship.name = getRandomShipName();
    }
    let num = 1;
    let name = ship.name;
    while (global.space.shipyard.ships.filter((s) => s.name === name).length > 0) {
      num++;
      name = ship.name + ` ${num}`;
    }
    ship.name = name;
    global.space.shipyard.ships.push(ship);
    drawShips();
    updateCosts();
    if (!queue) {
      global.space.shipyard.blueprint.name = getRandomShipName();
    }
  }
  function getRandomShipName() {
    let names2 = [
      "Trident",
      "Spacewolf",
      "Excalibur",
      "Neptune",
      "Deimos",
      "Phobos",
      "Enterprise",
      "Intrepid",
      "Daedalus",
      "Odyssey",
      "Endurance",
      "Horizon",
      "Hyperion",
      "Icarus",
      "Aurora",
      "Axiom",
      "Nemesis",
      "Normandy",
      "Orion",
      "Prometheus",
      "Vanguard",
      "Discovery",
      "Voyager",
      "Defiant",
      "Titan",
      "Liberty",
      "Destiny",
      "Phoenix",
      "Nautilus",
      "Barracuda",
      "Dolphin",
      "Cuttlefish",
      "Tiger Shark",
      "Stingray",
      "Swordfish",
      "Triton",
      "Dragon",
      "Scorpion",
      "Hagfish",
      "Marlin",
      "Galileo",
      "Raven",
      "Sarcophagus",
      "Excelsior",
      "Scimitar",
      "Vengeance",
      "Nomad",
      "Nova",
      "Olympus",
      "Aegis",
      "Agamemnon",
      "Charon",
      "Achilles",
      "Apollo",
      "Hermes",
      "Hydra",
      "Medusa",
      "Talos",
      "Zeus",
      "Heracles",
      "Cerberus",
      "Acheron",
      "Damocles",
      "Juno",
      "Persephone",
      "Solaris",
      "Victory",
      "Hawk",
      "Fury",
      "Razor",
      "Stinger",
      "Outrider",
      "Falcon",
      "Vulture",
      "Nirvana",
      "Retribution",
      "Swordbreaker",
      "Valkyrie",
      "Athena",
      "Avalon",
      "Merlin",
      "Argonaut",
      "Serenity",
      "Gunstar",
      "Ranger",
      "Tantive",
      "Cygnus",
      "Nostromo",
      "Reliant",
      "Narcissus",
      "Liberator",
      "Sulaco",
      "Infinity",
      "Resolute",
      "Wasp",
      "Hornet",
      "Independence",
      "Gilgamesh",
      "Midway",
      "Concordia",
      "Goliath",
      "Cosmos",
      "Express",
      "Tigers Claw",
      "Oberon",
      "Minnow",
      "Majestic",
      "Spartacus",
      "Colossi",
      "Vigilant",
      "Remorseless",
      "Caelestis",
      "Inquisitor",
      "Atlas",
      "Avenger",
      "Dauntless",
      "Nihilus",
      "Thanatos",
      "Stargazer",
      "Xyzzy",
      "Kraken",
      "Xerxes",
      "Spitfire",
      "McShipFace",
      "Monitor",
      "Merrimack",
      "Constitution",
      "Ghost",
      "Pequod",
      "Arcadia",
      "Corsair",
      "Inferno",
      "Jenny",
      "Revenge",
      "Red October",
      "Jackdaw",
      "Thorn",
      "Caleuche",
      "Valencia",
      "Ourang",
      "Deering",
      "Baychimo",
      "Octavius",
      "Joyita",
      "Lovibond",
      "Celeste",
      "Dutchman"
    ];
    let name = names2[Math.rand(0, names2.length)];
    if (global.space.shipyard.ships.filter((s) => s.name === name).length > 0) {
      name = randomWord();
    }
    return name;
  }
  function randomWord() {
    let syllables = [
      "al",
      "an",
      "ar",
      "as",
      "at",
      "ea",
      "ed",
      "en",
      "er",
      "es",
      "ha",
      "he",
      "hi",
      "in",
      "is",
      "it",
      "le",
      "me",
      "nd",
      "ne",
      "ng",
      "nt",
      "on",
      "or",
      "ou",
      "re",
      "se",
      "st",
      "te",
      "th",
      "ti",
      "to",
      "ve",
      "wa",
      "all",
      "and",
      "are",
      "but",
      "ent",
      "era",
      "ere",
      "eve",
      "for",
      "had",
      "hat",
      "hen",
      "her",
      "hin",
      "his",
      "ing",
      "ion",
      "ith",
      "not",
      "ome",
      "oul",
      "our",
      "sho",
      "ted",
      "ter",
      "tha",
      "the",
      "thi",
      "tio",
      "uld",
      "ver",
      "was",
      "wit",
      "you"
    ];
    let max = Math.rand(2, 5);
    let word = ``;
    for (let i = 0; i < max; i++) {
      word += syllables[Math.rand(0, syllables.length)];
    }
    return word.charAt(0).toUpperCase() + word.slice(1);
  }
  function updateCosts() {
    let costs = shipCosts(global.space.shipyard.blueprint);
    clearElement($(`#shipYardCosts`));
    Object.keys(costs).forEach(function(k) {
      if (k === "Money") {
        $(`#shipYardCosts`).append(`<span class="res-${k} has-text-success" data-${k}="${costs[k]}" data-ok="has-text-success">${global.resource[k].name}${sizeApproximation(costs[k])}</span>`);
      } else {
        $(`#shipYardCosts`).append(`<span> | </span><span class="res-${k} has-text-success" data-${k}="${costs[k]}" data-ok="has-text-success">${global.resource[k].name} ${sizeApproximation(costs[k])}</span>`);
      }
    });
  }
  function shipCrewSize(ship) {
    switch (ship.class) {
      case "corvette":
        return global.race["grenadier"] ? jobScale(1) : jobScale(2);
      case "frigate":
        return global.race["grenadier"] ? jobScale(2) : jobScale(3);
      case "destroyer":
        return global.race["grenadier"] ? jobScale(3) : jobScale(4);
      case "cruiser":
        return global.race["grenadier"] ? jobScale(4) : jobScale(6);
      case "battlecruiser":
        return global.race["grenadier"] ? jobScale(5) : jobScale(8);
      case "dreadnought":
        return global.race["grenadier"] ? jobScale(6) : jobScale(10);
      case "explorer":
        return global.race["grenadier"] ? jobScale(6) : jobScale(10);
    }
  }
  function shipPower(ship, wiki) {
    let watts = 0;
    let out_inflate = 1;
    let use_inflate = 1;
    switch (ship.class) {
      case "frigate":
        out_inflate = 1.1;
        use_inflate = 1.2;
        break;
      case "destroyer":
        out_inflate = 1.5;
        use_inflate = 1.65;
        break;
      case "cruiser":
        out_inflate = 2;
        use_inflate = 2.5;
        break;
      case "battlecruiser":
        out_inflate = 2.5;
        use_inflate = 3.5;
        break;
      case "dreadnought":
        out_inflate = 5;
        use_inflate = 6.5;
        break;
      case "explorer":
        out_inflate = 6;
        use_inflate = 2;
        break;
    }
    switch (ship.power) {
      case "solar":
        watts = Math.round(50 * out_inflate);
        break;
      case "diesel":
        watts = Math.round(100 * out_inflate);
        break;
      case "fission":
        watts = Math.round(150 * out_inflate);
        break;
      case "fusion":
        watts = Math.round((ship.class === "explorer" || wiki ? 174 : 175) * out_inflate);
        break;
      case "elerium":
        watts = Math.round(200 * out_inflate);
        break;
    }
    watts = Math.round(Math.max(watts, powerModifier(watts)));
    switch (ship.weapon) {
      case "railgun":
        watts -= Math.round(10 * use_inflate);
        break;
      case "laser":
        watts -= Math.round(30 * use_inflate);
        break;
      case "p_laser":
        watts -= Math.round(18 * use_inflate);
        break;
      case "plasma":
        watts -= Math.round(50 * use_inflate);
        break;
      case "phaser":
        watts -= Math.round(65 * use_inflate);
        break;
      case "disruptor":
        watts -= Math.round(100 * use_inflate);
        break;
    }
    switch (ship.engine) {
      case "ion":
        watts -= Math.round(25 * use_inflate);
        break;
      case "tie":
        watts -= Math.round(50 * use_inflate);
        break;
      case "pulse":
        watts -= Math.round(40 * use_inflate);
        break;
      case "photon":
        watts -= Math.round(75 * use_inflate);
        break;
      case "vacuum":
        watts -= Math.round(120 * use_inflate);
        break;
      case "emdrive":
        watts -= Math.round((ship.class !== "explorer" && !wiki ? 1024 : 515) * use_inflate);
        break;
    }
    switch (ship.sensor) {
      case "radar":
        watts -= Math.round(10 * use_inflate);
        break;
      case "lidar":
        watts -= Math.round(25 * use_inflate);
        break;
      case "quantum":
        watts -= Math.round(75 * use_inflate);
        break;
    }
    return watts;
  }
  function shipAttackPower(ship) {
    let rating = 0;
    switch (ship.weapon) {
      case "railgun":
        rating = 36;
        break;
      case "laser":
        rating = 64;
        break;
      case "p_laser":
        rating = 54;
        break;
      case "plasma":
        rating = 90;
        break;
      case "phaser":
        rating = 114;
        break;
      case "disruptor":
        rating = 156;
        break;
    }
    if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
      rating = Math.round(rating * 1.25);
    }
    switch (ship.class) {
      case "corvette":
        return rating;
      case "frigate":
        return Math.round(rating * 1.5);
      case "destroyer":
        return Math.round(rating * 2.75);
      case "cruiser":
        return Math.round(rating * 5.5);
      case "battlecruiser":
        return Math.round(rating * 10);
      case "dreadnought":
        return Math.round(rating * 22);
      case "explorer":
        return Math.round(rating * 1.2);
    }
  }
  function shipSpeed(ship) {
    let mass = 1;
    switch (ship.class) {
      case "corvette":
        mass = ship.armor === "neutronium" ? 1.1 : 1;
        break;
      case "frigate":
        mass = ship.armor === "neutronium" ? 1.35 : 1.25;
        break;
      case "destroyer":
        mass = ship.armor === "neutronium" ? 1.95 : 1.8;
        break;
      case "cruiser":
        mass = ship.armor === "neutronium" ? 3.5 : 3;
        break;
      case "battlecruiser":
        mass = ship.armor === "neutronium" ? 4.8 : 4;
        break;
      case "dreadnought":
        mass = ship.armor === "neutronium" ? 7.5 : 6;
        break;
      case "explorer":
        mass = 1;
        break;
    }
    let boost = ship.location === "spc_dwarf" && p_on["m_relay"] && ship.transit === 0 && global.space["m_relay"] && global.space.m_relay.charged >= 1e4 ? 3 : 1;
    switch (ship.engine) {
      case "ion":
        return 12 / mass * boost;
      case "tie":
        return 22 / mass * boost;
      case "pulse":
        return 18 / mass * boost;
      case "photon":
        return 30 / mass * boost;
      case "vacuum":
        return 42 / mass * boost;
      case "emdrive":
        return 37500 / mass * boost;
    }
  }
  function shipFuelUse(ship) {
    let res = false;
    let burn = 0;
    switch (ship.power) {
      case "diesel":
        res = "Oil";
        burn = 8;
        break;
      case "fission":
        res = "Uranium";
        burn = 0.5;
        break;
      case "fusion":
        res = "Helium_3";
        burn = 12;
        break;
      case "elerium":
        res = "Elerium";
        burn = 1;
        break;
    }
    switch (ship.class) {
      case "frigate":
        burn *= 1.25;
        break;
      case "destroyer":
        burn *= 1.5;
        break;
      case "cruiser":
        burn *= 2;
        break;
      case "battlecruiser":
        burn *= 3;
        break;
      case "dreadnought":
        burn *= 5;
        break;
      case "explorer":
        burn *= 25;
        break;
    }
    return {
      res,
      burn: +burn.toFixed(2)
    };
  }
  function shipCosts(bp) {
    let costs = {};
    let h_inflate = 1;
    let p_inflate = 1;
    let creep_factor = 1;
    switch (bp.class) {
      case "corvette":
        costs["Money"] = 25e5;
        costs["Aluminium"] = 5e5;
        h_inflate = 1;
        p_inflate = 1;
        creep_factor = 2;
        break;
      case "frigate":
        costs["Money"] = 5e6;
        costs["Aluminium"] = 125e4;
        h_inflate = 1.1;
        p_inflate = 1.09;
        creep_factor = 1.5;
        break;
      case "destroyer":
        costs["Money"] = 15e6;
        costs["Aluminium"] = 35e5;
        h_inflate = 1.2;
        p_inflate = 1.18;
        creep_factor = 1.2;
        break;
      case "cruiser":
        costs["Money"] = 5e7;
        costs["Adamantite"] = 1e6;
        h_inflate = 1.3;
        p_inflate = 1.25;
        break;
      case "battlecruiser":
        costs["Money"] = 125e6;
        costs["Adamantite"] = 26e5;
        h_inflate = 1.35;
        p_inflate = 1.3;
        creep_factor = 0.8;
        break;
      case "dreadnought":
        costs["Money"] = 5e8;
        costs["Adamantite"] = 8e6;
        h_inflate = 1.4;
        p_inflate = 1.35;
        creep_factor = 0.5;
        break;
      case "explorer":
        costs["Money"] = 8e8;
        costs["Adamantite"] = 95e5;
        h_inflate = 1.45;
        p_inflate = 1;
        break;
    }
    switch (bp.armor) {
      case "steel":
        costs["Steel"] = Math.round(35e4 ** h_inflate);
        break;
      case "alloy":
        costs["Alloy"] = Math.round(25e4 ** h_inflate);
        break;
      case "neutronium":
        costs["Neutronium"] = Math.round(1e4 ** h_inflate);
        break;
    }
    switch (bp.engine) {
      case "ion":
        costs["Titanium"] = Math.round(75e3 ** p_inflate);
        break;
      case "tie":
        costs["Titanium"] = Math.round(15e4 ** p_inflate);
        break;
      case "pulse":
        costs["Titanium"] = Math.round(125e3 ** p_inflate);
        break;
      case "photon":
        costs["Titanium"] = Math.round(21e4 ** p_inflate);
        break;
      case "vacuum":
        costs["Titanium"] = Math.round(3e5 ** p_inflate);
        break;
      case "emdrive":
        costs["Titanium"] = Math.round(125e4 ** p_inflate);
        break;
    }
    let alt_mat = ["dreadnought", "explorer"].includes(bp.class) ? true : false;
    switch (bp.power) {
      case "solar":
        costs[alt_mat ? "Orichalcum" : "Copper"] = Math.round(4e4 ** h_inflate);
        costs["Iridium"] = Math.round(15e3 ** p_inflate);
        break;
      case "diesel":
        costs[alt_mat ? "Orichalcum" : "Copper"] = Math.round(4e4 ** h_inflate);
        costs["Iridium"] = Math.round(15e3 ** p_inflate);
        break;
      case "fission":
        costs[alt_mat ? "Orichalcum" : "Copper"] = Math.round(5e4 ** h_inflate);
        costs["Iridium"] = Math.round(3e4 ** p_inflate);
        break;
      case "fusion":
        costs[alt_mat ? "Orichalcum" : "Copper"] = Math.round(5e4 ** h_inflate);
        costs["Iridium"] = Math.round(4e4 ** p_inflate);
        break;
      case "elerium":
        costs[alt_mat ? "Orichalcum" : "Copper"] = Math.round(6e4 ** h_inflate);
        costs["Iridium"] = Math.round(55e3 ** p_inflate);
        break;
    }
    if (bp.class !== "explorer") {
      switch (bp.sensor) {
        case "radar":
          costs["Money"] = Math.round(costs["Money"] ** 1.04);
          break;
        case "lidar":
          costs["Money"] = Math.round(costs["Money"] ** 1.08);
          break;
        case "quantum":
          costs["Money"] = Math.round(costs["Money"] ** 1.12);
          break;
      }
    }
    switch (bp.weapon) {
      case "railgun":
        costs["Iron"] = Math.round(25e3 ** h_inflate);
        break;
      case "laser":
        costs["Iridium"] = Math.round(costs["Iridium"] ** 1.05);
        costs["Nano_Tube"] = Math.round(12e3 ** h_inflate);
        break;
      case "p_laser":
        costs["Iridium"] = Math.round(costs["Iridium"] ** 1.035);
        costs["Nano_Tube"] = Math.round(12e3 ** h_inflate);
        break;
      case "plasma":
        costs["Iridium"] = Math.round(costs["Iridium"] ** 1.1);
        costs["Nano_Tube"] = Math.round(2e4 ** h_inflate);
        break;
      case "phaser":
        costs["Iridium"] = Math.round(costs["Iridium"] ** 1.15);
        costs["Quantium"] = Math.round(18e3 ** h_inflate);
        break;
      case "disruptor":
        costs["Iridium"] = Math.round(costs["Iridium"] ** 1.2);
        costs["Quantium"] = Math.round(35e3 ** h_inflate);
        break;
    }
    if (bp.class === "explorer") {
      costs["Iron"] *= 10;
      costs["Titanium"] *= 5;
      costs["Iridium"] *= 50;
    }
    let typeCount = 0;
    global.space.shipyard.ships.forEach(function(ship) {
      if (ship.class === bp.class) {
        typeCount++;
      }
    });
    let creep = 1 + (typeCount - 2) / 25 * creep_factor;
    Object.keys(costs).forEach(function(res) {
      if (bp.class === "explorer") {
        costs[res] = Math.ceil(costs[res] * ((typeCount + 1) * 3));
      } else {
        if (typeCount < 2) {
          costs[res] = Math.ceil(costs[res] * (typeCount === 0 ? 0.75 : 0.9));
        } else if (typeCount > 2) {
          costs[res] = Math.ceil(costs[res] * creep);
        }
      }
    });
    return costs;
  }
  function clearShipDrag() {
    let el = $("#shipList")[0];
    if (el) {
      let sort = Sortable.get(el);
      if (sort) {
        sort.destroy();
      }
    }
  }
  function dragShipList() {
    let el = $("#shipList")[0];
    Sortable.create(el, {
      onEnd(e) {
        let order = global.space.shipyard.ships;
        order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
        global.space.shipyard.ships = order;
        drawShips();
      }
    });
  }
  var shipyardRanks = {
    // Lower number -> higher in the auto-sorted list
    location: {
      spc_dwarf: 1,
      spc_moon: 2,
      spc_red: 3,
      spc_belt: 4,
      spc_gas: 5,
      spc_gas_moon: 6,
      spc_titan: 7,
      spc_enceladus: 8,
      spc_triton: 9,
      spc_kuiper: 10,
      spc_eris: 11,
      tauceti: 12
    },
    class: {
      corvette: 1,
      frigate: 2,
      destroyer: 3,
      cruiser: 4,
      battlecruiser: 5,
      dreadnought: 6,
      explorer: 7
    },
    engine: {
      ion: 1,
      tie: 3,
      pulse: 2,
      photon: 4,
      vacuum: 5,
      emdrive: 6
    },
    power: {
      solar: 1,
      diesel: 2,
      fission: 3,
      fusion: 4,
      elerium: 5
    }
  };
  function shipyardShipCompare(a, b) {
    return (shipyardRanks.location[a.location] ?? 0) - (shipyardRanks.location[b.location] ?? 0) || a.transit - b.transit || (shipyardRanks.class[a.class] ?? 0) - (shipyardRanks.class[b.class] ?? 0) || (shipyardRanks.engine[a.engine] ?? 0) - (shipyardRanks.engine[b.engine] ?? 0) || (shipyardRanks.power[a.power] ?? 0) - (shipyardRanks.power[b.power] ?? 0);
  }
  function drawShips() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 5)) {
      return;
    }
    clearShipDrag();
    clearElement($("#shipList"));
    if (global.tech["isolation"]) {
      return;
    }
    let list = $("#shipList");
    if (global.space.shipyard.sort) {
      global.space.shipyard.ships = global.space.shipyard.ships.sort(shipyardShipCompare);
    }
    const spaceRegions = spaceTech();
    for (let i = 0; i < global.space.shipyard.ships.length; i++) {
      let ship = global.space.shipyard.ships[i];
      if (!ship["xy"]) {
        ship["xy"] = genXYcoord(ship.location);
      }
      if (!ship.hasOwnProperty("dist")) {
        ship["dist"] = ship["transit"];
      }
      if (!ship.hasOwnProperty("origin")) {
        ship["origin"] = ship["xy"];
      }
      if (!ship.hasOwnProperty("destination")) {
        ship["destination"] = genXYcoord(ship.location);
      }
      let values = ``;
      if (ship.class === "explorer") {
        if (ship.location !== "tauceti") {
          let name = loc("tech_era_tauceti");
          values += `<b-dropdown-item aria-role="listitem" v-on:click="setLoc('tauceti',${i})" class="tauceti">${name}</b-dropdown-item>`;
        }
      } else {
        Object.keys(spaceRegions).forEach(function(region) {
          if (ship.location !== region) {
            if (spaceRegions[region].info.syndicate() || region === "spc_dwarf") {
              if (!global.race["orbit_decayed"] || global.race["orbit_decayed"] && region !== "spc_moon") {
                let name = typeof spaceRegions[region].info.name === "string" ? spaceRegions[region].info.name : spaceRegions[region].info.name();
                values += `<b-dropdown-item aria-role="listitem" v-on:click="setLoc('${region}',${i})" class="${region}">${name}</b-dropdown-item>`;
              }
            }
          }
        });
      }
      let location = ship.location === "tauceti" ? loc("tech_era_tauceti") : typeof spaceRegions[ship.location].info.name === "string" ? spaceRegions[ship.location].info.name : spaceRegions[ship.location].info.name();
      let dispatch = `<b-dropdown id="ship${i}loc" :triggers="['hover', 'click']" aria-role="list" scrollable position="is-bottom-left">
            <button class="button is-info" slot="trigger">
                <span>${location}</span>
            </button>${values}
        </b-dropdown>`;
      if (global.space.shipyard.expand) {
        let ship_class = `${loc(`outer_shipyard_engine_${ship.engine}`)} ${loc(`outer_shipyard_class_${ship.class}`)}`;
        let desc = $(`<div id="shipReg${i}" class="shipRow ship${i}"></div>`);
        let row1 = $(`<div class="row1"><span class="name has-text-caution">${ship.name}</span> <span v-show="scrapAllowed(${i})">| </span><a class="scrap${i}" v-show="scrapAllowed(${i})" @click="scrap(${i})" role="button">${loc(`outer_shipyard_scrap`)}</a> | <span class="has-text-warning">${ship_class}</span> | <span class="has-text-danger">${loc(`outer_shipyard_weapon_${ship.weapon}`)}</span> | <span class="has-text-warning">${loc(`outer_shipyard_power_${ship.power}`)}</span> | <span class="has-text-warning">${loc(`outer_shipyard_armor_${ship.armor}`)}</span> | <span class="has-text-warning">${loc(`outer_shipyard_sensor_${ship.sensor}`)}</span></div>`);
        let row2 = $(`<div class="row2"></div>`);
        let row3 = $(`<div class="row3"></div>`);
        let row4 = $(`<div class="location">${dispatch}</div>`);
        row2.append(`<span class="has-text-warning">${loc(`crew`)}</span> <span class="pad" v-html="crewText(${i})"></span>`);
        row2.append(`<span class="has-text-warning">${loc(`firepower`)}</span> <span class="pad" v-html="fireText(${i})"></span>`);
        row2.append(`<span class="has-text-warning">${loc(`outer_shipyard_sensors`)}</span> <span class="pad" v-html="sensorText(${i})"></span>`);
        row2.append(`<span class="has-text-warning">${loc(`speed`)}</span> <span class="pad" v-html="speedText(${i})"></span>`);
        row2.append(`<span class="has-text-warning">${loc(`outer_shipyard_fuel`)}</span> <span class="pad" v-bind:class="{ 'has-text-danger': !fueled }" v-html="fuelText(${i})"></span>`);
        row2.append(`<span class="has-text-warning">${loc(`outer_shipyard_hull`)}</span> <span class="pad" v-bind:class="hullDamage(${i})" v-html="hullText(${i})"></span>`);
        row3.append(`<span v-show="show(${i})" class="has-text-caution" v-html="dest(${i})"></span>`);
        desc.append(row1);
        desc.append(row2);
        desc.append(row3);
        desc.append(row4);
        list.append(desc);
      } else {
        let desc = $(`<div id="shipReg${i}" class="shipRow ship${i} compact"></div>`);
        let row1 = $(`<div class="row1"></div>`);
        let row3 = $(`<div class="row3"></div>`);
        let row4 = $(`<div class="location">${dispatch}</div>`);
        row1.append(`<span class="name has-text-caution">${ship.name}</span> | `);
        row1.append(`<span class="has-text-warning">${loc(`firepower`)}</span> <span class="pad" v-html="fireText(${i})"></span>`);
        row1.append(`<span class="has-text-warning">${loc(`outer_shipyard_sensors`)}</span> <span class="pad" v-html="sensorText(${i})"></span>`);
        row1.append(`<span class="has-text-warning">${loc(`speed`)}</span> <span class="pad" v-html="speedText(${i})"></span>`);
        row1.append(`<span class="has-text-warning">${loc(`outer_shipyard_fuel`)}</span> <span class="pad" v-bind:class="{ 'has-text-danger': !fueled }" v-html="fuelText(${i})"></span>`);
        row1.append(`<span class="has-text-warning">${loc(`outer_shipyard_hull`)}</span> <span class="pad" v-bind:class="hullDamage(${i})" v-html="hullText(${i})"></span>`);
        row3.append(`<span v-show="show(${i})" class="has-text-caution" v-html="dest(${i})"></span>`);
        desc.append(row1);
        desc.append(row3);
        desc.append(row4);
        list.append(desc);
      }
      vBind({
        el: `#shipReg${i}`,
        data: global.space.shipyard.ships[i],
        methods: {
          scrap(id) {
            if (global.space.shipyard.ships[id] && global.space.shipyard.ships[id].location === "spc_dwarf") {
              global.space.shipyard.ships.splice(id, 1);
              drawShips();
              updateCosts();
            }
          },
          scrapAllowed(id) {
            if (global.space.shipyard.ships[id] && global.space.shipyard.ships[id].location === "spc_dwarf") {
              return true;
            }
            return false;
          },
          setLoc(l, id) {
            let ship2 = global.space.shipyard.ships[id];
            if (l !== ship2.location) {
              let crew = shipCrewSize(ship2);
              let manned = ship2.transit > 0 || ship2.location !== "spc_dwarf";
              if (manned || global.civic.garrison.workers - global.civic.garrison.crew >= crew) {
                let dest = calcLandingPoint(ship2, l);
                let distance = transferWindow(ship2.xy, dest);
                let speed = shipSpeed(ship2);
                ship2.location = l;
                ship2.transit = Math.round(distance / speed);
                ship2.dist = Math.round(distance / speed);
                ship2.origin = deepClone(ship2.xy);
                ship2.destination = { x: dest.x, y: dest.y };
                if (!manned) {
                  global.civic.garrison.crew += crew;
                }
                drawShips();
                clearPopper(`ship${id}loc${l}`);
              }
            }
          },
          crewText(id) {
            return shipCrewSize(global.space.shipyard.ships[id]);
          },
          fireText(id) {
            return shipAttackPower(global.space.shipyard.ships[id]);
          },
          sensorText(id) {
            return sensorRange(global.space.shipyard.ships[id]) + "km";
          },
          speedText(id) {
            let speed = 1495978707e-1 / 225 / 24 / 3600 * shipSpeed(global.space.shipyard.ships[id]);
            return Math.round(speed) + "km/s";
          },
          fuelText(id) {
            let fuel = shipFuelUse(global.space.shipyard.ships[id]);
            if (fuel.res) {
              return `${fuel.burn} ${global.resource[fuel.res].name}/s`;
            } else {
              return `N/A`;
            }
          },
          hullText(id) {
            return `${100 - global.space.shipyard.ships[id].damage}%`;
          },
          hullDamage(id) {
            if (global.space.shipyard.ships[id].damage <= 10) {
              return `has-text-success`;
            } else if (global.space.shipyard.ships[id].damage >= 40 && global.space.shipyard.ships[id].damage < 65) {
              return `has-text-caution`;
            } else if (global.space.shipyard.ships[id].damage >= 65) {
              return `has-text-danger`;
            }
            return ``;
          },
          dest(id) {
            let name = ship.class === "explorer" ? loc("tech_era_tauceti") : typeof spaceRegions[global.space.shipyard.ships[id].location].info.name === "string" ? spaceRegions[global.space.shipyard.ships[id].location].info.name : spaceRegions[global.space.shipyard.ships[id].location].info.name();
            return loc(`outer_shipyard_arrive`, [
              name,
              global.space.shipyard.ships[id].transit
            ]);
          },
          show(id) {
            return global.space.shipyard.ships[id].transit > 0 ? true : false;
          }
        }
      });
      if (ship.class === "explorer") {
        if (ship.location !== "tauceti") {
          popover(
            `ship${i}loctauceti`,
            function() {
              return loc(`transit_time`, [Math.round(transferWindow(ship.xy, calcLandingPoint(ship, "tauceti")) / shipSpeed(ship))]);
            },
            {
              elm: `#ship${i}loc .tauceti`,
              placement: "left"
            }
          );
        }
      } else {
        Object.keys(spaceRegions).forEach(function(region) {
          if (spaceRegions[region].info.syndicate() || region === "spc_dwarf") {
            if (ship.location !== region) {
              popover(
                `ship${i}loc${region}`,
                function() {
                  return loc(`transit_time`, [Math.round(transferWindow(ship.xy, calcLandingPoint(ship, region)) / shipSpeed(ship))]);
                },
                {
                  elm: `#ship${i}loc .${region}`,
                  placement: "left"
                }
              );
            }
          }
        });
      }
    }
    dragShipList();
  }
  function calcLandingPoint(ship, planet) {
    if (spacePlanetStats[planet].orbit === -2) {
      return genXYcoord(planet);
    }
    let ship_dist = Math.sqrt((ship.xy.x - xShift(planet)) ** 2 + ship.xy.y ** 2);
    let ship_speed = shipSpeed(ship) / 225;
    let width = xPosition(1, planet);
    let cross1_dist = Math.abs(ship_dist - spacePlanetStats[planet].dist);
    let cross2_dist = Math.abs(ship_dist + spacePlanetStats[planet].dist);
    let cross1w_dist = Math.abs(ship_dist - spacePlanetStats[planet].dist * width);
    let cross2w_dist = Math.abs(ship_dist + spacePlanetStats[planet].dist * width);
    let cross1_days = Math.floor(Math.min(cross1_dist, cross1w_dist, cross2_dist, cross2w_dist) / ship_speed);
    let cross2_days = Math.ceil(Math.max(cross1_dist, cross1w_dist, cross2_dist, cross2w_dist) / ship_speed);
    if (ship_dist >= spacePlanetStats[planet].dist && ship_dist <= spacePlanetStats[planet].dist * width) {
      cross1_days = 0;
    }
    let planet_orbit = spacePlanetStats[planet].orbit === -1 ? orbitLength() : spacePlanetStats[planet].orbit;
    let planet_speed = 360 / planet_orbit;
    let planet_degree = (global.space.position[planet] + cross1_days * planet_speed) % 360;
    let rads = Math.PI / 180;
    for (let i = cross1_days; i <= cross2_days; i++) {
      let planet_x = xPosition(Math.cos(planet_degree * rads) * spacePlanetStats[planet].dist, planet);
      planet_x += xShift(planet);
      let planet_y = Math.sin(planet_degree * rads) * spacePlanetStats[planet].dist;
      let time = Math.sqrt((planet_x - ship.xy.x) ** 2 + (planet_y - ship.xy.y) ** 2) / ship_speed;
      if (time <= i) {
        return { x: planet_x, y: planet_y };
      }
      planet_degree = (planet_degree + planet_speed) % 360;
    }
    return genXYcoord(planet);
  }
  function syndicate(region, extra) {
    if (!global.tech["isolation"] && global.tech["syndicate"] && global.race["truepath"] && global.space["syndicate"] && global.space.syndicate.hasOwnProperty(region)) {
      let divisor = 1e3;
      let rival = 0;
      if (global.civic.foreign.gov3.hstl < 10) {
        rival = 250 - 25 * global.civic.foreign.gov3.hstl;
      } else if (global.civic.foreign.gov3.hstl > 60) {
        rival = -13 * (global.civic.foreign.gov3.hstl - 60);
      }
      switch (region) {
        case "spc_home":
        case "spc_moon":
        case "spc_red":
        case "spc_hell":
          divisor = 1250 + rival;
          break;
        case "spc_gas":
        case "spc_gas_moon":
        case "spc_belt":
          divisor = 1020 + rival;
          break;
        case "spc_titan":
        case "spc_enceladus":
          divisor = actions.space[region].info.syndicate_cap();
          break;
        case "spc_triton":
        case "spc_kuiper":
        case "spc_eris":
          divisor = actions.space[region].info.syndicate_cap();
          break;
      }
      let piracy2 = global.space.syndicate[region];
      if (global.race["chicken"]) {
        piracy2 *= 1 + traits.chicken.vars()[1] / 100;
        piracy2 = Math.round(piracy2);
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.f) {
        piracy2 *= 1 - traits.ocular_power.vars()[1] / 500;
        piracy2 = Math.round(piracy2);
      }
      let patrol = 0;
      let sensor = 0;
      let overkill = 0;
      if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
        global.space.shipyard.ships.forEach(function(ship) {
          if (ship.location === region && ship.transit === 0 && ship.fueled) {
            let rating = shipAttackPower(ship);
            patrol += ship.damage > 0 ? Math.round(rating * (100 - ship.damage) / 100) : rating;
            sensor += sensorRange(ship);
          }
        });
        if (region === "spc_enceladus" && Math.min(support_on["operating_base"], p_on["operating_base"]) > 0) {
          let active = Math.min(support_on["operating_base"], p_on["operating_base"]);
          patrol += active * 50;
        } else if (region === "spc_titan" && p_on["sam"] > 0) {
          patrol += p_on["sam"] * 25;
        } else if (region === "spc_triton" && p_on["fob"] > 0) {
          patrol += 500;
          sensor += 10;
        }
        if (sensor > 100) {
          sensor = Math.round((sensor - 100) / (sensor - 100 + 200) * 100) + 100;
        }
        patrol = Math.round(patrol * ((sensor + 25) / 125));
        if (patrol > piracy2) {
          overkill = patrol - piracy2;
        }
        piracy2 = piracy2 - patrol > 0 ? piracy2 - patrol : 0;
      }
      if (extra) {
        return {
          p: 1 - +(piracy2 / divisor).toFixed(4),
          r: piracy2,
          s: sensor,
          o: overkill
        };
      }
      return 1 - +(piracy2 / divisor).toFixed(4);
    }
    if (extra) {
      return { p: 1, r: 0, s: 0, o: 0 };
    }
    return 1;
  }
  function sensorRange(s) {
    let hf = 1;
    switch (s.class) {
      case "corvette":
      case "frigate":
        hf = 2;
        break;
      case "destroyer":
      case "cruiser":
        hf = 1.5;
        break;
      case "explorer":
        hf = 5;
        break;
      default:
        hf = 1;
        break;
    }
    switch (s.sensor) {
      case "visual":
        return 1;
      case "radar":
        return 10 * hf;
      case "lidar":
        return 18 * hf;
      case "quantum":
        return 32 * hf;
    }
  }
  function tritonWar() {
    if (global.space["fob"]) {
      if (global.space.fob.enemy <= 1e3) {
        let upper = global.tech["outer"] && global.tech.outer >= 4 ? 125 : 100;
        global.space.fob.enemy += Math.rand(25, upper);
      }
      let wound_cap = Math.ceil(jobScale(global.space.fob.enemy) / 5);
      let wounded = global.civic.garrison.wounded - garrisonSize();
      if (wounded < 0) {
        wounded = 0;
      }
      let defense = armyRating(global.space.fob.troops, "army", wounded);
      let died = Math.rand(0, wounded + 1);
      soldierDeath(died);
      global.civic.garrison.wounded -= died;
      let kills = Math.min(Math.rand(0, defense), global.space.fob.enemy);
      global.space.fob.enemy -= kills;
      if (global.space.fob.enemy < 0) {
        global.space.fob.enemy = 0;
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
        global.race.ocularPowerConfig.ds += Math.round(kills * traits.ocular_power.vars()[1]);
      }
      let hurt = Math.rand(0, global.space.fob.troops + 1);
      if (hurt > wound_cap) {
        hurt = wound_cap;
      }
      if (global.race["armored"]) {
        hurt -= jobScale(1);
      }
      if (global.race["scales"]) {
        hurt -= jobScale(1);
      }
      if (global.tech["armor"]) {
        hurt -= jobScale(global.tech["armor"]);
      }
      if (hurt < 0) {
        hurt = 0;
      }
      if (global.race["revive"] && died > 0) {
        let revive = Math.round(Math.rand(0, died + 1));
        global.civic.garrison.workers += revive;
      }
      global.civic.garrison.wounded += hurt;
      if (global.civic.garrison.wounded > garrisonSize(false, { nofob: true })) {
        global.civic.garrison.wounded = garrisonSize(false, { nofob: true });
      }
      {
        let wounded2 = global.civic.garrison.wounded - garrisonSize();
        if (wounded2 < 0) {
          wounded2 = 0;
        }
        let danger = global.space.fob.enemy - armyRating(global.space.fob.troops, "army", wounded2);
        if (danger <= 0 && global.space.crashed_ship.count < 100) {
          global.space.crashed_ship.count++;
        } else if (danger > 0 && global.space.crashed_ship.count > 0) {
          global.space.crashed_ship.count--;
        }
        if (global.space.crashed_ship.count === 100) {
          global.resource.Cipher.display = true;
        }
      }
    }
  }
  function erisWar() {
    if (global.space["digsite"]) {
      if (global.space.digsite.enemy <= 1e4) {
        let upper = 250;
        global.space.digsite.enemy += Math.rand(25, upper);
      }
      let offense = armyRating(support_on["shock_trooper"], "army", 0);
      if (support_on["tank"]) {
        offense += support_on["tank"] * 100;
      }
      offense *= syndicate("spc_eris");
      global.space.digsite.enemy -= Math.rand(0, offense);
      if (global.space.digsite.enemy < 0) {
        global.space.digsite.enemy = 0;
      } else if (global.space.digsite.enemy > 1e4) {
        global.space.digsite.enemy = 1e4;
      }
      global.space.digsite.count = Math.floor(100 - global.space.digsite.enemy / 100);
    }
  }
  var spacePlanetStats = {
    spc_sun: { dist: 0, orbit: 0, size: 2 },
    spc_home: { dist: 1, orbit: -1, size: 0.6 },
    spc_moon: { dist: 1.01, orbit: -1, size: 0.1, moon: true },
    spc_red: { dist: 1.524, orbit: 687, size: 0.5 },
    spc_hell: { dist: 0.4, orbit: 88, size: 0.4 },
    spc_venus: { dist: 0.7, orbit: 225, size: 0.5 },
    spc_gas: { dist: 5.203, orbit: 4330, size: 1.25 },
    spc_gas_moon: { dist: 5.204, orbit: 4330, size: 0.2, moon: true },
    spc_belt: { dist: 2.7, orbit: 1642, size: 0.5, belt: true },
    spc_dwarf: { dist: 2.77, orbit: 1682, size: 0.5 },
    spc_saturn: { dist: 9.539, orbit: 10751, size: 1.1 },
    spc_titan: { dist: 9.536, orbit: 10751, size: 0.2, moon: true },
    spc_enceladus: { dist: 9.542, orbit: 10751, size: 0.1, moon: true },
    spc_uranus: { dist: 19.8, orbit: 30660, size: 1 },
    spc_neptune: { dist: 30.08, orbit: 60152, size: 1 },
    spc_triton: { dist: 30.1, orbit: 60152, size: 0.1, moon: true },
    spc_kuiper: { dist: 39.5, orbit: 90498, size: 0.5, belt: true },
    spc_eris: { dist: 68, orbit: 204060, size: 0.5 },
    tauceti: { dist: 752568.8, orbit: -2, size: 2 }
  };
  function setOrbits() {
    if (!global.space["position"]) {
      global.space["position"] = {};
    }
    Object.keys(spacePlanetStats).forEach(function(o) {
      if (!global.space.position.hasOwnProperty(o)) {
        global.space.position[o] = Math.rand(0, 360);
      }
    });
    global.space.position.spc_home = global.space.position.spc_moon;
    global.space.position.spc_gas_moon = global.space.position.spc_gas;
    global.space.position.spc_titan = global.space.position.spc_enceladus;
    global.space.position.spc_saturn = global.space.position.spc_titan;
    global.space.position.spc_neptune = global.space.position.spc_triton;
  }
  function genXYcoord(planet) {
    let cx = xPosition(+Math.cos(global.space.position[planet] * (Math.PI / 180)).toFixed(5) * spacePlanetStats[planet].dist, planet);
    let cy = +Math.sin(global.space.position[planet] * (Math.PI / 180)).toFixed(5) * spacePlanetStats[planet].dist;
    cx += xShift(planet);
    return { x: cx, y: cy };
  }
  function transferWindow(p1, p2) {
    return Math.ceil(Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2) * 225);
  }
  function tpStorageMultiplier(type, heavy, wiki) {
    let multiplier = 1;
    if (global.race["pack_rat"]) {
      multiplier *= 1 + traits.pack_rat.vars()[1] / 100;
    }
    if (global.stats.achieve["blackhole"]) {
      multiplier *= 1 + global.stats.achieve.blackhole.l * 0.05;
    }
    if (global.tech["world_control"]) {
      multiplier *= 3;
    }
    switch (type) {
      case "storehouse": {
        let titan_spaceport_on = wiki ? global.space?.titan_spaceport?.on ?? 0 : p_on["titan_spaceport"];
        if (titan_spaceport_on) {
          multiplier *= 1 + titan_spaceport_on * 0.25;
        }
        if (heavy && global.tech["shelving"]) {
          multiplier *= 2;
        }
        if (global.tech["shelving"] && global.tech.shelving >= 3) {
          multiplier *= 1.5;
        }
      }
      case "repository":
        {
          if (global.tech["isolation"]) {
            multiplier *= 3;
            if (global.tech["tp_depot"]) {
              multiplier *= 1 + global.tech["tp_depot"] / 20;
            }
          }
        }
        break;
    }
    return multiplier;
  }
  function jumpGateShutdown() {
    let inactive = { city: {}, space: {}, ships: [] };
    inactive.ships = [...global.space.shipyard.ships];
    global.space.shipyard.ships = [];
    global.settings.spaceTabs = 6;
    global.settings.showSpace = false;
    global.settings.showOuter = false;
    global.settings.showCity = false;
    global.settings.showShipYard = false;
    if (global.settings.govTabs === 5) {
      global.settings.govTabs = 0;
    }
    clearShipDrag();
    clearElement($("#shipList"));
    Object.keys(actions.city).forEach(function(k) {
      if (global.city.hasOwnProperty(k) && global.city[k].hasOwnProperty("count")) {
        if (global.race["hooved"]) {
          if (actions.city[k].cost?.hasOwnProperty("Horseshoe")) {
            global.race["shoecnt"] -= actions.city[k].cost.Horseshoe() * global.city[k].count;
          }
        }
        inactive.city[k] = { c: global.city[k].count };
        global.city[k].count = 0;
        if (global.city[k].hasOwnProperty("on")) {
          inactive.city[k]["o"] = global.city[k].on;
          global.city[k].on = 0;
        }
      }
    });
    [
      "spc_home",
      "spc_moon",
      "spc_red",
      "spc_hell",
      "spc_sun",
      "spc_gas",
      "spc_gas_moon",
      "spc_belt",
      "spc_dwarf",
      "spc_titan",
      "spc_enceladus",
      "spc_triton",
      "spc_kuiper",
      "spc_eris"
    ].forEach(function(sector) {
      Object.keys(actions.space[sector]).forEach(function(k) {
        if (global.space.hasOwnProperty(k) && global.space[k].hasOwnProperty("count")) {
          if (global.race["hooved"]) {
            if (actions.space[sector][k].cost?.hasOwnProperty("Horseshoe")) {
              global.race["shoecnt"] -= actions.space[sector][k].cost.Horseshoe() * global.space[k].count;
            }
          }
          inactive.space[k] = { c: global.space[k].count };
          global.space[k].count = 0;
          if (global.space[k].hasOwnProperty("on")) {
            inactive.space[k]["o"] = global.space[k].on;
            global.space[k].on = 0;
          }
        }
      });
    });
    if (global.race["hooved"] && global.race["shoecnt"] < 5) {
      global.race.shoecnt = 5;
    }
    if (global.resource.Zen.display) {
      global.resource.Zen.display = false;
    }
    if (global.resource.Slave.display) {
      global.resource.Slave.display = false;
      global.resource.Slave.amount = 0;
      removeTask("slave");
    }
    if (global.race["deconstructor"]) {
      nf_resources.forEach(function(res) {
        global.city.nanite_factory[res] = 0;
      });
    }
    Object.keys(global.resource).forEach(function(res) {
      if (global.resource[res].hasOwnProperty("trade")) {
        global.resource[res].trade = 0;
      }
    });
    Object.keys(job_desc).forEach(function(job) {
      if (!["professor", "scientist", "pit_miner", "cement_worker", "craftsman"].includes(job)) {
        global.civic[job].workers = 0;
        global.civic[job].assigned = 0;
      }
    });
    ["forager", "farmer", "lumberjack", "quarry_worker", "miner", "coal_miner", "priest", "colonist", "titan_colonist", "space_miner"].forEach(function(job) {
      global.civic[job].display = false;
    });
    if (global.civic.hunter.display) {
      global.civic.d_job = "hunter";
    } else {
      global.civic.d_job = "unemployed";
    }
    if (global.arpa["sequence"]) {
      global.arpa.sequence.on = false;
      global.arpa.sequence.boost = false;
    }
    for (let building of Object.values(global.race.purgatory.city)) {
      if (building.hasOwnProperty("count")) {
        building.count = 0;
      }
      if (building.hasOwnProperty("on")) {
        building.on = 0;
      }
    }
    for (let building of Object.values(global.race.purgatory.space)) {
      if (building.hasOwnProperty("count")) {
        building.count = 0;
      }
      if (building.hasOwnProperty("on")) {
        building.on = 0;
      }
    }
    if (global.queue.hasOwnProperty("queue")) {
      for (let i = global.queue.queue.length - 1; i >= 0; i--) {
        let item = global.queue.queue[i];
        if (item.action === "city" || item.action === "space" || item.action === "starDock") {
          global.queue.queue.splice(i, 1);
        }
      }
    }
    if (global.tech["magic"] && global.tech.magic >= 2) {
      global.tauceti["pylon"] = { count: 0 };
      cancelRituals();
    }
    initStruct(tauCetiModules.tau_home.tauceti_casino);
    initStruct(tauCetiModules.tau_home.tau_housing);
    let pop = support_on["colony"] * tauCetiModules.tau_home.colony.citizens();
    if (global.resource[global.race.species].amount > pop) {
      global.resource[global.race.species].amount = pop;
    }
    removeTask("spy");
    removeTask("spyop");
    removeTask("combo_spy");
    defineGovernor();
    clearElement($(`#infoTimer`));
    global.race["inactive"] = inactive;
  }
  function loneSurvivor() {
    if (global.race["lone_survivor"]) {
      global.tech["alloy"] = 1;
      global.tech["alumina"] = 2;
      global.tech["asteroid"] = 7;
      global.tech["banking"] = 11;
      global.tech["biotech"] = 1;
      global.tech["boot_camp"] = 2;
      global.tech["container"] = 7;
      global.tech["copper"] = 1;
      global.tech["currency"] = 6;
      global.tech["disease"] = 2;
      global.tech["drone"] = 1;
      global.tech["elerium"] = 2;
      global.tech["explosives"] = 3;
      global.tech["factory"] = 3;
      global.tech["foundry"] = 8;
      global.tech["gambling"] = 4;
      global.tech["gas_giant"] = 1;
      global.tech["gas_moon"] = 2;
      global.tech["genesis"] = 2;
      global.tech["genetics"] = 2;
      global.tech["gov_corp"] = 1;
      global.tech["gov_fed"] = 1;
      global.tech["gov_soc"] = 1;
      global.tech["gov_theo"] = 1;
      global.tech["govern"] = 3;
      global.tech["graphene"] = 1;
      global.tech["helium"] = 1;
      global.tech["hell"] = 1;
      global.tech["high_tech"] = 13;
      global.tech["home_safe"] = 2;
      global.tech["housing"] = 3;
      global.tech["housing_reduction"] = 3;
      global.tech["kuiper"] = 2;
      global.tech["launch_facility"] = 1;
      global.tech["luna"] = 2;
      global.tech["m_smelting"] = 2;
      global.tech["marines"] = 2;
      global.tech["mars"] = 5;
      global.tech["mass"] = 1;
      global.tech["medic"] = 3;
      global.tech["military"] = 8;
      global.tech["mine_conveyor"] = 1;
      global.tech["mining"] = 4;
      global.tech["monument"] = 1;
      global.tech["nano"] = 1;
      global.tech["oil"] = 7;
      global.tech["outer"] = 8;
      global.tech["pickaxe"] = 5;
      global.tech["polymer"] = 2;
      global.tech["primitive"] = 3;
      global.tech["q_factory"] = 1;
      global.tech["quantium"] = 1;
      global.tech["queue"] = 3;
      global.tech["r_queue"] = 1;
      global.tech["reproduction"] = 1;
      global.tech["rival"] = 1;
      global.tech["satellite"] = 1;
      global.tech["science"] = 9;
      global.tech["shelving"] = 3;
      global.tech["shipyard"] = 1;
      global.tech["smelting"] = 6;
      global.tech["solar"] = 5;
      global.tech["space"] = 6;
      global.tech["space_explore"] = 4;
      global.tech["space_housing"] = 1;
      global.tech["spy"] = 5;
      global.tech["stanene"] = 1;
      global.tech["steel_container"] = 6;
      global.tech["storage"] = 5;
      global.tech["swarm"] = 6;
      global.tech["syard_armor"] = 3;
      global.tech["syard_class"] = 6;
      global.tech["syard_engine"] = 5;
      global.tech["syard_power"] = 5;
      global.tech["syard_sensor"] = 4;
      global.tech["syard_weapon"] = 6;
      global.tech["syndicate"] = 0;
      global.tech["synthetic_fur"] = 1;
      global.tech["tau_home"] = 6;
      global.tech["tauceti"] = 4;
      global.tech["theology"] = 2;
      global.tech["titan"] = 9;
      global.tech["titan_ai_core"] = 3;
      global.tech["titan_power"] = 1;
      global.tech["titanium"] = 3;
      global.tech["trade"] = 3;
      global.tech["unify"] = 2;
      global.tech["uranium"] = 4;
      global.tech["v_train"] = 1;
      global.tech["vault"] = 4;
      global.tech["wharf"] = 1;
      global.tech["world_control"] = 1;
      global.tech["wsc"] = 0;
      if (!global.race["joyless"]) {
        global.tech["theatre"] = 3;
        global.tech["broadcast"] = 2;
      }
      if (!global.race["flier"]) {
        global.tech["cement"] = 5;
        global.resource.Cement.display = true;
      }
      if (global.race.universe === "magic") {
        global.tech["gov_mage"] = 1;
        global.tech["magic"] = 4;
        global.tech["conjuring"] = 2;
        global.resource.Mana.display = true;
        global.resource.Crystal.display = true;
        global.civic.crystal_miner.display = true;
        global.tauceti["pylon"] = { count: 0 };
        setupRituals(true);
      }
      if (global.race.universe === "evil") {
        global.tech["reclaimer"] = 1;
      }
      global.settings.showSpace = false;
      global.settings.showTau = true;
      global.settings.tau.home = true;
      global.settings.showCity = false;
      global.settings.showIndustry = true;
      global.settings.showPowerGrid = true;
      global.settings.showResearch = true;
      global.settings.showCivic = true;
      global.settings.showResources = true;
      global.settings.showMarket = true;
      global.settings.showStorage = true;
      global.settings.civTabs = 1;
      global.settings.spaceTabs = 6;
      global.settings.showGenetics = true;
      global.settings.arpa.physics = true;
      global.settings.arpa.genetics = true;
      global.resource[global.race.species].display = true;
      global.resource.Knowledge.display = true;
      global.resource.Money.display = true;
      global.resource.Crates.display = true;
      global.resource.Containers.display = true;
      global.resource.Food.display = true;
      global.resource.Stone.display = true;
      global.resource.Furs.display = true;
      global.resource.Copper.display = true;
      global.resource.Iron.display = true;
      global.resource.Aluminium.display = true;
      global.resource.Coal.display = true;
      global.resource.Oil.display = true;
      global.resource.Uranium.display = true;
      global.resource.Steel.display = true;
      global.resource.Titanium.display = true;
      global.resource.Alloy.display = true;
      global.resource.Polymer.display = true;
      global.resource.Iridium.display = true;
      global.resource.Helium_3.display = true;
      global.resource.Water.display = true;
      global.resource.Neutronium.display = true;
      global.resource.Adamantite.display = true;
      global.resource.Elerium.display = true;
      global.resource.Nano_Tube.display = true;
      global.resource.Graphene.display = true;
      global.resource.Stanene.display = true;
      global.resource.Orichalcum.display = true;
      global.resource.Bolognium.display = true;
      global.resource.Unobtainium.display = true;
      global.resource.Brick.display = true;
      global.resource.Wrought_Iron.display = true;
      global.resource.Sheet_Metal.display = true;
      global.resource.Mythril.display = true;
      global.resource.Quantium.display = true;
      global.resource.Cipher.display = true;
      if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
        global.civic.lumberjack.display = true;
        global.resource.Lumber.display = true;
        global.resource.Plywood.display = true;
        global.resource.Lumber.max = 1e7;
        global.resource.Lumber.amount = 1e7;
        global.resource.Plywood.amount = 25e5;
        global.resource.Lumber.crates = 25;
        global.resource.Lumber.containers = 25;
        global.tech["axe"] = 5;
      }
      if (global.race["smoldering"]) {
        global.resource.Chrysotile.display = true;
        global.resource.Chrysotile.max = 5e6;
        global.resource.Chrysotile.amount = 5e6;
      }
      if (!global.race["sappy"]) {
        global.tech["hammer"] = 4;
      }
      if (!global.race["apex_predator"]) {
        global.tech["armor"] = 3;
      }
      global.resource[global.race.species].max = 1;
      global.resource[global.race.species].amount = 1;
      global.resource.Crates.amount = 1e3;
      global.resource.Containers.amount = 1e3;
      global.resource.Money.max = 1e9;
      global.resource.Money.amount = 1e9;
      global.resource.Knowledge.max = 4321200;
      global.resource.Knowledge.amount = 4321200;
      global.resource.Food.max = 1e4;
      global.resource.Food.amount = 1e4;
      global.resource.Oil.max = 5e5;
      global.resource.Oil.amount = 5e5;
      global.resource.Helium_3.max = 5e5;
      global.resource.Helium_3.amount = 5e5;
      global.resource.Water.max = 25e3;
      global.resource.Water.amount = 25e3;
      global.resource.Uranium.max = 5e5;
      global.resource.Uranium.amount = 5e5;
      global.resource.Stone.max = 1e7;
      global.resource.Stone.amount = 1e7;
      global.resource.Furs.max = 5e6;
      global.resource.Furs.amount = 5e6;
      global.resource.Copper.max = 5e6;
      global.resource.Copper.amount = 5e6;
      global.resource.Iron.max = 5e6;
      global.resource.Iron.amount = 5e6;
      global.resource.Steel.max = 5e6;
      global.resource.Steel.amount = 5e6;
      global.resource.Aluminium.max = 5e6;
      global.resource.Aluminium.amount = 5e6;
      global.resource.Cement.max = 5e6;
      global.resource.Cement.amount = 5e6;
      global.resource.Titanium.max = 5e6;
      global.resource.Titanium.amount = 5e6;
      global.resource.Coal.max = 5e6;
      global.resource.Coal.amount = 5e6;
      global.resource.Alloy.max = 5e6;
      global.resource.Alloy.amount = 5e6;
      global.resource.Polymer.max = 5e6;
      global.resource.Polymer.amount = 5e6;
      global.resource.Iridium.max = 5e6;
      global.resource.Iridium.amount = 5e6;
      global.resource.Neutronium.max = 5e5;
      global.resource.Neutronium.amount = 5e5;
      global.resource.Adamantite.max = 5e6;
      global.resource.Adamantite.amount = 5e6;
      global.resource.Elerium.max = 1e3;
      global.resource.Elerium.amount = 1e3;
      global.resource.Nano_Tube.max = 5e6;
      global.resource.Nano_Tube.amount = 5e6;
      global.resource.Graphene.max = 5e6;
      global.resource.Graphene.amount = 5e6;
      global.resource.Stanene.max = 5e6;
      global.resource.Stanene.amount = 5e6;
      global.resource.Bolognium.max = 5e6;
      global.resource.Bolognium.amount = 5e6;
      global.resource.Orichalcum.max = 5e6;
      global.resource.Orichalcum.amount = 5e6;
      global.resource.Brick.amount = 25e5;
      global.resource.Wrought_Iron.amount = 25e5;
      global.resource.Sheet_Metal.amount = 25e5;
      global.resource.Mythril.amount = 25e5;
      global.resource.Quantium.amount = 25e5;
      if (!global.race["artifical"]) {
        global.resource.Food.crates = 10;
        global.resource.Food.containers = 10;
      }
      global.resource.Stone.crates = 25;
      global.resource.Stone.containers = 25;
      global.resource.Furs.crates = 25;
      global.resource.Furs.containers = 25;
      global.resource.Coal.crates = 10;
      global.resource.Coal.containers = 10;
      global.resource.Copper.crates = 25;
      global.resource.Copper.containers = 25;
      global.resource.Iron.crates = 25;
      global.resource.Iron.containers = 25;
      global.resource.Aluminium.crates = 25;
      global.resource.Aluminium.containers = 25;
      global.resource.Steel.crates = 25;
      global.resource.Steel.containers = 25;
      global.resource.Titanium.crates = 25;
      global.resource.Titanium.containers = 25;
      global.resource.Alloy.crates = 25;
      global.resource.Alloy.containers = 25;
      global.resource.Polymer.crates = 25;
      global.resource.Polymer.containers = 25;
      global.resource.Iridium.crates = 25;
      global.resource.Iridium.containers = 25;
      global.resource.Adamantite.crates = 25;
      global.resource.Adamantite.containers = 25;
      global.resource.Graphene.crates = 25;
      global.resource.Graphene.containers = 25;
      global.resource.Stanene.crates = 25;
      global.resource.Stanene.containers = 25;
      global.resource.Bolognium.crates = 25;
      global.resource.Bolognium.containers = 25;
      global.resource.Orichalcum.crates = 25;
      global.resource.Orichalcum.containers = 25;
      global.civic.taxes.display = true;
      if (!global.race["flier"]) {
        global.civic.cement_worker.display = true;
        global.resource.Cement.crates = 25;
        global.resource.Cement.containers = 25;
      }
      if (!global.race["sappy"]) {
        global.civic.quarry_worker.display = true;
      }
      global.civic.professor.display = true;
      global.civic.scientist.display = true;
      global.civic.banker.display = true;
      global.civic.pit_miner.display = true;
      global.civic.professor.max = 1;
      global.civic.professor.workers = 1;
      global.city.calendar.day++;
      global.city.market.active = true;
      global.city["power"] = 0;
      global.city["powered"] = true;
      if (global.race["artifical"]) {
        global.city["transmitter"] = { count: 0, on: 0 };
      }
      initStruct(actions.city.factory);
      initStruct(actions.city.foundry);
      initStruct(actions.city.smelter);
      initStruct(actions.city.amphitheatre);
      initStruct(actions.city.apartment);
      initStruct(actions.city.bank);
      initStruct(actions.city.basic_housing);
      initStruct(actions.city.biolab);
      initStruct(actions.city.boot_camp);
      initStruct(actions.city.casino);
      initStruct(actions.city.cement_plant);
      initStruct(actions.city.coal_mine);
      initStruct(actions.city.coal_power);
      initStruct(actions.city.cottage);
      initStruct(actions.city.fission_power);
      initStruct(actions.city.garrison);
      initStruct(actions.city.hospital);
      initStruct(actions.city.library);
      initStruct(actions.city.lumber_yard);
      initStruct(actions.city.mass_driver);
      initStruct(actions.city.metal_refinery);
      initStruct(actions.city.mine);
      initStruct(actions.city.oil_depot);
      initStruct(actions.city.oil_power);
      initStruct(actions.city.oil_well);
      initStruct(actions.city.rock_quarry);
      initStruct(actions.city.sawmill);
      initStruct(actions.city.shed);
      initStruct(actions.city.storage_yard);
      initStruct(actions.city.temple);
      initStruct(actions.city.tourist_center);
      initStruct(actions.city.trade);
      initStruct(actions.city.university);
      initStruct(actions.city.wardenclyffe);
      initStruct(actions.city.warehouse);
      initStruct(actions.city.wharf);
      initStruct(actions.space.spc_belt.elerium_ship);
      initStruct(actions.space.spc_belt.iridium_ship);
      initStruct(actions.space.spc_belt.iron_ship);
      initStruct(actions.space.spc_belt.space_station);
      initStruct(actions.space.spc_dwarf.e_reactor);
      initStruct(actions.space.spc_dwarf.elerium_contain);
      initStruct(actions.space.spc_dwarf.mass_relay);
      global.space.mass_relay.count = 100;
      initStruct(actions.space.spc_dwarf.shipyard);
      initStruct(actions.space.spc_enceladus.munitions_depot);
      initStruct(actions.space.spc_enceladus.operating_base);
      initStruct(actions.space.spc_enceladus.water_freighter);
      initStruct(actions.space.spc_enceladus.zero_g_lab);
      initStruct(actions.space.spc_eris.digsite);
      initStruct(actions.space.spc_eris.drone_control);
      initStruct(actions.space.spc_eris.shock_trooper);
      initStruct(actions.space.spc_eris.tank);
      initStruct(actions.space.spc_gas.gas_mining);
      initStruct(actions.space.spc_gas.gas_storage);
      initStruct(actions.space.spc_gas_moon.drone);
      initStruct(actions.space.spc_gas_moon.oil_extractor);
      initStruct(actions.space.spc_gas_moon.outpost);
      initStruct(actions.space.spc_hell.geothermal);
      initStruct(actions.space.spc_hell.hell_smelter);
      initStruct(actions.space.spc_hell.spc_casino);
      initStruct(actions.space.spc_hell.swarm_plant);
      initStruct(actions.space.spc_home.gps);
      initStruct(actions.space.spc_home.nav_beacon);
      initStruct(actions.space.spc_home.propellant_depot);
      initStruct(actions.space.spc_home.satellite);
      initStruct(actions.space.spc_kuiper.elerium_mine);
      initStruct(actions.space.spc_kuiper.neutronium_mine);
      initStruct(actions.space.spc_kuiper.orichalcum_mine);
      initStruct(actions.space.spc_kuiper.uranium_mine);
      initStruct(actions.space.spc_moon.helium_mine);
      initStruct(actions.space.spc_moon.iridium_mine);
      initStruct(actions.space.spc_moon.moon_base);
      initStruct(actions.space.spc_moon.observatory);
      initStruct(actions.space.spc_red.biodome);
      initStruct(actions.space.spc_red.exotic_lab);
      initStruct(actions.space.spc_red.fabrication);
      initStruct(actions.space.spc_red.garage);
      initStruct(actions.space.spc_red.living_quarters);
      initStruct(actions.space.spc_red.red_factory);
      initStruct(actions.space.spc_red.red_mine);
      initStruct(actions.space.spc_red.red_tower);
      initStruct(actions.space.spc_red.space_barracks);
      initStruct(actions.space.spc_red.spaceport);
      initStruct(actions.space.spc_red.vr_center);
      initStruct(actions.space.spc_red.ziggurat);
      initStruct(actions.space.spc_sun.swarm_control);
      initStruct(actions.space.spc_sun.swarm_satellite);
      initStruct(actions.space.spc_titan.ai_colonist);
      initStruct(actions.space.spc_titan.decoder);
      initStruct(actions.space.spc_titan.electrolysis);
      initStruct(actions.space.spc_titan.g_factory);
      initStruct(actions.space.spc_titan.hydrogen_plant);
      initStruct(actions.space.spc_titan.storehouse);
      initStruct(actions.space.spc_titan.titan_bank);
      initStruct(actions.space.spc_titan.titan_mine);
      initStruct(actions.space.spc_titan.titan_quarters);
      initStruct(actions.space.spc_titan.titan_spaceport);
      initStruct(actions.space.spc_triton.crashed_ship);
      global.space.crashed_ship.count = 100;
      initStruct(actions.space.spc_triton.fob);
      initStruct(actions.space.spc_triton.lander);
      initStruct(actions.tauceti.tau_gas.refueling_station);
      initStruct(actions.tauceti.tau_home.alien_outpost);
      global.tauceti.alien_outpost.count = 1;
      global.tauceti.alien_outpost.on = 1;
      initStruct(actions.tauceti.tau_home.colony);
      global.tauceti.colony.count = 1;
      global.tauceti.colony.on = 1;
      initStruct(actions.tauceti.tau_home.fusion_generator);
      global.tauceti.fusion_generator.count = 1;
      global.tauceti.fusion_generator.on = 1;
      initStruct(actions.tauceti.tau_home.infectious_disease_lab);
      initStruct(actions.tauceti.tau_home.mining_pit);
      global.tauceti.mining_pit.count = 1;
      global.tauceti.mining_pit.on = 1;
      initStruct(actions.tauceti.tau_home.orbital_station);
      global.tauceti.orbital_station.count = 1;
      global.tauceti.orbital_station.on = 1;
      initStruct(actions.tauceti.tau_home.repository);
      global.tauceti.repository.count = 2;
      initStruct(actions.tauceti.tau_home.tauceti_casino);
      initStruct(actions.tauceti.tau_red.orbital_platform);
      global.space["ai_core"] = { count: 100 };
      global.space["ai_core2"] = { count: 0, on: 0 };
      global.space["m_relay"] = { count: 0, on: 0 };
      global.arpa["sequence"] = {
        max: 5e4,
        progress: 0,
        time: 5e4,
        on: true,
        boost: false,
        auto: false,
        labs: 0
      };
      global.tech["stock_exchange"] = 0;
      global.tech["monuments"] = 0;
      global.tech["supercollider"] = 0;
      global.tech["tp_depot"] = 0;
      global.tech["railway"] = 0;
      global.tech["isolation"] = 1;
      global.race["truepath"] = 1;
      global.arpa["m_type"] = arpa("Monument");
      drawTech();
      renderTauCeti();
      arpa("Physics");
      loadFoundry();
    }
  }
  function calcAIDrift(wiki) {
    let drift = 0;
    let ai_colonist_on = wiki ? global.space.ai_colonist.on : p_on["ai_colonist"];
    let decoder_on = wiki ? global.space.decoder.on : support_on["decoder"];
    let shock_trooper_on = wiki ? global.space.shock_trooper.on : support_on["shock_trooper"];
    let tank_on = wiki ? global.space.tank.on : support_on["tank"];
    if (ai_colonist_on && decoder_on) {
      drift += ai_colonist_on * decoder_on * 0.35;
    }
    if (shock_trooper_on) {
      drift += shock_trooper_on * 2;
    }
    if (tank_on) {
      drift += tank_on * 2;
    }
    if (drift > 100) {
      drift = 100;
    }
    return drift;
  }
  function xPosition(x, p) {
    if (spacePlanetStats[p].orbit !== -2) {
      let e = 1.075 + spacePlanetStats[p].dist / 100;
      if (global.city.ptrait.includes("elliptical")) {
        switch (p) {
          case "spc_home":
            e = 1.5;
            break;
          default:
            e = 1.275 + spacePlanetStats[p].dist / 100;
            break;
        }
      }
      x *= e;
    }
    return x;
  }
  function xShift(id) {
    if (spacePlanetStats[id].orbit !== -2) {
      let x = spacePlanetStats[id].dist / 3;
      if (global.city.ptrait.includes("elliptical") && id === "spc_home") {
        x += 0.15;
      }
      if (id === "spc_eris") {
        x += 25;
      }
      return x;
    }
    return 0;
  }
  var mapScale;
  var mapShift;
  function drawMap() {
    let canvas = document.getElementById("mapCanvas");
    let ctx = canvas.getContext("2d");
    canvas.width = canvas.getBoundingClientRect().width;
    canvas.height = canvas.getBoundingClientRect().height;
    ctx.save();
    ctx.fillStyle = "#000000";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.translate(mapShift.x, mapShift.y);
    ctx.scale(mapScale, mapScale);
    let planetLocation = {};
    for (let [id, planet] of Object.entries(spacePlanetStats)) {
      planetLocation[id] = genXYcoord(id);
    }
    ctx.lineWidth = 1 / mapScale;
    ctx.strokeStyle = "#c0c0c0";
    for (let [id, planet] of Object.entries(spacePlanetStats)) {
      if (!planet.moon && planet.orbit !== -2) {
        ctx.beginPath();
        if (planet.belt || global.race["orbit_decayed"] && id === "spc_home") {
          ctx.setLineDash([0.01, 0.01]);
        } else {
          ctx.setLineDash([]);
        }
        let cx = xShift(id);
        ctx.ellipse(cx, 0, xPosition(planet.dist, id), planet.dist, 0, 0, Math.PI * 2, true);
        ctx.stroke();
      }
    }
    ctx.fillStyle = "#0000ff";
    ctx.strokeStyle = "#0000ff";
    for (let ship of global.space.shipyard.ships) {
      if (ship.transit > 0) {
        ctx.beginPath();
        ctx.setLineDash([0.1, 0.4]);
        ctx.moveTo(ship.xy.x, ship.xy.y);
        ctx.lineTo(ship.destination.x, ship.destination.y);
        ctx.stroke();
      }
    }
    for (let [id, planet] of Object.entries(spacePlanetStats)) {
      if (global.race["orbit_decayed"] && ["spc_home", "spc_moon"].includes(id)) {
        continue;
      }
      let color = "558888";
      if (actions.space[id] && actions.space[id].info.syndicate() && global.settings.space[id.substring(4)]) {
        let shift = syndicate(id);
        color = ((Math.round(255 * (1 - shift)) << 16) + (Math.round(255 * shift) << 8)).toString(16).padStart(6, 0);
      }
      if (id === "spc_dwarf") {
        color = "7132a8";
      } else if (id === "spc_sun" || id === "tauceti") {
        color = "f8ff2b";
      }
      ctx.fillStyle = "#" + color;
      ctx.beginPath();
      let size = planet.size / 10;
      if (planet.moon) {
        switch (id) {
          case "spc_moon":
            ctx.arc(planetLocation[id].x + 0.05, planetLocation[id].y + 0.05, size, 0, Math.PI * 2, true);
            break;
          case "spc_titan":
            ctx.arc(planetLocation[id].x - 0.2, planetLocation[id].y - 0.2, size, 0, Math.PI * 2, true);
            break;
          default:
            ctx.arc(planetLocation[id].x + 0.2, planetLocation[id].y + 0.2, size, 0, Math.PI * 2, true);
            break;
        }
      } else {
        let size2 = planet.size / 10;
        switch (id) {
          case "spc_sun":
            ctx.arc(planetLocation[id].x, planetLocation[id].y, size2, 0, Math.PI * 2, true);
            break;
          default:
            ctx.arc(planetLocation[id].x, planetLocation[id].y, size2, 0, Math.PI * 2, true);
            break;
        }
      }
      ctx.fill();
    }
    ctx.fillStyle = "#0000ff";
    ctx.strokeStyle = "#0000ff";
    for (let ship of global.space.shipyard.ships) {
      if (ship.transit > 0) {
        ctx.beginPath();
        ctx.arc(ship.xy.x, ship.xy.y, 0.1, 0, Math.PI * 2, true);
        ctx.fill();
      }
    }
    ctx.shadowOffsetX = 2;
    ctx.shadowOffsetY = 2;
    ctx.shadowBlur = 2;
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.fillStyle = "#009aff";
    ctx.font = `${20 / mapScale}px serif`;
    for (let ship of global.space.shipyard.ships) {
      if (ship.transit > 0) {
        ctx.fillText(ship.name, ship.xy.x + 0.15, ship.xy.y - 0.15);
      }
    }
    ctx.fillStyle = "#ffa500";
    ctx.font = `${25 / mapScale}px serif`;
    for (let [id, planet] of Object.entries(spacePlanetStats)) {
      if (actions.space[id] && global.settings.space[id.substring(4)]) {
        if (global.race["orbit_decayed"] && ["spc_home"].includes(id)) {
          continue;
        }
        let nameRef = actions.space[id].info.name;
        let nameText = typeof nameRef === "function" ? nameRef() : nameRef;
        if (planet.moon) {
          switch (id) {
            case "spc_moon":
              ctx.fillText(nameText, planetLocation[id].x + 0.1, planetLocation[id].y + 0.1);
              break;
            case "spc_titan":
              ctx.fillText(nameText, planetLocation[id].x - 0.3, planetLocation[id].y - 0.3);
              break;
            default:
              ctx.fillText(nameText, planetLocation[id].x + 0.25, planetLocation[id].y + 0.2);
              break;
          }
        } else {
          switch (id) {
            case "spc_sun":
              break;
            default:
              ctx.fillText(nameText, planetLocation[id].x, planetLocation[id].y - 0.2 * planet.size);
              break;
          }
        }
      }
    }
    ctx.restore();
  }
  function buildSolarMap(parentNode) {
    let currentNode = $(`<div style="margin-top: 10px; margin-bottom: 10px;"></div>`).appendTo(parentNode);
    let canvasOffset = {};
    let dragOffset = {};
    let mouseDown = false;
    mapShift = {};
    mapScale = 20;
    currentNode.append(
      $(`<canvas id="mapCanvas" style="width: 100%; height: 75vh"></canvas>`).on("mouseup mouseover mouseout", () => mouseDown = false).on("mousedown", (e) => {
        mouseDown = true;
        dragOffset.x = e.clientX - mapShift.x;
        dragOffset.y = e.clientY - mapShift.y;
      }).on("mousemove", (e) => {
        if (mouseDown) {
          mapShift.x = e.clientX - dragOffset.x;
          mapShift.y = e.clientY - dragOffset.y;
          drawMap();
        }
      }).on("wheel", (e) => {
        if (e.originalEvent.deltaY < 0) {
          mapScale /= 0.8;
          mapShift.x = canvasOffset.x + (mapShift.x - canvasOffset.x) / 0.8;
          mapShift.y = canvasOffset.y + (mapShift.y - canvasOffset.y) / 0.8;
          drawMap();
        } else {
          mapScale *= 0.8;
          mapShift.x = canvasOffset.x + (mapShift.x - canvasOffset.x) * 0.8;
          mapShift.y = canvasOffset.y + (mapShift.y - canvasOffset.y) * 0.8;
          drawMap();
        }
        return false;
      }),
      $(`<input type="button" value="+" style="position: absolute; width: 30px; height: 30px; top: 32px; right: 2px;">`).on("click", () => {
        mapScale /= 0.8;
        mapShift.x = canvasOffset.x + (mapShift.x - canvasOffset.x) / 0.8;
        mapShift.y = canvasOffset.y + (mapShift.y - canvasOffset.y) / 0.8;
        drawMap();
      }),
      $(`<input type="button" value="-" style="position: absolute; width: 30px; height: 30px; top: 64px; right: 2px;">`).on("click", () => {
        mapScale *= 0.8;
        mapShift.x = canvasOffset.x + (mapShift.x - canvasOffset.x) * 0.8;
        mapShift.y = canvasOffset.y + (mapShift.y - canvasOffset.y) * 0.8;
        drawMap();
      })
    );
    let bounds = document.getElementById("mapCanvas").getBoundingClientRect();
    canvasOffset.x = bounds.width / 2;
    canvasOffset.y = bounds.height / 2;
    mapShift.x = canvasOffset.x;
    mapShift.y = canvasOffset.y;
    drawMap();
  }
  function solarModal() {
    $("#modalBox").append($('<p id="modalBoxTitle" class="has-text-warning modalTitle">Solar System</p>'));
    buildSolarMap($(`#modalBox`));
  }

  // src/edenic.js
  var edenicModules = {
    eden_asphodel: {
      info: {
        name: loc("eden_asphodel_name"),
        desc() {
          if (global.tech["asphodel"] && global.tech.asphodel >= 5) {
            return `${loc("eden_asphodel_desc")} ${loc("eden_asphodel_desc_hostile")}`;
          } else {
            return `${loc("eden_asphodel_desc")} ${loc("eden_asphodel_desc_peaceful")}`;
          }
        },
        support: "encampment"
      },
      survery_meadows: {
        id: "eden-survery_meadows",
        title() {
          return loc("eden_survery_meadows_title");
        },
        desc() {
          return $(this)[0].title();
        },
        reqs: { edenic: 3 },
        grant: ["edenic", 4],
        queue_complete() {
          return global.tech.edenic >= 4 ? 0 : 1;
        },
        cost: {
          Oil(offset, wiki) {
            return 1e7;
          }
        },
        effect() {
          return loc("eden_survery_meadows_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("eden_survery_meadows_action"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      encampment: {
        id: "eden-encampment",
        title: loc("eden_encampment_title"),
        desc() {
          return `<div>${loc("eden_encampment_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { edenic: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("encampment", offset, 159e7, 1.235, "eden");
          },
          Lumber(offset) {
            return spaceCostMultiplier("encampment", offset, 86e7, 1.235, "eden");
          },
          Iron(offset) {
            return spaceCostMultiplier("encampment", offset, 19e7, 1.235, "eden");
          },
          Coal(offset) {
            return spaceCostMultiplier("encampment", offset, 235e5, 1.235, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("eden_encampment_effect", [$(this)[0].support()])}</div>`;
          if (global.tech.hasOwnProperty("asphodel") && global.tech.asphodel >= 1) {
            let powder = spatialReasoning(250);
            desc += `<div>${loc("plus_max_resource", [powder, global.resource.Asphodel_Powder.name])}</div>`;
          }
          if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
            let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
            heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
            let omniscience = 150 + heatSink ** 0.95 / 10;
            desc += `<div>${loc("plus_max_resource", [+omniscience.toFixed(0), global.resource.Omniscience.name])}</div>`;
          }
          if (global.race["warlord"] && global.portal["mortuary"] && global.portal["corpse_pile"] && p_on["mortuary"]) {
            let omniscience = global.portal.corpse_pile.count * p_on["mortuary"] * 2;
            desc += `<div>${loc("plus_max_resource", [+omniscience.toFixed(0), global.resource.Omniscience.name])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        support() {
          return 8;
        },
        powered() {
          return powerCostMod(616);
        },
        /*powerBalancer(){
            return [{ s: global.eden.encampment.s_max - global.eden.encampment.support }];
        },*/
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("encampment", "eden");
            powerOnNewStruct($(this)[0]);
            global["resource"]["Asphodel_Powder"].max += spatialReasoning(250);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0, asc: false },
            p: ["encampment", "eden"]
          };
        }
      },
      soul_engine: {
        id: "eden-soul_engine",
        title() {
          return loc("eden_soul_engine_title");
        },
        desc() {
          return `<div>${loc("eden_soul_engine_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`;
        },
        reqs: { asphodel: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("soul_engine", offset, 98312500, 1.235, "eden");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("soul_engine", offset, 45e5, 1.235, "eden");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("soul_engine", offset, 375e5, 1.235, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("soul_engine", offset, 3450, 1.235, "eden");
          }
        },
        effect() {
          return `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div><div>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered().toFixed(1)])}</div>`;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          let power = -375;
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
            power *= 1 + (p_on["corruptor"] || 0) * 0.06;
          }
          return powerModifier(power);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("soul_engine", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["soul_engine", "eden"]
          };
        }
      },
      mech_station: {
        id: "eden-mech_station",
        title() {
          return global.race["warlord"] ? loc("eden_demon_station_title") : loc("eden_mech_station_title");
        },
        desc(wiki) {
          if (!global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 || wiki) {
            return `<div>${global.race["warlord"] ? loc("eden_demon_station_title") : loc("eden_mech_station_title")}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${global.race["warlord"] ? loc("eden_demon_station_title") : loc("eden_mech_station_title")}</div>`;
          }
        },
        reqs: { asphodel: 6 },
        queue_size: 1,
        queue_complete() {
          return 10 - global.eden.mech_station.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0) < 10 ? 675e7 : 0;
            }
            return !global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 ? 675e7 : 0;
          },
          Graphene(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0) < 10 ? 825e5 : 0;
            }
            return !global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 ? 825e5 : 0;
          },
          Infernite(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0) < 10 ? 75e5 : 0;
            }
            return !global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 ? 75e5 : 0;
          },
          Vitreloy(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0) < 10 ? 666e5 : 0;
            }
            return !global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 ? 666e5 : 0;
          },
          Asphodel_Powder(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0) < 10 ? 7500 : 0;
            }
            return !global.eden.hasOwnProperty("mech_station") || global.eden.mech_station.count < 10 ? 7500 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("mech_station") ? global.eden.mech_station.count : 0);
          if (count >= 10) {
            let desc = `<div>${global.race["warlord"] ? loc("eden_demon_station_effect") : loc("eden_mech_station_effect")}</div>`;
            desc += `<div>${global.race["warlord"] ? loc("eden_demon_station_mechs", [global.eden.mech_station.mechs]) : loc("eden_mech_station_mechs", [global.eden.mech_station.mechs])}</div>`;
            desc += `<div>${loc("eden_mech_station_effective", [global.eden.mech_station.effect])}</div>`;
            return desc;
          } else {
            let size = 10;
            let remain = size - count;
            return `<div>${global.race["warlord"] ? loc("eden_demon_station_effect") : loc("eden_mech_station_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        special() {
          return global.eden.hasOwnProperty("mech_station") && global.eden.mech_station.count === 10 ? true : false;
        },
        action(args) {
          if (global.eden.mech_station.count < 10 && payCosts($(this)[0])) {
            incrementStruct("mech_station", "eden");
            if (global.eden.mech_station.count === 10) {
              renderEdenic();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, mode: 3, mechs: 0, effect: 0 },
            p: ["mech_station", "eden"]
          };
        }
      },
      asphodel_harvester: {
        id: "eden-asphodel_harvester",
        title() {
          return loc("eden_asphodel_harvester_title");
        },
        desc() {
          return `<div>${loc("eden_asphodel_harvester_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`;
        },
        reqs: { asphodel: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("asphodel_harvester", offset, 3428e4, 1.24, "eden");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("asphodel_harvester", offset, 22288800, 1.24, "eden");
          },
          Infernite(offset) {
            return spaceCostMultiplier("asphodel_harvester", offset, 666999, 1.24, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("asphodel_harvester", offset, 2, 1.18, "eden");
          }
        },
        effect() {
          let powder = +production("asphodel_harvester", "powder").toFixed(3);
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div><div>${loc("produce", [powder, global.resource.Asphodel_Powder.name])}</div>`;
          if (global.tech["hell_spire"] && global.tech.hell_spire >= 11) {
            desc += `<div>${loc("eden_asphodel_harvester_upgrade", [2])}</div>`;
          }
          return desc;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("asphodel_harvester", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["asphodel_harvester", "eden"]
          };
        }
      },
      ectoplasm_processor: {
        id: "eden-ectoplasm_processor",
        title: loc("eden_ectoplasm_processor_title"),
        desc: `<div>${loc("eden_ectoplasm_processor_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`,
        reqs: { asphodel: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ectoplasm_processor", offset, 2265e4, 1.24, "eden");
          },
          Titanium(offset) {
            return spaceCostMultiplier("ectoplasm_processor", offset, 15e6, 1.24, "eden");
          },
          Stanene(offset) {
            return spaceCostMultiplier("ectoplasm_processor", offset, 18e6, 1.24, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("ectoplasm_processor", offset, 1e3, 1.24, "eden");
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div>`;
          desc += `<div>${loc("plus_max_resource", [jobScale(5), loc(`job_ghost_trapper`)])}</div>`;
          return desc;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("ectoplasm_processor", "eden");
            powerOnNewStruct($(this)[0]);
            global.civic.ghost_trapper.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ectoplasm_processor", "eden"]
          };
        },
        flair() {
          return loc("eden_ectoplasm_processor_flair");
        }
      },
      research_station: {
        id: "eden-research_station",
        title() {
          return loc("eden_research_station_title");
        },
        desc: `<div>${loc("eden_research_station_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`,
        reqs: { asphodel: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("research_station", offset, 39185e3, 1.24, "eden");
          },
          Cement(offset) {
            return spaceCostMultiplier("research_station", offset, 1e8, 1.24, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("research_station", offset, 1250, 1.24, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("research_station", offset, 10, 1.12, "eden");
          }
        },
        effect() {
          let attact = global.blood["attract"] ? global.blood.attract * 5 : 0;
          let souls = 200 + attact;
          if (global.tech["science"] && global.tech.science >= 22 && p_on["embassy"] && p_on["symposium"]) {
            souls *= 1 + p_on["symposium"] * piracy("gxy_gorddon");
          }
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div>`;
          desc += `<div>${loc("eden_research_station_effect", [highPopAdjust(souls).toFixed(0), loc("job_ghost_trapper")])}</div>`;
          if (global.tech["science"] && global.tech.science >= 22) {
            let boost = 1;
            if (global.race["warlord"] && global.eden["corruptor"]) {
              boost = 1 + (p_on["corruptor"] || 0) * 0.04;
            }
            desc += `<div>${loc("plus_max_resource", [Math.round(777 * boost), global.resource.Omniscience.name])}</div>`;
            let ghost_base = workerScale(global.civic.ghost_trapper.workers, "ghost_trapper");
            ghost_base *= racialTrait(ghost_base, "science");
            ghost_base *= global.race["pompous"] ? 1 - traits.pompous.vars()[0] / 100 : 1;
            ghost_base = highPopAdjust(ghost_base);
            let ghost_gain = ghost_base * 325e-7 * boost;
            desc += `<div>${loc("gain", [+ghost_gain.toFixed(5), global.resource.Omniscience.name])}</div>`;
          }
          return desc;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("research_station", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["research_station", "eden"]
          };
        }
      },
      warehouse: {
        id: "eden-warehouse",
        title() {
          return global.tech["storage"] <= 2 ? loc("city_shed_title1") : global.tech["storage"] >= 4 ? loc("city_shed_title3") : loc("city_shed_title2");
        },
        desc() {
          let storage = global.tech["storage"] >= 3 ? global.tech["storage"] >= 4 ? loc("city_shed_desc_size3") : loc("city_shed_desc_size2") : loc("city_shed_desc_size1");
          return loc("city_shed_desc", [storage]);
        },
        reqs: { asphodel: 7 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("warehouse", offset, 3e8, 1.28, "eden");
          },
          Steel(offset) {
            return spaceCostMultiplier("warehouse", offset, 15e6, 1.28, "eden");
          },
          Alloy(offset) {
            return spaceCostMultiplier("warehouse", offset, 18e6, 1.28, "eden");
          },
          Cement(offset) {
            return spaceCostMultiplier("warehouse", offset, 275e5, 1.28, "eden");
          }
        },
        res() {
          let r_list = [
            "Lumber",
            "Stone",
            "Chrysotile",
            "Furs",
            "Copper",
            "Iron",
            "Aluminium",
            "Cement",
            "Coal",
            "Nano_Tube",
            "Neutronium",
            "Adamantite",
            "Infernite",
            "Alloy",
            "Polymer",
            "Iridium",
            "Graphene",
            "Stanene",
            "Bolognium",
            "Orichalcum",
            "Asphodel_Powder"
          ];
          if (global.tech["storage"] >= 3 && global.resource.Steel.display) {
            r_list.push("Steel");
          }
          if (global.tech["storage"] >= 4 && global.resource.Titanium.display) {
            r_list.push("Titanium");
          }
          return r_list;
        },
        val(res) {
          switch (res) {
            case "Lumber":
              return global.race["warlord"] ? 5500 : 3750;
            case "Stone":
              return global.race["warlord"] ? 5500 : 3750;
            case "Chrysotile":
              return 3750;
            case "Furs":
              return 2125;
            case "Copper":
              return global.race["warlord"] ? 3800 : 1900;
            case "Iron":
              return global.race["warlord"] ? 3300 : 1750;
            case "Aluminium":
              return global.race["warlord"] ? 3750 : 1600;
            case "Cement":
              return global.race["warlord"] ? 1800 : 1400;
            case "Coal":
              return global.race["warlord"] ? 800 : 600;
            case "Steel":
              return global.race["warlord"] ? 450 : 300;
            case "Titanium":
              return global.race["warlord"] ? 325 : 200;
            case "Nano_Tube":
              return global.race["warlord"] ? 350 : 150;
            case "Neutronium":
              return global.race["warlord"] ? 65 : 40;
            case "Adamantite":
              return global.race["warlord"] ? 120 : 90;
            case "Infernite":
              return global.race["warlord"] ? 22 : 18;
            case "Alloy":
              return global.race["warlord"] ? 350 : 250;
            case "Polymer":
              return global.race["warlord"] ? 350 : 250;
            case "Iridium":
              return global.race["warlord"] ? 375 : 225;
            case "Graphene":
              return global.race["warlord"] ? 250 : 175;
            case "Stanene":
              return global.race["warlord"] ? 250 : 175;
            case "Bolognium":
              return global.race["warlord"] ? 75 : 45;
            case "Orichalcum":
              return global.race["warlord"] ? 62 : 22;
            case "Asphodel_Powder":
              return global.eden["stabilizer"] ? 0.1 + global.eden.stabilizer.count * 0.015 * (global.race["warlord"] && global.eden["corruptor"] && p_on["corruptor"] ? 1 + p_on["corruptor"] * 0.05 : 1) : 0.1;
            default:
              return 0;
          }
        },
        wide: true,
        effect() {
          let storage = '<div class="aTable">';
          let multiplier = storageMultipler(global.race["warlord"] ? 1 : 0.2);
          if (global.race["warlord"] && global.eden["corruptor"]) {
            multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 12 ? global.tech.asphodel >= 13 ? 0.16 : 0.12 : 0.08);
          }
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+spatialReasoning(+($(this)[0].val(res) * multiplier)).toFixed(0));
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage = storage + "</div>";
          return storage;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("warehouse", "eden");
            let multiplier = storageMultipler(global.race["warlord"] ? 1 : 0.2);
            if (global.race["warlord"] && global.eden["corruptor"]) {
              multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 12 ? global.tech.asphodel >= 13 ? 0.16 : 0.12 : 0.08);
            }
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                global.resource[res].max += spatialReasoning($(this)[0].val(res) * multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["warehouse", "eden"]
          };
        }
      },
      stabilizer: {
        id: "eden-stabilizer",
        title() {
          return loc("eden_stabilizer_title");
        },
        desc() {
          return loc("eden_stabilizer_title");
        },
        reqs: { asphodel: 8 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("stabilizer", offset, 8e8, 1.25, "eden");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("stabilizer", offset, 75e5, 1.25, "eden");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("stabilizer", offset, 29e6, 1.25, "eden");
          },
          Elerium(offset) {
            return spaceCostMultiplier("stabilizer", offset, 7500, 1.25, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("stabilizer", offset, 4250, 1.25, "eden");
          }
        },
        queue_complete() {
          return global.eden.warehouse.count - global.eden.stabilizer.count;
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("eden_stabilizer_requirement", [loc("city_shed_title3")])}</div>`;
          let store = 15;
          let stabilize = 8;
          if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
            let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
            heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
            if (heatSink > 0) {
              stabilize *= 1 + heatSink / 17500;
            }
          }
          if (global.race["warlord"] && global.eden["corruptor"] && p_on["corruptor"]) {
            stabilize += 0.4 * p_on["corruptor"];
            store *= 1 + p_on["corruptor"] * 0.05;
          }
          if (stabilize > 99) {
            stabilize = 99;
          }
          desc += `<div>${loc("eden_stabilizer_effect1", [global.resource.Asphodel_Powder.name, +stabilize.toFixed(1)])}</div>`;
          desc += `<div>${loc("eden_stabilizer_effect2", [global.resource.Asphodel_Powder.name, loc("city_shed_title3"), +store.toFixed(1)])}</div>`;
          desc += `<div class="has-text-special">${loc("eden_stabilizer_limit", [global?.eden?.warehouse?.count || 0])}</div>`;
          return desc;
        },
        action(args) {
          if (global.eden.stabilizer.count < global.eden.warehouse.count && payCosts($(this)[0])) {
            incrementStruct("stabilizer", "eden");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["stabilizer", "eden"]
          };
        }
      },
      rune_gate: {
        id: "eden-rune_gate",
        title: loc("eden_rune_gate_title"),
        desc(wiki) {
          if (!global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 || wiki) {
            return `<div>${loc("eden_rune_gate_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("eden_rune_gate_title")}</div>`;
          }
        },
        reqs: { elysium: 1 },
        condition() {
          return global.eden.rune_gate.count < 100 ? true : false;
        },
        queue_size: 10,
        queue_complete() {
          return 100 - global.eden.rune_gate.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 1e9 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 1e9 : 0;
          },
          Omniscience(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 1e4 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 1e4 : 0;
          },
          Copper(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 42e7 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 42e7 : 0;
          },
          Nano_Tube(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 35e6 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 35e6 : 0;
          },
          Bolognium(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 75e5 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 75e5 : 0;
          },
          Asphodel_Powder(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0) < 100 ? 25e3 : 0;
            }
            return !global.eden.hasOwnProperty("rune_gate") || global.eden.rune_gate.count < 100 ? 25e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("rune_gate") ? global.eden.rune_gate.count : 0);
          if (count >= 100) {
            let desc = `<div>${loc("eden_rune_gate_effect")}</div>`;
            return desc;
          } else {
            let size = 100;
            let remain = size - count;
            return `<div>${loc("eden_rune_gate_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.rune_gate.count < 100 && payCosts($(this)[0])) {
            incrementStruct("rune_gate", "eden");
            if (global.eden.rune_gate.count === 100) {
              global.eden.rune_gate_open.count = 1;
              global.settings.eden.elysium = true;
              global.tech.elysium = 2;
              renderEdenic();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["rune_gate", "eden"]
          };
        }
      },
      rune_gate_open: {
        id: "space-rune_gate_complete",
        title: loc("eden_rune_gate_title"),
        desc() {
          return `<div>${loc("eden_rune_gate_title")}</div>`;
        },
        wiki: false,
        reqs: { elysium: 1 },
        condition() {
          return global.eden.rune_gate.count === 100 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          return `<div>${loc("eden_rune_gate_open", [loc("eden_elysium_name")])}</div>`;
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["rune_gate_open", "eden"]
          };
        }
      },
      bunker: {
        id: "eden-bunker",
        title: loc("eden_bunker_title"),
        desc: `<div>${loc("eden_bunker_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`,
        reqs: { asphodel: 9 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("bunker", offset, 777e6, 1.2, "eden");
          },
          Stone(offset) {
            return spaceCostMultiplier("bunker", offset, 358e6, 1.2, "eden");
          },
          Furs(offset) {
            return spaceCostMultiplier("bunker", offset, 666e5, 1.2, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("bunker", offset, 9999, 1.2, "eden");
          }
        },
        effect() {
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div>`;
          desc += `<div>${loc("plus_max_soldiers", [$(this)[0].soldiers()])}</div>`;
          if (global.race.universe === "evil" && global.race["warlord"]) {
            desc += `<div>${loc("plus_max_resource", [1, global.resource.Authority.name])}</div>`;
          }
          if (global.tech["celestial_warfare"] && global.tech.celestial_warfare >= 4 && (!global.tech["elysium"] || global.tech.elysium < 8)) {
            desc += `<div>${loc("eden_bunker_effect", [3])}</div>`;
          }
          if (global.tech["celestial_warfare"] && global.tech.celestial_warfare >= 5) {
            let rate = 10;
            if (global.blood["lust"]) {
              rate += global.blood.lust * 0.2;
            }
            let milVal = govActive("militant", 0);
            if (milVal) {
              rate *= 1 + milVal / 100;
            }
            desc += `<div>${loc("city_boot_camp_effect", [+rate.toFixed(2)])}</div>`;
          }
          return desc;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("bunker", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["bunker", "eden"]
          };
        },
        soldiers() {
          let soldiers = global.race["grenadier"] ? 3 : 5;
          return jobScale(soldiers);
        }
      },
      bliss_den: {
        id: "eden-bliss_den",
        title: loc("eden_bliss_den_title"),
        desc: `<div>${loc("eden_bliss_den_title")}</div><div class="has-text-special">${loc("space_support", [loc("eden_asphodel_name")])}</div>`,
        reqs: { asphodel: 10 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("bliss_den", offset, 45e7, 1.22, "eden");
          },
          Furs(offset) {
            return spaceCostMultiplier("bliss_den", offset, 29e6, 1.22, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("bliss_den", offset, 35e3, 1.22, "eden");
          },
          Plywood(offset) {
            return spaceCostMultiplier("bliss_den", offset, 1e7, 1.22, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("bliss_den", offset, 10, 1.22, "eden");
          }
        },
        effect() {
          let morale = 8;
          let max = 2;
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("eden_asphodel_name")])}</div>`;
          if (!global.race["joyless"]) {
            desc += `<div>${loc("space_red_vr_center_effect1", [morale])}</div>`;
          }
          desc += `<div>${loc("space_red_vr_center_effect2", [max])}</div>`;
          return desc;
        },
        s_type: "asphodel",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("bliss_den", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["bliss_den", "eden"]
          };
        },
        flair() {
          return loc(`eden_bliss_den_flair`);
        }
      },
      rectory: {
        id: "eden-rectory",
        title: loc("eden_rectory_title"),
        desc: `<div>${loc("eden_rectory_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { asphodel: 11 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("rectory", offset, 275e6, 1.24, "eden");
          },
          Copper(offset) {
            return spaceCostMultiplier("rectory", offset, 182e5, 1.24, "eden");
          },
          Brick(offset) {
            return spaceCostMultiplier("rectory", offset, 75e5, 1.24, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("rectory", offset, 18, 1.24, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("eden_encampment_effect", [$(this)[0].support()])}</div>`;
          desc += `<div>${loc("plus_max_citizens", [$(this)[0].citizens()])}</div>`;
          if (global.genes["ancients"] && global.genes["ancients"] >= 4) {
            desc += `<div>${loc("plus_max_resource", [jobScale(1), global.civic?.priest?.name || loc(`job_priest`)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        support() {
          return 1;
        },
        powered() {
          return powerCostMod(50);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("rectory", "eden");
            if (powerOnNewStruct($(this)[0])) {
              global["resource"][global.race.species].max += $(this)[0].citizens();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["rectory", "eden"]
          };
        },
        citizens() {
          let pop = 4;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        },
        flair() {
          return loc(`eden_rectory_flair`);
        }
      },
      corruptor: {
        id: "eden-corruptor",
        title: loc("eden_corruptor_title"),
        desc: `<div>${loc("eden_corruptor_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { asphodel: 11 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("corruptor", offset, 275e6, 1.24, "eden");
          },
          Furs(offset) {
            return spaceCostMultiplier("corruptor", offset, 175e5, 1.24, "eden");
          },
          Copper(offset) {
            return spaceCostMultiplier("corruptor", offset, 182e5, 1.24, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("corruptor", offset, 8, 1.24, "eden");
          }
        },
        effect() {
          let elerium = sizeApproximation(spatialReasoning(200));
          let warehouse = global.tech?.asphodel >= 12 ? edenicModules.eden_asphodel.warehouse.title() : `${loc("wiki_tech_tree_asphodel")} ${edenicModules.eden_asphodel.warehouse.title()}`;
          let desc = `<div>${loc("eden_encampment_effect", [$(this)[0].support()])}</div>`;
          desc += `<div>${loc("eden_corruptor_effect", [4, edenicModules.eden_asphodel.research_station.title(), global.resource.Omniscience.name])}</div>`;
          desc += `<div>${loc("eden_corruptor_effect", [global.tech?.asphodel >= 12 ? global.tech?.asphodel >= 13 ? 16 : 12 : 8, warehouse, loc("tab_storage")])}</div>`;
          if (global.tech?.asphodel >= 12) {
            desc += `<div>${loc("eden_corruptor_effect", [global.tech?.asphodel >= 13 ? 12 : 10, actions.portal.prtl_lake.harbor.title(), loc("tab_storage")])}</div>`;
          }
          desc += `<div>${loc("eden_corruptor_effect2", [5, edenicModules.eden_asphodel.stabilizer.title()])}</div>`;
          desc += `<div>${loc("production", [6, edenicModules.eden_asphodel.asphodel_harvester.title()])}</div>`;
          if (global.tech?.asphodel >= 12) {
            desc += `<div>${loc("eden_corruptor_effect", [8, edenicModules.eden_elysium.eternal_bank.title(), loc("resource_Money_name")])}</div>`;
            desc += `<div>${loc("eden_corruptor_effect", [6, edenicModules.eden_asphodel.soul_engine.title(), loc("power")])}</div>`;
          }
          if (global.tech?.asphodel >= 13) {
            desc += `<div>${loc("eden_corruptor_effect2", [3, edenicModules.eden_isle.spirit_battery.title()])}</div>`;
          }
          desc += `<div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        support() {
          return 1;
        },
        powered() {
          return powerCostMod(25);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("corruptor", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["corruptor", "eden"]
          };
        }
      }
    },
    eden_elysium: {
      info: {
        name: loc("eden_elysium_name"),
        desc: loc("eden_elysium_desc"),
        prop() {
          let soldier_title = global.tech["world_control"] && !global.race["truepath"] ? loc("civics_garrison_peacekeepers") : loc("civics_garrison_soldiers");
          let desc = `<span class="pad"><span class="soldier">${soldier_title}</span> <span v-html="$options.filters.filter(workers,'stationed')"></span> / <span>{{ max | filter('s_max') }}</span></span>`;
          desc += `<span class="pad"><span class="wounded">${loc("civics_garrison_wounded")}</span> <span>{{ wounded }}</span></span>`;
          desc += `<span class="pad"><span v-html="$options.filters.filter(m_use,'m_use')"></span></span>`;
          return desc;
        },
        bind() {
          return global.civic.garrison;
        },
        filter(v, type) {
          switch (type) {
            case "stationed":
              return garrisonSize();
            case "s_max":
              return garrisonSize(true);
            case "m_use":
              return loc(`civics_garrison_mercenary_cost`, [Math.round(mercCost()).toLocaleString()]);
          }
        }
      },
      survey_fields: {
        id: "eden-survey_fields",
        title: loc("eden_survey_fields"),
        desc: loc("eden_survey_fields"),
        reqs: { elysium: 2 },
        grant: ["elysium", 3],
        cost: {
          Money() {
            return 1e9;
          },
          Oil() {
            return 1e7;
          },
          Helium_3() {
            return 5e6;
          }
        },
        effect: loc("eden_survey_fields_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("eden_survey_fields_msg"), "info", false, ["progress"]);
            global.eden["fortress"] = { fortress: 1e3, patrols: 20, armory: 100, detector: 100 };
            return true;
          }
          return false;
        },
        post() {
          if (global.tech["elysium"] && global.tech.elysium === 3) {
            renderEdenic();
            clearPopper("eden-survey_fields");
          }
        }
      },
      fortress: {
        id: "eden-fortress",
        title: loc("eden_fortress"),
        desc: loc("eden_fortress"),
        queue_complete() {
          return 0;
        },
        reqs: { elysium: 3 },
        condition() {
          return global.tech.elysium === 3;
        },
        effect() {
          let desc = `<div>${loc("eden_fortress_rating", [global.eden["fortress"] ? global.eden.fortress.fortress / 10 : 0])}</div>`;
          desc += `<div>${loc("eden_fortress_patrols", [global.eden["fortress"] ? global.eden.fortress.patrols : 0])}</div>`;
          desc += `<div>${loc("eden_fortress_detect", [global.eden["fortress"] ? global.eden.fortress.detector : 0])}</div>`;
          desc += `<div>${loc("eden_fortress_armory", [global.eden["fortress"] ? global.eden.fortress.armory : 0])}</div>`;
          return desc;
        },
        action(args) {
          return false;
        }
      },
      siege_fortress: {
        id: "eden-siege_fortress",
        title: loc("eden_siege_fortress"),
        desc: loc("eden_siege_fortress"),
        queue_complete() {
          return 0;
        },
        reqs: { elysium: 3 },
        condition() {
          return global.tech.elysium === 3 && global.eden.fortress.fortress > 0;
        },
        cost: {
          Troops() {
            return jobScale(100);
          }
        },
        effect() {
          let desc = `<div class="has-text-warning">${loc(`eden_siege_fortress_effect`)}</div>`;
          if (global.eden.hasOwnProperty("fortress") && global.eden.fortress.hasOwnProperty("siege")) {
            desc += `<div>${loc(`eden_siege_fortress_result`)}</div>`;
            desc += `<div>${loc(`eden_siege_fortress_lost`, [global.eden.fortress.siege.loss])}</div>`;
            desc += `<div>${loc(`eden_siege_fortress_damage`, [global.eden.fortress.siege.damage])}</div>`;
            desc += `<div class="has-text-caution">${loc("eden_fortress_rating", [global.eden["fortress"] ? global.eden.fortress.fortress / 10 : 0])}</div>`;
          }
          return desc;
        },
        action(args) {
          let armySize = jobScale(100);
          if (garrisonSize() < armySize) {
            return false;
          }
          let armory = (global.eden.fortress.armory + 20) / 20;
          let enemy_pats = global.eden.fortress.patrols * armory;
          let remain = jobScale(100 - enemy_pats < 0 ? 0 : 100 - enemy_pats);
          if (remain <= 0) {
            global.eden.fortress["siege"] = { loss: armySize, damage: 0 };
            global.civic.garrison.protest += armySize;
            soldierDeath(armySize);
            messageQueue(loc("eden_siege_fortress_fail"), "warning", false, ["combat"]);
          } else {
            let dead = armySize - remain + Math.floor(seededRandom(0, jobScale(global.eden.fortress.detector), true));
            dead = deadCalc(dead, armySize);
            remain = armySize - dead;
            let troops = Math.ceil(armyRating(remain, "Troops"));
            let damage = Math.floor(seededRandom(0, troops, true) / 50);
            let more_dead = Math.floor(seededRandom(0, remain, true));
            more_dead = deadCalc(more_dead, remain);
            remain = remain - more_dead;
            dead += more_dead;
            global.civic.garrison.protest += dead;
            soldierDeath(dead);
            global.civic.garrison.wounded += Math.floor(seededRandom(0, remain, true));
            if (global.civic.garrison.wounded > global.civic.garrison.workers) {
              global.civic.garrison.wounded = global.civic.garrison.workers;
            }
            global.eden.fortress.fortress -= damage;
            if (global.eden.fortress.fortress < 0) {
              global.eden.fortress.fortress = 0;
            }
            global.eden.fortress["siege"] = { loss: dead, damage: damage / 10 };
            if (global.eden.fortress.fortress <= 0) {
              messageQueue(loc("eden_siege_fortress_fall"), "success", false, ["combat"]);
              global.tech.elysium = 4;
            } else {
              messageQueue(loc("eden_siege_fortress_success", [damage / 10]), "success", false, ["combat"]);
            }
          }
          renderEdenic();
          return false;
        }
      },
      raid_supplies: {
        id: "eden-raid_supplies",
        title: loc("eden_raid_supplies"),
        desc: loc("eden_raid_supplies"),
        queue_complete() {
          return 0;
        },
        reqs: { elysium: 3 },
        condition() {
          return global.tech.elysium === 3 && global.eden.fortress.armory > 0;
        },
        cost: {
          Troops() {
            return jobScale(50);
          }
        },
        effect() {
          let desc = `<div class="has-text-warning">${loc(`eden_raid_supplies_effect`)}</div>`;
          if (global.eden.hasOwnProperty("fortress") && global.eden.fortress.hasOwnProperty("raid")) {
            desc += `<div>${loc(`eden_raid_fortress_result`)}</div>`;
            desc += `<div>${loc(`eden_siege_fortress_lost`, [global.eden.fortress.raid.loss])}</div>`;
            desc += `<div>${loc(`eden_siege_fortress_damage`, [global.eden.fortress.raid.damage])}</div>`;
            desc += `<div class="has-text-caution">${loc("eden_fortress_armory", [global.eden["fortress"] ? global.eden.fortress.armory : 0])}</div>`;
          }
          return desc;
        },
        action(args) {
          let armySize = jobScale(50);
          if (garrisonSize() < armySize) {
            return false;
          }
          let enemy_pats = global.eden.fortress.patrols * 2.5;
          let remain = Math.ceil(jobScale(50 - enemy_pats < 0 ? 0 : 50 - enemy_pats));
          if (remain <= 0) {
            global.eden.fortress["raid"] = { loss: armySize, damage: 0 };
            global.civic.garrison.protest += armySize;
            soldierDeath(armySize);
            messageQueue(loc("eden_raid_fortress_fail"), "warning", false, ["combat"]);
          } else {
            let dead = armySize - remain + Math.floor(seededRandom(0, jobScale(global.eden.fortress.detector / 2), true));
            dead = deadCalc(dead, armySize);
            remain = armySize - dead;
            let troops = Math.ceil(armyRating(remain, "Troops"));
            let damage = Math.floor(seededRandom(0, troops, true) / 50);
            global.civic.garrison.protest += dead;
            soldierDeath(dead);
            global.civic.garrison.wounded += Math.floor(seededRandom(0, remain, true));
            if (global.civic.garrison.wounded > global.civic.garrison.workers) {
              global.civic.garrison.wounded = global.civic.garrison.workers;
            }
            global.eden.fortress.armory -= damage;
            if (global.eden.fortress.armory < 0) {
              global.eden.fortress.armory = 0;
            }
            global.eden.fortress["raid"] = { loss: dead, damage };
            messageQueue(loc("eden_raid_fortress_success", [damage]), "success", false, ["combat"]);
            drawTech();
          }
          renderEdenic();
          return false;
        }
      },
      ambush_patrol: {
        id: "eden-ambush_patrol",
        title: loc("eden_ambush_patrol"),
        desc: loc("eden_ambush_patrol"),
        queue_complete() {
          return 0;
        },
        reqs: { elysium: 3 },
        condition() {
          return global.tech.elysium === 3 && global.eden.fortress.patrols > 0;
        },
        cost: {
          Troops() {
            return jobScale(25);
          }
        },
        effect() {
          let desc = `<div class="has-text-warning">${loc(`eden_ambush_patrol_effect`)}</div>`;
          if (global.eden.hasOwnProperty("fortress") && global.eden.fortress.hasOwnProperty("ambush")) {
            desc += `<div>${loc(`eden_ambush_patrol_result`)}</div>`;
            desc += `<div>${loc(`eden_siege_fortress_lost`, [global.eden.fortress.ambush.loss])}</div>`;
            desc += `<div>${loc(`eden_ambush_patrol_damage`, [global.eden.fortress.ambush.damage ? loc("true") : loc("false")])}</div>`;
            desc += `<div class="has-text-caution">${loc("eden_fortress_patrols", [global.eden["fortress"] ? global.eden.fortress.patrols : 0])}</div>`;
          }
          return desc;
        },
        action(args) {
          let armySize = jobScale(25);
          if (garrisonSize() < armySize) {
            return false;
          }
          if (armyRating(jobScale(1), "Troops") > Math.floor(seededRandom(0, global.eden.fortress.detector * 2, true))) {
            let dead = Math.floor(seededRandom(0, armySize, true));
            dead = deadCalc(dead, armySize);
            let remain = armySize - dead;
            global.civic.garrison.protest += dead;
            soldierDeath(dead);
            global.civic.garrison.wounded += Math.floor(seededRandom(0, remain, true));
            if (global.civic.garrison.wounded > global.civic.garrison.workers) {
              global.civic.garrison.wounded = global.civic.garrison.workers;
            }
            global.eden.fortress.patrols--;
            global.eden.fortress["ambush"] = { loss: dead, damage: true };
            messageQueue(loc("eden_ambush_patrol_success"), "success", false, ["combat"]);
            drawTech();
          } else {
            global.eden.fortress["ambush"] = { loss: armySize, damage: false };
            global.civic.garrison.protest += armySize;
            soldierDeath(armySize);
            messageQueue(loc("eden_ambush_patrol_fail"), "warning", false, ["combat"]);
          }
          renderEdenic();
          return false;
        }
      },
      ruined_fortress: {
        id: "eden-ruined_fortress",
        title: loc("eden_ruined_fortress"),
        desc: loc("eden_ruined_fortress"),
        queue_complete() {
          return 0;
        },
        reqs: { elysium: 4 },
        condition() {
          return global.tech.elysium < 8;
        },
        wiki: false,
        effect() {
          return loc("eden_ruined_fortress_effect");
        },
        action(args) {
          return false;
        }
      },
      scout_elysium: {
        id: "eden-scout_elysium",
        title: loc("eden_scout_elysium_title"),
        desc: loc("eden_scout_elysium_title"),
        reqs: { elysium: 4 },
        grant: ["elysium", 5],
        queue_complete() {
          return global.tech.elysium >= 5 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e10;
          },
          Oil() {
            return 9e6;
          },
          Helium_3() {
            return 6e6;
          },
          Troops() {
            return jobScale(100);
          }
        },
        effect: loc("eden_scout_elysium_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("eden_scout_elysium_result"), "info", false, ["progress"]);
            global.settings.eden.isle = true;
            global.civic.garrison.protest += jobScale(50);
            soldierDeath(jobScale(50));
            return true;
          }
          return false;
        }
      },
      fire_support_base: {
        id: "eden-fire_support_base",
        title: loc("eden_fire_support_base_title"),
        desc(wiki) {
          if (!global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 || wiki) {
            return `<div>${loc("eden_fire_support_base_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("eden_fire_support_base_title")}</div>`;
          }
        },
        reqs: { elysium: 8 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.eden.fire_support_base.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0) < 100 ? 25e8 : 0;
            }
            return !global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 ? 25e8 : 0;
          },
          Stone(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0) < 100 ? 235e6 : 0;
            }
            return !global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 ? 235e6 : 0;
          },
          Neutronium(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0) < 100 ? 375e4 : 0;
            }
            return !global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 ? 375e4 : 0;
          },
          Polymer(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0) < 100 ? 65e6 : 0;
            }
            return !global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 ? 65e6 : 0;
          },
          Elysanite(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0) < 100 ? 625e3 : 0;
            }
            return !global.eden.hasOwnProperty("fire_support_base") || global.eden.fire_support_base.count < 100 ? 625e3 : 0;
          },
          Elerium() {
            return global.tech.elysium >= 10 && global.eden.fire_support_base.count === 100 && global.tech["isle"] && global.tech.isle === 1 ? 25e4 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("fire_support_base") ? global.eden.fire_support_base.count : 0);
          if (count >= 100) {
            let desc = `<div>${loc("plus_max_soldiers", [$(this)[0].soldiers()])}</div>`;
            if (global.tech["elysium"] && global.tech.elysium >= 10 && global.tech.isle === 1) {
              if (global.resource.Elerium.amount >= 25e4) {
                desc += `<div class="has-text-success">${loc("eden_fire_support_base_effect")}</div>`;
              } else {
                desc += `<div class="has-text-danger">${loc("eden_fire_support_base_effect")}</div>`;
              }
              desc += `<div class="has-text-caution">${loc("eden_fire_support_base_effect2", [sizeApproximation(25e4), global.resource.Elerium.name])}</div>`;
            }
            return desc;
          } else {
            let size = 100;
            let remain = size - count;
            return `<div>${loc("eden_fire_support_base_build")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.fire_support_base.count < 100 && payCosts($(this)[0])) {
            incrementStruct("fire_support_base", "eden");
            if (global.eden.fire_support_base.count === 100 && !global.tech["isle"]) {
              global.eden["enemy_isle"] = { wt: 100, et: 100, g: 100 };
              global.tech["isle"] = 1;
              renderEdenic();
              drawTech();
            }
            return true;
          } else if (global.eden.fire_support_base.count === 100 && global.tech.elysium >= 10 && global.tech["isle"] && global.tech.isle === 1 && payCosts($(this)[0])) {
            let target = null, element = null;
            let targets = [];
            if (!global.eden["enemy_isle"]) {
              global.eden["enemy_isle"] = { wt: 100, et: 100, g: 100 };
            }
            if (global.eden.enemy_isle.wt > 0) {
              targets.push("wt");
            }
            if (global.eden.enemy_isle.g > 0) {
              targets.push("g");
            }
            if (global.eden.enemy_isle.et > 0) {
              targets.push("et");
            }
            if (global.eden["pillbox"] && global.eden.pillbox.staffed > 0) {
              let rating = +(Math.round(armyRating(global.eden.pillbox.staffed, "army", 0)) / (global.race["warlord"] ? 1250 : 75)).toFixed(0);
              if (rating > 100) {
                rating = 100;
              }
              global.eden.fire_support_base.count = Math.floor(rating);
            } else {
              global.eden.fire_support_base.count = 0;
            }
            if (global.eden.fire_support_base.count < 100) {
              messageQueue(loc("eden_fire_support_base_counterattack", [loc("eden_fire_support_base_title")]), "danger", false, ["progress"]);
            }
            target = targets[Math.floor(seededRandom(0, targets.length))];
            if (target === "wt") {
              element = "#eden-west_tower .button";
            } else if (target === "et") {
              element = "#eden-east_tower .button";
            } else if (target === "g") {
              element = "#eden-isle_garrison .button";
            }
            let redraw = false;
            global.eden.enemy_isle[target] -= Math.floor(seededRandom(25, 75));
            if (global.eden.enemy_isle[target] <= 0) {
              global.eden.enemy_isle[target] = 0;
              redraw = true;
            }
            let nuke = $('<div class="mininuke"></div>');
            $(element).append(nuke);
            setTimeout(function() {
              nuke.addClass("burn");
            }, 500);
            setTimeout(function() {
              nuke.addClass("b");
            }, 600);
            setTimeout(function() {
              nuke.addClass("c");
            }, 2500);
            setTimeout(function() {
              $(`${element} .mininuke`).remove();
            }, 4500);
            if (global.eden.enemy_isle.wt === 0 && global.eden.enemy_isle.g === 0 && global.eden.enemy_isle.et === 0) {
              global.tech.isle = 2;
              global.settings.eden.palace = true;
              initStruct(edenicModules.eden_elysium.north_pier);
              initStruct(edenicModules.eden_isle.south_pier);
              drawTech();
              renderEdenic();
              return true;
            } else if (redraw) {
              renderEdenic();
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["fire_support_base", "eden"]
          };
        },
        soldiers() {
          let soldiers = global.race["grenadier"] ? 15 : 25;
          return jobScale(soldiers);
        }
      },
      elysanite_mine: {
        id: "eden-elysanite_mine",
        title: loc("eden_elysanite_mine_title"),
        desc: `<div>${loc("eden_elysanite_mine_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { elysium: 6 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elysanite_mine", offset, 566e6, 1.24, "eden");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("elysanite_mine", offset, 18e6, 1.24, "eden");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("elysanite_mine", offset, 1e7, 1.24, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("plus_max_resource", [jobScale(2), loc(`job_elysium_miner`)])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(25);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("elysanite_mine", "eden");
            powerOnNewStruct($(this)[0]);
            global.civic.elysium_miner.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elysanite_mine", "eden"]
          };
        }
      },
      sacred_smelter: {
        id: "eden-sacred_smelter",
        title() {
          return loc("eden_sacred_smelter_title");
        },
        desc() {
          return `<div>${loc("eden_sacred_smelter_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { elysium: 7 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("sacred_smelter", offset, 625e6, 1.25, "eden");
          },
          Iridium(offset) {
            return spaceCostMultiplier("sacred_smelter", offset, 25e6, 1.25, "eden");
          },
          Elysanite(offset) {
            return spaceCostMultiplier("sacred_smelter", offset, 45e5, 1.25, "eden");
          },
          Scarletite(offset) {
            return spaceCostMultiplier("sacred_smelter", offset, 125e4, 1.25, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("interstellar_stellar_forge_effect3", [$(this)[0].smelting()])}</div>`;
          if (global.tech["elysium"] && global.tech.elysium >= 18) {
            desc += `<div>${loc("city_foundry_effect1", [jobScale(3)])}</div>`;
          }
          return `${desc}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(33);
        },
        smelting() {
          return 5;
        },
        special: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("sacred_smelter", "eden");
            if (powerOnNewStruct($(this)[0])) {
              addSmelter($(this)[0].smelting(), "Steel");
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["sacred_smelter", "eden"]
          };
        }
      },
      elerium_containment: {
        id: "eden-elerium_containment",
        title() {
          return loc("eden_elerium_containment", [global.resource.Elerium.name]);
        },
        desc() {
          return `<div>${loc("eden_elerium_containment", [global.resource.Elerium.name])}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { elysium: 11 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elerium_containment", offset, 45e8, 1.28, "eden");
          },
          Graphene(offset) {
            return spaceCostMultiplier("elerium_containment", offset, 1e8, 1.28, "eden");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("elerium_containment", offset, 88e6, 1.28, "eden");
          },
          Elysanite(offset) {
            return spaceCostMultiplier("elerium_containment", offset, 25e6, 1.28, "eden");
          }
        },
        effect() {
          let elerium = sizeApproximation(spatialReasoning(1e3));
          return `<div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(50);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("elerium_containment", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elerium_containment", "eden"]
          };
        }
      },
      pillbox: {
        id: "eden-pillbox",
        title() {
          return loc("eden_pillbox_title");
        },
        desc() {
          return `<div>${loc("eden_pillbox_title")}</div><div class="has-text-special">${loc("requires_soldiers")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { elysium: 9 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("pillbox", offset, 15e8, 1.26, "eden");
          },
          Cement(offset) {
            return spaceCostMultiplier("pillbox", offset, 5e8, 1.26, "eden");
          },
          Steel(offset) {
            return spaceCostMultiplier("pillbox", offset, 65e6, 1.26, "eden");
          },
          Nanoweave(offset) {
            return spaceCostMultiplier("pillbox", offset, 38e6, 1.26, "eden");
          }
        },
        effect() {
          let rating = +(Math.round(armyRating(global.eden["pillbox"] && global.eden.pillbox.staffed ? global.eden.pillbox.staffed : jobScale(10), "army", 0)) / (global.race["warlord"] ? 1250 : 75)).toFixed(1);
          if (rating > 100) {
            rating = 100;
          }
          let desc = ``;
          if (!global.tech["isle"] || global.tech.isle === 1) {
            desc += `<div>${loc("eden_pillbox_effect", [rating])}</div>`;
          }
          if (global.tech["elysium"] && global.tech.elysium >= 12 && !global.race["joyless"]) {
            desc += `<div>${loc("eden_restaurant_effect", [0.35, loc(`eden_restaurant_bd`)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("portal_guard_post_effect2", [jobScale(10), $(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(12);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("pillbox", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, staffed: 0 },
            p: ["pillbox", "eden"]
          };
        }
      },
      restaurant: {
        id: "eden-restaurant",
        title() {
          return global.eden["restaurant"] && global.eden.restaurant.count >= 10 ? loc("eden_restaurant_bd") : loc("eden_restaurant_title");
        },
        desc() {
          return `<div>${loc("eden_restaurant_title")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Food.name])}</div>`;
        },
        reqs: { elysium: 12 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("restaurant", offset, 425e7, 1.26, "eden");
          },
          Oil(offset) {
            return spaceCostMultiplier("restaurant", offset, 1e6, 1.26, "eden");
          },
          Polymer(offset) {
            return spaceCostMultiplier("restaurant", offset, 11e7, 1.26, "eden");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("restaurant", offset, 25e6, 1.26, "eden");
          }
        },
        effect() {
          let food = 25e4;
          let morale = 0;
          morale += global.eden.hasOwnProperty("pillbox") && p_on["pillbox"] ? 0.35 * p_on["pillbox"] : 0;
          morale += (global.civic?.elysium_miner?.workers ?? 0) * 0.15;
          morale += global.eden.hasOwnProperty("archive") && p_on["archive"] ? 0.4 * p_on["archive"] : 0;
          let desc = "";
          if (!global.race["joyless"]) {
            desc += `<div>${loc("space_red_vr_center_effect1", [morale.toFixed(1)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("interstellar_alpha_starport_effect3", [sizeApproximation(food), global.resource.Food.name])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(25);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("restaurant", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["restaurant", "eden"]
          };
        }
      },
      eternal_bank: {
        id: "eden-eternal_bank",
        title() {
          return loc("eden_eternal_bank_title");
        },
        desc() {
          return `<div>${loc("eden_eternal_bank_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { elysium: 13 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("eternal_bank", offset, traitCostMod("untrustworthy", 25e8), 1.26, "eden");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("eternal_bank", offset, traitCostMod("untrustworthy", 1e7), 1.26, "eden");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("eternal_bank", offset, traitCostMod("untrustworthy", 125e5), 1.26, "eden");
          },
          Mythril(offset) {
            return spaceCostMultiplier("eternal_bank", offset, traitCostMod("untrustworthy", 75e5), 1.26, "eden");
          }
        },
        effect() {
          let vault = spatialReasoning(bank_vault() * (global.race["warlord"] ? 20 : 10));
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
            vault *= 1 + (p_on["corruptor"] || 0) * 0.08;
          }
          vault = (+vault.toFixed(0)).toLocaleString();
          return loc("plus_max_resource", [`$${vault}`, loc("resource_Money_name")]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("eternal_bank", "eden");
            global["resource"]["Money"].max += spatialReasoning(bank_vault() * (global.race["warlord"] ? 20 : 10));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["eternal_bank", "eden"]
          };
        }
      },
      archive: {
        id: "eden-archive",
        title() {
          return global.eden["archive"] && global.eden.archive.count >= 10 ? loc("eden_archive_bd") : loc("eden_archive_title");
        },
        desc() {
          return `<div>${loc("eden_archive_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { elysium: 14 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("archive", offset, 375e7, 1.26, "eden");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("archive", offset, 9e7, 1.26, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("archive", offset, 5e4, 1.26, "eden");
          },
          Elysanite(offset) {
            return spaceCostMultiplier("archive", offset, 35e6, 1.26, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("archive", offset, 99, 1.26, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("plus_max_resource", [1013, global.resource.Omniscience.name])}</div>`;
          if (global.tech["elysium"] && global.tech.elysium >= 12) {
            desc += `<div>${loc("eden_restaurant_effect", [0.4, loc(`eden_restaurant_bd`)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(75);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("archive", "eden");
            powerOnNewStruct($(this)[0]);
            if (global.tech.elysium === 14) {
              global.tech.elysium = 15;
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["archive", "eden"]
          };
        }
      },
      north_pier: {
        id: "eden-north_pier",
        title() {
          return loc("eden_pier", [loc("north")]);
        },
        desc(wiki) {
          if (wiki || !global.eden.hasOwnProperty("rune_gate") || global.eden.north_pier.count < 10) {
            return `<div>${loc("eden_pier", [loc("north")])}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("eden_pier", [loc("north")])}</div>`;
          }
        },
        reqs: { isle: 2 },
        queue_complete() {
          return 10 - global.eden.north_pier.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("north_pier") ? global.eden.north_pier.count : 0) < 10 ? 75e8 : 0;
            }
            return !global.eden.hasOwnProperty("north_pier") || global.eden.north_pier.count < 10 ? 75e8 : 0;
          },
          Iron(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("north_pier") ? global.eden.north_pier.count : 0) < 10 ? 5e8 : 0;
            }
            return !global.eden.hasOwnProperty("north_pier") || global.eden.north_pier.count < 10 ? 5e8 : 0;
          },
          Plywood(offset) {
            if (global.race["kindling_kindred"] || global.race["smoldering"]) {
              return 0;
            }
            if (offset) {
              return offset + (global.eden.hasOwnProperty("north_pier") ? global.eden.north_pier.count : 0) < 10 ? 25e7 : 0;
            }
            return !global.eden.hasOwnProperty("north_pier") || global.eden.north_pier.count < 10 ? 25e7 : 0;
          },
          Sheet_Metal(offset) {
            if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
              return 0;
            }
            if (offset) {
              return offset + (global.eden.hasOwnProperty("north_pier") ? global.eden.north_pier.count : 0) < 10 ? 625e5 : 0;
            }
            return !global.eden.hasOwnProperty("north_pier") || global.eden.north_pier.count < 10 ? 625e5 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("north_pier") ? global.eden.north_pier.count : 0);
          if (count >= 10) {
            let desc = `<div>${loc("eden_pier_effect", [loc("eden_pier", [loc("south")]), loc("eden_isle_name")])}</div>`;
            return desc;
          } else {
            let size = 10;
            let remain = size - count;
            return `<div>${loc("eden_pier_effect", [loc("eden_pier", [loc("south")]), loc("eden_isle_name")])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.north_pier.count < 10 && payCosts($(this)[0])) {
            incrementStruct("north_pier", "eden");
            if (global.eden.south_pier.count === 10 && global.eden.north_pier.count === 10 && global.tech.isle === 2) {
              global.tech.isle = 3;
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["north_pier", "eden"]
          };
        }
      },
      rushmore: {
        id: "eden-rushmore",
        title() {
          return loc("eden_rushmore", [races[global.race.species].name]);
        },
        desc() {
          return `<div>${loc("eden_rushmore", [races[global.race.species].name])}</div>`;
        },
        reqs: { elysium: 16 },
        cost: {
          Money(o, wiki) {
            return global.eden?.rushmore?.count === 0 || wiki ? 55e9 : 0;
          },
          Stone(o, wiki) {
            return global.eden?.rushmore?.count === 0 || wiki ? 1e10 : 0;
          }
        },
        queue_complete() {
          return 1 - (global.eden?.rushmore?.count || 0);
        },
        effect() {
          return `<div>${loc("space_red_vr_center_effect2", [10])}</div>`;
        },
        action(args) {
          if (global.eden.rushmore.count === 0 && payCosts($(this)[0])) {
            incrementStruct("rushmore", "eden");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["rushmore", "eden"]
          };
        },
        flair() {
          return loc("eden_rushmore_flair");
        }
      },
      reincarnation: {
        id: "eden-reincarnation",
        title() {
          return loc("eden_reincarnation_title");
        },
        desc() {
          return `<div>${loc("eden_reincarnation_title")}</div>`;
        },
        reqs: { elysium: 17 },
        cost: {
          Money(o) {
            return global.eden?.reincarnation?.count === 0 ? 35e9 : global.eden?.reincarnation?.count === 1 ? 5e9 : 0;
          },
          Aluminium(o) {
            return global.eden?.reincarnation?.count === 0 ? 1e10 : 0;
          },
          Nano_Tube(o) {
            return global.eden?.reincarnation?.count === 0 ? 2e9 : 0;
          },
          Asphodel_Powder(o) {
            return global.eden?.reincarnation?.count === 0 ? 75e4 : 0;
          }
        },
        queue_complete() {
          return 1 - (global.eden?.reincarnation?.count || 0);
        },
        effect() {
          return `<div>${loc("eden_reincarnation_effect", [races[global.race.species].name])}</div>`;
        },
        action(args) {
          if (global.eden.reincarnation.count === 0 && payCosts($(this)[0])) {
            incrementStruct("reincarnation", "eden");
            return true;
          } else if (global.eden.reincarnation.count === 1 && global["resource"][global.race.species].max > global["resource"][global.race.species].amount && payCosts($(this)[0])) {
            global["resource"][global.race.species].amount++;
            global.civic[global.civic.d_job].workers++;
            if (global.race["warlord"]) {
              global.stats.warlord.r = true;
              checkWarlordAchieve();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["reincarnation", "eden"]
          };
        },
        flair() {
          return loc("eden_reincarnation_flair");
        }
      },
      eden_cement: {
        id: "eden-eden_cement",
        title() {
          return loc("city_cement_plant");
        },
        desc() {
          return `<div>${loc("city_cement_plant_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { cement: 8 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("eden_cement", offset, 5e9, 1.24, "eden");
          },
          Stone(offset) {
            return spaceCostMultiplier("eden_cement", offset, 1e9, 1.24, "eden");
          },
          Iron(offset) {
            return spaceCostMultiplier("eden_cement", offset, 68e8, 1.24, "eden");
          },
          Asphodel_Powder(offset) {
            return spaceCostMultiplier("eden_cement", offset, 65e3, 1.24, "eden");
          }
        },
        effect() {
          let desc = loc("plus_max_resource", [jobScale(5), loc(`job_cement_worker`)]);
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(10);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("eden_cement", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["eden_cement", "eden"]
          };
        }
      }
    },
    eden_isle: {
      info: {
        name: loc("eden_isle_name"),
        desc: loc("eden_isle_desc")
      },
      south_pier: {
        id: "eden-south_pier",
        title() {
          return loc("eden_pier", [loc("south")]);
        },
        desc(wiki) {
          if (wiki || !global.eden.hasOwnProperty("rune_gate") || global.eden.south_pier.count < 10) {
            return `<div>${loc("eden_pier", [loc("south")])}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("eden_pier", [loc("south")])}</div>`;
          }
        },
        reqs: { isle: 2 },
        queue_complete() {
          return 10 - global.eden.south_pier.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("south_pier") ? global.eden.south_pier.count : 0) < 10 ? 75e8 : 0;
            }
            return !global.eden.hasOwnProperty("south_pier") || global.eden.south_pier.count < 10 ? 75e8 : 0;
          },
          Iron(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("south_pier") ? global.eden.south_pier.count : 0) < 10 ? 5e8 : 0;
            }
            return !global.eden.hasOwnProperty("south_pier") || global.eden.south_pier.count < 10 ? 5e8 : 0;
          },
          Plywood(offset) {
            if (global.race["kindling_kindred"] || global.race["smoldering"]) {
              return 0;
            }
            if (offset) {
              return offset + (global.eden.hasOwnProperty("south_pier") ? global.eden.south_pier.count : 0) < 10 ? 25e7 : 0;
            }
            return !global.eden.hasOwnProperty("south_pier") || global.eden.south_pier.count < 10 ? 25e7 : 0;
          },
          Sheet_Metal(offset) {
            if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
              return 0;
            }
            if (offset) {
              return offset + (global.eden.hasOwnProperty("south_pier") ? global.eden.south_pier.count : 0) < 10 ? 625e5 : 0;
            }
            return !global.eden.hasOwnProperty("south_pier") || global.eden.south_pier.count < 10 ? 625e5 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("south_pier") ? global.eden.south_pier.count : 0);
          if (count >= 10) {
            let desc = `<div>${loc("eden_pier_effect", [loc("eden_pier", [loc("north")]), loc("eden_elysium_name")])}</div>`;
            return desc;
          } else {
            let size = 10;
            let remain = size - count;
            return `<div>${loc("eden_pier_effect", [loc("eden_pier", [loc("north")]), loc("eden_elysium_name")])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.south_pier.count < 10 && payCosts($(this)[0])) {
            incrementStruct("south_pier", "eden");
            if (global.eden.south_pier.count === 10 && global.eden.north_pier.count === 10 && global.tech.isle === 2) {
              global.tech.isle = 3;
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["south_pier", "eden"]
          };
        }
      },
      west_tower: {
        id: "eden-west_tower",
        title() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.wt === 0 ? loc("eden_rampart_ruin", [loc("west")]) : loc("eden_rampart_title", [loc("west")]);
        },
        desc() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.wt === 0 ? loc("eden_rampart_ruin", [loc("west")]) : loc("eden_rampart_title", [loc("west")]);
        },
        queue_complete() {
          return 0;
        },
        reqs: { isle: 1 },
        effect() {
          if (global.eden["enemy_isle"] && global.eden.enemy_isle.wt === 0) {
            return `<div>${loc("eden_tower_destroyed")}</div>`;
          } else {
            return `<div>${loc("eden_tower_intact", [global.eden["enemy_isle"] ? global.eden.enemy_isle.wt : 100])}</div>`;
          }
        },
        action(args) {
          return false;
        }
      },
      isle_garrison: {
        id: "eden-isle_garrison",
        title() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.g === 0 ? loc("eden_garrison_ruin") : loc("eden_garrison_title");
        },
        desc() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.g === 0 ? loc("eden_garrison_ruin") : loc("eden_garrison_title");
        },
        queue_complete() {
          return 0;
        },
        reqs: { isle: 1 },
        effect() {
          if (global.eden["enemy_isle"] && global.eden.enemy_isle.g === 0) {
            return `<div>${loc("eden_tower_destroyed")}</div>`;
          } else {
            return `<div>${loc("eden_tower_intact", [global.eden["enemy_isle"] ? global.eden.enemy_isle.g : 100])}</div>`;
          }
        },
        action(args) {
          return false;
        }
      },
      east_tower: {
        id: "eden-east_tower",
        title() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.et === 0 ? loc("eden_rampart_ruin", [loc("east")]) : loc("eden_rampart_title", [loc("east")]);
        },
        desc() {
          return global.eden["enemy_isle"] && global.eden.enemy_isle.et === 0 ? loc("eden_rampart_ruin", [loc("east")]) : loc("eden_rampart_title", [loc("east")]);
        },
        queue_complete() {
          return 0;
        },
        reqs: { isle: 1 },
        effect() {
          if (global.eden["enemy_isle"] && global.eden.enemy_isle.et === 0) {
            return `<div>${loc("eden_tower_destroyed")}</div>`;
          } else {
            return `<div>${loc("eden_tower_intact", [global.eden["enemy_isle"] ? global.eden.enemy_isle.et : 100])}</div>`;
          }
        },
        action(args) {
          return false;
        }
      },
      spirit_vacuum: {
        id: "eden-spirit_vacuum",
        title() {
          return loc("eden_spirit_vacuum_title");
        },
        desc() {
          return `<div>${loc("eden_spirit_vacuum_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { isle: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("spirit_vacuum", offset, 3e10, 1.1, "eden");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("spirit_vacuum", offset, 175e6, 1.1, "eden");
          },
          Stanene(offset) {
            return spaceCostMultiplier("spirit_vacuum", offset, 1e9, 1.1, "eden");
          },
          Elerium(offset) {
            return spaceCostMultiplier("spirit_vacuum", offset, 24e4, 1.1, "eden");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("spirit_vacuum", offset, 1e3, 1.1, "eden");
          }
        },
        effect() {
          let desc = `<div>${loc("eden_spirit_vacuum_effect")}</div>`;
          if (global.eden.hasOwnProperty("palace") && global.eden.palace.rate > 0 && global.eden.palace.energy > 0) {
            desc += `<div>${loc(`eden_spirit_vacuum_time`, [timeFormat(global.eden.palace.energy / global.eden.palace.rate)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered(wiki) {
          let num_battery = wiki ? global.eden?.spirit_battery?.on ?? 0 : p_on["spirit_battery"] || 0;
          let factor = num_battery || 0;
          let coefficent = 0.9;
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 13) {
            coefficent = 1 - (1 + (p_on["corruptor"] || 0) * 0.03) / 10;
          }
          return +powerCostMod(18e3 * coefficent ** factor).toFixed(2);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("spirit_vacuum", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["spirit_vacuum", "eden"]
          };
        },
        flair() {
          return loc(`eden_spirit_vacuum_flair`);
        }
      },
      spirit_battery: {
        id: "eden-spirit_battery",
        title() {
          return loc("eden_spirit_battery_title");
        },
        desc() {
          return `<div>${loc("eden_spirit_battery_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { isle: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("spirit_battery", offset, 18e9, 1.2, "eden");
          },
          Copper(offset) {
            return spaceCostMultiplier("spirit_battery", offset, 5e9, 1.2, "eden");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("spirit_battery", offset, 5e7, 1.2, "eden");
          },
          Elysanite(offset) {
            return spaceCostMultiplier("spirit_battery", offset, 1e8, 1.2, "eden");
          }
        },
        effect() {
          let power = 10;
          let drain = 8;
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 13) {
            let multiplier = 1 + (p_on["corruptor"] || 0) * 0.03;
            power *= multiplier;
            drain *= multiplier;
          }
          let desc = `<div>${loc("eden_spirit_battery_effect", [loc("eden_spirit_vacuum_title"), +power.toFixed(2)])}</div>`;
          if (global.tech["isle"] && global.tech.isle >= 6) {
            desc += `<div>${loc("eden_spirit_battery_effect2", [loc("eden_spirit_vacuum_title"), +drain.toFixed(2)])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(500);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("spirit_battery", "eden");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["spirit_battery", "eden"]
          };
        }
      },
      soul_compactor: {
        id: "eden-soul_compactor",
        title() {
          return loc("eden_soul_compactor_title");
        },
        desc() {
          return `<div>${loc("eden_soul_compactor_title")}</div>`;
        },
        reqs: { isle: 7 },
        cost: {
          Money(o, wiki) {
            return global.eden?.soul_compactor?.count === 0 || wiki ? 5e10 : 0;
          },
          Iron(o, wiki) {
            return global.eden?.soul_compactor?.count === 0 || wiki ? global.race["warlord"] ? 1e10 : 225e8 : 0;
          },
          Uranium(o, wiki) {
            return global.eden?.soul_compactor?.count === 0 || wiki ? 4e6 : 0;
          },
          Scarletite(o, wiki) {
            return global.eden?.soul_compactor?.count === 0 || wiki ? 3e8 : 0;
          }
        },
        queue_complete() {
          return 1 - (global.eden?.soul_compactor?.count || 0);
        },
        effect() {
          let desc = `<div>${loc("eden_soul_compactor_effect1", [global.eden?.soul_compactor?.energy.toLocaleString() || 0])}</div>`;
          desc += `<div>${loc("eden_soul_compactor_effect2", [1e9.toLocaleString()])}</div>`;
          desc += `<div>${loc("eden_soul_compactor_effect3", [global.resource.Soul_Gem.name])}</div>`;
          return desc;
        },
        action(args) {
          if (global.eden.soul_compactor.count === 0 && payCosts($(this)[0])) {
            incrementStruct("soul_compactor", "eden");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, energy: 0, report: 0 },
            p: ["soul_compactor", "eden"]
          };
        },
        flair() {
          return loc(`eden_soul_compactor_flair`);
        }
      }
    },
    eden_palace: {
      info: {
        name: loc("eden_palace_name"),
        desc() {
          return loc("eden_palace_desc");
        },
        prop() {
          return `<span class="pad"><span v-html="$options.filters.filter(energy,'energy')"></span></span>`;
        },
        bind() {
          return global.eden.palace;
        },
        filter(v, type) {
          switch (type) {
            case "energy":
              return loc(`eden_palace_energy`, [v.toLocaleString()]);
          }
        }
      },
      scout_palace: {
        id: "eden-scout_palace",
        title: loc("eden_scout_palace_title"),
        desc: loc("eden_scout_palace_title"),
        reqs: { palace: 1 },
        grant: ["palace", 2],
        queue_complete() {
          return global.tech.palace >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 5e10;
          },
          Helium_3() {
            return global.race["warlord"] ? 5e6 : 0;
          },
          Deuterium() {
            return global.race["warlord"] ? 0 : 5e6;
          }
        },
        effect: loc("eden_scout_palace_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("eden_scout_palace_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      throne: {
        id: "eden-throne",
        title() {
          return loc("eden_abandoned_throne_title");
        },
        desc() {
          return loc("eden_abandoned_throne_title");
        },
        reqs: { palace: 2 },
        condition() {
          return global.tech.palace < 6 ? true : false;
        },
        queue_complete() {
          return false;
        },
        cost: {},
        effect: loc("eden_abandoned_throne_effect"),
        action(args) {
          return false;
        }
      },
      infuser: {
        id: "eden-infuser",
        title() {
          return loc("eden_infuser_title");
        },
        desc(wiki) {
          if (!global.eden.hasOwnProperty("infuser") || global.eden.infuser.count < 25 || wiki) {
            return `<div>${loc("eden_infuser_title")}</div><div class="has-text-special">${loc("requires_segments", [25])}</div>`;
          } else {
            return `<div>${loc("eden_infuser_title")}</div>`;
          }
        },
        reqs: { palace: 6 },
        queue_size: 5,
        queue_complete() {
          return 25 - global.eden.infuser.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("infuser") ? global.eden.infuser.count : 0) < 25 ? 12e9 : 0;
            }
            return !global.eden.hasOwnProperty("infuser") || global.eden.infuser.count < 25 ? 12e9 : 0;
          },
          Copper(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("infuser") ? global.eden.infuser.count : 0) < 25 ? 1e10 : 0;
            }
            return !global.eden.hasOwnProperty("infuser") || global.eden.infuser.count < 25 ? 1e10 : 0;
          },
          Graphene(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("infuser") ? global.eden.infuser.count : 0) < 25 ? 1e9 : 0;
            }
            return !global.eden.hasOwnProperty("infuser") || global.eden.infuser.count < 25 ? 1e9 : 0;
          },
          Elysanite(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("infuser") ? global.eden.infuser.count : 0) < 25 ? 125e6 : 0;
            }
            return !global.eden.hasOwnProperty("infuser") || global.eden.infuser.count < 25 ? 125e6 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("infuser") ? global.eden.infuser.count : 0);
          if (count >= 25) {
            let desc = `<div>${loc("eden_infuser_effect")}</div>`;
            return desc;
          } else {
            let size = 25;
            let remain = size - count;
            return `<div>${loc("eden_infuser_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.infuser.count < 25 && payCosts($(this)[0])) {
            incrementStruct("infuser", "eden");
            if (global.eden?.conduit?.count === 25 && global.eden?.infuser?.count === 25) {
              global.tech.palace = 7;
              global.eden["apotheosis"] = { count: 0 };
              renderEdenic();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["infuser", "eden"]
          };
        }
      },
      apotheosis: {
        id: "eden-apotheosis",
        title: loc("eden_apotheosis"),
        desc: loc("eden_apotheosis"),
        reqs: { palace: 7 },
        condition() {
          return global.eden.hasOwnProperty("apotheosis") && global.eden.apotheosis.count === 0;
        },
        queue_complete() {
          return 0;
        },
        no_multi: true,
        cost: {},
        effect() {
          let reward = apotheosisProjection();
          return `<div>${loc("eden_apotheosis_effect")}</div>${reward}`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.race["warlord"]) {
              global.stats.warlord.g = true;
              checkWarlordAchieve();
            }
            ascendLab(true);
            return true;
          }
          return false;
        }
      },
      conduit: {
        id: "eden-conduit",
        title() {
          return loc("eden_conduit_title");
        },
        desc(wiki) {
          if (!global.eden.hasOwnProperty("conduit") || global.eden.conduit.count < 25 || wiki) {
            return `<div>${loc("eden_conduit_title")}</div><div class="has-text-special">${loc("requires_segments", [25])}</div>`;
          } else {
            return `<div>${loc("eden_conduit_title")}</div>`;
          }
        },
        reqs: { palace: 5 },
        queue_size: 5,
        queue_complete() {
          return 25 - global.eden.conduit.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("conduit") ? global.eden.conduit.count : 0) < 25 ? 8e9 : 0;
            }
            return !global.eden.hasOwnProperty("conduit") || global.eden.conduit.count < 25 ? 25e9 : 0;
          },
          Stanene(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("conduit") ? global.eden.conduit.count : 0) < 25 ? 25e7 : 0;
            }
            return !global.eden.hasOwnProperty("conduit") || global.eden.conduit.count < 25 ? 25e7 : 0;
          },
          Orichalcum(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("conduit") ? global.eden.conduit.count : 0) < 25 ? 125e6 : 0;
            }
            return !global.eden.hasOwnProperty("conduit") || global.eden.conduit.count < 25 ? 125e6 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("conduit") ? global.eden.conduit.count : 0);
          if (count >= 25) {
            let desc = `<div>${loc("eden_conduit_done")}</div>`;
            return desc;
          } else {
            let size = 25;
            let remain = size - count;
            return `<div>${loc("eden_conduit_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.conduit.count < 25 && payCosts($(this)[0])) {
            incrementStruct("conduit", "eden");
            if (global.eden?.conduit?.count === 25 && global.eden?.infuser?.count === 25) {
              global.tech.palace = 7;
              global.eden["apotheosis"] = { count: 0 };
              renderEdenic();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["conduit", "eden"]
          };
        },
        flair() {
          return loc(`eden_conduit_flair`);
        }
      },
      tomb: {
        id: "eden-tomb",
        title() {
          return global.eden?.tomb?.count === 10 ? loc("eden_tomb_sealed") : loc("eden_tomb_title");
        },
        desc(wiki) {
          if (!global.eden.hasOwnProperty("tomb") || global.eden.tomb.count < 10 || wiki) {
            return `<div>${loc("eden_tomb_title")}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("eden_tomb_title")}</div>`;
          }
        },
        reqs: { palace: 3 },
        queue_complete() {
          return 10 - global.eden.tomb.count;
        },
        cost: {
          Money(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("tomb") ? global.eden.tomb.count : 0) < 10 ? 25e9 : 0;
            }
            return !global.eden.hasOwnProperty("tomb") || global.eden.tomb.count < 10 ? 25e9 : 0;
          },
          Cement(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("tomb") ? global.eden.tomb.count : 0) < 10 ? 1e10 : 0;
            }
            return !global.eden.hasOwnProperty("tomb") || global.eden.tomb.count < 10 ? 1e10 : 0;
          },
          Neutronium(offset) {
            if (offset) {
              return offset + (global.eden.hasOwnProperty("tomb") ? global.eden.tomb.count : 0) < 10 ? 1e8 : 0;
            }
            return !global.eden.hasOwnProperty("tomb") || global.eden.tomb.count < 10 ? 1e8 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.eden.hasOwnProperty("tomb") ? global.eden.tomb.count : 0);
          if (count >= 10) {
            let desc = `<div>${loc("eden_tomb_effect")}</div>`;
            return desc;
          } else {
            let size = 10;
            let remain = size - count;
            return `<div>${loc("eden_tomb_constuct")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.eden.tomb.count < 10 && payCosts($(this)[0])) {
            incrementStruct("tomb", "eden");
            if (global.eden.tomb.count === 10 && global.tech.palace === 3) {
              global.tech.palace = 4;
              renderEdenic();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["tomb", "eden"]
          };
        },
        flair() {
          return loc(`eden_tomb_flair`);
        }
      }
    }
  };
  function apotheosisProjection() {
    let gains = calcPrestige("apotheosis");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_name") : loc("resource_Plasmid_name");
    let desc = `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div>`;
    desc += `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.supercoiled, loc("resource_Supercoiled_plural_name")])}</div>`;
    if (global.race["warlord"]) {
      desc += `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.artifact, loc("resource_Artifact_name")])}</div>`;
    }
    return desc;
  }
  function deadCalc(dead, armySize) {
    let armor = armorCalc(dead);
    dead -= Math.floor(seededRandom(0, armor, true));
    if (dead > armySize) {
      dead = armySize;
    } else if (dead < 0) {
      dead = 0;
    }
    return Math.floor(dead);
  }
  function edenicTech() {
    return edenicModules;
  }
  function renderEdenic() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 7)) {
      return;
    }
    let parent = $("#eden");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc("tab_eden")}</h2>`));
    if (!global.tech["edenic"] || global.tech.edenic < 3) {
      return;
    }
    Object.keys(edenicModules).forEach(function(region) {
      let show = region.replace("eden_", "");
      if (global.settings.eden[`${show}`]) {
        let name = typeof edenicModules[region].info.name === "string" ? edenicModules[region].info.name : edenicModules[region].info.name();
        let property = ``;
        if (edenicModules[region].info.hasOwnProperty("prop")) {
          property = edenicModules[region].info.prop();
        }
        let bind = false;
        if (edenicModules[region].info.hasOwnProperty("bind")) {
          bind = edenicModules[region].info.bind();
        }
        if (edenicModules[region].info["support"]) {
          let support = edenicModules[region].info["support"];
          if (edenicModules[region].info["hide_support"]) {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
          } else {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3> <span v-show="s_max">{{ support }}/{{ s_max }}</span>${property}</div></div>`);
          }
          vBind({
            el: `#sr${region}`,
            data: bind ? bind : global.eden[support],
            filters: {
              filter() {
                return edenicModules[region].info.filter(...arguments);
              }
            }
          });
        } else if (bind) {
          parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
          vBind({
            el: `#sr${region}`,
            data: bind,
            filters: {
              filter() {
                return edenicModules[region].info.filter(...arguments);
              }
            }
          });
        } else {
          parent.append(`<div id="${region}" class="space"><div><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
        }
        popover(
          region,
          function() {
            return typeof edenicModules[region].info.desc === "string" ? edenicModules[region].info.desc : edenicModules[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        Object.keys(edenicModules[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(edenicModules, region, tech)) {
            let c_action = edenicModules[region][tech];
            setAction(c_action, "eden", tech);
          }
        });
      }
    });
  }
  function asphodelResist() {
    if (global.tech["asphodel"] && global.tech.asphodel >= 5) {
      let resist = global.tech.asphodel >= 6 ? 0.34 : 0.67;
      if (global.eden["mech_station"] && global.eden.mech_station.count >= 10) {
        resist = 0.34 + global.eden.mech_station.effect * 66e-4;
      }
      return resist;
    }
    return 1;
  }
  function mechStationEffect() {
    if (global.eden.mech_station.count < 10 || global.eden.mech_station.mode === 0) {
      global.eden.mech_station.effect = 0;
      global.eden.mech_station.mechs = 0;
      return;
    }
    let hostility = 0;
    hostility += global.eden.asphodel_harvester.on * 4;
    hostility += global.civic.ghost_trapper.workers;
    let rawHostility = hostility;
    let targetHostility = 0;
    if (global.eden.mech_station.mode === 1) {
      targetHostility = Math.ceil(hostility * 0.66);
    } else if (global.eden.mech_station.mode === 2) {
      targetHostility = Math.ceil(hostility * 0.33);
    } else if (global.eden.mech_station.mode === 4) {
      hostility *= 1.25;
      rawHostility *= 1.25;
    } else if (global.eden.mech_station.mode === 5) {
      hostility *= 1.5;
      rawHostility *= 1.5;
    }
    let mechs = 0;
    for (let i = 0; i < global.portal.mechbay.active; i++) {
      let mech = global.portal.mechbay.mechs[i];
      if (mech.size !== "collector" && hostility > targetHostility) {
        hostility -= mechRating(mech, true) * 12500;
        mechs++;
      }
    }
    if (hostility < 0) {
      hostility = 0;
    }
    global.eden.mech_station.mechs = mechs;
    global.eden.mech_station.effect = 100 - Math.floor(hostility / rawHostility * 100);
    if (global.eden.mech_station.effect === 100 && global.eden.mech_station.mode === 4) {
      global.eden.mech_station.effect = 110;
    } else if (global.eden.mech_station.effect === 100 && global.eden.mech_station.mode === 5) {
      global.eden.mech_station.effect = 120;
    }
  }

  // src/index.js
  function mainVue() {
    vBind({
      el: "#mainColumn div:first-child",
      data: {
        s: global.settings
      },
      methods: {
        swapTab(tab) {
          if (!global.settings.tabLoad) {
            loadTab(tab);
          }
          return tab;
        },
        saveImport() {
          if ($("#importExport").val().length > 0) {
            importGame($("#importExport").val());
          }
        },
        saveExport() {
          $("#importExport").val(window.exportGame());
          $("#importExport").select();
          document.execCommand("copy");
        },
        saveExportFile() {
          const downloadToFile = (content, filename, contentType) => {
            const a = document.createElement("a");
            const file = new Blob([content], { type: contentType });
            a.href = URL.createObjectURL(file);
            a.download = filename;
            a.click();
            URL.revokeObjectURL(a.href);
          };
          const date2 = /* @__PURE__ */ new Date();
          const year = date2.getFullYear();
          const month = (date2.getMonth() + 1).toFixed(0).padStart(2, "0");
          const day = date2.getDate().toFixed(0).padStart(2, "0");
          const hour = date2.getHours().toFixed(0).padStart(2, "0");
          const minute = date2.getMinutes().toFixed(0).padStart(2, "0");
          downloadToFile(window.exportGame(), `evolve-${year}-${month}-${day}-${hour}-${minute}.txt`, "text/plain");
        },
        importStringFile() {
          let file = document.getElementById("stringPackFile").files[0];
          if (file) {
            let reader = new FileReader();
            let fileName = document.getElementById("stringPackFile").files[0].name;
            reader.readAsText(file, "UTF-8");
            reader.onload = function(evt) {
              try {
                JSON.parse(evt.target.result);
              } catch {
                global.settings.sPackMsg = loc(`string_pack_error`, [fileName]);
                return;
              }
              global.settings.sPackMsg = loc(`string_pack_using`, [fileName]);
              save.setItem("string_pack_name", fileName);
              save.setItem("string_pack", LZString.compressToUTF16(evt.target.result));
              if (global.settings.sPackOn) {
                global.queue.rename = true;
                save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
                if (webWorker.w) {
                  webWorker.w.terminate();
                }
                window.location.reload();
              }
            };
            reader.onerror = function(evt) {
              console.error("error reading file");
            };
          }
        },
        clearStringFile() {
          if (save.getItem("string_pack")) {
            global.settings.sPackMsg = loc(`string_pack_none`);
            save.removeItem("string_pack_name");
            save.removeItem("string_pack");
            if (global.settings.sPackOn) {
              global.queue.rename = true;
              save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
              if (webWorker.w) {
                webWorker.w.terminate();
              }
              window.location.reload();
            }
          }
        },
        stringPackOn() {
          if (save.getItem("string_pack")) {
            global.queue.rename = true;
            save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
            if (webWorker.w) {
              webWorker.w.terminate();
            }
            window.location.reload();
          }
        },
        restoreGame() {
          let restore_data = save.getItem("evolveBak") || false;
          this.$buefy.dialog.confirm({
            title: loc("restore"),
            message: loc("restore_warning"),
            ariaModal: true,
            confirmText: loc("restore"),
            onConfirm() {
              if (restore_data) {
                importGame(restore_data, true);
              }
            }
          });
        },
        lChange(locale) {
          global.settings.locale = locale;
          global.queue.rename = true;
          save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
          if (webWorker.w) {
            webWorker.w.terminate();
          }
          window.location.reload();
        },
        setTheme(theme) {
          global.settings.theme = theme;
          $("html").removeClass();
          $("html").addClass(theme);
          $("html").addClass(global.settings.font);
        },
        numNotation(notation) {
          global.settings.affix = notation;
        },
        setQueueStyle(style) {
          global.settings.queuestyle = style;
          updateQueueStyle();
        },
        setQueueResize(mode) {
          global.settings.q_resize = mode;
        },
        icon(icon) {
          global.settings.icon = icon;
          save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
          if (webWorker.w) {
            webWorker.w.terminate();
          }
          window.location.reload();
        },
        remove(index2) {
          global.r_queue.queue.splice(index2, 1);
        },
        font(f) {
          global.settings.font = f;
          $(`html`).removeClass("standard");
          $(`html`).removeClass("large_log");
          $(`html`).removeClass("large_all");
          $("html").addClass(f);
        },
        q_merge(merge) {
          global.settings.q_merge = merge;
        },
        toggleTabLoad() {
          initTabs();
        },
        unpause() {
          $(`#pausegame`).removeClass("play");
          $(`#pausegame`).removeClass("pause");
          if (global.settings.pause) {
            $(`#pausegame`).addClass("pause");
          } else {
            $(`#pausegame`).addClass("play");
          }
          if (!global.settings.pause && !webWorker.s) {
            gameLoop("start");
          }
        }
      },
      filters: {
        namecase(name) {
          return name.replace(/(?:^|\s)\w/g, function(match) {
            return match.toUpperCase();
          });
        },
        label(lbl) {
          return tabLabel(lbl);
        },
        sPack() {
          return global.settings.sPackMsg;
        },
        notation(n) {
          switch (n) {
            case "si":
              return loc(`metric`);
            case "sci":
              return loc(`scientific`);
            case "eng":
              return loc(`engineering`);
            case "sln":
              return loc(`sln`);
          }
        }
      }
    });
    ["1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17"].forEach(function(k) {
      popover(
        `settings${k}`,
        function() {
          return loc(`settings${k}`);
        },
        {
          elm: `#settings span.settings${k}`
        }
      );
    });
    let example = `<div class="example">{
  "year": "Galactic Standard Year",
  "resource_Food_name": "Nom Noms"
}</div>`;
    popover(
      `stringPack`,
      function() {
        return loc(`string_example`, [example]);
      }
    );
  }
  function tabLabel(lbl) {
    switch (lbl) {
      case "city":
        if (global.resource[global.race.species]) {
          if (global.resource[global.race.species].amount <= 5) {
            return loc("tab_city1");
          } else if (global.resource[global.race.species].amount <= 20) {
            return loc("tab_city2");
          } else if (global.resource[global.race.species].amount <= 75) {
            return loc("tab_city3");
          } else if (global.resource[global.race.species].amount <= 250) {
            return loc("tab_city4");
          } else if (global.resource[global.race.species].amount <= 600) {
            return loc("tab_city5");
          } else if (global.resource[global.race.species].amount <= 1200) {
            return loc("tab_city6");
          } else if (global.resource[global.race.species].amount <= 2500) {
            return loc("tab_city7");
          } else {
            return loc("tab_city8");
          }
        } else {
          return loc("tab_city1");
        }
      case "local_space":
        return loc("sol_system", [global.race["truepath"] ? races[global.race.species].home : flib("name")]);
      case "outer_local_space":
        return loc("outer_sol_system", [global.race["truepath"] ? races[global.race.species].home : flib("name")]);
      case "old":
        return loc("tab_old_res");
      case "new":
        return loc("tab_new_res");
      case "old_sr":
        return loc("tab_old_sr_res");
      case "new_sr":
        return loc("tab_new_sr_res");
      case "tab_mech":
        return global.race["warlord"] ? loc("tab_artificer") : loc(lbl);
      default:
        return loc(lbl);
    }
  }
  function updateQueueStyle() {
    const buildingQueue = $("#buildQueue");
    ["standardqueuestyle", "listqueuestyle", "bulletlistqueuestyle", "numberedlistqueuestyle"].forEach((qstyle) => {
      if (global.settings.queuestyle === qstyle) {
        buildingQueue.addClass(qstyle);
      } else {
        buildingQueue.removeClass(qstyle);
      }
    });
  }
  function initTabs() {
    if (global.settings.tabLoad) {
      loadTab(`mTabCivil`);
      loadTab(`mTabCivic`);
      loadTab(`mTabResearch`);
      loadTab(`mTabResource`);
      loadTab(`mTabArpa`);
      loadTab(`mTabStats`);
      loadTab(`mTabObserve`);
    } else {
      loadTab(global.settings.civTabs);
    }
  }
  function loadTab(tab) {
    if (!global.settings.tabLoad) {
      clearResDrag();
      clearGrids();
      clearMechDrag();
      clearGeneticsDrag();
      clearSpyopDrag();
      clearShipDrag();
      clearElement($(`#mTabCivil`));
      clearElement($(`#mTabCivic`));
      clearElement($(`#mTabResearch`));
      clearElement($(`#mTabResource`));
      clearElement($(`#mTabArpa`));
      clearElement($(`#mTabStats`));
      clearElement($(`#mTabObserve`));
    } else {
      tagEvent("page_view", { page_title: `Evolve - All Tabs` });
    }
    switch (tab) {
      case 0:
        if (!global.settings.tabLoad) {
          tagEvent("page_view", { page_title: `Evolve - Evolution` });
          drawEvolution();
        }
        break;
      case 1:
      case "mTabCivil":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Civilization` });
          }
          $(`#mTabCivil`).append(`<b-tabs class="resTabs" v-model="s.spaceTabs" :animated="s.animated" @input="swapTab">
                    <b-tab-item id="city" :visible="s.showCity">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'city' | label }}</h2>
                            <span aria-hidden="true">{{ 'city' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="space" :visible="s.showSpace">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'local_space' | label }}</h2>
                            <span aria-hidden="true">{{ 'local_space' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="interstellar" :visible="s.showDeep">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_interstellar' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_interstellar' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="galaxy" :visible="s.showGalactic">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_galactic' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_galactic' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="portal" :visible="s.showPortal">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_portal' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_portal' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="outerSol" :visible="s.showOuter">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'outer_local_space' | label }}</h2>
                            <span aria-hidden="true">{{ 'outer_local_space' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="tauceti" :visible="s.showTau">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_tauceti' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_tauceti' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="eden" :visible="s.showEden">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_eden' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_eden' | label }}</span>
                        </template>
                    </b-tab-item>
                </b-tabs>`);
          vBind({
            el: `#mTabCivil`,
            data: {
              s: global.settings
            },
            methods: {
              swapTab(tab2) {
                if (!global.settings.tabLoad) {
                  clearElement($(`#city`));
                  clearElement($(`#space`));
                  clearElement($(`#interstellar`));
                  clearElement($(`#galaxy`));
                  clearElement($(`#portal`));
                  clearElement($(`#outerSol`));
                  clearElement($(`#tauCeti`));
                  clearElement($(`#eden`));
                  switch (tab2) {
                    case 0:
                      drawCity();
                      break;
                    case 1:
                    case 2:
                    case 3:
                    case 5:
                      renderSpace();
                      break;
                    case 4:
                      renderFortress();
                      break;
                    case 6:
                      renderTauCeti();
                      break;
                    case 7:
                      renderEdenic();
                      break;
                  }
                }
                return tab2;
              }
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          if (global.race.species !== "protoplasm") {
            drawCity();
            renderSpace();
            renderFortress();
            renderTauCeti();
            renderEdenic();
          }
          if (global.race["noexport"]) {
            if (global.race["noexport"] === "Race") {
              clearElement($(`#city`));
              ascendLab();
            } else if (global.race["noexport"] === "Hybrid") {
              clearElement($(`#city`));
              ascendLab(true);
            } else if (global.race["noexport"] === "Planet") {
              clearElement($(`#city`));
              terraformLab();
            }
          }
        }
        break;
      case 2:
      case "mTabCivic":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Civics` });
          }
          $(`#mTabCivic`).append(`<b-tabs class="resTabs" v-model="s.govTabs" :animated="s.animated" @input="swapTab">
                    <b-tab-item id="civic">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_gov' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_gov' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="industry" class="industryTab" :visible="s.showIndustry">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_industry' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_industry' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="powerGrid" class="powerGridTab" :visible="s.showPowerGrid">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_power_grid' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_power_grid' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="military" class="militaryTab" :visible="s.showMil">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_military' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_military' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="mechLab" class="mechTab" :visible="s.showMechLab">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_mech' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_mech' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="dwarfShipYard" class="ShipYardTab" :visible="s.showShipYard">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_shipyard' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_shipyard' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="psychicPowers" class="psychicTab" :visible="s.showPsychic">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_psychic' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_psychic' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="supernatural" class="supernaturalTab" :visible="s.showWish">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'tab_supernatural' | label }}</h2>
                            <span aria-hidden="true">{{ 'tab_supernatural' | label }}</span>
                        </template>
                    </b-tab-item>
                </b-tabs>`);
          vBind({
            el: `#mTabCivic`,
            data: {
              s: global.settings
            },
            methods: {
              swapTab(tab2) {
                if (!global.settings.tabLoad) {
                  clearGrids();
                  clearSpyopDrag();
                  clearMechDrag();
                  clearShipDrag();
                  clearElement($(`#civic`));
                  clearElement($(`#industry`));
                  clearElement($(`#powerGrid`));
                  clearElement($(`#military`));
                  clearElement($(`#mechLab`));
                  clearElement($(`#dwarfShipYard`));
                  clearElement($(`#psychicPowers`));
                  clearElement($(`#supernatural`));
                  switch (tab2) {
                    case 0:
                      {
                        $("#civic").append($('<div id="civics" class="tile is-parent"></div>'));
                        defineJobs();
                        $("#civics").append($('<div id="r_civics" class="tile is-vertical is-parent civics"></div>'));
                        defineGovernment();
                        if (global.race.species !== "protoplasm" && !global.race["start_cataclysm"]) {
                          commisionGarrison();
                          buildGarrison($("#c_garrison"), false);
                          foreignGov();
                        }
                        if (global.race["shapeshifter"]) {
                          shapeShift(false, true);
                        }
                      }
                      break;
                    case 1:
                      defineIndustry();
                      break;
                    case 2:
                      {
                        Object.keys(gridDefs()).forEach(function(gridtype) {
                          powerGrid(gridtype);
                        });
                        setPowerGrid();
                      }
                      break;
                    case 3:
                      if (global.race.species !== "protoplasm" && !global.race["start_cataclysm"]) {
                        defineGarrison();
                        if (!global.race["warlord"]) {
                          buildFortress($("#fortress"), false);
                        }
                      }
                      break;
                    case 4:
                      if (global.race.species !== "protoplasm" && !global.race["start_cataclysm"]) {
                        drawMechLab();
                      }
                      break;
                    case 5:
                      if (global.race["truepath"] && global.race.species !== "protoplasm" && !global.race["start_cataclysm"]) {
                        drawShipYard();
                      }
                      break;
                    case 6:
                      if (global.race["psychic"] && global.tech["psychic"] && global.race.species !== "protoplasm") {
                        renderPsychicPowers();
                      }
                      break;
                    case 7:
                      if ((global.race["wish"] && global.tech["wish"] || global.race["ocular_power"]) && global.race.species !== "protoplasm") {
                        renderSupernatural();
                      }
                      break;
                  }
                }
                return tab2;
              }
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          Object.keys(gridDefs()).forEach(function(gridtype) {
            powerGrid(gridtype);
          });
          setPowerGrid();
          $("#civic").append($('<div id="civics" class="tile is-parent"></div>'));
          defineJobs();
          $("#civics").append($('<div id="r_civics" class="tile is-vertical is-parent civics"></div>'));
          defineGovernment();
          if (global.race.species !== "protoplasm" && !global.race["start_cataclysm"]) {
            defineGarrison();
            buildGarrison($("#c_garrison"), false);
            if (!global.race["warlord"]) {
              buildFortress($("#fortress"), false);
            }
            foreignGov();
            drawMechLab();
            if (global.race["truepath"]) {
              drawShipYard();
            }
            if (global.race["psychic"] && global.tech["psychic"]) {
              renderPsychicPowers();
            }
            if (global.race["wish"] && global.tech["wish"] || global.race["ocular_power"]) {
              renderSupernatural();
            }
          }
          if (global.race["shapeshifter"]) {
            shapeShift(false, true);
          }
          defineIndustry();
        }
        break;
      case 3:
      case "mTabResearch":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Research` });
          }
          $(`#mTabResearch`).append(`<div id="resQueue" class="resQueue" v-show="rq.display"></div>
                <b-tabs class="resTabs" v-model="s.resTabs" :animated="s.animated">
                    <b-tab-item id="tech">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'new_sr' | label }}</h2>
                            <span aria-hidden="true">{{ 'new' | label }}</span>
                        </template>
                    </b-tab-item>
                    <b-tab-item id="oldTech">
                        <template slot="header">
                            <h2 class="is-sr-only">{{ 'old_sr' | label }}</h2>
                            <span aria-hidden="true">{{ 'old' | label }}</span>
                        </template>
                    </b-tab-item>
                </b-tabs>`);
          vBind({
            el: `#mTabResearch`,
            data: {
              s: global.settings,
              rq: global.r_queue
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          resQueue();
          if (global.race.species !== "protoplasm") {
            drawTech();
          }
        }
        break;
      case 4:
      case "mTabResource":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Resources` });
          }
          $(`#mTabResource`).append(`<b-tabs class="resTabs" v-model="s.marketTabs" :animated="s.animated" @input="swapTab">
                    <b-tab-item id="market" :visible="s.showMarket">
                        <template slot="header">
                            {{ 'tab_market' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="resStorage" :visible="s.showStorage">
                        <template slot="header">
                            {{ 'tab_storage' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="resEjector" :visible="s.showEjector">
                        <template slot="header">
                            {{ 'tab_ejector' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="resCargo" :visible="s.showCargo">
                        <template slot="header">
                            {{ 'tab_cargo' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="resAlchemy" :visible="s.showAlchemy">
                        <template slot="header">
                            {{ 'tab_alchemy' | label }}
                        </template>
                    </b-tab-item>
                </b-tabs>`);
          vBind({
            el: `#mTabResource`,
            data: {
              s: global.settings
            },
            methods: {
              swapTab(tab2) {
                if (!global.settings.tabLoad) {
                  clearElement($(`#market`));
                  clearElement($(`#resStorage`));
                  clearElement($(`#resEjector`));
                  clearElement($(`#resCargo`));
                  clearElement($(`#resAlchemy`));
                  switch (tab2) {
                    case 0:
                      {
                        drawResourceTab("market");
                      }
                      break;
                    case 1:
                      {
                        drawResourceTab("storage");
                      }
                      break;
                    case 2:
                      {
                        drawResourceTab("ejector");
                      }
                      break;
                    case 3:
                      {
                        drawResourceTab("supply");
                      }
                      break;
                    case 4:
                      {
                        drawResourceTab("alchemy");
                      }
                      break;
                  }
                }
                return tab2;
              }
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          initResourceTabs();
          if (tmp_vars.hasOwnProperty("resource")) {
            Object.keys(tmp_vars.resource).forEach(function(name) {
              let color = tmp_vars.resource[name].color;
              let tradable = tmp_vars.resource[name].tradable;
              let stackable = tmp_vars.resource[name].stackable;
              if (stackable) {
                var market_item = $(`<div id="stack-${name}" class="market-item" v-show="display"></div>`);
                $("#resStorage").append(market_item);
                containerItem(`#stack-${name}`, market_item, name, color, true);
              }
              if (tradable) {
                var market_item = $(`<div id="market-${name}" class="market-item" v-show="r.display"></div>`);
                $("#market").append(market_item);
                marketItem(`#market-${name}`, market_item, name, color, true);
              }
              if (atomic_mass[name]) {
                loadEjector(name, color);
              }
              if (supplyValue[name]) {
                loadSupply(name, color);
              }
              if (tradeRatio[name] && global.race.universe === "magic") {
                global["resource"][name]["basic"] = tradable;
                loadAlchemy(name, color, tradable);
              }
            });
          }
          tradeSummery();
        }
        break;
      case 5:
      case "mTabArpa":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Arpa` });
          }
          $(`#mTabArpa`).append(`<div id="apra" class="arpa">
                    <b-tabs class="resTabs" v-model="s.arpa.arpaTabs" :animated="s.animated">
                        <b-tab-item id="arpaPhysics" :visible="s.arpa.physics" label="${loc("tab_arpa_projects")}"></b-tab-item>
                        <b-tab-item id="arpaGenetics" :visible="s.arpa.genetics" label="${loc(global.race["artifical"] ? "tab_arpa_machine" : "tab_arpa_genetics")}"></b-tab-item>
                        <b-tab-item id="arpaCrispr" :visible="s.arpa.crispr" label="${loc("tab_arpa_crispr")}"></b-tab-item>
                        <b-tab-item id="arpaBlood" :visible="s.arpa.blood" label="${loc("tab_arpa_blood")}"></b-tab-item>
                    </b-tabs>
                </div>`);
          vBind({
            el: `#mTabArpa`,
            data: {
              s: global.settings
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          arpa("Physics");
          arpa("Genetics");
          arpa("Crispr");
          arpa("Blood");
        }
        break;
      case 6:
      case "mTabStats":
        {
          if (!global.settings.tabLoad) {
            tagEvent("page_view", { page_title: `Evolve - Stats` });
          }
          $(`#mTabStats`).append(`<b-tabs class="resTabs" v-model="s.statsTabs" :animated="s.animated">
                    <b-tab-item id="stats">
                        <template slot="header">
                            {{ 'tab_stats' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="achieve">
                        <template slot="header">
                            {{ 'tab_achieve' | label }}
                        </template>
                    </b-tab-item>
                    <b-tab-item id="perks">
                        <template slot="header">
                            {{ 'tab_perks' | label }}
                        </template>
                    </b-tab-item>
                </b-tabs>`);
          vBind({
            el: `#mTabStats`,
            data: {
              s: global.settings
            },
            filters: {
              label(lbl) {
                return tabLabel(lbl);
              }
            }
          });
          setupStats2();
        }
        break;
      case 7:
        if (!global.settings.tabLoad) {
          tagEvent("page_view", { page_title: `Evolve - Settings` });
        }
        break;
      case "mTabObserve":
      default:
        if (!global.settings.tabLoad) {
          tagEvent("page_view", { page_title: `Evolve - Hell Observation` });
        }
        if (global.portal.observe) {
          drawHellObservations(true);
        }
        break;
    }
    if ($(`#popper`).length > 0 && $(`#${$(`#popper`).data("id")}`).length === 0) {
      clearPopper();
    }
  }
  function index() {
    clearElement($("body"));
    $("html").addClass(global.settings.font);
    $("body").append(`<div id="topBar" class="topBar">
        <h2 class="is-sr-only">Top Bar</h2>
        <span class="planetWrap">
            <span class="planet">{{ race.species | planet }}</span>
            <span class="universe" v-show="showUniverse()">{{ race.universe | universe }}</span>
            <span class="pet" id="playerPet" v-show="showPet()" @click="petPet()"></span>
            <span class="simulation" v-show="showSim()">${loc(`evo_challenge_simulation`)}</span>
        </span>
        <span class="calendar">
            <span class="infoTimer" id="infoTimer"></span>
            <span v-show="city.calendar.day">
                <span class="is-sr-only" v-html="sign()"></span><span id="astroSign" class="astro" v-html="getAstroSign()"></span>
                <b-tooltip :label="moon()" :aria-label="moon()" position="is-bottom" size="is-small" multilined animated><i id="moon" class="moon wi"></i></b-tooltip>
                <span class="year">${loc("year")} <span class="has-text-warning">{{ city.calendar.year }}</span></span>
                <span class="day">${loc("day")} <span class="has-text-warning">{{ city.calendar.day }}</span></span>
                <span class="season">{{ season() }}</span>
                <b-tooltip :label="weather()" :aria-label="weather()" position="is-bottom" size="is-small" multilined animated><i id="weather" class="weather wi"></i></b-tooltip>
                <b-tooltip :label="temp()" :aria-label="temp()" position="is-bottom" size="is-small" multilined animated><i id="temp" class="temp wi"></i></b-tooltip>
                <b-tooltip :label="atRemain()" v-show="s.at" :aria-label="atRemain()" position="is-bottom" size="is-small" multilined animated><span class="atime has-text-caution">{{ s.at | remain }}</span></b-tooltip>
                <span role="button" class="atime" style="padding: 0 0.5rem; margin-left: 0.5rem; cursor: pointer" @click="pause" :aria-label="pausedesc()">
                    <span id="pausegame"></span>
                </span>
            </span>
        </span>
        <span class="version" id="versionLog"><a href="wiki.html#changelog" target="_blank"></a></span>
    </div>`);
    let main = $(`<div id="main" class="main"></div>`);
    let columns = $(`<div class="columns is-gapless"></div>`);
    $("body").append(main);
    main.append(columns);
    columns.append(`<div class="column is-one-quarter leftColumn">
        <div id="race" class="race colHeader">
            <h2 class="is-sr-only">Race Info</h2>
            <div class="name">{{ name() }}</div>
            <div class="morale-contain"><span id="morale" v-show="city.morale.current" class="morale">${loc("morale")} <span class="has-text-warning">{{ city.morale.current | mRound }}%</span></div>
            <div class="power"><span id="powerStatus" class="has-text-warning" v-show="city.powered"><span>MW</span> <span id="powerMeter" class="meter">{{ city.power | replicate | approx }}</span></span></div>
        </div>
        <div id="sideQueue">
            <div id="buildQueue" class="bldQueue standardqueuestyle has-text-info" v-show="display"></div>
            <div id="msgQueue" class="msgQueue vscroll has-text-info" aria-live="polite">
                <div id="msgQueueHeader">
                    <h2 class="has-text-success">${loc("message_log")}</h2>
                    <span class="special" role="button" title="message queue options" @click="trigModal">
                        <svg version="1.1" x="0px" y="0px" width="12px" height="12px" viewBox="340 140 280 279.416" enable-background="new 340 140 280 279.416" xml:space="preserve">
                            <path class="gear" d="M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083
                            c-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333
                            L362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25
                            c2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916
                            h51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25
                            c4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667
                            S533.667,250.25,533.667,280S509.75,333.666,480,333.666z"/>
                        </svg>
                    </span>
                    <span role="button" class="zero has-text-advanced" @click="clearLog(m.view)">${loc("message_log_clear")}</span>
                    <span role="button" class="zero has-text-advanced" @click="clearLog()">${loc("message_log_clear_all")}</span>
                </div>
                <h2 class="is-sr-only">${loc("message_filters")}</h2>
                <div id="msgQueueFilters" class="hscroll msgQueueFilters"></div>
                <h2 class="is-sr-only">${loc("messages")}</h2>
                <div id="msgQueueLog" aria-live="polite"></div>
            </div>
        </div>
        <div id="resources" class="resources vscroll"><h2 class="is-sr-only">${loc("tab_resources")}</h2></div>
    </div>`);
    message_filters.forEach(function(filter) {
      $(`#msgQueueFilters`).append(`
            <span id="msgQueueFilter-${filter}" class="${filter === "all" ? "is-active" : ""}" aria-disabled="${filter === "all" ? "true" : "false"}" @click="swapFilter('${filter}')" v-show="s.${filter}.vis" role="button">${loc("message_log_" + filter)}</span>
        `);
    });
    vBind({
      el: `#msgQueue`,
      data: {
        m: message_logs,
        s: global.settings.msgFilters
      },
      methods: {
        swapFilter(filter) {
          if (message_logs.view !== filter) {
            $(`#msgQueueFilter-${message_logs.view}`).removeClass("is-active").attr("aria-disabled", "false");
            $(`#msgQueueFilter-${filter}`).addClass("is-active").attr("aria-disabled", "true");
            message_logs.view = filter;
            let queue = $(`#msgQueueLog`);
            clearElement(queue);
            message_logs[filter].forEach(function(msg) {
              queue.append($('<p class="has-text-' + msg.color + '"></p>').text(msg.msg));
            });
          }
        },
        clearLog(filter) {
          filter = filter ? [filter] : filter;
          initMessageQueue(filter);
          clearElement($(`#msgQueueLog`));
          if (filter) {
            global.lastMsg[filter] = [];
          } else {
            Object.keys(global.lastMsg).forEach(function(tag) {
              global.lastMsg[tag] = [];
            });
          }
        },
        trigModal() {
          let modal = {
            template: '<div id="modalBox" class="modalBox"></div>'
          };
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          let checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              let egg16 = easterEgg(16, 12);
              $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc("message_log")}${egg16.length > 0 ? egg16 : ""}</p>`));
              var body = $('<div id="specialModal" class="modalBody vscroll"></div>');
              $("#modalBox").append(body);
              let catVis = $(`
                            <div>
                                <div>
                                    <span class="has-text-warning">${loc("message_log_settings_visible")}</span>
                                </div>
                            </div>
                        `);
              let catMax = $(`
                            <hr>
                            <div>
                                <div>
                                    <span class="has-text-warning">${loc("message_log_settings_length")}</span>
                                </div>
                            </div>
                        `);
              let catSave = $(`
                            <hr>
                            <div>
                                <div>
                                    <span class="has-text-warning">${loc("message_log_settings_save")}</span>
                                </div>
                            </div>
                        `);
              body.append(catVis);
              body.append(catMax);
              body.append(catSave);
              let visSet = ``;
              let maxSet = ``;
              let saveSet = ``;
              let maxInputs = {};
              let saveInputs = {};
              message_filters.forEach(function(filter) {
                visSet += `<div class="msgInput" v-show="s.${filter}.unlocked"><span>${loc("message_log_" + filter)}</span> <b-checkbox class="patrol" v-model="s.${filter}.vis" :disabled="checkDisabled('${filter}',s.${filter}.vis)" :input="check('${filter}')"></b-checkbox></div>`;
                maxSet += `<div class="msgInput" v-show="s.${filter}.unlocked"><span>${loc("message_log_" + filter)}</span> <b-numberinput :input="maxVal('${filter}')" min="1" v-model="mi.${filter}" :controls="false"></b-numberinput></div>`;
                saveSet += `<div class="msgInput" v-show="s.${filter}.unlocked"><span>${loc("message_log_" + filter)}</span> <b-numberinput :input="saveVal('${filter}')" min="0" :max="s.${filter}.max" v-model="si.${filter}" :controls="false"></b-numberinput></div>`;
                maxInputs[filter] = global.settings.msgFilters[filter].max;
                saveInputs[filter] = global.settings.msgFilters[filter].save;
              });
              catVis.append(visSet);
              catMax.append(maxSet);
              catSave.append(saveSet);
              catMax.append(`
                            <div class="msgInputApply">
                                <button class="button" @click="applyMax()">${loc("message_log_settings_apply")}</button>
                            </div>
                        `);
              catSave.append(`
                            <div class="msgInputApply">
                                <button class="button" @click="applySave()">${loc("message_log_settings_apply")}</button>
                            </div>
                        `);
              vBind({
                el: `#specialModal`,
                data: {
                  s: global.settings.msgFilters,
                  mi: maxInputs,
                  si: saveInputs
                },
                methods: {
                  check(filter) {
                    if (!global.settings.msgFilters[filter].vis && message_logs.view === filter) {
                      let haveVis = false;
                      Object.keys(global.settings.msgFilters).forEach(function(filt) {
                        if (global.settings.msgFilters[filt].vis && !haveVis) {
                          haveVis = true;
                          $(`#msgQueueFilter-${message_logs.view}`).removeClass("is-active");
                          $(`#msgQueueFilter-${filt}`).addClass("is-active");
                          message_logs.view = filt;
                          let queue = $(`#msgQueueLog`);
                          clearElement(queue);
                          message_logs[filt].forEach(function(msg) {
                            queue.append($('<p class="has-text-' + msg.color + '"></p>').text(msg.msg));
                          });
                        }
                      });
                    }
                  },
                  checkDisabled(filter, fill) {
                    if (!global.settings.msgFilters[filter].vis) {
                      return false;
                    }
                    let totVis = 0;
                    Object.keys(global.settings.msgFilters).forEach(function(filt) {
                      if (global.settings.msgFilters[filt].vis) {
                        totVis++;
                      }
                    });
                    return totVis === 1;
                  },
                  maxVal(filter) {
                    if (maxInputs[filter] < 1) {
                      maxInputs[filter] = 1;
                    }
                  },
                  saveVal(filter) {
                    if (saveInputs[filter] < 0) {
                      saveInputs[filter] = 0;
                    } else if (saveInputs[filter] > global.settings.msgFilters[filter].max) {
                      saveInputs[filter] = global.settings.msgFilters[filter].max;
                    }
                  },
                  applyMax() {
                    message_filters.forEach(function(filter) {
                      let max = maxInputs[filter];
                      global.settings.msgFilters[filter].max = max;
                      if (max < global.settings.msgFilters[filter].save) {
                        saveInputs[filter] = max;
                        global.settings.msgFilters[filter].save = max;
                        global.lastMsg[filter].splice(max);
                      }
                      message_logs[filter].splice(max);
                      if (message_logs.view === filter) {
                        $("#msgQueueLog").children().slice(max).remove();
                      }
                    });
                  },
                  applySave() {
                    message_filters.forEach(function(filter) {
                      global.settings.msgFilters[filter].save = saveInputs[filter];
                      global.lastMsg[filter].splice(saveInputs[filter]);
                    });
                  }
                }
              });
            }
          }, 50);
        }
      }
    });
    let mainColumn = $(`<div id="mainColumn" class="column is-three-quarters"></div>`);
    columns.append(mainColumn);
    let content = $(`<div class="content"></div>`);
    mainColumn.append(content);
    content.append(`<h2 class="is-sr-only">Tab Navigation</h2>`);
    let tabs = $(`<b-tabs id="mainTabs" v-model="s.civTabs" :animated="s.animated" @input="swapTab"></b-tabs>`);
    content.append(tabs);
    let evolution = $(`<b-tab-item id="evolution" class="tab-item sticky" :visible="s.showEvolve">
        <template slot="header">
            {{ 'tab_evolve' | label }}
        </template>
    </b-tab-item>`);
    tabs.append(evolution);
    let city = $(`<b-tab-item :visible="s.showCiv">
        <template slot="header">
            {{ 'tab_civil' | label }}
        </template>
        <div id="mTabCivil"></div>
    </b-tab-item>`);
    tabs.append(city);
    let civic = $(`<b-tab-item :visible="s.showCivic">
        <template slot="header">
            {{ 'tab_civics' | label }}
        </template>
        <div id="mTabCivic"></div>
    </b-tab-item>`);
    tabs.append(civic);
    let research = $(`<b-tab-item :visible="s.showResearch">
        <template slot="header">
            {{ 'tab_research' | label }}
        </template>
        <div id="mTabResearch"></div>
    </b-tab-item>`);
    tabs.append(research);
    let resources = $(`<b-tab-item :visible="s.showResources">
        <template slot="header">
            {{ 'tab_resources' | label }}
        </template>
        <div id="mTabResource"></div>
    </b-tab-item>`);
    tabs.append(resources);
    let arpa2 = $(`<b-tab-item :visible="s.showGenetics">
        <template slot="header">
            {{ 'tech_arpa' | label }}
        </template>
        <div id="mTabArpa"></div>
    </b-tab-item>`);
    tabs.append(arpa2);
    let stats = $(`<b-tab-item :visible="s.showAchieve">
        <template slot="header">
            {{ 'tab_stats' | label }}
        </template>
        <div id="mTabStats"></div>
    </b-tab-item>`);
    tabs.append(stats);
    let iconlist = "";
    let icons = [
      { i: "nuclear", f: "steelem", r: 2 },
      { i: "zombie", f: "the_misery", r: 2 },
      { i: "fire", f: "ill_advised", r: 2 },
      { i: "mask", f: "friday", r: 1 },
      { i: "skull", f: "demon_slayer", r: 2 },
      { i: "taijitu", f: "equilibrium", r: 2 },
      { i: "martini", f: "utopia", r: 2 },
      { i: "lightbulb", f: "energetic", r: 2 },
      { i: "trash", f: "garbage_pie", r: 2 },
      { i: "banana", f: "banana", r: 2 },
      { i: "turtle", f: "finish_line", r: 2 },
      { i: "floppy", f: "digital_ascension", r: 2 },
      { i: "slime", f: "slime_lord", r: 2 },
      { i: "sludge", f: "grand_death_tour", r: 2 },
      { i: "lightning", f: "annihilation", r: 2 },
      { i: "trophy", f: "wish", r: 2 },
      { i: "robot", f: "planned_obsolescence", r: 2 },
      { i: "heart", f: "valentine", r: 1 },
      { i: "clover", f: "leprechaun", r: 1 },
      { i: "bunny", f: "easter", r: 1 },
      { i: "egg", f: "egghunt", r: 1 },
      { i: "rocket", f: "launch_day", r: 1 },
      { i: "sun", f: "solstice", r: 1 },
      { i: "firework", f: "firework", r: 1 },
      { i: "ghost", f: "halloween", r: 1 },
      { i: "candy", f: "trickortreat", r: 1 },
      { i: "turkey", f: "thanksgiving", r: 1 },
      { i: "meat", f: "immortal", r: 1 },
      { i: "present", f: "xmas", r: 1 }
    ];
    let irank = alevel();
    if (irank < 2) {
      irank = 2;
    }
    for (let i = 0; i < icons.length; i++) {
      if (global.stats.feat[icons[i].f] && global.stats.feat[icons[i].f] >= icons[i].r) {
        iconlist = iconlist + `<b-dropdown-item v-on:click="icon('${icons[i].i}')">${drawIcon(icons[i].i, 16, irank)} {{ '${icons[i].i}' | label }}</b-dropdown-item>`;
      } else if (global.settings.icon === icons[i].i) {
        global.settings.icon = "star";
      }
    }
    let egg9 = easterEgg(9, 14);
    let hideEgg = "";
    if (egg9.length > 0) {
      hideEgg = `<b-dropdown-item>${egg9}</b-dropdown-item>`;
    }
    let trick = trickOrTreat(5, 12, true);
    let hideTreat = "";
    if (trick.length > 0) {
      hideTreat = `<b-dropdown-item>${trick}</b-dropdown-item>`;
    }
    let localelist = "";
    let current_locale = "";
    if (Object.keys(locales).length > 1) {
      Object.keys(locales).forEach(function(locale) {
        let selected = global.settings.locale;
        if (selected === locale) {
          current_locale = locales[locale];
        }
        localelist = localelist + `<b-dropdown-item v-on:click="lChange('${locale}')">${locales[locale]}</b-dropdown-item>`;
      });
    }
    let settings = $(`<b-tab-item id="settings" class="settings sticky">
        <template slot="header">
            {{ 'tab_settings' | label }}
        </template>
        <div class="theme">
            <span>{{ 'theme' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ 'theme_' + s.theme | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="setTheme('dark')">{{ 'theme_dark' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('light')">{{ 'theme_light' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('night')">{{ 'theme_night' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('darkNight')">{{ 'theme_darkNight' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('redgreen')">{{ 'theme_redgreen' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('gruvboxLight')">{{ 'theme_gruvboxLight' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('gruvboxDark')">{{ 'theme_gruvboxDark' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('gruvboxDarkRG')">{{ 'theme_gruvboxDarkRG' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('orangeSoda')">{{ 'theme_orangeSoda' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setTheme('dracula')">{{ 'theme_dracula' | label }}</b-dropdown-item>
                ${hideEgg}
            </b-dropdown>

            <span>{{ 'units' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ s.affix | notation }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="numNotation('si')">{{ 'metric' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="numNotation('sci')">{{ 'scientific' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="numNotation('eng')">{{ 'engineering' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="numNotation('sln')">{{ 'sln' | label }}</b-dropdown-item>
                ${hideTreat}
            </b-dropdown>

            <span>{{ 'icons' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ s.icon | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="icon('star')">${drawIcon("star", 16, irank)} {{ 'star' | label }}</b-dropdown-item>
                ${iconlist}
            </b-dropdown>
        </div>
        <div id="localization" class="localization">
            <span>{{ 'locale' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>${current_locale}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                ${localelist}
            </b-dropdown>

            <span>{{ 'font' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ s.font | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="font('standard')">{{ 'standard' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="font('large_log')">{{ 'large_log' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="font('large_all')">{{ 'large_all' | label }}</b-dropdown-item>
            </b-dropdown>
        </div>

        <div class="queue">
            <span>{{ 'queuestyle' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ s.queuestyle | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="setQueueStyle('standardqueuestyle')">{{ 'standardqueuestyle' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueStyle('listqueuestyle')">{{ 'listqueuestyle' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueStyle('bulletlistqueuestyle')">{{ 'bulletlistqueuestyle' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueStyle('numberedlistqueuestyle')">{{ 'numberedlistqueuestyle' | label }}</b-dropdown-item>
            </b-dropdown>

            <span class="settings15" aria-label="${loc("settings15")}">{{ 'q_merge' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ s.q_merge | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="q_merge('merge_never')">{{ 'merge_never' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="q_merge('merge_nearby')">{{ 'merge_nearby' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="q_merge('merge_all')">{{ 'merge_all' | label }}</b-dropdown-item>
            </b-dropdown>

            <span>{{ 'q_resize' | label }} </span>
            <b-dropdown hoverable>
                <button class="button is-primary" slot="trigger">
                    <span>{{ 'q_resize_' + s.q_resize | label }}</span>
                    <i class="fas fa-sort-down"></i>
                </button>
                <b-dropdown-item v-on:click="setQueueResize('auto')">{{ 'q_resize_auto' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueResize('grow')">{{ 'q_resize_grow' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueResize('shrink')">{{ 'q_resize_shrink' | label }}</b-dropdown-item>
                <b-dropdown-item v-on:click="setQueueResize('manual')">{{ 'q_resize_manual' | label }}</b-dropdown-item>
            </b-dropdown>
        </div>

        <b-switch class="setting" v-model="s.pause" @input="unpause"><span class="settings12" aria-label="${loc("settings12")}">{{ 'pause' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.mKeys"><span class="settings1" aria-label="${loc("settings1")}">{{ 'm_keys' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.cLabels"><span class="settings5" aria-label="${loc("settings5")}">{{ 'c_cat' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.alwaysPower"><span class="settings17" aria-label="${loc("settings17")}">{{ 'always_power' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.qKey"><span class="settings6" aria-label="${loc("settings6")}">{{ 'q_key' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.qAny"><span class="settings7" aria-label="${loc("settings7")}">{{ 'q_any' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.qAny_res"><span class="settings14" aria-label="${loc("settings14")}">{{ 'q_any_res' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.sPackOn" @input="stringPackOn"><span class="settings13" aria-label="${loc("settings13")}">{{ 's_pack_on' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.expose"><span class="settings8" aria-label="${loc("settings8")}">{{ 'expose' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.tabLoad" @input="toggleTabLoad"><span class="settings11" aria-label="${loc("settings11")}">{{ 'tabLoad' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.boring"><span class="settings10" aria-label="${loc("settings10")}">{{ 'boring' | label }}</span></b-switch>
        <b-switch class="setting" v-model="s.touch"><span class="settings16" aria-label="${loc("settings16")}">{{ 'touch' | label }}</span></b-switch>
        <div>
            <div>${loc("key_mappings")}</div>
            <div class="keyMap"><span>${loc("multiplier", [10])}</span> <b-input v-model="s.keyMap.x10" id="x10Key"></b-input></div>
            <div class="keyMap"><span>${loc("multiplier", [25])}</span> <b-input class="keyMap" v-model="s.keyMap.x25" id="x25Key"></b-input></div>
            <div class="keyMap"><span>${loc("multiplier", [100])}</span> <b-input class="keyMap" v-model="s.keyMap.x100" id="x100Key"></b-input></div>
            <div class="keyMap"><span>${loc("q_key")}</span> <b-input class="keyMap" v-model="s.keyMap.q" id="queueKey"></b-input></div>
        </div>
        <div class="importExport">
            <div>${loc("tab_mappings")}</div>
            <div class="keyMap"><span>${loc("tab_civil")}</span> <b-input v-model="s.keyMap.showCiv" id="showCivKey"></b-input></div>
            <div class="keyMap"><span>${loc("tab_civics")}</span> <b-input v-model="s.keyMap.showCivic" id="showCivicKey"></b-input></div>
            <div class="keyMap"><span>${loc("tab_research")}</span> <b-input v-model="s.keyMap.showResearch" id="showResearchKey"></b-input></div>
            <div class="keyMap"><span>${loc("tab_resources")}</span> <b-input v-model="s.keyMap.showResources" id="showResourcesKey"></b-input></div>
            <div class="keyMap"><span>${loc("tech_arpa")}</span> <b-input v-model="s.keyMap.showGenetics" id="showGeneticsKey"></b-input></div>
            <div class="keyMap"><span>${loc("tab_stats")}</span> <b-input v-model="s.keyMap.showAchieve" id="showAchieveKey"></b-input></div>
            <div class="keyMap"><span>${loc("tab_settings")}</span> <b-input v-model="s.keyMap.settings" id="settingshKey"></b-input></div>
        </div>
        <div class="stringPack setting">
            <button id="stringPack" class="button" @click="importStringFile">{{ 'load_string_pack' | label }}</button>
            <input type="file" class="fileImport" id="stringPackFile" accept="text/plain, application/json">
            <button class="button right" @click="clearStringFile">{{ 'clear_string_pack' | label }}</button>
        </div>
        <div class="stringPack setting">
            <span>{{  | sPack}}</span>
        </div>
        <div class="importExport">
            <b-field label="${loc("import_export")}">
                <b-input id="importExport" type="textarea"></b-input>
            </b-field>
            <button class="button" @click="saveImport">{{ 'import' | label }}</button>
            <button class="button" @click="saveExport">{{ 'export' | label }}</button>
            <button class="button" @click="saveExportFile">{{ 'export_file' | label }}</button>
            <button class="button right" @click="restoreGame"><span class="settings9" aria-label="${loc("settings9")}">{{ 'restore' | label }}</span></button>
        </div>
        <div class="reset">
            <b-collapse :open="false">
                <b-switch v-model="s.disableReset" slot="trigger">{{ 'enable_reset' | label }}</b-switch>
                <div class="notification">
                    <div class="content">
                        <h4 class="has-text-danger">
                            {{ 'reset_warn' | label }}
                        </h4>
                        <p>
                            <button class="button" :disabled="!s.disableReset" @click="soft_reset()"><span class="settings4" aria-label="${loc("settings4")}">{{ 'reset_soft' | label }}</span></button>
                            <button class="button right" :disabled="!s.disableReset" @click="reset()"><span class="settings3" aria-label="${loc("settings3")}">{{ 'reset_hard' | label }}</span></button>
                        </p>
                    </div>
                </div>
            </b-collapse>
        </div>
    </b-tab-item>`);
    tabs.append(settings);
    let observe = $(`<b-tab-item disabled>
        <template slot="header"></template>
        <div id="mTabObserve"></div>
    </b-tab-item>`);
    tabs.append(observe);
    columns.append(`<div id="queueColumn" class="queueCol column"></div>`);
    let egg15 = easterEgg(15, 8);
    $("body").append(`
        <div class="promoBar">
            <span class="left">
                <h1>
                    <span class="has-text-warning">${egg15.length > 0 ? `Ev${egg15}lve` : `Evolve`}</span>
                    by
                    <span class="has-text-success">Demagorddon</span>
                </h1>
            </span>
            <span class="right">
                <h2 class="is-sr-only">External Links</h2>
                <ul class="external-links">
                    <li><a href="wiki.html" target="_blank">Wiki</a></li>
                    <li><a href="https://www.reddit.com/r/EvolveIdle/" target="_blank">Reddit</a></li>
                    <li><a href="https://discord.gg/dcwdQEr" target="_blank">Discord</a></li>
                    <li><a href="https://github.com/pmotschmann/Evolve" target="_blank">GitHub</a></li>
                    <li><a href="https://www.patreon.com/demagorddon" target="_blank">Patreon</a></li>
                    <li><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=PTRJZBW9J662C&currency_code=USD&source=url" target="_blank">Donate</a></li>
                </ul>
            </span>
        </div>
    `);
  }

  // src/space.js
  var spaceProjects = {
    spc_home: {
      info: {
        name() {
          return races[global.race.species].home;
        },
        desc: loc("space_home_info_desc"),
        zone: "inner",
        syndicate() {
          return false;
        }
      },
      test_launch: {
        id: "space-test_launch",
        title: loc("space_home_test_launch_title"),
        desc: loc("space_home_test_launch_desc"),
        reqs: { space: 1 },
        grant: ["space", 2],
        queue_complete() {
          return global.tech.space >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e5;
          },
          Oil(offset, wiki) {
            return fuel_adjust(7500, false, wiki);
          }
        },
        effect: loc("space_home_test_launch_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.race["truepath"]) {
              let sabotage = 1;
              if (!checkControlling("gov0")) {
                sabotage++;
              }
              if (!checkControlling("gov1")) {
                sabotage++;
              }
              if (!checkControlling("gov2")) {
                sabotage++;
              }
              if (Math.floor(seededRandom(0, sabotage)) !== 0) {
                messageQueue(loc("space_home_test_launch_action_fail"), "danger", false, ["progress"]);
                return 0;
              }
            }
            initStruct(spaceProjects.spc_home.satellite);
            messageQueue(loc("space_home_test_launch_action"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      satellite: {
        id: "space-satellite",
        title: loc("space_home_satellite_title"),
        desc: loc("space_home_satellite_desc"),
        reqs: { space: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("satellite", offset, 72e3, 1.22);
          },
          Knowledge(offset) {
            return spaceCostMultiplier("satellite", offset, 28e3, 1.22);
          },
          Oil(offset, wiki) {
            return spaceCostMultiplier("satellite", offset, fuel_adjust(3200, false, wiki), 1.22);
          },
          Alloy(offset) {
            return spaceCostMultiplier("satellite", offset, 8e3, 1.22);
          }
        },
        effect() {
          let knowledge = global.race["cataclysm"] || global.race["orbit_decayed"] ? 2e3 : 750;
          if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.tech["supercollider"]) {
            let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 5 : 10;
            knowledge *= global.tech["supercollider"] / ratio + 1;
          }
          let label = global.race["cataclysm"] ? loc("space_moon_observatory_title") : global.race["orbit_decayed"] ? loc("city_university") : wardenLabel();
          let amount = global.race["cataclysm"] ? 25 : global.race["orbit_decayed"] ? 12 : 4;
          let synergy = `<div>${loc("space_home_satellite_effect2", [label, amount])}</div>`;
          return `<div>${loc("plus_max_resource", [knowledge, global.resource.Knowledge.name])}</div>${synergy}<div>${loc("space_home_satellite_effect3", [global.civic.scientist ? global.civic.scientist.name : loc("job_scientist")])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("satellite");
            global["resource"]["Knowledge"].max += 750;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["satellite", "space"]
          };
        }
      },
      gps: {
        id: "space-gps",
        title: loc("space_home_gps_title"),
        desc() {
          if (global.space.hasOwnProperty("gps") && global.space["gps"].count < 4) {
            return `<div>${loc("space_home_gps_desc")}</div><div class="has-text-special">${loc("space_home_gps_desc_req")}</div>`;
          } else {
            return `<div>${loc("space_home_gps_desc")}</div>`;
          }
        },
        reqs: { satellite: 1 },
        not_trait: ["terrifying"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gps", offset, 75e3, 1.18);
          },
          Knowledge(offset) {
            return spaceCostMultiplier("gps", offset, 5e4, 1.18);
          },
          Copper(offset) {
            return spaceCostMultiplier("gps", offset, 6500, 1.18);
          },
          Oil(offset, wiki) {
            return spaceCostMultiplier("gps", offset, fuel_adjust(3500, false, wiki), 1.18);
          },
          Titanium(offset) {
            return spaceCostMultiplier("gps", offset, 8e3, 1.18);
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("gps") ? global.space["gps"].count : 0);
          if (count < 4) {
            return loc("space_home_gps_effect_req");
          } else {
            return `<div>${loc("space_home_gps_effect")}</div><div>${loc("space_home_gps_effect2", [2])}</div>`;
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gps");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["gps", "space"]
          };
        }
      },
      propellant_depot: {
        id: "space-propellant_depot",
        title: loc("space_home_propellant_depot_title"),
        desc: loc("space_home_propellant_depot_desc"),
        reqs: { space_explore: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("propellant_depot", offset, 55e3, 1.35);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("propellant_depot", offset, 22e3, 1.35);
          },
          Oil(offset, wiki) {
            return spaceCostMultiplier("propellant_depot", offset, fuel_adjust(5500, false, wiki), 1.35);
          }
        },
        effect() {
          let oil = spatialReasoning(1250) * (global.tech["world_control"] ? 1.5 : 1);
          if (global.resource["Helium_3"].display) {
            let helium = spatialReasoning(1e3) * (global.tech["world_control"] ? 1.5 : 1);
            return `<div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}</div><div>${loc("plus_max_resource", [helium, global.resource.Helium_3.name])}</div>`;
          }
          return `<div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("propellant_depot");
            global["resource"]["Oil"].max += spatialReasoning(1250) * (global.tech["world_control"] ? 1.5 : 1);
            if (global.resource["Helium_3"].display) {
              global["resource"]["Helium_3"].max += spatialReasoning(1e3) * (global.tech["world_control"] ? 1.5 : 1);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["propellant_depot", "space"]
          };
        }
      },
      nav_beacon: {
        id: "space-nav_beacon",
        title() {
          return global.race["orbit_decayed"] ? loc("space_home_broadcast_beacon_title") : loc("space_home_nav_beacon_title");
        },
        desc: `<div>${loc("space_home_nav_beacon_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { luna: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("nav_beacon", offset, 75e3, 1.32);
          },
          Copper(offset) {
            return spaceCostMultiplier("nav_beacon", offset, 38e3, 1.32);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("nav_beacon", offset, 44e3, 1.32);
          },
          Oil(offset, wiki) {
            return spaceCostMultiplier("nav_beacon", offset, fuel_adjust(12500, false, wiki), 1.32);
          },
          Iridium(offset) {
            return spaceCostMultiplier("nav_beacon", offset, 1200, 1.32);
          }
        },
        powered() {
          return powerCostMod(2);
        },
        powerBalancer() {
          return global.tech["luna"] && global.tech["luna"] >= 3 ? [{ s: global.space.moon_base.s_max - global.space.moon_base.support }, { s: global.space.spaceport.s_max - global.space.spaceport.support }] : [{ s: global.space.moon_base.s_max - global.space.moon_base.support }];
        },
        support() {
          return 1;
        },
        effect() {
          let orbitEffect = "";
          if (global.race["orbit_decayed"] && global.tech["broadcast"] && !global.race["joyless"]) {
            orbitEffect = `<div class="has-text-caution">${loc("space_red_vr_center_effect1", [global.tech["broadcast"] / 2])}</div>`;
          }
          let effect1 = global.race["orbit_decayed"] ? "" : `<div>${loc("space_home_nav_beacon_effect1")}</div>`;
          let effect3 = global.tech["luna"] >= 3 ? `<div>${loc("space_red_spaceport_effect1", [planetName().red, 1])}</div>` : "";
          return `${effect1}${effect3}${orbitEffect}<div class="has-text-caution">${loc("space_home_nav_beacon_effect2", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("nav_beacon");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["nav_beacon", "space"]
          };
        }
      }
    },
    spc_moon: {
      info: {
        name: loc("space_moon_info_name"),
        desc() {
          let home = races[global.race.species].home;
          return loc("space_moon_info_desc", [home]);
        },
        support: "moon_base",
        zone: "inner",
        syndicate() {
          return true;
        }
      },
      moon_mission: {
        id: "space-moon_mission",
        title: loc("space_moon_mission_title"),
        desc: loc("space_moon_mission_desc"),
        reqs: { space: 2, space_explore: 2 },
        grant: ["space", 3],
        queue_complete() {
          return global.tech.space >= 3 ? 0 : 1;
        },
        cost: {
          Oil(offset, wiki) {
            return +fuel_adjust(12e3, false, wiki).toFixed(0);
          }
        },
        effect: loc("space_moon_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_moon_mission_action"), "info", false, ["progress"]);
            initStruct(spaceProjects.spc_moon.iridium_mine);
            initStruct(spaceProjects.spc_moon.helium_mine);
            return true;
          }
          return false;
        }
      },
      moon_base: {
        id: "space-moon_base",
        title: loc("space_moon_base_title"),
        desc() {
          return `<div>${loc("space_moon_base_desc")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { space: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("moon_base", offset, 22e3, 1.32);
          },
          Cement(offset) {
            return spaceCostMultiplier("moon_base", offset, 18e3, 1.32);
          },
          Alloy(offset) {
            return spaceCostMultiplier("moon_base", offset, 7800, 1.32);
          },
          Polymer(offset) {
            return spaceCostMultiplier("moon_base", offset, 12500, 1.32);
          }
        },
        effect(wiki) {
          let iridium = spatialReasoning(500);
          let oil = +fuel_adjust($(this)[0].support_fuel().a, true, wiki).toFixed(2);
          return `<div>${loc("space_moon_base_effect1")}</div><div>${loc("plus_max_resource", [iridium, global.resource.Iridium.name])}</div><div class="has-text-caution">${loc("space_moon_base_effect3", [oil, $(this)[0].powered()])}</div>`;
        },
        support() {
          return 2;
        },
        support_fuel() {
          return { r: "Oil", a: 2 };
        },
        powered() {
          return powerCostMod(4);
        },
        powerBalancer() {
          return [{ s: global.space.moon_base.s_max - global.space.moon_base.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("moon_base");
            powerOnNewStruct($(this)[0]);
            if (global.space["moon_base"].count === 1) {
              global.tech["moon"] = 1;
            }
            if (!global.tech["luna"]) {
              global.tech["luna"] = 1;
              if (global.race["truepath"]) {
                let msg = loc("space_moon_base_msg", [govTitle(3)]);
                if (global.civic.foreign.gov3.hstl < 10) {
                  msg = `${msg} ${loc("space_moon_base_msg_ally")}`;
                } else if (global.civic.foreign.gov3.hstl > 60) {
                  msg = `${msg} ${loc("space_moon_base_msg_hstl")}`;
                }
                messageQueue(msg, "info", false, ["progress"]);
              }
            }
            if (global.race["orbit_decay"] && global.race.orbit_decay > global.stats.days + 2500) {
              global.race.orbit_decay = global.stats.days + 2500;
              messageQueue(loc("evo_challenge_orbit_decayed_accelerated", [global.race.orbit_decay - global.stats.days]), "info", false, ["progress"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              support: 0,
              s_max: 0
            },
            p: ["moon_base", "space"]
          };
        }
      },
      iridium_mine: {
        id: "space-iridium_mine",
        title: loc("space_moon_iridium_mine_title"),
        desc: `<div>${loc("space_moon_iridium_mine_desc")}</div><div class="has-text-special">${loc("space_support", [loc("space_moon_info_name")])}</div>`,
        reqs: { space: 3, luna: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("iridium_mine", offset, 42e3, 1.35);
          },
          Lumber(offset) {
            return spaceCostMultiplier("iridium_mine", offset, 9e3, 1.35);
          },
          Titanium(offset) {
            return spaceCostMultiplier("iridium_mine", offset, 17500, 1.35);
          }
        },
        effect() {
          let values = production("iridium_mine", "iridium");
          let iridium = +values.b.toFixed(3);
          let rival = ``;
          if (global.race["truepath"]) {
            if (global.civic.foreign.gov3.hstl < 10) {
              rival = `<div class="has-text-success">${loc("space_rival_ally", [+(values.g * 100).toFixed(1)])}</div>`;
            } else if (global.civic.foreign.gov3.hstl > 60) {
              rival = `<div class="has-text-danger">${loc("space_rival_war", [+(values.g * 100).toFixed(1)])}</div>`;
            }
          }
          let cat_coal = global.race["cataclysm"] ? `<div>${loc("produce", [+production("iridium_mine", "coal").toFixed(2), global.resource.Coal.name])}</div>` : ``;
          let cat_uran = global.race["cataclysm"] ? `<div>${loc("produce", [+(production("iridium_mine", "coal") / 48).toFixed(3), global.resource.Uranium.name])}</div>` : ``;
          return `<div class="has-text-caution">${loc("space_used_support", [loc("space_moon_info_name")])}</div><div>${loc("space_moon_iridium_mine_effect", [iridium])}</div>${rival}${cat_coal}${cat_uran}`;
        },
        s_type: "moon",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.resource.Iridium.display = true;
            incrementStruct("iridium_mine");
            if (!global.resource["Mythril"].display) {
              global.resource["Mythril"].display = true;
              loadFoundry();
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["iridium_mine", "space"]
          };
        }
      },
      helium_mine: {
        id: "space-helium_mine",
        title: loc("space_moon_helium_mine_title"),
        desc: `<div>${loc("space_moon_helium_mine_desc")}</div><div class="has-text-special">${loc("space_support", [loc("space_moon_info_name")])}</div>`,
        reqs: { space: 3, luna: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("helium_mine", offset, 38e3, 1.35);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("helium_mine", offset, 9e3, 1.35);
          },
          Steel(offset) {
            return spaceCostMultiplier("helium_mine", offset, 17500, 1.35);
          }
        },
        effect() {
          let storage = spatialReasoning(100);
          let values = production("helium_mine");
          let helium = +values.b.toFixed(3);
          let rival = ``;
          if (global.race["truepath"]) {
            if (global.civic.foreign.gov3.hstl < 10) {
              rival = `<div class="has-text-success">${loc("space_rival_ally", [+(values.g * 100).toFixed(1)])}</div>`;
            } else if (global.civic.foreign.gov3.hstl > 60) {
              rival = `<div class="has-text-danger">${loc("space_rival_war", [+(values.g * 100).toFixed(1)])}</div>`;
            }
          }
          return `<div class="has-text-caution">${loc("space_used_support", [loc("space_moon_info_name")])}</div><div>${loc("space_moon_helium_mine_effect", [helium])}</div>${rival}<div>${loc("plus_max_resource", [storage, global.resource.Helium_3.name])}</div>`;
        },
        s_type: "moon",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.resource["Helium_3"].display = true;
            incrementStruct("helium_mine");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["helium_mine", "space"]
          };
        }
      },
      observatory: {
        id: "space-observatory",
        title: loc("space_moon_observatory_title"),
        desc: `<div>${loc("space_moon_observatory_desc")}</div><div class="has-text-special">${loc("space_support", [loc("space_moon_info_name")])}</div>`,
        reqs: { science: 9, luna: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("observatory", offset, 2e5, 1.28);
          },
          Knowledge(offset) {
            return spaceCostMultiplier("observatory", offset, 69e3, 1.28);
          },
          Stone(offset) {
            return spaceCostMultiplier("observatory", offset, 125e3, 1.28);
          },
          Iron(offset) {
            return spaceCostMultiplier("observatory", offset, 65e3, 1.28);
          },
          Iridium(offset) {
            return spaceCostMultiplier("observatory", offset, 1250, 1.28);
          }
        },
        effect() {
          let prof = "";
          if (global.race["cataclysm"]) {
            prof = `<div>${loc("city_university_effect", [jobScale(1)])}</div>`;
          }
          let gain = 5e3;
          if (global.race["cataclysm"] && global.space["satellite"] && global.space.satellite.count > 0) {
            gain *= 1 + global.space.satellite.count * 0.25;
          }
          let synergy = global.race["cataclysm"] ? `<div>${loc("space_moon_observatory_cata_effect", [25])}</div>` : `<div>${loc("space_moon_observatory_effect", [5])}</div>`;
          return `<div class="has-text-caution">${loc("space_used_support", [loc("space_moon_info_name")])}</div>${prof}<div>${loc("plus_max_resource", [gain, global.resource.Knowledge.name])}</div>${synergy}`;
        },
        s_type: "moon",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("observatory");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["observatory", "space"]
          };
        }
      }
    },
    spc_red: {
      info: {
        name() {
          return planetName().red;
        },
        desc() {
          return loc("space_red_info_desc", [planetName().red]);
        },
        support: "spaceport",
        zone: "inner",
        syndicate() {
          return true;
        }
      },
      red_mission: {
        id: "space-red_mission",
        title() {
          return loc("space_mission_title", [planetName().red]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().red]);
        },
        reqs: { space: 3, space_explore: 3 },
        grant: ["space", 4],
        queue_complete() {
          return global.tech.space >= 4 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(4500, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_red_mission_effect", [planetName().red]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_red_mission_action", [planetName().red]), "info", false, ["progress"]);
            initStruct(spaceProjects.spc_red.living_quarters);
            initStruct(spaceProjects.spc_red.garage);
            initStruct(spaceProjects.spc_red.red_mine);
            initStruct(spaceProjects.spc_red.fabrication);
            return true;
          }
          return false;
        }
      },
      spaceport: {
        id: "space-spaceport",
        title: loc("space_red_spaceport_title"),
        desc() {
          return `<div>${loc("space_red_spaceport_desc")}</div><div class="has-text-special">${loc("requires_power_space", [global.resource.Food.name])}</div>`;
        },
        reqs: { space: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("spaceport", offset, 47500, 1.32);
          },
          Iridium(offset) {
            return spaceCostMultiplier("spaceport", offset, 1750, 1.32);
          },
          Mythril(offset) {
            return spaceCostMultiplier("spaceport", offset, 25, 1.32);
          },
          Titanium(offset) {
            return spaceCostMultiplier("spaceport", offset, 22500, 1.32);
          }
        },
        effect(wiki) {
          let helium = +fuel_adjust($(this)[0].support_fuel().a, true, wiki).toFixed(2);
          let bank = ``;
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            let vault = spatialReasoning(bank_vault() * 4);
            bank = `<div>${loc("plus_max_resource", [`$${vault}`, loc("resource_Money_name")])}</div>`;
          }
          return `<div>${loc("space_red_spaceport_effect1", [planetName().red, $(this)[0].support()])}</div>${bank}<div class="has-text-caution">${loc("space_red_spaceport_effect2", [helium, $(this)[0].powered()])}</div><div class="has-text-caution">${loc("spend", [global.race["cataclysm"] || global.race["orbit_decayed"] ? 2 : 25, global.resource.Food.name])}</div>`;
        },
        support() {
          let support = global.race["cataclysm"] || global.race["orbit_decayed"] ? 4 : 3;
          if (global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 4) {
            support++;
          }
          return support;
        },
        support_fuel() {
          return { r: "Helium_3", a: 1.25 };
        },
        powered() {
          return powerCostMod(5);
        },
        powerBalancer() {
          return [{ s: global.space.spaceport.s_max - global.space.spaceport.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("spaceport");
            powerOnNewStruct($(this)[0]);
            if (!global.tech["mars"]) {
              global.tech["mars"] = 1;
            }
            if (global.race["orbit_decay"] && global.race.orbit_decay > global.stats.days + 1e3) {
              global.race.orbit_decay = global.stats.days + 1e3;
              messageQueue(loc("evo_challenge_orbit_decayed_accelerated", [global.race.orbit_decay - global.stats.days]), "info", false, ["progress"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              support: 0,
              s_max: 0
            },
            p: ["spaceport", "space"]
          };
        }
      },
      red_tower: {
        id: "space-red_tower",
        title: loc("space_red_tower_title"),
        desc() {
          return `<div>${loc("space_red_tower_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { mars: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("red_tower", offset, 225e3, 1.28);
          },
          Iron(offset) {
            return spaceCostMultiplier("red_tower", offset, 22e3, 1.28);
          },
          Cement(offset) {
            return spaceCostMultiplier("red_tower", offset, 15e3, 1.28);
          },
          Alloy(offset) {
            return spaceCostMultiplier("red_tower", offset, 8e3, 1.28);
          }
        },
        effect() {
          return `<div>${loc("space_red_spaceport_effect1", [planetName().red, global.race["cataclysm"] || global.race["fasting"] ? 2 : 1])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(2);
        },
        powerBalancer() {
          return [{ s: global.space.spaceport.s_max - global.space.spaceport.support }];
        },
        support() {
          return global.race["cataclysm"] || global.race["fasting"] ? 2 : 1;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("red_tower");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["red_tower", "space"]
          };
        }
      },
      captive_housing: buildTemplate(`captive_housing`, "space"),
      terraformer: {
        id: "space-terraformer",
        title: loc("space_terraformer"),
        desc(wiki) {
          if (!global.space.hasOwnProperty("terraformer") || global.space.terraformer.count < 100 || wiki) {
            return `<div>${loc("space_terraformer")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>` + (global.space.hasOwnProperty("terraformer") && global.space.terraformer.count >= 100 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          } else {
            return `<div>${loc("space_terraformer")}</div>`;
          }
        },
        reqs: { terraforming: 1 },
        condition() {
          return global.space.terraformer.count >= 100 ? false : true;
        },
        queue_size: 5,
        queue_complete() {
          return 100 - global.space.terraformer.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 75e5 : 75e6 : 0;
          },
          Alloy(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 25e4 : 75e4 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? 125e3 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? 1e3 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 0 : 1e5 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 12e3 : 25e4 : 0;
          },
          Soul_Gem(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 0 : 1 : 0;
          },
          Nanoweave(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 0 : 75e3 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 75e3 : 0 : 0;
          },
          Cipher(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0) < 100 ? global.race["truepath"] ? 1e3 : 0 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("terraformer") ? global.space.terraformer.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("space_terraformer_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return spaceProjects.spc_red.atmo_terraformer.effect(wiki);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.space.terraformer.count < 100) {
              incrementStruct("terraformer", "space");
              if (global.space.terraformer.count >= 100) {
                global.tech["terraforming"] = 2;
                global.space["atmo_terraformer"] = { count: 1, on: 0 };
                renderSpace();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["terraformer", "space"]
          };
        }
      },
      atmo_terraformer: {
        id: "space-atmo_terraformer",
        title: loc("space_terraformer"),
        desc() {
          return `<div>${loc("space_terraformer")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        wiki: false,
        reqs: { terraforming: 2 },
        condition() {
          return global.space.terraformer.count >= 100 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        powered(wiki) {
          return powerCostMod((wiki ? wiki.truepath : global.race["truepath"]) ? 500 : 5e3);
        },
        postPower(o) {
          if (o && p_on["atmo_terraformer"]) {
            global.tech.terraforming = 3;
            renderSpace();
          } else {
            if (global.tech.terraforming > 2) {
              global.tech.terraforming = 2;
              renderSpace();
            }
            if (o) {
              return true;
            }
          }
        },
        effect(wiki) {
          let reward = terraformProjection();
          let power = $(this)[0].powered(wiki);
          let power_label = power > 0 ? `<div class="has-text-caution">${loc("minus_power", [power])}</div>` : "";
          return `<div>${loc("space_terraformer_effect2")}</div>${reward}${power_label}`;
        },
        action(args) {
          return false;
        }
      },
      terraform: {
        id: "space-terraform",
        title: loc("space_terraform"),
        desc: loc("space_terraform"),
        reqs: { terraforming: 3 },
        queue_complete() {
          return 0;
        },
        no_multi: true,
        cost: {},
        effect() {
          let reward = terraformProjection();
          return `<div>${loc("space_terraform_effect")}</div>${reward}`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            terraformLab();
            return true;
          }
          return false;
        }
      },
      assembly: buildTemplate(`assembly`, "space"),
      living_quarters: {
        id: "space-living_quarters",
        title() {
          let halloween = eventActive("halloween");
          if (halloween.active) {
            return loc(`events_halloween_red_housing`);
          }
          return loc("space_red_living_quarters_title");
        },
        desc() {
          return `<div>${loc("space_red_living_quarters_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("living_quarters", offset, house_adjust(38e3), 1.28);
          },
          Steel(offset) {
            return spaceCostMultiplier("living_quarters", offset, house_adjust(15e3), 1.28);
          },
          Polymer(offset) {
            return spaceCostMultiplier("living_quarters", offset, house_adjust(9500), 1.28);
          },
          Horseshoe() {
            return global.race["hooved"] ? 2 : 0;
          }
        },
        effect(wiki) {
          let gain = $(this)[0].citizens(wiki);
          let safe = ``;
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            let vault = spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? "100000" : "50000" : "25000");
            safe = `<div>${loc("plus_max_resource", [`$${vault}`, loc("resource_Money_name")])}</div>`;
          }
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div>${safe}<div>${loc("plus_max_resource", [jobScale(1), global.race["truepath"] ? loc("job_colonist_tp", [planetName().red]) : loc("colonist")])}</div><div>${loc("plus_max_resource", [gain, loc("citizen")])}</div>`;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("living_quarters");
            global.civic.colonist.display = true;
            if (powerOnNewStruct($(this)[0])) {
              global.resource[global.race.species].max += jobScale(1);
              let hiredMax = jobScale(1);
              global.civic.colonist.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.colonist.workers += hired;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["living_quarters", "space"]
          };
        },
        citizens(wiki) {
          let gain = global.race["cataclysm"] || global.race["orbit_decayed"] ? 2 : 1;
          let biodome_count = wiki ? global.space?.biodome?.on ?? 0 : support_on["biodome"];
          if (biodome_count) {
            let pop = global.tech.mars >= 6 ? 0.1 : 0.05;
            gain += pop * biodome_count;
          }
          return +jobScale(gain).toFixed(2);
        }
      },
      pylon: {
        id: "space-pylon",
        title: loc("space_red_pylon"),
        desc: loc("space_red_pylon"),
        reqs: { magic: 2 },
        condition() {
          return global.race["cataclysm"] || global.race["orbit_decayed"] ? true : false;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("pylon", offset, 10, 1.48);
          },
          Stone(offset) {
            return spaceCostMultiplier("pylon", offset, 12, 1.42);
          },
          Crystal(offset) {
            return spaceCostMultiplier("pylon", offset, 8, 1.42) - 3;
          }
        },
        effect() {
          let max = spatialReasoning(2);
          let mana = +(5e-3 * darkEffect("magic")).toFixed(3);
          return `<div>${loc("gain", [mana, global.resource.Mana.name])}</div><div>${loc("plus_max_resource", [max, global.resource.Mana.name])}</div>`;
        },
        special() {
          return global.tech["magic"] && global.tech.magic >= 3 ? true : false;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct($(this)[0]);
            global.resource.Mana.max += spatialReasoning(2);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["pylon", "space"]
          };
        }
      },
      vr_center: {
        id: "space-vr_center",
        title: loc("space_red_vr_center_title"),
        desc() {
          return `<div>${loc("space_red_vr_center_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 1, broadcast: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("vr_center", offset, 38e4, 1.25);
          },
          Copper(offset) {
            return spaceCostMultiplier("vr_center", offset, 55e3, 1.25);
          },
          Stanene(offset) {
            return spaceCostMultiplier("vr_center", offset, 1e5, 1.25);
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("vr_center", offset, 1, 1.25);
          }
        },
        effect() {
          let gasVal = govActive("gaslighter", 1) || 0;
          let morale = gasVal + 1;
          if (global.race["orbit_decayed"]) {
            morale += 2;
          }
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div><div>${loc("space_red_vr_center_effect1", [morale])}</div><div>${loc("space_red_vr_center_effect2", [2])}</div>`;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct($(this)[0]);
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["vr_center", "space"]
          };
        }
      },
      garage: {
        id: "space-garage",
        title: loc("space_red_garage_title"),
        desc() {
          return `<div>${loc("space_red_garage_desc")}</div>`;
        },
        reqs: { mars: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("garage", offset, 75e3, 1.28);
          },
          Iron(offset) {
            return spaceCostMultiplier("garage", offset, 12e3, 1.28);
          },
          Brick(offset) {
            return spaceCostMultiplier("garage", offset, 3e3, 1.28);
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("garage", offset, 1500, 1.28);
          }
        },
        wide: true,
        res() {
          let r_list = ["Copper", "Iron", "Cement", "Steel", "Titanium", "Alloy", "Nano_Tube", "Neutronium", "Infernite"];
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            r_list.push("Polymer");
            r_list.push("Coal");
            r_list.push("Lumber");
            r_list.push("Chrysotile");
            r_list.push("Stone");
            r_list.push("Furs");
          }
          return r_list;
        },
        heavy(res) {
          return ["Copper", "Iron", "Steel", "Titanium", "Neutronium", "Infernite"].includes(res) ? true : false;
        },
        val(res) {
          switch (res) {
            case "Copper":
              return 6500;
            case "Iron":
              return 5500;
            case "Cement":
              return global.race["cataclysm"] ? 10500 : 6e3;
            case "Steel":
              return 4500;
            case "Titanium":
              return 3500;
            case "Alloy":
              return 2500;
            case "Nano_Tube":
              return 25e3;
            case "Neutronium":
              return 125;
            case "Infernite":
              return 75;
            case "Polymer":
              return 2500;
            case "Coal":
              return 1500;
            case "Lumber":
              return 7500;
            case "Chrysotile":
              return 7500;
            case "Stone":
              return 7500;
            case "Furs":
              return 2200;
            default:
              return 0;
          }
        },
        multiplier(h) {
          let multiplier = global.tech["particles"] >= 4 ? 1 + global.tech["supercollider"] / 20 : 1;
          if (global.tech["world_control"] || global.race["cataclysm"] || global.race["orbit_decayed"]) {
            multiplier *= 2;
          }
          if (global.tech["shelving"] && global.tech.shelving >= 3) {
            multiplier *= 1.5;
          }
          multiplier *= global.stats.achieve["blackhole"] ? 1 + global.stats.achieve.blackhole.l * 0.05 : 1;
          if (h) {
            return global.tech["shelving"] && global.tech.shelving >= 2 ? multiplier * 3 : multiplier;
          }
          return multiplier;
        },
        effect() {
          let multiplier = $(this)[0].multiplier(false);
          let h_multiplier = $(this)[0].multiplier(true);
          let containers = global.tech["particles"] >= 4 ? 20 + global.tech["supercollider"] : 20;
          if (global.tech["world_control"] || global.race["cataclysm"] || global.race["orbit_decayed"]) {
            containers += 10;
          }
          let crate = global.race["cataclysm"] || global.race["orbit_decayed"] ? `<span>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</span>` : ``;
          let desc = '<div class="aTable">';
          desc = desc + `<span>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</span>${crate}`;
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let heavy = $(this)[0].heavy(res);
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * (heavy ? h_multiplier : multiplier)).toFixed(0), 1);
              desc = desc + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          desc = desc + "</div>";
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("garage");
            let containers = global.tech["particles"] >= 4 ? 20 + global.tech["supercollider"] : 20;
            if (global.tech["world_control"] || global.race["cataclysm"] || global.race["orbit_decayed"]) {
              containers += 10;
            }
            global.resource.Containers.max += containers;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            let multiplier = $(this)[0].multiplier(false);
            let h_multiplier = $(this)[0].multiplier(true);
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                let heavy = $(this)[0].heavy(res);
                global.resource[res].max += spatialReasoning($(this)[0].val(res)) * (heavy ? h_multiplier : multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["garage", "space"]
          };
        }
      },
      red_mine: {
        id: "space-red_mine",
        title() {
          return structName("mine");
        },
        desc() {
          return `<div>${loc("space_red_mine_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("red_mine", offset, 5e4, 1.32);
          },
          Lumber(offset) {
            return spaceCostMultiplier("red_mine", offset, 65e3, 1.32);
          },
          Iron(offset) {
            return spaceCostMultiplier("red_mine", offset, 33e3, 1.32);
          }
        },
        effect() {
          let cop_val = production("red_mine", "copper");
          let tit_val = production("red_mine", "titanium");
          let copper = +cop_val.b.toFixed(3);
          let titanium = +tit_val.b.toFixed(3);
          let rival = ``;
          if (global.race["truepath"]) {
            if (global.civic.foreign.gov3.hstl < 10) {
              rival = `<div class="has-text-success">${loc("space_rival_ally", [+(cop_val.g * 100).toFixed(1)])}</div>`;
            } else if (global.civic.foreign.gov3.hstl > 60) {
              rival = `<div class="has-text-danger">${loc("space_rival_war", [+(cop_val.g * 100).toFixed(1)])}</div>`;
            }
          }
          let decayed = global.race["orbit_decayed"] ? `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_miner`)])}</div><div>${loc("plus_max_resource", [jobScale(1), loc(`job_coal_miner`)])}</div>` : "";
          let cat_stone = (global.race["cataclysm"] || global.race["orbit_decayed"]) && !global.race["sappy"] ? `<div>${loc("space_red_mine_effect", [+production("red_mine", "stone").toFixed(2), global.resource.Stone.name])}</div>` : ``;
          let cat_asbestos = (global.race["cataclysm"] || global.race["orbit_decayed"]) && global.race["smoldering"] ? `<div>${loc("space_red_mine_effect", [+production("red_mine", "asbestos").toFixed(2), global.resource.Chrysotile.name])}</div>` : ``;
          let cat_alum = global.race["cataclysm"] || global.race["orbit_decayed"] ? `<div>${loc("space_red_mine_effect", [+production("red_mine", "aluminium").toFixed(2), global.resource.Aluminium.name])}</div>` : ``;
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div>${decayed}<div>${loc("space_red_mine_effect", [copper, global.resource.Copper.name])}</div><div>${loc("space_red_mine_effect", [titanium, global.resource.Titanium.name])}</div>${rival}${cat_asbestos}${cat_stone}${cat_alum}`;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("red_mine");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["red_mine", "space"]
          };
        }
      },
      fabrication: {
        id: "space-fabrication",
        title: loc("space_red_fabrication_title"),
        desc() {
          return `<div>${loc("space_red_fabrication_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("fabrication", offset, 9e4, 1.32);
          },
          Copper(offset) {
            return spaceCostMultiplier("fabrication", offset, 25e3, 1.32);
          },
          Cement(offset) {
            return spaceCostMultiplier("fabrication", offset, 12e3, 1.32);
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("fabrication", offset, 1200, 1.32);
          }
        },
        effect() {
          let c_worker = global.race["cataclysm"] && !global.race["flier"] ? `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_cement_worker`)])}</div>` : ``;
          let fab = global.race["cataclysm"] || global.race["orbit_decayed"] ? 5 : 2;
          if (global.race["high_pop"]) {
            fab = highPopAdjust(fab);
          }
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div><div>${loc("space_red_fabrication_effect1", [jobScale(1)])}</div>${c_worker}<div>${loc("space_red_fabrication_effect2", [fab])}</div>`;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("fabrication");
            if (powerOnNewStruct($(this)[0])) {
              global.civic.craftsman.max += jobScale(1);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["fabrication", "space"]
          };
        }
      },
      red_factory: {
        id: "space-red_factory",
        title() {
          return structName("factory");
        },
        desc() {
          return `<div>${loc("space_red_factory_desc")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { mars: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("red_factory", offset, 75e3, 1.32);
          },
          Brick(offset) {
            return spaceCostMultiplier("red_factory", offset, 1e4, 1.32);
          },
          Coal(offset) {
            return spaceCostMultiplier("red_factory", offset, 7500, 1.32);
          },
          Mythril(offset) {
            return spaceCostMultiplier("red_factory", offset, 50, 1.32);
          }
        },
        effect(wiki) {
          let desc = `<div>${loc("space_red_factory_effect1")}</div>`;
          if (global.tech["foundry"] >= 7) {
            desc = desc + `<div>${loc("space_red_factory_effect2")}</div>`;
          }
          if (global.race["orbit_decayed"] && !global.race["flier"]) {
            desc = desc + `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_cement_worker`)])}</div>`;
          }
          let helium = +fuel_adjust(1, true, wiki).toFixed(2);
          desc = desc + `<div class="has-text-caution">${loc("space_red_factory_effect3", [helium, $(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(3);
        },
        special: true,
        action(args) {
          if (payCosts($(this)[0])) {
            global.space.red_factory.count++;
            if (powerOnNewStruct($(this)[0])) {
              global.city.factory.Alloy++;
            }
            global.settings.showIndustry = true;
            defineIndustry();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["red_factory", "space"]
          };
        }
      },
      nanite_factory: buildTemplate(`nanite_factory`, "space"),
      biodome: {
        id: "space-biodome",
        title() {
          if (global.race["artifical"]) {
            return loc("space_red_signal_tower_title");
          } else {
            return global.race["soul_eater"] ? loc("space_red_asphodel_title") : loc("space_red_biodome_title");
          }
        },
        desc() {
          let desc;
          if (global.race["artifical"]) {
            desc = `<div>${loc("space_red_signal_tower_title")}</div>`;
          } else if (global.race["soul_eater"]) {
            desc = `<div>${loc("space_red_asphodel_desc")}</div>`;
          } else {
            if (global.race["carnivore"]) {
              desc = `<div>${loc("space_red_biodome_desc_carn")}</div>`;
            } else {
              desc = `<div>${loc("space_red_biodome_desc", [planetName().red])}</div>`;
            }
          }
          return `<div>${desc}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("biodome", offset, 45e3, 1.28);
          },
          Lumber(offset) {
            return spaceCostMultiplier("biodome", offset, 65e3, 1.28);
          },
          Brick(offset) {
            return spaceCostMultiplier("biodome", offset, 1e3, 1.28);
          },
          Nanite(offset) {
            return global.race["deconstructor"] ? spaceCostMultiplier("biodome", offset, 75, 1.28) : 0;
          }
        },
        effect() {
          let food = +production("biodome", "food").toFixed(2);
          let cat_fd = global.race["cataclysm"] || global.race["orbit_decayed"] ? `<div>${loc("produce", [+production("biodome", "cat_food").toFixed(2), global.resource.Food.name])}</div>` : ``;
          let cat_wd = (global.race["cataclysm"] || global.race["orbit_decayed"]) && !global.race["kindling_kindred"] && !global.race["smoldering"] ? `<div>${loc("space_red_mine_effect", [+production("biodome", "lumber").toFixed(2), global.resource.Lumber.name])}</div>` : ``;
          let pop = global.tech.mars >= 6 ? 0.1 : 0.05;
          let fLabel = global.race["artifical"] ? loc("city_transmitter_effect", [spatialReasoning(500)]) : loc("plus_max_resource", [spatialReasoning(100), global.resource.Food.name]);
          let sig_cap = global.race["artifical"] || global.race["orbit_decayed"] ? `<div>${fLabel}</div` : "";
          let desc = `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div>${cat_fd}`;
          desc += `<div>${loc("space_red_biodome_effect", [food, global.resource.Food.name])}</div>`;
          desc += `<div>${loc("space_red_biodome_effect2", [+jobScale(pop).toFixed(2)])}</div>`;
          if (global.race.universe === "evil") {
            let soldier = global.race["grenadier"] ? 0.0375 : 0.075;
            desc += `<div>${loc("space_red_biodome_effect_evil", [+jobScale(soldier).toFixed(3), loc("space_red_space_barracks_title")])}</div>`;
          }
          desc += `${cat_wd}${sig_cap}`;
          return desc;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("biodome");
            if (!global.race["cataclysm"]) {
              unlockAchieve("colonist");
              if (global.race["joyless"]) {
                unlockAchieve("joyless");
                delete global.race["joyless"];
                drawTech();
              }
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["biodome", "space"]
          };
        },
        flair() {
          if (global.race["artifical"]) {
            return loc("space_red_signal_tower_flair");
          } else {
            return global.race["soul_eater"] ? loc("space_red_asphodel_flair") : global.race["carnivore"] ? loc("space_red_biodome_flair_carn") : loc("space_red_biodome_flair");
          }
        }
      },
      red_university: {
        id: "space-red_university",
        title: loc("city_university"),
        desc() {
          return loc("city_university_desc", [planetName().red]);
        },
        reqs: { mars: 1 },
        trait: ["orbit_decayed"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("university", offset, 900, 1.5, "city") - 500;
          },
          Lumber(offset) {
            return spaceCostMultiplier("university", offset, 500, 1.36, "city") - 200;
          },
          Stone(offset) {
            return spaceCostMultiplier("university", offset, 750, 1.36, "city") - 350;
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? spaceCostMultiplier("university", offset, 5, 1.36, "city") : 0;
          }
        },
        wiki: false,
        effect() {
          return actions.city.university.effect();
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let gain = global.tech["science"] && global.tech["science"] >= 8 ? 700 : 500;
            if (global.tech["supercollider"]) {
              let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
              gain *= global.tech["supercollider"] / ratio + 1;
            }
            global["resource"]["Knowledge"].max += gain;
            global.city.university.count++;
            global.space.red_university.count = global.city.university.count;
            global.civic.professor.display = true;
            global.civic.professor.max = jobScale(global.city.university.count);
            return true;
          }
          return false;
        }
      },
      exotic_lab: {
        id: "space-exotic_lab",
        title: loc("space_red_exotic_lab_title"),
        desc() {
          return `<div>${loc("space_red_exotic_lab_desc")}</div><div class="has-text-special">${loc("space_support", [planetName().red])}</div>`;
        },
        reqs: { mars: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("exotic_lab", offset, 75e4, 1.28);
          },
          Steel(offset) {
            return spaceCostMultiplier("exotic_lab", offset, 1e5, 1.28);
          },
          Mythril(offset) {
            return spaceCostMultiplier("exotic_lab", offset, 1e3, 1.28);
          },
          Elerium(offset) {
            return spaceCostMultiplier("exotic_lab", offset, 20, 1.28) - 4;
          }
        },
        effect(wiki) {
          let sci = 500;
          if (global.tech["science"] >= 13 && global.interstellar["laboratory"]) {
            let num_lab_on = wiki ? global.interstellar.laboratory.on : int_on["laboratory"];
            sci += num_lab_on * 25;
          }
          if (global.tech["ancient_study"] && global.tech["ancient_study"] >= 2) {
            sci += templeCount(true) * 15;
          }
          let num_mass_driver_on = wiki ? global.city?.mass_driver?.on ?? 0 : p_on["mass_driver"];
          if (global.tech.mass >= 2 && num_mass_driver_on > 0) {
            sci += highPopAdjust(num_mass_driver_on * global.civic.scientist.workers);
          }
          if (global.tech["science"] >= 21) {
            sci *= 1.45;
          }
          if (global.race["high_pop"]) {
            sci = highPopAdjust(sci);
          }
          let elerium = spatialReasoning(10);
          let scientist = "";
          let lab = "";
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            scientist = `<div>${loc("city_wardenclyffe_effect1", [jobScale(1), global.civic.scientist.name])}</div>`;
            sci *= 1 + (wiki ? global.space.observatory.on : support_on["observatory"]) * 0.25;
            if (global.tech.science >= 15) {
              lab = `<div>${loc("city_wardenclyffe_effect4", [2])}</div>`;
            }
          }
          return `<div class="has-text-caution">${loc("space_used_support", [planetName().red])}</div>${scientist}${lab}<div>${loc("space_red_exotic_lab_effect1", [+sci.toFixed(0)])}</div><div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div>`;
        },
        s_type: "red",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("exotic_lab");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["exotic_lab", "space"]
          };
        },
        flair() {
          return `<div>${loc("space_red_exotic_lab_flair1")}</div><div>${loc("space_red_exotic_lab_flair2")}</div>`;
        }
      },
      ziggurat: {
        id: "space-ziggurat",
        title: loc("space_red_ziggurat_title"),
        desc() {
          let entity = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
          return `<div>${loc("space_red_ziggurat_desc", [entity])}</div>`;
        },
        reqs: { theology: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ziggurat", offset, 6e5, 1.28);
          },
          Stone(offset) {
            return spaceCostMultiplier("ziggurat", offset, 25e4, 1.28);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("ziggurat", offset, 7e4, 1.28);
          },
          Mythril(offset) {
            return spaceCostMultiplier("ziggurat", offset, 250, 1.28);
          }
        },
        effect(wiki) {
          let bonus = global.tech["ancient_study"] ? 0.6 : 0.4;
          let num_exo_labs_on = wiki ? global.space?.exotic_lab?.on ?? 0 : support_on["exotic_lab"];
          if (global.tech["ancient_deify"] && global.tech["ancient_deify"] >= 2 && num_exo_labs_on) {
            bonus += 0.01 * num_exo_labs_on;
          }
          if (global.civic.govern.type === "theocracy" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
            let faith = 2e-3;
            if (global.race["high_pop"]) {
              faith = highPopAdjust(faith);
            }
            bonus += faith * global.civic.priest.workers;
          }
          if (global.race["ooze"]) {
            bonus *= 1 - traits.ooze.vars()[1] / 100;
          }
          if (global.race["high_pop"]) {
            bonus = highPopAdjust(bonus);
          }
          bonus = +bonus.toFixed(2);
          let zvar = global.race["truepath"] ? [bonus, races[global.race.species].home] : [bonus];
          let desc = `<div>${loc(global.race["truepath"] ? "space_red_ziggurat_effect_tp" : "space_red_ziggurat_effect", zvar)}</div>`;
          if (global.tech["ancient_study"] && global.tech["ancient_study"] >= 2) {
            desc = desc + `<div>${loc("interstellar_laboratory_effect", [3])}</div>`;
          }
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            desc = desc + templeEffect();
          }
          if (global.genes["ancients"] && global.genes["ancients"] >= 4) {
            desc = desc + `<div>${loc("plus_max_resource", [jobScale(1), global.civic?.priest?.name || loc(`job_priest`)])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("ziggurat");
            if (global.genes["ancients"] && global.genes["ancients"] >= 4) {
              global.civic.priest.display = true;
              global.civic.priest.max += jobScale(1);
            }
            if (global.race["cataclysm"]) {
              unlockAchieve("iron_will", false, 1);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["ziggurat", "space"]
          };
        }
      },
      space_barracks: {
        id: "space-space_barracks",
        title: loc("space_red_space_barracks_title"),
        desc() {
          return `<div>${loc("space_red_space_barracks_desc")}</div><div class="has-text-special">${loc("space_red_space_barracks_desc_req")}</div>`;
        },
        reqs: { marines: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("space_barracks", offset, 35e4, 1.28);
          },
          Alloy(offset) {
            return spaceCostMultiplier("space_barracks", offset, 65e3, 1.28);
          },
          Iridium(offset) {
            return spaceCostMultiplier("space_barracks", offset, 22500, 1.28);
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("space_barracks", offset, 12500, 1.28);
          },
          Horseshoe() {
            return global.race["hooved"] ? 2 : 0;
          }
        },
        effect(wiki) {
          let train = global.race["orbit_decayed"] ? actions.city.boot_camp.effect() : "";
          let oil = +fuel_adjust(2, true, wiki).toFixed(2);
          let soldiers = $(this)[0].soldiers(wiki);
          let food = global.race["cataclysm"] ? `` : `<div class="has-text-caution">${loc("space_red_space_barracks_effect3", [global.resource.Food.name])}</div>`;
          let desc = `<div>${loc("plus_max_soldiers", [soldiers])}</div>${train}`;
          if (global.race.universe === "evil") {
            desc += `<div>${loc("plus_max_resource", [global.race["cataclysm"] ? 2 : 1, global.resource.Authority.name])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("space_red_space_barracks_effect2", [oil])}</div>${food}`;
          return desc;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("space_barracks");
            global.space["space_barracks"].on++;
            return true;
          }
          return false;
        },
        soldiers(wiki) {
          let soldiers = global.tech.marines >= 2 ? 4 : 2;
          if (global.race.universe === "evil") {
            if (!global.race["cataclysm"] && !global.race["orbit_decayed"]) {
              soldiers--;
            }
            let biodome_count = wiki ? global.space?.biodome?.on ?? 0 : support_on["biodome"];
            if (biodome_count) {
              soldiers += biodome_count * 0.075;
            }
          }
          if (global.race["grenadier"]) {
            soldiers /= 2;
          }
          return +jobScale(soldiers).toFixed(3);
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["space_barracks", "space"]
          };
        },
        flair() {
          return loc("space_red_space_barracks_flair");
        }
      },
      wonder_statue: {
        id: "space-wonder_statue",
        title() {
          return loc("space_wonder_statue", [planetName().red]);
        },
        desc() {
          return loc("space_wonder_statue", [planetName().red]);
        },
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.space["wonder_statue"] ? true : false;
        },
        trait: ["wish"],
        wiki: false,
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action(args) {
          return false;
        }
      },
      bonfire: buildTemplate(`bonfire`, "space"),
      horseshoe: buildTemplate(`horseshoe`, "space")
    },
    spc_hell: {
      info: {
        name() {
          return planetName().hell;
        },
        desc() {
          return loc("space_hell_info_desc", [planetName().hell]);
        },
        zone: "inner",
        syndicate() {
          return false;
        }
      },
      hell_mission: {
        id: "space-hell_mission",
        title() {
          return loc("space_mission_title", [planetName().hell]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().hell]);
        },
        reqs: { space: 3, space_explore: 3 },
        grant: ["hell", 1],
        queue_complete() {
          return global.tech.hell >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(6500, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_hell_mission_effect1", [planetName().hell]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_hell_mission_action", [planetName().hell]), "info", false, ["progress"]);
            initStruct(spaceProjects.spc_hell.geothermal);
            return true;
          }
          return false;
        }
      },
      geothermal: {
        id: "space-geothermal",
        title: loc("space_hell_geothermal_title"),
        desc() {
          return `<div>${loc("space_hell_geothermal_desc")}</div><div class="has-text-special">${loc("space_hell_geothermal_desc_req")}</div>`;
        },
        reqs: { hell: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("geothermal", offset, 38e3, 1.35);
          },
          Steel(offset) {
            return spaceCostMultiplier("geothermal", offset, 15e3, 1.35);
          },
          Polymer(offset) {
            return spaceCostMultiplier("geothermal", offset, 9500, 1.35);
          }
        },
        effect(wiki) {
          let helium = +fuel_adjust($(this)[0].p_fuel().a, true, wiki).toFixed(2);
          let num_smelters = $(this)[0].smelting();
          let smelter = num_smelters > 0 ? `<div>${loc("interstellar_stellar_forge_effect3", [num_smelters])}</div>` : ``;
          return `${smelter}<span>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered()])}</span>, <span class="has-text-caution">${loc("space_belt_station_effect3", [helium])}</span>`;
        },
        special() {
          return $(this)[0].smelting() > 0;
        },
        powered() {
          let power = -8;
          if (global.race["forge"]) {
            power -= traits.forge.vars()[0];
          }
          if (global.stats.achieve["failed_history"] && global.stats.achieve.failed_history.l >= 5) {
            power -= 2;
          }
          return powerModifier(power);
        },
        smelting() {
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            return 1;
          }
          return 0;
        },
        p_fuel() {
          return { r: "Helium_3", a: 0.5 };
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("geothermal");
            global.space["geothermal"].on++;
            let num_smelters = $(this)[0].smelting();
            if (num_smelters > 0) {
              addSmelter(num_smelters);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["geothermal", "space"]
          };
        }
      },
      hell_smelter: {
        id: "space-hell_smelter",
        title() {
          return loc("space_hell_smelter_title", [planetName().hell]);
        },
        desc() {
          return loc("space_hell_smelter_title", [planetName().hell]);
        },
        reqs: { hell: 1, m_smelting: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hell_smelter", offset, 25e4, 1.24);
          },
          Adamantite(offset) {
            return spaceCostMultiplier("hell_smelter", offset, 15e3, 1.24);
          }
        },
        effect() {
          return `<div>${loc("interstellar_stellar_forge_effect3", [$(this)[0].smelting()])}</div>`;
        },
        special: true,
        smelting() {
          return 2;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("hell_smelter");
            addSmelter($(this)[0].smelting(), "Steel");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["hell_smelter", "space"]
          };
        }
      },
      spc_casino: {
        id: "space-spc_casino",
        title() {
          return structName("casino");
        },
        desc() {
          return structName("casino");
        },
        category: "commercial",
        reqs: { hell: 1, gambling: 1 },
        condition() {
          return global.race["cataclysm"] || global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 5 ? true : false;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("spc_casino", offset, traitCostMod("untrustworthy", 4e5), 1.35);
          },
          Furs(offset) {
            return spaceCostMultiplier("spc_casino", offset, traitCostMod("untrustworthy", 75e3), 1.35);
          },
          Cement(offset) {
            return spaceCostMultiplier("spc_casino", offset, traitCostMod("untrustworthy", 1e5), 1.35);
          },
          Plywood(offset) {
            return spaceCostMultiplier("spc_casino", offset, traitCostMod("untrustworthy", 2e4), 1.35);
          }
        },
        effect() {
          let desc = casinoEffect();
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 2 ? 2 : 3);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.space.spc_casino.count++;
            if (global.tech["theatre"] && !global.race["joyless"]) {
              global.civic.entertainer.max += jobScale(1);
              global.civic.entertainer.display = true;
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["spc_casino", "space"]
          };
        },
        flair: loc("city_casino_flair")
      },
      swarm_plant: {
        id: "space-swarm_plant",
        title: loc("space_hell_swarm_plant_title"),
        desc() {
          return `<div>${loc("space_hell_swarm_plant_desc")}</div>`;
        },
        reqs: { solar: 4, hell: 1 },
        cost: {
          Money(offset, wiki) {
            return spaceCostMultiplier("swarm_plant", offset, iron_adjust(75e3, wiki), 1.28);
          },
          Iron(offset, wiki) {
            return spaceCostMultiplier("swarm_plant", offset, iron_adjust(65e3, wiki), 1.28);
          },
          Neutronium(offset, wiki) {
            return spaceCostMultiplier("swarm_plant", offset, iron_adjust(75, wiki), 1.28);
          },
          Brick(offset, wiki) {
            return spaceCostMultiplier("swarm_plant", offset, iron_adjust(2500, wiki), 1.28);
          },
          Mythril(offset, wiki) {
            return spaceCostMultiplier("swarm_plant", offset, iron_adjust(100, wiki), 1.28);
          }
        },
        effect(wiki) {
          let reduce = global.tech["swarm"] ? 0.88 : 0.94;
          if (global.tech["swarm"] >= 3) {
            reduce -= get_qlevel(wiki) / 100;
          }
          if (reduce < 0.05) {
            reduce = 0.05;
          }
          reduce = +((1 - reduce) * 100).toFixed(2);
          return loc("space_hell_swarm_plant_effect1", [reduce]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("swarm_plant");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["swarm_plant", "space"]
          };
        }
      },
      firework: buildTemplate(`firework`, "space")
    },
    spc_sun: {
      info: {
        name() {
          return loc("space_sun_info_name");
        },
        desc() {
          return loc("space_sun_info_desc", [races[global.race.species].home]);
        },
        support: "swarm_control",
        zone: "inner",
        syndicate() {
          return false;
        }
      },
      sun_mission: {
        id: "space-sun_mission",
        title() {
          return loc("space_sun_mission_title");
        },
        desc() {
          return loc("space_sun_mission_desc");
        },
        reqs: { space_explore: 4 },
        grant: ["solar", 1],
        queue_complete() {
          return global.tech.solar >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(15e3, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_sun_mission_effect1");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            return true;
          }
          return false;
        }
      },
      swarm_control: {
        id: "space-swarm_control",
        title: loc("space_sun_swarm_control_title"),
        desc() {
          return `<div>${loc("space_sun_swarm_control_desc")}</div>`;
        },
        reqs: { solar: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("swarm_control", offset, 1e5, 1.3);
          },
          Knowledge(offset) {
            return spaceCostMultiplier("swarm_control", offset, 6e4, 1.3);
          },
          Alloy(offset) {
            return spaceCostMultiplier("swarm_control", offset, 7500, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("swarm_control", offset, fuel_adjust(2e3, false, wiki), 1.3);
          },
          Mythril(offset) {
            return spaceCostMultiplier("swarm_control", offset, 250, 1.3);
          }
        },
        effect(wiki) {
          return loc("space_sun_swarm_control_effect1", [$(this)[0].support(wiki)]);
        },
        support(wiki) {
          return global.tech["swarm"] && global.tech["swarm"] >= 2 ? global.tech["high_tech"] >= 11 ? 11 + Math.round(get_qlevel(wiki)) : 12 : 10;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("swarm_control");
            global.space["swarm_control"].s_max += $(this)[0].support();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, support: 0, s_max: 0 },
            p: ["swarm_control", "space"]
          };
        }
      },
      swarm_satellite: {
        id: "space-swarm_satellite",
        title: loc("space_sun_swarm_satellite_title"),
        desc() {
          return `<div>${loc("space_sun_swarm_satellite_desc")}</div><div class="has-text-special">${loc("space_sun_swarm_satellite_desc_req")}</div>`;
        },
        reqs: { solar: 3 },
        cost: {
          Money(offset, wiki) {
            return spaceCostMultiplier("swarm_satellite", offset, swarm_adjust(5e3, wiki), 1.1);
          },
          Copper(offset, wiki) {
            return spaceCostMultiplier("swarm_satellite", offset, swarm_adjust(2500, wiki), 1.1);
          },
          Iridium(offset, wiki) {
            return spaceCostMultiplier("swarm_satellite", offset, swarm_adjust(150, wiki), 1.1);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("swarm_satellite", offset, swarm_adjust(fuel_adjust(50, false, wiki), wiki), 1.1);
          }
        },
        effect() {
          let solar = 0.35;
          if (global.tech.swarm >= 4) {
            solar += 0.15 * (global.tech.swarm - 3);
          }
          if (global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 1) {
            solar += 0.15;
          }
          if (global.blood["illuminate"]) {
            solar += 0.01 * global.blood.illuminate;
          }
          solar = +solar.toFixed(2);
          return `<span>${loc("space_dwarf_reactor_effect1", [powerModifier(solar)])}</span>, <span class="has-text-caution">${loc("space_sun_swarm_satellite_effect1", [1])}</span>`;
        },
        support() {
          return -1;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("swarm_satellite");
            global.space["swarm_control"].support++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["swarm_satellite", "space"]
          };
        }
      },
      jump_gate: {
        id: "space-jump_gate",
        title: loc("tau_jump_gate"),
        desc(wiki) {
          if (!global.space.hasOwnProperty("jump_gate") || global.space.jump_gate.count < 100 || wiki) {
            return `<div>${loc("tau_jump_gate")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("tau_jump_gate")}</div>`;
          }
        },
        reqs: { tauceti: 3 },
        path: ["truepath"],
        queue_size: 10,
        queue_complete() {
          return 100 - global.space.jump_gate.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 1e6 : 0;
          },
          Alloy(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 5e4 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 12500 : 0;
          },
          Graphene(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 42e3 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 35e3 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0) < 100 ? 25e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("jump_gate") ? global.space.jump_gate.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("tau_jump_gate_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("tau_jump_gate_effect");
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.space.jump_gate.count < 100) {
              global.space.jump_gate.count++;
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["jump_gate", "space"]
          };
        }
      }
    },
    spc_gas: {
      info: {
        name() {
          return planetName().gas;
        },
        desc() {
          return loc("space_gas_info_desc", [planetName().gas, races[global.race.species].home]);
        },
        zone: "outer",
        syndicate() {
          return true;
        }
      },
      gas_mission: {
        id: "space-gas_mission",
        title() {
          return loc("space_mission_title", [planetName().gas]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().gas]);
        },
        reqs: { space: 4, space_explore: 4 },
        grant: ["space", 5],
        queue_complete() {
          return global.tech.space >= 5 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(12500, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_gas_mission_effect", [planetName().gas]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_gas_mission_action", [planetName().gas]), "info", false, ["progress"]);
            global.settings.space.gas_moon = true;
            global.settings.space.belt = true;
            initStruct(spaceProjects.spc_belt.space_station);
            return true;
          }
          return false;
        }
      },
      gas_mining: {
        id: "space-gas_mining",
        title: loc("space_gas_mining_title"),
        desc() {
          return `<div>${loc("space_gas_mining_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { gas_giant: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gas_mining", offset, 25e4, 1.32);
          },
          Uranium(offset) {
            return spaceCostMultiplier("gas_mining", offset, 500, 1.32);
          },
          Alloy(offset) {
            return spaceCostMultiplier("gas_mining", offset, 1e4, 1.32);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("gas_mining", offset, fuel_adjust(2500, false, wiki), 1.32);
          },
          Mythril(offset) {
            return spaceCostMultiplier("gas_mining", offset, 25, 1.32);
          }
        },
        effect() {
          let helium = +production("gas_mining").toFixed(2);
          return `<div>${loc("space_gas_mining_effect1", [helium])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(2);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gas_mining");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["gas_mining", "space"]
          };
        }
      },
      gas_storage: {
        id: "space-gas_storage",
        title() {
          return loc("space_gas_storage_title", [planetName().gas]);
        },
        desc() {
          return `<div>${loc("space_gas_storage_desc")}</div>`;
        },
        reqs: { gas_giant: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gas_storage", offset, 125e3, 1.32);
          },
          Iridium(offset) {
            return spaceCostMultiplier("gas_storage", offset, 3e3, 1.32);
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("gas_storage", offset, 2e3, 1.32);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("gas_storage", offset, fuel_adjust(1e3, false, wiki), 1.32);
          }
        },
        effect() {
          let oil = spatialReasoning(3500) * (global.tech["world_control"] ? 1.5 : 1);
          let helium = spatialReasoning(2500) * (global.tech["world_control"] ? 1.5 : 1);
          let uranium = spatialReasoning(1e3) * (global.tech["world_control"] ? 1.5 : 1);
          return `<div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}</div><div>${loc("plus_max_resource", [helium, global.resource.Helium_3.name])}</div><div>${loc("plus_max_resource", [uranium, global.resource.Uranium.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gas_storage");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["gas_storage", "space"]
          };
        }
      },
      star_dock: {
        id: "space-star_dock",
        title() {
          return loc("space_gas_star_dock_title");
        },
        desc() {
          return `<div>${loc("space_gas_star_dock_title")}</div><div class="has-text-special">${loc("space_gas_star_dock_desc_req")}</div>`;
        },
        reqs: { genesis: 3 },
        queue_complete() {
          return 1 - global.space.star_dock.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("star_dock") ? global.space.star_dock.count : 0) === 0 ? 15e5 : 0;
          },
          Steel(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("star_dock") ? global.space.star_dock.count : 0) === 0 ? 5e5 : 0;
          },
          Helium_3(offset, wiki) {
            return (offset || 0) + (global.space.hasOwnProperty("star_dock") ? global.space.star_dock.count : 0) === 0 ? Math.round(fuel_adjust(global.race["gravity_well"] ? 25e3 : 1e4, false, wiki)) : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("star_dock") ? global.space.star_dock.count : 0) === 0 ? 25e4 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("star_dock") ? global.space.star_dock.count : 0) === 0 ? 1e4 : 0;
          }
        },
        effect() {
          return `<div>${loc("space_gas_star_dock_effect1")}</div>`;
        },
        special: true,
        action(args) {
          if (global.space.star_dock.count === 0 && payCosts($(this)[0])) {
            incrementStruct("star_dock");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              ship: 0,
              probe: 0,
              template: global.race.species
            },
            p: ["star_dock", "space"]
          };
        }
      }
    },
    spc_gas_moon: {
      info: {
        name() {
          return planetName().gas_moon;
        },
        desc() {
          return loc("space_gas_moon_info_desc", [planetName().gas_moon, planetName().gas]);
        },
        zone: "outer",
        syndicate() {
          return true;
        }
      },
      gas_moon_mission: {
        id: "space-gas_moon_mission",
        title() {
          return loc("space_mission_title", [planetName().gas_moon]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().gas_moon]);
        },
        reqs: { space: 5 },
        grant: ["space", 6],
        queue_complete() {
          return global.tech.space >= 6 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(3e4, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_gas_moon_mission_effect", [planetName().gas_moon]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_gas_moon_mission_action", [planetName().gas_moon]), "info", false, ["progress"]);
            initStruct(spaceProjects.spc_gas_moon.outpost);
            global.tech["gas_moon"] = 1;
            return true;
          }
          return false;
        }
      },
      outpost: {
        id: "space-outpost",
        title: loc("space_gas_moon_outpost_title"),
        desc() {
          return `<div>${loc("space_gas_moon_outpost_desc")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Oil.name])}</div>`;
        },
        reqs: { gas_moon: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("outpost", offset, 666e3, 1.3);
          },
          Titanium(offset) {
            return spaceCostMultiplier("outpost", offset, 18e3, 1.3);
          },
          Iridium(offset) {
            return spaceCostMultiplier("outpost", offset, 2500, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("outpost", offset, fuel_adjust(6e3, false, wiki), 1.3);
          },
          Mythril(offset) {
            return spaceCostMultiplier("outpost", offset, 300, 1.3);
          }
        },
        effect(wiki) {
          let p_values = production("outpost");
          let neutronium = p_values.b;
          let max = spatialReasoning(500);
          let oil = +fuel_adjust(2, true, wiki).toFixed(2);
          return `<div>${loc("space_gas_moon_outpost_effect1", [neutronium])}</div><div>${loc("plus_max_resource", [max, global.resource.Neutronium.name])}</div><div class="has-text-caution">${loc("space_gas_moon_outpost_effect3", [oil, $(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(3);
        },
        powerBalancer() {
          return [{ r: "Neutronium", k: "lpmod" }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("outpost");
            global.resource["Neutronium"].display = true;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["outpost", "space"]
          };
        }
      },
      drone: {
        id: "space-drone",
        title: loc("space_gas_moon_drone_title"),
        desc() {
          return `<div>${loc("space_gas_moon_drone_desc")}</div>`;
        },
        reqs: { gas_moon: 1, drone: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("drone", offset, 25e4, 1.3);
          },
          Steel(offset) {
            return spaceCostMultiplier("drone", offset, 2e4, 1.3);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("drone", offset, 500, 1.3);
          },
          Elerium(offset) {
            return spaceCostMultiplier("drone", offset, 25, 1.3);
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("drone", offset, 45e3, 1.3);
          }
        },
        effect() {
          let value = global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 3 ? 12 : 6;
          return `<div>${loc("space_gas_moon_drone_effect1", [value])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("drone");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["drone", "space"]
          };
        }
      },
      oil_extractor: {
        id: "space-oil_extractor",
        title: loc("space_gas_moon_oil_extractor_title"),
        desc() {
          return `<div>${loc("space_gas_moon_oil_extractor_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { gas_moon: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("oil_extractor", offset, 666e3, 1.3);
          },
          Polymer(offset) {
            return spaceCostMultiplier("oil_extractor", offset, 7500, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("oil_extractor", offset, fuel_adjust(2500, false, wiki), 1.3);
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("oil_extractor", offset, 5e3, 1.3);
          }
        },
        effect() {
          let oil = +production("oil_extractor").toFixed(2);
          let desc = `<div>${loc("space_gas_moon_oil_extractor_effect1", [oil])}</div>`;
          if (global.race["blubber"] && global.city.hasOwnProperty("oil_well")) {
            let maxDead = global.city.oil_well.count + (global.space["oil_extractor"] ? global.space.oil_extractor.count : 0);
            desc += `<div>${loc("city_oil_well_bodies", [+global.city.oil_well.dead.toFixed(1), 50 * maxDead])}</div>`;
            desc += `<div>${loc("city_oil_well_consume", [traits.blubber.vars()[0]])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          return [{ r: "Oil", k: "lpmod" }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("oil_extractor");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["oil_extractor", "space"]
          };
        }
      }
    },
    spc_belt: {
      info: {
        name() {
          return loc("space_belt_info_name");
        },
        desc() {
          return global.space["space_station"] && global.space.space_station.count > 0 ? `<div>${loc("space_belt_info_desc", [planetName().red, planetName().gas])}</div><div class="has-text-special">${loc("space_belt_info_desc2")}</div>` : loc("space_belt_info_desc", [planetName().red, planetName().gas]);
        },
        support: "space_station",
        zone: "inner",
        syndicate() {
          return true;
        }
      },
      belt_mission: {
        id: "space-belt_mission",
        title() {
          return loc("space_belt_mission_title");
        },
        desc() {
          return loc("space_belt_mission_desc");
        },
        reqs: { space: 5 },
        grant: ["asteroid", 1],
        queue_complete() {
          return global.tech.asteroid >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(25e3, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_belt_mission_effect1");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_belt_mission_action"), "info", false, ["progress"]);
            global.settings.space.dwarf = true;
            return true;
          }
          return false;
        }
      },
      space_station: {
        id: "space-space_station",
        title: loc("space_belt_station_title"),
        desc() {
          return `<div>${loc("space_belt_station_desc")}</div><div class="has-text-special">${loc("requires_power_space", [global.resource.Food.name])}</div>`;
        },
        reqs: { asteroid: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("space_station", offset, 25e4, 1.3);
          },
          Iron(offset) {
            return spaceCostMultiplier("space_station", offset, 85e3, 1.3);
          },
          Polymer(offset) {
            return spaceCostMultiplier("space_station", offset, 18e3, 1.3);
          },
          Iridium(offset) {
            return spaceCostMultiplier("space_station", offset, 2800, 1.28);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("space_station", offset, fuel_adjust(2e3, false, wiki), 1.3);
          },
          Mythril(offset) {
            return spaceCostMultiplier("space_station", offset, 75, 1.25);
          }
        },
        effect(wiki) {
          let helium = +fuel_adjust(2.5, true, wiki).toFixed(2);
          let food = global.race["cataclysm"] ? 1 : 10;
          let elerium_cap = spatialReasoning(5);
          let elerium = global.tech["asteroid"] >= 5 ? `<div>${loc("plus_max_resource", [elerium_cap, global.resource.Elerium.name])}</div>` : "";
          if (global.race["fasting"]) {
            return `<div>${loc("plus_max_resource", [jobScale(3), loc("job_space_miner")])}</div>${elerium}<div class="has-text-caution">${loc("space_belt_station_effect5", [helium, $(this)[0].powered()])}</div>`;
          }
          return `<div>${loc("plus_max_resource", [jobScale(3), loc("job_space_miner")])}</div>${elerium}<div class="has-text-caution">${loc("space_belt_station_effect3", [helium])}</div><div class="has-text-caution">${loc("space_belt_station_effect4", [food, $(this)[0].powered(), global.resource.Food.name])}</div>`;
        },
        support() {
          return jobScale(3);
        },
        powered() {
          return powerCostMod(3);
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("space_station");
            global.civic.space_miner.display = true;
            if (global.tech["asteroid"] < 3) {
              global.tech["asteroid"] = 3;
            }
            if (powerOnNewStruct($(this)[0])) {
              let hiredMax = jobScale(3);
              global.civic.space_miner.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.space_miner.workers += hired;
            }
            if (global.race["orbit_decay"] && global.race.orbit_decay > global.stats.days + 1e3) {
              global.race.orbit_decay = global.stats.days + 1e3;
              messageQueue(loc("evo_challenge_orbit_decayed_accelerated", [global.race.orbit_decay - global.stats.days]), "info", false, ["progress"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["space_station", "space"]
          };
        }
      },
      elerium_ship: {
        id: "space-elerium_ship",
        title: loc("space_belt_elerium_ship_title"),
        desc() {
          return loc("space_belt_elerium_ship_title");
        },
        reqs: { asteroid: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elerium_ship", offset, 5e5, 1.3);
          },
          Uranium(offset) {
            return spaceCostMultiplier("elerium_ship", offset, 2500, 1.3);
          },
          Titanium(offset) {
            return spaceCostMultiplier("elerium_ship", offset, 1e4, 1.3);
          },
          Mythril(offset) {
            return spaceCostMultiplier("elerium_ship", offset, 500, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("elerium_ship", offset, fuel_adjust(5e3, false, wiki), 1.3);
          }
        },
        effect() {
          let elerium = +production("elerium_ship").toFixed(4);
          return `<div class="has-text-caution">${loc("space_belt_elerium_ship_effect1", [jobScale(2)])}</div><div>${loc("space_belt_elerium_ship_effect2", [elerium])}</div>`;
        },
        s_type: "belt",
        support() {
          return jobScale(-2);
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("elerium_ship");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elerium_ship", "space"]
          };
        }
      },
      iridium_ship: {
        id: "space-iridium_ship",
        title: loc("space_belt_iridium_ship_title"),
        desc() {
          return loc("space_belt_iridium_ship_title");
        },
        reqs: { asteroid: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("iridium_ship", offset, 12e4, 1.3);
          },
          Uranium(offset) {
            return spaceCostMultiplier("iridium_ship", offset, 1e3, 1.3);
          },
          Alloy(offset) {
            return spaceCostMultiplier("iridium_ship", offset, 48e3, 1.3);
          },
          Iridium(offset) {
            return spaceCostMultiplier("iridium_ship", offset, 2800, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("iridium_ship", offset, fuel_adjust(1800, false, wiki), 1.3);
          }
        },
        effect() {
          let iridium = +production("iridium_ship").toFixed(3);
          return `<div class="has-text-caution">${loc("space_belt_iridium_ship_effect1", [jobScale(1)])}</div><div>${loc("space_belt_iridium_ship_effect2", [iridium])}</div>`;
        },
        s_type: "belt",
        support() {
          return jobScale(-1);
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("iridium_ship");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["iridium_ship", "space"]
          };
        }
      },
      iron_ship: {
        id: "space-iron_ship",
        title: loc("space_belt_iron_ship_title"),
        desc() {
          return loc("space_belt_iron_ship_title");
        },
        reqs: { asteroid: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("iron_ship", offset, 8e4, 1.3);
          },
          Steel(offset) {
            return spaceCostMultiplier("iron_ship", offset, 42e3, 1.3);
          },
          Aluminium(offset) {
            return spaceCostMultiplier("iron_ship", offset, 38e3, 1.3);
          },
          Polymer(offset) {
            return spaceCostMultiplier("iron_ship", offset, 16e3, 1.3);
          },
          Helium_3(offset, wiki) {
            return spaceCostMultiplier("iron_ship", offset, fuel_adjust(1200, false, wiki), 1.3);
          }
        },
        effect() {
          let iron = +production("iron_ship").toFixed(2);
          if (global.tech["solar"] && global.tech["solar"] >= 5) {
            return `<div class="has-text-caution">${loc("space_belt_iron_ship_effect1", [jobScale(1)])}</div><div>${loc("space_belt_iron_ship_effect2", [iron])}</div><div>${loc("space_belt_iron_ship_effect3")}</div>`;
          } else {
            return `<div class="has-text-caution">${loc("space_belt_iron_ship_effect1", [jobScale(1)])}</div><div>${loc("space_belt_iron_ship_effect2", [iron])}</div>`;
          }
        },
        s_type: "belt",
        support() {
          return jobScale(-1);
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("iron_ship");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["iron_ship", "space"]
          };
        }
      }
    },
    spc_dwarf: {
      info: {
        name() {
          return planetName().dwarf;
        },
        desc() {
          return loc("space_dwarf_info_desc", [planetName().dwarf]);
        },
        zone: "inner",
        syndicate() {
          return false;
        }
      },
      dwarf_mission: {
        id: "space-dwarf_mission",
        title() {
          return loc("space_mission_title", [planetName().dwarf]);
        },
        desc() {
          return loc("space_mission_desc", [planetName().dwarf]);
        },
        reqs: { asteroid: 1, elerium: 1 },
        grant: ["dwarf", 1],
        queue_complete() {
          return global.tech.dwarf >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(45e3, false, wiki).toFixed(0);
          }
        },
        effect() {
          return loc("space_dwarf_mission_effect1", [planetName().dwarf]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("space_dwarf_mission_action", [planetName().dwarf]), "info", false, ["progress"]);
            initStruct(spaceProjects.spc_dwarf.elerium_contain);
            return true;
          }
          return false;
        }
      },
      elerium_contain: {
        id: "space-elerium_contain",
        title: loc("space_dwarf_elerium_contain_title"),
        desc() {
          return `<div>${loc("space_dwarf_elerium_contain_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { dwarf: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elerium_contain", offset, 8e5, 1.28);
          },
          Cement(offset) {
            return spaceCostMultiplier("elerium_contain", offset, 12e4, 1.28);
          },
          Iridium(offset) {
            return spaceCostMultiplier("elerium_contain", offset, 5e4, 1.28);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("elerium_contain", offset, 250, 1.28);
          }
        },
        effect() {
          let elerium = spatialReasoning(100);
          return `<div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(6);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("elerium_contain");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elerium_contain", "space"]
          };
        }
      },
      e_reactor: {
        id: "space-e_reactor",
        title: loc("space_dwarf_reactor_title"),
        desc() {
          return `<div>${loc("space_dwarf_reactor_title")}</div><div class="has-text-special">${loc("space_dwarf_reactor_desc_req")}</div>`;
        },
        reqs: { elerium: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("e_reactor", offset, 125e4, 1.28);
          },
          Steel(offset) {
            return spaceCostMultiplier("e_reactor", offset, 35e4, 1.28);
          },
          Neutronium(offset) {
            return spaceCostMultiplier("e_reactor", offset, 1250, 1.28);
          },
          Mythril(offset) {
            return spaceCostMultiplier("e_reactor", offset, 2500, 1.28);
          }
        },
        effect() {
          let elerium = $(this)[0].p_fuel().a;
          let power = $(this)[0].powered() * -1;
          return `<div>${loc("space_dwarf_reactor_effect1", [power])}</div><div  class="has-text-caution">${loc("space_dwarf_reactor_effect2", [elerium])}</div>`;
        },
        powered() {
          return powerModifier(-25);
        },
        p_fuel() {
          return { r: "Elerium", a: 0.05 };
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("e_reactor");
            global.space["e_reactor"].on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["e_reactor", "space"]
          };
        }
      },
      world_collider: {
        id: "space-world_collider",
        title: loc("space_dwarf_collider_title"),
        desc(wiki) {
          if (!global.space.hasOwnProperty("world_collider") || global.space.world_collider.count < 1859 || wiki) {
            return `<div>${loc("space_dwarf_collider_desc")}</div><div class="has-text-special">${loc("space_dwarf_collider_desc_req")}</div>` + (global.space.hasOwnProperty("world_collider") && global.space.world_collider.count >= 1859 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          }
        },
        reqs: { science: 10 },
        path: ["standard"],
        condition() {
          return global.space.world_collider.count < 1859 ? true : false;
        },
        queue_size: 100,
        queue_complete() {
          return 1859 - global.space.world_collider.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 25e3 : 0;
          },
          Copper(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 750 : 0;
          },
          Alloy(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 125 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 12 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 1 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0) < 1859 ? 10 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("world_collider") ? global.space.world_collider.count : 0);
          if (count < 1859) {
            let remain = 1859 - count;
            return `<div>${loc("space_dwarf_collider_effect1")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return spaceProjects.spc_dwarf.world_controller.effect();
          }
        },
        action(args) {
          if (global.space.world_collider.count < 1859 && payCosts($(this)[0])) {
            incrementStruct("world_collider");
            if (global.space.world_collider.count >= 1859) {
              global.tech["science"] = 11;
              initStruct(spaceProjects.spc_dwarf.world_controller);
              incrementStruct("world_controller");
              if (global.settings.alwaysPower) {
                powerOnNewStruct(spaceProjects.spc_dwarf.world_controller);
              }
              drawTech();
              renderSpace();
              if (global.race["banana"]) {
                let affix = universeAffix();
                global.stats.banana.b2[affix] = true;
                if (affix !== "m" && affix !== "l") {
                  global.stats.banana.b2.l = true;
                }
              }
              clearPopper();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["world_collider", "space"]
          };
        },
        flair: loc("space_dwarf_collider_flair")
      },
      world_controller: {
        id: "space-world_controller",
        title: loc("space_dwarf_collider_title"),
        desc() {
          return `<div>${loc("space_dwarf_collider_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        wiki: false,
        reqs: { science: 11 },
        path: ["standard"],
        condition() {
          return global.space.world_collider.count < 1859 ? false : true;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect(wiki) {
          let boost = 25;
          if (global.interstellar["far_reach"]) {
            let num_farpoint_on = wiki ? global.interstellar.far_reach.on : p_on["far_reach"];
            if (num_farpoint_on > 0) {
              boost += num_farpoint_on;
            }
          }
          if (global.tech.science >= 19) {
            boost += 15;
          }
          return `<div>${loc("plus_max_resource", [boost + "%", global.resource.Knowledge.name])}</div><div>${loc("space_dwarf_controller_effect3")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(20);
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["world_controller", "space"]
          };
        },
        flair: loc("space_dwarf_controller_flair")
      },
      shipyard: {
        id: "space-shipyard",
        title: loc("outer_shipyard_title"),
        desc() {
          return `<div>${loc("outer_shipyard_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { shipyard: 1 },
        path: ["truepath"],
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 1e7 : 0;
          },
          Aluminium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 1e6 : 0;
          },
          Titanium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 65e4 : 0;
          },
          Iridium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 25e4 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 1e4 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("shipyard") ? global.space.shipyard.count : 0) < 1 ? 5e5 : 0;
          }
        },
        queue_complete() {
          return 1 - global.space.shipyard.count;
        },
        effect() {
          return `<div>${loc("outer_shipyard_effect")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(50);
        },
        special: true,
        sAction() {
          if (p_on["shipyard"]) {
            global.settings.civTabs = 2;
            global.settings.govTabs = 5;
            if (!global.settings.tabLoad) {
              loadTab("mTabCivic");
              clearPopper(`space-shipyard`);
            }
          }
        },
        action(args) {
          if (global.space.shipyard.count < 1 && payCosts($(this)[0])) {
            incrementStruct("shipyard");
            if (powerOnNewStruct($(this)[0])) {
              global.settings.showShipYard = true;
            }
            global.tech["syard_class"] = 2;
            global.tech["syard_armor"] = 3;
            global.tech["syard_weapon"] = 1;
            global.tech["syard_engine"] = 2;
            global.tech["syard_power"] = 3;
            global.tech["syard_sensor"] = 3;
            drawShipYard();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, ships: [], expand: true, sort: true },
            p: ["shipyard", "space"]
          };
        }
      },
      mass_relay: {
        id: "space-mass_relay",
        title: loc("space_dwarf_mass_relay_title"),
        desc(wiki) {
          if (!global.space.hasOwnProperty("mass_relay") || global.space.mass_relay.count < 100 || wiki) {
            return `<div>${loc("space_dwarf_mass_relay_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          }
        },
        reqs: { outer: 5 },
        path: ["truepath"],
        condition() {
          return global.space.mass_relay.count < 100 ? true : false;
        },
        queue_size: 5,
        queue_complete() {
          return 100 - global.space.mass_relay.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 1e7 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 7500 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 18e3 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 125 : 0;
          },
          Stanene(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 1e5 : 0;
          },
          Quantium(offset) {
            return (offset || 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0) < 100 ? 25e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.space.hasOwnProperty("mass_relay") ? global.space.mass_relay.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("space_dwarf_mass_relay_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return spaceProjects.spc_dwarf.m_relay.effect();
          }
        },
        action(args) {
          if (global.space.mass_relay.count < 100 && payCosts($(this)[0])) {
            global.space.mass_relay.count++;
            if (global.space.mass_relay.count >= 100) {
              global.tech["outer"] = 6;
              initStruct(spaceProjects.spc_dwarf.m_relay);
              incrementStruct("m_relay", "space");
              powerOnNewStruct(spaceProjects.spc_dwarf.m_relay);
              drawTech();
              renderSpace();
              clearPopper();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["mass_relay", "space"]
          };
        }
      },
      m_relay: {
        id: "space-m_relay",
        title: loc("space_dwarf_mass_relay_title"),
        desc() {
          return `<div>${loc("space_dwarf_mass_relay_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { outer: 6 },
        path: ["truepath"],
        condition() {
          return global.space.mass_relay.count >= 100 ? true : false;
        },
        wiki: false,
        queue_complete() {
          return 0;
        },
        cost: {},
        powered() {
          return powerCostMod(100);
        },
        effect() {
          let charge = Math.floor(global.space.m_relay.charged / 10) / 10;
          return `<div>${loc("space_dwarf_mass_relay_effect2", [planetName().dwarf])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div><div>${loc("space_dwarf_mass_relay_charged", [charge])}</div>`;
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, charged: 0 },
            p: ["m_relay", "space"]
          };
        }
      }
    },
    spc_titan: outerTruthTech().spc_titan,
    spc_enceladus: outerTruthTech().spc_enceladus,
    spc_triton: outerTruthTech().spc_triton,
    spc_kuiper: outerTruthTech().spc_kuiper,
    spc_eris: outerTruthTech().spc_eris
  };
  var interstellarProjects = {
    int_alpha: {
      info: {
        name: loc("interstellar_alpha_name"),
        desc() {
          return global.tech["alpha"] ? loc("interstellar_alpha_desc2", [races[global.race.species].home]) : loc("interstellar_alpha_desc1", [races[global.race.species].home]);
        },
        support: "starport"
      },
      alpha_mission: {
        id: "interstellar-alpha_mission",
        title: loc("space_mission_title", [loc("interstellar_alpha_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_alpha_name")]),
        reqs: { ftl: 2 },
        grant: ["alpha", 1],
        queue_complete() {
          return global.tech.alpha >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(4e4).toFixed(0);
          }
        },
        effect: loc("interstellar_alpha_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("interstellar_alpha_mission_result"), "info", false, ["progress"]);
            initStruct(interstellarProjects.int_nebula.nexus);
            initStruct(interstellarProjects.int_alpha.warehouse);
            return true;
          }
          return false;
        }
      },
      starport: {
        id: "interstellar-starport",
        title: loc("interstellar_alpha_starport_title"),
        desc() {
          return `<div>${loc("interstellar_alpha_starport_desc")}</div><div class="has-text-special">${loc("requires_power_space", [global.resource.Food.name])}</div>`;
        },
        reqs: { alpha: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("starport", offset, 1e6, 1.3, "interstellar");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("starport", offset, 4e5, 1.3, "interstellar");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("starport", offset, 1e3, 1.3, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("starport", offset, 100, 1.3, "interstellar");
          }
        },
        effect() {
          let helium = +int_fuel_adjust(5).toFixed(2);
          let food = 100;
          return `<div>${loc("interstellar_alpha_starport_effect1", [$(this)[0].support()])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect2", [helium, $(this)[0].powered()])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect3", [food, global.resource.Food.name])}</div>`;
        },
        support() {
          return 5;
        },
        powered() {
          return powerCostMod(10);
        },
        powerBalancer() {
          return [{ s: global.interstellar.starport.s_max - global.interstellar.starport.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("starport", "interstellar");
            global.settings.space.proxima = true;
            global.settings.space.nebula = true;
            powerOnNewStruct($(this)[0]);
            if (global.tech["alpha"] === 1) {
              global.tech["alpha"] = 2;
              initStruct(interstellarProjects.int_alpha.mining_droid);
            }
            if (global.race["orbit_decay"] && global.race.orbit_decay > global.stats.days + 100) {
              global.race.orbit_decay = global.stats.days + 100;
              messageQueue(loc("evo_challenge_orbit_decayed_accelerated", [global.race.orbit_decay - global.stats.days]), "info", false, ["progress"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              support: 0,
              s_max: 0
            },
            p: ["starport", "interstellar"]
          };
        }
      },
      habitat: {
        id: "interstellar-habitat",
        title: loc("interstellar_habitat_title"),
        desc: `<div>${loc("interstellar_habitat_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { alpha: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("habitat", offset, 8e5, 1.25, "interstellar");
          },
          Furs(offset) {
            return spaceCostMultiplier("habitat", offset, 38e3, 1.25, "interstellar");
          },
          Adamantite(offset) {
            return global.race["fasting"] && global.interstellar.habitat && global.interstellar.habitat.count < 5 ? 0 : spaceCostMultiplier("habitat", offset, 3200, 1.25, "interstellar");
          },
          Plywood(offset) {
            return spaceCostMultiplier("habitat", offset, 1e4, 1.25, "interstellar");
          },
          Horseshoe() {
            return global.race["hooved"] ? 1 : 0;
          }
        },
        effect() {
          let citizens = $(this)[0].citizens();
          return `<div>${loc("interstellar_alpha_starport_effect1", [$(this)[0].support()])}</div><div><span>${loc("plus_max_citizens", [citizens])}</span>, <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span></div>`;
        },
        support() {
          return 1;
        },
        powered() {
          return powerCostMod(2);
        },
        powerBalancer() {
          return [{ s: global.interstellar.starport.s_max - global.interstellar.starport.support }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("habitat", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.resource[global.race.species].max += $(this)[0].citizens();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["habitat", "interstellar"]
          };
        },
        citizens() {
          let pop = 1;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      mining_droid: {
        id: "interstellar-mining_droid",
        title: loc("interstellar_mining_droid_title"),
        desc: `<div>${loc("interstellar_mining_droid_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_alpha_name")])}</div>`,
        reqs: { alpha: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mining_droid", offset, 65e4, 1.28, "interstellar");
          },
          Steel(offset) {
            return spaceCostMultiplier("mining_droid", offset, 12e4, 1.28, "interstellar");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("mining_droid", offset, 75e3, 1.28, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("mining_droid", offset, 50, 1.28, "interstellar");
          }
        },
        effect() {
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div>${loc("interstellar_mining_droid_effect")}</div>`;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        special: true,
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mining_droid", "interstellar");
            global.resource.Adamantite.display = true;
            if (powerOnNewStruct($(this)[0])) {
              global.interstellar.mining_droid.adam++;
            }
            if (!global.tech["droids"]) {
              global.tech["droids"] = 1;
              initStruct(interstellarProjects.int_alpha.processing);
            }
            global.settings.showIndustry = true;
            defineIndustry();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, adam: 0, uran: 0, coal: 0, alum: 0 },
            p: ["mining_droid", "interstellar"]
          };
        }
      },
      processing: {
        id: "interstellar-processing",
        title: loc("interstellar_processing_title"),
        desc: `<div>${loc("interstellar_processing_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_alpha_name")])}</div>`,
        reqs: { droids: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("processing", offset, 35e4, 1.28, "interstellar");
          },
          Iron(offset) {
            return spaceCostMultiplier("processing", offset, 18e4, 1.28, "interstellar");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("processing", offset, 6e4, 1.28, "interstellar");
          },
          Iridium(offset) {
            return spaceCostMultiplier("processing", offset, 5e3, 1.28, "interstellar");
          }
        },
        effect(wiki) {
          let bonus = 12;
          let num_citadels_on = wiki ? global.interstellar?.citadel?.on ?? 0 : p_on["citadel"];
          if (global.tech["ai_core"] && global.tech["ai_core"] >= 2 && num_citadels_on > 0) {
            bonus += num_citadels_on * 2;
          }
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div>${loc("interstellar_processing_effect", [bonus])}</div>`;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("processing", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["processing", "interstellar"]
          };
        }
      },
      fusion: {
        id: "interstellar-fusion",
        title: loc("interstellar_fusion_title"),
        desc() {
          return `<div>${loc("interstellar_fusion_title")}</div><div class="has-text-special">${loc("requires_power_support_combo", [loc("interstellar_alpha_name"), global.resource.Deuterium.name])}</div>`;
        },
        reqs: { fusion: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("fusion", offset, 99e4, 1.28, "interstellar");
          },
          Iridium(offset) {
            return spaceCostMultiplier("fusion", offset, 44e3, 1.28, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("fusion", offset, 350, 1.28, "interstellar");
          },
          Brick(offset) {
            return spaceCostMultiplier("fusion", offset, 18e3, 1.28, "interstellar");
          }
        },
        effect() {
          let det = 1.25;
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div><span>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered()])}</span>, <span class="has-text-caution">${loc("interstellar_fusion_effect", [det])}</span></div>`;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return powerModifier(-22);
        },
        p_fuel() {
          return { r: "Deuterium", a: 1.25 };
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("fusion", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["fusion", "interstellar"]
          };
        }
      },
      laboratory: {
        id: "interstellar-laboratory",
        title() {
          return global.race.universe === "magic" ? loc("tech_sanctum") : loc("interstellar_laboratory_title");
        },
        desc: `<div>${loc(global.race.universe === "magic" ? "tech_sanctum" : "interstellar_laboratory_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_alpha_name")])}</div>`,
        reqs: { science: 12 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("laboratory", offset, 75e4, 1.28, "interstellar");
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? spaceCostMultiplier("laboratory", offset, 1200, 1.28, "interstellar") : 0;
          },
          Titanium(offset) {
            return spaceCostMultiplier("laboratory", offset, 12e4, 1.28, "interstellar");
          },
          Alloy(offset) {
            return spaceCostMultiplier("laboratory", offset, 95e3, 1.28, "interstellar");
          },
          Mythril(offset) {
            return spaceCostMultiplier("laboratory", offset, 8500, 1.28, "interstellar");
          }
        },
        effect(wiki) {
          let know = 1e4;
          if (global.tech.science >= 15) {
            let num_exo_labs_on = wiki ? global.space.exotic_lab.on : support_on["exotic_lab"];
            know *= 1 + (global.race["cataclysm"] || global.race["orbit_decayed"] ? num_exo_labs_on : global.city.wardenclyffe.count) * 0.02;
          }
          let sg_on = isStargateOn(wiki);
          let num_tech_scavs_on = sg_on ? wiki ? global.galaxy?.scavenger?.on ?? 0 : gal_on["scavenger"] : 0;
          if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && num_tech_scavs_on > 0) {
            know *= 1 + num_tech_scavs_on * +(piracy("gxy_alien2", false, false, wiki) * 0.75).toFixed(1);
          }
          if (global.tech["science"] >= 21) {
            know *= 1.45;
          }
          know = Math.round(know);
          let sci = "";
          if (global.tech.science >= 16) {
            sci = `<div>${loc("city_wardenclyffe_effect1", [jobScale(1), global.civic.scientist.name])}</div>`;
          }
          let desc = `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div>${sci}<div>${loc("city_max_knowledge", [know])}</div>`;
          if (global.tech["science"] >= 13) {
            desc = desc + `<div>${loc("interstellar_laboratory_effect", [5])}</div>`;
          }
          if (global.race.universe === "magic") {
            let mana = spatialReasoning(12);
            desc = desc + `<div>${loc("plus_max_resource", [mana, global.resource.Mana.name])}</div>`;
          }
          return desc;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("laboratory", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.resource.Knowledge.max += 1e4;
              if (global.tech.science >= 16) {
                global.civic.scientist.display = true;
                global.civic.scientist.max += jobScale(1);
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["laboratory", "interstellar"]
          };
        }
      },
      exchange: {
        id: "interstellar-exchange",
        title: loc("interstellar_exchange_title"),
        desc: `<div>${loc("interstellar_exchange_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_alpha_name")])}</div>`,
        reqs: { banking: 12 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("exchange", offset, traitCostMod("untrustworthy", 68e4), 1.28, "interstellar");
          },
          Stone(offset) {
            return spaceCostMultiplier("exchange", offset, traitCostMod("untrustworthy", 115e3), 1.28, "interstellar");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("exchange", offset, traitCostMod("untrustworthy", 55e3), 1.28, "interstellar");
          },
          Graphene(offset) {
            return spaceCostMultiplier("exchange", offset, traitCostMod("untrustworthy", 78e3), 1.28, "interstellar");
          }
        },
        effect(wiki) {
          let banks = global.race["cataclysm"] || global.race["orbit_decayed"] ? wiki ? global.space.spaceport.on : p_on["spaceport"] : global.city["bank"] ? global.city.bank.count : 0;
          let b_vault = global.race["cataclysm"] || global.race["orbit_decayed"] ? bank_vault() * 4 : bank_vault();
          if (global.eden["eternal_bank"]) {
            banks += global.eden.eternal_bank.count * 2;
          }
          let vault = spatialReasoning(global.city["bank"] ? b_vault * banks / 18 : 0);
          if (global.race["inflation"]) {
            vault *= 2;
          }
          if (global.tech.banking >= 13) {
            if (global.galaxy["freighter"]) {
              let num_freighter_on = wiki ? global.galaxy.freighter.on : gal_on["freighter"];
              vault *= 1 + num_freighter_on * 0.03;
            }
            if (global.galaxy["super_freighter"]) {
              let num_super_freighter_on = wiki ? global.galaxy.super_freighter.on : gal_on["super_freighter"];
              vault *= 1 + num_super_freighter_on * 0.08;
            }
          }
          vault = +vault.toFixed(0);
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div>${loc("plus_max_resource", [`$${vault.toLocaleString()}`, loc("resource_Money_name")])}</div>`;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("exchange", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.resource.Money.max += +spatialReasoning(45e4).toFixed(0);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["exchange", "interstellar"]
          };
        }
      },
      g_factory: {
        id: "interstellar-g_factory",
        title: loc("interstellar_g_factory_title"),
        desc: `<div>${loc("interstellar_g_factory_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_alpha_name")])}</div>`,
        reqs: { graphene: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("g_factory", offset, 95e4, 1.28, "interstellar");
          },
          Copper(offset) {
            return spaceCostMultiplier("g_factory", offset, 165e3, 1.28, "interstellar");
          },
          Cement(offset) {
            return spaceCostMultiplier("g_factory", offset, 22e4, 1.28, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("g_factory", offset, 750, 1.28, "interstellar");
          }
        },
        effect() {
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div>${loc("interstellar_g_factory_effect")}</div>`;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        special: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("g_factory", "interstellar");
            global.resource.Graphene.display = true;
            if (powerOnNewStruct($(this)[0])) {
              if (global.race["kindling_kindred"] || global.race["smoldering"]) {
                global.interstellar.g_factory.Oil++;
              } else {
                global.interstellar.g_factory.Lumber++;
              }
            }
            global.settings.showIndustry = true;
            defineIndustry();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, Lumber: 0, Coal: 0, Oil: 0 },
            p: ["g_factory", "interstellar"]
          };
        }
      },
      int_factory: {
        id: "interstellar-int_factory",
        title: loc("interstellar_int_factory_title"),
        desc() {
          return `<div>${loc("interstellar_int_factory_title")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Deuterium.name])}</div>`;
        },
        reqs: { alpha: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("int_factory", offset, 25e6, 1.26, "interstellar");
          },
          Coal(offset) {
            return spaceCostMultiplier("int_factory", offset, 1e7, 1.26, "interstellar");
          },
          Brick(offset) {
            return spaceCostMultiplier("int_factory", offset, 75e4, 1.26, "interstellar");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("int_factory", offset, 5e4, 1.26, "interstellar");
          }
        },
        effect() {
          let deuterium = +int_fuel_adjust(5).toFixed(2);
          return `<div>${loc("interstellar_int_factory_effect")}</div><div>${loc("city_crafted_mats", [10])}</div><div class="has-text-caution"><span>${loc("interstellar_fusion_effect", [deuterium])}</span> <span>${loc("minus_power", [$(this)[0].powered()])}</span></div>`;
        },
        powered() {
          return powerCostMod(5);
        },
        special: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("int_factory", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.city.factory.Alloy += 2;
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["int_factory", "interstellar"]
          };
        }
      },
      luxury_condo: {
        id: "interstellar-luxury_condo",
        title() {
          let halloween = eventActive("halloween");
          if (halloween.active) {
            return loc(`events_halloween_condo`);
          }
          return loc("tech_luxury_condo");
        },
        desc: `<div>${loc("tech_luxury_condo")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { alpha: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("luxury_condo", offset, traitCostMod("untrustworthy", 25e6), 1.25, "interstellar");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("luxury_condo", offset, traitCostMod("untrustworthy", 75e3), 1.25, "interstellar");
          },
          Stanene(offset) {
            return spaceCostMultiplier("luxury_condo", offset, traitCostMod("untrustworthy", 23e4), 1.25, "interstellar");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("luxury_condo", offset, traitCostMod("untrustworthy", 65e3), 1.25, "interstellar");
          },
          Nanoweave(offset) {
            return spaceCostMultiplier("luxury_condo", offset, traitCostMod("untrustworthy", 12500), 1.25, "interstellar");
          },
          Horseshoe() {
            return global.race["hooved"] ? 2 : 0;
          }
        },
        effect() {
          let citizens = $(this)[0].citizens();
          let safe = spatialReasoning(75e4);
          return `<div><span>${loc("plus_max_citizens", [citizens])}</span>, <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span></div><div>${loc("plus_max_resource", [`$${safe.toLocaleString()}`, loc("resource_Money_name")])}</div>`;
        },
        powered() {
          return powerCostMod(3);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("luxury_condo", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.resource[global.race.species].max += 2;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["luxury_condo", "interstellar"]
          };
        },
        citizens() {
          let pop = 2;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      zoo: {
        id: "interstellar-zoo",
        title: loc("tech_zoo"),
        desc() {
          return `<div>${loc("tech_zoo")}</div><div class="has-text-special">${loc("requires_power_support_combo", [loc("interstellar_alpha_name"), global.resource.Food.name])}</div>`;
        },
        reqs: { zoo: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("zoo", offset, 5e7, 1.24, "interstellar");
          },
          Polymer(offset) {
            return spaceCostMultiplier("zoo", offset, 6e6, 1.24, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("zoo", offset, 75e3, 1.24, "interstellar");
          },
          Brick(offset) {
            return spaceCostMultiplier("zoo", offset, 2e6, 1.24, "interstellar");
          }
        },
        effect() {
          let morale = 5;
          let max = 2;
          let food = 12e3;
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_alpha_name")])}</div><div>${loc("space_red_vr_center_effect1", [morale])}</div><div>${loc("space_red_vr_center_effect2", [max])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect3", [food, global.resource.Food.name])}</div>`;
        },
        powered() {
          return 0;
        },
        s_type: "alpha",
        support() {
          return -1;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("zoo", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["zoo", "interstellar"]
          };
        }
      },
      warehouse: {
        id: "interstellar-warehouse",
        title() {
          return global.tech["storage"] <= 2 ? loc("city_shed_title1") : global.tech["storage"] >= 4 ? loc("city_shed_title3") : loc("city_shed_title2");
        },
        desc() {
          let storage = global.tech["storage"] >= 3 ? global.tech["storage"] >= 4 ? loc("city_shed_desc_size3") : loc("city_shed_desc_size2") : loc("city_shed_desc_size1");
          return loc("city_shed_desc", [storage]);
        },
        reqs: { alpha: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("warehouse", offset, 175e3, 1.28, "interstellar");
          },
          Lumber(offset) {
            return spaceCostMultiplier("warehouse", offset, 1e5, 1.28, "interstellar");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("warehouse", offset, 12e4, 1.28, "interstellar");
          },
          Cement(offset) {
            return spaceCostMultiplier("warehouse", offset, 45e3, 1.28, "interstellar");
          }
        },
        res() {
          let r_list = ["Lumber", "Stone", "Chrysotile", "Furs", "Copper", "Iron", "Aluminium", "Cement", "Coal", "Nano_Tube", "Neutronium", "Adamantite", "Infernite"];
          if (global.tech["storage"] >= 3 && global.resource.Steel.display) {
            r_list.push("Steel");
          }
          if (global.tech["storage"] >= 4 && global.resource.Titanium.display) {
            r_list.push("Titanium");
          }
          return r_list;
        },
        val(res) {
          switch (res) {
            case "Lumber":
              return 750;
            case "Stone":
              return 750;
            case "Chrysotile":
              return 750;
            case "Furs":
              return 425;
            case "Copper":
              return 380;
            case "Iron":
              return 350;
            case "Aluminium":
              return 320;
            case "Cement":
              return 280;
            case "Coal":
              return 120;
            case "Steel":
              return 60;
            case "Titanium":
              return 40;
            case "Nano_Tube":
              return 30;
            case "Neutronium":
              return 8;
            case "Adamantite":
              return 18;
            case "Infernite":
              return 5;
            default:
              return 0;
          }
        },
        wide: true,
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = storageMultipler(1, wiki);
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * multiplier).toFixed(0), 1);
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage = storage + "</div>";
          return storage;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("warehouse", "interstellar");
            let multiplier = storageMultipler();
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                global.resource[res].max += spatialReasoning($(this)[0].val(res) * multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["warehouse", "interstellar"]
          };
        }
      },
      wonder_gardens: {
        id: "interstellar-wonder_gardens",
        title() {
          return loc("interstellar_wonder_gardens");
        },
        desc() {
          return loc("interstellar_wonder_gardens");
        },
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.interstellar["wonder_gardens"] ? true : false;
        },
        trait: ["wish"],
        wiki: false,
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action(args) {
          return false;
        }
      }
    },
    int_proxima: {
      info: {
        name: loc("interstellar_proxima_name"),
        desc() {
          return global.tech["proxima"] ? loc("interstellar_proxima_desc2") : loc("interstellar_proxima_desc1");
        }
      },
      proxima_mission: {
        id: "interstellar-proxima_mission",
        title: loc("space_mission_title", [loc("interstellar_proxima_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_proxima_name")]),
        reqs: { alpha: 1 },
        grant: ["proxima", 1],
        queue_complete() {
          return global.tech.proxima >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(42e3).toFixed(0);
          }
        },
        effect: loc("interstellar_proxima_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(interstellarProjects.int_proxima.xfer_station);
            messageQueue(loc("interstellar_proxima_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      xfer_station: {
        id: "interstellar-xfer_station",
        title: loc("interstellar_xfer_station_title"),
        desc() {
          return `<div>${loc("interstellar_xfer_station_desc")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Uranium.name])}</div>`;
        },
        reqs: { proxima: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("xfer_station", offset, 12e5, 1.28, "interstellar");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("xfer_station", offset, 1500, 1.28, "interstellar");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("xfer_station", offset, 6e3, 1.28, "interstellar");
          },
          Polymer(offset) {
            return spaceCostMultiplier("xfer_station", offset, 12e3, 1.28, "interstellar");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("xfer_station", offset, 3500, 1.28, "interstellar");
          }
        },
        effect() {
          let fuel = 0.28;
          let helium = spatialReasoning(5e3);
          let oil = spatialReasoning(4e3);
          let uranium = spatialReasoning(2500);
          let det = "";
          if (global.resource.Deuterium.display) {
            det = `<div>${loc("plus_max_resource", [spatialReasoning(2e3), global.resource.Deuterium.name])}</div>`;
          }
          return `<div>${loc("interstellar_alpha_starport_effect1", [$(this)[0].support()])}</div><div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}</div><div>${loc("plus_max_resource", [helium, global.resource.Helium_3.name])}</div><div>${loc("plus_max_resource", [uranium, global.resource.Uranium.name])}</div>${det}<div class="has-text-caution">${loc("city_fission_power_effect", [fuel])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        support() {
          return 1;
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          return [{ s: global.interstellar.starport.s_max - global.interstellar.starport.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("xfer_station", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global["resource"]["Uranium"].max += spatialReasoning(2500);
              global["resource"]["Helium_3"].max += spatialReasoning(5e3);
              global["resource"]["Oil"].max += spatialReasoning(4e3);
              global["resource"]["Deuterium"].max += spatialReasoning(2e3);
            }
            if (global.tech["proxima"] === 1) {
              global.tech["proxima"] = 2;
              initStruct(interstellarProjects.int_proxima.cargo_yard);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["xfer_station", "interstellar"]
          };
        }
      },
      cargo_yard: {
        id: "interstellar-cargo_yard",
        title: loc("interstellar_cargo_yard_title"),
        desc: loc("interstellar_cargo_yard_title"),
        reqs: { proxima: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("cargo_yard", offset, 275e3, 1.28, "interstellar");
          },
          Graphene(offset) {
            return spaceCostMultiplier("cargo_yard", offset, 7500, 1.28, "interstellar");
          },
          Mythril(offset) {
            return spaceCostMultiplier("cargo_yard", offset, 6e3, 1.28, "interstellar");
          }
        },
        effect(wiki) {
          let containers = 50;
          let neutronium = spatialReasoning(200);
          let infernite = spatialReasoning(150);
          let desc = `<div>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</div><div>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</div>`;
          desc = desc + `<div>${loc("plus_max_resource", [neutronium, global.resource.Neutronium.name])}</div><div>${loc("plus_max_resource", [infernite, global.resource.Infernite.name])}</div>`;
          if (global.tech["storage"] >= 7) {
            let boost = +get_qlevel(wiki).toFixed(3);
            desc = desc + `<div>${loc("interstellar_cargo_yard_effect", [boost])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("cargo_yard", "interstellar");
            let vol = 50;
            global.resource.Crates.max += vol;
            global.resource.Containers.max += vol;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["cargo_yard", "interstellar"]
          };
        }
      },
      cruiser: {
        id: "interstellar-cruiser",
        title: loc("interstellar_cruiser_title"),
        desc: loc("interstellar_cruiser_title"),
        reqs: { cruiser: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("cruiser", offset, 875e3, 1.28, "interstellar");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("cruiser", offset, 195e3, 1.28, "interstellar");
          },
          Deuterium(offset) {
            return spaceCostMultiplier("cruiser", offset, +int_fuel_adjust(1500).toFixed(0), 1.28, "interstellar");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("cruiser", offset, 2e3, 1.28, "interstellar");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("cruiser", offset, 250, 1.28, "interstellar");
          },
          Horseshoe() {
            return global.race["hooved"] ? 3 : 0;
          }
        },
        powered() {
          return 0;
        },
        effect() {
          let helium = +int_fuel_adjust(6).toFixed(2);
          let troops = $(this)[0].soldiers();
          let desc = `<div>${loc("plus_max_soldiers", [troops])}</div>`;
          if (global.race.universe === "evil") {
            desc += `<div>${loc("plus_max_resource", [1, global.resource.Authority.name])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("space_belt_station_effect3", [helium])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("cruiser", "interstellar");
            global.interstellar.cruiser.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["cruiser", "interstellar"]
          };
        },
        soldiers() {
          let soldiers = global.race["fasting"] ? 4 : 3;
          if (global.race["grenadier"]) {
            soldiers--;
          }
          return jobScale(soldiers);
        }
      },
      dyson: {
        id: "interstellar-dyson",
        title: loc("interstellar_dyson_title"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("dyson") || global.interstellar.dyson.count < 100 || wiki) {
            return `<div>${loc("interstellar_dyson_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_dyson_title")}</div>`;
          }
        },
        reqs: { proxima: 3 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.interstellar.dyson.count;
        },
        condition() {
          return global.interstellar.dyson.count >= 100 && global.tech["dyson"] ? false : true;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson") ? global.interstellar.dyson.count : 0) < 100 ? 25e4 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson") ? global.interstellar.dyson.count : 0) < 100 ? 1e4 : 0;
          },
          Infernite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson") ? global.interstellar.dyson.count : 0) < 100 ? 25 : 0;
          },
          Stanene(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson") ? global.interstellar.dyson.count : 0) < 100 ? 1e5 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("dyson") ? global.interstellar.dyson.count : 0);
          if (count < 100) {
            let power = count > 0 ? `<div>${loc("space_dwarf_reactor_effect1", [powerModifier(count * 1.25)])}</div>` : ``;
            let remain = 100 - count;
            return `<div>${loc("interstellar_dyson_effect")}</div>${power}<div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("interstellar_dyson_complete", [powerModifier(175)]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.dyson.count < 100) {
              incrementStruct("dyson", "interstellar");
              if (global.interstellar.dyson.count >= 100) {
                drawTech();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["dyson", "interstellar"]
          };
        }
      },
      dyson_sphere: {
        id: "interstellar-dyson_sphere",
        title: loc("interstellar_dyson_sphere_title"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("dyson_sphere") || global.interstellar.dyson_sphere.count < 100 || wiki) {
            return `<div>${loc("interstellar_dyson_sphere_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_dyson_sphere_title")}</div>`;
          }
        },
        reqs: { proxima: 3, dyson: 1 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.interstellar.dyson_sphere.count;
        },
        condition() {
          return global.interstellar.dyson.count >= 100 && global.tech["dyson"] && global.tech.dyson === 1 ? true : false;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson_sphere") ? global.interstellar.dyson_sphere.count : 0) < 100 ? 5e6 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson_sphere") ? global.interstellar.dyson_sphere.count : 0) < 100 ? 25e3 : 0;
          },
          Vitreloy(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson_sphere") ? global.interstellar.dyson_sphere.count : 0) < 100 ? 1250 : 0;
          },
          Aerogel(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("dyson_sphere") ? global.interstellar.dyson_sphere.count : 0) < 100 ? 75e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("dyson_sphere") ? global.interstellar.dyson_sphere.count : 0);
          if (count < 100) {
            let power = 175 + count * 5;
            let remain = 100 - count;
            return `<div>${loc("interstellar_dyson_sphere_effect")}</div><div>${loc("space_dwarf_reactor_effect1", [powerModifier(power)])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("interstellar_dyson_sphere_complete", [powerModifier(750)]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.dyson_sphere.count < 100) {
              incrementStruct("dyson_sphere", "interstellar");
              if (global.interstellar.dyson_sphere.count >= 100) {
                drawTech();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["dyson_sphere", "interstellar"]
          };
        }
      },
      orichalcum_sphere: {
        id: "interstellar-orichalcum_sphere",
        title: loc("interstellar_dyson_sphere_title"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("orichalcum_sphere") || global.interstellar.orichalcum_sphere.count < 100 || wiki) {
            return `<div>${loc("interstellar_orichalcum_sphere_desc")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_orichalcum_sphere_desc")}</div>`;
          }
        },
        reqs: { proxima: 3, dyson: 2 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.interstellar.orichalcum_sphere.count;
        },
        condition() {
          if ((global.tech["dyson"] ?? 0) < 2) {
            return false;
          }
          return global.interstellar.dyson_sphere.count >= 100 && (global.tech.dyson === 2 || global.interstellar.orichalcum_sphere.count < 100);
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("orichalcum_sphere") ? global.interstellar.orichalcum_sphere.count : 0) < 100 ? 25e6 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("orichalcum_sphere") ? global.interstellar.orichalcum_sphere.count : 0) < 100 ? 75e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("orichalcum_sphere") ? global.interstellar.orichalcum_sphere.count : 0);
          if (count < 100) {
            let power = 750 + count * 8;
            let remain = 100 - count;
            return `<div>${loc("interstellar_orichalcum_sphere_effect")}</div><div>${loc("space_dwarf_reactor_effect1", [powerModifier(power)])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("interstellar_dyson_sphere_complete", [powerModifier(1750)]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.orichalcum_sphere.count < 100) {
              incrementStruct("orichalcum_sphere", "interstellar");
              if (global.interstellar.orichalcum_sphere.count >= 100) {
                unlockAchieve("blacken_the_sun");
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["orichalcum_sphere", "interstellar"]
          };
        }
      },
      elysanite_sphere: {
        id: "interstellar-elysanite_sphere",
        title: loc("interstellar_dyson_sphere_title"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("elysanite_sphere") || global.interstellar.elysanite_sphere.count < 1e3 || wiki) {
            return `<div>${loc("interstellar_elysanite_sphere_desc")}</div><div class="has-text-special">${loc("requires_segments", [1e3])}</div>`;
          } else {
            return `<div>${loc("interstellar_elysanite_sphere_desc")}</div>`;
          }
        },
        reqs: { proxima: 3, dyson: 3 },
        queue_size: 50,
        queue_complete() {
          return 1e3 - global.interstellar.elysanite_sphere.count;
        },
        condition() {
          return global.interstellar.orichalcum_sphere.count >= 100 && global.tech["dyson"] && global.tech.dyson === 3 ? true : false;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("elysanite_sphere") ? global.interstellar.elysanite_sphere.count : 0) < 1e3 ? 1e9 : 0;
          },
          Asphodel_Powder(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("elysanite_sphere") ? global.interstellar.elysanite_sphere.count : 0) < 1e3 ? 25e3 : 0;
          },
          Elysanite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("elysanite_sphere") ? global.interstellar.elysanite_sphere.count : 0) < 1e3 ? 1e5 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("elysanite_sphere") ? global.interstellar.elysanite_sphere.count : 0);
          if (count < 1e3) {
            let power = 1750 + count * 18;
            let remain = 1e3 - count;
            return `<div>${loc("interstellar_elysanite_sphere_effect")}</div><div>${loc("space_dwarf_reactor_effect1", [powerModifier(power)])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return loc("interstellar_dyson_sphere_complete", [powerModifier(22500)]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.elysanite_sphere.count < 1e3) {
              incrementStruct("elysanite_sphere", "interstellar");
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["elysanite_sphere", "interstellar"]
          };
        }
      }
    },
    int_nebula: {
      info: {
        name: loc("interstellar_nebula_name"),
        desc() {
          return global.tech["nebula"] ? loc("interstellar_nebula_desc2") : loc("interstellar_nebula_desc1");
        },
        support: "nexus"
      },
      nebula_mission: {
        id: "interstellar-nebula_mission",
        title: loc("space_mission_title", [loc("interstellar_nebula_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_nebula_name")]),
        reqs: { alpha: 1 },
        grant: ["nebula", 1],
        queue_complete() {
          return global.tech.nebula >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(55e3).toFixed(0);
          }
        },
        effect: loc("interstellar_nebula_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("interstellar_nebula_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      nexus: {
        id: "interstellar-nexus",
        title: loc("interstellar_nexus_title"),
        desc() {
          return `<div>${loc("interstellar_nexus_title")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Money.name])}</div>`;
        },
        reqs: { nebula: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("nexus", offset, 9e5, 1.24, "interstellar");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("nexus", offset, 7500, 1.24, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("nexus", offset, 250, 1.24, "interstellar");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("nexus", offset, 14e3, 1.24, "interstellar");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("nexus", offset, 17500, 1.24, "interstellar");
          }
        },
        effect() {
          let oil = spatialReasoning(3500);
          let helium = spatialReasoning(4e3);
          let deuterium = spatialReasoning(3e3);
          let elerium = spatialReasoning(25);
          return `<div>${loc("interstellar_nexus_effect1", [$(this)[0].support()])}</div><div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}</div><div>${loc("plus_max_resource", [helium, global.resource.Helium_3.name])}</div><div>${loc("plus_max_resource", [deuterium, global.resource.Deuterium.name])}</div><div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div><div class="has-text-caution">${loc("interstellar_nexus_effect2", [$(this)[0].powered(), 350])}</div>`;
        },
        support() {
          return 2;
        },
        powered() {
          return powerCostMod(8);
        },
        powerBalancer() {
          return [{ s: global.interstellar.nexus.s_max - global.interstellar.nexus.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("nexus", "interstellar");
            global.resource.Deuterium.display = true;
            if (global.tech["nebula"] === 1) {
              initStruct(interstellarProjects.int_nebula.harvester);
              global.tech["nebula"] = 2;
            }
            if (powerOnNewStruct($(this)[0])) {
              global["resource"]["Oil"].max += spatialReasoning(2500);
              global["resource"]["Helium_3"].max += spatialReasoning(4e3);
              global["resource"]["Deuterium"].max += spatialReasoning(3e3);
              global["resource"]["Elerium"].max += spatialReasoning(25);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["nexus", "interstellar"]
          };
        }
      },
      harvester: {
        id: "interstellar-harvester",
        title: loc("interstellar_harvester_title"),
        desc: `<div>${loc("interstellar_harvester_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_nebula_name")])}</div>`,
        reqs: { nebula: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("harvester", offset, 65e4, 1.28, "interstellar");
          },
          Copper(offset) {
            return spaceCostMultiplier("harvester", offset, 8e4, 1.28, "interstellar");
          },
          Alloy(offset) {
            return spaceCostMultiplier("harvester", offset, 45e3, 1.28, "interstellar");
          },
          Iridium(offset) {
            return spaceCostMultiplier("harvester", offset, 8e3, 1.28, "interstellar");
          }
        },
        effect() {
          let helium = +production("harvester", "helium").toFixed(3);
          let deuterium = +production("harvester", "deuterium").toFixed(3);
          let ram = global.tech["ram_scoop"] ? `<div>${loc("interstellar_harvester_effect", [deuterium])}</div>` : "";
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_nebula_name")])}</div><div>${loc("space_gas_mining_effect1", [helium])}</div>${ram}`;
        },
        s_type: "nebula",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("harvester", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["harvester", "interstellar"]
          };
        }
      },
      elerium_prospector: {
        id: "interstellar-elerium_prospector",
        title: loc("interstellar_elerium_prospector_title"),
        desc: `<div>${loc("interstellar_elerium_prospector_title")}</div><div class="has-text-special">${loc("space_support", [loc("interstellar_nebula_name")])}</div>`,
        reqs: { nebula: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("elerium_prospector", offset, 825e3, 1.28, "interstellar");
          },
          Steel(offset) {
            return spaceCostMultiplier("elerium_prospector", offset, 18e3, 1.28, "interstellar");
          },
          Polymer(offset) {
            return spaceCostMultiplier("elerium_prospector", offset, 22e3, 1.28, "interstellar");
          },
          Graphene(offset) {
            return spaceCostMultiplier("elerium_prospector", offset, 82e3, 1.28, "interstellar");
          },
          Stanene(offset) {
            return spaceCostMultiplier("elerium_prospector", offset, 57e3, 1.28, "interstellar");
          }
        },
        effect() {
          let elerium = +production("elerium_prospector").toFixed(3);
          return `<div class="has-text-caution">${loc("space_used_support", [loc("interstellar_nebula_name")])}</div><div>${loc("space_belt_elerium_ship_effect2", [elerium])}</div>`;
        },
        s_type: "nebula",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("elerium_prospector", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["elerium_prospector", "interstellar"]
          };
        }
      }
    },
    int_neutron: {
      info: {
        name: loc("interstellar_neutron_name"),
        desc() {
          return global.tech["neutron"] ? loc("interstellar_neutron_desc2", [races[global.race.species].home]) : loc("interstellar_neutron_desc1");
        }
      },
      neutron_mission: {
        id: "interstellar-neutron_mission",
        title: loc("space_mission_title", [loc("interstellar_neutron_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_neutron_name")]),
        reqs: { nebula: 1, high_tech: 14 },
        grant: ["neutron", 1],
        queue_complete() {
          return global.tech.neutron >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(6e4).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(1e4).toFixed(0);
          }
        },
        effect: loc("interstellar_neutron_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(interstellarProjects.int_neutron.neutron_miner);
            messageQueue(loc("interstellar_neutron_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      neutron_miner: {
        id: "interstellar-neutron_miner",
        title: loc("interstellar_neutron_miner_title"),
        desc() {
          return `<div>${loc("interstellar_neutron_miner_desc")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { neutron: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("neutron_miner", offset, 1e6, 1.32, "interstellar");
          },
          Titanium(offset) {
            return spaceCostMultiplier("neutron_miner", offset, 45e3, 1.32, "interstellar");
          },
          Stanene(offset) {
            return spaceCostMultiplier("neutron_miner", offset, 88e3, 1.32, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("neutron_miner", offset, 20, 1.32, "interstellar");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("neutron_miner", offset, 50, 1.32, "interstellar");
          }
        },
        effect() {
          let neutronium = +production("neutron_miner").toFixed(3);
          let max_neutronium = spatialReasoning(500);
          let helium = +int_fuel_adjust(3).toFixed(2);
          return `<div>${loc("space_gas_moon_outpost_effect1", [neutronium])}</div><div>${loc("plus_max_resource", [max_neutronium, global.resource.Neutronium.name])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect2", [helium, $(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(6);
        },
        powerBalancer() {
          return [{ r: "Neutronium", k: "lpmod" }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("neutron_miner", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["neutron_miner", "interstellar"]
          };
        }
      },
      citadel: {
        id: "interstellar-citadel",
        title: loc("interstellar_citadel_title"),
        desc: `<div>${loc("interstellar_citadel_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { neutron: 1, high_tech: 15 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("citadel", offset, 5e6, 1.25, "interstellar");
          },
          Knowledge(offset) {
            return spaceCostMultiplier("citadel", offset, 15e5, 1.15, "interstellar");
          },
          Graphene(offset) {
            return spaceCostMultiplier("citadel", offset, 5e4, 1.25, "interstellar");
          },
          Stanene(offset) {
            return spaceCostMultiplier("citadel", offset, 1e5, 1.25, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("citadel", offset, 250, 1.25, "interstellar");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("citadel", offset, 1, 1.25, "interstellar");
          }
        },
        wide: true,
        effect(wiki) {
          let quantum_lv = get_qlevel(wiki);
          let desc = `<div class="has-text-warning">${loc("interstellar_citadel_stat", [+quantum_lv.toFixed(1)])}</div><div>${loc("interstellar_citadel_effect", [5])}</div>`;
          if (global.tech["ai_core"]) {
            let cement = +(quantum_lv / 1.75).toFixed(1);
            if (!global.race["flier"]) {
              desc = desc + `<div>${loc("interstellar_citadel_effect2", [cement])}</div>`;
            }
            if (global.tech["ai_core"] >= 2) {
              desc = desc + `<div>${loc("interstellar_citadel_effect3", [2])}</div>`;
            }
            if (global.tech["ai_core"] >= 3) {
              let graph = +(quantum_lv / 5).toFixed(1);
              desc = desc + `<div>${loc("interstellar_citadel_effect4", [graph])}</div>`;
            }
            if (global.tech["ai_core"] >= 4) {
              desc = desc + `<div>${loc("interstellar_citadel_effect5", [1])}</div>`;
            }
          }
          return `${desc}<div class="has-text-caution">${loc("interstellar_citadel_power", [$(this)[0].powered(wiki), powerCostMod(2.5)])}</div>`;
        },
        powered(wiki) {
          let num_powered = wiki ? 0 : p_on["citadel"];
          if (num_powered > 1) {
            return powerCostMod(30 + (num_powered - 1) * 2.5);
          }
          return powerCostMod(30);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("citadel", "interstellar");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["citadel", "interstellar"]
          };
        },
        flair() {
          return loc("interstellar_citadel_flair");
        }
      },
      stellar_forge: {
        id: "interstellar-stellar_forge",
        title: loc("interstellar_stellar_forge_title"),
        desc: `<div>${loc("interstellar_stellar_forge_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { star_forge: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("stellar_forge", offset, 12e5, 1.25, "interstellar");
          },
          Iridium(offset) {
            return spaceCostMultiplier("stellar_forge", offset, 25e4, 1.25, "interstellar");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("stellar_forge", offset, 35e3, 1.25, "interstellar");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("stellar_forge", offset, 75e3, 1.25, "interstellar");
          }
        },
        effect() {
          let desc = `<div>${loc("city_foundry_effect1", [jobScale(2)])}</div><div>${loc("interstellar_stellar_forge_effect", [10])}</div><div>${loc("interstellar_stellar_forge_effect2", [5])}</div>`;
          let num_smelters = $(this)[0].smelting();
          if (num_smelters > 0) {
            desc += `<div>${loc("interstellar_stellar_forge_effect3", [num_smelters])}</div>`;
          }
          return `${desc}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(3);
        },
        special: true,
        smelting() {
          return global.tech?.star_forge >= 2 ? 2 : 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("stellar_forge", "interstellar");
            if (powerOnNewStruct($(this)[0])) {
              global.civic.craftsman.max += jobScale(2);
              let num_smelters = $(this)[0].smelting();
              if (num_smelters > 0) {
                addSmelter(num_smelters, "Iron", "Star");
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["stellar_forge", "interstellar"]
          };
        },
        flair() {
          return loc("interstellar_stellar_forge_flair");
        }
      }
    },
    int_blackhole: {
      info: {
        name: loc("interstellar_blackhole_name"),
        desc() {
          let home = races[global.race.species].home;
          if (global.tech["blackhole"] >= 5) {
            let mass = +global.interstellar.stellar_engine.mass.toFixed(10);
            let exotic = +global.interstellar.stellar_engine.exotic.toFixed(10);
            if (global.tech["roid_eject"]) {
              mass += 0.225 * global.tech["roid_eject"] * (1 + global.tech["roid_eject"] / 12);
            }
            if (global.tech["whitehole"]) {
              let gains = calcPrestige("bigbang");
              let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
              return `<div>${loc("interstellar_blackhole_desc4", [home, mass, exotic])}</div><div class="has-text-advanced">${loc("interstellar_blackhole_desc5", [gains.plasmid, gains.phage, gains.dark, plasmidType])}</div>`;
            } else {
              return global.interstellar.stellar_engine.exotic > 0 ? loc("interstellar_blackhole_desc4", [home, mass, exotic]) : loc("interstellar_blackhole_desc3", [home, mass]);
            }
          } else {
            return global.tech["blackhole"] ? loc("interstellar_blackhole_desc2", [home]) : loc("interstellar_blackhole_desc1", [home]);
          }
        }
      },
      blackhole_mission: {
        id: "interstellar-blackhole_mission",
        title: loc("space_mission_title", [loc("interstellar_blackhole_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_blackhole_name")]),
        reqs: { nebula: 1 },
        grant: ["blackhole", 1],
        queue_complete() {
          return global.tech.blackhole >= 1 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(75e3).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(25e3).toFixed(0);
          }
        },
        effect: loc("interstellar_blackhole_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(interstellarProjects.int_blackhole.far_reach);
            messageQueue(loc("interstellar_blackhole_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      far_reach: {
        id: "interstellar-far_reach",
        title: loc("interstellar_far_reach"),
        desc: `<div>${loc("interstellar_far_reach_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { blackhole: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("far_reach", offset, 1e6, 1.32, "interstellar");
          },
          Knowledge(offset) {
            return spaceCostMultiplier("far_reach", offset, 1e5, 1.32, "interstellar");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("far_reach", offset, 2500, 1.32, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("far_reach", offset, 100, 1.32, "interstellar");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("far_reach", offset, 1e3, 1.32, "interstellar");
          }
        },
        effect() {
          return `<div>${loc("interstellar_far_reach_effect", [1])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(5);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("far_reach", "interstellar");
            powerOnNewStruct($(this)[0]);
            if (global.tech["blackhole"] === 1) {
              global.tech["blackhole"] = 2;
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["far_reach", "interstellar"]
          };
        },
        flair: loc("interstellar_far_reach_flair")
      },
      stellar_engine: {
        id: "interstellar-stellar_engine",
        title: loc("interstellar_stellar_engine"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("stellar_engine") || global.interstellar.stellar_engine.count < 100 || wiki) {
            return `<div>${loc("interstellar_stellar_engine")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_stellar_engine")}</div>`;
          }
        },
        reqs: { blackhole: 3 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.interstellar.stellar_engine.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 5e5 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 450 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 17500 : 0;
          },
          Infernite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 225 : 0;
          },
          Graphene(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 45e3 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 250 : 0;
          },
          Aerogel(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0) < 100 ? 75 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("stellar_engine") ? global.interstellar.stellar_engine.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("interstellar_stellar_engine_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            let output = -$(this)[0].powered();
            if (global.tech["blackhole"] >= 5) {
              let r_mass = global.interstellar.stellar_engine.mass;
              let exotic = global.interstellar.stellar_engine.exotic;
              if (global.tech["roid_eject"]) {
                r_mass += 0.225 * global.tech["roid_eject"] * (1 + global.tech["roid_eject"] / 12);
              }
              let blackhole = exotic > 0 ? loc("interstellar_stellar_engine_effect3", [+r_mass.toFixed(10), +exotic.toFixed(10)]) : loc("interstellar_stellar_engine_effect2", [r_mass]);
              return `<div>${loc("interstellar_stellar_engine_complete", [+output.toFixed(2)])}</div><div>${blackhole}</div>`;
            } else {
              return loc("interstellar_stellar_engine_complete", [+output.toFixed(2)]);
            }
          }
        },
        switchable() {
          return false;
        },
        powered() {
          let waves = global.tech["gravity"] && global.tech["gravity"] >= 2 ? 13.5 : 7.5;
          let r_mass = global.interstellar?.stellar_engine?.mass ?? 8;
          let exotic = global.interstellar?.stellar_engine?.exotic ?? 0;
          if (global.tech["roid_eject"]) {
            r_mass += 0.225 * global.tech["roid_eject"] * (1 + global.tech["roid_eject"] / 12);
          }
          let gWell = 1 + (global.stats.achieve["escape_velocity"] && global.stats.achieve.escape_velocity["h"] ? global.stats.achieve.escape_velocity["h"] * 0.02 : 0);
          let output = powerModifier((20 + (r_mass - 8 + exotic * 10) * waves) * gWell);
          if (output > 1e4) {
            output = 1e4 + (output - 1e4) ** 0.975;
            if (output > 2e4) {
              output = 2e4 + (output - 2e4) ** 0.95;
            }
            if (output > 3e4) {
              output = 3e4 + (output - 3e4) ** 0.925;
            }
          }
          output = +output.toFixed(2);
          return -output;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.stellar_engine.count < 100) {
              incrementStruct("stellar_engine", "interstellar");
              if (global.interstellar.stellar_engine.count >= 100 && global.tech["blackhole"] === 3) {
                global.tech["blackhole"] = 4;
                drawTech();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, mass: 8, exotic: 0 },
            p: ["stellar_engine", "interstellar"]
          };
        }
      },
      mass_ejector: {
        id: "interstellar-mass_ejector",
        title: loc("interstellar_mass_ejector"),
        desc: `<div>${loc("interstellar_mass_ejector")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { blackhole: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mass_ejector", offset, 75e4, 1.25, "interstellar");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("mass_ejector", offset, 125e3, 1.25, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("mass_ejector", offset, 275, 1.25, "interstellar");
          },
          Elerium(offset) {
            return spaceCostMultiplier("mass_ejector", offset, 100, 1.25, "interstellar");
          },
          Mythril(offset) {
            return spaceCostMultiplier("mass_ejector", offset, 1e4, 1.25, "interstellar");
          }
        },
        effect(wiki) {
          let desc = `<div>${loc("interstellar_mass_ejector_effect")}</div>`;
          if (global.race.universe !== "magic" && (wiki || global.stats.blackhole)) {
            let exoticEjectDone = global.interstellar?.stellar_engine?.exotic ?? 0;
            let exoticEjectNeeded = (0.025 - exoticEjectDone) * 1e10;
            let exoticEjectRate = (global.interstellar?.mass_ejector?.Elerium ?? 0) * atomic_mass["Elerium"];
            exoticEjectRate += (global.interstellar?.mass_ejector?.Infernite ?? 0) * atomic_mass["Infernite"];
            if (exoticEjectNeeded <= 0) {
              desc += `<div class="has-text-danger-pulse">${loc("interstellar_mass_ejector_reached")}</div>`;
            } else if (exoticEjectRate <= 0) {
              desc += `<div class="has-text-danger">${loc("interstellar_mass_ejector_timer", [loc("time_never")])}</div>`;
            } else {
              let timeReq = timeFormat(Math.round(exoticEjectNeeded / exoticEjectRate));
              desc += `<div class="has-text-caution">${loc("interstellar_mass_ejector_timer", [timeReq])}</div>`;
            }
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(3);
        },
        special: true,
        sAction() {
          global.settings.civTabs = 4;
          global.settings.marketTabs = 2;
          if (!global.settings.tabLoad) {
            loadTab("mTabResource");
            clearPopper(`interstellar-mass_ejector`);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mass_ejector", "interstellar");
            powerOnNewStruct($(this)[0]);
            if (global.interstellar.mass_ejector.count === 1) {
              messageQueue(loc("interstellar_mass_ejector_msg"), "info", false, ["progress"]);
              global.settings.showEjector = true;
              defineGovernor();
            }
            drawResourceTab("ejector");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              total: 0,
              mass: 0,
              Food: 0,
              Lumber: 0,
              Chrysotile: 0,
              Stone: 0,
              Crystal: 0,
              Furs: 0,
              Copper: 0,
              Iron: 0,
              Aluminium: 0,
              Cement: 0,
              Coal: 0,
              Oil: 0,
              Uranium: 0,
              Steel: 0,
              Titanium: 0,
              Alloy: 0,
              Polymer: 0,
              Iridium: 0,
              Helium_3: 0,
              Deuterium: 0,
              Neutronium: 0,
              Adamantite: 0,
              Infernite: 0,
              Elerium: 0,
              Nano_Tube: 0,
              Graphene: 0,
              Stanene: 0,
              Bolognium: 0,
              Vitreloy: 0,
              Orichalcum: 0,
              Plywood: 0,
              Brick: 0,
              Wrought_Iron: 0,
              Sheet_Metal: 0,
              Mythril: 0,
              Aerogel: 0,
              Nanoweave: 0,
              Scarletite: 0
            },
            p: ["mass_ejector", "interstellar"]
          };
        },
        flair() {
          return loc("interstellar_mass_ejector_flair");
        }
      },
      jump_ship: {
        id: "interstellar-jump_ship",
        title: loc("interstellar_jump_ship"),
        desc: loc("interstellar_jump_ship_desc"),
        reqs: { stargate: 1 },
        grant: ["stargate", 2],
        queue_complete() {
          return global.tech.stargate >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 2e7;
          },
          Copper() {
            return 24e5;
          },
          Aluminium() {
            return 4e6;
          },
          Titanium() {
            return 125e4;
          },
          Adamantite() {
            return 75e4;
          },
          Stanene() {
            return 9e5;
          },
          Aerogel() {
            return 1e5;
          }
        },
        effect: loc("interstellar_jump_ship_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            return true;
          }
          return false;
        }
      },
      wormhole_mission: {
        id: "interstellar-wormhole_mission",
        title: loc("space_mission_title", [loc("interstellar_wormhole_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_wormhole_name")]),
        reqs: { stargate: 2 },
        grant: ["stargate", 3],
        queue_complete() {
          return global.tech.stargate >= 3 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(15e4).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(75e3).toFixed(0);
          }
        },
        effect: loc("interstellar_wormhole_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(interstellarProjects.int_blackhole.stargate);
            initStruct(galaxyProjects.gxy_stargate.gateway_station);
            messageQueue(loc("interstellar_wormhole_mission_result"), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      stargate: {
        id: "interstellar-stargate",
        title: loc("interstellar_stargate"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("stargate") || global.interstellar.stargate.count < 200 || wiki) {
            return `<div>${loc("interstellar_stargate")}</div><div class="has-text-special">${loc("requires_segments", [200])}</div>` + (global.interstellar.hasOwnProperty("stargate") && global.interstellar.stargate.count >= 200 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          } else {
            return `<div>${loc("interstellar_stargate")}</div>`;
          }
        },
        reqs: { stargate: 3 },
        condition() {
          return global.interstellar.stargate.count >= 200 ? false : true;
        },
        queue_size: 10,
        queue_complete() {
          return 200 - global.interstellar.stargate.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 1e6 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 4800 : 0;
          },
          Infernite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 666 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 75 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 12e3 : 0;
          },
          Stanene(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 6e4 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0) < 200 ? 3200 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("stargate") ? global.interstellar.stargate.count : 0);
          if (count < 200) {
            let remain = 200 - count;
            return `<div>${loc("interstellar_stargate_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return interstellarProjects.int_blackhole.s_gate.effect();
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.stargate.count < 200) {
              incrementStruct("stargate", "interstellar");
              if (global.interstellar.stargate.count >= 200) {
                global.tech["stargate"] = 4;
                initStruct(interstellarProjects.int_blackhole.s_gate);
                incrementStruct("s_gate", "interstellar");
                if (global.settings.alwaysPower) {
                  powerOnNewStruct(interstellarProjects.int_blackhole.s_gate);
                }
                deepSpace();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["stargate", "interstellar"]
          };
        }
      },
      s_gate: {
        id: "interstellar-s_gate",
        title: loc("interstellar_stargate"),
        desc() {
          return `<div>${loc("interstellar_stargate")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { stargate: 4 },
        condition() {
          return global.interstellar.stargate.count >= 200 ? true : false;
        },
        wiki: false,
        queue_complete() {
          return 0;
        },
        cost: {},
        powered() {
          return powerCostMod(250);
        },
        effect() {
          return `<div>${loc("interstellar_s_gate_effect")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["s_gate", "interstellar"]
          };
        }
      }
    },
    int_sirius: {
      info: {
        name() {
          return global.tech.ascension >= 3 ? loc("interstellar_sirius_b_name") : loc("interstellar_sirius_name");
        },
        desc() {
          return global.tech.ascension >= 3 ? loc("interstellar_sirius_b_desc") : loc("interstellar_sirius_desc", [races[global.race.species].home]);
        }
      },
      sirius_mission: {
        id: "interstellar-sirius_mission",
        title: loc("space_mission_title", [loc("interstellar_sirius_name")]),
        desc: loc("space_mission_desc", [loc("interstellar_sirius_name")]),
        reqs: { ascension: 2 },
        grant: ["ascension", 3],
        queue_complete() {
          return global.tech.ascension >= 3 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(48e4).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(225e3).toFixed(0);
          }
        },
        effect() {
          return loc("interstellar_sirius_mission_effect", [flib("name"), races[global.race.species].home]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            return true;
          }
          return false;
        }
      },
      sirius_b: {
        id: "interstellar-sirius_b",
        title: loc("interstellar_sirius_b"),
        desc: loc("interstellar_sirius_b"),
        reqs: { ascension: 3 },
        grant: ["ascension", 4],
        queue_complete() {
          return global.tech.ascension >= 4 ? 0 : 1;
        },
        cost: {
          Knowledge() {
            return 2e7;
          }
        },
        effect() {
          return loc("interstellar_sirius_b_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(interstellarProjects.int_sirius.space_elevator);
            return true;
          }
          return false;
        }
      },
      space_elevator: {
        id: "interstellar-space_elevator",
        title: loc("interstellar_space_elevator"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("space_elevator") || global.interstellar.space_elevator.count < 100 || wiki) {
            return `<div>${loc("interstellar_space_elevator")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_space_elevator")}</div>`;
          }
        },
        reqs: { ascension: 4 },
        condition() {
          return global.interstellar.space_elevator.count >= 100 ? false : true;
        },
        queue_size: 5,
        queue_complete() {
          return 100 - global.interstellar.space_elevator.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("space_elevator") ? global.interstellar.space_elevator.count : 0) < 100 ? 2e7 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("space_elevator") ? global.interstellar.space_elevator.count : 0) < 100 ? 5e5 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("space_elevator") ? global.interstellar.space_elevator.count : 0) < 100 ? 1e5 : 0;
          },
          Mythril(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("space_elevator") ? global.interstellar.space_elevator.count : 0) < 100 ? 125e3 : 0;
          }
        },
        effect(wiki) {
          let effectText = `<div>${loc("interstellar_space_elevator_effect")}</div>`;
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("space_elevator") ? global.interstellar.space_elevator.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            effectText += `<div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
          return effectText;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.space_elevator.count < 100) {
              incrementStruct("space_elevator", "interstellar");
              if (global.interstellar.space_elevator.count >= 100) {
                global.tech["ascension"] = 5;
                initStruct(interstellarProjects.int_sirius.gravity_dome);
                deepSpace();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["space_elevator", "interstellar"]
          };
        }
      },
      gravity_dome: {
        id: "interstellar-gravity_dome",
        title: loc("interstellar_gravity_dome"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("gravity_dome") || global.interstellar.gravity_dome.count < 100 || wiki) {
            return `<div>${loc("interstellar_gravity_dome")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("interstellar_gravity_dome")}</div>`;
          }
        },
        reqs: { ascension: 5 },
        condition() {
          return global.interstellar.gravity_dome.count >= 100 ? false : true;
        },
        queue_size: 5,
        queue_complete() {
          return 100 - global.interstellar.gravity_dome.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("gravity_dome") ? global.interstellar.gravity_dome.count : 0) < 100 ? 35e6 : 0;
          },
          Cement(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("gravity_dome") ? global.interstellar.gravity_dome.count : 0) < 100 ? 125e4 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("gravity_dome") ? global.interstellar.gravity_dome.count : 0) < 100 ? 65e4 : 0;
          },
          Aerogel(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("gravity_dome") ? global.interstellar.gravity_dome.count : 0) < 100 ? 18e4 : 0;
          }
        },
        effect(wiki) {
          let effectText = `<div>${loc("interstellar_gravity_dome_effect", [races[global.race.species].home])}</div>`;
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("gravity_dome") ? global.interstellar.gravity_dome.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            effectText += `<div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
          return effectText;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.gravity_dome.count < 100) {
              incrementStruct("gravity_dome", "interstellar");
              if (global.interstellar.gravity_dome.count >= 100) {
                global.tech["ascension"] = 6;
                initStruct(interstellarProjects.int_sirius.ascension_machine);
                initStruct(interstellarProjects.int_sirius.thermal_collector);
                deepSpace();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["gravity_dome", "interstellar"]
          };
        }
      },
      ascension_machine: {
        id: "interstellar-ascension_machine",
        title: loc("interstellar_ascension_machine"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("ascension_machine") || global.interstellar.ascension_machine.count < 100 || wiki) {
            return `<div>${loc("interstellar_ascension_machine")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>` + (global.interstellar.hasOwnProperty("ascension_machine") && global.interstellar.ascension_machine.count >= 100 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          } else {
            return `<div>${loc("interstellar_ascension_machine")}</div>`;
          }
        },
        reqs: { ascension: 6 },
        condition() {
          return global.interstellar.ascension_machine.count >= 100 ? false : true;
        },
        queue_size: 5,
        queue_complete() {
          return 100 - global.interstellar.ascension_machine.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 75e6 : 0;
          },
          Alloy(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 75e4 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 125e3 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 1e3 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 25e4 : 0;
          },
          Nanoweave(offset) {
            return (offset || 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0) < 100 ? 75e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.interstellar.hasOwnProperty("ascension_machine") ? global.interstellar.ascension_machine.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("interstellar_ascension_machine_effect", [flib("name")])}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            return interstellarProjects.int_sirius.ascension_trigger.effect();
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.interstellar.ascension_machine.count < 100) {
              incrementStruct("ascension_machine", "interstellar");
              if (global.interstellar.ascension_machine.count >= 100) {
                global.tech["ascension"] = 7;
                initStruct(interstellarProjects.int_sirius.ascension_trigger);
                incrementStruct("ascension_trigger", "interstellar");
                if (global.settings.alwaysPower) {
                  powerOnNewStruct(interstellarProjects.int_sirius.ascension_trigger);
                }
                deepSpace();
                clearPopper();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["ascension_machine", "interstellar"]
          };
        }
      },
      ascension_trigger: {
        id: "interstellar-ascension_trigger",
        title: loc("interstellar_ascension_machine"),
        desc() {
          return `<div>${loc("interstellar_ascension_machine")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        wiki: false,
        reqs: { ascension: 7 },
        condition() {
          return global.interstellar.ascension_machine.count >= 100 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        powered() {
          let power = $(this)[0].heatSink();
          if (power < 0) {
            power = 0;
          }
          return power;
        },
        heatSink() {
          let heatsink = 100;
          if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 2) {
            heatsink += global.stats.achieve.technophobe.l >= 4 ? 25 : 10;
            for (let i = 1; i < universe_affixes.length; i++) {
              if (global.stats.achieve.technophobe[universe_affixes[i]] && global.stats.achieve.technophobe[universe_affixes[i]] >= 5) {
                heatsink += 5;
              }
            }
          }
          let power = Math.round(powerCostMod(1e4) - heatsink * (global.interstellar.hasOwnProperty("thermal_collector") ? global.interstellar.thermal_collector.count : 0));
          return power;
        },
        special() {
          return global.tech["science"] && global.tech.science >= 24 ? true : false;
        },
        sAction() {
          global.eden.encampment.asc = global.eden.encampment.asc ? false : true;
          deepSpace();
        },
        postPower(o) {
          if (o && p_on["ascension_trigger"]) {
            global.tech.ascension = 8;
            deepSpace();
          } else {
            if (global.tech.ascension > 7) {
              global.tech.ascension = 7;
              deepSpace();
            }
            if (o) {
              return true;
            }
          }
        },
        effect() {
          if (global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
            let heatSink = $(this)[0].heatSink();
            heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
            let omniscience = 150 + heatSink ** 0.95 / 10;
            let desc = `<div>${loc(`eden_ascension_machine_effect1`, [loc(`eden_encampment_title`), +omniscience.toFixed(0), global.resource.Omniscience.name])}</div>`;
            if (heatSink > 0) {
              let stabilizer = heatSink / 175;
              desc += `<div>${loc(`eden_ascension_machine_effect2`, [loc(`eden_stabilizer_title`), +stabilizer.toFixed(2)])}</div>`;
              let ghost = heatSink / 125;
              desc += `<div>${loc(`eden_ascension_machine_effect2`, [loc(`job_ghost_trapper`), +ghost.toFixed(2)])}</div>`;
            }
            return desc;
          } else {
            let reward = astrialProjection();
            let power = $(this)[0].powered();
            let power_label = power > 0 ? `<div class="has-text-caution">${loc("minus_power", [power])}</div>` : "";
            return `<div>${loc("interstellar_ascension_trigger_effect")}</div>${reward}${power_label}`;
          }
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ascension_trigger", "interstellar"]
          };
        }
      },
      ascend: {
        id: "interstellar-ascend",
        title: loc("interstellar_ascend"),
        desc: loc("interstellar_ascend"),
        reqs: { ascension: 8 },
        condition() {
          return !global.eden.hasOwnProperty("encampment") || !global.eden.encampment.asc;
        },
        queue_complete() {
          return 0;
        },
        no_multi: true,
        cost: {},
        effect() {
          let reward = astrialProjection();
          return `<div>${loc("interstellar_ascend_effect")}</div>${reward}`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            ascendLab(false);
            return true;
          }
          return false;
        }
      },
      thermal_collector: {
        id: "interstellar-thermal_collector",
        title: loc("interstellar_thermal_collector"),
        desc: loc("interstellar_thermal_collector"),
        reqs: { ascension: 6 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("thermal_collector", offset, 5e6, 1.08, "interstellar");
          },
          Infernite(offset) {
            return spaceCostMultiplier("thermal_collector", offset, 25e3, 1.08, "interstellar");
          },
          Stanene(offset) {
            return spaceCostMultiplier("thermal_collector", offset, 1e6, 1.08, "interstellar");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("thermal_collector", offset, 1e5, 1.08, "interstellar");
          }
        },
        effect() {
          let heatsink = 100;
          if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 2) {
            heatsink += global.stats.achieve.technophobe.l >= 4 ? 25 : 10;
            for (let i = 1; i < universe_affixes.length; i++) {
              if (global.stats.achieve.technophobe[universe_affixes[i]] && global.stats.achieve.technophobe[universe_affixes[i]] >= 5) {
                heatsink += 5;
              }
            }
          }
          return loc("interstellar_thermal_collector_effect", [heatsink]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("thermal_collector", "interstellar");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["thermal_collector", "interstellar"]
          };
        }
      }
    }
  };
  function astrialProjection() {
    let gains = calcPrestige("ascend");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
    return `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.phage, loc("resource_Phage_name")])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.harmony, loc("resource_Harmony_name")])}</div><div>${loc("interstellar_ascension_trigger_effect3")}</div>`;
  }
  function terraformProjection() {
    let gains = calcPrestige("terraform");
    let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
    return `<div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.phage, loc("resource_Phage_name")])}</div><div class="has-text-advanced">${loc("interstellar_ascension_trigger_effect2", [gains.harmony, loc("resource_Harmony_name")])}</div><div>${loc("space_terraformer_effect3")}</div>`;
  }
  var galaxyProjects = {
    gxy_gateway: {
      info: {
        name: loc("galaxy_gateway"),
        desc() {
          return loc("galaxy_gateway_desc");
        },
        control() {
          return {
            name: flib("name"),
            color: "success"
          };
        },
        support: "starbase"
      },
      gateway_mission: {
        id: "galaxy-gateway_mission",
        title: loc("galaxy_gateway_mission"),
        desc: loc("galaxy_gateway_mission"),
        reqs: { gateway: 1 },
        grant: ["gateway", 2],
        queue_complete() {
          return global.tech.gateway >= 2 ? 0 : 1;
        },
        cost: {
          Helium_3() {
            return +int_fuel_adjust(212e3).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(11e4).toFixed(0);
          }
        },
        effect: loc("galaxy_gateway_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            xeno_race();
            global.galaxy["defense"] = {
              gxy_stargate: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              },
              gxy_gateway: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              },
              gxy_gorddon: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              },
              gxy_alien1: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              },
              gxy_alien2: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              },
              gxy_chthonian: {
                scout_ship: 0,
                corvette_ship: 0,
                frigate_ship: 0,
                cruiser_ship: 0,
                dreadnought: 0
              }
            };
            return true;
          }
          return false;
        }
      },
      starbase: {
        id: "galaxy-starbase",
        title: loc("galaxy_starbase"),
        desc() {
          return `<div>${loc("galaxy_starbase")}</div><div class="has-text-special">${loc("requires_power_space", [global.resource.Food.name])}</div>`;
        },
        reqs: { gateway: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("starbase", offset, 42e5, 1.25, "galaxy");
          },
          Elerium(offset) {
            return spaceCostMultiplier("starbase", offset, 1e3, 1.25, "galaxy");
          },
          Mythril(offset) {
            return spaceCostMultiplier("starbase", offset, 9e4, 1.25, "galaxy");
          },
          Graphene(offset) {
            return spaceCostMultiplier("starbase", offset, 32e4, 1.25, "galaxy");
          },
          Horseshoe() {
            return global.race["hooved"] ? 5 : 0;
          }
        },
        effect(wiki) {
          let helium = +int_fuel_adjust(25).toFixed(2);
          let food = 250;
          let soldiers = $(this)[0].soldiers();
          return `<div class="has-text-advanced">${loc("galaxy_defense_platform_effect", [25])}</div><div>${loc("galaxy_gateway_support", [$(this)[0].support()])}</div><div>${loc("plus_max_soldiers", [soldiers])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect2", [helium, $(this)[0].powered(wiki)])}</div><div class="has-text-caution">${loc("interstellar_alpha_starport_effect3", [food, global.resource.Food.name])}</div>`;
        },
        support() {
          return 2;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 12 : 0);
        },
        powerBalancer() {
          return [{ s: global.galaxy.starbase.s_max - global.galaxy.starbase.support }];
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("starbase", "galaxy");
            powerOnNewStruct($(this)[0]);
            if (global.tech["gateway"] === 2) {
              initStruct(galaxyProjects.gxy_gateway.bolognium_ship);
              global.tech["gateway"] = 3;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["starbase", "galaxy"]
          };
        },
        soldiers() {
          let soldiers = global.tech.marines >= 2 ? global.race["grenadier"] ? 5 : 8 : global.race["grenadier"] ? 3 : 5;
          return jobScale(soldiers);
        }
      },
      ship_dock: {
        id: "galaxy-ship_dock",
        title: loc("galaxy_ship_dock"),
        desc: `<div>${loc("galaxy_ship_dock")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        reqs: { gateway: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ship_dock", offset, 36e5, 1.25, "galaxy");
          },
          Steel(offset) {
            return spaceCostMultiplier("ship_dock", offset, 88e4, 1.25, "galaxy");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("ship_dock", offset, 12e5, 1.25, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("ship_dock", offset, 75e3, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          if (global.race["fasting"]) {
            return `<div>${loc("galaxy_ship_dock_effect_fasting", [0.1])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
          }
          return `<div>${loc("galaxy_ship_dock_effect", [0.25])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        support(wiki) {
          if (global.race["fasting"]) {
            let num_gateways_on = wiki ? global.galaxy.gateway_station.on : p_on["gateway_station"];
            return num_gateways_on ? 0.1 * num_gateways_on : 0;
          } else {
            let num_starbases_on = wiki ? global.galaxy.starbase.on : p_on["starbase"];
            return num_starbases_on ? 0.25 * num_starbases_on : 0;
          }
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 4 : 0);
        },
        powerBalancer() {
          if (global.race["fasting"]) {
            return [{ s: global.galaxy.gateway_station.s_max - global.galaxy.gateway_station.support }];
          }
          return [{ s: global.galaxy.starbase.s_max - global.galaxy.starbase.support }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("ship_dock", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ship_dock", "galaxy"]
          };
        }
      },
      bolognium_ship: {
        id: "galaxy-bolognium_ship",
        title: loc("galaxy_bolognium_ship"),
        desc() {
          return `<div>${loc("galaxy_bolognium_ship_desc")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { gateway: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("bolognium_ship", offset, 14e5, 1.22, "galaxy");
          },
          Iron(offset) {
            return spaceCostMultiplier("bolognium_ship", offset, 56e4, 1.22, "galaxy");
          },
          Infernite(offset) {
            return spaceCostMultiplier("bolognium_ship", offset, 1800, 1.22, "galaxy");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("bolognium_ship", offset, 475e3, 1.22, "galaxy");
          }
        },
        effect() {
          let bolognium = +production("bolognium_ship").toFixed(3);
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          return `<div>${loc("gain", [bolognium, global.resource.Bolognium.name])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -1;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 2 : 2;
          },
          mil() {
            return 0;
          },
          helium: 5
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("bolognium_ship", "galaxy");
            global.resource.Bolognium.display = true;
            global.civic.crew.display = true;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0 },
            p: ["bolognium_ship", "galaxy"]
          };
        }
      },
      scout_ship: {
        id: "galaxy-scout_ship",
        title: loc("galaxy_scout_ship"),
        desc() {
          return `<div>${loc("galaxy_scout_ship")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { andromeda: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("scout_ship", offset, 16e5, 1.25, "galaxy");
          },
          Titanium(offset) {
            return spaceCostMultiplier("scout_ship", offset, 325e3, 1.25, "galaxy");
          },
          Graphene(offset) {
            return spaceCostMultiplier("scout_ship", offset, 118e3, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("scout_ship", offset, 1, 1.02, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          let sensors = global.tech.science >= 17 ? `<div>${loc("galaxy_scout_ship_effect2", [25])}</div>` : "";
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div>${loc("galaxy_scout_ship_effect")}</div>${sensors}<div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -1;
        },
        ship: {
          civ() {
            return global.race["grenadier"] ? 0 : global.race["high_pop"] ? traits.high_pop.vars()[0] * 1 : 1;
          },
          mil() {
            let base = global.race["high_pop"] ? traits.high_pop.vars()[0] * 1 : 1;
            return global.race["grenadier"] ? Math.ceil(base / 2) : base;
          },
          helium: 6,
          rating() {
            let rating = global.race["banana"] ? 7 : 10;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 1 : 5;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("scout_ship", "galaxy");
            global.galaxy.defense.gxy_gateway.scout_ship++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["scout_ship", "galaxy"]
          };
        }
      },
      corvette_ship: {
        id: "galaxy-corvette_ship",
        title: loc("galaxy_corvette_ship"),
        desc() {
          return `<div>${loc("galaxy_corvette_ship")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { andromeda: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("corvette_ship", offset, 45e5, 1.25, "galaxy");
          },
          Steel(offset) {
            return spaceCostMultiplier("corvette_ship", offset, 175e4, 1.25, "galaxy");
          },
          Infernite(offset) {
            return spaceCostMultiplier("corvette_ship", offset, 16e3, 1.25, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("corvette_ship", offset, 35e3, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("corvette_ship", offset, 1, 1.25, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -1;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 2 : 2;
          },
          mil() {
            let base = global.race["grenadier"] ? 2 : 3;
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * base : base;
          },
          helium: 10,
          rating() {
            let rating = global.race["banana"] ? 21 : 30;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 4 : 10;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("corvette_ship", "galaxy");
            global.galaxy.defense.gxy_gateway.corvette_ship++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["corvette_ship", "galaxy"]
          };
        }
      },
      frigate_ship: {
        id: "galaxy-frigate_ship",
        title: loc("galaxy_frigate_ship"),
        desc() {
          return `<div>${loc("galaxy_frigate_ship")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { andromeda: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("frigate_ship", offset, 18e6, 1.25, "galaxy");
          },
          Elerium(offset) {
            return spaceCostMultiplier("frigate_ship", offset, 1250, 1.25, "galaxy");
          },
          Mythril(offset) {
            return spaceCostMultiplier("frigate_ship", offset, 35e4, 1.25, "galaxy");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("frigate_ship", offset, 8e5, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("frigate_ship", offset, 2, 1.25, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -2;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 3 : 3;
          },
          mil() {
            let base = global.race["grenadier"] ? 3 : 5;
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * base : base;
          },
          helium: 25,
          rating() {
            let rating = global.race["banana"] ? 56 : 80;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 14 : 20;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("frigate_ship", "galaxy");
            global.galaxy.defense.gxy_gateway.frigate_ship++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["frigate_ship", "galaxy"]
          };
        },
        flair: loc("tech_frigate_ship_flair")
      },
      cruiser_ship: {
        id: "galaxy-cruiser_ship",
        title: loc("galaxy_cruiser_ship"),
        desc() {
          return `<div>${loc("galaxy_cruiser_ship")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Deuterium.name])}</div>`;
        },
        reqs: { andromeda: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 75e6, 1.25, "galaxy");
          },
          Copper(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 6e6, 1.25, "galaxy");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 1e6, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 75e4, 1.25, "galaxy");
          },
          Elerium(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 1800, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("cruiser_ship", offset, 5, 1.25, "galaxy");
          }
        },
        effect() {
          let deuterium = +int_fuel_adjust($(this)[0].ship.deuterium).toFixed(2);
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [deuterium, global.resource.Deuterium.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -3;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 6 : 6;
          },
          mil() {
            let base = global.race["grenadier"] ? 6 : 10;
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * base : base;
          },
          deuterium: 25,
          rating() {
            let rating = global.race["banana"] ? 175 : 250;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 25 : 50;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("cruiser_ship", "galaxy");
            global.galaxy.defense.gxy_gateway.cruiser_ship++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["cruiser_ship", "galaxy"]
          };
        }
      },
      dreadnought: {
        id: "galaxy-dreadnought",
        title: loc("galaxy_dreadnought"),
        desc() {
          return `<div>${loc("galaxy_dreadnought")}</div><div class="has-text-special">${loc("galaxy_starbase_support", [global.resource.Deuterium.name])}</div>`;
        },
        reqs: { andromeda: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("dreadnought", offset, 225e6, 1.25, "galaxy");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("dreadnought", offset, 25e4, 1.25, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("dreadnought", offset, 15e5, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("dreadnought", offset, 1e6, 1.25, "galaxy");
          },
          Infernite(offset) {
            return spaceCostMultiplier("dreadnought", offset, 4e5, 1.25, "galaxy");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("dreadnought", offset, 8e5, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("dreadnought", offset, 25, 1.25, "galaxy");
          }
        },
        effect() {
          let deuterium = +int_fuel_adjust($(this)[0].ship.deuterium).toFixed(2);
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("galaxy_gateway_used_support", [-$(this)[0].support()])}</div><div class="has-text-caution">${loc("spend", [deuterium, global.resource.Deuterium.name])}</div>`;
        },
        s_type: "gateway",
        support() {
          return -5;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 10 : 10;
          },
          mil() {
            let base = global.race["grenadier"] ? 12 : 20;
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * base : base;
          },
          deuterium: 80,
          rating() {
            let rating = global.race["banana"] ? 1260 : 1800;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 140 : 200;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("dreadnought", "galaxy");
            global.galaxy.defense.gxy_gateway.dreadnought++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["dreadnought", "galaxy"]
          };
        }
      }
    },
    gxy_stargate: {
      info: {
        name: loc("galaxy_stargate"),
        desc() {
          return global.tech["piracy"] ? loc("galaxy_stargate_desc_alt") : loc("galaxy_stargate_desc");
        },
        control() {
          return {
            name: flib("name"),
            color: "success"
          };
        }
      },
      gateway_station: {
        id: "galaxy-gateway_station",
        title: loc("galaxy_gateway_station"),
        desc() {
          return `<div>${loc("galaxy_gateway_station_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { stargate: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gateway_station", offset, 5e6, 1.25, "galaxy");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("gateway_station", offset, 52e4, 1.25, "galaxy");
          },
          Polymer(offset) {
            return spaceCostMultiplier("gateway_station", offset, 35e4, 1.25, "galaxy");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("gateway_station", offset, 17500, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          let helium = spatialReasoning(2e3);
          let deuterium = spatialReasoning(4500);
          let elerium = spatialReasoning(50);
          let gateway = "";
          if (global.tech["gateway"] && global.tech["gateway"] >= 2) {
            gateway = `<div>${loc("galaxy_gateway_support", [$(this)[0].support()])}</div>`;
          }
          return `${gateway}<div>${loc("plus_max_resource", [helium, global.resource.Helium_3.name])}</div><div>${loc("plus_max_resource", [deuterium, global.resource.Deuterium.name])}</div><div>${loc("plus_max_resource", [elerium, global.resource.Elerium.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        support() {
          return 0.5;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 4 : 0);
        },
        powerBalancer() {
          return global.galaxy.hasOwnProperty("starbase") ? [{ s: global.galaxy.starbase.s_max - global.galaxy.starbase.support }] : false;
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gateway_station", "galaxy");
            global["resource"]["Helium_3"].max += spatialReasoning(2e3);
            global["resource"]["Deuterium"].max += spatialReasoning(4500);
            if (global.tech["stargate"] === 4) {
              initStruct(galaxyProjects.gxy_stargate.telemetry_beacon);
              global.tech["stargate"] = 5;
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["gateway_station", "galaxy"]
          };
        }
      },
      telemetry_beacon: {
        id: "galaxy-telemetry_beacon",
        title: loc("galaxy_telemetry_beacon"),
        desc() {
          return `<div>${loc("galaxy_telemetry_beacon")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { stargate: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("telemetry_beacon", offset, 225e4, 1.25, "galaxy");
          },
          Copper(offset) {
            return spaceCostMultiplier("telemetry_beacon", offset, 685e3, 1.25, "galaxy");
          },
          Alloy(offset) {
            return spaceCostMultiplier("telemetry_beacon", offset, 425e3, 1.25, "galaxy");
          },
          Iridium(offset) {
            return spaceCostMultiplier("telemetry_beacon", offset, 177e3, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          let base = global.tech["telemetry"] ? 1200 : 800;
          if (global.tech.science >= 17) {
            let num_scout_ship_on = wiki ? global.galaxy?.scout_ship?.on ?? 0 : gal_on["scout_ship"];
            base += num_scout_ship_on * 25;
          }
          let num_telemetry_on = wiki ? global.galaxy?.telemetry_beacon?.on ?? 0 : p_on["telemetry_beacon"];
          let know = num_telemetry_on ? base * num_telemetry_on : 0;
          let gateway = "";
          if (global.tech["gateway"] && global.tech["gateway"] >= 2) {
            gateway = `<div>${loc("galaxy_gateway_support", [$(this)[0].support()])}</div>`;
          }
          return `${gateway}<div>${loc("galaxy_telemetry_beacon_effect1", [base])}</div><div>${loc("galaxy_telemetry_beacon_effect2", [know])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        support() {
          return global.tech["telemetry"] ? 0.75 : 0.5;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 4 : 0);
        },
        powerBalancer() {
          return global.galaxy.hasOwnProperty("starbase") ? [{ s: global.galaxy.starbase.s_max - global.galaxy.starbase.support }] : false;
        },
        postPower(o) {
          updateDesc($(this)[0], "galaxy", "telemetry_beacon");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("telemetry_beacon", "galaxy");
            if (powerOnNewStruct($(this)[0])) {
              global["resource"]["Knowledge"].max += 1750;
            }
            if (!global.tech["gateway"]) {
              initStruct(galaxyProjects.gxy_gateway.starbase);
              global.settings.space.gateway = true;
              global.tech["gateway"] = 1;
              galaxySpace();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["telemetry_beacon", "galaxy"]
          };
        }
      },
      gateway_depot: {
        id: "galaxy-gateway_depot",
        title: loc("galaxy_gateway_depot"),
        desc: `<div>${loc("galaxy_gateway_depot")}</div>`,
        reqs: { gateway: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gateway_depot", offset, 4e6, 1.25, "galaxy");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("gateway_depot", offset, 8e4, 1.25, "galaxy");
          },
          Stanene(offset) {
            return spaceCostMultiplier("gateway_depot", offset, 5e5, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("gateway_depot", offset, 2500, 1.25, "galaxy");
          }
        },
        wide: true,
        effect(wiki) {
          let containers = global.tech["world_control"] ? 150 : 100;
          let elerium = spatialReasoning(200);
          let multiplier = gatewayStorage();
          let uranium = sizeApproximation(+spatialReasoning(3e3 * multiplier).toFixed(0), 1);
          let nano = sizeApproximation(+spatialReasoning(25e4 * multiplier).toFixed(0), 1);
          let neutronium = sizeApproximation(+spatialReasoning(9001 * multiplier).toFixed(0), 1);
          let infernite = sizeApproximation(+spatialReasoning(6660 * multiplier).toFixed(0), 1);
          let desc = '<div class="aTable">';
          desc = desc + `<span>${loc("plus_max_crates", [containers])}</span><span>${loc("plus_max_containers", [containers])}</span>`;
          desc = desc + `<span>${loc("plus_max_resource", [uranium, global.resource.Uranium.name])}</span>`;
          desc = desc + `<span>${loc("plus_max_resource", [nano, global.resource.Nano_Tube.name])}</span>`;
          desc = desc + `<span>${loc("plus_max_resource", [neutronium, global.resource.Neutronium.name])}</span>`;
          desc = desc + `<span>${loc("plus_max_resource", [infernite, global.resource.Infernite.name])}</span>`;
          desc = desc + "</div>";
          return `${desc}<div>${loc("galaxy_gateway_depot_effect", [elerium, global.resource.Elerium.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 10 : 0);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gateway_depot", "galaxy");
            let containers = global.tech["world_control"] ? 150 : 100;
            global.resource.Crates.max += containers;
            global.resource.Containers.max += containers;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            let multiplier = gatewayStorage();
            global["resource"]["Uranium"].max += spatialReasoning(3e3 * multiplier);
            global["resource"]["Nano_Tube"].max += spatialReasoning(25e4 * multiplier);
            global["resource"]["Neutronium"].max += spatialReasoning(9001 * multiplier);
            global["resource"]["Infernite"].max += spatialReasoning(6660 * multiplier);
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["gateway_depot", "galaxy"]
          };
        }
      },
      defense_platform: {
        id: "galaxy-defense_platform",
        title: loc("galaxy_defense_platform"),
        desc() {
          return `<div>${loc("galaxy_defense_platform")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { stargate: 6 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("defense_platform", offset, 75e4, 1.25, "galaxy");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("defense_platform", offset, 425e3, 1.25, "galaxy");
          },
          Elerium(offset) {
            return spaceCostMultiplier("defense_platform", offset, 800, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("defense_platform", offset, 1250, 1.25, "galaxy");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("defense_platform", offset, 75e3, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          return `<div class="has-text-advanced">${loc("galaxy_defense_platform_effect", [20])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 5 : 0);
        },
        postPower(o) {
          vBind({ el: `#gxy_stargate` }, "update");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("defense_platform", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["defense_platform", "galaxy"]
          };
        }
      }
    },
    gxy_gorddon: {
      info: {
        name: loc("galaxy_gorddon"),
        desc() {
          return loc("galaxy_gorddon_desc");
        },
        control() {
          return {
            name: races[global.galaxy.alien1.id].name,
            color: "advanced"
          };
        }
      },
      gorddon_mission: {
        id: "galaxy-gorddon_mission",
        title: loc("galaxy_gorddon_mission"),
        desc: loc("galaxy_gorddon_mission_desc"),
        reqs: { xeno: 2 },
        grant: ["xeno", 3],
        queue_complete() {
          return global.tech.xeno >= 3 ? 0 : 1;
        },
        cost: {
          Structs() {
            return {
              galaxy: {
                scout_ship: { s: "gxy_gateway", count: 2, on: 2 },
                corvette_ship: { s: "gxy_gateway", count: 1, on: 1 }
              }
            };
          },
          Helium_3() {
            return +int_fuel_adjust(23e4).toFixed(0);
          },
          Deuterium() {
            return +int_fuel_adjust(125e3).toFixed(0);
          }
        },
        effect: loc("galaxy_gorddon_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            xeno_race();
            global.galaxy.defense.gxy_gateway.scout_ship -= 2;
            global.galaxy.defense.gxy_gorddon.scout_ship += 2;
            global.galaxy.defense.gxy_gateway.corvette_ship--;
            global.galaxy.defense.gxy_gorddon.corvette_ship++;
            let s1name = races[global.galaxy.alien1.id].name;
            let s1desc = races[global.galaxy.alien1.id].entity;
            let s2name = races[global.galaxy.alien2.id].name;
            let s2desc = races[global.galaxy.alien2.id].entity;
            messageQueue(loc("galaxy_gorddon_mission_result", [s1desc, s1name, s2desc, s2name]), "info", false, ["progress"]);
            return true;
          }
          return false;
        }
      },
      embassy: {
        id: "galaxy-embassy",
        title: loc("galaxy_embassy"),
        desc() {
          return `<div>${loc("galaxy_embassy")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Food.name])}</div>`;
        },
        reqs: { xeno: 4 },
        queue_complete() {
          return 1 - global.galaxy.embassy.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("embassy") ? global.galaxy.embassy.count : 0) < 1 ? 3e7 : 0;
          },
          Lumber(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("embassy") ? global.galaxy.embassy.count : 0) < 1 ? 38e6 : 0;
          },
          Stone(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("embassy") ? global.galaxy.embassy.count : 0) < 1 ? 32e6 : 0;
          },
          Furs(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("embassy") ? global.galaxy.embassy.count : 0) < 1 ? 18e6 : 0;
          },
          Wrought_Iron(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("embassy") ? global.galaxy.embassy.count : 0) < 1 ? 6e6 : 0;
          }
        },
        effect(wiki) {
          let food = 7500;
          let housing = "";
          if (global.tech.xeno >= 11) {
            housing = `<div>${loc("plus_max_citizens", [$(this)[0].citizens()])}</div>`;
          }
          let foodDesc = "";
          if (!global.race["fasting"]) {
            foodDesc = `<div class="has-text-caution">${loc("interstellar_alpha_starport_effect3", [food, global.resource.Food.name])}</div>`;
          }
          return `<div>${loc("galaxy_embassy_effect", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name])}</div>${housing}${foodDesc}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 25 : 0);
        },
        refresh: true,
        action(args) {
          if (global.galaxy.embassy.count < 1 && payCosts($(this)[0])) {
            incrementStruct("embassy", "galaxy");
            powerOnNewStruct($(this)[0]);
            if (global.tech["xeno"] === 4) {
              global.tech["xeno"] = 5;
              initStruct(galaxyProjects.gxy_gorddon.freighter);
              global.galaxy["trade"] = { max: 0, cur: 0, f0: 0, f1: 0, f2: 0, f3: 0, f4: 0, f5: 0, f6: 0, f7: 0, f8: 0 };
              drawResourceTab("market");
              messageQueue(loc("galaxy_embassy_complete", [races[global.galaxy.alien1.id].name, races[global.galaxy.alien2.id].name]), "info", false, ["progress"]);
            }
            if (global.race["fasting"]) {
              let affix = universeAffix();
              global.stats["endless_hunger"].b1[affix] = true;
              if (affix !== "m" && affix !== "l") {
                global.stats["endless_hunger"].b1.l = true;
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["embassy", "galaxy"]
          };
        },
        citizens() {
          let pop = 20;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      dormitory: {
        id: "galaxy-dormitory",
        title() {
          return structName("dormitory");
        },
        desc() {
          return `<div>${structName("dormitory")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { xeno: 6 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("dormitory", offset, 1e7, 1.25, "galaxy");
          },
          Furs(offset) {
            return spaceCostMultiplier("dormitory", offset, 7e5, 1.25, "galaxy");
          },
          Cement(offset) {
            return spaceCostMultiplier("dormitory", offset, 12e5, 1.25, "galaxy");
          },
          Plywood(offset) {
            return spaceCostMultiplier("dormitory", offset, 85e3, 1.25, "galaxy");
          },
          Horseshoe() {
            return global.race["hooved"] ? 3 : 0;
          }
        },
        effect() {
          return `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_embassy")])}</div><div>${loc("plus_max_citizens", [$(this)[0].citizens()])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(3);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("dormitory", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["dormitory", "galaxy"]
          };
        },
        citizens() {
          let pop = 3;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      symposium: {
        id: "galaxy-symposium",
        title: loc("galaxy_symposium"),
        desc() {
          return `<div>${loc("galaxy_symposium")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { xeno: 6 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("symposium", offset, 8e6, 1.25, "galaxy");
          },
          Food(offset) {
            return global.race["ravenous"] ? 0 : spaceCostMultiplier("symposium", offset, global.race["artifical"] ? 45e3 : 125e3, 1.25, "galaxy");
          },
          Lumber(offset) {
            return spaceCostMultiplier("symposium", offset, 46e4, 1.25, "galaxy");
          },
          Brick(offset) {
            return spaceCostMultiplier("symposium", offset, 261600, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          let pirate = piracy("gxy_gorddon", false, false, wiki);
          let desc = `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_embassy")])}</div>`;
          desc += `<div>${loc("galaxy_symposium_effect", [(1750 * pirate).toFixed(0)])}</div>`;
          desc += `<div>${loc("galaxy_symposium_effect2", [(650 * pirate).toFixed(0)])}</div>`;
          if (global.tech.xeno >= 7) {
            desc += `<div>${loc("galaxy_symposium_effect3", [+highPopAdjust(300 * pirate).toFixed(2)])}</div>`;
            desc += `<div>${loc("galaxy_symposium_effect3b", [+highPopAdjust(100 * pirate).toFixed(2)])}</div>`;
          }
          if (global.tech.science >= 22) {
            desc += `<div>${loc("galaxy_symposium_effect4", [+(100 * pirate).toFixed(2), loc("eden_research_station_title")])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(4);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("symposium", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["symposium", "galaxy"]
          };
        }
      },
      freighter: {
        id: "galaxy-freighter",
        title: loc("galaxy_freighter"),
        desc() {
          return `<div>${loc("galaxy_freighter")}</div><div class="has-text-special">${loc("galaxy_crew_fuel", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { xeno: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("freighter", offset, 6e6, 1.2, "galaxy");
          },
          Uranium(offset) {
            return spaceCostMultiplier("freighter", offset, 1e4, 1.2, "galaxy");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("freighter", offset, 46e4, 1.2, "galaxy");
          },
          Stanene(offset) {
            return spaceCostMultiplier("freighter", offset, 261600, 1.2, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("freighter", offset, 66e3, 1.2, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          let bank = "";
          if (global.tech.banking >= 13) {
            bank = `<div>${loc("interstellar_exchange_boost", [3])}</div>`;
          }
          return `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_embassy")])}</div><div>${loc("galaxy_freighter_effect", [2, races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name])}</div>${bank}<div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 3 : 3;
          },
          mil() {
            return 0;
          },
          helium: 12
        },
        special: true,
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("freighter", "galaxy");
            global.galaxy["freighter"].on++;
            global.resource.Vitreloy.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0 },
            p: ["freighter", "galaxy"]
          };
        }
      }
    },
    gxy_alien1: {
      info: {
        name() {
          return loc("galaxy_alien", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].home]);
        },
        desc() {
          return loc("galaxy_alien1_desc", [
            races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].home,
            races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name
          ]);
        },
        control() {
          return {
            name: races[global.galaxy.alien1.id].name,
            color: "advanced"
          };
        }
      },
      consulate: {
        id: "galaxy-consulate",
        title: loc("galaxy_consulate"),
        desc() {
          return loc("galaxy_consulate_desc", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].home]);
        },
        reqs: { xeno: 8 },
        queue_complete() {
          return 1 - global.galaxy.consulate.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("consulate") ? global.galaxy.consulate.count : 0) < 1 ? 9e7 : 0;
          },
          Stone(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("consulate") ? global.galaxy.consulate.count : 0) < 1 ? 75e6 : 0;
          },
          Furs(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("consulate") ? global.galaxy.consulate.count : 0) < 1 ? 3e7 : 0;
          },
          Iron(offset) {
            return (offset || 0) + (global.galaxy.hasOwnProperty("consulate") ? global.galaxy.consulate.count : 0) < 1 ? 45e6 : 0;
          },
          Horseshoe(offset) {
            return global.race["hooved"] && (offset || 0) + (global.galaxy.hasOwnProperty("consulate") ? global.galaxy.consulate.count : 0) < 1 ? 10 : 0;
          }
        },
        effect() {
          return loc("plus_max_citizens", [$(this)[0].citizens()]);
        },
        refresh: true,
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.galaxy.consulate.count < 1) {
              incrementStruct("consulate", "galaxy");
              initStruct(galaxyProjects.gxy_alien1.resort);
              initStruct(galaxyProjects.gxy_alien1.super_freighter);
              global.tech.xeno = 9;
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["consulate", "galaxy"]
          };
        },
        citizens() {
          let pop = 10;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      resort: {
        id: "galaxy-resort",
        title: loc("galaxy_resort"),
        desc() {
          return `<div>${loc("galaxy_resort")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { xeno: 9 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("resort", offset, traitCostMod("untrustworthy", 33e6), 1.25, "galaxy");
          },
          Stone(offset) {
            return spaceCostMultiplier("resort", offset, traitCostMod("untrustworthy", 25e6), 1.25, "galaxy");
          },
          Furs(offset) {
            return spaceCostMultiplier("resort", offset, traitCostMod("untrustworthy", 1e7), 1.25, "galaxy");
          },
          Oil(offset) {
            return spaceCostMultiplier("resort", offset, traitCostMod("untrustworthy", int_fuel_adjust(125e3)), 1.25, "galaxy");
          }
        },
        effect() {
          let money = spatialReasoning(global.tech["world_control"] ? 1875e3 : 15e5);
          let joy = global.tech["theatre"] && !global.race["joyless"] ? `<div>${loc("plus_max_resource", [jobScale(2), loc(`job_entertainer`)])}</div>` : "";
          let desc = `<div>${loc("plus_max_resource", [`$${money.toLocaleString()}`, loc("resource_Money_name")])}</div>${joy}<div>${loc("space_red_vr_center_effect2", [2])}</div>`;
          return desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(5);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("resort", "galaxy");
            if (powerOnNewStruct($(this)[0])) {
              if (global.tech["theatre"] && !global.race["joyless"]) {
                global.civic.entertainer.max += jobScale(2);
                global.civic.entertainer.display = true;
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["resort", "galaxy"]
          };
        }
      },
      vitreloy_plant: {
        id: "galaxy-vitreloy_plant",
        title: loc("galaxy_vitreloy_plant"),
        desc() {
          return `<div>${loc("galaxy_vitreloy_plant")}</div><div class="has-text-special">${loc("galaxy_vitreloy_plant_desc")}</div>`;
        },
        reqs: { xeno: 10 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("vitreloy_plant", offset, 35e6, 1.25, "galaxy");
          },
          Cement(offset) {
            return spaceCostMultiplier("vitreloy_plant", offset, 18e5, 1.25, "galaxy");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("vitreloy_plant", offset, 25e4, 1.25, "galaxy");
          },
          Iridium(offset) {
            return spaceCostMultiplier("vitreloy_plant", offset, 85e4, 1.25, "galaxy");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("vitreloy_plant", offset, 4e5, 1.25, "galaxy");
          }
        },
        effect() {
          let vitreloy = +production("vitreloy_plant").toFixed(2);
          let bolognium = 2.5;
          let stanene = 100;
          let cash = 5e4;
          return `<div>${loc("galaxy_vitreloy_plant_effect", [vitreloy])}</div><div class="has-text-caution">${loc("galaxy_vitreloy_plant_effect2", [bolognium, stanene])}</div><div class="has-text-caution">${loc("galaxy_vitreloy_plant_effect3", [cash, $(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(10);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("vitreloy_plant", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["vitreloy_plant", "galaxy"]
          };
        }
      },
      super_freighter: {
        id: "galaxy-super_freighter",
        title: loc("galaxy_super_freighter"),
        desc() {
          return `<div>${loc("galaxy_super_freighter")}</div><div class="has-text-special">${loc("galaxy_crew_fuel", [global.resource.Helium_3.name])}</div>`;
        },
        reqs: { xeno: 9 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("super_freighter", offset, 28e6, 1.2, "galaxy");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("super_freighter", offset, 35e5, 1.2, "galaxy");
          },
          Alloy(offset) {
            return spaceCostMultiplier("super_freighter", offset, 1e6, 1.2, "galaxy");
          },
          Graphene(offset) {
            return spaceCostMultiplier("super_freighter", offset, 75e4, 1.2, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          let bank = "";
          if (global.tech.banking >= 13) {
            bank = `<div>${loc("interstellar_exchange_boost", [8])}</div>`;
          }
          return `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_embassy")])}</div><div>${loc("galaxy_freighter_effect", [5, races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name])}</div>${bank}<div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 5 : 5;
          },
          mil() {
            return 0;
          },
          helium: 25
        },
        special: true,
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("super_freighter", "galaxy");
            global.galaxy["super_freighter"].on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0 },
            p: ["super_freighter", "galaxy"]
          };
        }
      }
    },
    gxy_alien2: {
      info: {
        name() {
          return loc("galaxy_alien", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red]);
        },
        desc() {
          return loc("galaxy_alien2_desc", [
            races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red,
            races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name
          ]);
        },
        control() {
          return {
            name: races[global.galaxy.alien2.id].name,
            color: "danger"
          };
        },
        support: "foothold"
      },
      alien2_mission: {
        id: "galaxy-alien2_mission",
        title() {
          return loc("galaxy_alien2_mission", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red]);
        },
        desc() {
          return loc("galaxy_alien2_mission_desc", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red]);
        },
        reqs: { andromeda: 4 },
        grant: ["conflict", 1],
        queue_complete() {
          return global.tech.conflict >= 1 ? 0 : 1;
        },
        cost: {
          Custom() {
            if (global.galaxy.hasOwnProperty("defense") && global.galaxy.defense.hasOwnProperty("gxy_alien2")) {
              let total = 0;
              Object.keys(global.galaxy.defense.gxy_alien2).forEach(function(ship) {
                total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_alien2[ship];
              });
              return {
                label: loc(`galaxy_fleet_rating`, [`<span${total < 400 ? ` class="has-text-danger"` : ""}>400</span>`]),
                met: total < 400 ? false : true
              };
            }
            return {
              label: loc(`galaxy_fleet_rating`, [`<span class="has-text-danger">400</span>`]),
              met: false
            };
          }
        },
        effect() {
          let total = 0;
          if (global.galaxy.hasOwnProperty("defense") && global.galaxy.defense.hasOwnProperty("gxy_alien2")) {
            Object.keys(global.galaxy.defense.gxy_alien2).forEach(function(ship) {
              total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_alien2[ship];
            });
          }
          let odds = total >= 650 ? `<span class="has-text-success">${loc(`galaxy_piracy_low`)}</span>` : `<span class="has-text-warning">${loc(`galaxy_piracy_avg`)}</span>`;
          return `<div>${loc("galaxy_alien2_mission_effect2", [total])}</div><div>${loc("galaxy_alien2_mission_effect3", [odds])}</div><div class="has-text-caution">${loc("galaxy_alien2_mission_effect", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let total = 0;
            Object.keys(global.galaxy.defense.gxy_alien2).forEach(function(ship) {
              total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_alien2[ship];
            });
            if (total >= 400) {
              messageQueue(loc("galaxy_alien2_mission_result2", [races[global.galaxy.alien2.id].solar.red]), "info", false, ["progress"]);
              if (total < 650) {
                let wreck = 80;
                if (global.race["instinct"]) {
                  wreck /= 2;
                }
                let loss = [];
                Object.keys(global.galaxy.defense.gxy_alien2).forEach(function(ship) {
                  for (let i = 0; i < global.galaxy.defense.gxy_alien2[ship]; i++) {
                    if (wreck > 0) {
                      wreck -= galaxyProjects.gxy_gateway[ship].ship.rating();
                      loss.push(ship);
                    }
                  }
                });
                messageQueue(loc("galaxy_chthonian_mission_result_losses", [loss.map((v) => loc(`galaxy_${v}`)).join(", ")]), "danger", false, ["progress"]);
                for (let i = 0; i < loss.length; i++) {
                  let ship = loss[i];
                  global.galaxy.defense.gxy_alien2[ship]--;
                  global.galaxy[ship].on--;
                  global.galaxy[ship].count--;
                  global.galaxy[ship].crew -= galaxyProjects.gxy_gateway[ship].ship.civ();
                  global.galaxy[ship].mil -= galaxyProjects.gxy_gateway[ship].ship.mil();
                  global.resource[global.race.species].amount -= galaxyProjects.gxy_gateway[ship].ship.civ();
                  global.civic.garrison.workers -= galaxyProjects.gxy_gateway[ship].ship.mil();
                }
              }
              return true;
            }
            return false;
          }
          return false;
        }
      },
      foothold: {
        id: "galaxy-foothold",
        title: loc("galaxy_foothold"),
        desc() {
          return `<div>${loc("galaxy_foothold")}</div><div class="has-text-special">${loc("requires_power_combo", [global.resource.Elerium.name])}</div>`;
        },
        reqs: { conflict: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("foothold", offset, 25e6, 1.25, "galaxy");
          },
          Titanium(offset) {
            return spaceCostMultiplier("foothold", offset, 3e6, 1.25, "galaxy");
          },
          Polymer(offset) {
            return spaceCostMultiplier("foothold", offset, 175e4, 1.25, "galaxy");
          },
          Iridium(offset) {
            return spaceCostMultiplier("foothold", offset, 9e5, 1.25, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("foothold", offset, 5e4, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          let elerium = 2.5;
          return `<div class="has-text-advanced">${loc("galaxy_defense_platform_effect", [50])}</div><div>${loc("galaxy_foothold_effect", [$(this)[0].support(), races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red])}</div><div class="has-text-caution">${loc("galaxy_foothold_effect2", [elerium, $(this)[0].powered(wiki)])}</div>`;
        },
        support() {
          return 4;
        },
        powered(wiki) {
          return powerCostMod(isStargateOn(wiki) ? 20 : 0);
        },
        powerBalancer() {
          return [{ s: global.galaxy.foothold.s_max - global.galaxy.foothold.support }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("foothold", "galaxy");
            powerOnNewStruct($(this)[0]);
            if (global.tech["conflict"] === 1) {
              initStruct(galaxyProjects.gxy_alien2.armed_miner);
              global.tech["conflict"] = 2;
              galaxySpace();
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["foothold", "galaxy"]
          };
        }
      },
      armed_miner: {
        id: "galaxy-armed_miner",
        title: loc("galaxy_armed_miner"),
        desc() {
          return `<div>${loc("galaxy_armed_miner")}</div>`;
        },
        reqs: { conflict: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("armed_miner", offset, 5e6, 1.25, "galaxy");
          },
          Steel(offset) {
            return spaceCostMultiplier("armed_miner", offset, 18e5, 1.25, "galaxy");
          },
          Stanene(offset) {
            return spaceCostMultiplier("armed_miner", offset, 1975e3, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("armed_miner", offset, 2e4, 1.25, "galaxy");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("armed_miner", offset, 1, 1.25, "galaxy");
          }
        },
        effect() {
          let bolognium = 0.032;
          let adamantite = 0.23;
          let iridium = 0.65;
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          return `<div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div>${loc("gain", [bolognium, global.resource.Bolognium.name])}</div><div>${loc("gain", [adamantite, global.resource.Adamantite.name])}</div><div>${loc("gain", [iridium, global.resource.Iridium.name])}</div><div class="has-text-caution">${loc("galaxy_alien2_support", [$(this)[0].support(), races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 2 : 2;
          },
          mil() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 1 : 1;
          },
          helium: 10,
          rating() {
            let rating = global.race["banana"] ? 4 : 5;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 2 : 5;
            }
            return rating;
          }
        },
        s_type: "alien2",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("armed_miner", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["armed_miner", "galaxy"]
          };
        }
      },
      ore_processor: {
        id: "galaxy-ore_processor",
        title: loc("galaxy_ore_processor"),
        desc() {
          return `<div>${loc("galaxy_ore_processor")}</div>`;
        },
        reqs: { conflict: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("ore_processor", offset, 3e6, 1.25, "galaxy");
          },
          Iron(offset) {
            return spaceCostMultiplier("ore_processor", offset, 5e6, 1.25, "galaxy");
          },
          Coal(offset) {
            return spaceCostMultiplier("ore_processor", offset, 375e4, 1.25, "galaxy");
          },
          Graphene(offset) {
            return spaceCostMultiplier("ore_processor", offset, 225e4, 1.25, "galaxy");
          }
        },
        effect() {
          return `<div>${loc("galaxy_ore_processor_effect", [10])}</div><div class="has-text-caution">${loc("galaxy_alien2_support", [$(this)[0].support(), races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red])}</div>`;
        },
        s_type: "alien2",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("ore_processor", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["ore_processor", "galaxy"]
          };
        }
      },
      scavenger: {
        id: "galaxy-scavenger",
        title: loc("galaxy_scavenger"),
        desc: loc("galaxy_scavenger_desc"),
        reqs: { conflict: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("scavenger", offset, 75e5, 1.25, "galaxy");
          },
          Alloy(offset) {
            return spaceCostMultiplier("scavenger", offset, 125e4, 1.25, "galaxy");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("scavenger", offset, 68e5, 1.25, "galaxy");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("scavenger", offset, 75e3, 1.25, "galaxy");
          },
          Elerium(offset) {
            return spaceCostMultiplier("scavenger", offset, 750, 1.25, "galaxy");
          }
        },
        effect(wiki) {
          let pirate = piracy("gxy_alien2", false, false, wiki);
          let know = Math.round(pirate * 25e3);
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          let boost = global.race["cataclysm"] ? `<div>${loc("galaxy_scavenger_effect2_cata", [+(pirate * 100 * 0.75).toFixed(1)])}</div>` : `<div>${loc("galaxy_scavenger_effect2", [+(pirate * 100 / 4).toFixed(1)])}</div>`;
          return `<div>${loc("galaxy_scavenger_effect", [know])}</div>${boost}<div class="has-text-caution">${loc("galaxy_alien2_support", [$(this)[0].support(), races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].solar.red])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 1 : 1;
          },
          mil() {
            return 0;
          },
          helium: 12
        },
        s_type: "alien2",
        support() {
          return -1;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("scavenger", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0 },
            p: ["scavenger", "galaxy"]
          };
        }
      }
    },
    gxy_chthonian: {
      info: {
        name() {
          return loc("galaxy_chthonian");
        },
        desc() {
          return loc("galaxy_chthonian_desc", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name]);
        },
        control() {
          return {
            name: races[global.galaxy.alien2.id].name,
            color: "danger"
          };
        }
      },
      chthonian_mission: {
        id: "galaxy-chthonian_mission",
        title() {
          return loc("galaxy_alien2_mission", [loc("galaxy_chthonian")]);
        },
        desc() {
          return loc("galaxy_alien2_mission_desc", [loc("galaxy_chthonian")]);
        },
        reqs: { chthonian: 1 },
        grant: ["chthonian", 2],
        queue_complete() {
          return global.tech.chthonian >= 2 ? 0 : 1;
        },
        cost: {
          Custom() {
            if (global.galaxy.hasOwnProperty("defense") && global.galaxy.defense.hasOwnProperty("gxy_chthonian")) {
              let total = 0;
              Object.keys(global.galaxy.defense.gxy_chthonian).forEach(function(ship) {
                total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_chthonian[ship];
              });
              return {
                label: loc(`galaxy_fleet_rating`, [`<span${total < 1250 ? ` class="has-text-danger"` : ``}>1250</span>`]),
                met: total < 1250 ? false : true
              };
            }
            return {
              label: loc(`galaxy_fleet_rating`, [`<span class="has-text-danger">1250</span>`]),
              met: false
            };
          }
        },
        effect() {
          let total = 0;
          if (global.galaxy.hasOwnProperty("defense") && global.galaxy.defense.hasOwnProperty("gxy_chthonian")) {
            Object.keys(global.galaxy.defense.gxy_chthonian).forEach(function(ship) {
              total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_chthonian[ship];
            });
          }
          let odds = total >= 4500 ? `<span class="has-text-success">${loc(`galaxy_piracy_low`)}</span>` : total >= 2500 ? `<span class="has-text-warning">${loc(`galaxy_piracy_avg`)}</span>` : `<span class="has-text-danger">${loc(`galaxy_piracy_high`)}</span>`;
          return `<div>${loc("galaxy_alien2_mission_effect2", [total])}</div><div>${loc("galaxy_alien2_mission_effect3", [odds])}</div><div class="has-text-caution">${loc("galaxy_alien2_mission_effect", [loc("galaxy_chthonian")])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let total = 0;
            Object.keys(global.galaxy.defense.gxy_chthonian).forEach(function(ship) {
              total += galaxyProjects.gxy_gateway[ship].ship.rating() * global.galaxy.defense.gxy_chthonian[ship];
            });
            if (total >= 1250) {
              let wreck = 500;
              let loss = [];
              messageQueue(loc("galaxy_chthonian_mission_result"), "info", false, ["progress"]);
              if (total >= 2500) {
                wreck = total >= 4500 ? 80 : 160;
              }
              if (global.race["instinct"]) {
                wreck /= 2;
              }
              Object.keys(global.galaxy.defense.gxy_chthonian).forEach(function(ship) {
                for (let i = 0; i < global.galaxy.defense.gxy_chthonian[ship]; i++) {
                  if (wreck > 0) {
                    wreck -= galaxyProjects.gxy_gateway[ship].ship.rating();
                    loss.push(ship);
                  }
                }
              });
              messageQueue(loc("galaxy_chthonian_mission_result_losses", [loss.map((v) => loc(`galaxy_${v}`)).join(", ")]), "danger", false, ["progress"]);
              for (let i = 0; i < loss.length; i++) {
                let ship = loss[i];
                global.galaxy.defense.gxy_chthonian[ship]--;
                global.galaxy[ship].on--;
                global.galaxy[ship].count--;
                global.galaxy[ship].crew -= galaxyProjects.gxy_gateway[ship].ship.civ();
                global.galaxy[ship].mil -= galaxyProjects.gxy_gateway[ship].ship.mil();
                global.resource[global.race.species].amount -= galaxyProjects.gxy_gateway[ship].ship.civ();
                global.civic.garrison.workers -= galaxyProjects.gxy_gateway[ship].ship.mil();
              }
              return true;
            }
            return false;
          }
          return false;
        }
      },
      minelayer: {
        id: "galaxy-minelayer",
        title: loc("galaxy_minelayer"),
        desc() {
          return `<div>${loc("galaxy_minelayer")}</div>`;
        },
        reqs: { chthonian: 2 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("minelayer", offset, 9e6, 1.25, "galaxy");
          },
          Iron(offset) {
            return spaceCostMultiplier("minelayer", offset, 48e5, 1.25, "galaxy");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("minelayer", offset, 125e4, 1.25, "galaxy");
          },
          Nanoweave(offset) {
            return spaceCostMultiplier("minelayer", offset, 1e5, 1.25, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          return `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_starbase")])}</div><div class="has-text-advanced">${loc("galaxy_defense_platform_effect", [$(this)[0].ship.rating()])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return 0;
          },
          mil() {
            let base = global.race["high_pop"] ? traits.high_pop.vars()[0] * 1 : 1;
            return global.race["grenadier"] ? Math.ceil(base / 2) : base;
          },
          helium: 8,
          rating() {
            let rating = global.race["banana"] ? 35 : 50;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 15 : 25;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("minelayer", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["minelayer", "galaxy"]
          };
        },
        postPower() {
          vBind({ el: `#gxy_chthonian` }, "update");
        }
      },
      excavator: {
        id: "galaxy-excavator",
        title: loc("galaxy_excavator"),
        desc() {
          return `<div>${loc("galaxy_excavator")}</div>`;
        },
        reqs: { chthonian: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("excavator", offset, 12e6, 1.25, "galaxy");
          },
          Polymer(offset) {
            return spaceCostMultiplier("excavator", offset, 44e5, 1.25, "galaxy");
          },
          Iridium(offset) {
            return spaceCostMultiplier("excavator", offset, 36e5, 1.25, "galaxy");
          },
          Mythril(offset) {
            return spaceCostMultiplier("excavator", offset, 18e4, 1.25, "galaxy");
          }
        },
        effect() {
          let orichalcum = +production("excavator").toFixed(3);
          return `<div>${loc("gain", [orichalcum, global.resource.Orichalcum.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(8);
        },
        powerBalancer() {
          return [{ r: "Orichalcum", p: production("excavator") }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("excavator", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["excavator", "galaxy"]
          };
        }
      },
      raider: {
        id: "galaxy-raider",
        title: loc("galaxy_raider"),
        desc() {
          return `<div>${loc("galaxy_raider")}</div>`;
        },
        reqs: { chthonian: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("raider", offset, 12e6, 1.25, "galaxy");
          },
          Titanium(offset) {
            return spaceCostMultiplier("raider", offset, 125e4, 1.25, "galaxy");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("raider", offset, 6e5, 1.25, "galaxy");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("raider", offset, 125e3, 1.25, "galaxy");
          },
          Stanene(offset) {
            return spaceCostMultiplier("raider", offset, 825e3, 1.25, "galaxy");
          }
        },
        effect() {
          let helium = +int_fuel_adjust($(this)[0].ship.helium).toFixed(2);
          let deuterium = 0.65;
          let vitreloy = 0.05;
          let polymer = 2.3;
          let neutronium = 0.8;
          return `<div class="has-text-caution">${loc(`requires_res`, [loc("galaxy_starbase")])}</div><div class="has-text-advanced">${loc("galaxy_ship_rating", [$(this)[0].ship.rating()])}</div><div>${loc("gain", [deuterium, global.resource.Deuterium.name])}</div><div>${loc("gain", [vitreloy, global.resource.Vitreloy.name])}</div><div>${loc("gain", [polymer, global.resource.Polymer.name])}</div><div>${loc("gain", [neutronium, global.resource.Neutronium.name])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div><div class="has-text-caution">${loc("spend", [helium, global.resource.Helium_3.name])}</div>`;
        },
        ship: {
          civ() {
            return 0;
          },
          mil() {
            let base = global.race["grenadier"] ? 1 : 2;
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * base : base;
          },
          helium: 18,
          rating() {
            let rating = global.race["banana"] ? 9 : 12;
            if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.ship) {
              rating += global.race["banana"] ? 3 : 6;
            }
            return rating;
          }
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("raider", "galaxy");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["raider", "galaxy"]
          };
        },
        postPower() {
          vBind({ el: `#gxy_chthonian` }, "update");
        }
      }
    }
  };
  var galaxyRegions = ["gxy_gateway", "gxy_stargate", "gxy_gorddon", "gxy_alien1", "gxy_alien2", "gxy_chthonian"];
  var gatewayArmada = ["scout_ship", "corvette_ship", "frigate_ship", "cruiser_ship", "dreadnought"];
  var galaxy_ship_types = [
    {
      area: "galaxy",
      region: "gxy_gateway",
      ships: global.support.gateway.map((x) => x.split(":")[1])
    },
    {
      area: "galaxy",
      region: "gxy_gorddon",
      ships: ["freighter"],
      req: "embassy"
    },
    {
      area: "galaxy",
      region: "gxy_alien1",
      ships: ["super_freighter"],
      req: "embassy"
    },
    {
      area: "galaxy",
      region: "gxy_alien2",
      ships: global.support.alien2.map((x) => x.split(":")[1]),
      req: "foothold"
    },
    {
      area: "galaxy",
      region: "gxy_chthonian",
      ships: ["minelayer", "raider"],
      req: "starbase"
    },
    {
      area: "portal",
      region: "prtl_lake",
      ships: global.support.lake.map((x) => x.split(":")[1]),
      req: "harbor"
    }
  ];
  function convertSpaceSector(part) {
    let space2 = "space";
    if (part.substr(0, 4) === "int_") {
      space2 = "interstellar";
    } else if (part.substr(0, 5) === "prtl_") {
      space2 = "portal";
    } else if (part.substr(0, 4) === "gxy_") {
      space2 = "galaxy";
    } else if (part.substr(0, 4) === "tau_") {
      space2 = "tauceti";
    } else if (part.substr(0, 5) === "eden_") {
      space2 = "eden";
    }
    return space2;
  }
  function piracy(region, rating, raw, wiki) {
    if (global.tech["piracy"] && !global.race["truepath"]) {
      let armada2 = 0;
      for (let i = gatewayArmada.length - 1; i >= 0; i--) {
        let ship = gatewayArmada[i];
        if (!global.galaxy.defense[region].hasOwnProperty(ship)) {
          global.galaxy.defense[region][ship] = 0;
        }
        let count = global.galaxy.defense[region][ship];
        armada2 += count * galaxyProjects.gxy_gateway[ship].ship.rating();
      }
      let pirate = 0;
      let pillage = 0.75;
      switch (region) {
        case "gxy_stargate":
          pirate = 0.1 * (global.race["instinct"] ? global.tech.piracy * 0.9 : global.tech.piracy);
          pillage = 0.5;
          break;
        case "gxy_gateway":
          pirate = 0.1 * (global.race["instinct"] ? global.tech.piracy * 0.9 : global.tech.piracy);
          pillage = 1;
          break;
        case "gxy_gorddon":
          pirate = global.race["instinct"] ? 720 : 800;
          break;
        case "gxy_alien1":
          pirate = global.race["instinct"] ? 900 : 1e3;
          break;
        case "gxy_alien2":
          pirate = global.race["instinct"] ? 2250 : 2500;
          pillage = 1;
          break;
        case "gxy_chthonian":
          pirate = global.race["instinct"] ? 7e3 : 7500;
          pillage = 1;
          break;
      }
      if (global.race["chicken"]) {
        pirate *= 1 + traits.chicken.vars()[1] / 100;
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.f) {
        pirate *= 1 - traits.ocular_power.vars()[1] / 500;
      }
      let num_def_plat_on = wiki ? global.galaxy?.defense_platform?.on ?? 0 : p_on["defense_platform"];
      if (region === "gxy_stargate" && num_def_plat_on) {
        armada2 += num_def_plat_on * 20;
      }
      let num_starbase_on = wiki ? global.galaxy?.starbase?.on ?? 0 : p_on["starbase"];
      if (region === "gxy_gateway" && num_starbase_on) {
        armada2 += num_starbase_on * 25;
      }
      let num_foothold_on = wiki ? global.galaxy?.foothold?.on ?? 0 : p_on["foothold"];
      if (region === "gxy_alien2" && num_foothold_on) {
        armada2 += num_foothold_on * 50;
        let num_armed_miner_on = wiki ? global.galaxy.armed_miner.on : gal_on["armed_miner"];
        if (num_armed_miner_on) {
          armada2 += num_armed_miner_on * galaxyProjects.gxy_alien2.armed_miner.ship.rating();
        }
      }
      if (region === "gxy_chthonian") {
        let num_minelayer_on = wiki ? global.galaxy?.minelayer?.on ?? 0 : gal_on["minelayer"];
        if (num_minelayer_on) {
          armada2 += num_minelayer_on * galaxyProjects.gxy_chthonian.minelayer.ship.rating();
        }
        let num_raider_on = wiki ? global.galaxy?.raider?.on ?? 0 : gal_on["raider"];
        if (num_raider_on) {
          armada2 += num_raider_on * galaxyProjects.gxy_chthonian.raider.ship.rating();
        }
      }
      if (raw) {
        return armada2;
      }
      if (region !== "gxy_stargate") {
        let patrol = armada2 > pirate ? pirate : armada2;
        return ((1 - (pirate - patrol) / pirate) * pillage + (1 - pillage)) * (rating ? 1 : piracy("gxy_stargate", false, false, wiki));
      } else {
        let patrol = armada2 > pirate ? pirate : armada2;
        return (1 - (pirate - patrol) / pirate) * pillage + (1 - pillage);
      }
    } else {
      return 1;
    }
  }
  function xeno_race() {
    let skip = ["protoplasm", global.race.species];
    if (global.city.hasOwnProperty("surfaceDwellers")) {
      skip.push(...global.city.surfaceDwellers);
    }
    if (!global.custom.hasOwnProperty("race0")) {
      skip.push("custom");
    }
    if (!global.custom.hasOwnProperty("race1")) {
      skip.push("hybrid");
    }
    let list = Object.keys(races).filter(function(r) {
      return !["demonic", "eldritch"].includes(races[r].type) && !skip.includes(r);
    });
    let key1 = randomKey(list);
    global.galaxy["alien1"] = {
      id: list[key1]
    };
    skip.push(list[key1]);
    list = Object.keys(races).filter(function(r) {
      return !["angelic"].includes(races[r].type) && !skip.includes(r);
    });
    let key2 = randomKey(list);
    global.galaxy["alien2"] = {
      id: list[key2]
    };
  }
  function gatewayStorage() {
    let multiplier = 1;
    if (global.race["pack_rat"]) {
      multiplier *= 1.05;
    }
    if (global.stats.achieve["blackhole"]) {
      multiplier *= 1 + global.stats.achieve.blackhole.l * 0.05;
    }
    multiplier *= global.tech["world_control"] ? 2 : 1;
    return multiplier;
  }
  var structDefinitions = {
    satellite: { count: 0 },
    propellant_depot: { count: 0 },
    gps: { count: 0 },
    nav_beacon: { count: 0, on: 0 },
    moon_base: { count: 0, on: 0, support: 0, s_max: 0 },
    iridium_mine: { count: 0, on: 0 },
    helium_mine: { count: 0, on: 0 },
    observatory: { count: 0, on: 0 },
    spaceport: { count: 0, on: 0, support: 0, s_max: 0 },
    red_tower: { count: 0, on: 0 },
    living_quarters: { count: 0, on: 0 },
    vr_center: { count: 0, on: 0 },
    garage: { count: 0 },
    red_mine: { count: 0, on: 0 },
    fabrication: { count: 0, on: 0 },
    red_factory: { count: 0, on: 0 },
    exotic_lab: { count: 0, on: 0 },
    ziggurat: { count: 0 },
    space_barracks: { count: 0, on: 0 },
    biodome: { count: 0, on: 0 },
    laboratory: { count: 0, on: 0 },
    geothermal: { count: 0, on: 0 },
    swarm_plant: { count: 0 },
    swarm_control: { count: 0, support: 0, s_max: 0 },
    swarm_satellite: { count: 0 },
    gas_mining: { count: 0, on: 0 },
    gas_storage: { count: 0 },
    star_dock: { count: 0, ship: 0, probe: 0, template: "human" },
    outpost: { count: 0, on: 0 },
    drone: { count: 0 },
    oil_extractor: { count: 0, on: 0 },
    space_station: { count: 0, on: 0, support: 0, s_max: 0 },
    iridium_ship: { count: 0, on: 0 },
    elerium_ship: { count: 0, on: 0 },
    elerium_prospector: { count: 0, on: 0 },
    iron_ship: { count: 0, on: 0 },
    elerium_contain: { count: 0, on: 0 },
    e_reactor: { count: 0, on: 0 },
    world_collider: { count: 0 },
    world_controller: { count: 0, on: 0 },
    starport: { count: 0, on: 0, support: 0, s_max: 0 },
    mining_droid: { count: 0, on: 0, adam: 0, uran: 0, coal: 0, alum: 0 },
    processing: { count: 0, on: 0 },
    habitat: { count: 0, on: 0 },
    fusion: { count: 0, on: 0 },
    exchange: { count: 0, on: 0 },
    warehouse: { count: 0 },
    xfer_station: { count: 0, on: 0 },
    cargo_yard: { count: 0 },
    cruiser: { count: 0, on: 0 },
    dyson: { count: 0 },
    nexus: { count: 0, on: 0, support: 0, s_max: 0 },
    harvester: { count: 0, on: 0 },
    far_reach: { count: 0, on: 0 },
    stellar_engine: { count: 0, mass: 8, exotic: 0 },
    mass_ejector: {
      count: 0,
      on: 0,
      total: 0,
      mass: 0,
      Food: 0,
      Lumber: 0,
      Chrysotile: 0,
      Stone: 0,
      Crystal: 0,
      Furs: 0,
      Copper: 0,
      Iron: 0,
      Aluminium: 0,
      Cement: 0,
      Coal: 0,
      Oil: 0,
      Uranium: 0,
      Steel: 0,
      Titanium: 0,
      Alloy: 0,
      Polymer: 0,
      Iridium: 0,
      Helium_3: 0,
      Deuterium: 0,
      Neutronium: 0,
      Adamantite: 0,
      Infernite: 0,
      Elerium: 0,
      Nano_Tube: 0,
      Graphene: 0,
      Stanene: 0,
      Bolognium: 0,
      Vitreloy: 0,
      Orichalcum: 0,
      Plywood: 0,
      Brick: 0,
      Wrought_Iron: 0,
      Sheet_Metal: 0,
      Mythril: 0,
      Aerogel: 0,
      Nanoweave: 0,
      Scarletite: 0
    },
    stargate: { count: 0 },
    gateway_station: { count: 0, on: 0 },
    s_gate: { count: 0, on: 0 },
    starbase: { count: 0, on: 0, support: 0, s_max: 0 },
    bolognium_ship: { count: 0, on: 0, crew: 0 },
    scout_ship: { count: 0, on: 0, crew: 0, mil: 0 },
    corvette_ship: { count: 0, on: 0, crew: 0, mil: 0 },
    frigate_ship: { count: 0, on: 0, crew: 0, mil: 0 },
    cruiser_ship: { count: 0, on: 0, crew: 0, mil: 0 },
    dreadnought: { count: 0, on: 0, crew: 0, mil: 0 },
    foothold: { count: 0, on: 0, support: 0, s_max: 0 },
    turret: { count: 0, on: 0 },
    carport: { count: 0, damaged: 0, repair: 0 },
    war_droid: { count: 0, on: 0 },
    repair_droid: { count: 0, on: 0 },
    war_drones: { count: 0, on: 0 },
    sensor_drone: { count: 0, on: 0 },
    attractor: { count: 0, on: 0 }
  };
  function incrementStruct(c_action, sector) {
    let struct = c_action;
    if (typeof c_action === "object") {
      struct = c_action.struct().p[0];
      sector = c_action.struct().p[1];
    }
    if (!sector) {
      sector = "space";
    }
    if (!global[sector][struct]) {
      global[sector][struct] = typeof c_action === "object" ? c_action.struct().d : structDefinitions[struct];
    }
    if (global.race["living_materials"] || global[sector][struct]["l_m"]) {
      global[sector][struct]["l_m"] = 0;
    }
    global[sector][struct].count++;
  }
  function spaceTech(r, k) {
    if (r && k) {
      return spaceProjects[r][k];
    }
    return spaceProjects;
  }
  function interstellarTech() {
    return interstellarProjects;
  }
  function galaxyTech() {
    return galaxyProjects;
  }
  function checkSpaceRequirements(era, region, action) {
    switch (era) {
      case "space":
        return checkRequirements2(spaceProjects, region, action);
      case "interstellar":
        return checkRequirements2(interstellarProjects, region, action);
      case "galaxy":
        return checkRequirements2(galaxyProjects, region, action);
    }
  }
  function checkRequirements2(action_set, region, action) {
    let path = global.race["truepath"] ? "truepath" : "standard";
    if (action_set[region][action].hasOwnProperty("path") && !action_set[region][action].path.includes(path)) {
      return false;
    }
    var isMet = true;
    Object.keys(action_set[region][action].reqs).forEach(function(req) {
      if (!global.tech[req] || global.tech[req] < action_set[region][action].reqs[req]) {
        isMet = false;
      }
    });
    if (isMet && action_set[region][action].hasOwnProperty("condition") && !action_set[region][action].condition()) {
      isMet = false;
    }
    if (isMet && action_set[region][action].hasOwnProperty("not_trait")) {
      for (let trait of action_set[region][action].not_trait) {
        if (global.race[trait]) {
          isMet = false;
        }
      }
    }
    if (isMet && action_set[region][action].grant && (global.tech[action_set[region][action].grant[0]] && global.tech[action_set[region][action].grant[0]] >= action_set[region][action].grant[1])) {
      isMet = false;
    }
    return isMet;
  }
  function renderSpace() {
    if (!global.settings.tabLoad && global.settings.civTabs !== 1) {
      return;
    }
    space("inner");
    if (global.race["truepath"]) {
      space("outer");
    }
    deepSpace();
    galaxySpace();
  }
  function space(zone) {
    if (!zone) {
      zone = global.settings.spaceTabs === 5 ? "outer" : "inner";
    }
    if (!global.settings.tabLoad) {
      if (global.settings.civTabs !== 1 || ![1, 5].includes(global.settings.spaceTabs) || (global.settings.civTabs === 1 && (global.settings.spaceTabs === 1 && zone !== "inner") || global.settings.spaceTabs === 5 && zone !== "outer")) {
        return;
      }
    }
    let parent = zone === "inner" ? $("#space") : $("#outerSol");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc(zone === "inner" ? "tab_space" : "tab_outer_space")}</h2>`));
    if (!global.settings.showSpace) {
      return false;
    }
    let regionOrder = [];
    Object.keys(spaceProjects).forEach(function(region) {
      if (global.race["orbit_decayed"] || global.race["cataclysm"]) {
        if (region !== "spc_home") {
          regionOrder.push(region);
          if (global.race["orbit_decayed"] && region === "spc_red") {
            regionOrder.push("spc_home");
          } else if (global.race["cataclysm"] && region === "spc_moon") {
            regionOrder.push("spc_home");
          }
        }
      } else {
        regionOrder.push(region);
      }
    });
    regionOrder.forEach(function(region) {
      let show = region.replace("spc_", "");
      if (global.settings.space[`${show}`]) {
        if (global.race["truepath"] && spaceProjects[region].info.zone !== zone) {
          return;
        }
        let name = typeof spaceProjects[region].info.name === "string" ? spaceProjects[region].info.name : spaceProjects[region].info.name();
        let noHome = global.race["orbit_decayed"] || global.race["cataclysm"] ? true : false;
        if (noHome && region !== "spc_home" || !noHome) {
          if (spaceProjects[region].info["support"]) {
            let support = spaceProjects[region].info["support"];
            if (!global.space[support].hasOwnProperty("support")) {
              global.space[support]["support"] = 0;
              global.space[support]["s_max"] = 0;
            }
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3> <span v-show="s_max">{{ support }}/{{ s_max }}</span></div></div>`);
            vBind({
              el: `#sr${region}`,
              data: global.space[support]
            });
          } else {
            parent.append(`<div id="${region}" class="space"><div><h3 class="name has-text-warning">${name}</h3></div></div>`);
          }
          if (global.race["truepath"] && spaceProjects[region].info.hasOwnProperty("syndicate") && spaceProjects[region].info.syndicate() && global.tech["syndicate"]) {
            $(`#${region}`).append(`<div id="${region}synd" v-show="${region}"></div>`);
            $(`#${region}synd`).append(`<span class="syndThreat has-text-caution">${loc("space_syndicate")} <span class="has-text-danger" v-html="threat('${region}')"></span></span>`);
            $(`#${region}synd`).append(`<span class="syndThreat has-text-caution">${loc("space_scan_effectiveness")} <span class="has-text-warning" v-html="scan('${region}')"></span></span>`);
            $(`#${region}synd`).append(`<span v-show="overkill('${region}')" class="syndThreat has-text-caution">${loc("space_overkill")} <span class="has-text-warning" v-html="overkill('${region}')"></span></span>`);
            vBind({
              el: `#${region}synd`,
              data: global.space.syndicate,
              methods: {
                threat(r) {
                  if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
                    let synd = syndicate(r, true);
                    if (synd.s >= 10) {
                      return synd.s >= 50 ? synd.r : Math.round(synd.r * synd.s * 0.02);
                    }
                  }
                  return "???";
                },
                scan(r) {
                  if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
                    let synd = syndicate(r, true);
                    return +((synd.s + 25) / 1.25).toFixed(1) + "%";
                  }
                  return loc(`galaxy_piracy_none`);
                },
                overkill(r) {
                  if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
                    let synd = syndicate(r, true);
                    return synd.s >= 100 ? synd.o : 0;
                  }
                  return 0;
                }
              }
            });
            if (spaceProjects[region].info.hasOwnProperty("extra")) {
              spaceProjects[region].info.extra(region);
            }
          }
        }
        popover(
          region,
          function() {
            return typeof spaceProjects[region].info.desc === "string" ? spaceProjects[region].info.desc : spaceProjects[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        Object.keys(spaceProjects[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(spaceProjects, region, tech)) {
            let c_action = spaceProjects[region][tech];
            setAction(c_action, zone === "inner" ? "space" : "outerSol", tech);
          }
        });
      }
    });
  }
  function deepSpace() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 2)) {
      return;
    }
    let parent = $("#interstellar");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc("tab_interstellar")}</h2>`));
    if (!global.settings.showDeep) {
      return false;
    }
    Object.keys(interstellarProjects).forEach(function(region) {
      let show = region.replace("int_", "");
      if (global.settings.space[`${show}`]) {
        let name = typeof interstellarProjects[region].info.name === "string" ? interstellarProjects[region].info.name : interstellarProjects[region].info.name();
        if (interstellarProjects[region].info["support"]) {
          let support = interstellarProjects[region].info["support"];
          if (!global.interstellar[support].hasOwnProperty("support")) {
            global.interstellar[support]["support"] = 0;
            global.interstellar[support]["s_max"] = 0;
          }
          parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3> <span v-show="s_max">{{ support }}/{{ s_max }}</span></div></div>`);
          vBind({
            el: `#sr${region}`,
            data: global.interstellar[support]
          });
        } else {
          parent.append(`<div id="${region}" class="space"><div><h3 class="name has-text-warning">${name}</h3></div></div>`);
        }
        popover(
          region,
          function() {
            return typeof interstellarProjects[region].info.desc === "string" ? interstellarProjects[region].info.desc : interstellarProjects[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        Object.keys(interstellarProjects[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(interstellarProjects, region, tech)) {
            let c_action = interstellarProjects[region][tech];
            setAction(c_action, "interstellar", tech);
          }
        });
      }
    });
  }
  function galaxySpace() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 3)) {
      return;
    }
    let parent = $("#galaxy");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc("tab_galactic")}</h2>`));
    if (!global.settings.showGalactic) {
      return false;
    }
    armada(parent, "fleet");
    Object.keys(galaxyProjects).forEach(function(region) {
      let show = region.replace("gxy_", "");
      if (global.galaxy["defense"] && !global.galaxy.defense.hasOwnProperty(region)) {
        global.galaxy.defense[region] = {};
      }
      if (global.settings.space[`${show}`]) {
        let name = typeof galaxyProjects[region].info.name === "string" ? galaxyProjects[region].info.name : galaxyProjects[region].info.name();
        let regionContent = $(`<div id="${region}" class="space"></div>`);
        parent.append(regionContent);
        let regionHeader = $(`<h3 class="name has-text-warning">${name}</h3>`);
        regionContent.append(regionHeader);
        if (global.tech["xeno"] && global.tech["xeno"] >= 3) {
          regionContent.append(`<span class="regionControl has-text-${galaxyProjects[region].info.control().color}">{{ r.control().name }}</span>`);
        }
        let vData = {
          el: `#${region}`,
          data: {
            r: galaxyProjects[region].info
          },
          methods: {
            threat(r) {
              let scouts_req = global.race["infiltrator"] ? 1 : 2;
              if (global.galaxy.defense[r].scout_ship >= scouts_req) {
                let pirates = (1 - piracy(r, true)) * 100;
                pirates = pirates < 1 ? Math.ceil(pirates) : Math.round(pirates);
                if (pirates === 0) {
                  return "has-text-success";
                } else if (pirates <= 20) {
                  return "has-text-advanced";
                } else if (pirates <= 40) {
                  return "has-text-info";
                } else if (pirates <= 60) {
                  return "has-text-warning";
                } else if (pirates <= 80) {
                  return "has-text-caution";
                } else {
                  return "has-text-danger";
                }
              }
              return "has-text-danger";
            }
          },
          filters: {
            pirate(r) {
              let scouts_req = global.race["infiltrator"] ? 1 : 2;
              if (global.galaxy.defense[r].scout_ship >= scouts_req) {
                let pirates = (1 - piracy(r, true)) * 100;
                pirates = pirates < 1 ? Math.ceil(pirates) : Math.round(pirates);
                let adv_req = global.race["infiltrator"] ? 3 : 4;
                if (global.galaxy.defense[r].scout_ship >= adv_req) {
                  return `${pirates}%`;
                } else {
                  if (pirates === 0) {
                    return loc("galaxy_piracy_none");
                  } else if (pirates <= 20) {
                    return loc("galaxy_piracy_vlow");
                  } else if (pirates <= 40) {
                    return loc("galaxy_piracy_low");
                  } else if (pirates <= 60) {
                    return loc("galaxy_piracy_avg");
                  } else if (pirates <= 80) {
                    return loc("galaxy_piracy_high");
                  } else {
                    return loc("galaxy_piracy_vhigh");
                  }
                }
              }
              return "???";
            },
            defense(r) {
              return piracy(r, true, true);
            }
          }
        };
        if (galaxyProjects[region].info["support"]) {
          let support = galaxyProjects[region].info["support"];
          if (global.galaxy[support]) {
            if (!global.galaxy[support].hasOwnProperty("support")) {
              global.galaxy[support]["support"] = 0;
              global.galaxy[support]["s_max"] = 0;
            }
            regionContent.append(`<span class="regionSupport" v-show="s.s_max">{{ s.support }}/{{ s.s_max%1 ? s.s_max.toFixed(2) : s.s_max }}</span>`);
            vData.data["s"] = global.galaxy[support];
          }
        }
        if (global.tech["piracy"]) {
          regionContent.append(`<div><span class="has-text-caution pirate">${loc("galaxy_piracy_threat", [races[global.galaxy.alien2.id].name])}</span><span :class="threat('${region}')">{{ '${region}' | pirate }}</span><span class="sep">|</span><span class="has-text-warning">${loc("galaxy_armada")}</span>: <span class="has-text-success">{{ '${region}' | defense }}</span></div>`);
        }
        vBind(vData);
        popover(
          region,
          function() {
            return typeof galaxyProjects[region].info.desc === "string" ? galaxyProjects[region].info.desc : galaxyProjects[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        popover(
          region,
          function() {
            return loc("galaxy_control", [galaxyProjects[region].info.control().name, name]);
          },
          {
            elm: `#${region} .regionControl`,
            classes: `has-background-light has-text-dark`
          }
        );
        Object.keys(galaxyProjects[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(galaxyProjects, region, tech)) {
            let c_action = galaxyProjects[region][tech];
            setAction(c_action, "galaxy", tech);
          }
        });
      }
    });
  }
  function armada(parent, id) {
    if (global.tech["piracy"] && !global.race["truepath"]) {
      let header = $(`<div id="h${id}" class="armHead"><h3 class="has-text-warning">${loc("galaxy_armada")}</h3></div>`);
      parent.append(header);
      let soldier_title = global.tech["world_control"] ? loc("civics_garrison_peacekeepers") : loc("civics_garrison_soldiers");
      header.append($(`<span>|</span>`));
      header.append($(`<span class="has-text-caution"><span class="soldier">${soldier_title}</span> <span>{{ g.workers | stationed }} / {{ g.max | s_max }}</span></span>`));
      header.append($(`<span>|</span>`));
      header.append($(`<span class="has-text-caution"><span class="crew1">${loc("job_crew_mil")}</span> <span>{{ g.crew }}</span></span>`));
      header.append($(`<span>|</span>`));
      header.append($(`<span class="has-text-success"><span class="crew2">${loc("job_crew_civ")}</span> <span>{{ c.workers }} / {{ c.max }}</span></span>`));
      vBind({
        el: `#h${id}`,
        data: {
          g: global.civic.garrison,
          c: global.civic.crew
        },
        filters: {
          stationed(v) {
            return garrisonSize();
          },
          s_max(v) {
            return garrisonSize(true);
          }
        }
      });
      ["soldier", "crew1", "crew2"].forEach(function(k) {
        popover(
          `h${id}${k}`,
          function() {
            switch (k) {
              case "soldier":
                return describeSoldier();
              case "crew1":
                return loc("civics_garrison_crew_desc");
              case "crew2":
                return loc("job_crew_desc");
            }
          },
          {
            elm: `#h${id} span.${k}`
          }
        );
      });
      let fleet = $(`<div id="${id}" class="fleet"></div>`);
      parent.append(fleet);
      let cols = [];
      for (let i = 0; i < gatewayArmada.length + 1; i++) {
        let col = $(`<div class="area"></div>`);
        cols.push(col);
        fleet.append(col);
      }
      cols[0].append($(`<span></span>`));
      cols[0].append($(`<span id="armadagateway" class="has-text-danger">${galaxyProjects.gxy_gateway.info.name}</span>`));
      for (let i = 0; i < gatewayArmada.length; i++) {
        const ship = gatewayArmada[i];
        if (global.galaxy.hasOwnProperty(ship)) {
          cols[i + 1].append($(`<span id="armada${ship}" class="ship has-text-advanced">${galaxyProjects.gxy_gateway[ship].title}</span>`));
          cols[i + 1].append($(`<span class="ship">{{ gateway.${ship} }}</span>`));
        }
      }
      Object.keys(global.galaxy.defense).forEach(function(area) {
        let r = area.substring(4);
        if (global.settings.space[r] && r !== "gateway") {
          let region = $(`<span id="armada${r}" class="has-text-caution">${typeof galaxyProjects[area].info.name === "string" ? galaxyProjects[area].info.name : galaxyProjects[area].info.name()}</span>`);
          cols[0].append(region);
          for (let i = 0; i < gatewayArmada.length; i++) {
            const ship = gatewayArmada[i];
            if (global.galaxy.hasOwnProperty(ship)) {
              let shipSpan = $(`<span class="ship"></span>`);
              let sub = $(`<span role="button" aria-label="remove ${ship}" class="sub has-text-danger" @click="sub('${area}','${ship}')"><span>&laquo;</span></span>`);
              let count = $(`<span class="current">{{ ${r}.${ship} }}</span>`);
              let add = $(`<span role="button" aria-label="add ${ship}" class="add has-text-success" @click="add('${area}','${ship}')"><span>&raquo;</span></span>`);
              cols[i + 1].append(shipSpan);
              shipSpan.append(sub);
              shipSpan.append(count);
              shipSpan.append(add);
            }
          }
        }
      });
      vBind({
        el: `#${id}`,
        data: {
          stargate: global.galaxy.defense.gxy_stargate,
          gateway: global.galaxy.defense.gxy_gateway,
          gorddon: global.galaxy.defense.gxy_gorddon,
          alien1: global.galaxy.defense.gxy_alien1,
          alien2: global.galaxy.defense.gxy_alien2,
          chthonian: global.galaxy.defense.gxy_chthonian,
          t: global.tech
        },
        methods: {
          sub(area, ship) {
            if (global.galaxy.defense[area][ship] > 0) {
              let ship_change = keyMultiplier();
              if (ship_change > global.galaxy.defense[area][ship]) {
                ship_change = global.galaxy.defense[area][ship];
              }
              global.galaxy.defense.gxy_gateway[ship] += ship_change;
              global.galaxy.defense[area][ship] -= ship_change;
            }
          },
          add(area, ship) {
            if (global.galaxy.defense.gxy_gateway[ship] > 0) {
              let ship_change = keyMultiplier();
              if (ship_change > global.galaxy.defense.gxy_gateway[ship]) {
                ship_change = global.galaxy.defense.gxy_gateway[ship];
              }
              global.galaxy.defense.gxy_gateway[ship] -= ship_change;
              global.galaxy.defense[area][ship] += ship_change;
            }
          }
        }
      });
      Object.keys(global.galaxy.defense).forEach(function(area) {
        let r = area.substring(4);
        if (global.settings.space[r]) {
          popover(`armada${r}`, function() {
            return `<div>${typeof galaxyProjects[area].info.desc === "string" ? galaxyProjects[area].info.desc : galaxyProjects[area].info.desc()}</div>`;
          });
        }
      });
      for (let i = 0; i < gatewayArmada.length; i++) {
        const ship = gatewayArmada[i];
        if (global.galaxy.hasOwnProperty(ship)) {
          popover(`armada${ship}`, function(obj) {
            actionDesc(obj.popper, galaxyProjects.gxy_gateway[ship], global.galaxy[ship]);
            return void 0;
          });
        }
      }
    }
  }
  function house_adjust(res) {
    if (global.tech["space_housing"]) {
      res *= 0.8 ** global.tech["space_housing"];
    }
    return res;
  }
  function iron_adjust(res, wiki) {
    let num_iron_ship_on = wiki ? global.space?.iron_ship?.on ?? 0 : support_on["iron_ship"];
    if (global.tech["solar"] && global.tech["solar"] >= 5 && num_iron_ship_on) {
      res *= 0.95 ** num_iron_ship_on;
    }
    return res;
  }
  function swarm_adjust(res, wiki) {
    if (global.space["swarm_plant"]) {
      let reduce = global.tech["swarm"] ? 0.88 : 0.94;
      if (global.tech["swarm"] >= 3) {
        reduce -= get_qlevel(wiki) / 100;
      }
      if (reduce < 0.05) {
        reduce = 0.05;
      }
      res *= reduce ** global.space.swarm_plant.count;
    }
    return res;
  }
  function fuel_adjust(fuel, drain, wiki) {
    if (global.race.universe === "heavy") {
      fuel *= 1.25 + 0.5 * darkEffect("heavy");
    }
    if (global.race["truepath"]) {
      fuel *= drain ? 2.5 : 1.25;
    }
    let num_driver_on = wiki ? global.city?.mass_driver?.on ?? 0 : p_on["mass_driver"];
    if (num_driver_on) {
      let factor = (wiki ? wiki.truepath : global.race["truepath"]) ? 0.94 : 0.95;
      fuel *= factor ** num_driver_on;
    }
    if (global.stats.achieve["heavyweight"]) {
      fuel *= 0.96 ** global.stats.achieve["heavyweight"].l;
    }
    if (global.city.ptrait.includes("dense")) {
      fuel *= planetTraits.dense.vars()[2];
    }
    if (global.race["cataclysm"]) {
      fuel *= 0.2;
    }
    if (global.race["heavy"]) {
      fuel *= 1 + traits.heavy.vars()[0] / 100;
    }
    if (global.race["gravity_well"]) {
      fuel *= 1.35 + 9.65 * darkEffect("heavy");
    }
    if (eventActive("launch_day")) {
      fuel *= 0.95;
    }
    return fuel;
  }
  function int_fuel_adjust(fuel) {
    if (global.race.universe === "heavy") {
      fuel *= 1.2 + 0.3 * darkEffect("heavy");
    }
    if (global.stats.achieve["heavyweight"]) {
      fuel *= 0.96 ** global.stats.achieve["heavyweight"].l;
    }
    if (global.race["heavy"]) {
      fuel *= 1 + traits.heavy.vars()[0] / 100;
    }
    if (eventActive("launch_day")) {
      fuel *= 0.95;
    }
    return fuel;
  }
  function zigguratBonus() {
    let bonus = 1;
    if (global.space["ziggurat"]) {
      let zig = global.tech["ancient_study"] ? 6e-3 : 4e-3;
      if (global.tech["ancient_deify"] && global.tech["ancient_deify"] >= 2 && support_on["exotic_lab"]) {
        zig += 1e-4 * support_on["exotic_lab"];
      }
      if (global.civic.govern.type === "theocracy" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
        let faith = 2e-5;
        if (global.race["high_pop"]) {
          faith = highPopAdjust(faith);
        }
        zig += faith * global.civic.priest.workers;
      }
      if (global.race["ooze"]) {
        zig *= 1 - traits.ooze.vars()[1] / 100;
      }
      if (global.race["high_pop"]) {
        zig = highPopAdjust(zig);
      }
      bonus += templeCount(true) * global.civic.colonist.workers * zig;
    }
    return bonus;
  }
  function planetName() {
    let type = races[global.race.species].type === "hybrid" ? global.race.maintype : races[global.race.species].type;
    let names2 = {
      red: races[global.race.species].solar.red,
      hell: races[global.race.species].solar.hell,
      gas: races[global.race.species].solar.gas,
      gas_moon: races[global.race.species].solar.gas_moon,
      dwarf: races[global.race.species].solar.dwarf,
      titan: genusVars[type].solar.titan,
      enceladus: genusVars[type].solar.enceladus,
      triton: genusVars[type].solar.triton,
      eris: genusVars[type].solar.eris
    };
    if (global.race.species === "custom") {
      for (let p of ["titan", "enceladus", "triton", "eris"]) {
        if (global.custom.race0.hasOwnProperty(p)) {
          names2[p] = global.custom.race0[p];
        }
      }
    }
    if (global.race.species === "hybrid") {
      for (let p of ["titan", "enceladus", "triton", "eris"]) {
        if (global.custom.race1.hasOwnProperty(p)) {
          names2[p] = global.custom.race1[p];
        }
      }
    }
    return names2;
  }
  var universe_affixes = ["l", "h", "a", "e", "m", "mg"];
  var universe_types = {
    standard: {
      name: loc("universe_standard"),
      desc: loc("universe_standard_desc"),
      effect: loc("universe_standard_effect")
    },
    heavy: {
      name: loc("universe_heavy"),
      desc: loc("universe_heavy_desc"),
      effect: loc("universe_heavy_effect", [5])
    },
    antimatter: {
      name: loc("universe_antimatter"),
      desc: loc("universe_antimatter_desc"),
      effect: loc("universe_antimatter_effect")
    },
    evil: {
      name: loc("universe_evil"),
      desc: loc("universe_evil_desc"),
      effect: loc("universe_evil_effect")
    },
    micro: {
      name: loc("universe_micro"),
      desc: loc("universe_micro_desc"),
      effect: loc("universe_micro_effect", [75])
    },
    magic: {
      name: loc("universe_magic"),
      desc: loc("universe_magic_desc"),
      effect: loc("universe_magic_effect")
    }
  };
  function genPlanets() {
    let avail = [];
    if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 4 && global.custom.hasOwnProperty("planet")) {
      Object.keys(universe_types).forEach(function(u) {
        let uafx = universeAffix(u);
        if (global.custom.planet.hasOwnProperty(uafx)) {
          if (global.custom.planet[uafx].s) {
            avail.push(`${uafx}:s`);
          }
        }
      });
    }
    if (global.race["geck"] && global.race.geck > 0) {
      let geck = $(`<div id="geck" class="geck"><span class="has-text-caution">${loc(`gecks_remaining`)}</span>: <span class="has-text-warning">{{ geck }}</span></div>`);
      $("#evolution").append(geck);
      vBind({
        el: "#geck",
        data: global.race
      });
    }
    if (global.race.probes === 0) {
      setPlanet({ custom: avail });
    } else {
      let hell = false;
      for (let i = 0; i < global.race.probes; i++) {
        let result = setPlanet({ hell, custom: avail });
        if (result === "hellscape") {
          hell = true;
        } else if (avail.includes(result)) {
          avail.splice(avail.indexOf(result), 1);
        }
      }
    }
  }
  function setUniverse() {
    let universes = ["standard", "heavy", "antimatter", "evil", "micro", "magic"];
    for (let i = 0; i < universes.length; i++) {
      let universe = universes[i];
      let id = `uni-${universe}`;
      let parent = $(`<div id="${id}" class="action"></div>`);
      let element = $(`<a class="button is-dark" v-on:click="action" role="link"><span class="aTitle">${universe_types[universe].name}</span></a>`);
      parent.append(element);
      $("#evolution").append(parent);
      $("#" + id).on("click", function() {
        global.race["universe"] = universe;
        clearElement($("#evolution"));
        genPlanets();
        clearPopper();
      });
      popover(id, function(obj) {
        obj.popper.append($(`<div>${universe_types[universe].name}</div>`));
        obj.popper.append($(`<div>${universe_types[universe].desc}</div>`));
        obj.popper.append($(`<div>${universe_types[universe].effect}</div>`));
        return void 0;
      }, {
        classes: `has-background-light has-text-dark`
      });
    }
  }
  function ascendLab(hybrid, wiki) {
    let isWiki = !!wiki;
    if (!isWiki && !global.race["noexport"]) {
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      if (!global["sim"]) {
        save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
      }
      let genusType = races[global.race.species].type === "hybrid" ? global.race.maintype : races[global.race.species].type;
      unlockAchieve(`biome_${global.city.biome}`);
      unlockAchieve(`genus_${genusType}`);
      if (hybrid) {
        unlockAchieve(`godslayer`);
        if (["unicorn", "seraph"].includes(global.race.species)) {
          unlockAchieve(`traitor`);
        }
        if (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 5) {
          global.race["noexport"] = `Hybrid`;
        } else {
          apotheosis();
          return;
        }
      } else {
        if (global.race["witch_hunter"] && global.race.universe === "magic") {
          unlockAchieve(`soul_sponge`);
        } else {
          unlockAchieve(`ascended`);
          if (global.interstellar.thermal_collector.count === 0) {
            unlockFeat(`energetic`);
          }
        }
        if (global.race.species === "junker") {
          unlockFeat("the_misery");
        }
        if (!global.race["modified"] && global.race["junker"] && global.race.species === "junker") {
          unlockFeat(`garbage_pie`);
        }
        if (global.race["emfield"]) {
          unlockAchieve(`technophobe`);
        }
        if (global.race["cataclysm"]) {
          unlockFeat(`finish_line`);
        }
        global.race["noexport"] = `Race`;
      }
      clearElement($(`#city`));
      global.settings.showCity = true;
      global.settings.showCivic = false;
      global.settings.showResearch = false;
      global.settings.showResources = false;
      global.settings.showGenetics = false;
      global.settings.showSpace = false;
      global.settings.showDeep = false;
      global.settings.showGalactic = false;
      global.settings.showPortal = false;
      global.settings.showEden = false;
      global.settings.spaceTabs = 0;
    }
    let unlockedTraits = {};
    let lab = $(`<div id="celestialLab" class="celestialLab"></div>`);
    let wikiVars = {
      ascended: {},
      technophobe: global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l ? global.stats.achieve.technophobe.l : 0
    };
    if (isWiki) {
      wiki.append(lab);
    } else {
      $(`#city`).append(lab);
    }
    let labStatus = `<div><h3 class="has-text-danger">${loc("genelab_title")}</h3> - <span class="has-text-warning">${loc("genelab_genes")} {{ g.genes }}</span> - <span class="has-text-warning">${loc("trait_untapped_name")}: {{ g.genes | untapped }}</span></div>`;
    lab.append(labStatus);
    if (isWiki) {
      lab.append(`
            <div class="has-text-caution">${loc("achieve_ascended_name")}</div>
        `);
      let ascended_levels = $(`<div></div>`);
      lab.append(ascended_levels);
      Object.keys(universe_types).forEach(function(uni) {
        wikiVars.ascended[uni] = global.stats.achieve[`ascended`] && global.stats.achieve.ascended.hasOwnProperty(universeAffix(uni)) ? global.stats.achieve.ascended[universeAffix(uni)] : 0;
        ascended_levels.append(`
                <div class="calcInput"><span>${loc("universe_" + uni)}</span> <b-numberinput :input="val('${uni}')" min="0" max="5" v-model="w.ascended.${uni}" :controls="false"></b-numberinput></div>
            `);
      });
      lab.append(`
            <div class="has-text-caution">${loc("achieve_technophobe_name")}</div>
            <div>
                <div class="calcInput"><b-numberinput :input="val('technophobe')" min="0" max="5" v-model="w.technophobe" :controls="false"></b-numberinput></div>
            </div>
        `);
    }
    let name = $(`<div class="fields"><div class="name">${loc("genelab_name")} <b-input v-model="g.name" maxlength="20"></b-input></div><div class="entity">${loc("genelab_entity")} <b-input v-model="g.entity" maxlength="40"></b-input></div><div class="name">${loc("genelab_home")} <b-input v-model="g.home" maxlength="20"></b-input></div> <div>${loc("genelab_desc")} <b-input v-model="g.desc" maxlength="255"></b-input></div></div>`);
    lab.append(name);
    let planets = $(`<div class="fields">
        <div class="name">${loc("genelab_red")} <b-input v-model="g.red" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_hell")} <b-input v-model="g.hell" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_gas")} <b-input v-model="g.gas" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_gas_moon")} <b-input v-model="g.gas_moon" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_dwarf")} <b-input v-model="g.dwarf" maxlength="20"></b-input></div></div>`);
    lab.append(planets);
    let tpPlanets = $(`<div class="fields">
        <div class="name">${loc("genelab_titan")} <b-input v-model="g.titan" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_enceladus")} <b-input v-model="g.enceladus" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_triton")} <b-input v-model="g.triton" maxlength="20"></b-input></div>
        <div class="name">${loc("genelab_eris")} <b-input v-model="g.eris" maxlength="20"></b-input></div></div>`);
    lab.append(tpPlanets);
    let genes = $(`<div class="sequence"></div>`);
    lab.append(genes);
    let fanatic = `<div id="geneLabFanatic" class="genus"><div class="has-text-caution header">${loc(`tech_fanaticism`)}</div><button class="button" @click="fanatic()">{{ g.fanaticism | fanaticism }}</button></div>`;
    let dGenus = "humanoid";
    if (hybrid) {
      dGenus = "hybrid";
      let genus = `<div class="genus_selection">`;
      genus += `<div id="geneLabGenusA" class="genus"><div class="has-text-caution header">${loc("genelab_genus_a")}</div><button class="button" @click="genus(0)" v-html="$options.filters.genus(g.hybrid,0)"></button></div>`;
      genus += `<div id="geneLabGenusB" class="genus"><div class="has-text-caution header">${loc("genelab_genus_b")}</div><button class="button" @click="genus(1)" v-html="$options.filters.genus(g.hybrid,1)"></button></div>`;
      genus += `${fanatic}`;
      genus += `<div class="resetLab"><button class="button" @click="reset()">${loc("genelab_reset")}</button></div>`;
      genus += `</div>`;
      genes.append($(genus));
    } else {
      let genus = `<div class="genus_selection">`;
      genus += `<div id="geneLabGenus" class="genus"><div class="has-text-caution header">${loc("genelab_genus")}</div><button class="button" @click="genus()">{{ g.genus | genus }}</button></div>`;
      genus += `${fanatic}`;
      genus += `<div class="resetLab"><button class="button" @click="reset()">${loc("genelab_reset")}</button></div>`;
      genus += `</div>`;
      genes.append($(genus));
    }
    let slot = hybrid ? "race1" : "race0";
    let genome = global.hasOwnProperty("custom") && global.custom.hasOwnProperty(slot) ? {
      name: global.custom[slot].name,
      desc: global.custom[slot].desc,
      entity: global.custom[slot].entity,
      home: global.custom[slot].home,
      red: global.custom[slot].red,
      hell: global.custom[slot].hell,
      gas: global.custom[slot].gas,
      gas_moon: global.custom[slot].gas_moon,
      dwarf: global.custom[slot].dwarf,
      titan: global.custom[slot].titan || planetName().titan,
      enceladus: global.custom[slot].enceladus || planetName().enceladus,
      triton: global.custom[slot].triton || planetName().triton,
      eris: global.custom[slot].eris || planetName().eris,
      genes: 0,
      genus: global.custom[slot].genus,
      traitlist: global.custom[slot].traits,
      ranks: global.custom[slot]?.ranks || {},
      fanaticism: global.custom[slot].hasOwnProperty("fanaticism") && global.custom[slot].fanaticism ? global.custom[slot].fanaticism : false
    } : {
      name: "Zombie",
      desc: `Zombies aren't so much a species as they are the shambling remains of a race who succumbed to a nightmarish virus. Yet somehow they continue to drone on.`,
      entity: "rotting bipedal creatures",
      home: "Grave",
      red: "Brains",
      hell: "Rigor Mortis",
      gas: "Decompose",
      gas_moon: "Bones",
      dwarf: "Double Tap",
      titan: "Necromancer",
      enceladus: "Skeleton",
      triton: "Rot",
      eris: "Zombieland",
      genes: 10,
      genus: dGenus,
      traitlist: [],
      ranks: {},
      fanaticism: false
    };
    if (hybrid) {
      if (global.hasOwnProperty("custom") && global.custom.hasOwnProperty(slot)) {
        genome["hybrid"] = global.custom[slot].hybrid;
      } else {
        genome["hybrid"] = ["humanoid", "small"];
      }
    }
    let taxomized = { utility: {}, resource: {}, production: {}, combat: {}, all: {} };
    ;
    Object.keys(races).forEach(function(race) {
      let type = races[race].type;
      if (isWiki || global.stats.achieve[`extinct_${race}`] && global.stats.achieve[`extinct_${race}`].l > 0 || global.stats.achieve[`genus_${type}`] && global.stats.achieve[`genus_${type}`].l > 0) {
        if (races[race].hasOwnProperty("traits") && !["custom", "hybrid", "junker", "sludge", "ultra_sludge"].includes(race)) {
          Object.keys(races[race].traits).forEach(function(trait) {
            if (traits[trait]?.taxonomy) {
              taxomized[traits[trait].taxonomy][trait] = true;
              unlockedTraits[trait] = true;
            }
          });
        }
      }
    });
    for (let i = genome.traitlist.length - 1; i >= 0; i--) {
      if (!traits.hasOwnProperty(genome.traitlist[i]) || !unlockedTraits.hasOwnProperty(genome.traitlist[i]) || traits[genome.traitlist[i]].type !== "major") {
        genome.traitlist.splice(i, 1);
      }
    }
    let trait_listing = $(`<b-tabs v-model="tt.t" @input="swapTab"></b-tabs>`);
    let all_listing = ``;
    Object.keys(taxomized).sort().forEach(function(tax) {
      if (tax === "all") {
        return;
      }
      let negative = "";
      let trait_list_header = `<b-tab-item><template slot="header"><h2 class="is-sr-only">${loc(`genelab_traits_${tax}`)}}</h2><span aria-hidden="true">${loc(`genelab_traits_${tax}`)}</span></template>`;
      let trait_list = ``;
      Object.keys(taxomized[tax]).sort().forEach(function(trait) {
        if (traits.hasOwnProperty(trait) && traits[trait].type === "major") {
          if (traits[trait].val >= 0) {
            trait_list += `<div class="field t${trait}"><b-checkbox :disabled="allowed('${trait}')" @input="geneEdit()" v-model="g.traitlist" native-value="${trait}"><span class="has-text-success">${loc(`trait_${trait}_name`)}</span> (<span class="has-text-advanced">{{ '${trait}' | cost }}</span><span v-html="$options.filters.empower(g.traitlist,'${trait}')"></span>)</b-checkbox></div>`;
          } else {
            negative += `<div class="field t${trait}"><b-checkbox :disabled="allowed('${trait}')" @input="geneEdit()" v-model="g.traitlist" native-value="${trait}"><span class="has-text-danger">${loc(`trait_${trait}_name`)}</span> (<span class="has-text-caution">{{ '${trait}' | cost }}</span><span v-html="$options.filters.empower(g.traitlist,'${trait}')"></span>)</b-checkbox></div>`;
          }
        }
      });
      let full_list = trait_list_header + `<div class="cool trait_selection">` + trait_list + negative + `</div></b-tab-item>`;
      trait_listing.append($(full_list));
      all_listing += `<h3>${loc(`genelab_traits_${tax}`)}</h3><div class="lame trait_selection">` + trait_list + negative + `</div>`;
    });
    let summary = `<b-tab-item id="traitSummary"><template slot="header"><h2 class="is-sr-only">${loc(`genelab_traits_summary`)}}</h2><span aria-hidden="true">${loc(`genelab_traits_summary`)}</span></template></b-tab-item>`;
    trait_listing.append(summary);
    let allListing = `<b-tab-item id="traitAll"><template slot="header"><h2 class="is-sr-only">${loc(`genelab_traits_all`)}}</h2><span aria-hidden="true">${loc(`genelab_traits_all`)}</span></template>${all_listing}<h3>${loc(`genelab_traits_summary`)}</h3><div id="allSum"></div></b-tab-item>`;
    trait_listing.append(allListing);
    genes.append(trait_listing);
    let buttons = `
        <hr>
        ${labStatus}
        <div class="importExport">
            <button class="button" @click="customImport">${loc("genelab_import")}</button>
            <input type="file" class="fileImport" id="customFile" accept=".txt">
            <button class="button right" @click="customExport">${loc("genelab_export")}</button>
        </div>
        <div class="importExport">
            <span>{{ err.msg }}</span>
        </div>
    `;
    if (!isWiki) {
      buttons += `
            <div class="create">
                <button class="button" @click="setRace()">${loc("genelab_create")}</button>
            </div>
        `;
    }
    lab.append(buttons);
    genome.genes = calcGenomeScore(genome, isWiki ? wikiVars : false);
    let error = { msg: "" };
    var modal = {
      template: '<div id="modalBox" class="modalBox"></div>'
    };
    let tRanks = genome.ranks;
    let activeTab = { t: 0 };
    vBind({
      el: "#celestialLab",
      data: {
        g: genome,
        w: wikiVars,
        err: error,
        tt: activeTab
      },
      methods: {
        val(type) {
          if (type === "technophobe") {
            if (wikiVars["technophobe"] < 0) {
              wikiVars["technophobe"] = 0;
            } else if (wikiVars["technophobe"] > 5) {
              wikiVars["technophobe"] = 5;
            }
          } else {
            if (wikiVars.ascended[type] < 0) {
              wikiVars.ascended[type] = 0;
            } else if (wikiVars.ascended[type] > 5) {
              wikiVars.ascended[type] = 5;
            }
          }
        },
        geneEdit() {
          let newRanks = genome.traitlist.map((x) => tRanks[x] ? { [x]: tRanks[x] } : { [x]: 1 });
          let ranks = {};
          newRanks.forEach(function(k) {
            Object.keys(k).forEach(function(t) {
              ranks[t] = k[t];
            });
          });
          tRanks = ranks;
          genome.genes = calcGenomeScore(genome, isWiki ? wikiVars : false, tRanks);
          if (activeTab.t === 5) {
            summaryTab(5);
          }
        },
        setRace() {
          if (genome.fanaticism && !genome.traitlist.includes(genome.fanaticism)) {
            return false;
          }
          if (calcGenomeScore(genome, false, tRanks) >= 0 && genome.name.length > 0 && genome.desc.length > 0 && genome.entity.length > 0 && genome.home.length > 0 && genome.red.length > 0 && genome.hell.length > 0 && genome.gas.length > 0 && genome.gas_moon.length > 0 && genome.dwarf.length > 0) {
            global.custom[slot] = {
              name: genome.name,
              desc: genome.desc,
              entity: genome.entity,
              home: genome.home,
              red: genome.red,
              hell: genome.hell,
              gas: genome.gas,
              gas_moon: genome.gas_moon,
              dwarf: genome.dwarf,
              titan: genome.titan,
              enceladus: genome.enceladus,
              triton: genome.triton,
              eris: genome.eris,
              genus: genome.genus,
              traits: genome.traitlist,
              fanaticism: genome.fanaticism,
              ranks: tRanks
            };
            if (hybrid) {
              global.custom[slot]["hybrid"] = genome.hybrid;
              apotheosis();
            } else {
              ascend();
            }
          }
        },
        allowed(t) {
          if (genome.traitlist.includes("catnip") && t === "anise" || genome.traitlist.includes("anise") && t === "catnip") {
            return true;
          } else if ((!["synthetic", "hybrid"].includes(genome.genus) || genome.hasOwnProperty("hybrid") && !genome.hybrid.includes("synthetic")) && ["deconstructor", "imitation"].includes(t)) {
            if (genome.traitlist.includes(t)) {
              genome.traitlist.splice(genome.traitlist.indexOf(t), 1);
            }
            return true;
          }
          return false;
        },
        reset() {
          genome.name = "";
          genome.desc = "";
          genome.entity = "";
          genome.home = "";
          genome.red = "";
          genome.hell = "";
          genome.gas = "";
          genome.gas_moon = "";
          genome.dwarf = "";
          genome.titan = "";
          genome.enceladus = "";
          genome.triton = "";
          genome.eris = "";
          genome.genus = dGenus;
          genome.traitlist = [];
          genome.ranks = {};
          genome.genes = calcGenomeScore(genome, isWiki ? wikiVars : false, tRanks);
          genome.fanaticism = false;
        },
        fanatic() {
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          var checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc(`genelab_fanatic_set`)}</p>`));
              var body = $('<div id="specialModal" class="modalBody"></div>');
              $("#modalBox").append(body);
              let traits2 = `<div class="fanatic"><template><section>`;
              genome.traitlist.forEach(function(trait) {
                if (trait !== "imitation") {
                  traits2 += `<div class="field ${trait}"><b-radio v-model="fanaticism" native-value="${trait}">${loc(`trait_${trait}_name`)}</b-radio></div>`;
                }
              });
              traits2 += `</section></template></div>`;
              body.append($(traits2));
              vBind({
                el: "#specialModal",
                data: genome
              });
            }
          }, 50);
        },
        genus(slot2) {
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          var checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc(`genelab_genus`)}</p>`));
              var body = $('<div id="specialModal" class="modalBody"></div>');
              $("#modalBox").append(body);
              let genus = `<div class="genus_selection"><template><section>`;
              Object.keys(genus_def).forEach(function(type) {
                if (type !== "hybrid") {
                  if (isWiki || global.stats.achieve[`genus_${type}`] && global.stats.achieve[`genus_${type}`].l > 0) {
                    if (genome.genus === "hybrid" && (slot2 === 0 && type !== genome.hybrid[1] || slot2 === 1 && type !== genome.hybrid[0])) {
                      genus += `<div class="field ${type}"><b-radio v-model="hybrid[${slot2}]" native-value="${type}">${loc(`genelab_genus_${type}`)}</b-radio></div>`;
                    } else if (genome.genus !== "hybrid") {
                      genus += `<div class="field ${type}"><b-radio v-model="genus" native-value="${type}">${loc(`genelab_genus_${type}`)}</b-radio></div>`;
                    }
                  }
                }
              });
              genus += `</section></template></div>`;
              body.append($(genus));
              vBind({
                el: "#specialModal",
                data: genome
              });
              Object.keys(genus_def).forEach(function(type) {
                if (isWiki || global.stats.achieve[`genus_${type}`] && global.stats.achieve[`genus_${type}`].l > 0) {
                  if (genome.genus !== "hybrid" || genome.genus === "hybrid" && slot2 === 0 && type !== genome.hybrid[1] || genome.genus === "hybrid" && slot2 === 1 && type !== genome.hybrid[0]) {
                    popover(`geneLabGenus${type}`, function() {
                      let desc = $(`<div><div>${loc(`genelab_genus_${type}_desc`)}</div></div>`);
                      Object.keys(genus_def[type].traits).forEach(function(t) {
                        if (traits[t]) {
                          let des = $(`<div></div>`);
                          let opts = {
                            trank: genus_trank,
                            wiki: isWiki
                          };
                          getTraitDesc(des, t, opts);
                          desc.append(des);
                        }
                      });
                      return desc;
                    }, {
                      elm: `#specialModal .${type}`,
                      classes: `w30`,
                      wide: true
                    });
                  }
                }
              });
            }
          }, 50);
        },
        swapTab(tab) {
          summaryTab(tab);
        },
        customImport() {
          let file = document.getElementById("customFile").files[0];
          if (file) {
            let reader = new FileReader();
            reader.readAsText(file, "UTF-8");
            reader.onload = function(evt) {
              let importCustom = "";
              try {
                importCustom = JSON.parse(evt.target.result);
              } catch {
                error.msg = loc(`string_pack_error`, [file.name]);
                return;
              }
              let formatError = false;
              Object.keys(genome).forEach(function(type) {
                if (type === "fanaticism" && genome[type] === false) {
                  return;
                }
                if (importCustom[type] && typeof genome[type] !== typeof importCustom[type]) {
                  formatError = true;
                  return;
                }
              });
              if (formatError) {
                error.msg = loc(`string_pack_error`, [file.name]);
                console.log("format fail");
                return;
              }
              Object.keys(genome).forEach(function(type) {
                if (importCustom[type]) {
                  genome[type] = importCustom[type];
                }
              });
              ["name", "home", "red", "hell", "gas", "gas_moon", "dwarf", "titan", "enceladus", "triton", "eris"].forEach(function(field) {
                if (!importCustom[field] && ["titan", "enceladus", "triton", "eris"].includes(field)) {
                  genome[field] = loc(`genus_${genome.genus}_solar_${field}`);
                } else if (genome[field].length > 20) {
                  genome[field] = genome[field].substring(0, 20);
                }
              });
              if (genome.entity.length > 40) {
                genome.entity = genome.entity.substring(0, 40);
              }
              if (genome.desc.length > 255) {
                genome.desc = genome.desc.substring(0, 255);
              }
              if (!isWiki && !(global.stats.achieve[`genus_${genome.genus}`] && global.stats.achieve[`genus_${genome.genus}`].l > 0)) {
                genome.genus = dGenus;
              }
              if (importCustom.genus !== "hybrid" && hybrid) {
                genome["hybrid"] = [importCustom.genus, importCustom.genus === "humanoid" ? "small" : "humanoid"];
                genome.genus = "hybrid";
              } else if (importCustom.genus === "hybrid" && !hybrid) {
                genome.genus = importCustom.hybrid[0];
                delete genome.hybrid;
              }
              let fixTraitlist = [];
              for (let i = 0; i < genome.traitlist.length; i++) {
                if (traits.hasOwnProperty(genome.traitlist[i]) && traits[genome.traitlist[i]].type === "major" && unlockedTraits[genome.traitlist[i]] && !fixTraitlist.includes(genome.traitlist[i])) {
                  fixTraitlist.push(genome.traitlist[i]);
                }
              }
              tRanks = importCustom.hasOwnProperty("ranks") ? importCustom.ranks : {};
              genome.ranks = {};
              genome.fanaticism = importCustom.hasOwnProperty("fanaticism") ? importCustom.fanaticism : false, genome.traitlist = fixTraitlist;
              genome.genes = calcGenomeScore(genome, isWiki ? wikiVars : false, tRanks);
              error.msg = "";
            };
            reader.onerror = function(evt) {
              console.error("error reading file");
            };
          }
        },
        customExport() {
          let exportGenome = deepClone(genome);
          exportGenome["ranks"] = tRanks;
          const downloadToFile = (content, filename, contentType) => {
            const a = document.createElement("a");
            const file = new Blob([content], { type: contentType });
            a.href = URL.createObjectURL(file);
            a.download = filename;
            a.click();
            URL.revokeObjectURL(a.href);
          };
          downloadToFile(JSON.stringify(exportGenome, null, 4), `evolve-${hybrid ? "hybrid" : "custom"}-${exportGenome.name}.txt`, "text/plain");
        }
      },
      filters: {
        cost(trait) {
          return geneCost(genome, trait, tRanks);
        },
        untapped(genes2) {
          if (!genome.traitlist.includes(genome.fanaticism)) {
            genome.fanaticism = false;
          }
          let num = genes2 > 0 ? +((genes2 / (genes2 + 20) / 10 + 24e-5) * 100).toFixed(3) : 0;
          return `+${num}%`;
        },
        fanaticism(trait) {
          return trait ? loc(`trait_${trait}_name`) : loc(`genelab_unset`);
        },
        genus(g, i) {
          return typeof i === "undefined" ? loc(`genelab_genus_${g}`) : loc(`genelab_genus_${g[i]}`);
        },
        empower(e, t) {
          let valid_empower = traits[t].val >= traits.empowered.vars(tRanks["empowered"] || 1)[0] && traits[t].val <= traits.empowered.vars(tRanks["empowered"] || 1)[1] && !["empowered", "catnip", "anise"].includes(t) && genome.traitlist.includes("empowered");
          return valid_empower ? `, <span class="has-text-caution">E</span>` : ``;
        }
      }
    });
    let genus_trank = global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 4 ? 2 : 1;
    if (hybrid) {
      ["A", "B"].forEach(function(g) {
        popover(`geneLabGenus${g}`, function() {
          let type = genome.hybrid[g === "A" ? 0 : 1];
          let desc = $(`<div><div>${loc(`genelab_genus_${type}_desc`)}</div></div>`);
          Object.keys(genus_def[type].traits).forEach(function(t) {
            if (traits[t]) {
              let des = $(`<div></div>`);
              let opts = {
                trank: genus_trank,
                wiki: isWiki
              };
              getTraitDesc(des, t, opts);
              desc.append(des);
            }
          });
          return desc;
        }, {
          elm: `#geneLabGenus${g}`,
          classes: `w30`,
          wide: true
        });
      });
    } else {
      popover(`geneLabGenus`, function() {
        let type = genome.genus;
        let desc = $(`<div><div>${loc(`genelab_genus_${type}_desc`)}</div></div>`);
        Object.keys(genus_def[type].traits).forEach(function(t) {
          if (traits[t]) {
            let des = $(`<div></div>`);
            let opts = {
              trank: genus_trank,
              wiki: isWiki
            };
            getTraitDesc(des, t, opts);
            desc.append(des);
          }
        });
        return desc;
      }, {
        elm: `#geneLabGenus`,
        classes: `w30`,
        wide: true
      });
    }
    Object.keys(unlockedTraits).sort().forEach(function(trait) {
      if (traits.hasOwnProperty(trait) && traits[trait].type === "major") {
        ["cool", "lame"].forEach(function(s) {
          popover(`celestialLabtraitSelection${trait}`, function() {
            let desc = $(`<div></div>`);
            let opts = {
              trank: tRanks[trait] || 1,
              wiki: isWiki
            };
            getTraitDesc(desc, trait, opts);
            return desc;
          }, {
            elm: `#celestialLab .${s}.trait_selection .t${trait}`,
            classes: `w30`,
            wide: true
          });
        });
      }
    });
    function summaryTab(tab) {
      if (tab === 4 || tab == 5) {
        let container = tab === 4 ? $(`#traitSummary`) : $(`#allSum`);
        clearElement(container);
        let negative_sum = "";
        let summary2 = `<div class="trait_selection summary">`;
        genome.traitlist.sort().forEach(function(trait) {
          if (traits.hasOwnProperty(trait) && traits[trait].type === "major") {
            if (traits[trait].val >= 0) {
              summary2 += `<div class="field t${trait}">`;
              summary2 += `<b-checkbox :input="geneEdit()" v-model="g.traitlist" native-value="${trait}"><span class="has-text-success">${loc(`trait_${trait}_name`)}</span></b-checkbox>`;
              summary2 += `<span>[<span class="rc"><span class="has-text-warning">${loc(`wiki_calc_cost`)}</span> <span>{{ '${trait}' | cost }}</span>, <span class="has-text-warning">${loc(`genelab_rank`)}</span> <span>{{ '${trait}' | tRank }}</span>`;
              summary2 += `<span v-html="$options.filters.empower(t.empowered,'${trait}')"></span></span>]`;
              summary2 += `<span role="button" aria-label="${loc(`genelab_rank_lower`, [loc(`trait_${trait}_name`)])}" class="sub has-text-danger" @click="reduce('${trait}')"><span>-</span></span>`;
              summary2 += `<span role="button" aria-label="${loc(`genelab_rank_higher`, [loc(`trait_${trait}_name`)])}" class="add has-text-success" @click="increase('${trait}')"><span>+</span></span>`;
              summary2 += `</span></div>`;
            } else {
              negative_sum += `<div class="field t${trait}">`;
              negative_sum += `<b-checkbox :input="geneEdit()" v-model="g.traitlist" native-value="${trait}"><span class="has-text-danger">${loc(`trait_${trait}_name`)}</span></b-checkbox>`;
              negative_sum += `<span>[<span class="rc"><span class="has-text-warning">${loc(`wiki_calc_cost`)}</span> <span>{{ '${trait}' | cost }}</span>, <span class="has-text-warning">${loc(`genelab_rank`)}</span> <span>{{ '${trait}' | tRank }}</span>`;
              negative_sum += `<span v-html="$options.filters.empower(t.empowered,'${trait}')"></span></span>]`;
              negative_sum += `<span role="button" aria-label="${loc(`genelab_rank_lower`, [loc(`trait_${trait}_name`)])}" class="sub has-text-danger" @click="reduce('${trait}')"><span>-</span></span>`;
              negative_sum += `<span role="button" aria-label="${loc(`genelab_rank_higher`, [loc(`trait_${trait}_name`)])}" class="add has-text-success" @click="increase('${trait}')"><span>+</span></span>`;
              negative_sum += `</span></div>`;
            }
          }
        });
        summary2 += negative_sum + `</div>`;
        container.append(summary2);
        vBind({
          el: tab === 4 ? "#traitSummary .trait_selection" : "#allSum .trait_selection",
          data: {
            g: genome,
            t: tRanks
          },
          methods: {
            geneEdit() {
              let newRanks = genome.traitlist.map((x) => tRanks[x] ? { [x]: tRanks[x] } : { [x]: 1 });
              let ranks = {};
              newRanks.forEach(function(k) {
                Object.keys(k).forEach(function(t) {
                  ranks[t] = k[t];
                });
              });
              tRanks = ranks;
              genome.genes = calcGenomeScore(genome, isWiki ? wikiVars : false, tRanks);
            },
            reduce(t) {
              let unlock = global.stats.achieve[`extinct_${traits[t].origin}`] && global.stats.achieve[`extinct_${traits[t].origin}`].l || 0;
              switch (tRanks[t]) {
                case 0.25:
                  if (unlock >= 5) {
                    tRanks[t] = 0.1;
                  }
                  break;
                case 0.5:
                  if (unlock >= 4) {
                    tRanks[t] = 0.25;
                  }
                  break;
                case 1:
                  if (unlock >= 3) {
                    tRanks[t] = 0.5;
                  }
                  break;
                case 2:
                  tRanks[t] = 1;
                  break;
                case 3:
                  tRanks[t] = 2;
                  break;
                case 4:
                  tRanks[t] = 3;
                  break;
              }
              if (tab === 4) {
                vBind({ el: `#traitSummary .trait_selection` }, "update");
              } else {
                vBind({ el: `#allSum .trait_selection` }, "update");
              }
              let desc = $(`#traitLabActiveDesc`);
              clearElement(desc);
              let opts = {
                trank: tRanks[t] || 1,
                wiki: isWiki
              };
              getTraitDesc(desc, t, opts);
            },
            increase(t) {
              let unlock = global.stats.achieve[`extinct_${traits[t].origin}`] && global.stats.achieve[`extinct_${traits[t].origin}`].l || 0;
              switch (tRanks[t]) {
                case 0.1:
                  tRanks[t] = 0.25;
                  break;
                case 0.25:
                  tRanks[t] = 0.5;
                  break;
                case 0.5:
                  tRanks[t] = 1;
                  break;
                case 1:
                  if (unlock >= 3) {
                    tRanks[t] = 2;
                  }
                  break;
                case 2:
                  if (unlock >= 4) {
                    tRanks[t] = 3;
                  }
                  break;
                case 3:
                  if (unlock >= 5) {
                    tRanks[t] = 4;
                  }
                  break;
              }
              if (tab === 4) {
                vBind({ el: `#traitSummary .trait_selection` }, "update");
              } else {
                vBind({ el: `#allSum .trait_selection` }, "update");
              }
              let desc = $(`#traitLabActiveDesc`);
              clearElement(desc);
              let opts = {
                trank: tRanks[t] || 1,
                wiki: isWiki
              };
              getTraitDesc(desc, t, opts);
            }
          },
          filters: {
            cost(trait) {
              return geneCost(genome, trait, tRanks);
            },
            tRank(trait) {
              return tRanks[trait];
            },
            empower(e, t) {
              let valid_empower = traits[t].val >= traits.empowered.vars(tRanks["empowered"] || 1)[0] && traits[t].val <= traits.empowered.vars(tRanks["empowered"] || 1)[1] && !["empowered", "catnip", "anise"].includes(t) && genome.traitlist.includes("empowered");
              return valid_empower ? `, <span class="has-text-caution">E</span>` : ``;
            }
          }
        });
        let popAnchor = tab === 4 ? "#traitSummary" : "#allSum";
        genome.traitlist.sort().forEach(function(trait) {
          if (traits.hasOwnProperty(trait) && traits[trait].type === "major") {
            popover(`celestialLabtraitSelection${trait}Sum`, function() {
              let desc = $(`<div id="traitLabActiveDesc"></div>`);
              let opts = {
                trank: tRanks[trait] || 1,
                wiki: isWiki
              };
              getTraitDesc(desc, trait, opts);
              return desc;
            }, {
              elm: `${popAnchor} .summary .t${trait}`,
              classes: `w30`,
              wide: true
            });
          }
        });
      }
    }
  }
  function geneCost(genome, trait, tRanks) {
    let max_complexity = 1;
    let active_genus = genome.genus === "hybrid" ? genome.hybrid : [genome.genus];
    let oppose_genus = [];
    active_genus.forEach(function(g) {
      oppose_genus = oppose_genus.concat(genus_def[g].oppose);
    });
    let taxonomy = traits[trait].taxonomy;
    let gene_cost = traits[trait].val;
    let complexity = { utility: 0, resource: 0, production: 0, combat: 0 };
    let neg_complexity = { utility: 0, resource: 0, production: 0, combat: 0 };
    for (let i = 0; i < genome.traitlist.length; i++) {
      if (traits[genome.traitlist[i]].val >= 0) {
        complexity[traits[genome.traitlist[i]].taxonomy]++;
      } else {
        neg_complexity[traits[genome.traitlist[i]].taxonomy]++;
      }
    }
    if (traits[trait].val >= 0) {
      if (genome.traitlist.includes(trait)) {
        complexity[taxonomy]--;
      }
      if (complexity[taxonomy] > max_complexity) {
        gene_cost += complexity[taxonomy] - max_complexity;
      }
    } else {
      if (genome.traitlist.includes(trait)) {
        neg_complexity[taxonomy]--;
      }
      if (neg_complexity[taxonomy] >= max_complexity) {
        gene_cost += neg_complexity[taxonomy];
      }
    }
    if (tRanks[trait] && tRanks[trait] !== 1) {
      if (traits[trait].val >= 0) {
        switch (tRanks[trait]) {
          case 0.1:
            gene_cost -= 3;
            break;
          case 0.25:
            gene_cost -= 2;
            break;
          case 0.5:
            gene_cost--;
            break;
          case 2:
            gene_cost = Math.max(Math.round(gene_cost * 1.5), gene_cost + 1);
            break;
          case 3:
            gene_cost = Math.max(Math.round(gene_cost * 2), gene_cost + 2);
            break;
          case 4:
            gene_cost = Math.max(Math.round(gene_cost * 2.5), gene_cost + 3);
            break;
        }
        if (gene_cost < 1) {
          gene_cost = 1;
        }
      } else {
        switch (tRanks[trait]) {
          case 0.1:
            gene_cost -= 3;
            break;
          case 0.25:
            gene_cost -= 2;
            break;
          case 0.5:
            gene_cost--;
            break;
          case 2:
            gene_cost++;
            break;
          case 3:
            gene_cost += 2;
            break;
          case 4:
            gene_cost += 3;
            break;
        }
      }
    }
    let genus_origin = races[traits[trait].origin].type === "hybrid" ? races[traits[trait].origin].hybrid : [races[traits[trait].origin].type];
    if (active_genus.filter((x) => genus_origin.includes(x)).length > 0) {
      active_genus.filter((x) => genus_origin.includes(x)).length === 1 ? gene_cost-- : gene_cost -= 2;
    }
    if (oppose_genus.filter((x) => genus_origin.includes(x)).length > 0) {
      oppose_genus.filter((x) => genus_origin.includes(x)).length === 1 ? gene_cost++ : gene_cost += 2;
    }
    return gene_cost;
  }
  function terraformLab(wiki) {
    if (!wiki && !global.race["noexport"]) {
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      if (!global["sim"]) {
        save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
      }
      let genusType = races[global.race.species].type === "hybrid" ? global.race.maintype : races[global.race.species].type;
      unlockAchieve(`biome_${global.city.biome}`);
      unlockAchieve(`genus_${genusType}`);
      unlockAchieve(`lamentis`);
      if (global.race.species === "junker") {
        unlockFeat("the_misery");
      }
      global.race["noexport"] = `Planet`;
      clearElement($(`#city`));
      global.settings.showCity = true;
      global.settings.showCivic = false;
      global.settings.showResearch = false;
      global.settings.showResources = false;
      global.settings.showGenetics = false;
      global.settings.showSpace = false;
      global.settings.showDeep = false;
      global.settings.showGalactic = false;
      global.settings.showPortal = false;
      global.settings.spaceTabs = 0;
    }
    let lab = $(`<div id="celestialLab" class="celestialLab"></div>`);
    let wikiVars = {
      ascended: {},
      lamentis: global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l ? global.stats.achieve.lamentis.l : 0
    };
    if (wiki) {
      wiki.append(lab);
    } else {
      $(`#city`).append(lab);
    }
    lab.append(`<div><h3 class="has-text-danger">${loc("planetlab_title")}</h3> - <span class="has-text-warning">${loc("planetlab_points")} {{ p.pts }}</span></div>`);
    let pBiome = $(`<div class="sequence"></div>`);
    lab.append(pBiome);
    let dBiome = false;
    let biome = `<div class="genus_selection"><div class="has-text-caution">${loc("wiki_planet_biome")}</div><template><section>`;
    Object.keys(biomes).forEach(function(type) {
      if (wiki || global.stats.achieve[`biome_${type}`] && global.stats.achieve[`biome_${type}`].l > 0) {
        if (!dBiome) {
          dBiome = type;
        }
        biome = biome + `<div class="field ${type}"><b-radio v-model="p.biome" native-value="${type}">${biomes[type].label}</b-radio></div>`;
      }
    });
    biome = biome + `</section></template></div>`;
    pBiome.append($(biome));
    let trait_list = `<div class="planet_selection"><div class="has-text-warning">${loc("wiki_planet_trait")}</div><template><section>`;
    Object.keys(planetTraits).forEach(function(trait) {
      if (wiki || global.stats.achieve[`atmo_${trait}`] && global.stats.achieve[`atmo_${trait}`].l > 0) {
        trait_list = trait_list + `<div class="field t${trait}"><b-checkbox :input="pEdit()" v-model="p.traitlist" native-value="${trait}"><span class="has-text-success">${planetTraits[trait].label}</span></b-checkbox></div>`;
      }
    });
    trait_list = trait_list + `</section></template></div>`;
    pBiome.append($(trait_list));
    let geology = {};
    let geoList = ["Copper", "Iron", "Aluminium", "Coal", "Oil", "Titanium", "Uranium"];
    if (global.stats.achieve["whitehole"]) {
      geoList.push("Iridium");
    }
    let geo_list = `<div class="res_selection"><div class="has-text-warning">${loc("planetlab_res")}</div><template><section>`;
    geoList.forEach(function(res) {
      geology[res] = 0;
      geo_list += `<div class="field t${res}"><div>${global.resource[res].name}</div><div>`;
      geo_list += `<span role="button" aria-label="export ${res}" class="sub has-text-danger" @click="less('${res}')"><span>-</span></span>`;
      geo_list += `<span class="current" v-html="$options.filters.res('${res}')"></span>`;
      geo_list += `<span role="button" aria-label="import ${res}" class="add has-text-success" @click="more('${res}')"><span>+</span></span>`;
      geo_list += `</div></div>`;
    });
    geo_list = geo_list + `</section></template></div>`;
    pBiome.append($(geo_list));
    let planet = {
      biome: dBiome,
      pts: 0,
      traitlist: [],
      geology,
      orbit: global.city.calendar.orbit
    };
    if (global.custom.hasOwnProperty("planet")) {
      let uni = universeAffix();
      if (global.custom.planet.hasOwnProperty(uni)) {
        let type = "s";
        if (global.custom.planet[uni][type]) {
          planet = deepClone(global.custom.planet[uni][type]);
          planet.orbit = global.city.calendar.orbit;
          geoList.forEach(function(res) {
            if (planet.geology.hasOwnProperty(res)) {
              planet.geology[res] *= 100;
            } else {
              planet.geology[res] = 0;
            }
          });
        }
      }
    }
    planet.pts = terraformScore(planet, wiki ? wikiVars : false);
    let buttons = `<div class="buttons">
        <div class="reset">
            <button class="button" @click="reset()">${loc("genelab_reset")}</button>
        </div>
    `;
    if (!wiki) {
      buttons += `
            <div class="create">
                <button class="button" @click="setPlanet()">${loc("planetlab_create")}</button>
            </div>
        `;
    }
    buttons += `</div>`;
    lab.append(buttons);
    vBind({
      el: "#celestialLab",
      data: {
        p: planet,
        w: wikiVars
      },
      methods: {
        pEdit() {
          planet.pts = terraformScore(planet, wiki ? wikiVars : false);
        },
        setPlanet() {
          if (terraformScore(planet) >= 0) {
            Object.keys(planet.geology).forEach(function(res) {
              if (planet.geology[res] === 0) {
                delete planet.geology[res];
              } else {
                planet.geology[res] /= 100;
              }
            });
            if (!global.custom.hasOwnProperty("planet")) {
              global.custom["planet"] = {};
            }
            let universe = universeAffix();
            if (!global.custom.planet.hasOwnProperty(universe)) {
              global.custom.planet[universe] = { s: false };
            }
            let type = "s";
            global.custom.planet[universe][type] = deepClone(planet);
            delete global.custom.planet[universe][type].pts;
            terraform(planet);
          }
        },
        reset() {
          planet.traitlist = [];
          Object.keys(planet.geology).forEach(function(res) {
            planet.geology[res] = 0;
          });
          planet.pts = terraformScore(planet, wiki ? wikiVars : false);
        },
        less(r) {
          planet.geology[r] -= keyMultiplier();
          if (planet.geology[r] < -20) {
            planet.geology[r] = -20;
          }
        },
        more(r) {
          planet.geology[r] += keyMultiplier();
          let max = 30;
          if (global.stats.achieve["whitehole"]) {
            max += global.stats.achieve["whitehole"].l * 5;
          }
          if (planet.biome === "eden") {
            max += 5;
          }
          if (planet.geology[r] > max) {
            planet.geology[r] = max;
          }
        }
      },
      filters: {
        res(r) {
          return planet.geology[r];
        }
      }
    });
  }
  function terraformScore(planet, wiki) {
    let pts = (planet.biome === "eden" ? 0 : 10) + (global.stats.achieve["lamentis"] ? global.stats.achieve.lamentis.l * 10 : 0);
    if (global.race["truepath"]) {
      pts *= 2;
    }
    pts -= planet.traitlist.length ** 3;
    let ts = 0;
    Object.keys(planet.geology).forEach(function(res) {
      if (planet.geology[res] !== 0) {
        pts -= planet.geology[res];
        ts++;
      }
    });
    if (ts > 3) {
      pts -= (ts - 3) ** 2;
    }
    return pts;
  }
  function isStargateOn(wiki) {
    if (wiki) {
      if (global.interstellar?.s_gate?.count) {
        return Boolean(global.interstellar.s_gate.on);
      }
      return true;
    }
    return Boolean(p_on["s_gate"]);
  }

  // src/portal.js
  var fortressModules = {
    prtl_fortress: {
      info: {
        name: loc("portal_fortress_name"),
        desc: loc("portal_fortress_desc"),
        repair() {
          let repair = 200;
          if (p_on["repair_droid"]) {
            repair *= 0.95 ** p_on["repair_droid"];
          }
          return Math.round(repair);
        }
      },
      turret: {
        id: "portal-turret",
        title() {
          let type = global.tech["turret"] ? global.tech["turret"] >= 2 ? "portal_turret_title3" : "portal_turret_title2" : "portal_turret_title1";
          return loc(type);
        },
        desc() {
          let type = global.tech["turret"] ? global.tech["turret"] >= 2 ? "portal_turret_title3" : "portal_turret_title2" : "portal_turret_title1";
          return `<div>${loc(type)}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { portal: 2 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("turret", offset, 35e4, 1.28, "portal");
          },
          Copper(offset) {
            return spaceCostMultiplier("turret", offset, 5e4, 1.28, "portal");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("turret", offset, 8e3, 1.28, "portal");
          },
          Elerium(offset) {
            return spaceCostMultiplier("turret", offset, 15, 1.28, "portal");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("turret", offset, 28e3, 1.28, "portal");
          }
        },
        powered() {
          return powerCostMod(global.tech["turret"] ? 4 + global.tech["turret"] : 4);
        },
        postPower(o) {
          p_on["turret"] = global.portal.turret.on;
          vBind({ el: `#fort` }, "update");
        },
        effect() {
          let rating = global.tech["turret"] ? global.tech["turret"] >= 2 ? 70 : 50 : 35;
          let power = $(this)[0].powered();
          return `<div>${loc("portal_turret_effect", [rating])}</div><div class="has-text-caution">${loc("minus_power", [power])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("turret", "portal");
            if (powerOnNewStruct($(this)[0])) {
              p_on["turret"]++;
              vBind({ el: `#fort` }, "update");
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["turret", "portal"]
          };
        }
      },
      carport: {
        id: "portal-carport",
        title: loc("portal_carport_title"),
        desc() {
          return loc("portal_carport_desc", [jobScale(1)]);
        },
        reqs: { portal: 2 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("carport", offset, 25e4, 1.3, "portal");
          },
          Cement(offset) {
            return spaceCostMultiplier("carport", offset, 18e3, 1.3, "portal");
          },
          Oil(offset) {
            return spaceCostMultiplier("carport", offset, 6500, 1.3, "portal");
          },
          Plywood(offset) {
            return spaceCostMultiplier("carport", offset, 8500, 1.3, "portal");
          }
        },
        repair() {
          let repair = 180;
          if (p_on["repair_droid"]) {
            repair *= 0.92 ** p_on["repair_droid"];
          }
          if (global.race["high_pop"]) {
            repair /= traits.high_pop.vars()[2];
          }
          return Math.round(repair);
        },
        effect() {
          return `${loc("portal_carport_effect", [jobScale(1)])}`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("carport", "portal");
            global.civic.hell_surveyor.display = true;
            global.civic.hell_surveyor.max += jobScale(1);
            global.resource.Infernite.display = true;
            if (!global.tech["infernite"]) {
              global.tech["infernite"] = 1;
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, damaged: 0, repair: 0 },
            p: ["carport", "portal"]
          };
        }
      },
      war_droid: {
        id: "portal-war_droid",
        title: loc("portal_war_droid_title"),
        desc() {
          return `<div>${loc("portal_war_droid_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { portal: 5 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("war_droid", offset, 495e3, 1.26, "portal");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("war_droid", offset, 1250, 1.26, "portal");
          },
          Elerium(offset) {
            return spaceCostMultiplier("war_droid", offset, 18, 1.26, "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("war_droid", offset, 37500, 1.26, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("war_droid", offset, 1, 1.26, "portal");
          }
        },
        powered() {
          return powerCostMod(2);
        },
        effect() {
          return `<div>${loc("portal_war_droid_effect")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("war_droid", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["war_droid", "portal"]
          };
        },
        flair: loc("portal_war_droid_flair")
      },
      repair_droid: {
        id: "portal-repair_droid",
        title: loc("portal_repair_droid_title"),
        desc() {
          return `<div>${loc("portal_repair_droid_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { portal: 6 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("repair_droid", offset, 444e3, 1.26, "portal");
          },
          Iron(offset) {
            return spaceCostMultiplier("repair_droid", offset, 88e3, 1.26, "portal");
          },
          Iridium(offset) {
            return spaceCostMultiplier("repair_droid", offset, 17616, 1.26, "portal");
          },
          Infernite(offset) {
            return spaceCostMultiplier("repair_droid", offset, 666, 1.26, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("repair_droid", offset, 1, 1.15, "portal");
          }
        },
        powered() {
          return powerCostMod(3);
        },
        effect() {
          return `<div>${loc("portal_repair_droid_effect", [5])}</div><div>${loc("portal_repair_droid_effect2", [8])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("repair_droid", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["repair_droid", "portal"]
          };
        },
        flair: loc("portal_repair_droid_flair")
      }
    },
    prtl_badlands: {
      info: {
        name: loc("portal_badlands_name"),
        desc: loc("portal_badlands_desc"),
        support: "minions",
        hide_support: true,
        prop() {
          let desc = "";
          if (global.portal["minions"] && global.portal.minions.count > 0) {
            desc = ` <span class="has-text-danger">${loc("portal_minions_bd")}:</span> <span class="has-text-caution">{{ spawns | approx }}</span>`;
          }
          return desc;
        },
        filter(v, type) {
          switch (type) {
            case "approx":
              return sizeApproximation(v);
          }
        }
      },
      war_drone: {
        id: "portal-war_drone",
        title: loc("portal_war_drone_title"),
        desc() {
          return `<div>${loc("portal_war_drone_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { portal: 3 },
        not_trait: ["warlord"],
        powered() {
          return powerCostMod(5);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("war_drone", offset, 65e4, 1.28, "portal");
          },
          Alloy(offset) {
            return spaceCostMultiplier("war_drone", offset, 6e4, 1.28, "portal");
          },
          Graphene(offset) {
            return spaceCostMultiplier("war_drone", offset, 1e5, 1.28, "portal");
          },
          Elerium(offset) {
            return spaceCostMultiplier("war_drone", offset, 25, 1.28, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("war_drone", offset, 1, 1.28, "portal");
          }
        },
        effect() {
          return `<div>${loc("portal_war_drone_effect")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("war_drone", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["war_drone", "portal"]
          };
        },
        flair: loc("portal_war_drone_flair")
      },
      sensor_drone: {
        id: "portal-sensor_drone",
        title: loc("portal_sensor_drone_title"),
        desc() {
          return `<div>${loc("portal_sensor_drone_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { infernite: 2 },
        not_trait: ["warlord"],
        powered() {
          return powerCostMod(3);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("sensor_drone", offset, 5e5, 1.25, "portal");
          },
          Polymer(offset) {
            return spaceCostMultiplier("sensor_drone", offset, 25e3, 1.25, "portal");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("sensor_drone", offset, 12500, 1.25, "portal");
          },
          Infernite(offset) {
            return spaceCostMultiplier("sensor_drone", offset, 100, 1.25, "portal");
          }
        },
        effect() {
          let bonus = global.tech.infernite >= 4 ? global.tech.infernite >= 6 ? 50 : 20 : 10;
          let know = global.tech.infernite >= 6 ? 2500 : 1e3;
          let sci_bonus = global.race["cataclysm"] ? `<div>${loc("space_moon_observatory_cata_effect", [2])}</div>` : `<div>${loc("space_moon_observatory_effect", [2])}</div><div>${loc("portal_sensor_drone_effect2", [2])}</div>`;
          let sci = global.tech["science"] >= 14 ? `<div>${loc("city_max_knowledge", [know])}</div>${sci_bonus}` : "";
          return `<div>${loc("portal_sensor_drone_effect", [bonus])}</div>${sci}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("sensor_drone", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["sensor_drone", "portal"]
          };
        }
      },
      attractor: {
        id: "portal-attractor",
        title: loc("portal_attractor_title"),
        desc() {
          return `<div>${loc("portal_attractor_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { portal: 4 },
        not_trait: ["warlord"],
        powered() {
          return powerCostMod(3);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("attractor", offset, 35e4, 1.25, "portal");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("attractor", offset, 175e3, 1.25, "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("attractor", offset, 9e4, 1.25, "portal");
          }
        },
        effect() {
          return `<div>${loc("portal_attractor_effect1")}</div><div>${loc("portal_attractor_effect2", [global.resource.Soul_Gem.name])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("attractor", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["attractor", "portal"]
          };
        }
      },
      minions: {
        id: "portal-minions",
        title: loc("portal_minions_title"),
        desc() {
          return rankDesc(loc("portal_minions_title"), "minions");
        },
        reqs: { hellspawn: 3 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("minions", offset, 15e4, 1.22, "portal");
          },
          Furs(offset) {
            return spaceCostMultiplier("minions", offset, 35e3, 1.22, "portal");
          },
          Infernite(offset) {
            return spaceCostMultiplier("minions", offset, 500, 1.22, "portal");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("minions", offset, 25e3, 1.22, "portal");
          }
        },
        powered() {
          return 0;
        },
        effect() {
          let troops = $(this)[0].soldiers();
          let low_troops = troops - 10;
          if (global.race["infectious"]) {
            troops += traits.infectious.vars()[1];
            low_troops += traits.infectious.vars()[0];
          }
          let desc = `<div>${loc("portal_minions_effect", [low_troops, troops])}</div>`;
          desc += `<div>${loc("plus_max_resource", [1, global.resource.Authority.name])}</div>`;
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.minions.rank < 5) {
            global.portal.throne.points--;
            global.portal.minions.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("minions", "portal");
            global.portal.minions.on++;
            if (global.portal.minions.count === 1) {
              renderFortress();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, spawns: 0, rank: 1 },
            p: ["minions", "portal"]
          };
        },
        soldiers() {
          let absorb = global.race?.absorbed?.length || 1;
          return 20 + absorb + (global.portal.minions?.rank || 1);
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.minions?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair() {
          return loc("portal_minions_flair");
        }
      },
      reaper: {
        id: "portal-reaper",
        title: loc("portal_reaper_title"),
        desc() {
          return rankDesc(loc("portal_reaper_title"), "reaper");
        },
        reqs: { hellspawn: 4 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("reaper", offset, 12e5, 1.2, "portal");
          },
          Furs(offset) {
            return spaceCostMultiplier("reaper", offset, 118e3, 1.2, "portal");
          },
          Iron(offset) {
            return spaceCostMultiplier("reaper", offset, 34e4, 1.2, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("reaper", offset, 1, 1.1, "portal");
          }
        },
        effect() {
          let desc = `<div>${loc("portal_reaper_effect")}</div>`;
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.reaper.rank < 5) {
            global.portal.throne.points--;
            global.portal.reaper.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("reaper", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["reaper", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.reaper?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      corpse_pile: {
        id: "portal-corpse_pile",
        title: loc("portal_corpse_pile_title"),
        desc() {
          return rankDesc(loc("portal_corpse_pile_desc"), "corpse_pile");
        },
        reqs: { hellspawn: 7 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("corpse_pile", offset, 25e5, 1.25, "portal");
          },
          Lumber(offset) {
            return spaceCostMultiplier("corpse_pile", offset, 242e4, 1.25, "portal");
          },
          Furs(offset) {
            return spaceCostMultiplier("corpse_pile", offset, 1563e3, 1.25, "portal");
          }
        },
        effect() {
          let power = 0.75 + (global.portal?.corpse_pile?.rank || 1) * 0.25;
          let desc = `<div>${loc("portal_corpse_pile_effect", [power, loc("portal_incinerator_title")])}</div>`;
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.corpse_pile.rank < 5) {
            global.portal.throne.points--;
            global.portal.corpse_pile.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("corpse_pile", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["corpse_pile", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.corpse_pile?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      mortuary: {
        id: "portal-mortuary",
        title: loc("portal_mortuary_title"),
        desc() {
          return `<div>${loc("portal_mortuary_desc", [loc("portal_corpse_pile_title")])}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hellspawn: 9 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mortuary", offset, 1010101010, 1.25, "portal");
          },
          Alloy(offset) {
            return spaceCostMultiplier("mortuary", offset, 56565656, 1.25, "portal");
          },
          Scarletite(offset) {
            return spaceCostMultiplier("mortuary", offset, 4545450, 1.25, "portal");
          }
        },
        powered() {
          return powerCostMod(10);
        },
        effect() {
          let omniscience = (global.portal?.corpse_pile?.count || 0) * 2;
          let desc = `<div>${loc(`eden_ascension_machine_effect1`, [loc(`eden_encampment_title`), +omniscience.toFixed(0), global.resource.Omniscience.name])}</div>`;
          let ghost = (global.portal?.corpse_pile?.count || 0) / 8;
          desc += `<div>${loc(`eden_ascension_machine_effect2`, [loc(`job_ghost_trapper`), +ghost.toFixed(2)])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mortuary", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["mortuary", "portal"]
          };
        }
      },
      codex: {
        id: "portal-codex",
        title: loc("portal_codex_title"),
        desc: loc("portal_codex_title"),
        reqs: { war_vault: 1 },
        trait: ["warlord"],
        condition() {
          return global.portal?.codex?.count === 0 ? true : false;
        },
        wiki: global.race["warlord"] ? true : false,
        queue_complete() {
          if (global.portal.codex.s >= 10 && global.portal.minions.spawns >= 2500) {
            return 1 - global.portal.codex.count;
          } else {
            return 0;
          }
        },
        cost: {
          Money(o) {
            return 1e8;
          },
          Furs(o) {
            return 35e6;
          }
        },
        effect() {
          let desc = `<div>${loc("portal_codex_effect", [])}</div>`;
          desc += `<div class="has-text-${global.resource.Money.amount >= $(this)[0].cost.Money() ? "success" : "danger"}">${loc("portal_codex_money", [sizeApproximation(global.resource.Money.amount), sizeApproximation($(this)[0].cost.Money())])}</div>`;
          desc += `<div class="has-text-${global.resource.Furs.amount >= $(this)[0].cost.Furs() ? "success" : "danger"}">${loc("portal_codex_res", [sizeApproximation(global.resource.Furs.amount), sizeApproximation($(this)[0].cost.Furs()), global.resource.Furs.name])}</div>`;
          desc += `<div class="has-text-${global.portal.minions?.spawns >= 3e3 ? "success" : "danger"}">${loc("portal_codex_res", [global.portal.minions?.spawns || 0, 3e3, loc("portal_codex_demon")])}</div>`;
          desc += `<div class="has-text-${global.portal.codex?.s >= 10 ? "success" : "danger"}">${loc("portal_codex_res", [global.portal.codex?.s || 0, 10, loc("portal_codex_sac")])}</div>`;
          return desc;
        },
        action(args) {
          if (global.portal.minions.spawns >= 3e3 && global.portal.codex.s >= 10 && global.portal.codex.count === 0 && payCosts($(this)[0])) {
            global.portal.minions.spawns -= 3e3;
            global.resource.Codex.amount = 1;
            global.resource.Codex.display = true;
            global.tech["scarletite"] = 1;
            global.tech["hell_ruins"] = 4;
            global.resource.Scarletite.display = true;
            initStruct(actions.portal.prtl_ruins.hell_forge);
            if (global.race.universe !== "micro" && !global.pillars[global.race.species]) {
              global.tech["fusable"] = 1;
            } else {
              if (global.race.universe !== "micro") {
                let rank = alevel();
                if (rank > global.pillars[global.race.species]) {
                  global.pillars[global.race.species] = rank;
                }
              }
              global.tech["pillars"] = 2;
            }
            incrementStruct("codex", "portal");
            loadFoundry();
            drawTech();
            renderFortress();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, s: 0 },
            p: ["codex", "portal"]
          };
        }
      }
    },
    prtl_wasteland: {
      info: {
        name: loc("portal_wasteland_name"),
        desc: loc("portal_wasteland_desc")
      },
      throne: {
        id: "portal-throne",
        title: loc("portal_throne_of_evil_title"),
        desc: loc("portal_throne_of_evil_desc"),
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {},
        queue_complete() {
          return 0;
        },
        wide: true,
        class: "w30",
        effect(wiki) {
          let knowCap = (global.race?.absorbed?.length || 1) * 5e5;
          if (shrineBonusActive()) {
            let shrineBonus = getShrineBonus("know");
            knowCap *= shrineBonus.mult;
          }
          let desc = `<div>${loc("plus_max_resource", [sizeApproximation(knowCap), global.resource.Knowledge.name])}</div>`;
          let muckVal2 = govActive("muckraker", 2);
          let know = muckVal2 ? 5 - muckVal2 : 5;
          if (global.race["autoignition"]) {
            know -= traits.autoignition.vars()[0];
            if (know < 0) {
              know = 0;
            }
          }
          desc += `<div>${loc("city_library_effect", [Math.round((global.race?.absorbed?.length || 1) * 10 * know)])}</div>`;
          desc += `<div>${loc("plus_res_duo", [500, global.resource.Crates.name, global.resource.Containers.name])}</div>`;
          desc += `<div>${loc("plus_max_resource", [global.race?.absorbed?.length || 1, global.resource.Authority.name])}</div>`;
          if (global.race["absorbed"]) {
            let essense = global.race.absorbed.map((r) => races[r].name).join(", ");
            desc += `<div>${loc("portal_throne_of_evil_effect", [essense])}</div>`;
          }
          if (global.portal["throne"] && global.portal.throne.hearts.length > 0) {
            let hearts = global.portal.throne.hearts.map((r) => races[r].name).join(", ");
            desc += `<div class="has-text-success">${loc("portal_throne_of_evil_capture", [hearts])}</div>`;
            desc += `<div class="has-text-danger">${loc("portal_throne_of_evil_capture2", [races[global.portal.throne.hearts[0]].name])}</div>`;
          } else if (global.portal.throne.points > 0 && checkSkillPointAssignments() > 0) {
            if (global.portal.throne.skill) {
              desc += `<div class="has-text-info">${loc("portal_throne_of_evil_skill2")} ${loc("portal_throne_of_evil_skill", [global.portal.throne.points])}</div>`;
            } else {
              desc += `<div class="has-text-info">${loc("portal_throne_of_evil_skill1")} ${loc("portal_throne_of_evil_skill", [global.portal.throne.points])}</div>`;
            }
          }
          return desc;
        },
        action(args) {
          if (global.portal["throne"] && global.portal.throne.hearts.length === 0 && global.portal.throne.points > 0) {
            global.portal.throne.skill = global.portal.throne.skill ? false : true;
            checkSkillPointAssignments();
            return true;
          } else if (global.portal["throne"] && global.portal.throne.hearts.length > 0) {
            let redraw = false;
            let heart = global.portal.throne.hearts[0];
            if (!global.race.absorbed.includes(heart)) {
              global.portal.throne.points++;
            }
            absorbRace(heart);
            global.portal.throne.hearts.splice(0, 1);
            if (global.portal.throne.hearts.length === 0) {
              $(`#portal-throne .orange`).removeClass("orange");
            }
            if (["mantis", "unicorn", "capybara"].includes(heart)) {
              redraw = true;
            }
            if (!global.settings.portal.pit) {
              global.settings.portal.pit = true;
              global.tech["hell_pit"] = 5;
              redraw = true;
            } else if (!global.tech["war_vault"] && global.race?.absorbed?.length >= 13) {
              global.tech["hell_ruins"] = 2;
              global.tech["war_vault"] = 1;
              global.settings.portal.ruins = true;
              initStruct(fortressModules.prtl_ruins.war_vault);
              initStruct(fortressModules.prtl_badlands.codex);
              redraw = true;
            } else if (global.tech["war_vault"] && global.portal["codex"] && global.portal.codex.s < 10) {
              global.portal.codex.s++;
            } else if (!global.settings.portal.lake && global.race?.absorbed?.length >= 33) {
              global.tech["hell_lake"] = 6;
              global.tech["hell_spire"] = 9;
              global.settings.portal.lake = true;
              global.settings.portal.spire = true;
              global.settings.showCargo = true;
              initStruct(fortressModules.prtl_lake.harbor);
              initStruct(fortressModules.prtl_lake.cooling_tower);
              initStruct(fortressModules.prtl_lake.bireme);
              initStruct(fortressModules.prtl_lake.transport);
              initStruct(fortressModules.prtl_spire.purifier);
              initStruct(fortressModules.prtl_spire.port);
              initStruct(fortressModules.prtl_spire.base_camp);
              initStruct(fortressModules.prtl_spire.mechbay);
              initStruct(fortressModules.prtl_spire.spire);
              genSpireFloor();
              redraw = true;
            } else if (global.race?.absorbed?.length >= 43 && global.tech.hellspawn === 4) {
              global.tech.hellspawn = 5;
              redraw = true;
            }
            if (global.race?.absorbed?.length >= 53) {
              global.stats.warlord.k = true;
              checkWarlordAchieve();
            }
            if (p_on["soul_forge"]) {
              let troops = garrisonSize(false, { no_forge: true });
              let forge = soulForgeSoldiers();
              if (forge <= troops) {
                global.portal.soul_forge.kills += 25e4;
              }
            }
            if (redraw) {
              renderFortress();
              drawTech();
            }
            return true;
          }
          return false;
        },
        aura() {
          if (global.portal["throne"] && global.portal.throne.hearts.length > 0) {
            return "orange";
          } else if (global.portal["throne"] && global.portal.throne.skill) {
            return "green";
          }
          return false;
        },
        struct() {
          return {
            d: { enemy: [], hearts: [], spawned: [], points: 1, skill: false },
            p: ["throne", "portal"]
          };
        }
      },
      incinerator: {
        id: "portal-incinerator",
        title: loc("portal_incinerator_title"),
        desc() {
          return rankDesc(loc("portal_incinerator_desc"), "incinerator");
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("incinerator", offset, 22e4, 1.3, "portal");
          },
          Coal(offset) {
            return spaceCostMultiplier("incinerator", offset, 8e4, 1.3, "portal");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("incinerator", offset, 5e3, 1.3, "portal");
          },
          Infernite(offset) {
            return spaceCostMultiplier("incinerator", offset, 4e3, 1.3, "portal");
          }
        },
        powered(wiki) {
          let power = 22.5 + (global.portal?.incinerator?.rank || 1) * 2.5;
          if (global.race["forge"]) {
            power += traits.forge.vars()[0] * 5;
          }
          if (global.tech["hellspawn"] && global.tech.hellspawn >= 6) {
            power += (global.portal?.incinerator?.rank || 1) * 2.5;
          }
          if (global.tech["hellspawn"] && global.tech.hellspawn >= 7 && global.portal["corpse_pile"]) {
            power += (0.75 + global.portal.corpse_pile.rank * 0.25) * global.portal.corpse_pile.count;
          }
          return powerModifier(-power);
        },
        effect(wiki) {
          let desc = `<div>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered(wiki)])}</div>`;
          if ((global.portal?.incinerator?.rank || 1) > 1) {
            let rank = global.portal.incinerator.rank - 1;
            desc += `<div>${loc("portal_incinerator_effect", [15 * rank, loc("portal_twisted_lab_title"), global.resource.Graphene.name])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.incinerator.rank < 5) {
            global.portal.throne.points--;
            global.portal.incinerator.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("incinerator", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["incinerator", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.incinerator?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair: loc("portal_incinerator_flair")
      },
      warehouse: {
        id: "portal-warehouse",
        title() {
          return loc("city_shed_title3");
        },
        desc() {
          return rankDesc(loc("city_shed_title3"), "warehouse");
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("warehouse", offset, 175e3, 1.28, "portal");
          },
          Lumber(offset) {
            return spaceCostMultiplier("warehouse", offset, 3e5, 1.28, "portal");
          },
          Aluminium(offset) {
            return spaceCostMultiplier("warehouse", offset, 18e4, 1.28, "portal");
          },
          Cement(offset) {
            return spaceCostMultiplier("warehouse", offset, 95e3, 1.28, "portal");
          }
        },
        res() {
          let r_list = [
            "Lumber",
            "Stone",
            "Chrysotile",
            "Furs",
            "Copper",
            "Iron",
            "Aluminium",
            "Steel",
            "Titanium",
            "Cement",
            "Coal",
            "Uranium",
            "Alloy",
            "Polymer",
            "Iridium",
            "Nano_Tube",
            "Neutronium",
            "Adamantite",
            "Infernite",
            "Bolognium",
            "Orichalcum",
            "Graphene",
            "Stanene",
            "Oil",
            "Helium_3"
          ];
          return r_list;
        },
        val(res) {
          switch (res) {
            case "Lumber":
              return 650 + (global.portal?.warehouse?.rank || 1) * 100;
            case "Stone":
              return 650 + (global.portal?.warehouse?.rank || 1) * 100;
            case "Chrysotile":
              return 700 + (global.portal?.warehouse?.rank || 1) * 50;
            case "Furs":
              return 400 + (global.portal?.warehouse?.rank || 1) * 25;
            case "Copper":
              return 330 + (global.portal?.warehouse?.rank || 1) * 50;
            case "Iron":
              return 320 + (global.portal?.warehouse?.rank || 1) * 30;
            case "Aluminium":
              return 290 + (global.portal?.warehouse?.rank || 1) * 30;
            case "Cement":
              return 260 + (global.portal?.warehouse?.rank || 1) * 20;
            case "Coal":
              return 135 + (global.portal?.warehouse?.rank || 1) * 15;
            case "Steel":
              return 52 + (global.portal?.warehouse?.rank || 1) * 8;
            case "Titanium":
              return 32 + (global.portal?.warehouse?.rank || 1) * 8;
            case "Uranium":
              return global.portal?.warehouse?.rank || 1;
            case "Alloy":
              return 31 + (global.portal?.warehouse?.rank || 1) * 4;
            case "Polymer":
              return 31 + (global.portal?.warehouse?.rank || 1) * 4;
            case "Iridium":
              return 28 + (global.portal?.warehouse?.rank || 1) * 4;
            case "Nano_Tube":
              return 50 + (global.portal?.warehouse?.rank || 1) * 18;
            case "Neutronium":
              return 12 + (global.portal?.warehouse?.rank || 1) * 4;
            case "Adamantite":
              return 15 + (global.portal?.warehouse?.rank || 1) * 3;
            case "Infernite":
              return 3 + global.portal?.warehouse?.rank || 1;
            case "Bolognium":
              return 6 + global.portal?.warehouse?.rank || 3;
            case "Orichalcum":
              return 8 + global.portal?.warehouse?.rank || 4;
            case "Graphene":
              return 14 + global.portal?.warehouse?.rank || 3;
            case "Stanene":
              return 14 + global.portal?.warehouse?.rank || 3;
            case "Oil":
              return 18 + global.portal?.warehouse?.rank || 2;
            case "Helium_3":
              return 17 + global.portal?.warehouse?.rank || 2;
            default:
              return 0;
          }
        },
        wide: true,
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = storageMultipler(1, wiki);
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
            multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 13 ? 0.16 : 0.12);
          }
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * multiplier).toFixed(0), 1);
              storage += `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage += `<span>${loc("plus_max_resource", [65 + (global.portal?.warehouse?.rank || 1) * 35, global.resource.Crates.name])}</span>`;
          storage += `<span>${loc("plus_max_resource", [65 + (global.portal?.warehouse?.rank || 1) * 35, global.resource.Containers.name])}</span>`;
          storage += "</div>";
          return storage;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.warehouse.rank < 5) {
            global.portal.throne.points--;
            global.portal.warehouse.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("warehouse", "portal");
            let multiplier = storageMultipler();
            if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
              multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 13 ? 0.16 : 0.12);
            }
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                global.resource[res].max += spatialReasoning($(this)[0].val(res) * multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, rank: 1 },
            p: ["warehouse", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.warehouse?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      hovel: {
        id: "portal-hovel",
        title: loc("portal_hovel_title"),
        desc() {
          return rankDesc(loc("portal_hovel_title"), "hovel");
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hovel", offset, 145e3, 1.3, "portal");
          },
          Stone(offset) {
            return spaceCostMultiplier("hovel", offset, 185e3, 1.3, "portal");
          },
          Furs(offset) {
            return spaceCostMultiplier("hovel", offset, 66600, 1.3, "portal");
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          return global.race["sappy"] ? `<div>${loc("plus_max_resource", [pop, loc("citizen")])}</div><div>${loc("city_grove_effect", [2.5])}</div>` : loc("plus_max_resource", [pop, loc("citizen")]);
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.hovel.rank < 5) {
            global.portal.throne.points--;
            global.portal.hovel.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("hovel", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["hovel", "portal"]
          };
        },
        citizens() {
          let pop = 18 + (global.portal?.hovel?.rank || 1) * 2;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.hovel?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      hell_casino: {
        id: "portal-hell_casino",
        title() {
          return structName("casino");
        },
        desc() {
          return `<div>${rankDesc(structName("casino"), "hell_casino")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hellspawn: 1, gambling: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hell_casino", offset, traitCostMod("untrustworthy", 4e5), 1.3, "portal");
          },
          Furs(offset) {
            return spaceCostMultiplier("hell_casino", offset, traitCostMod("untrustworthy", 175e3), 1.3, "portal");
          },
          Stone(offset) {
            return spaceCostMultiplier("hell_casino", offset, traitCostMod("untrustworthy", 35e4), 1.3, "portal");
          },
          Plywood(offset) {
            return spaceCostMultiplier("hell_casino", offset, traitCostMod("untrustworthy", 65e3), 1.3, "portal");
          }
        },
        effect() {
          let desc = casinoEffect();
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 2 ? 2 : 3);
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.hell_casino.rank < 5) {
            global.portal.throne.points--;
            global.portal.hell_casino.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("hell_casino", "portal");
            if (global.tech["theatre"] && !global.race["joyless"]) {
              global.civic.entertainer.max += jobScale(3);
              global.civic.entertainer.display = true;
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["hell_casino", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.hell_casino?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair: loc("portal_casino_flair")
      },
      twisted_lab: {
        id: "portal-twisted_lab",
        title: loc("portal_twisted_lab_title"),
        desc() {
          return `<div>${rankDesc(loc("portal_twisted_lab_title"), "twisted_lab")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hellspawn: 1, science: 9 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("twisted_lab", offset, 35e4, 1.3, "portal");
          },
          Knowledge(offset) {
            return spaceCostMultiplier("twisted_lab", offset, 69e3, 1.3, "portal");
          },
          Copper(offset) {
            return spaceCostMultiplier("twisted_lab", offset, 375e3, 1.3, "portal");
          },
          Polymer(offset) {
            return spaceCostMultiplier("twisted_lab", offset, 289e3, 1.3, "portal");
          },
          Graphene(offset) {
            return spaceCostMultiplier("twisted_lab", offset, 23e4, 1.3, "portal");
          }
        },
        effect() {
          let baseVal = 6e3 + (global.portal?.twisted_lab?.rank || 1) * 2e3;
          let know = global.race["absorbed"] ? global.race.absorbed.length * baseVal : baseVal;
          if (global.tech["supercollider"]) {
            let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
            know *= global.tech["supercollider"] / ratio + 1;
          }
          let desc = `<div>${loc("plus_max_resource", [(+know.toFixed(0)).toLocaleString(), global.resource.Knowledge.name])}</div>`;
          desc += `<div>${loc("city_university_effect", [jobScale(3)])}</div>`;
          desc += `<div>${loc("plus_max_resource", [jobScale(2), jobName("scientist")])}</div>`;
          desc += `<div>${loc("interstellar_g_factory_effect")}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return 4;
        },
        special: true,
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.twisted_lab.rank < 5) {
            global.portal.throne.points--;
            global.portal.twisted_lab.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("twisted_lab", "portal");
            if (powerOnNewStruct($(this)[0])) {
              global.portal.twisted_lab.Coal++;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, Lumber: 0, Coal: 0, Oil: 0, rank: 1 },
            p: ["twisted_lab", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.twisted_lab?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair() {
          return loc("portal_twisted_lab_flair");
        }
      },
      demon_forge: {
        id: "portal-demon_forge",
        title: loc("portal_demon_forge_title"),
        desc() {
          return `<div>${rankDesc(loc("portal_demon_forge_title"), "demon_forge")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("demon_forge", offset, 48e4, 1.3, "portal");
          },
          Iridium(offset) {
            return spaceCostMultiplier("demon_forge", offset, 265e3, 1.3, "portal");
          },
          Iron(offset) {
            return spaceCostMultiplier("demon_forge", offset, 535e3, 1.3, "portal");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("demon_forge", offset, 155e3, 1.3, "portal");
          }
        },
        effect() {
          let desc = `<div>${loc("city_foundry_effect1", [jobScale($(this)[0].crafters())])}</div><div>${loc("interstellar_stellar_forge_effect", [$(this)[0].crafting()])}</div>`;
          let num_smelters = $(this)[0].smelting();
          if (num_smelters > 0) {
            desc += `<div>${loc("interstellar_stellar_forge_effect3", [num_smelters])}</div>`;
          }
          return `${desc}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(3);
        },
        special: true,
        smelting() {
          return 4 + (global.portal?.demon_forge?.rank || 1) * 4;
        },
        crafting() {
          return 20 + (global.portal?.demon_forge?.rank || 1) * 12;
        },
        crafters() {
          return 5 + (global.portal?.demon_forge?.rank || 1);
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.demon_forge.rank < 5) {
            global.portal.throne.points--;
            global.portal.demon_forge.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("demon_forge", "portal");
            if (powerOnNewStruct($(this)[0])) {
              global.civic.craftsman.max += jobScale(10);
              let num_smelters = $(this)[0].smelting();
              if (num_smelters > 0) {
                addSmelter(Math.floor(num_smelters / 2), "Iron", "Coal");
                addSmelter(Math.floor(num_smelters / 2), "Steel", "Coal");
              }
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["demon_forge", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.demon_forge?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      hell_factory: {
        id: "portal-hell_factory",
        title: loc("portal_factory_title"),
        desc() {
          return `<div>${rankDesc(loc("portal_factory_title"), "hell_factory")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hell_factory", offset, 72e4, 1.3, "portal");
          },
          Titanium(offset) {
            return spaceCostMultiplier("hell_factory", offset, 55e4, 1.3, "portal");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("hell_factory", offset, 55e3, 1.3, "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("hell_factory", offset, 375e3, 1.3, "portal");
          }
        },
        effect() {
          let desc = `<div>${loc("portal_factory_effect", [$(this)[0].lines()])}</div><div>${loc("city_crafted_mats", [25])}</div>`;
          desc += `<div>${loc("plus_max_resource", [jobScale(5), jobName("cement_worker")])}</div>`;
          if ((global.portal?.hell_factory?.rank || 1) > 1) {
            desc += `<div>${loc("production", [(global.portal?.hell_factory?.rank || 1) * 8 - 8, global.resource.Cement.name])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(5);
        },
        special: true,
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.hell_factory.rank < 5) {
            global.portal.throne.points--;
            global.portal.hell_factory.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("hell_factory", "portal");
            if (powerOnNewStruct($(this)[0])) {
              global.city.factory.Alloy += $(this)[0].lines();
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        lines() {
          return 3 + (global.portal?.hell_factory?.rank || 1);
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["hell_factory", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.hell_factory?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair() {
          return loc(`portal_factory_flair`);
        }
      },
      pumpjack: {
        id: "portal-pumpjack",
        title() {
          return loc("portal_pumpjack_title");
        },
        desc() {
          return rankDesc(loc("portal_pumpjack_title"), "pumpjack");
        },
        reqs: { hellspawn: 1, oil: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("pumpjack", offset, 295e3, 1.3, "portal");
          },
          Cement(offset) {
            return spaceCostMultiplier("pumpjack", offset, 185e3, 1.3, "portal");
          },
          Steel(offset) {
            return spaceCostMultiplier("pumpjack", offset, 275e3, 1.3, "portal");
          }
        },
        effect() {
          let oil = +production("oil_well").toFixed(2);
          let oc = spatialReasoning(500);
          let desc = `<div>${loc("plus_res_combo", [oil, oc, global.resource.Oil.name])}</div>`;
          let storage = spatialReasoning(250);
          let values = production("helium_mine");
          let helium = +values.b.toFixed(3);
          desc += `<div>${loc("plus_res_combo", [helium, storage, global.resource.Helium_3.name])}</div>`;
          if (global.race["blubber"] && global.portal.hasOwnProperty("pumpjack")) {
            let maxDead = global.portal.pumpjack.count;
            desc += `<div>${loc("city_oil_well_bodies", [+global.city.oil_well.dead.toFixed(1), 50 * maxDead])}</div>`;
            desc += `<div>${loc("city_oil_well_consume", [traits.blubber.vars()[0]])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.pumpjack.rank < 5) {
            global.portal.throne.points--;
            global.portal.pumpjack.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("pumpjack", "portal");
            global["resource"]["Oil"].max += spatialReasoning(500);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, dead: 0, rank: 1 },
            p: ["pumpjack", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.pumpjack?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair: loc("portal_pumpjack_flair")
      },
      dig_demon: {
        id: "portal-dig_demon",
        title: loc("portal_dig_demon_title"),
        desc() {
          return rankDesc(loc("portal_dig_demon_title"), "dig_demon");
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("dig_demon", offset, 315e3, 1.3, "portal");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("dig_demon", offset, 188e3, 1.3, "portal");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("dig_demon", offset, 15e4, 1.3, "portal");
          }
        },
        powered() {
          return true;
        },
        effect(wiki) {
          let pop = $(this)[0].citizens();
          return loc("plus_resource", [pop, jobName("miner")]);
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.dig_demon.rank < 5) {
            global.portal.throne.points--;
            global.portal.dig_demon.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("dig_demon", "portal");
            if (powerOnNewStruct($(this)[0])) {
              let count = $(this)[0].citizens();
              global.resource[global.race.species].max += count;
              global.resource[global.race.species].amount += count;
              global.civic.miner.max += count;
              global.civic.miner.workers += count;
              global.civic.miner.assigned += count;
            }
            return true;
          }
          return false;
        },
        postPower(o) {
          const prev_count = global.civic.miner.max;
          const new_count = $(this)[0].citizens() * global.portal.dig_demon.on;
          const delta = new_count - prev_count;
          global.resource[global.race.species].max = Math.max(0, global.resource[global.race.species].max + delta);
          global.resource[global.race.species].amount = Math.max(0, global.resource[global.race.species].amount + delta);
          global.civic.miner.max = new_count;
          global.civic.miner.workers = new_count;
          global.civic.miner.assigned = new_count;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["dig_demon", "portal"]
          };
        },
        citizens() {
          let pop = 15 + (global.portal?.dig_demon?.rank || 1);
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.dig_demon?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      tunneler: {
        id: "portal-tunneler",
        title: loc("portal_tunneler_title"),
        desc() {
          return rankDesc(loc("portal_tunneler_desc"), "tunneler");
        },
        reqs: { hellspawn: 2 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tunneler", offset, 275e3, 1.3, "portal");
          },
          Food(offset) {
            return spaceCostMultiplier("tunneler", offset, 135e3, 1.3, "portal");
          },
          Uranium(offset) {
            return spaceCostMultiplier("tunneler", offset, 135, 1.3, "portal");
          }
        },
        effect(wiki) {
          let boost = (global.portal?.tunneler?.rank || 1) + 3;
          let desc = `<div>${loc("portal_tunneler_effect", [boost])}</div>`;
          desc += `<div>${loc("portal_tunneler_effect2")}</div>`;
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.tunneler.rank < 5) {
            global.portal.throne.points--;
            global.portal.tunneler.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("tunneler", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["tunneler", "portal"]
          };
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.tunneler?.rank < 5) {
            return "blue";
          }
          return false;
        }
      },
      brute: {
        id: "portal-brute",
        title: loc("portal_brute_title"),
        desc() {
          return rankDesc(loc("portal_brute_title"), "brute");
        },
        reqs: { hellspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        cost: {
          Money(offset) {
            return spaceCostMultiplier("brute", offset, 3e5, 1.25, "portal");
          },
          Alloy(offset) {
            return spaceCostMultiplier("brute", offset, 238e3, 1.25, "portal");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("brute", offset, 65e3, 1.25, "portal");
          },
          Mythril(offset) {
            return spaceCostMultiplier("brute", offset, 178e3, 1.25, "portal");
          }
        },
        powered() {
          return 0;
        },
        effect() {
          let troops = $(this)[0].soldiers();
          let desc = `<div>${loc("plus_max_soldiers", [troops])}</div>`;
          desc += `<div>${loc("plus_max_resource", [1, global.resource.Authority.name])}</div>`;
          return desc;
        },
        action(args) {
          if (!args.isQueue && global.portal["throne"] && global.portal.throne.skill && global.portal.throne.points > 0 && global.portal.brute.rank < 5) {
            global.portal.throne.points--;
            global.portal.brute.rank++;
            checkSkillPointAssignments();
            return true;
          } else if (payCosts($(this)[0])) {
            incrementStruct("brute", "portal");
            global.portal.brute.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, rank: 1 },
            p: ["brute", "portal"]
          };
        },
        soldiers() {
          let soldiers = 7 + (global.portal?.brute?.rank || 1);
          if (global.race["grenadier"]) {
            soldiers -= 4;
          }
          return jobScale(soldiers);
        },
        aura() {
          if (global.portal?.throne?.skill && global.portal?.brute?.rank < 5) {
            return "blue";
          }
          return false;
        },
        flair() {
          return loc("portal_brute_flair");
        }
      },
      s_alter: buildTemplate(`s_alter`, "portal"),
      shrine: buildTemplate(`shrine`, "portal"),
      meditation: buildTemplate(`meditation`, "portal"),
      wonder_gardens: {
        id: "portal-wonder_gardens",
        title() {
          return loc("portal_wonder_skulls");
        },
        desc() {
          return loc("portal_wonder_skulls");
        },
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.portal["wonder_gardens"] ? true : false;
        },
        trait: ["wish"],
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action(args) {
          return false;
        },
        flair() {
          return loc("portal_wonder_skulls_flair");
        }
      }
    },
    prtl_pit: {
      info: {
        name: loc("portal_pit_name"),
        desc: loc("portal_pit_desc")
      },
      pit_mission: {
        id: "portal-pit_mission",
        title: loc("portal_pit_mission_title"),
        desc: loc("portal_pit_mission_title"),
        reqs: { hell_pit: 1 },
        grant: ["hell_pit", 2],
        queue_complete() {
          return global.tech.hell_pit >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 5e6;
          },
          Helium_3() {
            return 3e5;
          },
          Deuterium() {
            return 2e5;
          }
        },
        effect: loc("portal_pit_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_pit_mission_result"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        }
      },
      assault_forge: {
        id: "portal-assault_forge",
        title: loc("portal_assault_forge_title"),
        desc: loc("portal_assault_forge_title"),
        reqs: { hell_pit: 2 },
        grant: ["hell_pit", 3],
        queue_complete() {
          return global.tech.hell_pit >= 3 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e7;
          },
          HellArmy() {
            return Math.round(650 / armyRating(1, "hellArmy"));
          },
          Cement() {
            return 1e7;
          },
          Adamantite() {
            return 125e4;
          },
          Elerium() {
            return 2400;
          },
          Stanene() {
            return 9e5;
          }
        },
        effect: loc("portal_assault_forge_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_assault_forge_result"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        }
      },
      soul_forge: {
        id: "portal-soul_forge",
        title() {
          return loc("portal_soul_forge_title");
        },
        desc() {
          return `<div>${loc("portal_soul_forge_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_pit: 4 },
        queue_complete() {
          return 1 - global.portal.soul_forge.count;
        },
        powered() {
          return powerCostMod(30);
        },
        postPower(o) {
          vBind({ el: `#fort` }, "update");
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_forge") ? global.portal.soul_forge.count : 0) < 1 ? 25e6 : 0;
          },
          Graphene(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_forge") ? global.portal.soul_forge.count : 0) < 1 ? 15e5 : 0;
          },
          Infernite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_forge") ? global.portal.soul_forge.count : 0) < 1 ? 25e3 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_forge") ? global.portal.soul_forge.count : 0) < 1 ? global.race["warlord"] ? 5e5 : 1e5 : 0;
          }
        },
        effect(wiki) {
          let desc = `<div>${loc(global.race["warlord"] ? "portal_soul_forge_warlord" : "portal_soul_forge_effect", [global.resource.Soul_Gem.name])}</div>`;
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("soul_forge") ? global.portal.soul_forge.count : 0);
          if (count >= 1) {
            let cap = global.tech.hell_pit >= 6 ? 75e4 : 1e6;
            let num_s_attractor_on = wiki ? global.portal.soul_attractor.on : p_on["soul_attractor"];
            if (global.tech.hell_pit >= 7 && num_s_attractor_on > 0) {
              cap *= (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 3 ? 0.96 : 0.97) ** num_s_attractor_on;
            }
            if (global.race["ghostly"] && global.race["warlord"]) {
              cap *= 2 - traits.ghostly.vars()[1];
            }
            desc = desc + `<div>${loc("portal_soul_forge_effect2", [global.portal["soul_forge"] ? global.portal.soul_forge.kills.toLocaleString() : 0, Math.round(cap).toLocaleString()])}</div>`;
          }
          let soldiers = soulForgeSoldiers(wiki);
          return `${desc}<div><span class="has-text-caution">${loc("portal_soul_forge_soldiers", [soldiers])}</span>, <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span></div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.portal.soul_forge.count < 1) {
              incrementStruct("soul_forge", "portal");
              powerOnNewStruct($(this)[0]);
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, kills: 0 },
            p: ["soul_forge", "portal"]
          };
        }
      },
      gun_emplacement: {
        id: "portal-gun_emplacement",
        title: loc("portal_gun_emplacement_title"),
        desc() {
          return `<div>${loc("portal_gun_emplacement_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_gun: 1 },
        powered() {
          return powerCostMod(3);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gun_emplacement", offset, 4e6, 1.25, "portal");
          },
          Coal(offset) {
            return spaceCostMultiplier("gun_emplacement", offset, 25e4, 1.25, "portal");
          },
          Steel(offset) {
            return spaceCostMultiplier("gun_emplacement", offset, 12e5, 1.25, "portal");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("gun_emplacement", offset, 2e5, 1.25, "portal");
          }
        },
        effect() {
          let soldiers = global.tech.hell_gun >= 2 ? jobScale(2) : jobScale(1);
          let min = global.tech.hell_gun >= 2 ? 35 : 20;
          let max = global.tech.hell_gun >= 2 ? 75 : 40;
          return `<div>${loc("portal_gun_emplacement_effect", [soldiers])}</div><div>${loc("portal_gun_emplacement_effect2", [min, max])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gun_emplacement", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["gun_emplacement", "portal"]
          };
        }
      },
      soul_attractor: {
        id: "portal-soul_attractor",
        title() {
          return loc("portal_soul_attractor_title");
        },
        desc() {
          return `<div>${loc("portal_soul_attractor_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_pit: 5 },
        powered() {
          return powerCostMod(4);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("soul_attractor", offset, 12e6, 1.25, "portal");
          },
          Stone(offset) {
            return spaceCostMultiplier("soul_attractor", offset, 23e6, 1.25, "portal");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("soul_attractor", offset, 314159, 1.25, "portal");
          },
          Vitreloy(offset) {
            return spaceCostMultiplier("soul_attractor", offset, 1618, 1.25, "portal");
          },
          Aerogel(offset) {
            return spaceCostMultiplier("soul_attractor", offset, 18e4, 1.25, "portal");
          }
        },
        effect() {
          let attract = global.blood["attract"] ? global.blood.attract * 5 : 0;
          if (global.tech["hell_pit"] && global.tech.hell_pit >= 8) {
            attract *= 2;
          }
          let low = 40 + attract;
          let high = 120 + attract;
          if (global.race["ghostly"] && global.race["warlord"]) {
            low *= 1 + traits.ghostly.vars()[0] / 100;
            low = Math.round(low);
            high *= 1 + traits.ghostly.vars()[0] / 100;
            high = Math.round(high);
          }
          let desc = `<div>${loc("portal_soul_attractor_effect", [low, high])}</div>`;
          if (global.tech.hell_pit >= 7) {
            desc += `<div>${loc("portal_soul_attractor_effect2", [global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 3 ? 4 : 3])}</div>`;
          }
          if (global.tech["pitspawn"]) {
            desc += `<div>${loc("production", [global.tech.pitspawn >= 3 ? 20 : 10, loc("portal_shadow_mine_title")])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("soul_attractor", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["soul_attractor", "portal"]
          };
        }
      },
      soul_capacitor: {
        id: "portal-soul_capacitor",
        title: loc("portal_soul_capacitor_title"),
        desc() {
          return `<div>${loc("portal_soul_capacitor_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { forbidden: 2 },
        powered() {
          return powerCostMod(125);
        },
        queue_complete() {
          return 40 - global.portal.soul_capacitor.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 75e7, 1.01, "portal");
          },
          Crystal(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 125e4, 1.01, "portal");
          },
          Adamantite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 65e5, 1.01, "portal");
          },
          Infernite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 1e4, 1.01, "portal");
          },
          Stanene(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 25e5, 1.01, "portal");
          },
          Bolognium(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 1e6, 1.01, "portal");
          },
          Soul_Gem(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 3, 1.01, "portal");
          },
          Mythril(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.count : 0) >= 40 ? 0 : spaceCostMultiplier("soul_capacitor", offset, 125e4, 1.01, "portal");
          }
        },
        effect() {
          let cap = 25e5;
          let eCap = global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.ecap : 0;
          let energy = global.portal.hasOwnProperty("soul_capacitor") ? global.portal.soul_capacitor.energy : 0;
          let desc = `<div>${loc("portal_soul_capacitor_effect", [energy.toLocaleString()])}</div>`;
          desc += `<div>${loc("portal_soul_capacitor_effect2", [eCap.toLocaleString()])}</div>`;
          desc += `<div>${loc("portal_soul_capacitor_effect3", [cap.toLocaleString()])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action(args) {
          if (global.portal.soul_capacitor.count < 40 && payCosts($(this)[0])) {
            global.portal.soul_capacitor.count++;
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, energy: 0, ecap: 0 },
            p: ["soul_capacitor", "portal"]
          };
        },
        postPower() {
          updateDesc($(this)[0], "portal", "soul_capacitor");
        }
      },
      absorption_chamber: {
        id: "portal-absorption_chamber",
        title: loc("portal_absorption_chamber_title"),
        desc(wiki) {
          if (!global.interstellar.hasOwnProperty("absorption_chamber") || global.portal.absorption_chamber.count < 100 || wiki) {
            return `<div>${loc("portal_absorption_chamber_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>`;
          } else {
            return `<div>${loc("portal_absorption_chamber_title")}</div>`;
          }
        },
        reqs: { forbidden: 3 },
        queue_size: 5,
        queue_complete() {
          return 100 - global.portal.absorption_chamber.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 75e6 : 0;
          },
          Alloy(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 75e4 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 125e3 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 1e3 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 25e4 : 0;
          },
          Nanoweave(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0) < 100 ? 75e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("absorption_chamber") ? global.portal.absorption_chamber.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("portal_absorption_chamber_incomplete")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          } else {
            if (global.tech.forbidden === 5) {
              return `<div>${loc("portal_absorption_chamber_effect_eld", [1e8.toLocaleString()])}</div><div class="has-text-special">${loc("tech_demonic_infusion_effect2", [calcPrestige("descend").artifact])}</div>`;
            } else {
              let reward = astrialProjection();
              return `<div>${loc(`portal_absorption_chamber_effect`, [1e8.toLocaleString()])}</div><div>${reward}</div>`;
            }
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.portal.absorption_chamber.count < 100) {
              incrementStruct("absorption_chamber", "portal");
              if (global.portal.absorption_chamber.count >= 100) {
                global.tech.forbidden = 4;
              }
              return true;
            } else if (global.portal.soul_capacitor.energy >= 1e8) {
              if (global.tech.forbidden === 5) {
                descension();
              } else {
                ascendLab();
              }
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["absorption_chamber", "portal"]
          };
        }
      },
      shadow_mine: {
        id: "portal-shadow_mine",
        title: loc("portal_shadow_mine_title"),
        desc() {
          return `<div>${loc("portal_shadow_mine_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { pitspawn: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        powered() {
          return powerCostMod(5);
        },
        powerBalancer() {
          return [{ r: "Infernite", k: "lpmod" }];
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("shadow_mine", offset, 1e7, 1.25, "portal");
          },
          Lumber(offset) {
            return spaceCostMultiplier("shadow_mine", offset, 465e4, 1.25, "portal");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("shadow_mine", offset, 235e4, 1.25, "portal");
          }
        },
        effect(wiki) {
          let elerium_cap = spatialReasoning(200);
          let elerium = production("shadow_mine", "elerium", wiki);
          let infernite = production("shadow_mine", "infernite", wiki);
          let vitreloy = production("shadow_mine", "vitreloy", wiki);
          let desc = `<div>${loc("gain", [+elerium.toFixed(3), global.resource.Elerium.name])}</div>`;
          desc += `<div>${loc("gain", [+infernite.toFixed(3), global.resource.Infernite.name])}</div>`;
          desc += `<div>${loc("gain", [+vitreloy.toFixed(3), global.resource.Vitreloy.name])}</div>`;
          desc += `<div>${loc("plus_max_resource", [elerium_cap, global.resource.Elerium.name])}</div>`;
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("shadow_mine", "portal");
            powerOnNewStruct($(this)[0]);
            global.resource.Vitreloy.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["shadow_mine", "portal"]
          };
        },
        flair() {
          return loc("portal_shadow_mine_flair");
        }
      },
      tavern: {
        id: "portal-tavern",
        title: loc("portal_tavern_title"),
        desc() {
          return `<div>${loc("portal_tavern_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { pitspawn: 2 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        powered() {
          return powerCostMod(3);
        },
        powerBalancer() {
          return [{ r: "Infernite", k: "lpmod" }];
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("tavern", offset, 125e5, 1.25, "portal");
          },
          Food(offset) {
            return spaceCostMultiplier("tavern", offset, 25e4, 1.25, "portal");
          },
          Oil(offset) {
            return spaceCostMultiplier("tavern", offset, 125e3, 1.25, "portal");
          },
          Brick(offset) {
            return spaceCostMultiplier("tavern", offset, 138e3, 1.25, "portal");
          }
        },
        effect(wiki) {
          let desc = "";
          if (!global.race["joyless"]) {
            desc += `<div>${loc("plus_resource_per", [0.35, loc("morale"), loc("portal_shadow_mine_title")])}</div>`;
          }
          desc += `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("tavern", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tavern", "portal"]
          };
        },
        flair() {
          return loc("portal_tavern_flair");
        }
      }
    },
    prtl_ruins: {
      info: {
        name: loc("portal_ruins_name"),
        desc: loc("portal_ruins_desc"),
        support: "guard_post",
        prop() {
          if (global.race["warlord"]) {
            return "";
          }
          let desc = ` - <span class="has-text-advanced">${loc("portal_ruins_security")}:</span> <span class="has-text-caution">{{ on | filter('army') }}</span>`;
          desc = desc + ` - <span class="has-text-advanced">${loc("portal_ruins_supressed")}:</span> <span class="has-text-caution">{{ on | filter('sup') }}</span>`;
          return desc;
        },
        filter(v, type) {
          let sup = hellSupression("ruins");
          switch (type) {
            case "army":
              return Math.round(sup.rating);
            case "sup":
              let supress = +(sup.supress * 100).toFixed(2);
              return `${supress}%`;
          }
        }
      },
      ruins_mission: {
        id: "portal-ruins_mission",
        title: loc("portal_ruins_mission_title"),
        desc: loc("portal_ruins_mission_title"),
        reqs: { hell_ruins: 1 },
        grant: ["hell_ruins", 2],
        queue_complete() {
          return global.tech.hell_ruins >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 1e8;
          },
          Oil() {
            return 5e5;
          },
          Helium_3() {
            return 5e5;
          }
        },
        effect: loc("portal_ruins_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_ruins_mission_result"), "info", false, ["progress", "hell"]);
            global.portal["stonehedge"] = { count: 0 };
            initStruct(fortressModules.prtl_ruins.vault);
            initStruct(fortressModules.prtl_ruins.archaeology);
            return true;
          }
          return false;
        }
      },
      guard_post: {
        id: "portal-guard_post",
        title: loc("portal_guard_post_title"),
        desc() {
          return `<div>${loc("portal_guard_post_title")}</div><div class="has-text-special">${loc("requires_soldiers")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_ruins: 2 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("guard_post", offset, 8e6, 1.06, "portal");
          },
          Lumber(offset) {
            return spaceCostMultiplier("guard_post", offset, 65e5, 1.06, "portal");
          },
          Sheet_Metal(offset) {
            return spaceCostMultiplier("guard_post", offset, 3e5, 1.06, "portal");
          }
        },
        powered() {
          return powerCostMod(5);
        },
        support() {
          return 1;
        },
        effect() {
          let holy = global.race["holy"] ? 1 + traits.holy.vars()[1] / 100 : 1;
          let unicornFathom = fathomCheck("unicorn");
          if (unicornFathom > 0) {
            holy *= 1 + traits.holy.vars(1)[1] / 100 * unicornFathom;
          }
          let rating = Math.round(holy * armyRating(jobScale(1), "hellArmy", 0));
          return `<div>${loc("portal_guard_post_effect1", [rating])}</div><div class="has-text-caution">${loc("portal_guard_post_effect2", [jobScale(1), $(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("guard_post", "portal");
            let army = global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
            if (p_on["soul_forge"]) {
              let forge = soulForgeSoldiers();
              if (forge <= army) {
                army -= forge;
              }
            }
            if (army >= jobScale(global.portal.guard_post.on + 1)) {
              powerOnNewStruct($(this)[0]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["guard_post", "portal"]
          };
        },
        postPower() {
          vBind({ el: `#srprtl_ruins` }, "update");
          vBind({ el: `#srprtl_gate` }, "update");
        }
      },
      vault: {
        id: "portal-vault",
        title: loc("portal_vault_title"),
        desc: loc("portal_vault_title"),
        reqs: { hell_ruins: 2, hell_vault: 1 },
        not_trait: ["warlord"],
        wiki: global.race["warlord"] ? false : true,
        condition() {
          return global.portal.vault.count >= 2 ? false : true;
        },
        queue_complete() {
          return 2 - global.portal.vault.count;
        },
        cost: {
          Soul_Gem(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("vault") ? global.portal.vault.count : 0) === 0 ? 100 : 0;
          },
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("vault") ? global.portal.vault.count : 0) === 1 ? 25e7 : 0;
          },
          Adamantite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("vault") ? global.portal.vault.count : 0) === 1 ? 125e5 : 0;
          },
          Orichalcum(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("vault") ? global.portal.vault.count : 0) === 1 ? 3e7 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("vault") ? global.portal.vault.count : 0);
          return count < 1 ? loc("portal_vault_effect", [100]) : loc("portal_vault_effect2");
        },
        action(args) {
          if (global.portal.vault.count < 2 && payCosts($(this)[0])) {
            incrementStruct("vault", "portal");
            if (global.portal.vault.count === 2) {
              global.tech.hell_ruins = 3;
              global.resource.Codex.display = true;
              global.resource.Codex.amount = 1;
              messageQueue(loc("portal_vault_result"), "info", false, ["progress", "hell"]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["vault", "portal"]
          };
        },
        post() {
          if (global.portal.vault.count === 2) {
            drawTech();
            renderFortress();
            clearPopper();
          }
        }
      },
      war_vault: {
        id: "portal-war_vault",
        title: loc("portal_vault_title"),
        desc: loc("portal_vault_title"),
        reqs: { hell_ruins: 2, war_vault: 1 },
        trait: ["warlord"],
        wiki: global.race["warlord"] ? true : false,
        queue_complete() {
          return 1 - global.portal.war_vault.count;
        },
        cost: {
          Codex(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("war_vault") ? global.portal.war_vault.count : 0) === 0 ? 1 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("war_vault") ? global.portal.war_vault.count : 0);
          return count < 1 ? loc("portal_war_vault_effect", [100, global.resource.Soul_Gem.name]) : loc("portal_war_vault_effect2");
        },
        action(args) {
          if (global.portal.war_vault.count < 1) {
            if (payCosts($(this)[0])) {
              incrementStruct("war_vault", "portal");
              if (global.portal.war_vault.count === 1) {
                global.resource.Codex.display = false;
                global.resource.Soul_Gem.amount += 100;
                messageQueue(loc("portal_war_vault_result", [global.resource.Soul_Gem.name]), "info", false, ["progress", "hell"]);
              }
              return true;
            } else {
              messageQueue(loc("portal_war_vault_fail", [global.resource.Soul_Gem.name]), "info", false, ["progress", "hell"]);
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["war_vault", "portal"]
          };
        },
        post() {
          if (global.portal.war_vault.count === 2) {
            drawTech();
            renderFortress();
            clearPopper();
          }
        }
      },
      archaeology: {
        id: "portal-archaeology",
        title: loc("portal_archaeology_title"),
        desc() {
          return `<div>${loc("portal_archaeology_title")}</div><div class="has-text-special">${loc("requires_security")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_ruins: 2 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("archaeology", offset, 1e8, 1.25, "portal");
          },
          Titanium(offset) {
            return spaceCostMultiplier("archaeology", offset, 375e4, 1.25, "portal");
          },
          Mythril(offset) {
            return spaceCostMultiplier("archaeology", offset, 125e4, 1.25, "portal");
          }
        },
        powered() {
          return powerCostMod(8);
        },
        effect() {
          return `<div>${loc("portal_archaeology_effect", [jobScale(2)])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("archaeology", "portal");
            global.civic.archaeologist.display = true;
            if (powerOnNewStruct($(this)[0])) {
              let hiredMax = jobScale(2);
              global.civic.archaeologist.max += hiredMax;
              let hired = Math.min(hiredMax, global.civic[global.civic.d_job].workers);
              global.civic[global.civic.d_job].workers -= hired;
              global.civic.archaeologist.workers += hired;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["archaeology", "portal"]
          };
        }
      },
      arcology: {
        id: "portal-arcology",
        title: loc("portal_arcology_title"),
        desc() {
          return `<div>${loc("portal_arcology_title")}</div><div class="has-text-special">${loc("requires_security")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { housing: 4 },
        not_trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("arcology", offset, traitCostMod("untrustworthy", 18e7), 1.22, "portal");
          },
          Graphene(offset) {
            return spaceCostMultiplier("arcology", offset, traitCostMod("untrustworthy", 75e5), 1.22, "portal");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("arcology", offset, traitCostMod("untrustworthy", 28e5), 1.22, "portal");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("arcology", offset, traitCostMod("untrustworthy", 55e5), 1.22, "portal");
          },
          Nanoweave(offset) {
            return spaceCostMultiplier("arcology", offset, traitCostMod("untrustworthy", 65e4), 1.22, "portal");
          },
          Horseshoe() {
            return global.race["hooved"] ? 13 : 0;
          }
        },
        powered() {
          return powerCostMod(25);
        },
        effect(wiki) {
          let sup = hellSupression("ruins", 0, wiki);
          let vault = spatialReasoning(bank_vault() * 8 * sup.supress);
          vault = +vault.toFixed(0);
          let containers = Math.round(get_qlevel(wiki)) * 10;
          let container_string = `<div>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</div><div>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</div>`;
          return `<div>${loc("plus_max_resource", [`$${vault.toLocaleString()}`, loc("resource_Money_name")])}</div><div>${loc("plus_max_citizens", [$(this)[0].citizens()])}</div><div>${loc("plus_max_resource", [$(this)[0].soldiers(), loc("civics_garrison_soldiers")])}</div><div>${loc("portal_guard_post_effect1", [75])}</div>${container_string}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("arcology", "portal");
            if (powerOnNewStruct($(this)[0])) {
              global["resource"][global.race.species].max += 8;
            }
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        postPower() {
          vBind({ el: `#srprtl_ruins` }, "update");
          vBind({ el: `#srprtl_gate` }, "update");
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["arcology", "portal"]
          };
        },
        soldiers() {
          let soldiers = global.race["grenadier"] ? 3 : 5;
          return jobScale(soldiers);
        },
        citizens() {
          return jobScale(8);
        }
      },
      hell_forge: {
        id: "portal-hell_forge",
        title() {
          return loc("portal_hell_forge_title");
        },
        desc() {
          return `<div>${loc("portal_hell_forge_title")}</div><div class="has-text-special">${loc("requires_security")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { scarletite: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("hell_forge", offset, 25e7, 1.15, "portal");
          },
          Coal(offset) {
            return spaceCostMultiplier("hell_forge", offset, 165e4, 1.22, "portal");
          },
          Steel(offset) {
            return spaceCostMultiplier("hell_forge", offset, 38e5, 1.22, "portal");
          },
          Iridium(offset) {
            return spaceCostMultiplier("hell_forge", offset, 12e5, 1.22, "portal");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("hell_forge", offset, 28e4, 1.22, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("hell_forge", offset, 5, 1.22, "portal");
          }
        },
        powered() {
          return powerCostMod(12);
        },
        smelting() {
          return 3;
        },
        special: true,
        effect(wiki) {
          let sup = hellSupression("ruins", 0, wiki);
          let craft = +(75 * sup.supress).toFixed(1);
          let reactor = global.tech["inferno_power"] ? `<div>${loc("portal_hell_forge_effect2", [global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 1 ? 12 : 10, loc(`portal_inferno_power_title`)])}</div>` : ``;
          return `<div>${loc("portal_hell_forge_effect", [jobScale(1)])}</div>${reactor}<div>${loc("interstellar_stellar_forge_effect3", [$(this)[0].smelting()])}</div><div>${loc("interstellar_stellar_forge_effect", [craft])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("hell_forge", "portal");
            if (powerOnNewStruct($(this)[0])) {
              addSmelter($(this)[0].smelting());
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["hell_forge", "portal"]
          };
        },
        post() {
          loadFoundry();
        },
        postPower(on) {
          limitCraftsmen("Scarletite");
        }
      },
      inferno_power: {
        id: "portal-inferno_power",
        title: loc("portal_inferno_power_title"),
        desc() {
          return `<div>${loc("portal_inferno_power_title")}</div>`;
        },
        reqs: { inferno_power: 1 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("inferno_power", offset, 275e6, 1.16, "portal");
          },
          Neutronium(offset) {
            return spaceCostMultiplier("inferno_power", offset, 375e4, 1.18, "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("inferno_power", offset, 12e6, 1.18, "portal");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("inferno_power", offset, 8e6, 1.18, "portal");
          }
        },
        powered(wiki) {
          let power = 20;
          let infernal_forges_on = wiki ? global.portal?.hell_forge?.on ?? 0 : p_on["hell_forge"];
          if (infernal_forges_on) {
            power += infernal_forges_on * (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 1 ? 12 : 10);
          }
          return powerModifier(-power);
        },
        fuel: {
          Infernite: 5,
          Coal: 100,
          Oil: 80
        },
        effect(wiki) {
          let fuel = $(this)[0].fuel;
          return `<div>${loc("space_dwarf_reactor_effect1", [-$(this)[0].powered(wiki)])}</div><div class="has-text-caution">${loc("portal_inferno_power_effect", [fuel.Infernite, global.resource.Infernite.name, fuel.Coal, global.resource.Coal.name, fuel.Oil, global.resource.Oil.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("inferno_power", "portal");
            global.portal.inferno_power.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["inferno_power", "portal"]
          };
        },
        post() {
          vBind({ el: `#foundry` }, "update");
        }
      },
      ancient_pillars: {
        id: "portal-ancient_pillars",
        title: loc("portal_ancient_pillars_title"),
        desc: loc("portal_ancient_pillars_desc"),
        reqs: { hell_ruins: 2 },
        queue_complete() {
          return global.tech["pillars"] && global.tech.pillars === 1 && global.race.universe !== "micro" ? 1 : 0;
        },
        cost: {
          Harmony(offset, wiki) {
            if (offset !== void 0) {
              return offset + Object.keys(global.pillars).length < Object.keys(races).length - 1 ? 1 : 0;
            }
            return global.race.universe !== "micro" && global.tech["pillars"] && global.tech.pillars === 1 ? 1 : 0;
          },
          Scarletite(offset, wiki) {
            if (offset !== void 0) {
              let pillars = offset + Object.keys(global.pillars).length;
              return pillars < Object.keys(races).length - 1 ? pillars * 125e3 + 1e6 : 0;
            }
            return global.race.universe !== "micro" && global.tech["pillars"] && global.tech.pillars === 1 ? Object.keys(global.pillars).length * 125e3 + 1e6 : 0;
          }
        },
        count() {
          return Object.keys(races).length - 1;
        },
        on() {
          return Object.keys(global.pillars).length;
        },
        effect(wiki) {
          let pillars = (wiki?.count ?? 0) + Object.keys(global.pillars).length;
          if (pillars >= 1) {
            return `<div>${loc("portal_ancient_pillars_effect2", [Object.keys(races).length - 1, pillars])}</div>`;
          } else {
            return `<div>${loc("portal_ancient_pillars_effect", [Object.keys(races).length - 1])}</div>`;
          }
        },
        action(args) {
          if (global.tech["pillars"] && global.tech.pillars === 1 && global.race.universe !== "micro") {
            if (payCosts($(this)[0])) {
              global.pillars[global.race.species] = alevel();
              global.tech.pillars = 2;
              spatialReasoning(0, false, true);
              calcPillar(true);
              if (global.race["warlord"]) {
                global.stats.warlord.p = true;
                checkWarlordAchieve();
              } else if (global.tech?.hell_gate >= 2) {
                towerSize(true);
                fortressModules.prtl_gate.west_tower.post();
                fortressModules.prtl_gate.east_tower.post();
              }
              unlockAchieve("resonance");
              vBind({ el: `#portal-ancient_pillars` }, "update");
              return true;
            }
          }
          return false;
        }
      }
    },
    prtl_gate: {
      info: {
        name: loc("portal_gate_name"),
        desc() {
          return `${loc("portal_gate_desc")} ${loc(global.tech["wtower"] && global.tech["etower"] ? "portal_gate_open" : "portal_gate_closed")}`;
        },
        support: "guard_post",
        hide_support: true,
        prop() {
          let desc = ` - <span class="has-text-advanced">${loc("portal_ruins_security")}:</span> <span class="has-text-caution">{{ on | filter('army') }}</span>`;
          desc = desc + ` - <span class="has-text-advanced">${loc("portal_ruins_supressed")}:</span> <span class="has-text-caution">{{ on | filter('sup') }}</span>`;
          return desc;
        },
        filter(v, type) {
          let sup = hellSupression("gate");
          switch (type) {
            case "army":
              return Math.round(sup.rating);
            case "sup":
              let supress = +(sup.supress * 100).toFixed(2);
              return `${supress}%`;
          }
        }
      },
      gate_mission: {
        id: "portal-gate_mission",
        title: loc("portal_gate_mission_title"),
        desc: loc("portal_gate_mission_title"),
        reqs: { high_tech: 18 },
        grant: ["hell_gate", 1],
        queue_complete() {
          return global.tech.hell_gate >= 1 ? 0 : 1;
        },
        cost: {
          Money() {
            return 25e7;
          },
          Knowledge() {
            return 275e5;
          }
        },
        effect: loc("portal_gate_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_gate_mission_result"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        }
      },
      west_tower: {
        id: "portal-west_tower",
        title: loc("portal_west_tower"),
        desc(wiki) {
          let size = towerSize();
          if (!global.portal.hasOwnProperty("west_tower") || global.portal.west_tower.count < size || wiki) {
            return `<div>${loc("portal_west_tower")}</div><div class="has-text-special">${loc("requires_segments", [size])}</div>`;
          } else {
            return `<div>${loc("portal_west_tower")}</div>`;
          }
        },
        reqs: { hell_gate: 2 },
        queue_size: 25,
        queue_complete() {
          return towerSize() - global.portal.west_tower.count;
        },
        cost: {
          Money(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(1e7, wiki) : 0;
          },
          Stone(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(1e5, wiki) : 0;
          },
          Uranium(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(1e3, wiki) : 0;
          },
          Adamantite(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(18e3, wiki) : 0;
          },
          Vitreloy(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(25e3, wiki) : 0;
          },
          Soul_Gem(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? 1 : 0;
          },
          Scarletite(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0) < towerSize() ? towerPrice(5e3, wiki) : 0;
          }
        },
        effect(wiki) {
          let size = towerSize();
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("west_tower") ? global.portal.west_tower.count : 0);
          if (count < size) {
            let remain = size - count;
            return `<div>${loc("portal_tower_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div><div class="has-text-caution">${loc("portal_tower_effect2")}</div>`;
          } else {
            return loc("portal_tower_effect");
          }
        },
        action(args) {
          if (global.portal.west_tower.count < towerSize() && payCosts($(this)[0])) {
            incrementStruct("west_tower", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["west_tower", "portal"]
          };
        },
        post() {
          if (global.portal.west_tower.count >= towerSize()) {
            global.tech["wtower"] = 1;
            if (global.tech["wtower"] && global.tech["etower"] && !global.tech["hell_lake"]) {
              global.tech["hell_lake"] = 1;
              global.settings.portal.lake = true;
              initStruct(fortressModules.prtl_lake.harbor);
              messageQueue(loc("portal_gate_open"), "info", false, ["progress", "hell"]);
              renderFortress();
            }
          }
        }
      },
      east_tower: {
        id: "portal-east_tower",
        title: loc("portal_east_tower"),
        desc(wiki) {
          let size = towerSize();
          if (!global.portal.hasOwnProperty("east_tower") || global.portal.east_tower.count < size || wiki) {
            return `<div>${loc("portal_east_tower")}</div><div class="has-text-special">${loc("requires_segments", [size])}</div>`;
          } else {
            return `<div>${loc("portal_east_tower")}</div>`;
          }
        },
        reqs: { hell_gate: 2 },
        queue_size: 25,
        queue_complete() {
          return towerSize() - global.portal.east_tower.count;
        },
        cost: {
          Money(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(1e7, wiki) : 0;
          },
          Stone(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(1e5, wiki) : 0;
          },
          Uranium(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(1e3, wiki) : 0;
          },
          Adamantite(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(18e3, wiki) : 0;
          },
          Vitreloy(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(25e3, wiki) : 0;
          },
          Soul_Gem(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? 1 : 0;
          },
          Scarletite(offset, wiki) {
            return (offset || 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0) < towerSize() ? towerPrice(5e3, wiki) : 0;
          }
        },
        effect(wiki) {
          let size = towerSize();
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("east_tower") ? global.portal.east_tower.count : 0);
          if (count < size) {
            let remain = size - count;
            return `<div>${loc("portal_tower_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div><div class="has-text-caution">${loc("portal_tower_effect2")}</div>`;
          } else {
            return loc("portal_tower_effect");
          }
        },
        action(args) {
          if (global.portal.east_tower.count < towerSize() && payCosts($(this)[0])) {
            incrementStruct("east_tower", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["east_tower", "portal"]
          };
        },
        post() {
          if (global.portal.east_tower.count >= towerSize()) {
            global.tech["etower"] = 1;
            if (global.tech["wtower"] && global.tech["etower"] && !global.tech["hell_lake"]) {
              global.tech["hell_lake"] = 1;
              global.settings.portal.lake = true;
              global.portal["harbor"] = { count: 0, on: 0, support: 0, s_max: 0 };
              messageQueue(loc("portal_gate_open"), "info", false, ["progress", "hell"]);
              renderFortress();
            }
          }
        }
      },
      gate_turret: {
        id: "portal-gate_turret",
        title: loc("portal_gate_turret_title"),
        desc() {
          return `<div>${loc("portal_gate_turret_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_gate: 3 },
        powered() {
          return powerCostMod(6);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("gate_turret", offset, 375e4, 1.22, "portal");
          },
          Iron(offset) {
            return spaceCostMultiplier("gate_turret", offset, 425e4, 1.22, "portal");
          },
          Elerium(offset) {
            return spaceCostMultiplier("gate_turret", offset, 275, 1.22, "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("gate_turret", offset, 85e4, 1.22, "portal");
          }
        },
        effect() {
          let security = 100;
          if (global.race["holy"]) {
            security *= 1 + traits.holy.vars()[1] / 100;
          }
          let unicornFathom = fathomCheck("unicorn");
          if (unicornFathom > 0) {
            security *= 1 + traits.holy.vars(1)[1] / 100 * unicornFathom;
          }
          let min = global.tech.hell_gun >= 2 ? 65 : 40;
          let max = global.tech.hell_gun >= 2 ? 100 : 60;
          return `<div>${loc("portal_gate_turret_effect", [Math.round(security)])}</div><div>${loc("portal_gate_turret_effect2", [min, max])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("gate_turret", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["gate_turret", "portal"]
          };
        },
        postPower() {
          vBind({ el: `#srprtl_gate` }, "update");
        }
      },
      infernite_mine: {
        id: "portal-infernite_mine",
        title: loc("portal_infernite_mine_title"),
        desc() {
          return `<div>${loc("portal_infernite_mine_title")}</div><div class="has-text-special">${loc("requires_security")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_gate: 4 },
        powered() {
          return powerCostMod(5);
        },
        powerBalancer() {
          return [{ r: "Infernite", k: "lpmod" }];
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("infernite_mine", offset, 75e6, 1.26, "portal");
          },
          Alloy(offset) {
            return spaceCostMultiplier("infernite_mine", offset, 245e4, 1.26, "portal");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("infernite_mine", offset, 165e4, 1.26, "portal");
          },
          Wrought_Iron(offset) {
            return spaceCostMultiplier("infernite_mine", offset, 68e4, 1.26, "portal");
          }
        },
        effect(wiki) {
          let mining = production("infernite_mine", "", wiki);
          return `<div>${loc("portal_infernite_mine_effect", [+mining.toFixed(3)])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("infernite_mine", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["infernite_mine", "portal"]
          };
        }
      }
    },
    prtl_lake: {
      info: {
        name: loc("portal_lake_name"),
        desc: loc("portal_lake_desc"),
        support: "harbor"
      },
      lake_mission: {
        id: "portal-lake_mission",
        title: loc("portal_lake_mission_title"),
        desc: loc("portal_lake_mission_title"),
        reqs: { hell_lake: 1 },
        grant: ["hell_lake", 2],
        queue_complete() {
          return global.tech.hell_lake >= 2 ? 0 : 1;
        },
        cost: {
          Money() {
            return 5e8;
          },
          Oil() {
            return 75e4;
          },
          Helium_3() {
            return 6e5;
          }
        },
        effect: loc("portal_lake_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_lake_mission_result"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        }
      },
      harbor: {
        id: "portal-harbor",
        title() {
          return loc("portal_harbor_title");
        },
        desc() {
          return `<div>${loc("portal_harbor_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_lake: 3 },
        powered(wiki) {
          let num_cooling_tower = wiki ? global.portal?.cooling_tower?.on ?? 0 : p_on["cooling_tower"];
          let factor = num_cooling_tower || 0;
          return +powerCostMod(500 * 0.92 ** factor).toFixed(2);
        },
        support() {
          return 1;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("harbor", offset, 225e6, spireCreep(1.18), "portal");
          },
          Cement(offset) {
            return spaceCostMultiplier("harbor", offset, 5e7, spireCreep(1.18), "portal");
          },
          Iridium(offset) {
            return spaceCostMultiplier("harbor", offset, 75e5, spireCreep(1.18), "portal");
          },
          Infernite(offset) {
            return spaceCostMultiplier("harbor", offset, 8e5, spireCreep(1.18), "portal");
          },
          Stanene(offset) {
            return spaceCostMultiplier("harbor", offset, 175e5, spireCreep(1.18), "portal");
          }
        },
        wide: true,
        res() {
          let list = [
            "Oil",
            "Alloy",
            "Polymer",
            "Iridium",
            "Helium_3",
            "Deuterium",
            "Neutronium",
            "Adamantite",
            "Infernite",
            "Nano_Tube",
            "Graphene",
            "Stanene",
            "Bolognium",
            "Orichalcum"
          ];
          if (global.race["warlord"]) {
            list.push("Lumber");
            list.push("Stone");
            list.push("Copper");
            list.push("Iron");
            list.push("Aluminium");
            list.push("Cement");
            list.push("Steel");
            list.push("Titanium");
            list.push("Coal");
          }
          return list;
        },
        val(res) {
          switch (res) {
            case "Oil":
              return 3e4;
            case "Alloy":
              return 25e4;
            case "Polymer":
              return 25e4;
            case "Iridium":
              return 2e5;
            case "Helium_3":
              return 18e3;
            case "Deuterium":
              return 12e3;
            case "Neutronium":
              return 18e4;
            case "Adamantite":
              return 15e4;
            case "Infernite":
              return 75e3;
            case "Nano_Tube":
              return 75e4;
            case "Graphene":
              return 12e5;
            case "Stanene":
              return 12e5;
            case "Bolognium":
              return 13e4;
            case "Orichalcum":
              return 13e4;
            case "Lumber":
              return 15e5;
            case "Stone":
              return 15e5;
            case "Copper":
              return 65e4;
            case "Iron":
              return 65e4;
            case "Steel":
              return 65e4;
            case "Aluminium":
              return 425e3;
            case "Titanium":
              return 35e4;
            case "Cement":
              return 55e4;
            case "Coal":
              return 275e3;
            default:
              return 0;
          }
        },
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = 1;
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 12) {
            multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech?.asphodel >= 13 ? 0.12 : 0.1);
          }
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+spatialReasoning($(this)[0].val(res) * multiplier).toFixed(0), 1);
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage = storage + "</div>";
          return `<div>${loc("portal_harbor_effect", [1])}</div>${storage}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered(wiki)])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("harbor", "portal");
            if (powerOnNewStruct($(this)[0])) {
              let multiplier = 1;
              if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 12) {
                multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech?.asphodel >= 13 ? 0.12 : 0.1);
              }
              for (const res of $(this)[0].res()) {
                if (global.resource[res].display) {
                  global.resource[res].max += spatialReasoning($(this)[0].val(res) * multiplier);
                }
              }
              ;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0 },
            p: ["harbor", "portal"]
          };
        }
      },
      cooling_tower: {
        id: "portal-cooling_tower",
        title: loc("portal_cooling_tower_title"),
        desc() {
          return `<div>${loc("portal_cooling_tower_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_lake: 6 },
        powered() {
          return powerCostMod(10);
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("cooling_tower", offset, 25e7, 1.2, "portal");
          },
          Polymer(offset) {
            return spaceCostMultiplier("cooling_tower", offset, 12e6, 1.2, "portal");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("cooling_tower", offset, 85e5, 1.2, "portal");
          },
          Brick(offset) {
            return spaceCostMultiplier("cooling_tower", offset, 25e4, 1.2, "portal");
          }
        },
        effect() {
          return `<div>${loc("portal_cooling_tower_effect", [8])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("cooling_tower", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["cooling_tower", "portal"]
          };
        }
      },
      bireme: {
        id: "portal-bireme",
        title: loc("portal_bireme_title"),
        desc() {
          return `<div>${loc("portal_bireme_title")}</div><div class="has-text-special">${loc("space_support", [loc("lake")])}</div>`;
        },
        reqs: { hell_lake: 4 },
        powered() {
          return 0;
        },
        s_type: "lake",
        support() {
          return -1;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("bireme", offset, 19e7, 1.24, "portal");
          },
          Helium_3(offset) {
            return spaceCostMultiplier("bireme", offset, 225e3, 1.24, "portal");
          },
          Adamantite(offset) {
            return spaceCostMultiplier("bireme", offset, 15e6, 1.24, "portal");
          },
          Nano_Tube(offset) {
            return spaceCostMultiplier("bireme", offset, 18e6, 1.24, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("bireme", offset, 10, 1.24, "portal");
          },
          Scarletite(offset) {
            return spaceCostMultiplier("bireme", offset, 125e3, 1.24, "portal");
          }
        },
        effect() {
          let rating = global.blood["spire"] && global.blood.spire >= 2 ? 20 : 15;
          return `<div class="has-text-caution">${loc("space_used_support", [loc("lake")])}</div><div>${loc("portal_bireme_effect", [rating])}</div><div class="has-text-caution">${loc("galaxy_starbase_mil_crew", [$(this)[0].ship.mil()])}</div>`;
        },
        ship: {
          civ() {
            return 0;
          },
          mil() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 2 : 2;
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("bireme", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, crew: 0, mil: 0 },
            p: ["bireme", "portal"]
          };
        }
      },
      transport: {
        id: "portal-transport",
        title() {
          return loc("portal_transport_title");
        },
        desc() {
          return `<div>${loc("portal_transport_title")}</div><div class="has-text-special">${loc("space_support", [loc("lake")])}</div>`;
        },
        reqs: { hell_lake: 5 },
        powered() {
          return 0;
        },
        s_type: "lake",
        support() {
          return -1;
        },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("transport", offset, 3e8, 1.22, "portal");
          },
          Oil(offset) {
            return spaceCostMultiplier("transport", offset, 18e4, 1.22, "portal");
          },
          Alloy(offset) {
            return spaceCostMultiplier("transport", offset, 18e6, 1.22, "portal");
          },
          Graphene(offset) {
            return spaceCostMultiplier("transport", offset, 125e5, 1.22, "portal");
          },
          Soul_Gem(offset) {
            return spaceCostMultiplier("transport", offset, 5, 1.22, "portal");
          },
          Scarletite(offset) {
            return spaceCostMultiplier("transport", offset, 25e4, 1.22, "portal");
          }
        },
        effect(wiki) {
          let rating = global.blood["spire"] && global.blood.spire >= 2 ? 0.8 : 0.85;
          let num_on = wiki ? global.portal?.bireme?.on ?? 0 : gal_on["bireme"];
          let bireme = +(rating ** num_on * 100).toFixed(1);
          return `<div class="has-text-caution">${loc("space_used_support", [loc("lake")])}</div><div>${loc("portal_transport_effect", [global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 4 ? 8 : 5])}</div><div class="has-text-danger">${loc("portal_transport_effect2", [bireme])}</div><div class="has-text-caution">${loc("galaxy_starbase_civ_crew", [$(this)[0].ship.civ()])}</div>`;
        },
        special: true,
        sAction() {
          global.settings.civTabs = 4;
          global.settings.marketTabs = 3;
          if (!global.settings.tabLoad) {
            loadTab("mTabResource");
            clearPopper(`portal-transport`);
          }
        },
        ship: {
          civ() {
            return global.race["high_pop"] ? traits.high_pop.vars()[0] * 3 : 3;
          },
          mil() {
            return 0;
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("transport", "portal");
            powerOnNewStruct($(this)[0]);
            if (!global.settings.portal.spire) {
              global.settings.portal.spire = true;
              global.settings.showCargo = true;
              global.tech["hell_spire"] = 1;
              initStruct(fortressModules.prtl_spire.purifier);
              initStruct(fortressModules.prtl_spire.port);
              messageQueue(loc("portal_transport_unlocked"), "info", false, ["progress", "hell"]);
              drawResourceTab("supply");
              renderFortress();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              crew: 0,
              mil: 0,
              cargo: {
                used: 0,
                max: 0,
                Crystal: 0,
                Lumber: 0,
                Stone: 0,
                Furs: 0,
                Copper: 0,
                Iron: 0,
                Aluminium: 0,
                Cement: 0,
                Coal: 0,
                Oil: 0,
                Uranium: 0,
                Steel: 0,
                Titanium: 0,
                Alloy: 0,
                Polymer: 0,
                Iridium: 0,
                Helium_3: 0,
                Deuterium: 0,
                Neutronium: 0,
                Adamantite: 0,
                Infernite: 0,
                Elerium: 0,
                Nano_Tube: 0,
                Graphene: 0,
                Stanene: 0,
                Bolognium: 0,
                Vitreloy: 0,
                Orichalcum: 0,
                Plywood: 0,
                Brick: 0,
                Wrought_Iron: 0,
                Sheet_Metal: 0,
                Mythril: 0,
                Aerogel: 0,
                Nanoweave: 0,
                Scarletite: 0
              }
            },
            p: ["transport", "portal"]
          };
        }
      },
      oven: {
        id: "portal-oven",
        title: loc("portal_oven_title"),
        desc(wiki) {
          if (!global.portal.hasOwnProperty("oven") || global.portal.oven.count < 100 || wiki) {
            return `<div>${loc("portal_oven_title")}</div><div class="has-text-special">${loc("requires_segments", [100])}</div>` + (global.portal.hasOwnProperty("oven") && global.portal.oven.count >= 100 ? `<div class="has-text-special">${loc("requires_power")}</div>` : ``);
          }
        },
        reqs: { dish: 2 },
        condition() {
          return global.portal.oven.count < 100;
        },
        queue_size: 10,
        queue_complete() {
          return 100 - global.portal.oven.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0) < 100 ? 19e7 : 0;
          },
          Steel(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0) < 100 ? 2e6 : 0;
          },
          Infernite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0) < 100 ? 6e5 : 0;
          },
          Bolognium(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0) < 100 ? 1e6 : 0;
          },
          Scarletite(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0) < 100 ? 15e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("oven") ? global.portal.oven.count : 0);
          if (count < 100) {
            let remain = 100 - count;
            return `<div>${loc("portal_oven_effect1")}</div><div class="has-text-special">${loc("requires_segments", [remain])}</div>`;
          } else {
            return fortressModules.prtl_lake.oven_complete.effect();
          }
        },
        action(args) {
          if (global.portal.oven.count < 100 && payCosts($(this)[0])) {
            global.portal["oven"].count++;
            if (global.portal.oven.count >= 100) {
              global.tech["dish"] = 3;
              initStruct(fortressModules.prtl_lake.oven_complete);
              incrementStruct("oven_complete", "portal");
              if (global.settings.alwaysPower) {
                powerOnNewStruct(fortressModules.prtl_lake.oven_complete);
              }
              initStruct(fortressModules.prtl_lake.devilish_dish);
              renderFortress();
              clearPopper();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["oven", "portal"]
          };
        }
      },
      oven_complete: {
        id: "portal-oven_complete",
        title: loc("portal_oven_title"),
        desc() {
          return `<div>${loc("portal_oven_title")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        wiki: false,
        reqs: { dish: 3 },
        condition() {
          return global.portal.oven.count >= 100;
        },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect(wiki) {
          let fuel = $(this)[0].p_fuel();
          return `<div>${loc(`portal_oven_desc`)}</div>${global.tech["dish"] === 4 ? `<div class="has-text-special">${loc("portal_oven_desc2")}</div>` : ``}<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}, ${loc("spend", [fuel.a, fuel.r])}</div>`;
        },
        powered() {
          return powerCostMod(3500);
        },
        p_fuel() {
          return { r: "Infernite", a: 225 };
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["oven_complete", "portal"]
          };
        }
      },
      devilish_dish: {
        id: "portal-devilish_dish",
        title: loc("portal_devilish_dish_title"),
        desc: loc("portal_devilish_dish_title"),
        reqs: { dish: 3 },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          const progress = global.portal["devilish_dish"] ? global.portal["devilish_dish"].done : 0;
          return `<div>${loc(`portal_devilish_dish_desc`, [progress.toFixed(1)])}</div><div>${loc(`portal_devilish_dish_flavor${progress >= 100 ? 6 : Math.ceil(progress / 20)}`)}</div>`;
        },
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 0, done: 0, time: 0 },
            p: ["devilish_dish", "portal"]
          };
        }
      },
      dish_soul_steeper: {
        id: "portal-dish_soul_steeper",
        title: loc("portal_dish_soul_steeper_title"),
        desc: loc("portal_dish_soul_steeper_desc"),
        reqs: { dish: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("dish_soul_steeper", offset, 75e7, spireCreep(1.3), "portal");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("dish_soul_steeper", offset, 12e6, spireCreep(1.3), "portal");
          },
          Scarletite(offset) {
            return spaceCostMultiplier("dish_soul_steeper", offset, 3e5, spireCreep(1.3), "portal");
          }
        },
        powered() {
          return 0;
        },
        effect() {
          return `<div>${loc("portal_dish_soul_steeper_effect1")}</div><div class="has-text-danger">${loc("portal_dish_soul_steeper_effect2", [3 + (global.race["malnutrition"] ? 1 : 0) + (global.race["angry"] ? -1 : 0)])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.portal["dish_soul_steeper"].count++;
            global.portal["dish_soul_steeper"].on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["dish_soul_steeper", "portal"]
          };
        },
        flair: loc("portal_dish_soul_steeper_flair")
      },
      dish_life_infuser: {
        id: "portal-dish_life_infuser",
        title: loc("portal_dish_life_infuser_title"),
        desc: loc("portal_dish_life_infuser_desc"),
        reqs: { dish: 5 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("dish_life_infuser", offset, 28e7, spireCreep(1.2), "portal");
          },
          Bolognium(offset) {
            return spaceCostMultiplier("dish_life_infuser", offset, 8e6, spireCreep(1.2), "portal");
          },
          Orichalcum(offset) {
            return spaceCostMultiplier("dish_life_infuser", offset, 8e6, spireCreep(1.2), "portal");
          },
          Species(offset) {
            return popCost(10);
          }
        },
        powered() {
          return 0;
        },
        effect() {
          return `<div>${loc("portal_dish_life_infuser_effect1", [15])}</div><div class="has-text-danger">${loc("portal_dish_life_infuser_effect2", [5])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.portal["dish_life_infuser"].count++;
            global.portal["dish_life_infuser"].on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["dish_life_infuser", "portal"]
          };
        },
        flair: loc("portal_dish_life_infuser_flair")
      }
    },
    prtl_spire: {
      info: {
        name: loc("portal_spire_name"),
        desc: loc("portal_spire_desc"),
        support: "purifier",
        prop() {
          let desc = ` - <span class="has-text-advanced">${loc("portal_spire_supply")}:</span> <span class="has-text-caution">{{ supply | filter }} / {{ sup_max | filter }}</span>`;
          return desc + ` (<span class="has-text-success">+{{ diff | filter(2) }}/s</span>)`;
        },
        filter(v, fix) {
          let val = fix ? +v.toFixed(fix) : Math.floor(v);
          return val.toLocaleString();
        }
      },
      spire_mission: {
        id: "portal-spire_mission",
        title: loc("portal_spire_mission_title"),
        desc: loc("portal_spire_mission_title"),
        reqs: { hell_spire: 1 },
        grant: ["hell_spire", 2],
        queue_complete() {
          return global.tech.hell_spire >= 2 ? 0 : 1;
        },
        cost: {
          Species() {
            return popCost(50);
          },
          Oil() {
            return 9e5;
          },
          Helium_3() {
            return 75e4;
          },
          Structs() {
            return {
              portal: {
                bireme: { s: "prtl_lake", count: 1, on: 1 },
                transport: { s: "prtl_lake", count: 1, on: 1 }
              }
            };
          }
        },
        effect: loc("portal_spire_mission_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            messageQueue(loc("portal_spire_mission_result"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        },
        flair: loc("portal_spire_mission_flair")
      },
      purifier: {
        id: "portal-purifier",
        title() {
          return global.race["warlord"] ? loc("portal_putrifier_title") : loc("portal_purifier_title");
        },
        desc() {
          return `<div>${global.race["warlord"] ? loc("portal_putrifier_desc") : loc("portal_purifier_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        reqs: { hell_spire: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("purifier", offset, 85e6, spireCreep(1.15), "portal");
          },
          Supply(offset) {
            return global.portal["purifier"] && global.portal.purifier.count === 0 ? 100 : spaceCostMultiplier("purifier", offset, 4200, spireCreep(1.2), "portal");
          }
        },
        powered() {
          return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 2 ? powerCostMod(100) : powerCostMod(125);
        },
        support() {
          let base = global.tech["b_stone"] && global.tech.b_stone >= 3 ? 1.25 : 1;
          if (global.tech["hell_spire"] && global.tech.hell_spire >= 11 && global.eden["asphodel_harvester"] && support_on["asphodel_harvester"]) {
            base *= 1 + support_on["asphodel_harvester"] / 50;
          }
          return +base.toFixed(2);
        },
        effect() {
          return `<div>${loc("portal_purifier_effect", [$(this)[0].support()])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("purifier", "portal");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, support: 0, s_max: 0, supply: 0, sup_max: 100, diff: 0 },
            p: ["purifier", "portal"]
          };
        }
      },
      port: {
        id: "portal-port",
        title: loc("portal_port_title"),
        desc() {
          return `<div>${loc("portal_port_title")}</div><div class="has-text-special">${loc("portal_spire_support")}</div>`;
        },
        reqs: { hell_spire: 3 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("port", offset, 135e6, spireCreep(1.2), "portal");
          },
          Supply(offset) {
            return global.portal.hasOwnProperty("port") && global.portal.port.count === 0 ? 100 : spaceCostMultiplier("port", offset, 6250, spireCreep(1.2), "portal");
          }
        },
        powered() {
          return 0;
        },
        s_type: "spire",
        support() {
          return -1;
        },
        effect(wiki) {
          let port_value = 1e4;
          let num_base_camps_on = wiki ? global.portal?.base_camp?.on ?? 0 : spire_on["base_camp"];
          if (num_base_camps_on > 0) {
            port_value *= 1 + num_base_camps_on * 0.4;
          }
          return `<div class="has-text-caution">${loc("portal_port_effect1", [$(this)[0].support()])}</div><div>${loc("portal_port_effect2", [Math.round(port_value)])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("port", "portal");
            powerOnNewStruct($(this)[0]);
            if (global.tech.hell_spire === 3) {
              global.tech.hell_spire = 4;
              initStruct(fortressModules.prtl_spire.base_camp);
              renderFortress();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["port", "portal"]
          };
        }
      },
      base_camp: {
        id: "portal-base_camp",
        title: loc("portal_base_camp_title"),
        desc() {
          return `<div>${loc("portal_base_camp_title")}</div><div class="has-text-special">${loc("portal_spire_support")}</div>`;
        },
        reqs: { hell_spire: 4 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("base_camp", offset, 425e6, spireCreep(1.2), "portal");
          },
          Supply(offset) {
            return spaceCostMultiplier("base_camp", offset, 5e4, spireCreep(1.2), "portal");
          }
        },
        powered() {
          return 0;
        },
        s_type: "spire",
        support() {
          return -1;
        },
        effect() {
          return `<div class="has-text-caution">${loc("portal_port_effect1", [$(this)[0].support()])}</div><div>${loc("portal_base_camp_effect", [40])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("base_camp", "portal");
            powerOnNewStruct($(this)[0]);
            if (global.tech.hell_spire === 4) {
              global.tech.hell_spire = 5;
              initStruct(fortressModules.prtl_spire.bridge);
              messageQueue(loc("portal_spire_bridge_collapse"), "info", false, ["progress", "hell"]);
              renderFortress();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["base_camp", "portal"]
          };
        }
      },
      bridge: {
        id: "portal-bridge",
        title: loc("portal_bridge_title"),
        desc(wiki) {
          if (!global.portal.hasOwnProperty("bridge") || global.portal.bridge.count < 10 || wiki) {
            return `<div>${loc("portal_bridge_title")}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("portal_bridge_title")}</div>`;
          }
        },
        reqs: { hell_spire: 5 },
        not_trait: ["warlord"],
        queue_size: 1,
        queue_complete() {
          return 10 - global.portal.bridge.count;
        },
        cost: {
          Species(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("bridge") ? global.portal.bridge.count : 0) < 10 ? popCost(10) : 0;
          },
          Money(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("bridge") ? global.portal.bridge.count : 0) < 10 ? 5e8 : 0;
          },
          Supply(offset) {
            return (offset || 0) + (global.portal.hasOwnProperty("bridge") ? global.portal.bridge.count : 0) < 10 ? 1e5 : 0;
          }
        },
        effect(wiki) {
          let size = 10;
          let count = (wiki?.count ?? 0) + (global.portal.hasOwnProperty("bridge") ? global.portal.bridge.count : 0);
          if (count < size) {
            let remain = size - count;
            return `<div>${loc("portal_bridge_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div><div class="has-text-caution">${loc("portal_bridge_effect2")}</div>`;
          } else {
            return loc("portal_bridge_complete");
          }
        },
        action(args) {
          if (global.portal.bridge.count < 10 && payCosts($(this)[0])) {
            incrementStruct("bridge", "portal");
            if (global.portal.bridge.count >= 10) {
              initStruct(fortressModules.prtl_spire.sphinx);
              global.tech.hell_spire = 6;
              renderFortress();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["bridge", "portal"]
          };
        }
      },
      sphinx: {
        id: "portal-sphinx",
        title() {
          return global.race["warlord"] ? loc("portal_sphinx_warlord") : global.tech.hell_spire === 7 ? loc("portal_sphinx_solve") : loc("portal_sphinx_title");
        },
        desc() {
          return global.race["warlord"] ? loc("portal_sphinx_warlord_desc") : loc("portal_sphinx_desc");
        },
        reqs: { hell_spire: 6 },
        queue_complete() {
          return 8 - global.tech.hell_spire;
        },
        cost: {
          Knowledge(offset) {
            let count = (offset || 0) + (!global.tech["hell_spire"] || global.tech.hell_spire < 7 ? 0 : global.tech.hell_spire === 7 ? 1 : 2);
            return count === 1 ? 5e7 : count === 0 ? 4e7 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (!global.tech["hell_spire"] || global.tech.hell_spire < 7 ? 0 : global.tech.hell_spire === 7 ? 1 : 2);
          if (count === 1) {
            return loc("portal_sphinx_effect2");
          } else if (count === 2) {
            return global.race["warlord"] ? loc("portal_sphinx_warlord_effect") : loc("portal_sphinx_effect3");
          }
          return loc("portal_sphinx_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.tech.hell_spire === 6) {
              global.tech.hell_spire = 7;
              messageQueue(loc("portal_sphinx_msg"), "info", false, ["progress", "hell"]);
              renderFortress();
              return true;
            } else if (global.tech.hell_spire === 7) {
              global.tech.hell_spire = 8;
              renderFortress();
              messageQueue(loc("portal_sphinx_answer_msg"), "info", false, ["progress", "hell"]);
              return true;
            }
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["sphinx", "portal"]
          };
        }
      },
      bribe_sphinx: {
        id: "portal-bribe_sphinx",
        title: loc("portal_sphinx_bribe"),
        desc: loc("portal_sphinx_desc"),
        reqs: { hell_spire: 7 },
        not_trait: ["warlord"],
        condition() {
          return global.tech["hell_spire"] && global.tech.hell_spire === 7 && !global.tech["sphinx_bribe"] ? true : false;
        },
        cost: {
          Soul_Gem() {
            return 250;
          },
          Supply() {
            return 5e5;
          }
        },
        effect() {
          return loc("portal_sphinx_bribe_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.tech.hell_spire === 7 && !global.tech["sphinx_bribe"]) {
              global.tech["sphinx_bribe"] = 1;
              global.resource.Codex.display = true;
              global.resource.Codex.amount = 1;
              messageQueue(loc("portal_sphinx_bribe_msg"), "info", false, ["progress", "hell"]);
              return true;
            }
          }
          return false;
        },
        post() {
          if (global.tech["sphinx_bribe"]) {
            drawTech();
            renderFortress();
            clearPopper("portal-bribe_sphinx");
          }
        }
      },
      spire_survey: {
        id: "portal-spire_survey",
        title: loc("portal_spire_survey_title"),
        desc: loc("portal_spire_survey_title"),
        reqs: { hell_spire: 8 },
        grant: ["hell_spire", 9],
        not_trait: ["warlord"],
        queue_complete() {
          return global.tech.hell_spire >= 9 ? 0 : 1;
        },
        cost: {
          Oil() {
            return 12e5;
          },
          Helium_3() {
            return 9e5;
          }
        },
        effect: loc("portal_spire_survey_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            initStruct(fortressModules.prtl_spire.mechbay);
            initStruct(fortressModules.prtl_spire.spire);
            genSpireFloor();
            messageQueue(loc("portal_spire_survey_msg"), "info", false, ["progress", "hell"]);
            return true;
          }
          return false;
        },
        post() {
          if (global.tech["hell_spire"] && global.tech.hell_spire === 9) {
            renderFortress();
            clearPopper("portal-spire_survey");
          }
        }
      },
      mechbay: {
        id: "portal-mechbay",
        title() {
          return global.race["warlord"] ? loc("portal_demon_artificer_title") : loc("portal_mechbay_title");
        },
        desc() {
          return `<div>${$(this)[0].title()}</div><div class="has-text-special">${loc("portal_spire_support")}</div>`;
        },
        reqs: { hell_spire: 9 },
        cost: {
          Money(offset) {
            return spaceCostMultiplier("mechbay", offset, 1e8, 1.2, "portal");
          },
          Supply(offset) {
            return spaceCostMultiplier("mechbay", offset, 25e4, 1.2, "portal");
          }
        },
        powered() {
          return 0;
        },
        s_type: "spire",
        support() {
          return -1;
        },
        special: true,
        sAction() {
          global.settings.civTabs = 2;
          global.settings.govTabs = 4;
          if (!global.settings.tabLoad) {
            loadTab("mTabCivic");
            clearPopper(`portal-mechbay`);
          }
        },
        effect() {
          let bay = global.portal.hasOwnProperty("mechbay") ? global.portal.mechbay.bay : 0;
          let max = global.portal.hasOwnProperty("mechbay") ? global.portal.mechbay.max : 0;
          return `<div class="has-text-caution">${loc("portal_port_effect1", [$(this)[0].support()])}</div><div>${loc(global.race["warlord"] ? "portal_demon_artificer_effect" : "portal_mechbay_effect")}</div><div>${loc("portal_mechbay_effect2", [bay, max])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mechbay", "portal");
            if (powerOnNewStruct($(this)[0])) {
              global.portal.mechbay.max += 25;
            }
            global.settings.showMechLab = true;
            if (global.portal.mechbay.count === 1) {
              messageQueue(loc("portal_mechbay_unlocked"), "info", false, ["progress", "hell"]);
              drawMechLab();
              defineGovernor();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0, bay: 0, max: 0, active: 0, scouts: 0, mechs: [] },
            p: ["mechbay", "portal"]
          };
        },
        postPower() {
          updateMechbay();
        }
      },
      spire: {
        id: "portal-spire",
        title: loc("portal_spire_title"),
        desc: loc("portal_spire_title"),
        reqs: { hell_spire: 9 },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          let floor = global.portal.hasOwnProperty("spire") ? global.portal.spire.count : 0;
          let terrain = global.portal.hasOwnProperty("spire") ? `<span class="has-text-warning">${loc(`portal_spire_type_${global.portal.spire.type}`)}</span>` : "?";
          let status = ``;
          if (global.portal.hasOwnProperty("spire") && Object.keys(global.portal.spire.status).length > 0) {
            status = `<div>${loc("portal_spire_hazard", [Object.keys(global.portal.spire.status).map((v) => `<span class="has-text-warning">${loc(`portal_spire_status_${v}`)}</span>`).join(", ")])}</div>`;
          }
          let progress = global.portal.hasOwnProperty("spire") ? `<span class="has-text-warning">${+global.portal.spire.progress.toFixed(3)}%</span>` : "0%";
          let leftSide = `<div>${loc("portal_spire_effect", [floor])}</div><div>${loc("portal_spire_type", [terrain])}</div>${status}<div>${loc("portal_spire_progress", [progress])}</div>`;
          let boss = global.portal.hasOwnProperty("spire") ? global.portal.spire.boss : "crazed";
          let threat = `<div>${loc("portal_spire_mob", [`<span class="has-text-danger">${loc(`portal_mech_boss_${boss}`)}</span>`])}</div>`;
          let weak = `???`;
          let resist = `???`;
          if (global.stats["spire"]) {
            let resists = bossResists(boss);
            let level = $(this)[0].mscan();
            if (level > 0) {
              weak = loc(`portal_mech_weapon_${resists.w}`);
            }
            if (level >= 5) {
              resist = loc(`portal_mech_weapon_${resists.r}`);
            }
          }
          let rightSide = `<div>${threat}<div>${loc("portal_spire_mob_weak", [`<span class="has-text-warning">${weak}</span>`])}</div><div>${loc("portal_spire_mob_resist", [`<span class="has-text-warning">${resist}</span>`])}</div></div>`;
          return `<div class="split"><div>${leftSide}</div><div>${rightSide}</div></div>`;
        },
        mscan() {
          let level = 0;
          Object.keys(global.stats.spire).forEach(function(uni) {
            let boss = global.portal.hasOwnProperty("spire") ? global.portal.spire.boss : "crazed";
            if (global.stats.spire.hasOwnProperty(uni) && global.stats.spire[uni].hasOwnProperty(boss) && global.stats.spire[uni][boss] > level) {
              level = global.stats.spire[uni][boss];
            }
          });
          return level;
        },
        wide: true,
        action(args) {
          return false;
        },
        struct() {
          return {
            d: { count: 1, progress: 0, boss: "", type: "", status: {} },
            p: ["spire", "portal"]
          };
        }
      },
      waygate: {
        id: "portal-waygate",
        title: loc("portal_waygate_title"),
        desc(wiki) {
          if (!global.portal.hasOwnProperty("waygate") || global.tech["waygate"] && global.tech.waygate < 2 || wiki) {
            return `<div>${loc("portal_waygate_title")}</div><div class="has-text-special">${loc("requires_segments", [10])}</div>`;
          } else {
            return `<div>${loc("portal_waygate_title")}</div>`;
          }
        },
        reqs: { waygate: 1 },
        condition() {
          return global.tech["edenic"] && global.tech.edenic >= 2 ? false : true;
        },
        queue_size: 1,
        queue_complete() {
          return global.tech.waygate >= 2 ? 0 : 10 - global.portal.waygate.count;
        },
        cost: {
          Species(offset) {
            if (offset) {
              return offset + (global.portal.hasOwnProperty("waygate") ? global.portal.waygate.count : 0) < 10 ? popCost(25) : 0;
            }
            return !global.portal.hasOwnProperty("waygate") || global.tech["waygate"] && global.tech.waygate < 2 ? popCost(25) : 0;
          },
          Money(offset) {
            if (offset) {
              return offset + (global.portal.hasOwnProperty("waygate") ? global.portal.waygate.count : 0) < 10 ? 1e9 : 0;
            }
            return !global.portal.hasOwnProperty("waygate") || global.tech["waygate"] && global.tech.waygate < 2 ? 1e9 : 0;
          },
          Supply(offset) {
            if (offset) {
              return offset + (global.portal.hasOwnProperty("waygate") ? global.portal.waygate.count : 0) < 10 ? 5e5 : 0;
            }
            return !global.portal.hasOwnProperty("waygate") || global.tech["waygate"] && global.tech.waygate < 2 ? 5e5 : 0;
          },
          Blood_Stone(offset) {
            if (offset) {
              return offset + (global.portal.hasOwnProperty("waygate") ? global.portal.waygate.count : 0) < 10 ? 5 : 0;
            }
            return !global.portal.hasOwnProperty("waygate") || global.tech["waygate"] && global.tech.waygate < 2 ? 5 : 0;
          }
        },
        powered() {
          return global.portal.hasOwnProperty("waygate") && global.portal.waygate.count >= 10 ? 1 : 0;
        },
        power_reqs: { waygate: 2 },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.tech["waygate"] && global.tech.waygate >= 2 ? 10 : global.portal.hasOwnProperty("waygate") ? global.portal.waygate.count : 0);
          if (count >= 10) {
            let progress = global.portal.hasOwnProperty("waygate") ? `<span class="has-text-warning">${+global.portal.waygate.progress.toFixed(3)}%</span>` : "0%";
            return `<div>${loc("portal_waygate_open")}</div><div>${loc("portal_waygate_progress", [progress])}</div>`;
          } else {
            let size = 10;
            let remain = size - count;
            return `<div>${loc("portal_waygate_effect")}</div><div class="has-text-special">${loc("space_dwarf_collider_effect2", [remain])}</div>`;
          }
        },
        action(args) {
          if (global.portal.waygate.count < 10 && global.tech["waygate"] && global.tech.waygate === 1 && payCosts($(this)[0])) {
            incrementStruct("waygate", "portal");
            if (global.portal.waygate.count >= 10) {
              global.tech.waygate = 2;
              global.portal.waygate.count = 1;
              if (global.settings.alwaysPower) {
                global.portal.waygate.on = 1;
              }
              renderFortress();
              drawTech();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, progress: 0, on: 0 },
            p: ["waygate", "portal"]
          };
        }
      },
      edenic_gate: {
        id: "portal-edenic_gate",
        title(wiki) {
          return loc(global.tech["edenic"] && global.tech.edenic >= 3 ? "portal_edenic_gate_title" : "portal_waygate_title");
        },
        desc(wiki) {
          return $(this)[0].title();
        },
        reqs: { waygate: 3, edenic: 2 },
        queue_size: 1,
        queue_complete() {
          return global.tech.edenic >= 3 ? 0 : 1;
        },
        cost: {
          Money(o) {
            return global.tech["edenic"] && global.tech.edenic < 3 ? 1e10 : 0;
          },
          Supply(o) {
            return global.tech["edenic"] && global.tech.edenic < 3 ? 1e6 : 0;
          },
          Blessed_Essence(o) {
            return global.tech["edenic"] && global.tech.edenic < 3 ? 1 : 0;
          }
        },
        effect(wiki) {
          if (global.tech["edenic"] && global.tech.edenic <= 2) {
            return `<div>${loc("portal_edenic_gate_effect")}</div>`;
          } else {
            return `<div>${loc("portal_edenic_gate_effect_complete")}</div>`;
          }
        },
        action(args) {
          if (global.tech["edenic"] && global.tech.edenic === 2 && payCosts($(this)[0])) {
            global.tech.edenic = 3;
            global.settings.showEden = true;
            global.settings.eden.asphodel = true;
            global.settings.spaceTabs = 7;
            global.resource.Blessed_Essence.display = false;
            initStruct(actions.eden.eden_asphodel.encampment);
            renderFortress();
            renderEdenic();
            return true;
          }
          return false;
        }
      },
      bazaar: {
        id: "portal-bazaar",
        title: loc("portal_bazaar_title"),
        desc: loc("portal_bazaar_title"),
        reqs: { hellspawn: 8 },
        trait: ["warlord"],
        cost: {
          Money(offset) {
            return spaceCostMultiplier("bazaar", offset, 1e9, 1.25, "portal");
          },
          Supply(offset) {
            return spaceCostMultiplier("bazaar", offset, 25e4, 1.25, "portal");
          }
        },
        effect(wiki) {
          let vault = spatialReasoning(bank_vault() * (global.portal?.spire?.count || 1) / 3);
          vault = +vault.toFixed(0);
          let containers = (global.portal?.spire?.count || 1) * 8;
          let mon = global.portal?.spire?.count || 1;
          let desc = `<div>${loc("plus_max_resource", [`$${vault.toLocaleString()}`, loc("resource_Money_name")])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [mon, loc(`arpa_project_monument_title`)])}</div>`;
          desc += `<div>${loc("plus_max_resource", [containers, global.resource.Crates.name])}</div><div>${loc("plus_max_resource", [containers, global.resource.Containers.name])}</div>`;
          desc += `<div>${loc("city_trade_effect", [global.portal?.spire?.count || 1])}</div>`;
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("bazaar", "portal");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["bazaar", "portal"]
          };
        }
      }
    }
  };
  function spireCreep(base) {
    let creep = global.portal.hasOwnProperty("spire") && global.blood["spire"] ? base - (global.portal.spire.count - 1) / 2500 : base;
    return creep >= 1.01 ? creep : 1.01;
  }
  var towerSize = /* @__PURE__ */ function() {
    var size;
    return function(recalc) {
      if (size && !recalc) {
        return size;
      }
      size = 1e3;
      if (global.hasOwnProperty("pillars")) {
        Object.keys(global.pillars).forEach(function(pillar) {
          if (global.pillars[pillar]) {
            size -= global.pillars[pillar] * 2 + 2;
          }
        });
      }
      if (size < 250) {
        size = 250;
      }
      return size;
    };
  }();
  function towerPrice(cost, wiki) {
    let sup = hellSupression("gate", 0, wiki);
    return Math.round(cost / (sup.supress > 0.01 ? sup.supress : 0.01));
  }
  function soulForgeSoldiers(wiki) {
    let base = global.race["warlord"] ? 400 : 650;
    let num_gun_emplacement = wiki ? global.portal?.gun_emplacement?.on ?? 0 : p_on["gun_emplacement"];
    let num_soldiers_saved = num_gun_emplacement * (global.tech.hell_gun >= 2 ? jobScale(2) : jobScale(1));
    let avg_rating = Math.max(armyRating(1, "hellArmy"), highPopAdjust(1));
    let soldiers = Math.ceil(base / avg_rating);
    soldiers = Math.max(0, soldiers - num_soldiers_saved);
    if (global.race["hivemind"]) {
      soldiers = 0;
      while ((soldiers + num_soldiers_saved) * avg_rating < base) {
        soldiers++;
        avg_rating = armyRating(soldiers, "hellArmy") / soldiers;
        avg_rating = Math.max(avg_rating, highPopAdjust(1));
      }
    }
    return soldiers;
  }
  function fortressTech() {
    return fortressModules;
  }
  function renderFortress() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 4)) {
      return;
    }
    let parent = $("#portal");
    clearElement(parent);
    parent.append($(`<h2 class="is-sr-only">${loc("tab_portal")}</h2>`));
    if (!global.tech["portal"] || global.tech["portal"] < 2) {
      return;
    }
    Object.keys(fortressModules).forEach(function(region) {
      let show = region.replace("prtl_", "");
      if (global.settings.portal[`${show}`]) {
        let name = typeof fortressModules[region].info.name === "string" ? fortressModules[region].info.name : fortressModules[region].info.name();
        let property = ``;
        if (fortressModules[region].info.hasOwnProperty("prop")) {
          property = fortressModules[region].info.prop();
        }
        if (typeof fortressModules[region].info["support"] && global.portal[fortressModules[region].info["support"]]) {
          let support = fortressModules[region].info["support"];
          if (fortressModules[region].info["hide_support"]) {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
          } else {
            parent.append(`<div id="${region}" class="space"><div id="sr${region}"><h3 class="name has-text-warning">${name}</h3> <span v-show="s_max">{{ support }}/{{ s_max }}</span>${property}</div></div>`);
          }
          vBind({
            el: `#sr${region}`,
            data: global.portal[support],
            filters: {
              filter() {
                return fortressModules[region].info.filter(...arguments);
              }
            }
          });
        } else {
          parent.append(`<div id="${region}" class="space"><div><h3 class="name has-text-warning">${name}</h3>${property}</div></div>`);
        }
        popover(
          region,
          function() {
            return typeof fortressModules[region].info.desc === "string" ? fortressModules[region].info.desc : fortressModules[region].info.desc();
          },
          {
            elm: `#${region} h3.name`,
            classes: `has-background-light has-text-dark`
          }
        );
        if (region === "prtl_fortress") {
          if (global.race["warlord"]) {
            buildEnemyFortress(parent);
          } else {
            buildFortress(parent, true);
          }
        }
        Object.keys(fortressModules[region]).forEach(function(tech) {
          if (tech !== "info" && checkRequirements2(fortressModules, region, tech)) {
            let c_action = fortressModules[region][tech];
            setAction(c_action, "portal", tech);
          }
        });
      }
    });
  }
  function checkHellRequirements(region, tech) {
    return checkRequirements2(fortressModules, region, tech);
  }
  function buildEnemyFortress(parent) {
    if (!global.race["warlord"]) {
      return;
    }
    if (!global.settings.tabLoad) {
      switch (global.settings.civTabs) {
        case 1:
          if (global.settings.spaceTabs !== 4) {
            return;
          }
          break;
        case 2:
          if (global.settings.govTabs !== 3) {
            return;
          }
          break;
        default:
          return;
      }
    }
    let id = "fort";
    let fort = $(`<div id="${id}" class="fort"></div>`);
    parent.append(fort);
    let enemy = $(`<div v-for="(e, index) of enemy" :key="index" class="enemyFortress">
        <div class="fortRow"><span class="has-text-success">{{ e.r | species }}</span><span class="has-text-warning">${loc(`fortress_wall`)} {{ e.f }}%</span></div>
        <div class="fortRow second"><span class="has-text-caution">${loc(`fortress_demon_kills`)} {{ e.k | kills }}</span><a class="button" v-on:click="attack(index)" role="button">${loc(`civics_garrison_attack`)}</a></div>
    </div>`);
    fort.append(enemy);
    vBind({
      el: `#${id}`,
      data: global.portal.throne,
      methods: {
        attack(idx) {
          let horde = Math.floor(global.portal.minions.spawns * seededRandom(6, 10, true) / 10);
          let scale = global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
          let rating = armyRating(scale, "hellArmy", 0) / scale;
          let died = seededRandom((250 + global.portal.throne.enemy[idx].s * 250) / rating, (500 + global.portal.throne.enemy[idx].s * 1250) / rating, true);
          if (global.race["armored"]) {
            died *= 1 - traits.armored.vars()[0] / 100;
            died = Math.round(died);
          }
          let range = global.portal.throne.enemy[idx].f;
          for (let i = 0; i < range; i++) {
            died += seededRandom(global.portal.throne.enemy[idx].s * 250 / rating, global.portal.throne.enemy[idx].s * 1250 / rating, true);
            if (horde > died) {
              global.portal.throne.enemy[idx].f--;
            } else {
              break;
            }
          }
          died = Math.round(died);
          if (global.portal.minions.spawns < died) {
            died = global.portal.minions.spawns;
          }
          global.portal.minions.spawns -= died;
          global.portal.throne.enemy[idx].k += died;
          if (p_on["soul_forge"]) {
            let troops = garrisonSize(false, { no_forge: true });
            let forge = soulForgeSoldiers();
            if (forge <= troops) {
              global.portal.soul_forge.kills += died;
            }
          }
          if (global.portal.throne.enemy[idx].f <= 0) {
            messageQueue(loc("fortress_enemy_defeat", [races[global.portal.throne.enemy[idx].r].name]), "info", false, ["progress"]);
            global.portal.throne.hearts.push(global.portal.throne.enemy[idx].r);
            global.portal.throne.enemy.splice(idx, 1);
            renderFortress();
          }
        }
      },
      filters: {
        species(v) {
          return races[v].name;
        },
        kills(v) {
          return sizeApproximation(v);
        }
      }
    });
  }
  function buildFortress(parent, full) {
    if (!global.settings.tabLoad) {
      switch (global.settings.civTabs) {
        case 1:
          if (global.settings.spaceTabs !== 4) {
            return;
          }
          break;
        case 2:
          if (global.settings.govTabs !== 3) {
            return;
          }
          break;
        default:
          return;
      }
    }
    if (!global.tech["portal"] || global.tech["portal"] < 2) {
      return;
    }
    let id = full ? "fort" : "gFort";
    let fort = full ? $(`<div id="${id}" class="fort"></div>`) : $("#gFort");
    if (full) {
      parent.append(fort);
    } else {
      if (fort.length > 0) {
        clearElement(fort);
      } else {
        fort = $(`<div id="${id}" class="fort gFort"></div>`);
        parent.append(fort);
      }
      fort.append(`<div><h3 class="has-text-warning">${loc("portal_fortress_name")}</h3><button class="button observe right" @click="observation">${loc("hell_observation_button")}</button></div>`);
    }
    let status = $("<div></div>");
    fort.append(status);
    let defense = $(`<span class="defense has-text-success" :aria-label="defense()">${loc("fortress_defense")} {{ f.garrison | defensive }}</span>`);
    status.append(defense);
    let activity = $(`<span class="has-text-danger pad hostiles" :aria-label="hostiles()">${loc("fortress_spotted")} {{ f.threat }}</span>`);
    status.append(activity);
    let threatLevel = $(`<span class="pad threatLevel" :class="threaten()" :aria-label="threatLevel()">{{ f.threat | threat }}</span>`);
    status.append(threatLevel);
    let wallStatus = $("<div></div>");
    fort.append(wallStatus);
    wallStatus.append($(`<span class="has-text-warning" :aria-label="defense()">${loc("fortress_wall")} <span :class="wall()">{{ f.walls }}%</span></span>`));
    let station = $(`<div></div>`);
    fort.append(station);
    station.append($(`<span>${loc("fortress_army")}</span>`));
    station.append($('<span role="button" aria-label="remove soldiers from the fortress" class="sub has-text-danger" @click="aLast"><span>&laquo;</span></span>'));
    station.append($('<span class="current armyLabel">{{ f.garrison | patrolling }}</span>'));
    station.append($('<span role="button" aria-label="add soldiers to the fortress" class="add has-text-success" @click="aNext"><span>&raquo;</span></span>'));
    station.append($(`<span>${loc("fortress_patrol")}</span>`));
    station.append($('<span role="button" aria-label="reduce number of patrols" class="sub has-text-danger" @click="patDec"><span>&laquo;</span></span>'));
    station.append($('<span class="current patLabel">{{ f.patrols }}</span>'));
    station.append($('<span role="button" aria-label="increase number of patrols" class="add has-text-success" @click="patInc"><span>&raquo;</span></span>'));
    station.append($(`<span>${loc("fortress_patrol_size")}</span>`));
    station.append($('<span role="button" aria-label="reduce size of each patrol" class="sub has-text-danger" @click="patSizeDec"><span>&laquo;</span></span>'));
    station.append($('<span class="current patSizeLabel">{{ f.patrol_size }}</span>'));
    station.append($('<span role="button" aria-label="increase size of each patrol" class="add has-text-success" @click="patSizeInc"><span>&raquo;</span></span>'));
    station.append($(`<span class="hireLabel"><button v-show="g.mercs" class="button merc" @click="hire" :aria-label="hireLabel()">${loc("civics_garrison_hire_mercenary")}</button></span>`));
    var bunks = $('<div class="bunks"></div>');
    station.append(bunks);
    bunks.append($(`<span class="has-text-warning">${loc("civics_garrison")}: </span>`));
    let soldier_title = global.tech["world_control"] && !global.race["truepath"] ? loc("civics_garrison_peacekeepers") : loc("civics_garrison_soldiers");
    bunks.append($(`<span><span class="soldier">${soldier_title}</span> <span v-html="$options.filters.stationed(g.workers)"></span> / <span>{{ g.max | s_max }} | <span></span>`));
    bunks.append($(`<span v-show="g.crew > 0"><span class="crew">${loc("civics_garrison_crew")}</span> <span>{{ g.crew }} | </span></span>`));
    bunks.append($(`<span><span class="wounded">${loc("civics_garrison_wounded")}</span> <span>{{ g.wounded }}</span></span>`));
    let color = global.settings.theme === "light" ? ` type="is-light"` : ` type="is-dark"`;
    let reports = $(`<div></div>`);
    station.append(reports);
    reports.append($(`<b-checkbox class="patrol" v-model="f.notify" true-value="Yes" false-value="No"${color}>${loc("fortress_patrol_reports")}</b-checkbox>`));
    reports.append($(`<b-checkbox class="patrol" v-model="f.s_ntfy" true-value="Yes" false-value="No"${color}>${loc("fortress_surv_reports")}</b-checkbox>`));
    reports.append($(`<b-checkbox class="patrol" v-model="f.nocrew"${color} v-show="s.showGalactic">${loc("fortress_nocrew")}</b-checkbox>`));
    if (full) {
      fort.append($(`<div class="training"><span>${loc("civics_garrison_training")} - ${loc("arpa_to_complete")} {{ g.rate, g.progress | trainTime }}</span><button class="button observe right" @click="observation">${loc("hell_observation_button")}</button> <progress class="progress" :value="g.progress" max="100">{{ g.progress }}%</progress></div>`));
    }
    vBind({
      el: `#${id}`,
      data: {
        f: global.portal.fortress,
        g: global.civic.garrison,
        s: global.settings
      },
      methods: {
        defense() {
          return loc("fortress_defense");
        },
        hostiles() {
          return fortressData("hostiles");
        },
        threatLevel() {
          return fortressData("threatLevel");
        },
        aNext() {
          let inc = keyMultiplier();
          if (global.portal.fortress.garrison < global.civic.garrison.workers) {
            global.portal.fortress.garrison += inc;
            if (global.portal.fortress.garrison > global.civic.garrison.workers) {
              global.portal.fortress.garrison = global.civic.garrison.workers;
            }
            global.portal.fortress["assigned"] = global.portal.fortress.garrison;
            vBind({ el: `#garrison` }, "update");
          }
        },
        aLast() {
          let dec = keyMultiplier();
          let min = global.portal.fortress.patrols * global.portal.fortress.patrol_size;
          if (p_on["soul_forge"] && !global.race["warlord"]) {
            min += soulForgeSoldiers();
          }
          if (global.portal.hasOwnProperty("guard_post")) {
            min += jobScale(global.portal.guard_post.on);
          }
          if (global.portal.fortress.garrison > min) {
            global.portal.fortress.garrison -= dec;
            if (global.portal.fortress.garrison < min) {
              global.portal.fortress.garrison = min;
            }
            if (global.portal.fortress.garrison < global.portal.fortress.patrols * global.portal.fortress.patrol_size) {
              global.portal.fortress.patrols = Math.floor(global.portal.fortress.garrison / global.portal.fortress.patrol_size);
            }
            global.portal.fortress["assigned"] = global.portal.fortress.garrison;
            vBind({ el: `#garrison` }, "update");
          }
        },
        patInc() {
          let inc = keyMultiplier();
          if (global.portal.fortress.patrols * global.portal.fortress.patrol_size < global.portal.fortress.garrison) {
            global.portal.fortress.patrols += inc;
            if (global.portal.fortress.garrison < global.portal.fortress.patrols * global.portal.fortress.patrol_size) {
              global.portal.fortress.patrols = Math.floor(global.portal.fortress.garrison / global.portal.fortress.patrol_size);
            }
          }
        },
        patDec() {
          let dec = keyMultiplier();
          if (global.portal.fortress.patrols > 0) {
            global.portal.fortress.patrols -= dec;
            if (global.portal.fortress.patrols < 0) {
              global.portal.fortress.patrols = 0;
            }
          }
        },
        patSizeInc() {
          let inc = keyMultiplier();
          if (global.portal.fortress.patrol_size < global.portal.fortress.garrison) {
            global.portal.fortress.patrol_size += inc;
            if (global.portal.fortress.garrison < global.portal.fortress.patrols * global.portal.fortress.patrol_size) {
              global.portal.fortress.patrols = Math.floor(global.portal.fortress.garrison / global.portal.fortress.patrol_size);
            }
          }
        },
        patSizeDec() {
          let dec = keyMultiplier();
          if (global.portal.fortress.patrol_size > 1) {
            global.portal.fortress.patrol_size -= dec;
            if (global.portal.fortress.patrol_size < 1) {
              global.portal.fortress.patrol_size = 1;
            }
          }
        },
        wall() {
          let val = global.portal.fortress.walls;
          if (val >= 75) {
            return "has-text-success";
          } else if (val <= 25) {
            return "has-text-danger";
          } else {
            return "has-text-warning";
          }
        },
        threaten() {
          let val = global.portal.fortress.threat;
          if (val < 1e3) {
            return "has-text-success";
          } else if (val >= 2e3) {
            return "has-text-danger";
          } else {
            return "has-text-warning";
          }
        },
        hire() {
          let repeats = keyMultiplier();
          let canBuy = true;
          while (canBuy && repeats > 0) {
            let cost = mercCost();
            if (global.civic["garrison"].workers < global.civic["garrison"].max && global.resource.Money.amount >= cost) {
              global.resource.Money.amount -= cost;
              global.civic["garrison"].workers++;
              global.civic.garrison.m_use++;
              global.portal.fortress.garrison++;
              global.portal.fortress["assigned"] = global.portal.fortress.garrison;
              vBind({ el: `#garrison` }, "update");
            } else {
              canBuy = false;
            }
            repeats--;
          }
        },
        hireLabel() {
          return fortressData("hireLabel");
        },
        observation() {
          global.settings.civTabs = $(`#mainTabs > nav ul li`).length - 1;
          if (!global.settings.tabLoad) {
            drawHellObservations();
          }
        }
      },
      filters: {
        defensive(v) {
          return fortressDefenseRating(v);
        },
        patrolling(v) {
          let stationed = v - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
          if (p_on["soul_forge"]) {
            let forge = soulForgeSoldiers();
            if (forge <= stationed) {
              stationed -= forge;
            }
          }
          if (global.portal.hasOwnProperty("guard_post")) {
            stationed -= jobScale(global.portal.guard_post.on);
          }
          return stationed;
        },
        threat(t) {
          if (t < 1e3) {
            return loc("fortress_threat_level1");
          } else if (t < 1500) {
            return loc("fortress_threat_level2");
          } else if (t >= 5e3) {
            return loc("fortress_threat_level6");
          } else if (t >= 3e3) {
            return loc("fortress_threat_level5");
          } else if (t >= 2e3) {
            return loc("fortress_threat_level4");
          } else {
            return loc("fortress_threat_level3");
          }
        },
        trainTime(r, p) {
          return r === 0 ? timeFormat(-1) : timeFormat((100 - p) / (r * 4));
        },
        stationed() {
          return garrisonSize();
        },
        s_max(v) {
          return garrisonSize(true);
        }
      }
    });
    ["hostiles", "threatLevel", "armyLabel", "patLabel", "patSizeLabel", "hireLabel"].forEach(function(k) {
      popover(
        `hf${id}${k}`,
        function() {
          switch (k) {
            case "hostiles":
              return fortressData("hostiles");
            case "threatLevel":
              return fortressData("hostiles");
            case "armyLabel":
              return loc("fortress_stationed");
            case "patLabel":
              return loc("fortress_patrol_desc", [global.portal.fortress.patrols]);
            case "patSizeLabel":
              return loc("fortress_patrol_size_desc", [global.portal.fortress.patrol_size]);
            case "hireLabel":
              return fortressData("hireLabel");
          }
        },
        {
          elm: `#${id} span.${k}`
        }
      );
    });
    popover(
      `hf${id}observe`,
      function() {
        return loc("hell_observation_tooltip");
      },
      {
        elm: `#${id} button.observe`
      }
    );
  }
  function fortressDefenseRating(v) {
    let army = v - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
    if (p_on["soul_forge"]) {
      let forge = soulForgeSoldiers();
      if (forge <= army) {
        army -= forge;
      }
    }
    if (global.portal.hasOwnProperty("guard_post")) {
      army -= jobScale(global.portal.guard_post.on);
    }
    let wounded = 0;
    if (global.civic.garrison.wounded > global.civic.garrison.workers - global.portal.fortress.garrison) {
      wounded = global.civic.garrison.wounded - (global.civic.garrison.workers - global.portal.fortress.garrison);
      if (wounded > army) {
        wounded = army;
      }
    }
    if (p_on["war_droid"]) {
      let droids = p_on["war_droid"] - global.portal.fortress.patrols > 0 ? p_on["war_droid"] - global.portal.fortress.patrols : 0;
      army += global.tech["hdroid"] ? jobScale(droids * 2) : jobScale(droids);
    }
    let turret = global.tech["turret"] ? global.tech["turret"] >= 2 ? 70 : 50 : 35;
    return Math.round(armyRating(army, "hellArmy", wounded)) + (p_on["turret"] ? p_on["turret"] * turret : 0);
  }
  function casualties(demons, pat_armor, ambush, report) {
    let casualties2 = Math.round(Math.log2(demons / global.portal.fortress.patrol_size / (pat_armor || 1))) - Math.rand(0, pat_armor);
    let dead = 0;
    if (casualties2 > 0) {
      if (casualties2 > global.portal.fortress.patrol_size) {
        casualties2 = global.portal.fortress.patrol_size;
      }
      casualties2 = Math.rand(ambush ? 1 : 0, casualties2 + 1);
      dead = Math.rand(0, casualties2 + 1);
      let wounded = casualties2 - dead;
      if (global.race["instinct"]) {
        let reduction = Math.floor(dead * (traits.instinct.vars()[1] / 100));
        dead -= reduction;
        wounded += reduction;
      }
      report.wounded = wounded;
      report.died = dead;
      global.civic.garrison.wounded += wounded;
      soldierDeath(dead);
    }
    return dead;
  }
  function fortressData(dt) {
    switch (dt) {
      case "hostiles": {
        if (global.portal.fortress.threat >= 2e3) {
          return `${loc("fortress_threat", [global.portal.fortress.threat])} ${loc("fortress_threat_high")}`;
        } else if (global.portal.fortress.threat < 1e3) {
          return `${loc("fortress_threat", [global.portal.fortress.threat])} ${loc("fortress_threat_low")}`;
        } else {
          return `${loc("fortress_threat", [global.portal.fortress.threat])} ${loc("fortress_threat_medium")}`;
        }
      }
      case "threatLevel": {
        let t = global.portal.fortress.threat;
        if (t < 1e3) {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level1")}`;
        } else if (t < 1500) {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level2")}`;
        } else if (t >= 5e3) {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level6")}`;
        } else if (t >= 3e3) {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level5")}`;
        } else if (t >= 2e3) {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level4")}`;
        } else {
          return `${loc("fortress_threat_level")} ${loc("fortress_threat_level3")}`;
        }
      }
      case "hireLabel": {
        let cost = Math.round(govCivics("m_cost")).toLocaleString();
        return loc("civics_garrison_hire_mercenary_cost", [cost]);
      }
    }
  }
  function bloodwar() {
    let day_report = {
      start: global.portal.fortress.threat,
      foundGems: 0,
      stats: {
        wounded: 0,
        died: 0,
        revived: 0,
        surveyors: 0,
        sieges: 0,
        kills: {
          drones: 0,
          patrols: 0,
          sieges: 0,
          guns: 0,
          soul_forge: 0,
          turrets: 0
        },
        gems: {
          patrols: 0,
          guns: 0,
          soul_forge: 0,
          crafted: 0,
          turrets: 0,
          surveyors: 0,
          compactor: 0
        }
      }
    };
    let pat_armor = global.tech["armor"] ? global.tech["armor"] : 0;
    if (global.race["armored"]) {
      pat_armor += traits.armored.vars()[1];
    }
    let torFathom = fathomCheck("tortoisan");
    if (torFathom > 0) {
      pat_armor += Math.floor(traits.armored.vars(1)[1] * torFathom);
    }
    if (global.race["scales"]) {
      pat_armor += traits.scales.vars()[2];
    }
    let forgeOperating = false;
    if (p_on["soul_forge"]) {
      let troops = global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
      let forge = soulForgeSoldiers();
      if (forge <= troops) {
        forgeOperating = true;
        $(`#portal-soul_forge .on`).removeClass("altwarn");
      } else {
        forgeOperating = false;
        $(`#portal-soul_forge .on`).addClass("altwarn");
      }
    } else {
      $(`#portal-soul_forge .on`).addClass("altwarn");
    }
    let drone_kills = 0;
    if (global.tech["portal"] >= 3 && p_on["war_drone"]) {
      day_report.drones = {};
      for (let i = 0; i < p_on["war_drone"]; i++) {
        let drone_report = { encounter: false, kills: 0 };
        if (Math.rand(0, global.portal.fortress.threat) >= Math.rand(0, 999)) {
          let demons = Math.rand(Math.floor(global.portal.fortress.threat / 50), Math.floor(global.portal.fortress.threat / 10));
          let killed = global.tech.portal >= 7 ? Math.rand(50, 125) : Math.rand(25, 75);
          if (demons < killed) {
            killed = demons;
          }
          global.portal.fortress.threat -= killed;
          global.stats.dkills += killed;
          if (forgeOperating) {
            global.portal.soul_forge.kills += killed;
            soulCapacitor(killed);
          }
          drone_report = { encounter: true, kills: killed };
          day_report.stats.kills.drones += killed;
          drone_kills += killed;
        }
        day_report.drones[i + 1] = drone_report;
      }
    }
    if (!global.portal.fortress["pity"]) {
      global.portal.fortress["pity"] = 0;
    }
    let game_base = global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 5 ? 9e3 : 1e4;
    let gem_chance = game_base - global.portal.fortress.pity;
    if (global.tech["portal"] >= 4 && p_on["attractor"]) {
      gem_chance = Math.round(gem_chance * 0.948 ** p_on["attractor"]);
    }
    if (global.race["ghostly"]) {
      gem_chance = Math.round(gem_chance * ((100 - traits.ghostly.vars()[2]) / 100));
    }
    let wendFathom = fathomCheck("wendigo");
    if (wendFathom > 0) {
      gem_chance = Math.round(gem_chance * ((100 - traits.ghostly.vars(1)[2] * wendFathom) / 100));
    }
    if (gem_chance < 12) {
      gem_chance = 12;
    }
    let dead = 0;
    let terminators = p_on["war_droid"] ? p_on["war_droid"] : 0;
    let has_drop = false;
    let wounded = 0;
    if (global.civic.garrison.wounded > global.civic.garrison.workers - global.portal.fortress.garrison) {
      wounded = global.civic.garrison.wounded - (global.civic.garrison.workers - global.portal.fortress.garrison);
      if (wounded > global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size) {
        wounded -= global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
        wounded /= global.portal.fortress.patrols;
      } else {
        wounded = 0;
      }
    }
    let brkpnt = +(wounded % 1).toFixed(10);
    day_report.patrols = {};
    for (let i = 0; i < global.portal.fortress.patrols; i++) {
      let patrol_report = { encounter: false, droid: false, ambush: false, gem: 0, kills: 0, wounded: 0, died: 0 };
      let hurt = brkpnt > 1 / global.portal.fortress.patrols * i ? Math.ceil(wounded) : Math.floor(wounded);
      if (Math.rand(0, global.portal.fortress.threat) >= Math.rand(0, 999)) {
        patrol_report.encounter = true;
        let pat_size = global.portal.fortress.patrol_size;
        if (terminators > 0) {
          patrol_report.droid = true;
          pat_size += global.tech["hdroid"] ? jobScale(2) : jobScale(1);
          terminators--;
        }
        let pat_rating = Math.round(armyRating(pat_size, "hellArmy", hurt));
        let demons = Math.rand(Math.floor(global.portal.fortress.threat / 50), Math.floor(global.portal.fortress.threat / 10));
        if (global.race["blood_thirst"]) {
          global.race["blood_thirst_count"] += Math.rand(0, Math.ceil(demons / 10));
          if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
            global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
          }
        }
        let odds = 30 + Math.max(
          global.race["chameleon"] ? traits.chameleon.vars()[1] : 0,
          global.race["elusive"] ? traits.elusive.vars()[0] : 0
        );
        if (global.race["chicken"]) {
          odds -= Math.round(traits.chicken.vars()[0] / 5);
        }
        if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.f) {
          odds += Math.round(3 * traits.ocular_power.vars()[1] / 100);
        }
        if (Math.rand(0, odds) === 0) {
          patrol_report.ambush = true;
          dead += casualties(Math.round(demons * (1 + Math.random() * 3)), 0, true, patrol_report);
          let killed = Math.round(pat_rating / 2);
          if (demons < killed) {
            killed = demons;
          }
          global.portal.fortress.threat -= killed;
          global.stats.dkills += killed;
          if (forgeOperating) {
            global.portal.soul_forge.kills += killed;
            soulCapacitor(killed);
          }
          patrol_report.kills = killed;
          if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
            global.race.ocularPowerConfig.ds += Math.round(killed * traits.ocular_power.vars()[1]);
          }
        } else {
          let killed = pat_rating;
          if (demons <= killed) {
            killed = demons;
          } else {
            dead += casualties(demons - killed, pat_armor, false, patrol_report);
          }
          patrol_report.kills = killed;
          global.portal.fortress.threat -= killed;
          global.stats.dkills += killed;
          if (forgeOperating) {
            global.portal.soul_forge.kills += killed;
            soulCapacitor(killed);
          }
          if (killed > 0) {
            let div = 35 - Math.floor(p_on["attractor"] / 3);
            if (div < 5) {
              div = 5;
            }
            let chances = Math.round(killed / div);
            for (let j = 0; j < chances; j++) {
              if (Math.rand(0, gem_chance) === 0) {
                patrol_report.gem++;
                day_report.stats.gems.patrols++;
                global.resource.Soul_Gem.amount++;
                global.portal.fortress.pity = 0;
                if (!global.resource.Soul_Gem.display) {
                  global.resource.Soul_Gem.display = true;
                  messageQueue(loc("portal_first_gem"), "info", false, ["progress", "hell"]);
                }
                has_drop = true;
              }
            }
            if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
              global.race.ocularPowerConfig.ds += Math.round(killed * traits.ocular_power.vars()[1]);
            }
          }
        }
        day_report.stats.kills.patrols += patrol_report.kills;
        day_report.stats.wounded += patrol_report.wounded;
        day_report.stats.died += patrol_report.died;
      }
      day_report.patrols[i + 1] = patrol_report;
    }
    let revive = 0;
    if (global.race["revive"]) {
      revive = Math.round(Math.rand(0, dead / traits.revive.vars()[6] + 0.25));
      day_report.revived = revive;
      day_report.stats.revived = revive;
      global.civic.garrison.workers += revive;
    }
    if (global.civic.garrison.wounded > global.civic.garrison.workers) {
      global.civic.garrison.wounded = global.civic.garrison.workers;
    }
    let garrison_size = global.portal.fortress.nocrew ? global.civic.garrison.workers - global.civic.garrison.crew : global.civic.garrison.workers;
    if (garrison_size < global.portal.fortress.garrison) {
      global.portal.fortress.garrison = garrison_size;
    }
    if (global.portal.fortress.garrison < global.portal.fortress.patrols * global.portal.fortress.patrol_size) {
      let patrol_start = global.portal.fortress.patrols;
      global.portal.fortress.patrols = Math.floor(global.portal.fortress.garrison / global.portal.fortress.patrol_size);
      day_report.patrols_lost = patrol_start - global.portal.fortress.patrols;
    }
    if (dead > 0 && global.portal.fortress.notify === "Yes") {
      if (revive > 0) {
        messageQueue(loc("fortress_patrol_casualties_revive", [dead, revive]), false, false, ["hell"]);
      } else {
        messageQueue(loc("fortress_patrol_casualties", [dead]), false, false, ["hell"]);
      }
    }
    if (global.portal.fortress.garrison > 0 && global.portal.fortress.siege > 0) {
      global.portal.fortress.siege--;
    }
    if (global.portal.fortress.siege <= 900 && global.portal.fortress.garrison > 0 && 1 > Math.rand(0, global.portal.fortress.siege)) {
      let siege_report = { destroyed: false, damage: 0, kills: 0, surveyors: 0, soldiers: 0 };
      let defense = fortressDefenseRating(global.portal.fortress.garrison);
      let defend = defense / 35 > 1 ? defense / 35 : 1;
      let siege = Math.round(global.portal.fortress.threat / 2);
      let damage = 0;
      let killed = 0;
      let destroyed = false;
      while (siege > 0 && global.portal.fortress.walls > 0) {
        let terminated = Math.round(Math.rand(1, defend + 1));
        if (terminated > siege) {
          terminated = siege;
        }
        siege -= terminated;
        global.portal.fortress.threat -= terminated;
        global.stats.dkills += terminated;
        if (forgeOperating) {
          global.portal.soul_forge.kills += terminated;
          soulCapacitor(terminated);
        }
        killed += terminated;
        if (siege > 0) {
          damage++;
          global.portal.fortress.walls--;
          if (global.portal.fortress.walls === 0) {
            siege_report.destroyed = true;
            destroyed = true;
            break;
          }
        }
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
        global.race.ocularPowerConfig.ds += Math.round(killed * traits.ocular_power.vars()[1]);
      }
      siege_report.damage = damage;
      siege_report.kills = killed;
      day_report.stats.kills.sieges = killed;
      if (destroyed) {
        messageQueue(loc("fortress_lost"), false, false, ["hell"]);
        siege_report.surveyors = global.civic.hell_surveyor.workers;
        global.resource[global.race.species].amount -= global.civic.hell_surveyor.workers;
        global.civic.hell_surveyor.workers = 0;
        global.civic.hell_surveyor.assigned = 0;
        siege_report.soldiers = global.portal.fortress.garrison;
        day_report.stats.died += global.portal.fortress.garrison;
        global.portal.fortress.patrols = 0;
        soldierDeath(global.portal.fortress.garrison);
        global.portal.fortress.garrison = 0;
        global.portal.fortress["assigned"] = 0;
      } else {
        messageQueue(loc("fortress_sieged", [killed, damage]), false, false, ["hell"]);
      }
      global.portal.fortress.siege = 999;
      day_report.stats.sieges++;
      day_report.siege = siege_report;
    }
    if (global.portal.fortress.threat < 1e4) {
      let influx = (1e4 - global.portal.fortress.threat) / 2500 + 1;
      if (global.tech["portal"] >= 4 && p_on["attractor"]) {
        influx *= 1 + p_on["attractor"] * 0.22;
      }
      if (global.race["chicken"]) {
        influx *= 1 + traits.chicken.vars()[0] / 100;
      }
      if (global.race.universe === "evil") {
        influx *= 1.1;
      }
      let demon_spawn = Math.rand(Math.round(10 * influx), Math.round(50 * influx));
      global.portal.fortress.threat += demon_spawn;
      day_report.demons = demon_spawn;
    }
    if (global.civic.hell_surveyor.display && global.civic.hell_surveyor.workers > 0) {
      let divisor = 1e3;
      let painVal = govActive("runner", 0);
      if (painVal) {
        divisor *= 1 + painVal / 100;
      }
      if (global.race["blurry"]) {
        divisor *= 1 + traits.blurry.vars()[0] / 100;
      }
      let fathom = fathomCheck("yeti");
      if (fathom > 0) {
        divisor *= 1 + traits.blurry.vars(1)[0] / 100 * fathom;
      }
      if (global.race["instinct"]) {
        divisor *= 1 + traits.instinct.vars()[0] / 100;
      }
      if (global.tech["infernite"] && global.tech.infernite >= 5) {
        divisor += 250;
      }
      let danger = jobScale(global.portal.fortress.threat / divisor);
      let max_risk = jobScale(10);
      let exposure = Math.min(max_risk, global.civic.hell_surveyor.workers);
      let risk = max_risk - Math.rand(0, exposure + 1);
      if (danger > risk) {
        let cap = Math.round(danger);
        let dead2 = Math.rand(0, cap + 1);
        if (dead2 > 0) {
          if (dead2 > global.civic.hell_surveyor.workers) {
            dead2 = global.civic.hell_surveyor.workers;
          }
          if (global.portal.fortress.s_ntfy === "Yes") {
            if (dead2 === 1) {
              messageQueue(loc("fortress_killed"), false, false, ["hell"]);
            } else {
              messageQueue(loc("fortress_eviscerated", [dead2]), false, false, ["hell"]);
            }
          }
          day_report.surveyors = dead2;
          day_report.stats.surveyors = dead2;
          global.civic.hell_surveyor.workers -= dead2;
          global.civic.hell_surveyor.max -= dead2;
          global.resource[global.race.species].amount -= dead2;
          global.portal.carport.damaged += dead2;
        }
      }
      day_report.surveyor_finds = {};
      if (global.civic.hell_surveyor.workers > 0 && drone_kills > 0) {
        let drone_kills_left = drone_kills;
        for (let i = 0; i < global.civic.hell_surveyor.workers; i++) {
          let surv_report = { gem: 0, bodies: 0 };
          let max_search_chance = Math.round(drone_kills_left / (global.civic.hell_surveyor.workers - i));
          let min_search_chance = Math.round(max_search_chance / 2);
          drone_kills_left -= max_search_chance;
          let searched = Math.rand(min_search_chance, max_search_chance + 1);
          let search_limit = highPopAdjust(100);
          if (searched > search_limit) {
            searched = search_limit;
          }
          surv_report.bodies = searched;
          if (searched > 0) {
            let div = 25 - Math.floor(p_on["attractor"] / 5);
            if (div < 5) {
              div = 5;
            }
            let chances = Math.round(searched / div);
            for (let j = 0; j < chances; j++) {
              if (Math.rand(0, gem_chance) === 0) {
                surv_report.gem++;
                day_report.stats.gems.surveyors++;
                global.resource.Soul_Gem.amount++;
                global.portal.fortress.pity = 0;
                if (!global.resource.Soul_Gem.display) {
                  global.resource.Soul_Gem.display = true;
                  messageQueue(loc("portal_first_gem"), "info", false, ["progress", "hell"]);
                }
                has_drop = true;
              }
            }
          }
          day_report.surveyor_finds[i + 1] = surv_report;
        }
      }
    }
    if (!has_drop && global.portal.fortress.pity < 1e4) {
      global.portal.fortress.pity++;
    }
    if (global.stats.dkills >= 1e6 && global.tech["gateway"] && !global.tech["hell_pit"]) {
      global.tech["hell_pit"] = 1;
      global.settings.portal.pit = true;
      messageQueue(loc("portal_hell_pit_found"), "info", false, ["progress", "hell"]);
      renderFortress();
    }
    if (global.tech["hell_pit"]) {
      if (forgeOperating && global.tech.hell_pit >= 5 && p_on["soul_attractor"]) {
        let attract = global.blood["attract"] ? global.blood.attract * 5 : 0;
        if (global.tech["hell_pit"] && global.tech.hell_pit >= 8) {
          attract *= 2;
        }
        let souls = p_on["soul_attractor"] * Math.rand(40 + attract, 120 + attract);
        global.portal.soul_forge.kills += souls;
        day_report.soul_attractors = souls;
        soulCapacitor(souls);
      }
      if (forgeOperating && global.tech["asphodel"] && global.tech.asphodel >= 2 && support_on["ectoplasm_processor"]) {
        let attract = global.blood["attract"] ? global.blood.attract * 5 : 0;
        let souls = global.civic.ghost_trapper.workers * Math.rand(150 + attract, 250 + attract);
        if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
          let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
          heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
          if (heatSink > 0) {
            souls *= 1 + heatSink / 12500;
          }
        }
        souls = Math.floor(souls * asphodelResist());
        global.portal.soul_forge.kills += souls;
        soulCapacitor(souls);
      }
      if (forgeOperating && global.tech["hell_gun"] && p_on["gun_emplacement"]) {
        day_report.gun_emplacements = {};
        let gunKills = 0;
        for (let i = 0; i < p_on["gun_emplacement"]; i++) {
          day_report.gun_emplacements[i + 1] = { kills: 0, gem: false };
          let kills = global.tech.hell_gun >= 2 ? Math.rand(35, 75) : Math.rand(20, 40);
          gunKills += kills;
          day_report.gun_emplacements[i + 1].kills = kills;
        }
        day_report.stats.kills.guns = gunKills;
        global.portal.soul_forge.kills += gunKills;
        soulCapacitor(gunKills);
        global.stats.dkills += gunKills;
        let gun_base = global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 5 ? 6750 : 7500;
        if (global.tech.hell_pit >= 7 && p_on["soul_attractor"] > 0) {
          gun_base *= 0.94 ** p_on["soul_attractor"];
        }
        for (let i = 0; i < p_on["gun_emplacement"]; i++) {
          if (Math.rand(0, Math.round(gun_base)) === 0) {
            day_report.gun_emplacements[i + 1].gem = true;
            day_report.stats.gems.guns++;
            global.resource.Soul_Gem.amount++;
          }
        }
      }
      if (forgeOperating) {
        day_report.soul_forge = { kills: 0, gem: false, gem_craft: false, corrupt: false };
        let forgeKills = Math.rand(25, 150);
        day_report.stats.kills.soul_forge = forgeKills;
        day_report.soul_forge.kills = forgeKills;
        global.stats.dkills += forgeKills;
        global.portal.soul_forge.kills += forgeKills;
        soulCapacitor(forgeKills);
        if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
          global.race.ocularPowerConfig.ds += Math.round(forgeKills * traits.ocular_power.vars()[1]);
        }
        let forge_base = global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 5 ? 4500 : 5e3;
        if (Math.rand(0, forge_base) === 0) {
          day_report.soul_forge.gem = true;
          day_report.stats.gems.soul_forge++;
          global.resource.Soul_Gem.amount++;
        }
      }
      let cap = global.tech.hell_pit >= 6 ? 75e4 : 1e6;
      if (global.tech.hell_pit >= 7 && p_on["soul_attractor"] > 0) {
        cap *= (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 3 ? 0.96 : 0.97) ** p_on["soul_attractor"];
      }
      if (forgeOperating && global.portal.soul_forge.kills >= Math.round(cap)) {
        day_report.soul_forge.gem_craft = true;
        let gems = Math.floor(global.portal.soul_forge.kills / Math.round(cap));
        global.portal.soul_forge.kills -= Math.round(cap) * gems;
        let c_max = 10 - p_on["soul_attractor"] > 0 ? 10 - p_on["soul_attractor"] : 1;
        if (global.tech.high_tech >= 16 && !global.tech["corrupt"] && Math.rand(0, c_max + 1) === 0) {
          day_report.soul_forge.corrupt = true;
          global.resource.Corrupt_Gem.amount++;
          global.resource.Corrupt_Gem.display = true;
          messageQueue(loc("portal_corrupt_gem"), "info", false, ["progress", "hell"]);
          global.tech["corrupt"] = 1;
          drawTech();
        } else {
          global.resource.Soul_Gem.amount += gems;
          day_report.stats.gems.crafted += gems;
        }
      }
    }
    if (global.tech["hell_gate"] && global.tech["hell_gate"] >= 3) {
      if (p_on["gate_turret"]) {
        day_report.gate_turrets = {};
        let gunKills = 0;
        let min = global.tech.hell_gun >= 2 ? 65 : 40;
        let max = global.tech.hell_gun >= 2 ? 100 : 60;
        for (let i = 0; i < p_on["gate_turret"]; i++) {
          day_report.gate_turrets[i + 1] = { kills: 0, gem: false };
          let kills = Math.rand(min, max);
          gunKills += kills;
          day_report.gate_turrets[i + 1].kills = kills;
        }
        if (forgeOperating) {
          day_report.stats.kills.turrets = gunKills;
          global.portal.soul_forge.kills += gunKills;
          soulCapacitor(gunKills);
        }
        global.stats.dkills += gunKills;
        let gun_base = global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 5 ? 2700 : 3e3;
        for (let i = 0; i < p_on["gate_turret"]; i++) {
          if (Math.rand(0, Math.round(gun_base)) === 0) {
            day_report.gate_turrets[i + 1].gem = true;
            day_report.stats.gems.turrets++;
            global.resource.Soul_Gem.amount++;
          }
        }
      }
    }
    if (global.eden.hasOwnProperty("soul_compactor") && global.eden.soul_compactor.count === 1) {
      day_report.stats.gems.compactor = global.eden.soul_compactor.report;
      global.eden.soul_compactor.report = 0;
    }
    global.portal.observe.stats.total.days++;
    global.portal.observe.stats.period.days++;
    Object.keys(day_report.stats).forEach(function(stat) {
      if (["kills", "gems"].includes(stat)) {
        Object.keys(day_report.stats[stat]).forEach(function(subStat) {
          if (stat === "gems" && day_report.stats[stat][subStat]) {
            day_report.foundGems += day_report.stats[stat][subStat];
          }
          global.portal.observe.stats.total[stat][subStat] += day_report.stats[stat][subStat];
          global.portal.observe.stats.period[stat][subStat] += day_report.stats[stat][subStat];
        });
      } else {
        global.portal.observe.stats.total[stat] += day_report.stats[stat];
        global.portal.observe.stats.period[stat] += day_report.stats[stat];
      }
    });
    if (!hell_reports[`year-${global.city.calendar.year}`]) {
      hell_reports[`year-${global.city.calendar.year}`] = {};
    }
    hell_reports[`year-${global.city.calendar.year}`][`day-${global.city.calendar.day}`] = day_report;
    purgeReports();
    Object.keys(global.portal.observe.graphs).forEach(function(id) {
      if (!!document.getElementById(global.portal.observe.graphs[id].chartID)) {
        let newData = [];
        hell_graphs[id].data.forEach(function(dataPoint) {
          newData.push(dataPoint.length === 3 ? global.portal.observe.stats[dataPoint[0]][dataPoint[1]][dataPoint[2]] : global.portal.observe.stats[dataPoint[0]][dataPoint[1]]);
        });
        hell_graphs[id].graph.data.datasets[0].data = newData;
        hell_graphs[id].graph.update();
      }
    });
  }
  function hellguard() {
    if (global.race["warlord"] && global.portal["minions"] && global.portal.minions.count > 0) {
      if ((global.portal.throne.enemy.length === 0 || global.portal.throne.spawned.length >= 3 && global.portal.throne.enemy.length <= 1 || global.portal.throne.spawned.length >= 8 && global.portal.throne.enemy.length <= 2) && Math.rand(0, 10) === 0 && global.portal.minions.spawns > 0) {
        if (global.portal.throne.spawned.length === 0) {
          addHellEnemy(["basic"]);
        } else {
          if (global.portal.throne.spawned.length % 3 === 0 && global.portal.throne.spawned.length % 5 === 0) {
            addHellEnemy(["advanced", "rare"]);
          } else if (global.portal.throne.spawned.length % 3 === 0) {
            addHellEnemy(["advanced"]);
          } else if (global.portal.throne.spawned.length % 5 === 0) {
            addHellEnemy(["rare"]);
          } else {
            addHellEnemy(["basic"]);
          }
        }
      }
      if (global.portal.minions.on > 0) {
        let spawn = fortressModules.prtl_badlands.minions.soldiers();
        let low_spawn = spawn - 10;
        if (global.race["infectious"]) {
          spawn += traits.infectious.vars()[1];
          low_spawn += traits.infectious.vars()[0];
        }
        global.portal.minions.spawns += Math.rand(global.portal.minions.on * low_spawn, global.portal.minions.on * spawn);
      }
      let forgeOperating = false;
      if (p_on["soul_forge"]) {
        let troops = garrisonSize(false, { no_forge: true });
        let forge = soulForgeSoldiers();
        if (forge <= troops) {
          forgeOperating = true;
          $(`#portal-soul_forge .on`).removeClass("altwarn");
        } else {
          forgeOperating = false;
          $(`#portal-soul_forge .on`).addClass("altwarn");
        }
      } else {
        $(`#portal-soul_forge .on`).addClass("altwarn");
      }
      if (global.portal.throne.enemy.length > 0) {
        let scale = global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
        let rating = armyRating(scale, "hellArmy", 0) / scale;
        global.portal.throne.enemy.forEach(function(e) {
          let eRating = e.s + (global.portal.minions.spawns / 9e3) ** 8;
          let reapEffect = global.race["blurry"] ? 102 - traits.blurry.vars()[0] : 102;
          reapEffect -= (global.portal?.reaper?.rank || 1) * 2;
          if (reapEffect < 1) {
            reapEffect = 1;
          }
          let reaper = 0.25 + eRating * 0.01 - (global.portal?.reaper?.count || 0) ** (1 + ((global.portal?.reaper?.rank || 1) - 1) / 25) / reapEffect;
          if (reaper < 0.01) {
            reaper = 0.01;
          }
          let bound = Math.round(global.portal.minions.spawns * (0.5 * eRating) * eRating ** reaper / rating);
          let kills = Math.rand(e.s, bound);
          if (kills > global.portal.minions.spawns) {
            kills = global.portal.minions.spawns;
          }
          global.portal.minions.spawns -= kills;
          e.k += kills;
          if (forgeOperating) {
            global.portal.soul_forge.kills += kills;
          }
          if (e.f < 100 && Math.rand(0, 10) === 0) {
            e.f++;
          }
          if (global.race["revive"]) {
            let revive = Math.round(Math.rand(0, kills / (traits.revive.vars()[6] * 20)));
            global.portal.minions.spawns += revive;
          }
        });
      }
      if (forgeOperating && global.tech.hell_pit >= 5 && p_on["soul_attractor"]) {
        let attract = global.blood["attract"] ? global.blood.attract * 5 : 0;
        if (global.tech["hell_pit"] && global.tech.hell_pit >= 8) {
          attract *= 2;
        }
        let souls = p_on["soul_attractor"] * Math.rand(40 + attract, 120 + attract);
        if (global.race["ghostly"]) {
          souls *= 1 + traits.ghostly.vars()[0] / 100;
          souls = Math.round(souls);
        }
        global.portal.soul_forge.kills += souls;
      }
      if (forgeOperating && global.tech["asphodel"] && global.tech.asphodel >= 2 && support_on["ectoplasm_processor"]) {
        let attract = global.blood["attract"] ? global.blood.attract * 5 : 0;
        let souls = global.civic.ghost_trapper.workers * Math.rand(150 + attract, 250 + attract);
        if (global.portal["mortuary"] && global.portal["corpse_pile"]) {
          let corpse = (global.portal?.corpse_pile?.count || 0) * (p_on["mortuary"] || 0);
          if (corpse > 0) {
            souls *= 1 + corpse / 800;
          }
        }
        souls = Math.floor(souls * asphodelResist());
        global.portal.soul_forge.kills += souls;
      }
      let cap = global.tech.hell_pit >= 6 ? 75e4 : 1e6;
      if (global.tech.hell_pit >= 7 && p_on["soul_attractor"] > 0) {
        cap *= (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 3 ? 0.96 : 0.97) ** p_on["soul_attractor"];
      }
      if (global.race["ghostly"]) {
        cap *= 2 - traits.ghostly.vars()[1];
      }
      if (forgeOperating && global.portal.soul_forge.kills >= Math.round(cap)) {
        let gems = Math.floor(global.portal.soul_forge.kills / Math.round(cap));
        global.portal.soul_forge.kills -= Math.round(cap) * gems;
        global.resource.Soul_Gem.amount += gems;
      }
    }
    if (global.race["warlord"] && global.resource.Authority.amount >= 250 && global.resource.Authority.max >= 250) {
      global.stats.warlord.a = true;
      checkWarlordAchieve();
    }
    ["incinerator", "warehouse", "hovel", "hell_casino", "twisted_lab", "demon_forge", "hell_factory", "pumpjack", "dig_demon", "tunneler", "brute", "minions", "reaper", "corpse_pile"].forEach(function(s) {
      if (global.portal[s] && (!global.portal[s]["rank"] || global.portal[s].rank > 5)) {
        global.portal[s]["rank"] = 1;
      }
    });
  }
  function checkSkillPointAssignments() {
    let remaining = 0;
    ["incinerator", "warehouse", "hovel", "hell_casino", "twisted_lab", "demon_forge", "hell_factory", "pumpjack", "dig_demon", "tunneler", "brute", "minions", "reaper", "corpse_pile"].forEach(function(s) {
      if (global.portal[s]) {
        remaining += 5 - global.portal[s].rank;
        if (global.portal[s].rank >= 5 || !global.portal.throne.skill || global.portal.throne.points <= 0) {
          $(`#portal-${s} a.button`).removeClass("blue");
        } else if (global.portal[s].rank < 5 && global.portal.throne.skill && global.portal.throne.points > 0) {
          $(`#portal-${s} a.button`).addClass("blue");
        }
      }
    });
    if (!global.portal.throne.skill || global.portal.throne.points <= 0 || remaining === 0) {
      global.portal.throne.skill = false;
      $(`#portal-throne a.button`).removeClass("green");
    } else if (global.portal.throne.skill && global.portal.throne.points > 0) {
      $(`#portal-throne a.button`).addClass("green");
    }
    return remaining;
  }
  function rankDesc(label, struct) {
    return (global.portal[struct]?.rank || 1) <= 1 ? label : `${label} (<span class="has-text-${global.portal[struct]?.rank === 5 ? "caution" : "info"}">${loc("wiki_trait_rank")} ${global.portal[struct]?.rank}</span>)`;
  }
  function addHellEnemy(type = [], allowRecursion = true, allowRepeat = false) {
    let invaders = [];
    let current = global.portal.throne.enemy.map((e) => e.r);
    if (type.includes("basic")) {
      [
        "human",
        "elven",
        "orc",
        "cath",
        "wolven",
        "vulpine",
        "centaur",
        "rhinotaur",
        "capybara",
        "kobold",
        "goblin",
        "gnome",
        "ogre",
        "cyclops",
        "troll",
        "tortoisan",
        "gecko",
        "slitheryn",
        "arraak",
        "pterodacti",
        "dracnid",
        "entish",
        "cacti",
        "pinguicula",
        "sporgar",
        "shroomi",
        "moldling",
        "mantis",
        "scorpid",
        "antid"
      ].forEach(function(r) {
        if (allowRepeat || !global.portal.throne.spawned.includes(r) && ![global.race.gods, global.race.old_gods, global.race.origin].includes(r)) {
          if (!current.includes(r)) {
            invaders.push(r);
          }
        }
      });
    }
    if (type.includes("advanced")) {
      ["sharkin", "octigoran", "dryad", "satyr", "phoenix", "salamander", "yeti", "wendigo", "tuskin", "kamel", "balorg", "imp", "seraph", "unicorn", "synth"].forEach(function(r) {
        if (allowRepeat || !global.portal.throne.spawned.includes(r) && ![global.race.gods, global.race.old_gods, global.race.origin].includes(r)) {
          if (!current.includes(r)) {
            invaders.push(r);
          }
        }
      });
    }
    if (type.includes("rare")) {
      ["ghast", "shoggoth", "dwarf", "raccoon", "lichen", "wyvern", "beholder", "djinn", "narwhal", "bombardier", "nephilim"].forEach(function(r) {
        if (allowRepeat || !global.portal.throne.spawned.includes(r) && ![global.race.gods, global.race.old_gods, global.race.origin].includes(r)) {
          if (!current.includes(r)) {
            invaders.push(r);
          }
        }
      });
    }
    if (invaders.length === 0 && allowRecursion) {
      addHellEnemy(["basic", "advanced", "rare"], false);
    } else if (invaders.length === 0) {
      addHellEnemy(["basic", "advanced", "rare"], false, true);
    } else {
      let race = invaders[Math.floor(seededRandom(0, invaders.length))];
      global.portal.throne.enemy.push({
        r: race,
        f: 100,
        s: global.portal.throne.spawned.length + 1,
        k: 0
      });
      global.portal.throne.spawned.push(race);
      messageQueue(loc("portal_invasion_msg", [races[race].entity]), "info", false, ["progress"]);
      if (!global.settings.portal.fortress) {
        global.settings.portal.fortress = true;
        renderFortress();
      }
    }
  }
  function soulCapacitor(souls) {
    if (global.race["witch_hunter"] && global.portal.hasOwnProperty("soul_capacitor")) {
      global.portal.soul_capacitor.energy += souls;
      if (global.portal.soul_capacitor.energy > global.portal.soul_capacitor.ecap) {
        global.portal.soul_capacitor.energy = global.portal.soul_capacitor.ecap;
      }
    }
  }
  function hellSupression(area, val, wiki) {
    switch (area) {
      case "ruins": {
        let guard_posts_on = wiki ? global.portal?.guard_post?.on ?? 0 : p_on["guard_post"];
        let army = val || jobScale(guard_posts_on);
        let arc = (wiki ? global.portal?.arcology?.on ?? 0 : p_on["arcology"]) * 75;
        let aRating = armyRating(army, "hellArmy", 0);
        if (global.race["holy"]) {
          aRating *= 1 + traits.holy.vars()[1] / 100;
        }
        let unicornFathom = fathomCheck("unicorn");
        if (unicornFathom > 0) {
          aRating *= 1 + traits.holy.vars(1)[1] / 100 * unicornFathom;
        }
        let supress = global.race["warlord"] ? 1 : (aRating + arc) / 5e3;
        return {
          supress: supress > 1 ? 1 : supress,
          rating: aRating + arc
        };
      }
      case "gate": {
        let gSup = hellSupression("ruins", val, wiki);
        let turret = (wiki ? global.portal?.gate_turret?.on ?? 0 : p_on["gate_turret"]) * 100;
        if (global.race["holy"]) {
          turret *= 1 + traits.holy.vars()[1] / 100;
        }
        let unicornFathom = fathomCheck("unicorn");
        if (unicornFathom > 0) {
          turret *= 1 + traits.holy.vars(1)[1] / 100 * unicornFathom;
        }
        let supress = global.race["warlord"] ? 1 : (gSup.rating + turret) / 7500;
        return {
          supress: supress > 1 ? 1 : supress,
          rating: gSup.rating + turret
        };
      }
      default:
        return 0;
    }
  }
  var monsters = {
    fire_elm: {
      weapon: {
        laser: 1.05,
        flame: 0,
        plasma: 0.25,
        kinetic: 0.5,
        missile: 0.5,
        sonic: 1,
        shotgun: 0.75,
        tesla: 0.65,
        claws: 0.5,
        venom: 0.62,
        cold: 1.25,
        shock: 0.68,
        fire: 0,
        acid: 0.25,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.3,
        ice: 1.12,
        magma: 0,
        axe: 0.5,
        hammer: 0.5
      },
      nozone: {
        freeze: true,
        flooded: true
      },
      amp: {
        hot: 1.75,
        humid: 0.8,
        steam: 0.9
      }
    },
    water_elm: {
      weapon: {
        laser: 0.65,
        flame: 0.5,
        plasma: 1,
        kinetic: 0.2,
        missile: 0.5,
        sonic: 0.5,
        shotgun: 0.25,
        tesla: 0.75,
        claws: 0.4,
        venom: 0.8,
        cold: 1.1,
        shock: 0.68,
        fire: 0.8,
        acid: 0.25,
        stone: 0.4,
        iron: 0.3,
        flesh: 0.5,
        ice: 1.1,
        magma: 0.75,
        axe: 0.45,
        hammer: 0.45
      },
      nozone: {
        hot: true,
        freeze: true
      },
      amp: {
        steam: 1.5,
        river: 1.1,
        flooded: 2,
        rain: 1.75,
        humid: 1.25
      }
    },
    rock_golem: {
      weapon: {
        laser: 1,
        flame: 0.5,
        plasma: 1,
        kinetic: 0.65,
        missile: 0.95,
        sonic: 0.75,
        shotgun: 0.35,
        tesla: 0,
        claws: 0.7,
        venom: 0.25,
        cold: 0.35,
        shock: 0,
        fire: 0.9,
        acid: 1,
        stone: 0.5,
        iron: 0.65,
        flesh: 0.3,
        ice: 0.3,
        magma: 0.9,
        axe: 0.2,
        hammer: 1
      },
      nozone: {},
      amp: {}
    },
    bone_golem: {
      weapon: {
        laser: 0.45,
        flame: 0.35,
        plasma: 0.55,
        kinetic: 1,
        missile: 1,
        sonic: 0.75,
        shotgun: 0.75,
        tesla: 0.15,
        claws: 0.75,
        venom: 0,
        cold: 0.2,
        shock: 0.15,
        fire: 0.4,
        acid: 0.85,
        stone: 0.9,
        iron: 1,
        flesh: 0.15,
        ice: 0.3,
        magma: 0.9,
        axe: 0.65,
        hammer: 1.2
      },
      nozone: {},
      amp: {}
    },
    mech_dino: {
      weapon: {
        laser: 0.85,
        flame: 0.05,
        plasma: 0.55,
        kinetic: 0.45,
        missile: 0.5,
        sonic: 0.35,
        shotgun: 0.5,
        tesla: 1,
        claws: 0.38,
        venom: 0.1,
        cold: 0.5,
        shock: 1.1,
        fire: 0.5,
        acid: 0.75,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.15,
        ice: 0.3,
        magma: 0.9,
        axe: 0.6,
        hammer: 0.4
      },
      nozone: {},
      amp: {}
    },
    plant: {
      weapon: {
        laser: 0.42,
        flame: 1,
        plasma: 0.65,
        kinetic: 0.2,
        missile: 0.25,
        sonic: 0.75,
        shotgun: 0.35,
        tesla: 0.38,
        claws: 0.25,
        venom: 0.25,
        cold: 0.65,
        shock: 0.28,
        fire: 1,
        acid: 0.45,
        stone: 0.6,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.55,
        magma: 1,
        axe: 0.25,
        hammer: 0.15
      },
      nozone: {},
      amp: {}
    },
    crazed: {
      weapon: {
        laser: 0.5,
        flame: 0.85,
        plasma: 0.65,
        kinetic: 1,
        missile: 0.35,
        sonic: 0.15,
        shotgun: 0.95,
        tesla: 0.6,
        claws: 1,
        venom: 0.5,
        cold: 0.5,
        shock: 0.75,
        fire: 0.5,
        acid: 0.5,
        stone: 0.7,
        iron: 0.8,
        flesh: 0.9,
        ice: 0.4,
        magma: 0.5,
        axe: 1,
        hammer: 0.75
      },
      nozone: {},
      amp: {}
    },
    minotaur: {
      weapon: {
        laser: 0.32,
        flame: 0.5,
        plasma: 0.82,
        kinetic: 0.44,
        missile: 1,
        sonic: 0.15,
        shotgun: 0.2,
        tesla: 0.35,
        claws: 0.6,
        venom: 1.1,
        cold: 0.5,
        shock: 0.3,
        fire: 0.5,
        acid: 1,
        stone: 0.6,
        iron: 0.9,
        flesh: 0.3,
        ice: 0.4,
        magma: 0.55,
        axe: 0.75,
        hammer: 0.6
      },
      nozone: {},
      amp: {}
    },
    ooze: {
      weapon: {
        laser: 0.2,
        flame: 0.65,
        plasma: 1,
        kinetic: 0,
        missile: 0,
        sonic: 0.85,
        shotgun: 0,
        tesla: 0.15,
        claws: 0,
        venom: 0.15,
        cold: 1.5,
        shock: 0.2,
        fire: 0.6,
        acid: 0.5,
        stone: 0,
        iron: 0,
        flesh: 0,
        ice: 1.25,
        magma: 0.7,
        axe: 0,
        hammer: 0
      },
      nozone: {},
      amp: {}
    },
    zombie: {
      weapon: {
        laser: 0.35,
        flame: 1,
        plasma: 0.45,
        kinetic: 0.08,
        missile: 0.8,
        sonic: 0.18,
        shotgun: 0.95,
        tesla: 0.05,
        claws: 0.85,
        venom: 0,
        cold: 0.2,
        shock: 0.35,
        fire: 0.95,
        acid: 0.5,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.35,
        ice: 0.25,
        magma: 0.9,
        axe: 1,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    raptor: {
      weapon: {
        laser: 0.68,
        flame: 0.55,
        plasma: 0.85,
        kinetic: 1,
        missile: 0.44,
        sonic: 0.22,
        shotgun: 0.33,
        tesla: 0.66,
        claws: 0.85,
        venom: 0.5,
        cold: 0.5,
        shock: 0.88,
        fire: 0.6,
        acid: 0.6,
        stone: 1,
        iron: 0.85,
        flesh: 0.45,
        ice: 0.5,
        magma: 0.65,
        axe: 0.9,
        hammer: 0.6
      },
      nozone: {},
      amp: {}
    },
    frost_giant: {
      weapon: {
        laser: 0.9,
        flame: 0.82,
        plasma: 1,
        kinetic: 0.25,
        missile: 0.08,
        sonic: 0.45,
        shotgun: 0.28,
        tesla: 0.5,
        claws: 0.35,
        venom: 0.15,
        cold: 0,
        shock: 0.6,
        fire: 1.2,
        acid: 0.5,
        stone: 0.35,
        iron: 1,
        flesh: 0.3,
        ice: 0,
        magma: 1.1,
        axe: 0.5,
        hammer: 1
      },
      nozone: {
        hot: true
      },
      amp: {
        freeze: 2.5,
        hail: 1.65
      }
    },
    swarm: {
      weapon: {
        laser: 0.02,
        flame: 1,
        plasma: 0.04,
        kinetic: 0.01,
        missile: 0.08,
        sonic: 0.66,
        shotgun: 0.38,
        tesla: 0.45,
        claws: 0.05,
        venom: 0.01,
        cold: 0.8,
        shock: 0.75,
        fire: 0.8,
        acid: 0.75,
        stone: 0.03,
        iron: 0.03,
        flesh: 0.03,
        ice: 0.3,
        magma: 0.5,
        axe: 0.01,
        hammer: 0.05
      },
      nozone: {},
      amp: {}
    },
    dragon: {
      weapon: {
        laser: 0.18,
        flame: 0,
        plasma: 0.12,
        kinetic: 0.35,
        missile: 1,
        sonic: 0.22,
        shotgun: 0.65,
        tesla: 0.15,
        claws: 0.38,
        venom: 0.88,
        cold: 0.8,
        shock: 0.35,
        fire: 0,
        acid: 0.85,
        stone: 0.03,
        iron: 0.03,
        flesh: 0.03,
        ice: 0.3,
        magma: 0,
        axe: 0.4,
        hammer: 0.55
      },
      nozone: {},
      amp: {}
    },
    mech_dragon: {
      weapon: {
        laser: 0.84,
        flame: 0.1,
        plasma: 0.68,
        kinetic: 0.18,
        missile: 0.75,
        sonic: 0.22,
        shotgun: 0.28,
        tesla: 1,
        claws: 0.28,
        venom: 0,
        cold: 0.35,
        shock: 1,
        fire: 0.15,
        acid: 0.72,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.2,
        magma: 0.15,
        axe: 0.25,
        hammer: 0.8
      },
      nozone: {},
      amp: {}
    },
    construct: {
      weapon: {
        laser: 0.5,
        flame: 0.2,
        plasma: 0.6,
        kinetic: 0.34,
        missile: 0.9,
        sonic: 0.08,
        shotgun: 0.28,
        tesla: 1,
        claws: 0.28,
        venom: 0,
        cold: 0.45,
        shock: 1.1,
        fire: 0.22,
        acid: 0.68,
        stone: 0.55,
        iron: 0.55,
        flesh: 0.4,
        ice: 0.4,
        magma: 0.18,
        axe: 0.42,
        hammer: 0.95
      },
      nozone: {},
      amp: {}
    },
    beholder: {
      weapon: {
        laser: 0.75,
        flame: 0.15,
        plasma: 1,
        kinetic: 0.45,
        missile: 0.05,
        sonic: 0.01,
        shotgun: 0.12,
        tesla: 0.3,
        claws: 0.48,
        venom: 0.9,
        cold: 0.88,
        shock: 0.24,
        fire: 0.18,
        acid: 0.9,
        stone: 0.72,
        iron: 0.45,
        flesh: 0.85,
        ice: 0.92,
        magma: 0.16,
        axe: 0.44,
        hammer: 0.08
      },
      nozone: {},
      amp: {}
    },
    worm: {
      weapon: {
        laser: 0.55,
        flame: 0.38,
        plasma: 0.45,
        kinetic: 0.2,
        missile: 0.05,
        sonic: 1,
        shotgun: 0.02,
        tesla: 0.01,
        claws: 0.18,
        venom: 0.65,
        cold: 1,
        shock: 0.02,
        fire: 0.38,
        acid: 0.48,
        stone: 0.22,
        iron: 0.24,
        flesh: 0.35,
        ice: 1,
        magma: 0.4,
        axe: 0.15,
        hammer: 0.05
      },
      nozone: {},
      amp: {}
    },
    hydra: {
      weapon: {
        laser: 0.85,
        flame: 0.75,
        plasma: 0.85,
        kinetic: 0.25,
        missile: 0.45,
        sonic: 0.5,
        shotgun: 0.6,
        tesla: 0.65,
        claws: 0.3,
        venom: 0.65,
        cold: 0.55,
        shock: 0.65,
        fire: 0.75,
        acid: 0.85,
        stone: 0.25,
        iron: 0.15,
        flesh: 0.2,
        ice: 0.55,
        magma: 0.75,
        axe: 0.45,
        hammer: 0.65
      },
      nozone: {},
      amp: {}
    },
    colossus: {
      weapon: {
        laser: 1,
        flame: 0.05,
        plasma: 0.75,
        kinetic: 0.45,
        missile: 1,
        sonic: 0.35,
        shotgun: 0.35,
        tesla: 0.5,
        claws: 0.48,
        venom: 0.22,
        cold: 0.25,
        shock: 0.65,
        fire: 0.15,
        acid: 0.95,
        stone: 0.55,
        iron: 0.95,
        flesh: 0.25,
        ice: 0.35,
        magma: 0.2,
        axe: 0.55,
        hammer: 0.35
      },
      nozone: {},
      amp: {}
    },
    lich: {
      weapon: {
        laser: 0.1,
        flame: 0.1,
        plasma: 0.1,
        kinetic: 0.45,
        missile: 0.75,
        sonic: 0.35,
        shotgun: 0.75,
        tesla: 0.5,
        claws: 0.4,
        venom: 0.01,
        cold: 0.1,
        shock: 0.5,
        fire: 0.1,
        acid: 0.1,
        stone: 0.35,
        iron: 0.25,
        flesh: 0.95,
        ice: 0.1,
        magma: 0.1,
        axe: 0.4,
        hammer: 1
      },
      nozone: {},
      amp: {}
    },
    ape: {
      weapon: {
        laser: 1,
        flame: 0.95,
        plasma: 0.85,
        kinetic: 0.5,
        missile: 0.5,
        sonic: 0.05,
        shotgun: 0.35,
        tesla: 0.68,
        claws: 0.65,
        venom: 0.95,
        cold: 0.5,
        shock: 0.5,
        fire: 0.75,
        acid: 0.65,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.5,
        magma: 0.75,
        axe: 0.65,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    bandit: {
      weapon: {
        laser: 0.65,
        flame: 0.5,
        plasma: 0.85,
        kinetic: 1,
        missile: 0.5,
        sonic: 0.25,
        shotgun: 0.75,
        tesla: 0.25,
        claws: 1,
        venom: 0.15,
        cold: 0.5,
        shock: 0.25,
        fire: 0.5,
        acid: 0.5,
        stone: 0.5,
        iron: 0.8,
        flesh: 0.5,
        ice: 0.5,
        magma: 0.5,
        axe: 1,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    croc: {
      weapon: {
        laser: 0.65,
        flame: 0.05,
        plasma: 0.6,
        kinetic: 0.5,
        missile: 0.5,
        sonic: 1,
        shotgun: 0.2,
        tesla: 0.75,
        claws: 1,
        venom: 0.5,
        cold: 1,
        shock: 0.75,
        fire: 0.05,
        acid: 0.08,
        stone: 0.6,
        iron: 0.5,
        flesh: 0.25,
        ice: 0.95,
        magma: 0.05,
        axe: 0.75,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    djinni: {
      weapon: {
        laser: 0,
        flame: 0.35,
        plasma: 1,
        kinetic: 0.15,
        missile: 0,
        sonic: 0.65,
        shotgun: 0.22,
        tesla: 0.4,
        claws: 0.18,
        venom: 0.12,
        cold: 0.9,
        shock: 0.45,
        fire: 0.3,
        acid: 0.1,
        stone: 0.2,
        iron: 0.95,
        flesh: 0.2,
        ice: 0.9,
        magma: 0.3,
        axe: 0.12,
        hammer: 0
      },
      nozone: {},
      amp: {}
    },
    snake: {
      weapon: {
        laser: 0.5,
        flame: 0.5,
        plasma: 0.5,
        kinetic: 0.5,
        missile: 0.5,
        sonic: 0.5,
        shotgun: 0.5,
        tesla: 0.5,
        claws: 0.5,
        venom: 0.02,
        cold: 0.75,
        shock: 0.5,
        fire: 0.5,
        acid: 0.5,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.75,
        magma: 0.5,
        axe: 0.5,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    centipede: {
      weapon: {
        laser: 0.5,
        flame: 0.85,
        plasma: 0.95,
        kinetic: 0.65,
        missile: 0.6,
        sonic: 0,
        shotgun: 0.5,
        tesla: 0.01,
        claws: 0.65,
        venom: 0.01,
        cold: 0,
        shock: 0.01,
        fire: 0.88,
        acid: 0.95,
        stone: 0.6,
        iron: 0.45,
        flesh: 0.55,
        ice: 0,
        magma: 0.88,
        axe: 0.7,
        hammer: 0.4
      },
      nozone: {},
      amp: {}
    },
    spider: {
      weapon: {
        laser: 0.65,
        flame: 1,
        plasma: 0.22,
        kinetic: 0.75,
        missile: 0.15,
        sonic: 0.38,
        shotgun: 0.9,
        tesla: 0.18,
        claws: 0.12,
        venom: 0.05,
        cold: 0.5,
        shock: 0.32,
        fire: 1,
        acid: 0.65,
        stone: 0.8,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.5,
        magma: 1,
        axe: 0.18,
        hammer: 0.75
      },
      nozone: {},
      amp: {}
    },
    manticore: {
      weapon: {
        laser: 0.05,
        flame: 0.25,
        plasma: 0.95,
        kinetic: 0.5,
        missile: 0.15,
        sonic: 0.48,
        shotgun: 0.4,
        tesla: 0.6,
        claws: 0.5,
        venom: 0.5,
        cold: 0.8,
        shock: 0.75,
        fire: 0.15,
        acid: 0.95,
        stone: 0.25,
        iron: 0.5,
        flesh: 0.8,
        ice: 0.8,
        magma: 0.15,
        axe: 0.5,
        hammer: 0.25
      },
      nozone: {},
      amp: {}
    },
    fiend: {
      weapon: {
        laser: 0.75,
        flame: 0.25,
        plasma: 0.5,
        kinetic: 0.25,
        missile: 0.75,
        sonic: 0.25,
        shotgun: 0.5,
        tesla: 0.5,
        claws: 0.65,
        venom: 0.1,
        cold: 0.65,
        shock: 0.5,
        fire: 0.2,
        acid: 0.5,
        stone: 0.25,
        iron: 0.75,
        flesh: 1,
        ice: 0.65,
        magma: 0.2,
        axe: 0.75,
        hammer: 0.25
      },
      nozone: {},
      amp: {}
    },
    bat: {
      weapon: {
        laser: 0.16,
        flame: 0.18,
        plasma: 0.12,
        kinetic: 0.25,
        missile: 0.02,
        sonic: 1,
        shotgun: 0.9,
        tesla: 0.58,
        claws: 0.1,
        venom: 0.1,
        cold: 0.8,
        shock: 0.65,
        fire: 0.15,
        acid: 0.5,
        stone: 0.1,
        iron: 0.1,
        flesh: 0.5,
        ice: 0.8,
        magma: 0.2,
        axe: 0.1,
        hammer: 0.1
      },
      nozone: {},
      amp: {}
    },
    medusa: {
      weapon: {
        laser: 0.35,
        flame: 0.1,
        plasma: 0.3,
        kinetic: 0.95,
        missile: 1,
        sonic: 0.15,
        shotgun: 0.88,
        tesla: 0.26,
        claws: 0.42,
        venom: 0.3,
        cold: 0.48,
        shock: 0.28,
        fire: 0.1,
        acid: 0.85,
        stone: 1,
        iron: 0.25,
        flesh: 0.75,
        ice: 0.52,
        magma: 0.12,
        axe: 0.34,
        hammer: 1
      },
      nozone: {},
      amp: {}
    },
    ettin: {
      weapon: {
        laser: 0.5,
        flame: 0.35,
        plasma: 0.8,
        kinetic: 0.5,
        missile: 0.25,
        sonic: 0.3,
        shotgun: 0.6,
        tesla: 0.09,
        claws: 0.5,
        venom: 0.95,
        cold: 0.3,
        shock: 0.8,
        fire: 0.38,
        acid: 0.9,
        stone: 0.6,
        iron: 0.75,
        flesh: 0.4,
        ice: 0.28,
        magma: 0.32,
        axe: 0.45,
        hammer: 0.25
      },
      nozone: {},
      amp: {}
    },
    faceless: {
      weapon: {
        laser: 0.6,
        flame: 0.28,
        plasma: 0.6,
        kinetic: 0,
        missile: 0.05,
        sonic: 0.8,
        shotgun: 0.15,
        tesla: 1,
        claws: 0.02,
        venom: 0.01,
        cold: 0,
        shock: 1,
        fire: 0.25,
        acid: 0.55,
        stone: 0.15,
        iron: 0.15,
        flesh: 0.95,
        ice: 0,
        magma: 0.25,
        axe: 0.01,
        hammer: 0.05
      },
      nozone: {},
      amp: {}
    },
    enchanted: {
      weapon: {
        laser: 1,
        flame: 0.02,
        plasma: 0.95,
        kinetic: 0.2,
        missile: 0.7,
        sonic: 0.05,
        shotgun: 0.65,
        tesla: 0.01,
        claws: 0.1,
        venom: 0,
        cold: 0.5,
        shock: 0.01,
        fire: 0.02,
        acid: 1,
        stone: 0.25,
        iron: 0.75,
        flesh: 0.1,
        ice: 0.5,
        magma: 0.03,
        axe: 0.1,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    gargoyle: {
      weapon: {
        laser: 0.15,
        flame: 0.4,
        plasma: 0.3,
        kinetic: 0.5,
        missile: 0.5,
        sonic: 0.85,
        shotgun: 1,
        tesla: 0.2,
        claws: 0.45,
        venom: 0.05,
        cold: 0.15,
        shock: 0.08,
        fire: 0.38,
        acid: 0.85,
        stone: 1,
        iron: 0.85,
        flesh: 0.25,
        ice: 0.15,
        magma: 0.35,
        axe: 0.42,
        hammer: 1
      },
      nozone: {},
      amp: {}
    },
    chimera: {
      weapon: {
        laser: 0.38,
        flame: 0.6,
        plasma: 0.42,
        kinetic: 0.85,
        missile: 0.35,
        sonic: 0.5,
        shotgun: 0.65,
        tesla: 0.8,
        claws: 0.92,
        venom: 0.5,
        cold: 0.45,
        shock: 0.8,
        fire: 0.56,
        acid: 0.4,
        stone: 0.5,
        iron: 0.5,
        flesh: 0.5,
        ice: 0.48,
        magma: 0.54,
        axe: 0.88,
        hammer: 0.42
      },
      nozone: {},
      amp: {}
    },
    gorgon: {
      weapon: {
        laser: 0.65,
        flame: 0.65,
        plasma: 0.64,
        kinetic: 0.65,
        missile: 0.66,
        sonic: 0.65,
        shotgun: 0.65,
        tesla: 0.65,
        claws: 0.65,
        venom: 0.65,
        cold: 0.65,
        shock: 0.65,
        fire: 0.65,
        acid: 0.65,
        stone: 0.65,
        iron: 0.65,
        flesh: 0.65,
        ice: 0.65,
        magma: 0.65,
        axe: 0.65,
        hammer: 0.65
      },
      nozone: {},
      amp: {}
    },
    kraken: {
      weapon: {
        laser: 0.75,
        flame: 0.35,
        plasma: 0.75,
        kinetic: 0.35,
        missile: 0.5,
        sonic: 0.18,
        shotgun: 0.05,
        tesla: 0.85,
        claws: 0.32,
        venom: 0.8,
        cold: 0.66,
        shock: 0.82,
        fire: 0.33,
        acid: 0.75,
        stone: 0.45,
        iron: 0.35,
        flesh: 0.4,
        ice: 0.66,
        magma: 0.33,
        axe: 0.36,
        hammer: 0.5
      },
      nozone: {},
      amp: {}
    },
    homunculus: {
      weapon: {
        laser: 0.05,
        flame: 1,
        plasma: 0.1,
        kinetic: 0.85,
        missile: 0.65,
        sonic: 0.5,
        shotgun: 0.75,
        tesla: 0.2,
        claws: 0.85,
        venom: 0.4,
        cold: 0.12,
        shock: 0.22,
        fire: 1,
        acid: 0.13,
        stone: 0.65,
        iron: 0.68,
        flesh: 0.95,
        ice: 0.18,
        magma: 0.9,
        axe: 0.85,
        hammer: 0.65
      },
      nozone: {},
      amp: {}
    },
    giant_chicken: {
      weapon: {
        laser: 0.95,
        flame: 0.95,
        plasma: 0.95,
        kinetic: 0.95,
        missile: 0.95,
        sonic: 0.95,
        shotgun: 0.95,
        tesla: 0.95,
        claws: 0.95,
        venom: 0.96,
        cold: 0.95,
        shock: 0.95,
        fire: 0.95,
        acid: 0.95,
        stone: 0.95,
        iron: 0.95,
        flesh: 0.94,
        ice: 0.95,
        magma: 0.95,
        axe: 0.95,
        hammer: 0.95
      },
      nozone: {},
      amp: {}
    },
    skeleton_pack: {
      weapon: {
        laser: 0.5,
        flame: 0.1,
        plasma: 0.5,
        kinetic: 1,
        missile: 1.2,
        sonic: 0.5,
        shotgun: 1.05,
        tesla: 0.2,
        claws: 0.65,
        venom: 0,
        cold: 0.11,
        shock: 0.22,
        fire: 0.1,
        acid: 0.5,
        stone: 1,
        iron: 0.65,
        flesh: 0.25,
        ice: 0.1,
        magma: 0.12,
        axe: 0.15,
        hammer: 1.08
      },
      nozone: {},
      amp: {}
    }
  };
  function mechCost(size, infernal, standardize) {
    let soul = 9999;
    let cost = 1e7;
    switch (size) {
      case "small":
        {
          let baseCost = global.blood["prepared"] && global.blood.prepared >= 2 ? 5e4 : 75e3;
          cost = infernal ? baseCost * 2.5 : baseCost;
          soul = infernal ? 20 : 1;
        }
        break;
      case "medium":
        {
          cost = infernal ? 45e4 : 18e4;
          soul = infernal ? 100 : 4;
        }
        break;
      case "large":
        {
          cost = infernal ? 925e3 : 375e3;
          soul = infernal ? 500 : 20;
        }
        break;
      case "titan":
        {
          cost = infernal ? 15e5 : 75e4;
          soul = infernal ? 1500 : 75;
        }
        break;
      case "collector":
        {
          let baseCost = global.blood["prepared"] && global.blood.prepared >= 2 ? 8e3 : 1e4;
          cost = infernal ? baseCost * 2.5 : baseCost;
          soul = 1;
        }
        break;
      case "minion":
        {
          let baseCost = global.blood["prepared"] && global.blood.prepared >= 2 ? 3e4 : 5e4;
          cost = infernal ? baseCost * 2.5 : baseCost;
          soul = infernal ? 10 : 1;
        }
        break;
      case "fiend":
        {
          cost = infernal ? 3e5 : 125e3;
          soul = infernal ? 40 : 4;
        }
        break;
      case "cyberdemon":
        {
          cost = infernal ? 625e3 : 25e4;
          soul = infernal ? 120 : 12;
        }
        break;
      case "archfiend":
        {
          cost = infernal ? 12e5 : 6e5;
          soul = infernal ? 250 : 25;
        }
        break;
    }
    if (standardize) {
      return {
        Soul_Gem() {
          return soul;
        },
        Supply() {
          return cost;
        }
      };
    }
    return { s: soul, c: cost };
  }
  function bossResists(boss) {
    let weak = `laser`;
    let resist = `laser`;
    let standardList = ["laser", "flame", "plasma", "kinetic", "missile", "sonic", "shotgun", "tesla"];
    Object.keys(monsters[boss].weapon).forEach(function(weapon) {
      if (global.race["warlord"] || standardList.includes(weapon)) {
        if (checkBossResist(boss, weapon) > checkBossResist(boss, weak)) {
          weak = weapon;
        }
        if (checkBossResist(boss, weapon) < checkBossResist(boss, resist)) {
          resist = weapon;
        }
      }
    });
    if (weak === resist) {
      weak = "none";
      resist = "none";
    }
    return { w: weak, r: resist };
  }
  function checkBossResist(boss, weapon) {
    let effectiveness = monsters[boss].weapon[weapon];
    let seed = global.stats.reset + (global.portal?.spire?.count || 1);
    let seed_r1 = Math.floor(seededRandom(0, 25e3, false, seed + (global.portal?.spire?.count || 1) * 2));
    let seed_w1 = Math.floor(seededRandom(0, 25e3, false, seed + global.stats.reset * 2));
    let weaponList = global.race["warlord"] ? ["laser", "kinetic", "shotgun", "missile", "flame", "plasma", "sonic", "tesla", "claws", "venom", "cold", "shock", "fire", "acid", "stone", "iron", "flesh", "ice", "magma", "axe", "hammer"] : ["laser", "kinetic", "shotgun", "missile", "flame", "plasma", "sonic", "tesla"];
    let resist = weaponList[Math.floor(seededRandom(0, weaponList.length, false, seed_r1))];
    let weak = weaponList[Math.floor(seededRandom(0, weaponList.length, false, seed_w1))];
    if (weapon === resist) {
      let seed_r2 = Math.floor(seededRandom(0, 25e3, false, seed_r1 + (global.portal?.spire?.count || 1) * 3));
      effectiveness -= Math.floor(seededRandom(0, 26, false, seed_r2)) / 100;
      if (effectiveness < 0) {
        effectiveness = 0;
      }
    } else if (weapon === weak) {
      let seed_w2 = Math.floor(seededRandom(0, 25e3, false, seed_w1 + global.stats.reset * 3));
      effectiveness += Math.floor(seededRandom(0, 26, false, seed_w2)) / 100;
    }
    return effectiveness;
  }
  function drawMechLab() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 4)) {
      return;
    }
    clearElement($("#mechLab"));
    if (global.portal.hasOwnProperty("mechbay") && global.settings.showMechLab) {
      let lab = $(`#mechLab`);
      if (!global.portal.mechbay.hasOwnProperty("blueprint")) {
        global.portal.mechbay["blueprint"] = {
          size: "small",
          hardpoint: ["laser"],
          chassis: "tread",
          equip: [],
          infernal: false
        };
      }
      let assemble = $(`<div id="mechAssembly" class="mechAssembly"></div>`);
      lab.append(assemble);
      let title = $(`<div><span class="has-text-caution">${loc(global.race["warlord"] ? `portal_mech_spawn` : `portal_mech_assembly`)}</span> - <span>{{ b.size | slabel }} {{ b.chassis | clabel }}</span></div>`);
      assemble.append(title);
      title.append(` | <span><span class="has-text-warning">${loc(global.race["warlord"] ? `portal_mech_lair_space` : "portal_mech_bay_space")}</span>: {{ m.bay }} / {{ m.max }}</span>`);
      title.append(` | <span><span class="has-text-warning">${loc("portal_mech_sup_avail")}</span>: {{ p.supply | round }} / {{ p.sup_max }}</span>`);
      let infernal = global.blood["prepared"] && global.blood.prepared >= 3 ? `<b-checkbox class="patrol" v-model="b.infernal">${loc("portal_mech_infernal")} (${loc("portal_mech_infernal_effect", [25])})</b-checkbox>` : ``;
      assemble.append(`<div><span class="has-text-warning">${loc(global.race["warlord"] ? `portal_mech_lair` : `portal_mech_space`)}</span> <span class="has-text-danger">{{ b.size | bay }}</span> | <span class="has-text-warning">${loc(`portal_mech_cost`)}</span> <span class="has-text-danger">{{ b.size | price }}</span> | <span class="has-text-warning">${loc(`portal_mech_soul`, [global.resource.Soul_Gem.name])}</span> <span class="has-text-danger">{{ b.size | soul }}</span>${infernal}</div>`);
      assemble.append(`<div>{{ b.size | desc }}</div>`);
      let options = $(`<div class="bayOptions"></div>`);
      assemble.append(options);
      let sizes = ``;
      let sizeTypes = global.race["warlord"] ? ["minion", "fiend", "cyberdemon", "archfiend"] : ["small", "medium", "large", "titan", "collector"];
      sizeTypes.forEach(function(size, idx) {
        sizes += `<b-dropdown-item aria-role="listitem" v-on:click="setSize('${size}')" class="size r0 a${idx}" data-val="${size}">${loc(`portal_mech_size_${size}`)}</b-dropdown-item>`;
      });
      options.append(`<b-dropdown :triggers="['hover', 'click']" aria-role="list">
            <button class="button is-info" slot="trigger">
                <span>${loc(`portal_mech_size`)}: {{ b.size | slabel }}</span>
                <b-icon icon="menu-down"></b-icon>
            </button>${sizes}
        </b-dropdown>`);
      let chassis = ``;
      let typeList = ["wheel", "tread", "biped", "quad", "spider", "hover"];
      if (global.race["warlord"]) {
        switch (global.portal.mechbay.blueprint.size) {
          case "minion":
            typeList = ["imp", "flying_imp", "hound", "harpy", "barghest"];
            break;
          case "fiend":
            typeList = ["cambion", "minotaur", "nightmare", "rakshasa", "golem"];
            break;
          case "cyberdemon":
            typeList = ["wheel", "tread", "biped", "quad", "spider", "hover"];
            break;
          case "archfiend":
            typeList = ["dragon", "snake", "gorgon", "hydra"];
            break;
        }
      }
      typeList.forEach(function(val, idx) {
        chassis += `<b-dropdown-item aria-role="listitem" v-on:click="setType('${val}')" class="chassis r0 a${idx}" data-val="${val}">${loc(`portal_mech_chassis_${val}`)}</b-dropdown-item>`;
      });
      options.append(`<b-dropdown :triggers="['hover', 'click']" aria-role="list">
            <button class="button is-info" slot="trigger">
                <span>${loc(`portal_mech_type`)}: {{ b.chassis | clabel }}</span>
                <b-icon icon="menu-down"></b-icon>
            </button>${chassis}
        </b-dropdown>`);
      for (let i = 0; i < 4; i++) {
        let weapons = ``;
        let weaponList = validWeapons(global.portal.mechbay.blueprint.size, global.portal.mechbay.blueprint.chassis, i);
        weaponList.forEach(function(val, idx) {
          weapons += `<b-dropdown-item aria-role="listitem" v-on:click="setWep('${val}',${i})" class="weapon r${i} a${idx}" data-val="${val}">${loc(`portal_mech_weapon_${val}`)}</b-dropdown-item>`;
        });
        options.append(`<b-dropdown :triggers="['hover', 'click']" aria-role="list" v-show="vis(${i})">
                <button class="button is-info" slot="trigger">
                    <span>${loc(`portal_mech_weapon`)}: {{ b.hardpoint[${i}] || 'laser' | wlabel }}</span>
                    <b-icon icon="menu-down"></b-icon>
                </button>${weapons}
            </b-dropdown>`);
      }
      let e_cap = global.blood["prepared"] ? 5 : 4;
      for (let i = 0; i < e_cap; i++) {
        let equip = ``;
        let equipTypes = validEquipment(global.portal.mechbay.blueprint.size, global.portal.mechbay.blueprint.chassis, i);
        equipTypes.forEach(function(val, idx) {
          equip += `<b-dropdown-item aria-role="listitem" v-on:click="setEquip('${val}',${i})" class="equip r${i} a${idx}" data-val="${val}">{{ '${val}' | equipment }}</b-dropdown-item>`;
        });
        options.append(`<b-dropdown :triggers="['hover', 'click']" aria-role="list" v-show="eVis(${i})">
                <button class="button is-info" slot="trigger">
                    <span>${loc(global.race["warlord"] ? `portal_mech_attribute` : `portal_mech_equipment`)}: {{ b.equip[${i}] || 'shields' | equipment }}</span>
                    <b-icon icon="menu-down"></b-icon>
                </button>${equip}
            </b-dropdown>`);
      }
      assemble.append(`<div class="mechAssemble"><button class="button is-info" slot="trigger" v-on:click="build()"><span>${global.race["warlord"] ? loc("portal_mech_summon") : loc("portal_mech_construct")}</span></button></div>`);
      vBind({
        el: "#mechAssembly",
        data: {
          p: global.portal.purifier,
          m: global.portal.mechbay,
          b: global.portal.mechbay.blueprint
        },
        methods: {
          build() {
            let costs = mechCost(global.portal.mechbay.blueprint.size, global.portal.mechbay.blueprint.infernal);
            let cost = costs.c;
            let soul = costs.s;
            let size = mechSize(global.portal.mechbay.blueprint.size);
            let avail = global.portal.mechbay.max - global.portal.mechbay.bay;
            if (!(global.settings.qKey && keyMap.q) && global.portal.purifier.supply >= cost && avail >= size && global.resource.Soul_Gem.amount >= soul) {
              global.portal.purifier.supply -= cost;
              global.resource.Soul_Gem.amount -= soul;
              buildMech(global.portal.mechbay.blueprint);
            } else {
              let used = 0;
              for (let j = 0; j < global.queue.queue.length; j++) {
                used += Math.ceil(global.queue.queue[j].q / global.queue.queue[j].qs);
              }
              if (used < global.queue.max) {
                let blueprint = deepClone(global.portal.mechbay.blueprint);
                global.queue.queue.push({
                  id: `hell-mech-${Math.rand(0, 1e5)}`,
                  action: "hell-mech",
                  type: blueprint,
                  label: `${loc(`portal_mech_size_${blueprint.size}`)} ${loc(`portal_mech_chassis_${blueprint.chassis}`)}`,
                  cna: false,
                  time: 0,
                  q: 1,
                  qs: 1,
                  t_max: 0,
                  bres: false
                });
                buildQueue();
              }
            }
          },
          setSize(s) {
            global.portal.mechbay.blueprint.size = s;
            if (s === "collector") {
              global.portal.mechbay.blueprint.hardpoint.length = 0;
            } else if (s === "small" || s === "medium" || s === "minion" || s === "fiend") {
              if (global.portal.mechbay.blueprint.hardpoint.length === 0) {
                global.portal.mechbay.blueprint.hardpoint.push("laser");
              }
              global.portal.mechbay.blueprint.hardpoint.length = 1;
            } else {
              if (global.portal.mechbay.blueprint.hardpoint.length === 0) {
                global.portal.mechbay.blueprint.hardpoint.push("laser");
              }
              if (global.portal.mechbay.blueprint.hardpoint.length === 1) {
                global.portal.mechbay.blueprint.hardpoint.push(global.portal.mechbay.blueprint.hardpoint.includes("laser") ? "plasma" : "laser");
              }
              if (s === "titan") {
                if (global.portal.mechbay.blueprint.hardpoint.length === 2) {
                  global.portal.mechbay.blueprint.hardpoint.push(global.portal.mechbay.blueprint.hardpoint.includes("laser") ? "shotgun" : "laser");
                  global.portal.mechbay.blueprint.hardpoint.push(global.portal.mechbay.blueprint.hardpoint.includes("laser") ? "kinetic" : "laser");
                }
              } else {
                global.portal.mechbay.blueprint.hardpoint.length = 2;
              }
            }
            if (global.race["warlord"]) {
              global.portal.mechbay.blueprint.equip[0] = validEquipment(s, global.portal.mechbay.blueprint.chassis)[0];
              global.portal.mechbay.blueprint.equip.length = 1;
            }
            switch (s) {
              case "small":
              case "minion":
                if (global.blood["prepared"]) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[0]);
                }
                global.portal.mechbay.blueprint.equip.length = global.blood["prepared"] ? 1 : 0;
                break;
              case "medium":
              case "fiend":
                if (global.portal.mechbay.blueprint.equip.length < 1) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[0]);
                }
                if (global.blood["prepared"]) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[1]);
                }
                global.portal.mechbay.blueprint.equip.length = global.blood["prepared"] ? 2 : 1;
                break;
              case "collector":
              case "large":
              case "cyberdemon":
                if (global.portal.mechbay.blueprint.equip.length < 1) {
                  global.portal.mechbay.blueprint.equip.push("special");
                }
                if (global.portal.mechbay.blueprint.equip.length < 2) {
                  global.portal.mechbay.blueprint.equip.push("shields");
                }
                if (global.blood["prepared"]) {
                  global.portal.mechbay.blueprint.equip.push("grapple");
                }
                global.portal.mechbay.blueprint.equip.length = global.blood["prepared"] ? 3 : 2;
                break;
              case "titan":
              case "archfiend":
                if (global.portal.mechbay.blueprint.equip.length < 1) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[0]);
                }
                if (global.portal.mechbay.blueprint.equip.length < 2) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[1]);
                }
                if (global.portal.mechbay.blueprint.equip.length < 3) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[2]);
                }
                if (global.portal.mechbay.blueprint.equip.length < 4) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[3]);
                }
                if (global.blood["prepared"]) {
                  global.portal.mechbay.blueprint.equip.push(validEquipment(s, global.portal.mechbay.blueprint.chassis)[4]);
                }
                global.portal.mechbay.blueprint.equip.length = global.blood["prepared"] ? 5 : 4;
                break;
            }
            if (global.race["warlord"]) {
              switch (s) {
                case "minion":
                  global.portal.mechbay.blueprint.chassis = "imp";
                  break;
                case "fiend":
                  global.portal.mechbay.blueprint.chassis = "cambion";
                  break;
                case "cyberdemon":
                  global.portal.mechbay.blueprint.chassis = "biped";
                  global.portal.mechbay.blueprint.hardpoint[1] = validWeapons(s, global.portal.mechbay.blueprint.chassis, 1)[1];
                  break;
                case "archfiend":
                  global.portal.mechbay.blueprint.chassis = "dragon";
                  global.portal.mechbay.blueprint.hardpoint[1] = validWeapons(s, global.portal.mechbay.blueprint.chassis, 1)[0];
                  break;
              }
              global.portal.mechbay.blueprint.hardpoint[0] = validWeapons(s, global.portal.mechbay.blueprint.chassis, 0)[0];
              drawMechLab();
              clearPopper();
            }
          },
          setType(c) {
            global.portal.mechbay.blueprint.chassis = c;
            if (global.race["warlord"]) {
              global.portal.mechbay.blueprint.hardpoint[0] = validWeapons(global.portal.mechbay.blueprint.size, c, 0)[0];
              if (c === "hydra") {
                global.portal.mechbay.blueprint.hardpoint[1] = validWeapons(global.portal.mechbay.blueprint.size, c, 1)[0];
                global.portal.mechbay.blueprint.hardpoint[2] = validWeapons(global.portal.mechbay.blueprint.size, c, 2)[0];
                global.portal.mechbay.blueprint.hardpoint[3] = validWeapons(global.portal.mechbay.blueprint.size, c, 3)[0];
              } else if (c !== "hydra" && global.portal.mechbay.blueprint.size === "archfiend") {
                global.portal.mechbay.blueprint.hardpoint.length = 2;
              }
              drawMechLab();
              clearPopper();
            }
          },
          setWep(w, i) {
            global.portal.mechbay.blueprint.hardpoint[i] = w;
            vBind({ el: `#mechAssembly` }, "update");
          },
          setEquip(e, i) {
            global.portal.mechbay.blueprint.equip[i] = e;
            vBind({ el: `#mechAssembly` }, "update");
          },
          vis(hp) {
            if (global.portal.mechbay.blueprint.size === "collector") {
              return false;
            }
            if (hp === 0 || ["large", "cyberdemon"].includes(global.portal.mechbay.blueprint.size) && hp < 2 || global.portal.mechbay.blueprint.size === "titan") {
              return true;
            } else if (global.portal.mechbay.blueprint.size === "archfiend") {
              switch (global.portal.mechbay.blueprint.chassis) {
                case "dragon":
                case "snake":
                case "gorgon":
                  return hp < 2 ? true : false;
                case "hydra":
                  return hp < 4 ? true : false;
              }
            }
            return false;
          },
          eVis(es) {
            let prep = global.blood["prepared"] ? 1 : 0;
            switch (global.portal.mechbay.blueprint.size) {
              case "small":
              case "minion":
                return prep === 1 && es === 0 ? true : false;
              case "medium":
              case "fiend":
                return es <= 0 + prep ? true : false;
              case "collector":
              case "large":
              case "cyberdemon":
                return es <= 1 + prep ? true : false;
              case "titan":
              case "archfiend":
                return true;
            }
          }
        },
        filters: {
          bay(s) {
            return mechSize(s);
          },
          price(s) {
            let costs = mechCost(s, global.portal.mechbay.blueprint.infernal);
            return costs.c;
          },
          soul(s) {
            let costs = mechCost(s, global.portal.mechbay.blueprint.infernal);
            return costs.s;
          },
          slabel(s) {
            return loc(`portal_mech_size_${s}`);
          },
          clabel(c) {
            return loc(`portal_mech_chassis_${c}`);
          },
          wlabel(w) {
            return loc(`portal_mech_weapon_${w}`);
          },
          desc(s) {
            return loc(`portal_mech_size_${s}_desc`);
          },
          round(v) {
            return Math.round(v);
          },
          equipment(e) {
            if (e !== "special") {
              return loc(`portal_mech_equip_${e}`);
            }
            let type = "jumpjet";
            switch (global.portal.mechbay.blueprint.size) {
              case "large":
              case "cyberdemon":
                type = "battery";
                break;
              case "titan":
                type = "target";
                break;
            }
            return loc(`portal_mech_equip_${type}`);
          }
        }
      });
      ["size", "chassis", "weapon", "equip"].forEach(function(type) {
        let range = 1;
        if (type === "weapon") {
          range = 4;
        } else if (type === "equip") {
          range = e_cap;
        }
        for (let idx = 0; idx < range; idx++) {
          for (let i = 0; i < $(`#mechAssembly .${type}.r${idx}`).length; i++) {
            popover(
              `mechAssembly${type}${idx}${i}`,
              function(obj) {
                let val = $(obj.this).attr(`data-val`);
                if (val === "special") {
                  switch (global.portal.mechbay.blueprint.size) {
                    case "large":
                    case "cyberdemon":
                      val = "battery";
                      break;
                    case "titan":
                      val = "target";
                      break;
                    default:
                      val = "jumpjet";
                      break;
                  }
                }
                return loc(`portal_mech_${type}_${val}_desc`);
              },
              {
                elm: `#mechAssembly .${type}.r${idx}.a${i}`,
                placement: "right"
              }
            );
          }
        }
      });
      let mechs = $(`<div id="mechList" class="sticky mechList"></div>`);
      lab.append(mechs);
      drawMechs();
    }
  }
  function buildMechQueue(action) {
    let size = mechSize(action.bp.size);
    let avail = global.portal.mechbay.max - global.portal.mechbay.bay;
    if (avail >= size && payCosts(false, action.cost)) {
      buildMech(deepClone(action.bp, true));
      return true;
    }
    return false;
  }
  function buildMech(bp, queue) {
    let mech = deepClone(bp);
    global.portal.mechbay.mechs.push(mech);
    global.portal.mechbay.bay += mechSize(mech.size);
    global.portal.mechbay.active++;
  }
  function mechDesc(parent, obj) {
    let mech = obj.type;
    let costs = mechCost(mech.size, mech.infernal, true);
    var desc = $(`<div class="shipPopper"></div>`);
    var mechPattern = $(`<div class="divider">${mech.infernal ? `${loc("portal_mech_infernal")} ` : ""}${loc(`portal_mech_size_${mech.size}`)} ${loc(`portal_mech_chassis_${mech.chassis}`)}</div>`);
    parent.append(desc);
    desc.append(mechPattern);
    var cost = $('<div class="costList"></div>');
    desc.append(cost);
    let weapons = [];
    mech.hardpoint.forEach(function(hp) {
      weapons.push(`<span class="has-text-danger">${loc(`portal_mech_weapon_${hp}`)}</span>`);
    });
    desc.append(`<div>${weapons.join(", ")}</div>`);
    let equip = [];
    mech.equip.forEach(function(eq) {
      let type = eq;
      if (type === "special") {
        switch (mech.size) {
          case "large":
          case "cyberdemon":
            type = "battery";
            break;
          case "titan":
            type = "target";
            break;
          default:
            type = "jumpjet";
            break;
        }
      }
      equip.push(`<span class="has-text-warning">${loc(`portal_mech_equip_${type}`)}</span>`);
    });
    desc.append(`<div>${equip.join(", ")}</div>`);
    let tc = timeCheck({ id: `${mech.size}${Math.rand(0, 100)}`, cost: costs, doNotAdjustCost: true }, false, true);
    Object.keys(costs).forEach(function(res) {
      if (costs[res]() > 0) {
        let label = res === "Money" ? "$" : (res === "Supply" ? loc("resource_Supply_name") : global.resource[res].name) + ": ";
        let amount = res === "Supply" ? global.portal.purifier.supply : global.resource[res].amount;
        let color = amount >= costs[res]() ? "has-text-dark" : res === tc.r ? "has-text-danger" : "has-text-alert";
        cost.append($(`<div class="${color}" data-${res}="${costs[res]()}">${label}${sizeApproximation(costs[res](), 2)}</div>`));
      }
    });
    if (tc && tc["t"]) {
      desc.append($(`<div class="divider"></div><div id="popTimer" class="flair has-text-advanced">{{ t | timer }}</div>`));
      vBind({
        el: "#popTimer",
        data: tc,
        filters: {
          timer(t) {
            return loc("action_ready", [timeFormat(t)]);
          }
        }
      });
    }
    return desc;
  }
  function validWeapons(size, type, point) {
    let weaponList = ["laser", "kinetic", "shotgun", "missile", "flame", "plasma", "sonic", "tesla"];
    if (global.race["warlord"]) {
      switch (size) {
        case "minion":
          if (type === "harpy") {
            weaponList = ["claws", "venom"];
          } else if (type === "hound") {
            weaponList = ["cold", "shock", "fire", "acid"];
          } else if (type === "barghest") {
            weaponList = ["claws", "venom"];
          }
          break;
        case "fiend":
          if (type === "minotaur") {
            weaponList = ["axe", "hammer"];
          } else if (type === "nightmare") {
            weaponList = ["cold", "shock", "fire", "acid"];
          } else if (type === "golem") {
            weaponList = ["stone", "iron", "flesh", "ice", "magma"];
          }
          break;
        case "archfiend":
          if (point === void 0 || point === false) {
            weaponList = ["claws", "venom", "cold", "shock", "fire", "acid"];
            switch (type) {
              case "dragon":
                weaponList = ["claws", "cold", "shock", "fire", "acid"];
                break;
              case "snake":
                weaponList = ["venom", "cold", "shock", "fire", "acid"];
                break;
              case "gorgon":
                weaponList = ["axe", "hammer", "cold", "shock", "fire", "acid"];
                break;
              case "hydra":
                weaponList = ["cold", "shock", "fire", "acid"];
                break;
            }
          } else {
            switch (type) {
              case "dragon":
                weaponList = point === 0 ? ["claws"] : ["cold", "shock", "fire", "acid"];
                break;
              case "snake":
                weaponList = point === 0 ? ["venom"] : ["cold", "shock", "fire", "acid"];
                break;
              case "gorgon":
                weaponList = point === 0 ? ["axe", "hammer"] : ["cold", "shock", "fire", "acid"];
                break;
              case "hydra":
                let list = ["cold", "shock", "fire", "acid"];
                weaponList = [list[point]];
                break;
            }
          }
          break;
      }
    }
    return weaponList;
  }
  function validEquipment(size, type, point) {
    let equipList = ["special", "shields", "sonar", "grapple", "infrared", "flare", "radiator", "coolant", "ablative", "stabilizer", "seals"];
    if (global.race["warlord"]) {
      switch (size) {
        case "minion":
          equipList = ["scavenger", "scouter", "darkvision", "echo", "thermal", "manashield", "cold", "heat", "athletic", "lucky", "stoneskin"];
          break;
        case "fiend":
        case "archfiend":
          equipList = ["darkvision", "echo", "thermal", "manashield", "cold", "heat", "athletic", "lucky", "stoneskin"];
          break;
      }
    }
    return equipList;
  }
  function drawMechs() {
    clearMechDrag();
    clearElement($("#mechList"));
    let list = $("#mechList");
    list.append(`
      <div v-for="(mech, index) of mechs" :key="index" class="mechRow" :class="index < active ? '' : 'inactive-row' ">
        <a class="scrap" @click="scrap(index)" role="button">${loc(global.race["warlord"] ? "portal_mech_unsummon" : "portal_mech_scrap")}</a>
        <span> | </span><span>${loc(global.race["warlord"] ? "portal_demon" : "portal_mech")} #{{index + 1}}: </span>
        <span class="has-text-caution">{{ mech.infernal ? "${loc("portal_mech_infernal")} " : "" }}{{ mech | size }} {{ mech | chassis }}</span>
        <div :class="'gearList '+mech.size">
          <div>
            <template v-for="hp of mech.hardpoint">
              <span> | </span>
              <span class="has-text-danger">{{ hp | weapon }}</span>
            </template>
          </div>
        </div>
        <div :class="'gearList '+mech.size">
          <div>
            <template v-for="eq of mech.equip">
              <span> | </span>
              <span class="has-text-warning">{{ eq, mech.size | equipment }}</span>
            </template>
          </div>
        </div>
      </div>`);
    vBind({
      el: "#mechList",
      data: global.portal.mechbay,
      methods: {
        scrap(id) {
          if (global.portal.mechbay.mechs[id]) {
            let costs = mechCost(global.portal.mechbay.mechs[id].size, global.portal.mechbay.mechs[id].infernal);
            let size = mechSize(global.portal.mechbay.mechs[id].size);
            global.portal.purifier.supply += Math.floor(costs.c / 3);
            global.resource.Soul_Gem.amount += Math.floor(costs.s / 2);
            if (global.portal.purifier.supply > global.portal.purifier.sup_max) {
              global.portal.purifier.supply = global.portal.purifier.sup_max;
            }
            global.portal.mechbay.mechs.splice(id, 1);
            global.portal.mechbay.bay -= size;
            global.portal.mechbay.active--;
          }
        }
      },
      filters: {
        equipment(e, size) {
          if (e !== "special") {
            return loc(`portal_mech_equip_${e}`);
          }
          let type = "jumpjet";
          switch (size) {
            case "large":
            case "cyberdemon":
              type = "battery";
              break;
            case "titan":
              type = "target";
              break;
          }
          return loc(`portal_mech_equip_${type}`);
        },
        weapon(hp) {
          return loc(`portal_mech_weapon_${hp}`);
        },
        size(m) {
          return loc(`portal_mech_size_${m.size}`);
        },
        chassis(m) {
          return loc(`portal_mech_chassis_${m.chassis}`);
        }
      }
    });
    dragMechList();
    $(`#mechList .scrap`).each(function(i, node) {
      popover(
        `mechList-scrap${i}`,
        function() {
          let costs = mechCost(global.portal.mechbay.mechs[i].size, global.portal.mechbay.mechs[i].infernal);
          return loc(`portal_mech_scrap_refund`, [Math.floor(costs.c / 3), Math.floor(costs.s / 2)]);
        },
        {
          elm: node
        }
      );
    });
  }
  function mechSize(s) {
    switch (s) {
      case "minion":
        return 1;
      case "small":
        return 2;
      case "fiend":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 3 : 4;
      case "medium":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 4 : 5;
      case "cyberdemon":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 6 : 8;
      case "large":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 8 : 10;
      case "archfiend":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 15 : 20;
      case "titan":
        return global.blood["prepared"] && global.blood.prepared >= 2 ? 20 : 25;
      case "collector":
        return 1;
      case "default":
        return 25;
    }
  }
  function clearMechDrag() {
    let el = $("#mechList")[0];
    if (el) {
      let sort = Sortable.get(el);
      if (sort) {
        sort.destroy();
      }
    }
  }
  function dragMechList() {
    let el = $("#mechList")[0];
    Sortable.create(el, {
      onEnd(e) {
        let items = e.from.querySelectorAll(":scope > .mechRow");
        e.from.insertBefore(e.item, items[e.oldIndex + (e.oldIndex > e.newIndex)]);
        let order = global.portal.mechbay.mechs;
        order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
        updateMechbay();
      }
    });
  }
  function updateMechbay() {
    let max = (spire_on["mechbay"] || 0) * 25;
    let bay = 0;
    let active = 0;
    let scouts = 0;
    for (let mech of global.portal.mechbay.mechs) {
      bay += mechSize(mech.size);
      if (bay <= max) {
        active++;
        if (mech.size === "small" || mech.size === "minion") {
          scouts++;
        }
        if (mech.equip.includes("scouter")) {
          scouts++;
        }
      }
    }
    global.portal.mechbay.bay = bay;
    global.portal.mechbay.max = max;
    global.portal.mechbay.active = active;
    global.portal.mechbay.scouts = scouts;
  }
  function genSpireFloor() {
    let types = ["sand", "swamp", "forest", "jungle", "rocky", "gravel", "muddy", "grass", "brush", "concrete"];
    global.portal.spire.type = types[Math.floor(seededRandom(0, types.length))];
    if (global.portal.spire.count >= 10) {
      global.portal.spire.status = {};
      let effects = ["freeze", "hot", "corrosive", "humid", "windy", "hilly", "mountain", "radioactive", "quake", "dust", "river", "tar", "steam", "flooded", "fog", "rain", "hail", "chasm", "dark", "gravity"];
      assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
      if (global.portal.spire.count >= 25 && global.portal.spire.count <= 100) {
        let odds = 105 - global.portal.spire.count;
        if (Math.floor(seededRandom(0, odds) <= 5)) {
          assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        }
      } else if (global.portal.spire.count > 100 && global.portal.spire.count <= 250) {
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        let odds = 260 - global.portal.spire.count;
        if (Math.floor(seededRandom(0, odds) <= 10)) {
          assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        }
      } else if (global.portal.spire.count > 250 && global.portal.spire.count <= 1e3) {
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        let odds = 1025 - global.portal.spire.count;
        if (Math.floor(seededRandom(0, odds) <= 25)) {
          assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        }
      } else if (global.portal.spire.count > 1e3) {
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
        assignValidStatus(effects[Math.floor(seededRandom(0, effects.length))]);
      }
    }
    let mobs = Object.keys(monsters).filter(function(k) {
      let exclude = Object.keys(monsters[k].nozone);
      if (exclude.some((i) => Object.keys(global.portal.spire.status).includes(i)) || exclude.includes(global.portal.spire.type)) {
        return false;
      }
      return true;
    });
    global.portal.spire.boss = mobs[Math.floor(seededRandom(0, mobs.length))];
  }
  function assignValidStatus(effect) {
    if (global.portal.spire.status["freeze"] || global.portal.spire.status["hot"]) {
      if (effect !== "freeze" && effect !== "hot") {
        global.portal.spire.status[effect] = true;
      }
    } else if (global.portal.spire.status["rain"] || global.portal.spire.status["hail"]) {
      if (effect !== "rain" && effect !== "hail") {
        global.portal.spire.status[effect] = true;
      }
    } else {
      global.portal.spire.status[effect] = true;
    }
  }
  function terrainRating(mech, rating, effects) {
    if (mech.equip.includes("special") && (mech.size === "small" || mech.size === "medium" || mech.size === "collector")) {
      if (rating < 1) {
        rating += (1 - rating) * (effects.includes("gravity") ? 0.1 : 0.2);
      }
    }
    if (mech.size !== "small" && rating < 1) {
      rating += (effects.includes("fog") || effects.includes("dark") ? 5e-3 : 0.01) * global.portal.mechbay.scouts;
      if (rating > 1) {
        rating = 1;
      }
    }
    return rating;
  }
  function weaponPower(mech, power) {
    if (power < 1 && power !== 0) {
      if (mech.equip.includes("special") && mech.size === "titan") {
        power += (1 - power) * 0.25;
      }
    }
    if (mech.equip.includes("special") && (mech.size === "large" || mech.size === "cyberdemon")) {
      power *= 1.02;
    }
    return power;
  }
  function statusEffect(mech, effect) {
    let rating = 1;
    switch (effect) {
      case "freeze":
        {
          if (!mech.equip.includes("radiator") && !mech.equip.includes("cold")) {
            rating = 0.25;
          }
        }
        break;
      case "hot":
        {
          if (!mech.equip.includes("coolant") && !mech.equip.includes("heat")) {
            rating = 0.25;
          }
        }
        break;
      case "corrosive":
        {
          if (!mech.equip.includes("ablative")) {
            if (mech.equip.includes("stoneskin")) {
              rating = 0.9;
            } else if (mech.equip.includes("shields")) {
              rating = 0.75;
            } else {
              rating = mech.equip.includes("manashield") ? 0.5 : 0.25;
            }
          }
        }
        break;
      case "humid":
        {
          if (!mech.equip.includes("seals")) {
            rating = mech.equip.includes("heat") ? 0.85 : 0.75;
          }
        }
        break;
      case "windy":
        {
          if (["hover", "flying_imp", "harpy", "dragon"].includes(mech.chassis)) {
            rating = 0.5;
          }
        }
        break;
      case "hilly":
        {
          if (!["spider", "flying_imp", "harpy", "dragon"].includes(mech.chassis)) {
            rating = 0.75;
          }
        }
        break;
      case "mountain":
        {
          if (mech.chassis !== "spider" && !mech.equip.includes("grapple")) {
            rating = mech.equip.includes("flare") || mech.equip.includes("echo") ? 0.75 : 0.5;
          }
        }
        break;
      case "radioactive":
        {
          if (!mech.equip.includes("shields") && !mech.equip.includes("manashield")) {
            rating = 0.5;
          }
        }
        break;
      case "quake":
        {
          if (!mech.equip.includes("stabilizer")) {
            rating = mech.equip.includes("athletic") ? 0.75 : 0.25;
          }
        }
        break;
      case "dust":
        {
          if (!mech.equip.includes("seals") && !mech.equip.includes("thermal")) {
            rating = 0.5;
          }
        }
        break;
      case "river":
        {
          if (!["hover", "flying_imp", "harpy", "dragon"].includes(mech.chassis)) {
            rating = 0.65;
          }
        }
        break;
      case "tar":
        {
          if (mech.chassis !== "quad") {
            rating = mech.chassis === "tread" || mech.chassis === "wheel" ? 0.5 : 0.75;
          }
        }
        break;
      case "steam":
        {
          if (!mech.equip.includes("shields") && !mech.equip.includes("heat")) {
            rating = 0.75;
          }
        }
        break;
      case "flooded":
        {
          if (mech.chassis !== "hover") {
            rating = ["snake"].includes(mech.chassis) ? 0.85 : 0.35;
          }
        }
        break;
      case "fog":
        {
          if (!mech.equip.includes("sonar") && !mech.equip.includes("echo")) {
            rating = 0.2;
          }
        }
        break;
      case "rain":
        {
          if (!mech.equip.includes("seals")) {
            rating = mech.equip.includes("cold") ? 0.9 : 0.75;
          }
        }
        break;
      case "hail":
        {
          if (!mech.equip.includes("ablative") && !mech.equip.includes("shields") && !mech.equip.includes("manashield") && !mech.equip.includes("stoneskin")) {
            rating = 0.75;
          }
        }
        break;
      case "chasm":
        {
          if (!mech.equip.includes("grapple") && !["flying_imp", "harpy", "dragon"].includes(mech.chassis)) {
            rating = mech.equip.includes("athletic") ? 0.35 : 0.1;
          }
        }
        break;
      case "dark":
        {
          if (!mech.equip.includes("infrared") && !mech.equip.includes("darkvision")) {
            rating = mech.equip.includes("flare") ? 0.25 : 0.1;
          }
        }
        break;
      case "gravity":
        {
          switch (mech.size) {
            case "fiend":
            case "medium":
              rating = 0.8;
              break;
            case "cyberdemon":
              rating = 0.5;
              break;
            case "large":
              rating = 0.45;
              break;
            case "archfiend":
              rating = 0.35;
              break;
            case "titan":
              rating = 0.25;
              break;
          }
          if (["flying_imp", "harpy", "dragon"].includes(mech.chassis)) {
            rating -= 0.15;
          }
          if (mech.equip.includes("athletic") && rating < 1) {
            rating += 0.1;
          }
        }
        break;
    }
    if (mech.equip.includes("lucky")) {
      rating += 0.01 * Math.floor(seededRandom(1, 10, false, global.stats.reset + (global.portal?.spire?.count || 1) * 42));
      if (rating > 1) {
        rating = 1;
      }
    }
    return rating;
  }
  function terrainEffect(mech, type) {
    let terrain = type || global.portal.spire.type;
    let terrainFactor = 1;
    switch (mech.chassis) {
      case "wheel":
      case "nightmare":
      case "hound":
        {
          switch (terrain) {
            case "sand":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.9 : 0.85;
              break;
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.35 : 0.18;
              break;
            case "jungle":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.92 : 0.85;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.65 : 0.5;
              break;
            case "gravel":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1 : 0.95;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.85 : 0.58;
              break;
            case "grass":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.3 : 1.2;
              break;
            case "brush":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.9 : 0.8;
              break;
            case "concrete":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.1 : 1;
              break;
          }
        }
        break;
      case "tread":
      case "rakshasa":
      case "harpy":
      case "dragon":
        {
          switch (terrain) {
            case "sand":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.15 : 1.1;
              break;
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.55 : 0.4;
              break;
            case "forest":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1 : 0.95;
              break;
            case "jungle":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.95 : 0.9;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.65 : 0.5;
              break;
            case "gravel":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.3 : 1.2;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.88 : 0.72;
              break;
          }
        }
        break;
      case "cambion":
      case "biped":
      case "imp":
      case "gorgon":
        {
          switch (terrain) {
            case "sand":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.78 : 0.65;
              break;
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.68 : 0.5;
              break;
            case "forest":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1 : 0.95;
              break;
            case "jungle":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.82 : 0.7;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.48 : 0.4;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.85 : 0.7;
              break;
            case "grass":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.25 : 1.2;
              break;
            case "brush":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.92 : 0.85;
              break;
          }
        }
        break;
      case "quad":
      case "golem":
      case "barghest":
        {
          switch (terrain) {
            case "sand":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.86 : 0.75;
              break;
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.58 : 0.42;
              break;
            case "forest":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.25 : 1.2;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.95 : 0.9;
              break;
            case "gravel":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.9 : 0.8;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.68 : 0.5;
              break;
            case "grass":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1 : 0.95;
              break;
            case "brush":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.95 : 0.9;
              break;
          }
        }
        break;
      case "spider":
      case "minotaur":
      case "hydra":
        {
          switch (terrain) {
            case "sand":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.75 : 0.65;
              break;
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.9 : 0.78;
              break;
            case "forest":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.82 : 0.75;
              break;
            case "jungle":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.77 : 0.65;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.25 : 1.2;
              break;
            case "gravel":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.86 : 0.75;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.92 : 0.82;
              break;
            case "brush":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1 : 0.95;
              break;
          }
        }
        break;
      case "hover":
      case "flying_imp":
      case "snake":
        {
          switch (terrain) {
            case "swamp":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.35 : 1.2;
              break;
            case "forest":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.65 : 0.48;
              break;
            case "jungle":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.55 : 0.35;
              break;
            case "rocky":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.82 : 0.68;
              break;
            case "muddy":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 1.15 : 1.08;
              break;
            case "brush":
              terrainFactor = ["small", "medium", "minion", "fiend"].includes(mech.size) ? 0.78 : 0.7;
              break;
          }
        }
        break;
    }
    return terrainFactor;
  }
  function mechCollect(mech) {
    let rating = mech.infernal ? 31.25 : 25;
    let terrainFactor = terrainEffect(mech);
    let effects = [];
    Object.keys(global.portal.spire.status).forEach(function(effect) {
      effects.push(effect);
      rating *= statusEffect(mech, effect);
    });
    rating *= terrainRating(mech, terrainFactor, effects);
    if (global.race["warlord"]) {
      rating *= 0.1;
    }
    return rating;
  }
  function mechWeaponPower(size) {
    switch (size) {
      case "minion":
        return 15e-4;
      case "small":
        return 25e-4;
      case "fiend":
        return 6e-3;
      case "medium":
        return 75e-4;
      case "cyberdemon":
        return 9e-3;
      case "large":
        return 0.01;
      case "archfiend":
        return 0.011;
      case "titan":
        return 0.012;
      default:
        return 0;
    }
  }
  function mechRating(mech, boss) {
    let rating = mechWeaponPower(mech.size);
    if (rating === 0) {
      return 0;
    }
    if (mech.hasOwnProperty("infernal") && mech.infernal && global.blood["prepared"] && global.blood.prepared >= 3) {
      rating *= 1.25;
    }
    if (global.blood["wrath"]) {
      rating *= 1 + global.blood.wrath / 20;
    }
    if (mech.size === "archfiend" && mech.chassis != "hydra") {
      rating *= 2;
    }
    if (boss) {
      if (global.stats.achieve["gladiator"] && global.stats.achieve.gladiator.l > 0) {
        rating *= 1 + global.stats.achieve.gladiator.l * 0.1;
      }
      if (mech.size === "titan" || mech.size === "archfiend") {
        rating *= 1.1;
      }
      let affix = universeAffix();
      if (global.stats.spire.hasOwnProperty(affix) && global.stats.spire[affix].hasOwnProperty("dlstr")) {
        rating /= 100 + global.stats.spire[affix].dlstr * 25;
      } else {
        rating /= 100;
      }
      let damage = 0;
      for (let i = 0; i < mech.hardpoint.length; i++) {
        damage += rating * weaponPower(mech, 1);
      }
      return damage;
    } else {
      if (global.stats.achieve["gladiator"] && global.stats.achieve.gladiator.l > 0) {
        rating *= 1 + global.stats.achieve.gladiator.l * 0.2;
      }
      if (global.portal.spire.type === "concrete") {
        switch (mech.size) {
          case "minion":
          case "small":
            rating *= 0.92;
            break;
          case "fiend":
          case "medium":
            rating *= 0.95;
            break;
          case "archfiend":
          case "titan":
            rating *= 1.25;
            break;
        }
      }
      let terrainFactor = terrainEffect(mech);
      let effects = [];
      Object.keys(global.portal.spire.status).forEach(function(effect) {
        effects.push(effect);
        rating *= statusEffect(mech, effect);
      });
      rating *= terrainRating(mech, terrainFactor, effects);
      rating /= global.portal.spire.count;
      let damage = 0;
      for (let i = 0; i < mech.hardpoint.length; i++) {
        let effect = checkBossResist(global.portal.spire.boss, mech.hardpoint[i]);
        damage += rating * weaponPower(mech, effect);
      }
      return damage;
    }
  }
  function drawHellObservations(startup) {
    if (!global.settings.tabLoad && global.settings.civTabs !== $(`#mainTabs > nav ul li`).length - 1 && !startup) {
      return;
    }
    let info = $("#mTabObserve");
    clearElement(info);
    let observe = $(`<div id="hellObservations"></div>`);
    info.append(observe);
    observe.append(`<b-tabs id="hellTabs" class="resTabs" v-model="s.hellTabs" :animated="s.animated" @input="swapTab">
        <b-tab-item id="h_Report">
            <template slot="header">
                <span>${loc("hell_tabs_reports")}</span>
            </template>
        </b-tab-item>
        <b-tab-item id="h_Analysis">
            <template slot="header">
                <span>${loc("hell_tabs_analysis")}</span>
            </template>
        </b-tab-item>
    </b-tabs>`);
    vBind({
      el: `#hellObservations`,
      data: {
        s: global.settings
      },
      methods: {
        swapTab(tab) {
          if (!global.settings.tabLoad) {
            clearElement($(`#h_Report`));
            clearElement($(`#h_Analysis`));
            switch (tab) {
              case 0:
                drawHellReports();
                break;
              case 1:
                drawHellAnalysis();
                break;
            }
          }
          return tab;
        }
      }
    });
    if (!global.settings.tabLoad) {
      switch (global.settings.hellTabs) {
        case 0:
          drawHellReports();
          break;
        case 1:
          drawHellAnalysis();
          break;
      }
    } else {
      drawHellReports();
      drawHellAnalysis();
    }
  }
  function drawHellAnalysis() {
    if (!global.settings.tabLoad && global.settings.hellTabs !== 1) {
      return;
    }
    let info = $(`#h_Analysis`);
    let stats = $(`<div id="hellAnalysis" class="vscroll"></div>`);
    info.append(stats);
    let bd_settings = $(`<div></div>`);
    stats.append(bd_settings);
    let analysis = $(`<div class="hellAnalysis"></div>`);
    stats.append(analysis);
    let breakdown2 = $(`<div class="hellAnalysis"></div>`);
    analysis.append(breakdown2);
    let totalAnal = $(`<div id="hellAnalysisTotal" class="analysisColumn"></div>`);
    let partialAnal = $(`<div id="hellAnalysisPeriod" class="analysisColumn"></div>`);
    breakdown2.append(totalAnal);
    breakdown2.append(partialAnal);
    bd_settings.append(`
        <div>
            <h2 class="has-text-warning">${loc("tab_settings")}</h2>
        </div>
        <div>
            <b-checkbox v-model="s.expanded">${loc("hell_analysis_expanded")}</b-checkbox>
            <b-checkbox v-model="s.average">${loc("hell_analysis_average")}</b-checkbox>
            <b-checkbox v-show="r.hyper || r.slow" v-model="s.hyperSlow">${loc("hell_analysis_hyperSlow")}</b-checkbox>
        </div>
        <div>
            <b-radio v-model="s.display" native-value="game_days">${loc("hell_analysis_time_game_days")}</b-radio>
            <b-radio v-model="s.display" native-value="seconds">${loc("hell_analysis_time_seconds")}</b-radio>
            <b-radio v-model="s.display" native-value="minutes">${loc("hell_analysis_time_minutes")}</b-radio>
            <b-radio v-model="s.display" native-value="hours">${loc("hell_analysis_time_hours")}</b-radio>
            <b-radio v-model="s.display" native-value="days">${loc("hell_analysis_time_days")}</b-radio>
        </div>
    `);
    vBind({
      el: "#hellAnalysis",
      data: {
        s: global.portal.observe.settings,
        r: global.race
      }
    });
    let calcAverage = function(num, gameDays, units) {
      if (num) {
        if (units !== "game_days" && global.portal.observe.settings.hyperSlow) {
          if (global.race["slow"]) {
            gameDays *= 1 + traits.slow.vars()[0] / 100;
          }
          if (global.race["hyper"]) {
            gameDays *= 1 - traits.hyper.vars()[0] / 100;
          }
        }
        num /= gameDays;
        switch (units) {
          case "seconds":
            num /= 5;
            break;
          case "minutes":
            num *= 12;
            break;
          case "hours":
            num *= 720;
            break;
          case "days":
            num *= 17280;
            break;
          default:
            break;
        }
        num = sizeApproximation(num, 5, global.portal.observe.settings.expanded);
      }
      return loc("hell_analysis_time_average", [num, loc(`hell_analysis_time_${units}_abbr`)]);
    };
    let drawStats2 = function(id, type) {
      if (!id) {
        return;
      }
      let elem = $(`#${id}`);
      clearElement(elem);
      elem.append(`
            <div><h2 class="has-text-warning">${loc("hell_analysis_" + type)}</h2>${type === "period" ? '<h2 id="resetHellObservation" class="text-button has-text-danger" @click="resetObservations()">{{ | resetLabel }}</h2>' : ""}</div>
            <div><h2 class="has-text-alert">{{ st.${type}.start | startLabel }}</h2></div>
            <div><h2>{{ st.${type}.days, s.display | time }}</h2></div>
            <div><h2>{{ st.${type}.kills, 'kills', s.average | genericMulti }}</h2><h2 class="text-button has-text-advanced" aria-label="${loc("hell_analysis_toggle_bd", [loc("hell_analysis_toggle_bd_kills")])}" @click="toggleDropdown('dropKills')">{{ s.dropKills | dropdownLabel }}</h2></div>
            <div v-show="s.dropKills">
                <div v-show="p.war_drone"><h2>{{ st.${type}.kills.drones, 'kills_drones', s.average | genericSub }}</h2></div>
                <div><h2>{{ st.${type}.kills.patrols, 'kills_patrols', s.average | genericSub }}</h2></div>
                <div><h2>{{ st.${type}.kills.sieges, 'kills_sieges', s.average | genericSub }}</h2></div>
                <div v-show="p.gun_emplacement"><h2>{{ st.${type}.kills.guns, 'kills_guns', s.average | genericSub }}</h2></div>
                <div v-show="p.soul_forge"><h2>{{ st.${type}.kills.soul_forge, 'kills_soul_forge', s.average | genericSub }}</h2></div>
                <div v-show="p.gate_turret"><h2>{{ st.${type}.kills.turrets, 'kills_turrets', s.average | genericSub }}</h2></div>
            </div>
            <div v-show="sg.display"><h2>{{ st.${type}.gems, 'gems', s.average | genericMulti }}</h2><h2 class="text-button has-text-advanced" aria-label="${loc("hell_analysis_toggle_bd", [global.resource.Soul_Gem.name])}" @click="toggleDropdown('dropGems')">{{ s.dropGems | dropdownLabel }}</h2></div>
            <div v-show="sg.display && s.dropGems">
                <div><h2>{{ st.${type}.gems.patrols, 'gems_patrols', s.average | genericSub }}</h2></div>
                <div v-show="p.gun_emplacement"><h2>{{ st.${type}.gems.guns, 'gems_guns', s.average | genericSub }}</h2></div>
                <div v-show="p.soul_forge"><h2>{{ st.${type}.gems.soul_forge, 'gems_soul_forge', s.average | genericSub }}</h2></div>
                <div v-show="p.soul_forge"><h2>{{ st.${type}.gems.crafted, 'gems_crafted', s.average | genericSub }}</h2></div>
                <div v-show="p.gate_turret"><h2>{{ st.${type}.gems.turrets, 'gems_turrets', s.average | genericSub }}</h2></div>
                <div v-show="p.war_drone && p.carport"><h2>{{ st.${type}.gems.surveyors, 'gems_surveyors', s.average | genericSub }}</h2></div>
                <div v-show="e.soul_compactor"><h2>{{ st.${type}.gems.compactor, 'gems_compactor', s.average | genericSub }}</h2></div>
            </div>
            <div><h2>{{ st.${type}.wounded, 'wounded', s.average | generic }}</h2></div>
            <div><h2>{{ st.${type}.died, 'died', s.average | generic }}</h2></div>
            <div v-show="r.revive"><h2>{{ st.${type}.revived, 'revived', s.average | generic }}</h2></div>
            <div><h2>{{ st.${type}.surveyors, 'surveyors', s.average | generic }}</h2></div>
            <div><h2>{{ st.${type}.sieges, 'sieges', s.average | generic }}</h2></div>
        `);
      vBind({
        el: `#${id}`,
        data: {
          st: global.portal.observe.stats,
          s: global.portal.observe.settings,
          p: global.portal,
          r: global.race,
          sg: global.resource.Soul_Gem,
          e: global.eden
        },
        methods: {
          resetObservations() {
            Object.keys(global.portal.observe.stats.period).forEach(function(stat) {
              if (["kills", "gems"].includes(stat)) {
                Object.keys(global.portal.observe.stats.period[stat]).forEach(function(subStat) {
                  global.portal.observe.stats.period[stat][subStat] = 0;
                });
              } else if (stat === "start") {
                global.portal.observe.stats.period.start = { year: global.city.calendar.year, day: global.city.calendar.day };
              } else {
                global.portal.observe.stats.period[stat] = 0;
              }
            });
          },
          toggleDropdown(type2) {
            global.portal.observe.settings[type2] = !global.portal.observe.settings[type2];
          }
        },
        filters: {
          generic(num, name, average) {
            if (!average) {
              let val = sizeApproximation(num, 5, global.portal.observe.settings.expanded);
              return loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), val]);
            }
            return loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), calcAverage(num, global.portal.observe.stats[type].days, global.portal.observe.settings.display)]);
          },
          genericSub(num, name, average) {
            if (!average) {
              let val = sizeApproximation(num, 5, global.portal.observe.settings.expanded);
              return "\u1102" + loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), val]);
            }
            return "\u1102" + loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), calcAverage(num, global.portal.observe.stats[type].days, global.portal.observe.settings.display)]);
          },
          genericMulti(group, name, average) {
            let num = 0;
            Object.keys(group).forEach(function(type2) {
              num += group[type2];
            });
            if (!average) {
              let val = sizeApproximation(num, 5, global.portal.observe.settings.expanded);
              return loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), val]);
            }
            return loc("hell_analysis_number_display", [loc(`hell_analysis_${name}`), calcAverage(num, global.portal.observe.stats[type].days, global.portal.observe.settings.display)]);
          },
          time(days, units) {
            if (units !== "game_days" && global.portal.observe.settings.hyperSlow) {
              if (global.race["slow"]) {
                days *= 1 + traits.slow.vars()[0] / 100;
              }
              if (global.race["hyper"]) {
                days *= 1 - traits.hyper.vars()[0] / 100;
              }
            }
            switch (units) {
              case "seconds":
                days *= 5;
                break;
              case "minutes":
                days /= 12;
                break;
              case "hours":
                days /= 720;
                break;
              case "days":
                days /= 17280;
                break;
              default:
                break;
            }
            let formattedTime = sizeApproximation(days, global.portal.observe.settings.expanded ? 8 : 5, global.portal.observe.settings.expanded);
            return loc("hell_analysis_time", [loc(`hell_analysis_time_${units}`), formattedTime]);
          },
          resetLabel() {
            return loc("hell_analysis_period_reset");
          },
          startLabel(start) {
            return loc("hell_analysis_start", [start.year, start.day]);
          },
          dropdownLabel(open) {
            return open ? "\u25B2" : "\u25BC";
          }
        }
      });
    };
    drawStats2("hellAnalysisTotal", "total");
    drawStats2("hellAnalysisPeriod", "period");
    stats = $(`#hellAnalysis`);
    let graphs = $(`<div></div>`);
    stats.append(graphs);
    graphs.append(`<div><h2 id="hellGraphCreator" class="text-button has-text-success" @click="createGraph()">${loc("hell_graph_create")}</h2></div>`);
    let graphArea = $(`<div id="hellGraphingArea" class="graphingArea"></div>`);
    graphs.append(graphArea);
    vBind({
      el: "#hellGraphCreator",
      methods: {
        createGraph() {
          let modal = {
            template: '<div id="modalBox" class="modalBox"></div>'
          };
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          let checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc("hell_graph_title")}</p>`));
              var body = $('<div id="specialModal" class="modalBody vscroll"></div>');
              $("#modalBox").append(body);
              let creator = $(`<div class="graphCreator"></div>`);
              body.append(creator);
              let settings = {
                chartType: "pie",
                name: "",
                chartName: "",
                data: [],
                radioFake: "",
                showGroups: true
              };
              let error = {
                show: false,
                message: ""
              };
              creator.append(`
                            <div><h2 class="has-text-warning">${loc("hell_graph_name")}</h2> <b-input v-model="s.name" :input="nameUpdate(s.name)"></b-input></div>
                        `);
              creator.append(`
                            <div>
                                <div>
                                    <h2 class="has-text-warning">${loc("hell_graph_type")}</h2>
                                </div>
                                <div>
                                    <b-radio v-model="s.chartType" native-value="pie" @click.native="dataOptions('pie')">${loc("hell_graph_pie")}</b-radio>
                                </div>
                            </div>
                        `);
              let dataRegion = $(`<div id="graphDataSelection"></div>`);
              creator.append(dataRegion);
              dataRegion.append(`<div><h2 class="has-text-warning">${loc("hell_graph_data")}</h2></div>`);
              Object.keys(global.portal.observe.stats).forEach(function(dataSet) {
                ["kills", "gems"].forEach(function(group) {
                  dataRegion.append(`<div>
                                    <b-radio v-show="${group === "gems" ? "sg.display && " : ""}s.showGroups" v-model="s.radioFake" native-value="${dataSet}${group}" @click.native="setData('${dataSet}','${group}')">${loc("hell_graph_datapoint", [loc(`hell_analysis_${dataSet}`), loc(`hell_analysis_${group}`)])}</b-radio>
                                </div>`);
                });
              });
              creator.append(`
                            <div>
                                <div v-show="e.show">
                                    <h2 class="has-text-danger">{{ e.message }}</h2>
                                </div>
                                <div>
                                    <button class="button" @click="createGraph()">${loc("hell_graph_create")}</button>
                                </div>
                            </div>
                        `);
              vBind({
                el: `#specialModal`,
                data: {
                  s: settings,
                  e: error,
                  sg: global.resource.Soul_Gem
                },
                methods: {
                  nameUpdate(name) {
                    if (settings.chartName !== name) {
                      error.show = false;
                      settings.chartName = name;
                    }
                  },
                  dataOptions(type) {
                    switch (type) {
                      case "pie":
                        settings.showGroups = true;
                        break;
                      case "bar":
                        settings.showGroups = false;
                        break;
                    }
                  },
                  setData(type, group) {
                    error.show = false;
                    settings.data = [type, group];
                  },
                  createGraph() {
                    if (!settings.name) {
                      error.show = true;
                      error.message = loc("hell_graph_error_name_blank");
                      return;
                    } else if (settings.data.length === 0) {
                      error.show = true;
                      error.message = loc("hell_graph_error_data_missing");
                      return;
                    }
                    let graphLabels = [];
                    let graphData = [];
                    switch (settings.chartType) {
                      case "pie":
                        Object.keys(global.portal.observe.stats[settings.data[0]][settings.data[1]]).forEach(function(dataPoint) {
                          graphLabels.push(loc(`hell_analysis_${settings.data[1]}_${dataPoint}`));
                          graphData.push([settings.data[0], settings.data[1], dataPoint]);
                        });
                        break;
                      case "bar":
                        break;
                    }
                    let graphID = newGraph(settings.chartName, settings.chartType, graphLabels, graphData, { title: settings.chartName });
                    drawGraph(graphArea, global.portal.observe.graphs[graphID]);
                    document.dispatchEvent(new KeyboardEvent("keydown", { "key": "Escape" }));
                    document.dispatchEvent(new KeyboardEvent("keyup", { "key": "Escape" }));
                  }
                }
              });
            }
          }, 50);
        }
      }
    });
    Object.keys(global.portal.observe.graphs).forEach(function(id) {
      drawGraph(graphArea, global.portal.observe.graphs[id]);
    });
  }
  function newGraph(name, type, labels, data, settings) {
    let id = `hellGraph-${global.portal.observe.graphID}`;
    global.portal.observe.graphID++;
    global.portal.observe.graphs[id] = {
      id,
      chartID: `${id}-chart`,
      name,
      type,
      labels,
      data,
      settings
    };
    return id;
  }
  function drawGraph(info, graphInfo) {
    let id = graphInfo.id;
    if (hell_graphs[id]) {
      hell_graphs[id].graph.destroy();
    }
    let chartCont = $(`<div id="graph-${id}-container" class="graphContainer"></div>`);
    info.append(chartCont);
    chartCont.append(`<div id="graph-${id}-controls" class="graphControls">
        <div>
            <h2></h2>
            <h2 class="text-button has-text-danger" @click="deleteGraph()">Delete</h2>
        </div>
        <div class="graphTitle">
            <h2>${graphInfo.name}</h2>
        </div>
    </div>`);
    let graph = $(`<div class="graph"></div>`);
    chartCont.append(graph);
    vBind({
      el: `#graph-${id}-controls`,
      methods: {
        deleteGraph() {
          hell_graphs[id].graph.destroy();
          delete hell_graphs[id];
          delete global.portal.observe.graphs[id];
          clearElement($(`#graph-${id}-container`), true);
          return;
        }
      }
    });
    let newChart = $(`<canvas id="${graphInfo.chartID}"></canvas>`);
    graph.append(newChart);
    hell_graphs[id] = {
      data: graphInfo.data
    };
    switch (graphInfo.type) {
      case "pie":
        hell_graphs[id].graph = drawPieChart(newChart, graphInfo.labels, graphInfo.data, graphInfo.settings);
        break;
      default:
        break;
    }
  }
  function drawPieChart(info, labels, data, settings) {
    let drawData = [];
    data.forEach(function(dataPath) {
      drawData.push(dataPath.length === 3 ? global.portal.observe.stats[dataPath[0]][dataPath[1]][dataPath[2]] : global.portal.observe.stats[dataPath[0]][dataPath[1]]);
    });
    return new Chart(info, {
      type: "pie",
      data: {
        labels,
        datasets: [{
          data: drawData,
          backgroundColor: [
            "rgb(255, 99, 132)",
            "rgb(54, 162, 235)",
            "rgb(255, 205, 86)",
            "rgb(201, 203, 207)",
            "rgb(75, 192, 192)",
            "#B86BFF",
            "#48c774"
          ],
          hoverOffset: 4
        }]
      },
      options: {
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }
  function drawHellReports() {
    if (!global.settings.tabLoad && global.settings.hellTabs !== 0) {
      return;
    }
    purgeReports();
    let list = ``;
    let info = $(`#h_Report`);
    let reports = $(`<div id="hellReport" class="hellReports"></div>`);
    info.append(reports);
    let reportListSection = $(`<div class="reportList vscroll"></div>`);
    reports.append(reportListSection);
    reportListSection.append(`<div id="hellReportLogTitle"><h2 class="has-text-info">${loc("hell_report_log")}</h2><span class="refresh" @click="updateList()" aria-label="${loc("hell_report_log_refresh_aria")}">
        <svg version="1.1" x="0px" y="0px" viewBox="0 0 492.883 492.883" enable-background="new 0 0 492.883 492.883" xml:space="preserve">
            <path d="M122.941,374.241c-20.1-18.1-34.6-39.8-44.1-63.1c-25.2-61.8-13.4-135.3,35.8-186l45.4,45.4c2.5,2.5,7,0.7,7.6-3    l24.8-162.3c0.4-2.7-1.9-5-4.6-4.6l-162.4,24.8c-3.7,0.6-5.5,5.1-3,7.6l45.5,45.5c-75.1,76.8-87.9,192-38.6,282    c14.8,27.1,35.3,51.9,61.4,72.7c44.4,35.3,99,52.2,153.2,51.1l10.2-66.7C207.441,421.641,159.441,407.241,122.941,374.241z"/>
		    <path d="M424.941,414.341c75.1-76.8,87.9-192,38.6-282c-14.8-27.1-35.3-51.9-61.4-72.7c-44.4-35.3-99-52.2-153.2-51.1l-10.2,66.7    c46.6-4,94.7,10.4,131.2,43.4c20.1,18.1,34.6,39.8,44.1,63.1c25.2,61.8,13.4,135.3-35.8,186l-45.4-45.4c-2.5-2.5-7-0.7-7.6,3    l-24.8,162.3c-0.4,2.7,1.9,5,4.6,4.6l162.4-24.8c3.7-0.6,5.4-5.1,3-7.6L424.941,414.341z"/>
        </svg>
    </span></div>`);
    let reportList = $(`<div id="hellReportList"></div>`);
    reportListSection.append(reportList);
    reports.append($(`<div id="hellReportDisplay" class="reportDisplay is-vertical vscroll"></div>`));
    let recentDay = { year: 0, day: 0 };
    if (Object.keys(hell_reports).length) {
      recentDay.year = Object.keys(hell_reports)[0].split("-")[1];
      recentDay.day = Object.keys(hell_reports[`year-${recentDay.year}`])[0].split("-")[1];
    }
    let updateList = function(startYear, startDay) {
      if (purgeReports(true)) {
        list = ``;
        startYear = Object.keys(hell_reports)[0].split("-")[1];
        startDay = Object.keys(hell_reports[`year-${recentDay.year}`])[0].split("-")[1];
      }
      for (startYear; startYear < global.city.calendar.year; startYear++) {
        for (startDay; startDay <= orbitLength(); startDay++) {
          let gemString = "";
          let gemCount = hell_reports[`year-${startYear}`][`day-${startDay}`].foundGems;
          if (gemCount) {
            gemString = `<span class="has-text-advanced" aria-label="${loc(`hell_report_log_soul_gem_aria`)}">${gemCount >= 5 ? `&#9830x${gemCount}` : "&#9830".repeat(gemCount)}</span>`;
          }
          list = `
                    <div class="text-button"><span @click="reportLoad('${startYear}','${startDay}')">${loc("year") + " " + startYear + " | " + loc("day") + " " + startDay}${gemString}</span></div>
                ` + list;
        }
        startDay = 1;
      }
      for (startDay; startDay < global.city.calendar.day; startDay++) {
        let gemString = "";
        let gemCount = hell_reports[`year-${startYear}`][`day-${startDay}`].foundGems;
        if (gemCount) {
          gemString = `<span class="has-text-advanced" aria-label="${loc(`hell_report_log_soul_gem_aria`)}">${gemCount >= 5 ? `&#9830x${gemCount}` : "&#9830".repeat(gemCount)}</span>`;
        }
        list = `
                <div class="text-button"><span @click="reportLoad('${startYear}','${startDay}')">${loc("year") + " " + startYear + " | " + loc("day") + " " + startDay}${gemString}</span></div>
            ` + list;
      }
      recentDay.year = startYear;
      recentDay.day = startDay;
      let reportList2 = $(`#hellReportList`);
      clearElement(reportList2);
      reportList2.append(list);
      vBind({
        el: "#hellReportList",
        methods: {
          reportLoad(year, day) {
            loadReport(year, day);
          }
        }
      });
    };
    let loadReport = function(year, day) {
      if (!year || !day) {
        return;
      }
      let info2 = $(`#hellReportDisplay`);
      clearElement(info2);
      let curr_report = hell_reports[`year-${year}`][`day-${day}`];
      let statsBar = $(`<div id="hellReportStats" class="reportStats"></div>`);
      info2.append(statsBar);
      let kills = 0;
      let gems = 0;
      Object.keys(curr_report.stats.kills).forEach(function(killType) {
        kills += curr_report.stats.kills[killType];
      });
      Object.keys(curr_report.stats.gems).forEach(function(gemType) {
        gems += curr_report.stats.gems[gemType];
      });
      statsBar.append(`<div><h2 class="has-text-info">${loc("hell_report_log_stats", [year, day])}</h2></div>`);
      statsBar.append(`<div>
            <h2>${loc("hell_report_log_stats_kills", [kills])}</h2>
            <h2 v-show="g.display">${loc("hell_report_log_stats_gems", [gems])}</h2>
            <h2>${loc("hell_report_log_stats_wounded", [curr_report.stats.wounded])}</h2>
            <h2>${loc("hell_report_log_stats_died", [curr_report.stats.died])}</h2>
        </div>`);
      info2.append(`<div><h2 class="has-text-info">${loc("hell_report_log_report", [year, day])}</h2></div>`);
      info2.append(`<p class="has-text-danger">${loc("hell_report_log_start", [curr_report.start])}</p>`);
      if (curr_report.soul_attractors) {
        info2.append(`<p>${loc("hell_report_log_soul_attractors", [curr_report.soul_attractors])}</p>`);
      }
      if (curr_report.ghost_trappers) {
        info2.append(`<p>${loc("hell_report_log_ghost_trappers", [curr_report.ghost_trappers])}</p>`);
      }
      if (curr_report.soul_forge) {
        let displayText = $(`<p></p>`);
        displayText.append(`<span>${loc("hell_report_log_soul_forge", [curr_report.soul_forge.kills])}</span>`);
        if (curr_report.soul_forge.gem) {
          displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_find", [global.resource.Soul_Gem.name, 1])}</span>`);
        }
        if (curr_report.soul_forge.gem_craft) {
          displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_craft", [curr_report.soul_forge.corrupt ? loc("resource_Corrupt_Gem_name") : global.resource.Soul_Gem.name])}</span>`);
        }
        info2.append(displayText);
      }
      if (curr_report.stats.gems.compactor) {
        let displayText = $(`<p></p>`);
        if (curr_report.stats.gems.compactor) {
          displayText.append(`<span class="has-text-success">${loc("hell_report_log_compactor", [curr_report.stats.gems.compactor, global.resource.Soul_Gem.name])}</span>`);
        }
        info2.append(displayText);
      }
      if (curr_report.drones) {
        Object.keys(curr_report.drones).forEach(function(num) {
          let drone = curr_report.drones[num];
          let name = loc("hell_report_log_obj_counter", [loc("portal_war_drone_title"), num]);
          if (drone.encounter) {
            info2.append(`<p>${loc("hell_report_log_encounter", [name, drone.kills])}</p>`);
          } else {
            info2.append(`<p class="has-text-warning">${loc("hell_report_log_encounter_fail", [name])}</p>`);
          }
        });
      }
      if (curr_report.patrols) {
        Object.keys(curr_report.patrols).forEach(function(num) {
          let patrol = curr_report.patrols[num];
          let name = loc("hell_report_log_obj_counter", [loc("hell_report_log_patrol"), num]);
          name = patrol.droid ? loc("hell_report_log_patrol_droid", [name]) : name;
          if (patrol.encounter) {
            let displayText = $(`<p></p>`);
            if (patrol.ambush) {
              displayText.append(`<span class="has-text-warning">${loc("hell_report_log_patrol_ambush", [name, patrol.kills])}</span>`);
            } else {
              displayText.append(`<span>${loc("hell_report_log_encounter", [name, patrol.kills])}</span>`);
            }
            if (patrol.wounded) {
              displayText.append(`<span class="has-text-danger">${patrol.wounded > 1 ? loc("hell_report_log_patrol_wounded_plural", [patrol.wounded]) : loc("hell_report_log_patrol_wounded")}</span>`);
            }
            if (patrol.died) {
              displayText.append(`<span class="has-text-danger">${patrol.died > 1 ? loc("hell_report_log_patrol_killed_plural", [patrol.died]) : loc("hell_report_log_patrol_killed")}</span>`);
            }
            if (patrol.gem > 0) {
              displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_find", [global.resource.Soul_Gem.name, patrol.gem])}</span>`);
            }
            info2.append(displayText);
          } else {
            info2.append(`<p class="has-text-warning">${loc("hell_report_log_encounter_fail", [name])}</p>`);
          }
        });
      }
      if (curr_report.surveyor_finds) {
        Object.keys(curr_report.surveyor_finds).forEach(function(num) {
          let surveyor = curr_report.surveyor_finds[num];
          let name = loc("hell_report_log_obj_counter", [jobName("hell_surveyor"), num]);
          let displayText = $(`<p></p>`);
          displayText.append(`<span>${loc("hell_report_log_search", [name, surveyor.bodies])}</span>`);
          if (surveyor.gem > 0) {
            displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_search", [global.resource.Soul_Gem.name, surveyor.gem])}</span>`);
          }
          info2.append(displayText);
        });
      }
      if (curr_report.revived) {
        info2.append(`<p>${curr_report.revived > 1 ? loc("hell_report_log_revived_plural", [curr_report.revived]) : loc("hell_report_log_revived")}</p>`);
      }
      if (curr_report.patrols_lost) {
        info2.append(`<p class="has-text-danger">${loc("hell_report_log_patrols_lost", [curr_report.patrols_lost])}</p>`);
      }
      if (curr_report.siege) {
        if (curr_report.siege.destroyed) {
          info2.append(`<p class="has-text-danger">${loc("hell_report_log_siege", [curr_report.siege.surveyors, curr_report.siege.soldiers, curr_report.siege.kills])}</p>`);
        } else {
          info2.append(`<p class="has-text-warning">${loc("hell_report_log_siege_fail", [curr_report.siege.damage, curr_report.siege.kills])}</p>`);
        }
      }
      if (curr_report.demons) {
        info2.append(`<p class="has-text-danger">${loc("hell_report_log_demons", [curr_report.demons])}</p>`);
      }
      if (curr_report.surveyors) {
        info2.append(`<p class="has-text-danger">${curr_report.surveyors > 1 ? loc("hell_report_log_surveyors_plural", [curr_report.surveyors]) : loc("hell_report_log_surveyors")}</p>`);
      }
      if (curr_report.gun_emplacements) {
        Object.keys(curr_report.gun_emplacements).forEach(function(num) {
          let displayText = $(`<p></p>`);
          let gun = curr_report.gun_emplacements[num];
          let name = loc("hell_report_log_obj_counter", [loc("portal_gun_emplacement_title"), num]);
          displayText.append($(`<span>${loc("hell_report_log_misc_kills", [name, gun.kills, loc("portal_pit_name")])}</span>`));
          if (gun.gem) {
            displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_find", [global.resource.Soul_Gem.name, 1])}</span>`);
          }
          info2.append(displayText);
        });
      }
      if (curr_report.gate_turrets) {
        Object.keys(curr_report.gate_turrets).forEach(function(num) {
          let displayText = $(`<p></p>`);
          let turret = curr_report.gate_turrets[num];
          let name = loc("hell_report_log_obj_counter", [loc("portal_gate_turret_title"), num]);
          displayText.append(`<span>${loc("hell_report_log_misc_kills", [name, turret.kills, loc("portal_gate_name")])}</span>`);
          if (turret.gem) {
            displayText.append(`<span class="has-text-success">${loc("hell_report_log_soul_find", [global.resource.Soul_Gem.name, 1])}</span>`);
          }
          info2.append(displayText);
        });
      }
      vBind({
        el: "#hellReportDisplay",
        data: {
          g: global.resource.Soul_Gem
        }
      });
    };
    if (recentDay.day !== 0) {
      updateList(recentDay.year, recentDay.day);
      let lastReportYear = recentDay.year;
      let lastReportDay = recentDay.day;
      if (lastReportDay - 1 === 0) {
        lastReportYear--;
        lastReportDay = orbitLength();
      } else {
        lastReportDay--;
      }
      loadReport(lastReportYear, lastReportDay);
    } else {
      recentDay.year = global.city.calendar.year;
      recentDay.day = global.city.calendar.day;
    }
    vBind({
      el: "#hellReportLogTitle",
      methods: {
        updateList() {
          updateList(recentDay.year, recentDay.day);
        }
      }
    });
    popover(
      `hellReportLogs`,
      function() {
        return loc(`hell_report_log_tooltip`, [2500]);
      },
      {
        elm: `#hellReport .reportList div:first-child h2`
      }
    );
  }
  function purgeReports(refresh) {
    if (!!!document.getElementById(`hellReportList`) || refresh) {
      let removed = false;
      let threshold = 2500;
      let approx = (Object.keys(hell_reports).length - 1) * orbitLength() + global.city.calendar.day;
      if (approx > threshold) {
        let firstYear = Object.keys(hell_reports[Object.keys(hell_reports)[0]]).length;
        if (approx - orbitLength() + firstYear > threshold) {
          removed = true;
          approx -= firstYear;
          delete hell_reports[Object.keys(hell_reports)[0]];
        }
        while (approx > threshold) {
          approx -= orbitLength();
          delete hell_reports[Object.keys(hell_reports)[0]];
        }
      }
      return removed;
    }
  }
  function checkWarlordAchieve() {
    if (global.race["warlord"]) {
      let tasks = 0;
      Object.keys(global.stats.warlord).forEach(function(k) {
        if (global.stats.warlord[k]) {
          tasks++;
        }
      });
      if (tasks > 0) {
        unlockAchieve("what_is_best", false, tasks);
      }
    }
  }
  function warlordSetup() {
    if (global.race["warlord"] && global.race.universe === "evil") {
      global.tech["aerogel"] = 1;
      global.tech["agriculture"] = 7;
      global.tech["alloy"] = 1;
      global.tech["alumina"] = 2;
      global.tech["asteroid"] = 7;
      global.tech["banking"] = 11;
      global.tech["biotech"] = 1;
      global.tech["boot_camp"] = 2;
      global.tech["container"] = 8;
      global.tech["copper"] = 1;
      global.tech["currency"] = 6;
      global.tech["drone"] = 1;
      global.tech["elerium"] = 2;
      global.tech["explosives"] = 3;
      global.tech["factory"] = 3;
      global.tech["farm"] = 1;
      global.tech["foundry"] = 8;
      global.tech["gambling"] = 4;
      global.tech["gas_giant"] = 1;
      global.tech["gas_moon"] = 2;
      global.tech["genesis"] = 2;
      global.tech["genetics"] = 2;
      global.tech["gov_corp"] = 1;
      global.tech["gov_fed"] = 1;
      global.tech["gov_soc"] = 1;
      global.tech["gov_theo"] = 1;
      global.tech["govern"] = 3;
      global.tech["graphene"] = 1;
      global.tech["helium"] = 1;
      global.tech["hell"] = 1;
      global.tech["high_tech"] = 17;
      global.tech["hoe"] = 5;
      global.tech["home_safe"] = 2;
      global.tech["housing"] = 3;
      global.tech["housing_reduction"] = 3;
      global.tech["infernite"] = 6;
      global.tech["kuiper"] = 2;
      global.tech["launch_facility"] = 1;
      global.tech["luna"] = 2;
      global.tech["marines"] = 2;
      global.tech["mars"] = 5;
      global.tech["mass"] = 1;
      global.tech["medic"] = 3;
      global.tech["military"] = 10;
      global.tech["mine_conveyor"] = 1;
      global.tech["mining"] = 4;
      global.tech["monument"] = 1;
      global.tech["nano"] = 1;
      global.tech["oil"] = 7;
      global.tech["pickaxe"] = 5;
      global.tech["polymer"] = 2;
      global.tech["primitive"] = 3;
      global.tech["q_factory"] = 1;
      global.tech["quantium"] = 1;
      global.tech["queue"] = 3;
      global.tech["reclaimer"] = 8;
      global.tech["r_queue"] = 1;
      global.tech["reproduction"] = 1;
      global.tech["rival"] = 1;
      global.tech["satellite"] = 1;
      global.tech["science"] = 21;
      global.tech["shelving"] = 3;
      global.tech["shipyard"] = 1;
      global.tech["smelting"] = 6;
      global.tech["solar"] = 5;
      global.tech["space"] = 6;
      global.tech["space_explore"] = 4;
      global.tech["space_housing"] = 1;
      global.tech["spy"] = 5;
      global.tech["stanene"] = 1;
      global.tech["steel_container"] = 7;
      global.tech["storage"] = 5;
      global.tech["swarm"] = 6;
      global.tech["syndicate"] = 0;
      global.tech["synthetic_fur"] = 1;
      global.tech["theology"] = 2;
      global.tech["titanium"] = 3;
      global.tech["trade"] = 3;
      global.tech["unify"] = 2;
      global.tech["uranium"] = 4;
      global.tech["v_train"] = 1;
      global.tech["vault"] = 4;
      global.tech["wharf"] = 1;
      global.tech["world_control"] = 1;
      global.tech["wsc"] = 0;
      global.tech["portal"] = 3;
      global.tech["hell_pit"] = 1;
      global.tech["hellspawn"] = 1;
      if (!global.race["joyless"]) {
        global.tech["theatre"] = 3;
        global.tech["broadcast"] = 2;
      }
      if (!global.race["flier"]) {
        global.tech["cement"] = 6;
        global.resource.Cement.display = true;
      }
      global.settings.showSpace = false;
      global.settings.showPortal = true;
      global.settings.showCity = false;
      global.settings.showIndustry = true;
      global.settings.showPowerGrid = true;
      global.settings.showResearch = true;
      global.settings.showCivic = true;
      global.settings.showMil = true;
      global.settings.showResources = true;
      global.settings.showMarket = true;
      global.settings.showStorage = true;
      global.settings.civTabs = 1;
      global.settings.spaceTabs = 6;
      global.settings.showGenetics = true;
      global.settings.arpa.physics = true;
      global.settings.arpa.genetics = true;
      global.resource[global.race.species].display = true;
      global.resource.Knowledge.display = true;
      global.resource.Money.display = true;
      global.resource.Crates.display = true;
      global.resource.Containers.display = true;
      global.resource.Food.display = true;
      global.resource.Stone.display = true;
      global.resource.Furs.display = true;
      global.resource.Copper.display = true;
      global.resource.Iron.display = true;
      global.resource.Aluminium.display = true;
      global.resource.Coal.display = true;
      global.resource.Oil.display = true;
      global.resource.Uranium.display = true;
      global.resource.Steel.display = true;
      global.resource.Titanium.display = true;
      global.resource.Alloy.display = true;
      global.resource.Polymer.display = true;
      global.resource.Iridium.display = true;
      global.resource.Helium_3.display = true;
      global.resource.Neutronium.display = true;
      global.resource.Adamantite.display = true;
      global.resource.Elerium.display = true;
      global.resource.Nano_Tube.display = true;
      global.resource.Graphene.display = true;
      global.resource.Stanene.display = true;
      global.resource.Orichalcum.display = true;
      global.resource.Bolognium.display = true;
      global.resource.Infernite.display = true;
      global.resource.Brick.display = true;
      global.resource.Wrought_Iron.display = true;
      global.resource.Sheet_Metal.display = true;
      global.resource.Mythril.display = true;
      global.resource.Aerogel.display = true;
      if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
        global.civic.lumberjack.display = true;
        global.resource.Lumber.display = true;
        global.resource.Plywood.display = true;
        global.resource.Lumber.max = 1e7;
        global.resource.Lumber.amount = 1e7;
        global.resource.Plywood.amount = 25e5;
        global.resource.Lumber.crates = 30;
        global.resource.Lumber.containers = 30;
        global.tech["axe"] = 5;
      }
      if (global.race["smoldering"]) {
        global.resource.Chrysotile.display = true;
        global.resource.Chrysotile.max = 5e6;
        global.resource.Chrysotile.amount = 5e6;
      }
      if (!global.race["sappy"]) {
        global.tech["hammer"] = 4;
      }
      if (!global.race["apex_predator"]) {
        global.tech["armor"] = 3;
      }
      global.resource.Crates.amount = 1e3;
      global.resource.Containers.amount = 1e3;
      global.resource.Money.max = 1e9;
      global.resource.Money.amount = 1e9;
      global.resource.Knowledge.max = 4321200;
      global.resource.Knowledge.amount = 4321200;
      global.resource.Food.max = 1e4;
      global.resource.Food.amount = 1e4;
      global.resource.Oil.max = 5e5;
      global.resource.Oil.amount = 5e5;
      global.resource.Helium_3.max = 5e5;
      global.resource.Helium_3.amount = 5e5;
      global.resource.Uranium.max = 5e5;
      global.resource.Uranium.amount = 5e5;
      global.resource.Stone.max = 1e7;
      global.resource.Stone.amount = 1e7;
      global.resource.Furs.max = 5e6;
      global.resource.Furs.amount = 5e6;
      global.resource.Copper.max = 5e6;
      global.resource.Copper.amount = 5e6;
      global.resource.Iron.max = 5e6;
      global.resource.Iron.amount = 5e6;
      global.resource.Steel.max = 5e6;
      global.resource.Steel.amount = 5e6;
      global.resource.Aluminium.max = 5e6;
      global.resource.Aluminium.amount = 5e6;
      global.resource.Cement.max = 5e6;
      global.resource.Cement.amount = 5e6;
      global.resource.Titanium.max = 5e6;
      global.resource.Titanium.amount = 5e6;
      global.resource.Coal.max = 5e6;
      global.resource.Coal.amount = 5e6;
      global.resource.Alloy.max = 5e6;
      global.resource.Alloy.amount = 5e6;
      global.resource.Polymer.max = 5e6;
      global.resource.Polymer.amount = 5e6;
      global.resource.Iridium.max = 5e6;
      global.resource.Iridium.amount = 5e6;
      global.resource.Neutronium.max = 5e5;
      global.resource.Neutronium.amount = 5e5;
      global.resource.Adamantite.max = 5e6;
      global.resource.Adamantite.amount = 5e6;
      global.resource.Elerium.max = 1e3;
      global.resource.Elerium.amount = 1e3;
      global.resource.Nano_Tube.max = 5e6;
      global.resource.Nano_Tube.amount = 5e6;
      global.resource.Graphene.max = 5e6;
      global.resource.Graphene.amount = 5e6;
      global.resource.Stanene.max = 5e6;
      global.resource.Stanene.amount = 5e6;
      global.resource.Bolognium.max = 5e6;
      global.resource.Bolognium.amount = 5e6;
      global.resource.Orichalcum.max = 5e6;
      global.resource.Orichalcum.amount = 5e6;
      global.resource.Brick.amount = 25e5;
      global.resource.Wrought_Iron.amount = 25e5;
      global.resource.Sheet_Metal.amount = 25e5;
      global.resource.Mythril.amount = 25e5;
      global.resource.Aerogel.amount = 25e5;
      global.resource.Authority.amount = 80;
      if (!global.race["artifical"]) {
        global.resource.Food.crates = 10;
        global.resource.Food.containers = 10;
      }
      global.resource.Stone.crates = 30;
      global.resource.Stone.containers = 30;
      global.resource.Furs.crates = 30;
      global.resource.Furs.containers = 30;
      global.resource.Coal.crates = 10;
      global.resource.Coal.containers = 10;
      global.resource.Copper.crates = 30;
      global.resource.Copper.containers = 30;
      global.resource.Iron.crates = 30;
      global.resource.Iron.containers = 30;
      global.resource.Aluminium.crates = 30;
      global.resource.Aluminium.containers = 30;
      global.resource.Steel.crates = 30;
      global.resource.Steel.containers = 30;
      global.resource.Titanium.crates = 30;
      global.resource.Titanium.containers = 30;
      global.resource.Alloy.crates = 30;
      global.resource.Alloy.containers = 30;
      global.resource.Polymer.crates = 30;
      global.resource.Polymer.containers = 30;
      global.resource.Iridium.crates = 30;
      global.resource.Iridium.containers = 30;
      global.resource.Adamantite.crates = 30;
      global.resource.Adamantite.containers = 30;
      global.resource.Graphene.crates = 30;
      global.resource.Graphene.containers = 30;
      global.resource.Stanene.crates = 30;
      global.resource.Stanene.containers = 30;
      global.resource.Bolognium.crates = 30;
      global.resource.Bolognium.containers = 30;
      global.resource.Orichalcum.crates = 30;
      global.resource.Orichalcum.containers = 30;
      global.civic.taxes.display = true;
      if (!global.race["flier"]) {
        global.civic.cement_worker.display = true;
        global.resource.Cement.crates = 30;
        global.resource.Cement.containers = 30;
      }
      global.civic.professor.display = true;
      global.civic.scientist.display = true;
      global.civic.banker.display = true;
      global.civic.professor.max = 1;
      global.civic.professor.workers = 1;
      global.city.calendar.day++;
      global.city.market.active = true;
      global.city["power"] = 0;
      global.city["powered"] = true;
      if (global.race["artifical"]) {
        global.city["transmitter"] = { count: 0, on: 0 };
      }
      initStruct(actions.city.factory);
      initStruct(actions.city.foundry);
      initStruct(actions.city.smelter);
      initStruct(actions.city.amphitheatre);
      initStruct(actions.city.apartment);
      initStruct(actions.city.bank);
      initStruct(actions.city.basic_housing);
      initStruct(actions.city.biolab);
      initStruct(actions.city.boot_camp);
      initStruct(actions.city.casino);
      initStruct(actions.city.cement_plant);
      initStruct(actions.city.coal_mine);
      initStruct(actions.city.coal_power);
      initStruct(actions.city.cottage);
      initStruct(actions.city.fission_power);
      initStruct(actions.city.garrison);
      initStruct(actions.city.hospital);
      initStruct(actions.city.library);
      initStruct(actions.city.lumber_yard);
      initStruct(actions.city.mass_driver);
      initStruct(actions.city.metal_refinery);
      initStruct(actions.city.mine);
      initStruct(actions.city.oil_depot);
      initStruct(actions.city.oil_power);
      initStruct(actions.city.oil_well);
      initStruct(actions.city.rock_quarry);
      initStruct(actions.city.sawmill);
      initStruct(actions.city.shed);
      initStruct(actions.city.storage_yard);
      initStruct(actions.city.temple);
      initStruct(actions.city.tourist_center);
      initStruct(actions.city.trade);
      initStruct(actions.city.university);
      initStruct(actions.city.wardenclyffe);
      initStruct(actions.city.warehouse);
      initStruct(actions.city.wharf);
      initStruct(actions.space.spc_belt.elerium_ship);
      initStruct(actions.space.spc_belt.iridium_ship);
      initStruct(actions.space.spc_belt.iron_ship);
      initStruct(actions.space.spc_belt.space_station);
      initStruct(actions.space.spc_dwarf.e_reactor);
      initStruct(actions.space.spc_dwarf.elerium_contain);
      initStruct(actions.space.spc_dwarf.shipyard);
      initStruct(actions.space.spc_gas.gas_mining);
      initStruct(actions.space.spc_gas.gas_storage);
      initStruct(actions.space.spc_gas_moon.drone);
      initStruct(actions.space.spc_gas_moon.oil_extractor);
      initStruct(actions.space.spc_gas_moon.outpost);
      initStruct(actions.space.spc_hell.geothermal);
      initStruct(actions.space.spc_hell.hell_smelter);
      initStruct(actions.space.spc_hell.spc_casino);
      initStruct(actions.space.spc_hell.swarm_plant);
      initStruct(actions.space.spc_home.gps);
      initStruct(actions.space.spc_home.nav_beacon);
      initStruct(actions.space.spc_home.propellant_depot);
      initStruct(actions.space.spc_home.satellite);
      initStruct(actions.space.spc_moon.helium_mine);
      initStruct(actions.space.spc_moon.iridium_mine);
      initStruct(actions.space.spc_moon.moon_base);
      initStruct(actions.space.spc_moon.observatory);
      initStruct(actions.space.spc_red.biodome);
      initStruct(actions.space.spc_red.exotic_lab);
      initStruct(actions.space.spc_red.fabrication);
      initStruct(actions.space.spc_red.garage);
      initStruct(actions.space.spc_red.living_quarters);
      initStruct(actions.space.spc_red.red_factory);
      initStruct(actions.space.spc_red.red_mine);
      initStruct(actions.space.spc_red.red_tower);
      initStruct(actions.space.spc_red.space_barracks);
      initStruct(actions.space.spc_red.spaceport);
      initStruct(actions.space.spc_red.vr_center);
      initStruct(actions.space.spc_red.ziggurat);
      initStruct(actions.space.spc_sun.swarm_control);
      initStruct(actions.space.spc_sun.swarm_satellite);
      global.civic["garrison"] = {
        display: true,
        disabled: false,
        progress: 0,
        tactic: 0,
        workers: 2,
        wounded: 0,
        raid: 0,
        max: 2
      };
      global.arpa["sequence"] = {
        max: 5e4,
        progress: 0,
        time: 5e4,
        on: true,
        boost: false,
        auto: false,
        labs: 0
      };
      global.tech["stock_exchange"] = 0;
      global.tech["monuments"] = 0;
      global.tech["supercollider"] = 0;
      global.tech["railway"] = 0;
      global.arpa["m_type"] = arpa("Monument");
      if (!global.settings.msgFilters.hell.unlocked) {
        global.settings.msgFilters.hell.unlocked = true;
        global.settings.msgFilters.hell.vis = true;
      }
      global.settings.showPortal = true;
      global.settings.portal.fortress = false;
      global.settings.portal.badlands = true;
      global.settings.portal.pit = false;
      global.settings.portal.wasteland = true;
      global.settings.portal.ruins = false;
      global.settings.portal.gate = false;
      global.settings.portal.lake = false;
      global.settings.portal.spire = false;
      global.settings.showCargo = false;
      global.settings.spaceTabs = 4;
      initStruct(fortressModules.prtl_fortress.turret);
      initStruct(fortressModules.prtl_fortress.carport);
      initStruct(fortressModules.prtl_badlands.war_drone);
      initStruct(fortressModules.prtl_pit.soul_forge);
      initStruct(fortressModules.prtl_pit.soul_attractor);
      initStruct(fortressModules.prtl_ruins.guard_post);
      initStruct(fortressModules.prtl_lake.harbor);
      initStruct(fortressModules.prtl_spire.purifier);
      initStruct(fortressModules.prtl_spire.port);
      initStruct(fortressModules.prtl_wasteland.throne);
      initStruct(fortressModules.prtl_wasteland.incinerator);
      global.portal.incinerator.count = 1;
      global.portal.incinerator.on = 1;
      initStruct(fortressModules.prtl_wasteland.warehouse);
      global.portal.warehouse.count = 1;
      initStruct(fortressModules.prtl_wasteland.hovel);
      global.portal.hovel.count = 1;
      initStruct(fortressModules.prtl_wasteland.dig_demon);
      global.portal.dig_demon.count = 1;
      global.portal.dig_demon.on = 1;
      initStruct(fortressModules.prtl_wasteland.hell_casino);
      global.portal.hell_casino.count = 1;
      global.portal.hell_casino.on = 1;
      initStruct(fortressModules.prtl_wasteland.demon_forge);
      global.portal.demon_forge.count = 1;
      global.portal.demon_forge.on = 1;
      initStruct(fortressModules.prtl_wasteland.hell_factory);
      global.portal.hell_factory.count = 1;
      global.portal.hell_factory.on = 1;
      initStruct(fortressModules.prtl_wasteland.twisted_lab);
      global.portal.twisted_lab.count = 1;
      global.portal.twisted_lab.on = 1;
      global.portal.twisted_lab.Coal = 1;
      initStruct(fortressModules.prtl_wasteland.pumpjack);
      global.portal.pumpjack.count = 1;
      initStruct(fortressModules.prtl_wasteland.brute);
      global.portal.brute.count = 1;
      global.portal.brute.on = 1;
      addSmelter(10, "Iron", "Coal");
      addSmelter(10, "Steel", "Coal");
      global.city.factory.Alloy = 2;
      global.city.factory.Polymer = 2;
      global.city.factory.Nano_Tube = 1;
      global.city.factory.Stanene = 1;
      global.civic.d_job = "lumberjack";
      global.civic.miner.display = true;
      if (!global.race["joyless"]) {
        global.civic.entertainer.display = true;
      }
      global.civic.craftsman.display = true;
      let citizens = actions.portal.prtl_wasteland.dig_demon.citizens() + actions.portal.prtl_wasteland.hovel.citizens();
      global.resource[global.race.species].max = citizens;
      global.resource[global.race.species].amount = citizens;
      global.civic.miner.max = actions.portal.prtl_wasteland.dig_demon.citizens();
      global.civic.miner.workers = actions.portal.prtl_wasteland.dig_demon.citizens();
      global.civic.miner.assigned = actions.portal.prtl_wasteland.dig_demon.citizens();
      global.civic.cement_worker.max = 5;
      global.civic.cement_worker.workers = 5;
      global.civic.cement_worker.assigned = 5;
      if (!global.race["joyless"]) {
        global.civic.entertainer.max = 3;
        global.civic.entertainer.workers = 3;
        global.civic.entertainer.assigned = 3;
      }
      global.civic.banker.max = 1;
      global.civic.banker.workers = 1;
      global.civic.banker.assigned = 1;
      global.civic.professor.max = 3;
      global.civic.professor.workers = 3;
      global.civic.professor.assigned = 3;
      global.civic.scientist.max = 2;
      global.civic.scientist.workers = 2;
      global.civic.scientist.assigned = 2;
      global.civic.govern.type = "autocracy";
      if (global.race["calm"]) {
        global.resource.Zen.display = true;
        initStruct(actions.city.meditation);
      }
      if (global.race["cannibalize"]) {
        initStruct(actions.city.s_alter);
      }
      if (global.race["magnificent"]) {
        initStruct(actions.city.shrine);
      }
      global.portal["fortress"] = {
        threat: 1e4,
        garrison: 0,
        walls: 100,
        repair: 0,
        patrols: 0,
        patrol_size: 10,
        siege: 999,
        notify: "Yes",
        s_ntfy: "Yes",
        nocrew: false
      };
      global.portal.observe = {
        settings: {
          expanded: false,
          average: false,
          hyperSlow: false,
          display: "game_days",
          dropKills: true,
          dropGems: true
        },
        stats: {
          total: {
            start: { year: global.city.calendar.year, day: global.city.calendar.day },
            days: 0,
            wounded: 0,
            died: 0,
            revived: 0,
            surveyors: 0,
            sieges: 0,
            kills: {
              drones: 0,
              patrols: 0,
              sieges: 0,
              guns: 0,
              soul_forge: 0,
              turrets: 0
            },
            gems: {
              patrols: 0,
              guns: 0,
              soul_forge: 0,
              crafted: 0,
              turrets: 0,
              surveyors: 0
            }
          },
          period: {
            start: { year: global.city.calendar.year, day: global.city.calendar.day },
            days: 0,
            wounded: 0,
            died: 0,
            revived: 0,
            surveyors: 0,
            sieges: 0,
            kills: {
              drones: 0,
              patrols: 0,
              sieges: 0,
              guns: 0,
              soul_forge: 0,
              turrets: 0
            },
            gems: {
              patrols: 0,
              guns: 0,
              soul_forge: 0,
              crafted: 0,
              turrets: 0,
              surveyors: 0
            }
          }
        },
        graphID: 0,
        graphs: {}
      };
      drawTech();
      arpa("Physics");
      loadFoundry();
      renderFortress();
    }
  }

  // src/tech.js
  var techs = {
    club: {
      id: "tech-club",
      title: loc("tech_club"),
      desc: loc("tech_club_desc"),
      category: "agriculture",
      era: "primitive",
      reqs: {},
      grant: ["primitive", 1],
      cost: {
        Lumber() {
          return global.race["kindling_kindred"] || global.race["smoldering"] ? 0 : 5;
        },
        Stone() {
          return global.race["kindling_kindred"] || global.race["smoldering"] ? 5 : 0;
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Food.display = true;
          return true;
        }
        return false;
      }
    },
    bone_tools: {
      id: "tech-bone_tools",
      title: loc("tech_bone_tools"),
      desc: loc("tech_bone_tools_desc"),
      category: "stone_gathering",
      era: "primitive",
      reqs: { primitive: 1 },
      grant: ["primitive", 2],
      condition() {
        return global.race["soul_eater"] && !global.race["evil"] ? false : true;
      },
      cost: {
        Food() {
          return global.race["evil"] && !global.race["smoldering"] || global.race["fasting"] ? 0 : 10;
        },
        Lumber() {
          return global.race["evil"] && !global.race["smoldering"] || global.race["fasting"] ? 10 : 0;
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Stone.display = true;
          if (global.race["smoldering"]) {
            global.resource.Chrysotile.display = true;
          }
          return true;
        }
        return false;
      }
    },
    wooden_tools: {
      id: "tech-wooden_tools",
      title() {
        return global.race["kindling_kindred"] ? loc("tech_bone_tools") : loc("tech_wooden_tools");
      },
      desc() {
        return global.race["kindling_kindred"] ? loc("tech_bone_tools_desc") : loc("tech_wooden_tools_desc");
      },
      category: "stone_gathering",
      era: "primitive",
      reqs: { primitive: 1 },
      grant: ["primitive", 2],
      condition() {
        return global.race["soul_eater"] && !global.race["evil"] ? true : false;
      },
      cost: {
        Lumber() {
          return 10;
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Stone.display = true;
          if (global.race["smoldering"]) {
            global.resource.Chrysotile.display = true;
          }
          return true;
        }
        return false;
      }
    },
    sundial: {
      id: "tech-sundial",
      title() {
        return global.race["unfathomable"] ? loc("tech_moondial") : loc("tech_sundial");
      },
      desc() {
        return global.race["unfathomable"] ? loc("tech_moondial_desc") : loc("tech_sundial_desc");
      },
      category: "science",
      era: "primitive",
      reqs: { primitive: 2 },
      condition() {
        return !global.race["gravity_well"] || global.race["gravity_well"] && global.tech["transport"] ? true : false;
      },
      grant: ["primitive", 3],
      cost: {
        Lumber() {
          return 8;
        },
        Stone() {
          return 10;
        }
      },
      effect() {
        return global.race["unfathomable"] ? loc("tech_moondial_effect") : loc("tech_sundial_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_sundial_msg"), "info", false, ["progress"]);
          global.resource.Knowledge.display = true;
          global.city.calendar.day++;
          if (global.race["infectious"]) {
            global.civic.garrison.display = true;
            global.settings.showCivic = true;
            initStruct(actions.city.garrison);
          }
          if (global.race["banana"] && !global.race["terrifying"]) {
            global.settings.showResources = true;
            global.settings.showMarket = true;
            global.resource.Money.display = true;
            global.city.market.active = true;
            global.tech["currency"] = 2;
          }
          if (global.race["calm"]) {
            global.resource.Zen.display = true;
            initStruct(actions.city.meditation);
          }
          return true;
        }
        return false;
      },
      post() {
        if (global.race["banana"] && !global.race["terrifying"]) {
          drawResourceTab("market");
        }
      }
    },
    wheel: {
      id: "tech-wheel",
      title() {
        return loc("tech_wheel");
      },
      desc() {
        return loc("tech_wheel_desc");
      },
      category: "transport",
      era: "primitive",
      reqs: { primitive: 2 },
      grant: ["transport", 1],
      trait: ["gravity_well"],
      cost: {
        Lumber() {
          return 50;
        },
        Stone() {
          return 25;
        }
      },
      effect() {
        return loc("tech_wheel_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.civic.teamster.display = true;
          return true;
        }
        return false;
      }
    },
    wagon: {
      id: "tech-wagon",
      title() {
        return loc("tech_wagon");
      },
      desc() {
        return loc("tech_wagon");
      },
      category: "transport",
      era: "civilized",
      reqs: { transport: 1 },
      condition() {
        return global.tech["farm"] || global.tech["s_lodge"] || global.tech["hunting"] && global.tech.hunting >= 2 || global.race["soul_eater"] && global.race.species !== "wendigo" && global.tech.housing >= 1 && global.tech.currency >= 1 ? true : false;
      },
      grant: ["transport", 2],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 195;
        }
      },
      effect() {
        return loc("tech_wagon_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steam_engine: {
      id: "tech-steam_engine",
      title() {
        return loc("tech_steam_engine");
      },
      desc() {
        return loc("tech_steam_engine");
      },
      category: "transport",
      era: "discovery",
      reqs: { transport: 2, smelting: 3 },
      grant: ["transport", 3],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 14345;
        }
      },
      effect() {
        return loc("tech_steam_engine_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    combustion_engine: {
      id: "tech-combustion_engine",
      title() {
        return loc("tech_combustion_engine");
      },
      desc() {
        return loc("tech_combustion_engine");
      },
      category: "transport",
      era: "industrialized",
      reqs: { transport: 3, oil: 3 },
      grant: ["transport", 4],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 46777;
        }
      },
      effect() {
        return loc("tech_combustion_engine_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    hover_cart: {
      id: "tech-hover_cart",
      title() {
        return loc("tech_hover_cart");
      },
      desc() {
        return loc("tech_hover_cart");
      },
      category: "transport",
      era: "deep_space",
      reqs: { transport: 4, elerium: 1 },
      grant: ["transport", 5],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 284e3;
        }
      },
      effect() {
        return loc("tech_hover_cart_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    osha: {
      id: "tech-osha",
      title() {
        return loc("tech_osha");
      },
      desc() {
        return loc("tech_osha");
      },
      category: "transport",
      era: "industrialized",
      reqs: { transport: 3, high_tech: 3 },
      grant: ["teamster", 1],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 28262;
        }
      },
      effect() {
        return loc("tech_osha_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.civic.teamster.stress = 6;
          return true;
        }
        return false;
      }
    },
    blackmarket: {
      id: "tech-blackmarket",
      title() {
        return loc("tech_blackmarket");
      },
      desc() {
        return loc("tech_blackmarket");
      },
      category: "transport",
      era: "industrialized",
      reqs: { teamster: 1, currency: 5 },
      grant: ["teamster", 2],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 40666;
        }
      },
      effect() {
        return loc("tech_blackmarket_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pipelines: {
      id: "tech-pipelines",
      title() {
        return loc("tech_pipelines");
      },
      desc() {
        return loc("tech_pipelines");
      },
      category: "transport",
      era: "globalized",
      reqs: { teamster: 2, high_tech: 6 },
      grant: ["teamster", 3],
      trait: ["gravity_well"],
      cost: {
        Knowledge() {
          return 95e3;
        }
      },
      effect() {
        return loc("tech_pipelines_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    housing: {
      id: "tech-housing",
      title: loc("tech_housing"),
      desc: loc("tech_housing_desc"),
      category: "housing",
      era: "civilized",
      reqs: { primitive: 3 },
      grant: ["housing", 1],
      cost: {
        Knowledge() {
          return 10;
        }
      },
      effect: loc("tech_housing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.basic_housing);
          return true;
        }
        return false;
      }
    },
    cottage: {
      id: "tech-cottage",
      title() {
        return housingLabel("medium");
      },
      desc: loc("tech_cottage_desc"),
      category: "housing",
      era: "civilized",
      reqs: { housing: 1, cement: 1, mining: 3 },
      grant: ["housing", 2],
      cost: {
        Knowledge() {
          return 3600;
        }
      },
      effect: loc("tech_cottage_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.cottage);
          return true;
        }
        return false;
      }
    },
    apartment: {
      id: "tech-apartment",
      title() {
        return housingLabel("large");
      },
      desc() {
        return housingLabel("large");
      },
      category: "housing",
      era: "discovery",
      reqs: { housing: 2, high_tech: 2 },
      grant: ["housing", 3],
      cost: {
        Knowledge() {
          return 15750;
        }
      },
      effect: loc("tech_apartment_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.apartment);
          return true;
        }
        return false;
      }
    },
    arcology: {
      id: "tech-arcology",
      title: loc("tech_arcology"),
      desc: loc("tech_arcology"),
      category: "housing",
      era: "dimensional",
      reqs: { hell_ruins: 4, housing: 3, high_tech: 17 },
      not_trait: ["warlord"],
      grant: ["housing", 4],
      cost: {
        Knowledge() {
          return 25e6;
        }
      },
      effect() {
        return loc("tech_arcology_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_ruins.arcology);
          return true;
        }
        return false;
      }
    },
    steel_beams: {
      id: "tech-steel_beams",
      title: loc("tech_steel_beams"),
      desc: loc("tech_housing_cost"),
      category: "housing",
      era: "discovery",
      reqs: { housing: 2, smelting: 2 },
      not_trait: ["cataclysm", "lone_survivor"],
      grant: ["housing_reduction", 1],
      cost: {
        Knowledge() {
          return 11250;
        },
        Steel() {
          return 2500;
        }
      },
      effect() {
        let label = housingLabel("small");
        let cLabel = housingLabel("medium");
        return loc("tech_steel_beams_effect", [label, cLabel]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mythril_beams: {
      id: "tech-mythril_beams",
      title: loc("tech_mythril_beams"),
      desc: loc("tech_housing_cost"),
      category: "housing",
      era: "early_space",
      reqs: { housing_reduction: 1, space: 3 },
      grant: ["housing_reduction", 2],
      cost: {
        Knowledge() {
          return 175e3;
        },
        Mythril() {
          return 1e3;
        }
      },
      effect() {
        let label = housingLabel("small");
        let cLabel = housingLabel("medium");
        return loc("tech_mythril_beams_effect", [label, cLabel]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    neutronium_walls: {
      id: "tech-neutronium_walls",
      title: loc("tech_neutronium_walls"),
      desc: loc("tech_housing_cost"),
      category: "housing",
      era: "deep_space",
      reqs: { housing_reduction: 2, gas_moon: 1 },
      grant: ["housing_reduction", 3],
      cost: {
        Knowledge() {
          return 3e5;
        },
        Neutronium() {
          return 850;
        }
      },
      effect() {
        let label = housingLabel("small");
        let cLabel = housingLabel("medium");
        return loc("tech_neutronium_walls_effect", [label, cLabel]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    bolognium_alloy_beams: {
      id: "tech-bolognium_alloy_beams",
      title: loc("tech_bolognium_alloy_beams"),
      desc: loc("tech_housing_cost"),
      category: "housing",
      era: "intergalactic",
      reqs: { housing_reduction: 3, gateway: 3 },
      grant: ["housing_reduction", 4],
      cost: {
        Knowledge() {
          return 375e4;
        },
        Adamantite() {
          return 25e5;
        },
        Bolognium() {
          return 1e5;
        }
      },
      effect() {
        let label = housingLabel("small");
        let cLabel = housingLabel("medium");
        return loc("tech_bolognium_alloy_beams_effect", [label, cLabel]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    aphrodisiac: {
      id: "tech-aphrodisiac",
      title: loc("tech_aphrodisiac"),
      desc: loc("tech_aphrodisiac_desc"),
      category: "housing",
      era: "civilized",
      reqs: { housing: 2 },
      grant: ["reproduction", 1],
      not_trait: ["artifical"],
      cost: {
        Knowledge() {
          return 4500;
        }
      },
      effect: loc("tech_aphrodisiac_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fertility_clinic: {
      id: "tech-fertility_clinic",
      title: loc("tech_fertility_clinic"),
      desc: loc("tech_fertility_clinic"),
      category: "housing",
      era: "intergalactic",
      reqs: { reproduction: 1, xeno: 6 },
      not_trait: ["cataclysm"],
      grant: ["reproduction", 2],
      cost: {
        Knowledge() {
          return 45e5;
        }
      },
      effect: loc("tech_fertility_clinic_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    captive_housing: {
      id: "tech-captive_housing",
      title: loc("tech_captive_housing"),
      desc: loc("tech_captive_housing"),
      category: "eldritch",
      era: "civilized",
      reqs: { housing: 1 },
      trait: ["unfathomable"],
      grant: ["unfathomable", 1],
      cost: {
        Knowledge() {
          return 12;
        }
      },
      effect: loc("tech_captive_housing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.captive_housing);
          return true;
        }
        return false;
      }
    },
    torture: {
      id: "tech-torture",
      title: loc("tech_torture"),
      desc: loc("tech_torture"),
      category: "eldritch",
      era: "civilized",
      reqs: { unfathomable: 1 },
      trait: ["unfathomable"],
      grant: ["unfathomable", 2],
      cost: {
        Knowledge() {
          return 25;
        }
      },
      effect: loc("tech_torture_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.torturer.display = true;
          return true;
        }
        return false;
      }
    },
    thrall_quarters: {
      id: "tech-thrall_quarters",
      title: loc("tech_thrall_quarters"),
      desc: loc("tech_thrall_quarters"),
      category: "eldritch",
      era: "civilized",
      reqs: { unfathomable: 2, high_tech: 6 },
      trait: ["unfathomable"],
      grant: ["unfathomable", 3],
      cost: {
        Knowledge() {
          return 95e3;
        },
        Cement() {
          return 5e4;
        },
        Wrought_Iron() {
          return 12500;
        }
      },
      effect: loc("tech_thrall_quarters_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.torturer.display = true;
          return true;
        }
        return false;
      }
    },
    minor_wish: {
      id: "tech-minor_wish",
      title: loc("tech_minor_wish"),
      desc: loc("tech_minor_wish"),
      category: "paranormal",
      era: "civilized",
      reqs: { housing: 1 },
      condition() {
        return global.settings.showCivic;
      },
      trait: ["wish"],
      grant: ["wish", 1],
      cost: {
        Knowledge() {
          return 50;
        }
      },
      effect: loc("tech_minor_wish_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showWish = true;
          global.race["wishStats"] = {
            minor: 0,
            major: 0,
            plas: 0,
            tax: 0,
            bad: 0,
            fame: 0,
            troop: 0,
            prof: 0,
            potato: 0,
            priest: 0,
            temple: false,
            zigg: false,
            astro: false,
            casino: false,
            ship: false,
            gov: false,
            strong: false
          };
          return true;
        }
        return false;
      },
      post() {
        renderSupernatural();
      }
    },
    major_wish: {
      id: "tech-major_wish",
      title: loc("tech_major_wish"),
      desc: loc("tech_major_wish"),
      category: "paranormal",
      era: "civilized",
      reqs: { wish: 1, high_tech: 7 },
      condition() {
        return global.settings.showCivic;
      },
      trait: ["wish"],
      grant: ["wish", 2],
      cost: {
        Knowledge() {
          return 11e4;
        }
      },
      effect: loc("tech_major_wish_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        renderSupernatural();
      }
    },
    psychic_energy: {
      id: "tech-psychic_energy",
      title: loc("tech_psychic_energy"),
      desc: loc("tech_psychic_energy"),
      category: "eldritch",
      era: "civilized",
      reqs: { housing: 1 },
      condition() {
        return global.settings.showCivic;
      },
      trait: ["psychic"],
      grant: ["psychic", 1],
      cost: {
        Knowledge() {
          return 15;
        }
      },
      effect: loc("tech_psychic_energy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Energy.display = true;
          global.settings.showPsychic = true;
          global.race["psychicPowers"] = { boost: { r: "Food" }, boostTime: 0 };
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    psychic_attack: {
      id: "tech-psychic_attack",
      title: loc("tech_psychic_attack"),
      desc: loc("tech_psychic_attack"),
      category: "eldritch",
      era: "civilized",
      reqs: { psychic: 1, military: 1 },
      condition() {
        return global.stats.psykill >= 10;
      },
      trait: ["psychic"],
      grant: ["psychic", 2],
      cost: {
        Knowledge() {
          return 100;
        }
      },
      effect: loc("tech_psychic_attack_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.race.psychicPowers["assaultTime"] = 0;
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    psychic_finance: {
      id: "tech-psychic_finance",
      title: loc("tech_psychic_finance"),
      desc: loc("tech_psychic_finance"),
      category: "eldritch",
      era: "civilized",
      reqs: { psychic: 2, high_tech: 4 },
      trait: ["psychic"],
      grant: ["psychic", 3],
      cost: {
        Knowledge() {
          return 65e3;
        }
      },
      effect: loc("tech_psychic_finance_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.race.psychicPowers["cash"] = 0;
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    psychic_channeling: {
      id: "tech-psychic_channeling",
      title: loc("tech_psychic_channeling"),
      desc: loc("tech_psychic_channeling"),
      category: "eldritch",
      era: "deep_space",
      reqs: { psychic: 3, high_tech: 10 },
      trait: ["psychic"],
      grant: ["psychic", 4],
      cost: {
        Knowledge() {
          return 36e4;
        }
      },
      effect: loc("tech_psychic_channeling_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.race.psychicPowers["channel"] = { cash: 0, assault: 0, boost: 0 };
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    psychic_efficiency: {
      id: "tech-psychic_efficiency",
      title: loc("tech_psychic_efficiency"),
      desc: loc("tech_psychic_efficiency"),
      category: "eldritch",
      era: "intergalactic",
      reqs: { psychic: 4, high_tech: 16 },
      trait: ["psychic"],
      grant: ["psychic", 5],
      cost: {
        Knowledge() {
          return 525e4;
        }
      },
      effect: loc("tech_psychic_efficiency_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    mind_break: {
      id: "tech-mind_break",
      title: loc("tech_mind_break"),
      desc: loc("tech_mind_break"),
      category: "eldritch",
      era: "civilized",
      reqs: { psychic: 2, high_tech: 1, unfathomable: 2 },
      trait: ["psychic"],
      grant: ["psychicthrall", 1],
      cost: {
        Knowledge() {
          return 7e3;
        }
      },
      effect: loc("tech_mind_break_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    psychic_stun: {
      id: "tech-psychic_stun",
      title: loc("tech_psychic_stun"),
      desc: loc("tech_psychic_stun"),
      category: "eldritch",
      era: "civilized",
      reqs: { psychicthrall: 1, high_tech: 3, unfathomable: 2 },
      trait: ["psychic"],
      grant: ["psychicthrall", 2],
      cost: {
        Knowledge() {
          return 32e3;
        }
      },
      effect: loc("tech_psychic_stun_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    spear: {
      id: "tech-spear",
      title: loc("tech_spear"),
      desc: loc("tech_spear_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { primitive: 3, storage: 1 },
      trait: ["forager"],
      grant: ["foraging", 1],
      cost: {
        Knowledge() {
          return 110;
        },
        Stone() {
          return 75;
        }
      },
      effect: loc("tech_spear_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    bronze_spear: {
      id: "tech-bronze_spear",
      title: loc("tech_bronze_spear"),
      desc: loc("tech_bronze_spear_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { foraging: 1, mining: 2 },
      trait: ["forager"],
      grant: ["foraging", 2],
      cost: {
        Knowledge() {
          return 525;
        },
        Copper() {
          return 50;
        }
      },
      effect: loc("tech_bronze_spear_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_spear: {
      id: "tech-iron_spear",
      title: loc("tech_iron_spear"),
      desc: loc("tech_iron_spear_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { foraging: 2, mining: 3 },
      trait: ["forager"],
      grant: ["foraging", 3],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 1650 : 3300;
        },
        Iron() {
          return 375;
        }
      },
      effect: loc("tech_bronze_spear_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_spear: {
      id: "tech-steel_spear",
      title: loc("tech_steel_spear"),
      desc: loc("tech_steel_spear_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { foraging: 3, smelting: 2 },
      trait: ["forager"],
      grant: ["foraging", 4],
      cost: {
        Knowledge() {
          return 10500;
        },
        Iron() {
          return 750;
        }
      },
      effect: loc("tech_bronze_spear_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_spear: {
      id: "tech-titanium_spear",
      title: loc("tech_titanium_spear"),
      desc: loc("tech_titanium_spear_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { foraging: 4, high_tech: 3 },
      trait: ["forager"],
      grant: ["foraging", 5],
      cost: {
        Knowledge() {
          return 39500;
        },
        Titanium() {
          return 475;
        }
      },
      effect: loc("tech_bronze_spear_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dowsing_rod: {
      id: "tech-dowsing_rod",
      title: loc("tech_dowsing_rod"),
      desc: loc("tech_dowsing_rod_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { foraging: 1, mining: 2 },
      trait: ["forager"],
      grant: ["dowsing", 1],
      cost: {
        Knowledge() {
          return 450;
        },
        Lumber() {
          return 750;
        }
      },
      effect: loc("tech_dowsing_rod_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    metal_detector: {
      id: "tech-metal_detector",
      title: loc("tech_metal_detector"),
      desc: loc("tech_metal_detector_desc"),
      category: "foraging",
      era: "civilized",
      reqs: { dowsing: 1, high_tech: 4 },
      trait: ["forager"],
      grant: ["dowsing", 2],
      cost: {
        Knowledge() {
          return 65e3;
        }
      },
      effect: loc("tech_metal_detector_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    smokehouse: {
      id: "tech-smokehouse",
      title() {
        return global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? loc("city_smokehouse_easter") : loc("tech_smokehouse");
      },
      desc() {
        return global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? loc("tech_smokehouse_easter_desc") : loc("tech_smokehouse_desc");
      },
      category: "storage",
      era: "civilized",
      reqs: { primitive: 3, storage: 1 },
      trait: ["carnivore"],
      not_trait: ["cataclysm", "artifical", "soul_eater", "herbivore", "lone_survivor"],
      grant: ["hunting", 1],
      cost: {
        Knowledge() {
          return 80;
        }
      },
      effect() {
        return global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? loc("tech_smokehouse_easter_effect") : loc("tech_smokehouse_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "smokehouse", "silo", actions.city.smokehouse.struct().d);
          return true;
        }
        return false;
      },
      post() {
        if (global.tech["s_lodge"]) {
          global.tech["hunting"] = 2;
        }
      }
    },
    lodge: {
      id: "tech-lodge",
      title: loc("tech_lodge"),
      desc: loc("tech_lodge"),
      wiki: global.race["carnivore"] ? true : false,
      category: "agriculture",
      era: "civilized",
      reqs: { hunting: 1, housing: 1, currency: 1 },
      condition() {
        return global.tech["s_lodge"] ? false : true;
      },
      grant: ["hunting", 2],
      cost: {
        Knowledge() {
          return 180;
        }
      },
      effect: loc("tech_lodge_effect"),
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "lodge", "farm", actions.city.lodge.struct().d);
          return true;
        }
        return false;
      }
    },
    alt_lodge: {
      id: "tech-alt_lodge",
      title() {
        return this.condition() ? loc("tech_lodge_alt") : loc("tech_lodge");
      },
      desc() {
        return this.condition() ? loc("tech_lodge_alt") : loc("tech_lodge");
      },
      wiki: global.race["carnivore"] ? false : true,
      category: "housing",
      era: "civilized",
      reqs: { housing: 1, currency: 1 },
      grant: ["s_lodge", 1],
      condition() {
        return (global.race.species === "wendigo" || global.race["detritivore"]) && !global.race["carnivore"] && !global.race["herbivore"] || global.race["carnivore"] && global.race["soul_eater"] || global.race["artifical"] || global.race["unfathomable"] || global.race["forager"] ? true : false;
      },
      cost: {
        Knowledge() {
          return global.race["artifical"] ? 1e4 : 180;
        }
      },
      effect() {
        return this.condition() ? loc("tech_lodge_effect_alt") : loc("tech_lodge_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "lodge", "farm", actions.city.lodge.struct().d);
          return true;
        }
        return false;
      }
    },
    soul_well: {
      id: "tech-soul_well",
      title: loc("tech_soul_well"),
      desc: loc("tech_soul_well"),
      category: "souls",
      era: "civilized",
      reqs: { primitive: 3 },
      trait: ["soul_eater"],
      not_trait: ["cataclysm", "artifical", "lone_survivor"],
      grant: ["soul_eater", 1],
      cost: {
        Knowledge() {
          return 10;
        }
      },
      effect: loc("tech_soul_well_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.soul_well);
          return true;
        }
        return false;
      }
    },
    compost: {
      id: "tech-compost",
      title: loc("tech_compost"),
      desc: loc("tech_compost_desc"),
      category: "compost",
      era: "civilized",
      reqs: { primitive: 3 },
      trait: ["detritivore"],
      not_trait: ["cataclysm", "artifical", "lone_survivor"],
      grant: ["compost", 1],
      cost: {
        Knowledge() {
          return 10;
        }
      },
      effect: loc("tech_compost_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.compost);
          return true;
        }
        return false;
      }
    },
    hot_compost: {
      id: "tech-hot_compost",
      title: loc("tech_hot_compost"),
      desc: loc("tech_hot_compost"),
      category: "compost",
      era: "civilized",
      reqs: { compost: 1 },
      trait: ["detritivore"],
      grant: ["compost", 2],
      cost: {
        Knowledge() {
          return 100;
        }
      },
      effect: loc("tech_hot_compost_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mulching: {
      id: "tech-mulching",
      title: loc("tech_mulching"),
      desc: loc("tech_mulching"),
      category: "compost",
      era: "civilized",
      reqs: { compost: 2, mining: 3 },
      trait: ["detritivore"],
      grant: ["compost", 3],
      cost: {
        Knowledge() {
          return 3200;
        }
      },
      effect: loc("tech_mulching_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adv_mulching: {
      id: "tech-adv_mulching",
      title: loc("tech_adv_mulching"),
      desc: loc("tech_adv_mulching"),
      category: "compost",
      era: "discovery",
      reqs: { compost: 3, high_tech: 2 },
      trait: ["detritivore"],
      grant: ["compost", 4],
      cost: {
        Knowledge() {
          return 16e3;
        }
      },
      effect: loc("tech_adv_mulching_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    agriculture: {
      id: "tech-agriculture",
      title: loc("tech_agriculture"),
      desc: loc("tech_agriculture_desc"),
      category: "agriculture",
      era: "civilized",
      reqs: { primitive: 3 },
      condition() {
        return global.race["herbivore"] || !global.race["carnivore"] && !global.race["detritivore"] && !global.race["soul_eater"] ? true : false;
      },
      not_trait: ["cataclysm", "artifical", "lone_survivor", "unfathomable", "forager"],
      grant: ["agriculture", 1],
      cost: {
        Knowledge() {
          return 10;
        }
      },
      effect: loc("tech_agriculture_effect"),
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "farm", "lodge", actions.city.farm.struct().d);
          return true;
        }
        return false;
      }
    },
    farm_house: {
      id: "tech-farm_house",
      title: loc("tech_farm_house"),
      desc: loc("tech_farm_house_desc"),
      category: "housing",
      era: "civilized",
      reqs: { agriculture: 1, housing: 1, currency: 1 },
      grant: ["farm", 1],
      cost: {
        Money() {
          return 50;
        },
        Knowledge() {
          return 180;
        }
      },
      effect: loc("tech_farm_house_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    irrigation: {
      id: "tech-irrigation",
      title: loc("tech_irrigation"),
      desc: loc("tech_irrigation_desc"),
      category: "agriculture",
      era: "civilized",
      reqs: { agriculture: 1 },
      grant: ["agriculture", 2],
      cost: {
        Knowledge() {
          return 55;
        }
      },
      effect: loc("tech_irrigation_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    silo: {
      id: "tech-silo",
      title: loc("tech_silo"),
      desc: loc("tech_silo_desc"),
      category: "storage",
      era: "civilized",
      reqs: { agriculture: 2, storage: 1 },
      grant: ["agriculture", 3],
      cost: {
        Knowledge() {
          return 80;
        }
      },
      effect: loc("tech_silo_effect"),
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "silo", "smokehouse", actions.city.silo.struct().d);
          return true;
        }
        return false;
      }
    },
    mill: {
      id: "tech-mill",
      title: loc("tech_mill"),
      desc: loc("tech_mill_desc"),
      category: "agriculture",
      era: "civilized",
      reqs: { agriculture: 3, mining: 3 },
      grant: ["agriculture", 4],
      cost: {
        Knowledge() {
          return 5400;
        }
      },
      effect: loc("tech_mill_effect"),
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "mill", "windmill", actions.city.mill.struct().d);
          return true;
        }
        return false;
      }
    },
    windmill: {
      id: "tech-windmill",
      title: loc("tech_windmill"),
      desc: loc("tech_windmill_desc"),
      category: "agriculture",
      era: "discovery",
      reqs: { agriculture: 4, high_tech: 1 },
      grant: ["agriculture", 5],
      cost: {
        Knowledge() {
          return 16200;
        }
      },
      effect: loc("tech_windmill_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    windturbine: {
      id: "tech-windturbine",
      title: loc("tech_windturbine"),
      desc: loc("tech_windturbine"),
      category: "power_generation",
      era: "globalized",
      reqs: { agriculture: 5, high_tech: 4 },
      grant: ["agriculture", 6],
      cost: {
        Knowledge() {
          return 66e3;
        }
      },
      effect: loc("tech_windturbine_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    wind_plant: {
      id: "tech-wind_plant",
      title() {
        return global.race["unfathomable"] ? loc("tech_watermill") : loc("tech_windmill");
      },
      desc() {
        return global.race["unfathomable"] ? loc("tech_watermill") : loc("tech_windmill");
      },
      category: "power_generation",
      era: "globalized",
      reqs: { high_tech: 4 },
      condition() {
        return global.race["carnivore"] || global.race["detritivore"] || global.race["artifical"] || global.race["soul_eater"] || global.race["unfathomable"] || global.race["forager"] ? true : false;
      },
      not_trait: ["herbivore"],
      grant: ["wind_plant", 1],
      cost: {
        Knowledge() {
          return 66e3;
        }
      },
      effect() {
        return global.race["unfathomable"] ? loc("tech_watermill_effect") : loc("tech_wind_plant_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          checkAltPurgatory("city", "windmill", "mill", actions.city.windmill.struct().d);
          return true;
        }
        return false;
      }
    },
    gmfood: {
      id: "tech-gmfood",
      title: loc("tech_gmfood"),
      desc: loc("tech_gmfood_desc"),
      category: "agriculture",
      era: "globalized",
      reqs: { agriculture: 6, genetics: 1 },
      grant: ["agriculture", 7],
      cost: {
        Knowledge() {
          return 95e3;
        }
      },
      effect: loc("tech_gmfood_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    foundry: {
      id: "tech-foundry",
      title: loc("tech_foundry"),
      desc: loc("tech_foundry"),
      category: "crafting",
      era: "civilized",
      reqs: { mining: 2 },
      grant: ["foundry", 1],
      cost: {
        Knowledge() {
          return 650;
        }
      },
      effect: loc("tech_foundry_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.foundry);
          return true;
        }
        return false;
      }
    },
    artisans: {
      id: "tech-artisans",
      title: loc("tech_artisans"),
      desc: loc("tech_artisans"),
      category: "crafting",
      era: "civilized",
      reqs: { foundry: 1 },
      grant: ["foundry", 2],
      cost: {
        Knowledge() {
          return 1500;
        }
      },
      effect: loc("tech_artisans_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    apprentices: {
      id: "tech-apprentices",
      title: loc("tech_apprentices"),
      desc: loc("tech_apprentices"),
      category: "crafting",
      era: "civilized",
      reqs: { foundry: 2 },
      grant: ["foundry", 3],
      cost: {
        Knowledge() {
          return 3200;
        }
      },
      effect: loc("tech_apprentices_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    carpentry: {
      id: "tech-carpentry",
      title: loc("tech_carpentry"),
      desc: loc("tech_carpentry"),
      category: "crafting",
      era: "civilized",
      reqs: { foundry: 3, saw: 1 },
      grant: ["foundry", 4],
      not_trait: ["evil"],
      cost: {
        Knowledge() {
          return 5200;
        }
      },
      effect: loc("tech_carpentry_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    demonic_craftsman: {
      id: "tech-demonic_craftsman",
      title: loc("tech_master_craftsman"),
      desc: loc("tech_master_craftsman"),
      category: "crafting",
      era: "discovery",
      wiki: global.race["evil"] ? true : false,
      reqs: { foundry: 3 },
      grant: ["foundry", 5],
      trait: ["evil"],
      cost: {
        Knowledge() {
          return 12e3;
        }
      },
      effect: loc("tech_master_craftsman_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    master_craftsman: {
      id: "tech-master_craftsman",
      title: loc("tech_master_craftsman"),
      desc: loc("tech_master_craftsman"),
      category: "crafting",
      era: "discovery",
      wiki: global.race["evil"] ? false : true,
      reqs: { foundry: 4 },
      grant: ["foundry", 5],
      not_trait: ["evil"],
      cost: {
        Knowledge() {
          return 12e3;
        }
      },
      effect: loc("tech_master_craftsman_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    brickworks: {
      id: "tech-brickworks",
      title: loc("tech_brickworks"),
      desc: loc("tech_brickworks"),
      category: "crafting",
      era: "discovery",
      reqs: { foundry: 5 },
      grant: ["foundry", 6],
      cost: {
        Knowledge() {
          return 18500;
        }
      },
      effect: loc("tech_brickworks_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    machinery: {
      id: "tech-machinery",
      title: loc("tech_machinery"),
      desc: loc("tech_machinery"),
      category: "crafting",
      era: "globalized",
      reqs: { foundry: 6, high_tech: 4 },
      grant: ["foundry", 7],
      cost: {
        Knowledge() {
          return 66e3;
        }
      },
      effect: loc("tech_machinery_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cnc_machine: {
      id: "tech-cnc_machine",
      title: loc("tech_cnc_machine"),
      desc: loc("tech_cnc_machine"),
      category: "crafting",
      era: "globalized",
      reqs: { foundry: 7, high_tech: 8 },
      grant: ["foundry", 8],
      cost: {
        Knowledge() {
          return 132e3;
        }
      },
      effect: loc("tech_cnc_machine_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    vocational_training: {
      id: "tech-vocational_training",
      title: loc("tech_vocational_training"),
      desc: loc("tech_vocational_training"),
      category: "crafting",
      era: "industrialized",
      reqs: { foundry: 1, high_tech: 3 },
      grant: ["v_train", 1],
      cost: {
        Knowledge() {
          return 3e4;
        }
      },
      effect: loc("tech_vocational_training_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    stellar_forge: {
      id: "tech-stellar_forge",
      title: loc("tech_stellar_forge"),
      desc: loc("tech_stellar_forge"),
      category: "crafting",
      era: "intergalactic",
      reqs: { foundry: 8, high_tech: 15, gateway: 3, neutron: 1 },
      grant: ["star_forge", 1],
      cost: {
        Knowledge() {
          return 45e5;
        }
      },
      effect: loc("tech_stellar_forge_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_neutron.stellar_forge);
          return true;
        }
        return false;
      }
    },
    stellar_smelting: {
      id: "tech-stellar_smelting",
      title: loc("tech_stellar_smelting"),
      desc: loc("tech_stellar_smelting"),
      category: "crafting",
      era: "intergalactic",
      reqs: { star_forge: 1, xeno: 4 },
      grant: ["star_forge", 2],
      cost: {
        Knowledge() {
          return 5e6;
        },
        Vitreloy() {
          return 1e4;
        }
      },
      effect: loc("tech_stellar_smelting_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        let num_forge_on = p_on["stellar_forge"];
        let num_new_smelters = num_forge_on * actions.interstellar.int_neutron.stellar_forge.smelting();
        addSmelter(num_new_smelters, "Iron", "Star");
        defineIndustry();
      }
    },
    assembly_line: {
      id: "tech-assembly_line",
      title: loc("tech_assembly_line"),
      desc: loc("tech_assembly_line"),
      category: "crafting",
      era: "globalized",
      reqs: { high_tech: 4 },
      grant: ["factory", 1],
      cost: {
        Knowledge() {
          return 72e3;
        },
        Copper() {
          return 125e3;
        }
      },
      effect: `<span>${loc("tech_assembly_line_effect")}</span> <span class="has-text-special">${loc("tech_factory_warning")}</span>`,
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    automation: {
      id: "tech-automation",
      title: loc("tech_automation"),
      desc: loc("tech_automation"),
      category: "crafting",
      era: "early_space",
      reqs: { high_tech: 8, factory: 1 },
      grant: ["factory", 2],
      cost: {
        Knowledge() {
          return 165e3;
        }
      },
      effect: `<span>${loc("tech_automation_effect")}</span> <span class="has-text-special">${loc("tech_factory_warning")}</span>`,
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    laser_cutters: {
      id: "tech-laser_cutters",
      title: loc("tech_laser_cutters"),
      desc: loc("tech_laser_cutters"),
      category: "crafting",
      era: "deep_space",
      reqs: { high_tech: 9, factory: 2 },
      grant: ["factory", 3],
      cost: {
        Knowledge() {
          return 3e5;
        },
        Elerium() {
          return 200;
        }
      },
      effect: `<span>${loc("tech_laser_cutters_effect")}</span> <span class="has-text-special">${loc("tech_factory_warning")}</span>`,
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    high_tech_factories: {
      id: "tech-high_tech_factories",
      title: loc("tech_high_tech_factories"),
      desc: loc("tech_high_tech_factories"),
      category: "crafting",
      era: "intergalactic",
      reqs: { high_tech: 17, alpha: 4, factory: 3 },
      grant: ["factory", 4],
      cost: {
        Knowledge() {
          return 135e5;
        },
        Vitreloy() {
          return 5e5;
        },
        Orichalcum() {
          return 3e5;
        }
      },
      effect: `<span>${loc("tech_high_tech_factories_effect")}</span> <span class="has-text-special">${loc("tech_factory_warning")}</span>`,
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    banquet: {
      id: "tech-banquet",
      title: loc("tech_banquet"),
      desc: loc("tech_banquet"),
      category: "special",
      era: "discovery",
      reqs: { high_tech: 2 },
      not_trait: ["fasting", "cataclysm", "lone_survivor", "warlord"],
      grant: ["banquet", 1],
      condition() {
        return global.stats.achieve["endless_hunger"] && global.stats.achieve["endless_hunger"].l >= 1 ? true : false;
      },
      cost: {
        Knowledge() {
          return 18500;
        }
      },
      effect: loc("tech_banquet_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.banquet);
          return true;
        }
        return false;
      }
    },
    theatre: {
      id: "tech-theatre",
      title() {
        return global.race.universe === "evil" ? loc("tech_theatre_evil") : loc("tech_theatre");
      },
      desc() {
        return global.race.universe === "evil" ? loc("tech_theatre_evil") : loc("tech_theatre");
      },
      category: "entertainment",
      era: "civilized",
      reqs: { housing: 1, currency: 1, cement: 1 },
      grant: ["theatre", 1],
      not_trait: ["joyless"],
      cost: {
        Knowledge() {
          return 750;
        }
      },
      effect() {
        return global.race.universe === "evil" ? loc("tech_theatre_evil_effect") : loc("tech_theatre_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.amphitheatre);
          return true;
        }
        return false;
      }
    },
    playwright: {
      id: "tech-playwright",
      title() {
        return global.race.universe === "evil" ? loc("tech_gladiators") : loc("tech_playwright");
      },
      desc: loc("tech_playwright"),
      category: "entertainment",
      era: "civilized",
      reqs: { theatre: 1, science: 2 },
      grant: ["theatre", 2],
      cost: {
        Knowledge() {
          return 1080;
        }
      },
      effect() {
        return global.race.universe === "evil" ? loc("tech_gladiators_effect", [loc("city_colosseum")]) : loc("tech_playwright_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    magic: {
      id: "tech-magic",
      title() {
        switch (global.race.universe) {
          case "magic":
            return loc("tech_illusionist");
          case "evil":
            return loc("tech_mock_battles");
          default:
            return loc("tech_magic");
        }
      },
      desc() {
        return $(this)[0].title();
      },
      category: "entertainment",
      era: "discovery",
      reqs: { theatre: 2, high_tech: 1 },
      grant: ["theatre", 3],
      cost: {
        Knowledge() {
          return 7920;
        }
      },
      effect() {
        switch (global.race.universe) {
          case "magic":
            return loc("tech_illusionist_effect");
          case "evil":
            return loc("tech_mock_battles_effect");
          default:
            return loc("tech_magic_effect");
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    superstars: {
      id: "tech-superstars",
      title() {
        return global.race.universe === "evil" ? loc("tech_champions") : loc("tech_superstars");
      },
      desc() {
        return global.race.universe === "evil" ? loc("tech_champions") : loc("tech_superstars");
      },
      category: "entertainment",
      era: "interstellar",
      reqs: { theatre: 3, high_tech: 12 },
      grant: ["superstar", 1],
      cost: {
        Knowledge() {
          return 66e4;
        }
      },
      effect() {
        return global.race.universe === "evil" ? loc("tech_champions_effect") : loc("tech_superstars_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    radio: {
      id: "tech-radio",
      title: loc("tech_radio"),
      desc: loc("tech_radio"),
      category: "entertainment",
      era: "discovery",
      reqs: { theatre: 3, high_tech: 2 },
      grant: ["broadcast", 1],
      cost: {
        Knowledge() {
          return 16200;
        }
      },
      effect() {
        return loc("tech_radio_effect", [wardenLabel()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    tv: {
      id: "tech-tv",
      title: loc("tech_tv"),
      desc: loc("tech_tv"),
      category: "entertainment",
      era: "globalized",
      reqs: { broadcast: 1, high_tech: 4 },
      grant: ["broadcast", 2],
      cost: {
        Knowledge() {
          return 67500;
        }
      },
      effect() {
        return loc("tech_tv_effect", [wardenLabel()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    vr_center: {
      id: "tech-vr_center",
      title: loc("tech_vr_center"),
      desc: loc("tech_vr_center"),
      category: "entertainment",
      era: "interstellar",
      reqs: { broadcast: 2, high_tech: 12, stanene: 1 },
      grant: ["broadcast", 3],
      not_trait: ["warlord"],
      cost: {
        Knowledge() {
          return 62e4;
        }
      },
      effect() {
        return loc("tech_vr_center_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.vr_center);
          return true;
        }
        return false;
      }
    },
    zoo: {
      id: "tech-zoo",
      title: loc("tech_zoo"),
      desc: loc("tech_zoo"),
      category: "entertainment",
      era: "dimensional",
      reqs: { hell_ruins: 2 },
      not_trait: ["warlord"],
      grant: ["zoo", 1],
      cost: {
        Knowledge() {
          return 225e5;
        }
      },
      effect() {
        return loc("tech_zoo_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.zoo);
          return true;
        }
        return false;
      }
    },
    casino: {
      id: "tech-casino",
      title: structName("casino"),
      desc: structName("casino"),
      category: "entertainment",
      era: "globalized",
      reqs: { high_tech: 4, currency: 5 },
      grant: ["gambling", 1],
      cost: {
        Knowledge() {
          return 95e3;
        }
      },
      effect: loc("tech_casino_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.casino);
          initStruct(actions.space.spc_hell.spc_casino);
          return true;
        }
        return false;
      }
    },
    dazzle: {
      id: "tech-dazzle",
      title: loc("tech_dazzle"),
      desc: loc("tech_dazzle"),
      category: "banking",
      era: "globalized",
      reqs: { gambling: 1 },
      grant: ["gambling", 2],
      cost: {
        Knowledge() {
          return 125e3;
        }
      },
      effect: loc("tech_dazzle_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    casino_vault: {
      id: "tech-casino_vault",
      title: loc("tech_casino_vault"),
      desc: loc("tech_casino_vault"),
      category: "banking",
      era: "early_space",
      reqs: { gambling: 2, space: 3 },
      grant: ["gambling", 3],
      cost: {
        Knowledge() {
          return 145e3;
        },
        Iridium() {
          return 2500;
        }
      },
      effect: loc("tech_casino_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    otb: {
      id: "tech-otb",
      title: loc("tech_otb"),
      desc: loc("tech_otb"),
      category: "banking",
      era: "deep_space",
      reqs: { gambling: 3, banking: 10, high_tech: 10 },
      grant: ["gambling", 4],
      cost: {
        Knowledge() {
          return 39e4;
        }
      },
      effect: loc("tech_otb_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    online_gambling: {
      id: "tech-online_gambling",
      title: loc("tech_online_gambling"),
      desc: loc("tech_online_gambling"),
      category: "banking",
      era: "interstellar",
      reqs: { gambling: 4, banking: 12 },
      grant: ["gambling", 5],
      cost: {
        Knowledge() {
          return 8e5;
        }
      },
      effect: loc("tech_online_gambling_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    bolognium_vaults: {
      id: "tech-bolognium_vaults",
      title: loc("tech_bolognium_vaults"),
      desc: loc("tech_bolognium_vaults"),
      category: "banking",
      era: "intergalactic",
      reqs: { gambling: 5, gateway: 3 },
      grant: ["gambling", 6],
      cost: {
        Knowledge() {
          return 39e5;
        },
        Bolognium() {
          return 18e4;
        }
      },
      effect: loc("tech_bolognium_vaults_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mining: {
      id: "tech-mining",
      title() {
        return global.race["sappy"] ? loc("tech_amber") : loc("tech_mining");
      },
      desc() {
        return global.race["sappy"] ? loc("tech_amber") : loc("tech_mining_desc");
      },
      category: "mining",
      era: "civilized",
      reqs: { primitive: 3 },
      grant: ["mining", 1],
      cost: {
        Knowledge() {
          return 45;
        }
      },
      effect() {
        return global.race["sappy"] ? loc("tech_amber_effect") : loc(global.race["flier"] ? "tech_mining_effect_alt" : "tech_mining_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.rock_quarry);
          if (global.race["cannibalize"]) {
            initStruct(actions.city.s_alter);
          }
          return true;
        }
        return false;
      }
    },
    bayer_process: {
      id: "tech-bayer_process",
      title: loc("tech_bayer_process"),
      desc: loc("tech_bayer_process_desc"),
      category: "mining",
      era: "civilized",
      reqs: { smelting: 2 },
      grant: ["alumina", 1],
      cost: {
        Knowledge() {
          return 4500;
        }
      },
      effect() {
        return global.race["sappy"] ? loc("tech_bayer_process_effect_alt") : loc("tech_bayer_process_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.metal_refinery);
          loadFoundry();
          return true;
        }
        return false;
      }
    },
    elysis_process: {
      id: "tech-elysis_process",
      title: loc("tech_elysis_process"),
      desc: loc("tech_elysis_process"),
      category: "mining",
      era: "interstellar",
      reqs: { alumina: 1, stanene: 1, graphene: 1 },
      path: ["standard", "truepath"],
      not_trait: ["cataclysm", "lone_survivor"],
      grant: ["alumina", 2],
      cost: {
        Knowledge() {
          return 675e3;
        },
        Graphene() {
          return 45e3;
        },
        Stanene() {
          return 75e3;
        }
      },
      effect: loc("tech_elysis_process_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    smelting: {
      id: "tech-smelting",
      title: loc("tech_smelting"),
      desc: loc("tech_smelting_desc"),
      category: "mining",
      era: "civilized",
      reqs: { mining: 3 },
      grant: ["smelting", 1],
      cost: {
        Knowledge() {
          return 4050;
        }
      },
      effect: loc("tech_smelting_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.smelter);
          return true;
        }
        return false;
      },
      post() {
        if (global.race["steelen"]) {
          global.tech["smelting"] = 2;
          drawTech();
        }
      }
    },
    steel: {
      id: "tech-steel",
      title: loc("tech_steel"),
      desc: loc("tech_steel_desc"),
      category: "mining",
      era: "civilized",
      reqs: { smelting: 1, mining: 4 },
      grant: ["smelting", 2],
      condition() {
        return global.race["steelen"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 4950;
        },
        Steel() {
          return 25;
        }
      },
      effect: loc("tech_steel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Steel.display = true;
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        renderPsychicPowers();
      }
    },
    blast_furnace: {
      id: "tech-blast_furnace",
      title: loc("tech_blast_furnace"),
      desc: loc("tech_blast_furnace"),
      category: "mining",
      era: "discovery",
      reqs: { smelting: 2 },
      grant: ["smelting", 3],
      cost: {
        Knowledge() {
          return 13500;
        },
        Coal() {
          return 2e3;
        }
      },
      effect: loc("tech_blast_furnace_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        if (global.race["steelen"]) {
          global.tech["smelting"] = 6;
          drawTech();
        }
      }
    },
    bessemer_process: {
      id: "tech-bessemer_process",
      title: loc("tech_bessemer_process"),
      desc: loc("tech_bessemer_process"),
      category: "mining",
      era: "discovery",
      reqs: { smelting: 3 },
      grant: ["smelting", 4],
      condition() {
        return global.race["steelen"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 19800;
        },
        Coal() {
          return 5e3;
        }
      },
      effect: loc("tech_bessemer_process_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    oxygen_converter: {
      id: "tech-oxygen_converter",
      title: loc("tech_oxygen_converter"),
      desc: loc("tech_oxygen_converter"),
      category: "mining",
      era: "industrialized",
      reqs: { smelting: 4, high_tech: 3 },
      grant: ["smelting", 5],
      condition() {
        return global.race["steelen"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 46800;
        },
        Coal() {
          return 1e4;
        }
      },
      effect: loc("tech_oxygen_converter_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    electric_arc_furnace: {
      id: "tech-electric_arc_furnace",
      title: loc("tech_electric_arc_furnace"),
      desc: loc("tech_electric_arc_furnace"),
      category: "mining",
      era: "globalized",
      reqs: { smelting: 5, high_tech: 4 },
      grant: ["smelting", 6],
      condition() {
        return global.race["steelen"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 85500;
        },
        Copper() {
          return 25e3;
        }
      },
      effect: loc("tech_electric_arc_furnace_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    hellfire_furnace: {
      id: "tech-hellfire_furnace",
      title: loc("tech_hellfire_furnace"),
      desc: loc("tech_hellfire_furnace"),
      category: "mining",
      era: "interstellar",
      reqs: { smelting: 6, infernite: 1 },
      grant: ["smelting", 7],
      cost: {
        Knowledge() {
          return 615e3;
        },
        Infernite() {
          return 2e3;
        },
        Soul_Gem() {
          return 2;
        }
      },
      effect: loc("tech_hellfire_furnace_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    infernium_fuel: {
      id: "tech-infernium_fuel",
      title: loc("tech_infernium_fuel"),
      desc: loc("tech_infernium_fuel"),
      category: "mining",
      era: "dimensional",
      reqs: { smelting: 7, hell_ruins: 4 },
      grant: ["smelting", 8],
      cost: {
        Knowledge() {
          return 275e5;
        },
        Coal() {
          return global.race["warlord"] ? 35e6 : 45e6;
        },
        Oil() {
          return 5e5;
        },
        Infernite() {
          return 75e4;
        }
      },
      effect: loc("tech_infernium_fuel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    iridium_smelting_perk: {
      id: "tech-iridium_smelting_perk",
      title: loc("tech_iridium_smelting"),
      desc: loc("tech_iridium_smelting"),
      category: "mining",
      era: "early_space",
      path: ["standard"],
      reqs: { smelting: 6, space: 3 },
      condition() {
        return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 3 ? true : false;
      },
      grant: ["irid_smelting", 1],
      cost: {
        Knowledge() {
          return 35e4;
        },
        Mythril() {
          return 2500;
        }
      },
      effect: loc("tech_iridium_smelting_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    rotary_kiln: {
      id: "tech-rotary_kiln",
      title: loc("tech_rotary_kiln"),
      desc: loc("tech_rotary_kiln"),
      category: "mining",
      era: "industrialized",
      reqs: { smelting: 3, high_tech: 3 },
      grant: ["copper", 1],
      cost: {
        Knowledge() {
          return 57600;
        },
        Coal() {
          return 8e3;
        }
      },
      effect: loc("tech_rotary_kiln_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    metal_working: {
      id: "tech-metal_working",
      title: loc("tech_metal_working"),
      desc: loc("tech_metal_working_desc"),
      category: "mining",
      era: "civilized",
      reqs: { mining: 1 },
      grant: ["mining", 2],
      cost: {
        Knowledge() {
          return 350;
        }
      },
      effect: loc("tech_metal_working_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.mine);
          return true;
        }
        return false;
      }
    },
    iron_mining: {
      id: "tech-iron_mining",
      title: loc("tech_iron_mining"),
      desc: loc("tech_iron_mining_desc"),
      category: "mining",
      era: "civilized",
      reqs: { mining: 2 },
      grant: ["mining", 3],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 500 : 2500;
        }
      },
      effect: loc("tech_iron_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Iron.display = true;
          if (global.city["foundry"] && global.city["foundry"].count > 0) {
            global.resource.Wrought_Iron.display = true;
            loadFoundry();
          }
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    coal_mining: {
      id: "tech-coal_mining",
      title: loc("tech_coal_mining"),
      desc: loc("tech_coal_mining_desc"),
      category: "power_generation",
      era: "civilized",
      reqs: { mining: 3 },
      grant: ["mining", 4],
      cost: {
        Knowledge() {
          return 4320;
        }
      },
      effect: loc("tech_coal_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.coal_mine);
          global.resource.Coal.display = true;
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    storage: {
      id: "tech-storage",
      title: loc("tech_storage"),
      desc: loc("tech_storage_desc"),
      category: "storage",
      era: "civilized",
      reqs: { primitive: 3, currency: 1 },
      grant: ["storage", 1],
      cost: {
        Knowledge() {
          return 20;
        }
      },
      effect: loc("tech_storage_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.shed);
          return true;
        }
        return false;
      }
    },
    reinforced_shed: {
      id: "tech-reinforced_shed",
      title: loc("tech_reinforced_shed"),
      desc: loc("tech_reinforced_shed_desc"),
      category: "storage",
      era: "civilized",
      reqs: { storage: 1, cement: 1, mining: 3 },
      grant: ["storage", 2],
      cost: {
        Money() {
          return 3750;
        },
        Knowledge() {
          return 2550;
        },
        Iron() {
          return 750;
        },
        Cement() {
          return 500;
        }
      },
      effect: loc("tech_reinforced_shed_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    barns: {
      id: "tech-barns",
      title: loc("tech_barns"),
      desc: loc("tech_barns_desc"),
      category: "storage",
      era: "discovery",
      reqs: { storage: 2, smelting: 2, alumina: 1 },
      grant: ["storage", 3],
      cost: {
        Knowledge() {
          return 15750;
        },
        Aluminium() {
          return 3e3;
        },
        Steel() {
          return 3e3;
        }
      },
      effect: loc("tech_barns_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        updateQueueNames(false, ["city-shed"]);
      }
    },
    warehouse: {
      id: "tech-warehouse",
      title: loc("tech_warehouse"),
      desc: loc("tech_warehouse_desc"),
      category: "storage",
      era: "industrialized",
      reqs: { storage: 3, high_tech: 3, smelting: 2 },
      grant: ["storage", 4],
      cost: {
        Knowledge() {
          return 40500;
        },
        Titanium() {
          return 3e3;
        }
      },
      effect: loc("tech_warehouse_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        updateQueueNames(false, ["city-shed"]);
      }
    },
    cameras: {
      id: "tech-cameras",
      title: loc("tech_cameras"),
      desc: loc("tech_cameras_desc"),
      category: "storage",
      era: "globalized",
      reqs: { storage: 4, high_tech: 4 },
      grant: ["storage", 5],
      cost: {
        Money() {
          return 9e4;
        },
        Knowledge() {
          return 65e3;
        }
      },
      effect: loc("tech_cameras_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pocket_dimensions: {
      id: "tech-pocket_dimensions",
      title: loc("tech_pocket_dimensions"),
      desc: loc("tech_pocket_dimensions_desc"),
      category: "storage",
      era: "early_space",
      path: ["standard"],
      reqs: { particles: 1, storage: 5 },
      grant: ["storage", 6],
      cost: {
        Knowledge() {
          return 108e3;
        }
      },
      effect: loc("tech_pocket_dimensions_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ai_logistics: {
      id: "tech-ai_logistics",
      title: loc("tech_ai_logistics"),
      desc: loc("tech_ai_logistics"),
      category: "storage",
      era: "interstellar",
      reqs: { storage: 6, proxima: 2, science: 13 },
      grant: ["storage", 7],
      cost: {
        Knowledge() {
          return 65e4;
        }
      },
      effect: loc("tech_ai_logistics_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    containerization: {
      id: "tech-containerization",
      title: loc("tech_containerization"),
      desc: loc("tech_containerization_desc"),
      category: "storage",
      era: "civilized",
      reqs: { cement: 1, mining: 1, storage: 1, science: 1 },
      grant: ["container", 1],
      cost: {
        Knowledge() {
          return 2700;
        }
      },
      effect: loc("tech_containerization_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.storage_yard);
          return true;
        }
        return false;
      }
    },
    reinforced_crates: {
      id: "tech-reinforced_crates",
      title: loc("tech_reinforced_crates"),
      desc: loc("tech_reinforced_crates"),
      category: "storage",
      era: "civilized",
      reqs: { container: 1, smelting: 2 },
      grant: ["container", 2],
      cost: {
        Knowledge() {
          return 6750;
        },
        Sheet_Metal() {
          return 100;
        }
      },
      effect() {
        if (global.race["smoldering"] || global.race["kindling_kindred"] || global.race["evil"]) {
          let res = loc("resource_Bones_name");
          if (global.race["smoldering"]) {
            res = loc("resource_Chrysotile_name");
          } else if (global.race["kindling_kindred"]) {
            res = loc("resource_Stone_name");
          }
          return loc("tech_reinforced_crates_alt_effect", [res]);
        } else {
          return loc("tech_reinforced_crates_effect");
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    cranes: {
      id: "tech-cranes",
      title: loc("tech_cranes"),
      desc: loc("tech_cranes_desc"),
      category: "storage",
      era: "discovery",
      reqs: { container: 2, high_tech: 2 },
      grant: ["container", 3],
      cost: {
        Knowledge() {
          return 18e3;
        },
        Copper() {
          return 1e3;
        },
        Steel() {
          return 2500;
        }
      },
      effect: loc("tech_cranes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_crates: {
      id: "tech-titanium_crates",
      title() {
        return loc("tech_titanium_crates", [global.resource.Titanium.name]);
      },
      desc() {
        return loc("tech_titanium_crates", [global.resource.Titanium.name]);
      },
      category: "storage",
      era: "globalized",
      reqs: { container: 3, titanium: 1 },
      grant: ["container", 4],
      cost: {
        Knowledge() {
          return 67500;
        },
        Titanium() {
          return 1e3;
        }
      },
      effect() {
        return loc("tech_titanium_crates_effect", [global.resource.Titanium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    mythril_crates: {
      id: "tech-mythril_crates",
      title() {
        return loc("tech_mythril_crates", [global.resource.Mythril.name]);
      },
      desc() {
        return loc("tech_mythril_crates", [global.resource.Mythril.name]);
      },
      category: "storage",
      era: "early_space",
      reqs: { container: 4, space: 3 },
      grant: ["container", 5],
      cost: {
        Knowledge() {
          return 145e3;
        },
        Mythril() {
          return 350;
        }
      },
      effect() {
        return loc("tech_mythril_crates_effect", [global.resource.Mythril.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    infernite_crates: {
      id: "tech-infernite_crates",
      title() {
        return loc("tech_crates", [global.resource.Infernite.name]);
      },
      desc() {
        return loc("tech_infernite_crates_desc", [global.resource.Infernite.name]);
      },
      category: "storage",
      era: "interstellar",
      reqs: { container: 5, infernite: 1 },
      grant: ["container", 6],
      cost: {
        Knowledge() {
          return 575e3;
        },
        Infernite() {
          return 1e3;
        }
      },
      effect() {
        return loc("tech_infernite_crates_effect", [global.resource.Infernite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    graphene_crates: {
      id: "tech-graphene_crates",
      title() {
        return loc("tech_crates", [global.resource.Graphene.name]);
      },
      desc() {
        return loc("tech_crates", [global.resource.Graphene.name]);
      },
      category: "storage",
      era: "interstellar",
      path: ["standard", "truepath"],
      reqs: { container: 6, graphene: 1 },
      grant: ["container", 7],
      cost: {
        Knowledge() {
          return 725e3;
        },
        Graphene() {
          return 75e3;
        }
      },
      effect() {
        return loc("tech_graphene_crates_effect", [global.resource.Graphene.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    bolognium_crates: {
      id: "tech-bolognium_crates",
      title() {
        return loc("tech_crates", [global.resource.Bolognium.name]);
      },
      desc() {
        return loc("tech_crates", [global.resource.Bolognium.name]);
      },
      category: "storage",
      era: "intergalactic",
      reqs: { container: 7, gateway: 3 },
      grant: ["container", 8],
      cost: {
        Knowledge() {
          return 342e4;
        },
        Bolognium() {
          return 9e4;
        }
      },
      effect() {
        return loc("tech_bolognium_crates_effect", [global.resource.Bolognium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elysanite_crates: {
      id: "tech-elysanite_crates",
      title() {
        return loc("tech_crates", [global.resource.Elysanite.name]);
      },
      desc() {
        return loc("tech_crates", [global.resource.Elysanite.name]);
      },
      category: "storage",
      era: "existential",
      reqs: { container: 8, elysium: 6 },
      grant: ["container", 9],
      cost: {
        Knowledge() {
          return 955e5;
        },
        Omniscience() {
          return 20250;
        },
        Asphodel_Powder() {
          return 175e3;
        },
        Elysanite() {
          return 75e6;
        }
      },
      effect() {
        return loc("tech_elysanite_crates_effect", [global.resource.Elysanite.name, global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_containers: {
      id: "tech-steel_containers",
      title() {
        return loc("tech_containers", [global.resource.Steel.name]);
      },
      desc() {
        return loc("tech_steel_containers_desc", [global.resource.Steel.name]);
      },
      category: "storage",
      era: "discovery",
      reqs: { smelting: 2, container: 1 },
      grant: ["steel_container", 1],
      cost: {
        Knowledge() {
          return 9e3;
        },
        Steel() {
          return 250;
        }
      },
      effect() {
        if (global.race["smoldering"] || global.race["kindling_kindred"] || global.race["evil"]) {
          let res = global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? "Chrysotile" : "Stone" : "Plywood";
          return loc("tech_steel_containers_alt_effect", [global.resource[res].name, global.resource.Steel.name]);
        } else {
          return loc("tech_steel_containers_effect", [global.resource.Steel.name]);
        }
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.warehouse);
          return true;
        }
        return false;
      }
    },
    gantry_crane: {
      id: "tech-gantry_crane",
      title: loc("tech_gantry_crane"),
      desc: loc("tech_gantry_crane_desc"),
      category: "storage",
      era: "discovery",
      reqs: { steel_container: 1, high_tech: 2 },
      grant: ["steel_container", 2],
      cost: {
        Knowledge() {
          return 22500;
        },
        Steel() {
          return 5e3;
        }
      },
      effect: loc("tech_gantry_crane_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    alloy_containers: {
      id: "tech-alloy_containers",
      title() {
        return loc("tech_containers", [global.resource.Alloy.name]);
      },
      desc() {
        return loc("tech_alloy_containers_desc", [global.resource.Alloy.name]);
      },
      category: "storage",
      era: "industrialized",
      reqs: { steel_container: 2, storage: 4 },
      grant: ["steel_container", 3],
      cost: {
        Knowledge() {
          return 49500;
        },
        Alloy() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_alloy_containers_effect", [global.resource.Alloy.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    mythril_containers: {
      id: "tech-mythril_containers",
      title() {
        return loc("tech_containers", [global.resource.Mythril.name]);
      },
      desc() {
        return loc("tech_mythril_containers_desc", [global.resource.Mythril.name]);
      },
      category: "storage",
      era: "early_space",
      reqs: { steel_container: 3, space: 3 },
      grant: ["steel_container", 4],
      cost: {
        Knowledge() {
          return 165e3;
        },
        Mythril() {
          return 500;
        }
      },
      effect() {
        return loc("tech_mythril_containers_effect", [global.resource.Mythril.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    adamantite_containers: {
      id: "tech-adamantite_containers",
      title() {
        return loc("tech_containers", [global.resource.Adamantite.name]);
      },
      desc() {
        return loc("tech_adamantite_containers_desc", [global.resource.Adamantite.name]);
      },
      category: "storage",
      era: "interstellar",
      reqs: { steel_container: 4, alpha: 2 },
      grant: ["steel_container", 5],
      cost: {
        Knowledge() {
          return 525e3;
        },
        Adamantite() {
          return 17500;
        }
      },
      effect() {
        return loc("tech_adamantite_containers_effect", [global.resource.Adamantite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    aerogel_containers: {
      id: "tech-aerogel_containers",
      title() {
        return loc("tech_containers", [global.resource.Aerogel.name]);
      },
      desc() {
        return loc("tech_containers", [global.resource.Aerogel.name]);
      },
      category: "storage",
      era: "interstellar",
      reqs: { steel_container: 5, aerogel: 1 },
      grant: ["steel_container", 6],
      cost: {
        Knowledge() {
          return 775e3;
        },
        Aerogel() {
          return 500;
        }
      },
      effect() {
        return loc("tech_aerogel_containers_effect", [global.resource.Aerogel.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    bolognium_containers: {
      id: "tech-bolognium_containers",
      title() {
        return loc("tech_containers", [global.resource.Bolognium.name]);
      },
      desc() {
        return loc("tech_containers", [global.resource.Bolognium.name]);
      },
      category: "storage",
      era: "intergalactic",
      reqs: { steel_container: 6, gateway: 3 },
      grant: ["steel_container", 7],
      cost: {
        Knowledge() {
          return 35e5;
        },
        Bolognium() {
          return 125e3;
        }
      },
      effect() {
        return loc("tech_bolognium_containers_effect", [global.resource.Bolognium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    nanoweave_containers: {
      id: "tech-nanoweave_containers",
      title() {
        return loc("tech_nanoweave_containers", [global.resource.Nanoweave.name]);
      },
      desc() {
        return loc("tech_nanoweave_containers", [global.resource.Nanoweave.name]);
      },
      category: "storage",
      era: "intergalactic",
      reqs: { steel_container: 7, nanoweave: 1 },
      grant: ["steel_container", 8],
      cost: {
        Knowledge() {
          return 9e6;
        },
        Nanoweave() {
          return 5e4;
        }
      },
      effect() {
        return loc("tech_nanoweave_containers_effect", [global.resource.Nanoweave.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elysanite_containers: {
      id: "tech-elysanite_containers",
      title() {
        return loc("tech_containers", [global.resource.Elysanite.name]);
      },
      desc() {
        return loc("tech_containers", [global.resource.Elysanite.name]);
      },
      category: "storage",
      era: "existential",
      reqs: { steel_container: 8, elysium: 6 },
      grant: ["steel_container", 9],
      cost: {
        Knowledge() {
          return 1e8;
        },
        Omniscience() {
          return 22500;
        },
        Elysanite() {
          return 1e8;
        }
      },
      effect() {
        return loc("tech_elysanite_containers_effect", [global.resource.Elysanite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    evil_planning: {
      id: "tech-evil_planning",
      title: loc("tech_urban_planning"),
      desc: loc("tech_urban_planning"),
      category: "queues",
      era: "civilized",
      wiki: global.race["terrifying"] ? true : false,
      reqs: { banking: 2 },
      grant: ["queue", 1],
      trait: ["terrifying"],
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: loc("tech_urban_planning_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.queue.display = true;
          return true;
        }
        return false;
      },
      post() {
        calcQueueMax();
      }
    },
    urban_planning: {
      id: "tech-urban_planning",
      title: loc("tech_urban_planning"),
      desc: loc("tech_urban_planning"),
      category: "queues",
      era: "civilized",
      wiki: global.race["terrifying"] ? false : true,
      reqs: { banking: 2, currency: 2 },
      grant: ["queue", 1],
      not_trait: ["terrifying"],
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: loc("tech_urban_planning_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.queue.display = true;
          if (!global.settings.msgFilters.queue.unlocked) {
            global.settings.msgFilters.queue.unlocked = true;
            global.settings.msgFilters.queue.vis = true;
          }
          return true;
        }
        return false;
      },
      post() {
        calcQueueMax();
      }
    },
    zoning_permits: {
      id: "tech-zoning_permits",
      title: loc("tech_zoning_permits"),
      desc: loc("tech_zoning_permits"),
      category: "queues",
      era: "industrialized",
      reqs: { queue: 1, high_tech: 3 },
      grant: ["queue", 2],
      cost: {
        Knowledge() {
          return 28e3;
        }
      },
      effect() {
        return loc("tech_zoning_permits_effect", [$(this)[0].bQueue()]);
      },
      bQueue() {
        return global.genes?.queue >= 2 ? 4 : 2;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        calcQueueMax();
      }
    },
    urbanization: {
      id: "tech-urbanization",
      title: loc("tech_urbanization"),
      desc: loc("tech_urbanization"),
      category: "queues",
      era: "globalized",
      reqs: { queue: 2, high_tech: 6 },
      grant: ["queue", 3],
      cost: {
        Knowledge() {
          return 95e3;
        }
      },
      effect() {
        return loc("tech_urbanization_effect", [$(this)[0].bQueue()]);
      },
      bQueue() {
        return global.genes?.queue >= 2 ? 6 : 3;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        calcQueueMax();
      }
    },
    assistant: {
      id: "tech-assistant",
      title: loc("tech_assistant"),
      desc: loc("tech_assistant"),
      category: "queues",
      era: "civilized",
      reqs: { queue: 1, science: 4 },
      grant: ["r_queue", 1],
      cost: {
        Knowledge() {
          return 5e3;
        }
      },
      effect: loc("tech_assistant_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.r_queue.display = true;
          if (!global.settings.msgFilters.building_queue.unlocked) {
            global.settings.msgFilters.building_queue.unlocked = true;
            global.settings.msgFilters.building_queue.vis = true;
            global.settings.msgFilters.research_queue.unlocked = true;
            global.settings.msgFilters.research_queue.vis = true;
          }
          return true;
        }
        return false;
      },
      post() {
        calcRQueueMax();
        if (global.settings.tabLoad || global.settings.civTabs === 3) {
          $(`#resQueue`).removeAttr("style");
        }
      }
    },
    government: {
      id: "tech-government",
      title: loc("tech_government"),
      desc: loc("tech_government_desc"),
      category: "government",
      era: "civilized",
      reqs: { currency: 1 },
      grant: ["govern", 1],
      cost: {
        Knowledge() {
          return 750;
        }
      },
      effect: loc("tech_government_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: "#govType" }, "update");
        vBind({ el: "#foreign" }, "update");
        vBind({ el: "#government .govTabs2" }, "update");
        if (global.settings.tabLoad) {
          $(`#government .govTabs2`).removeAttr("style");
        }
      }
    },
    theocracy: {
      id: "tech-theocracy",
      title: loc("govern_theocracy"),
      desc: loc("govern_theocracy"),
      category: "government",
      era: "civilized",
      reqs: { govern: 1, theology: 2 },
      grant: ["gov_theo", 1],
      cost: {
        Knowledge() {
          return 1200;
        }
      },
      effect: loc("tech_theocracy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    republic: {
      id: "tech-republic",
      title: loc("govern_republic"),
      desc: loc("govern_republic"),
      category: "government",
      era: "discovery",
      reqs: { govern: 1 },
      condition() {
        return global.tech["trade"] && global.tech["trade"] >= 2 || global.race["terrifying"] ? true : false;
      },
      grant: ["govern", 2],
      cost: {
        Knowledge() {
          return 17e3;
        }
      },
      effect: loc("tech_republic_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    socialist: {
      id: "tech-socialist",
      title: loc("govern_socialist"),
      desc: loc("govern_socialist"),
      category: "government",
      era: "discovery",
      reqs: { govern: 1 },
      condition() {
        return global.tech["trade"] && global.tech["trade"] >= 2 || global.race["terrifying"] ? true : false;
      },
      grant: ["gov_soc", 1],
      cost: {
        Knowledge() {
          return 17e3;
        }
      },
      effect: loc("tech_socialist_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    corpocracy: {
      id: "tech-corpocracy",
      title: loc("govern_corpocracy"),
      desc: loc("govern_corpocracy"),
      category: "government",
      era: "industrialized",
      reqs: { govern: 2, high_tech: 3 },
      grant: ["gov_corp", 1],
      cost: {
        Knowledge() {
          return 26e3;
        }
      },
      effect: loc("tech_corpocracy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    technocracy: {
      id: "tech-technocracy",
      title: loc("govern_technocracy"),
      desc: loc("govern_technocracy"),
      category: "government",
      era: "industrialized",
      reqs: { govern: 2, high_tech: 3 },
      grant: ["govern", 3],
      cost: {
        Knowledge() {
          return 26e3;
        }
      },
      effect: loc("tech_technocracy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    federation: {
      id: "tech-federation",
      title: loc("govern_federation"),
      desc: loc("govern_federation"),
      category: "government",
      era: "early_space",
      reqs: { govern: 2 },
      condition() {
        return global.tech["unify"] && global.tech["unify"] >= 2 || checkControlling();
      },
      grant: ["gov_fed", 1],
      cost: {
        Knowledge() {
          return 3e4;
        }
      },
      effect: loc("tech_federation_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    magocracy: {
      id: "tech-magocracy",
      title: loc("govern_magocracy"),
      desc: loc("govern_magocracy"),
      category: "government",
      era: "industrialized",
      reqs: { govern: 2, high_tech: 3 },
      condition() {
        return global.race.universe === "magic" ? true : false;
      },
      grant: ["gov_mage", 1],
      cost: {
        Knowledge() {
          return 26e3;
        }
      },
      effect: loc("tech_magocracy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    governor: {
      id: "tech-governor",
      title: loc("tech_governor"),
      desc: loc("tech_governor"),
      category: "government",
      era: "civilized",
      reqs: { govern: 1 },
      condition() {
        return global.genes["governor"] && global.civic.govern.type !== "anarchy" ? true : false;
      },
      grant: ["governor", 1],
      cost: {
        Knowledge() {
          return 1e3;
        }
      },
      effect: loc("tech_governor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showGovernor = true;
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      }
    },
    spy: {
      id: "tech-spy",
      title: loc("tech_spy"),
      desc: loc("tech_spy"),
      category: "spies",
      era: "civilized",
      reqs: { govern: 1 },
      grant: ["spy", 1],
      cost: {
        Knowledge() {
          return 1250;
        }
      },
      effect: loc("tech_spy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: "#foreign" }, "update");
        defineGovernor();
      }
    },
    espionage: {
      id: "tech-espionage",
      title: loc("tech_espionage"),
      desc: loc("tech_espionage"),
      category: "spies",
      era: "discovery",
      reqs: { spy: 1, high_tech: 1 },
      grant: ["spy", 2],
      cost: {
        Knowledge() {
          return 7500;
        }
      },
      effect: loc("tech_espionage_effect"),
      action() {
        if (payCosts($(this)[0])) {
          if (!global.settings.msgFilters.spy.unlocked) {
            global.settings.msgFilters.spy.unlocked = true;
            global.settings.msgFilters.spy.vis = true;
          }
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: "#foreign" }, "update");
        defineGovernor();
      }
    },
    spy_training: {
      id: "tech-spy_training",
      title: loc("tech_spy_training"),
      desc: loc("tech_spy_training"),
      category: "spies",
      era: "discovery",
      reqs: { spy: 2, boot_camp: 1 },
      grant: ["spy", 3],
      cost: {
        Knowledge() {
          return 1e4;
        }
      },
      effect: loc("tech_spy_training_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    spy_gadgets: {
      id: "tech-spy_gadgets",
      title: loc("tech_spy_gadgets"),
      desc: loc("tech_spy_gadgets"),
      category: "spies",
      era: "discovery",
      reqs: { spy: 3, high_tech: 2 },
      grant: ["spy", 4],
      cost: {
        Knowledge() {
          return 15e3;
        }
      },
      effect: loc("tech_spy_gadgets_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    code_breakers: {
      id: "tech-code_breakers",
      title: loc("tech_code_breakers"),
      desc: loc("tech_code_breakers"),
      category: "spies",
      era: "industrialized",
      reqs: { spy: 4, high_tech: 4 },
      grant: ["spy", 5],
      cost: {
        Knowledge() {
          return 55e3;
        }
      },
      effect: loc("tech_code_breakers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    currency: {
      id: "tech-currency",
      title: loc("tech_currency"),
      desc: loc("tech_currency_desc"),
      category: "banking",
      era: "civilized",
      reqs: { housing: 1 },
      grant: ["currency", 1],
      cost: {
        Knowledge() {
          return 22;
        },
        Lumber() {
          return 10;
        }
      },
      effect: loc("tech_currency_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Money.display = true;
          return true;
        }
        return false;
      }
    },
    market: {
      id: "tech-market",
      title: loc("tech_market"),
      desc: loc("tech_market_desc"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 1, govern: 1 },
      not_trait: ["terrifying"],
      grant: ["currency", 2],
      cost: {
        Knowledge() {
          return global.race["banana"] ? 300 : 1800;
        }
      },
      effect: loc("tech_market_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showResources = true;
          global.settings.showMarket = true;
          return true;
        }
        return false;
      },
      post() {
        drawResourceTab("market");
      }
    },
    tax_rates: {
      id: "tech-tax_rates",
      title: loc("tech_tax_rates"),
      desc: loc("tech_tax_rates_desc"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 2, currency: 2, queue: 1 },
      not_trait: ["terrifying"],
      grant: ["currency", 3],
      cost: {
        Knowledge() {
          return 3375;
        }
      },
      effect: loc("tech_tax_rates_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.taxes.display = true;
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      }
    },
    large_trades: {
      id: "tech-large_trades",
      title: loc("tech_large_trades"),
      desc: loc("tech_large_trades_desc"),
      category: "market",
      era: "civilized",
      reqs: { currency: 3 },
      not_trait: ["terrifying"],
      grant: ["currency", 4],
      cost: {
        Knowledge() {
          return 6750;
        }
      },
      effect: loc("tech_large_trades_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        if (global.race["noble"]) {
          global.tech["currency"] = 5;
          drawTech();
        }
      }
    },
    corruption: {
      id: "tech-corruption",
      title: loc("tech_corruption"),
      desc: loc("tech_corruption_desc"),
      category: "banking",
      era: "industrialized",
      reqs: { currency: 4, high_tech: 3 },
      not_trait: ["terrifying", "noble"],
      grant: ["currency", 5],
      cost: {
        Knowledge() {
          return 36e3;
        }
      },
      effect: loc("tech_corruption_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    massive_trades: {
      id: "tech-massive_trades",
      title: loc("tech_massive_trades"),
      desc: loc("tech_massive_trades_desc"),
      category: "market",
      era: "globalized",
      reqs: { currency: 5, high_tech: 4 },
      not_trait: ["terrifying"],
      grant: ["currency", 6],
      cost: {
        Knowledge() {
          return 108e3;
        }
      },
      effect: loc("tech_massive_trades_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    trade: {
      id: "tech-trade",
      title: loc("tech_trade"),
      desc: loc("tech_trade_desc"),
      category: "market",
      era: "civilized",
      reqs: { currency: 2, military: 1 },
      not_trait: ["terrifying"],
      grant: ["trade", 1],
      cost: {
        Knowledge() {
          return global.race["banana"] ? 1200 : 4500;
        }
      },
      effect: loc("tech_trade_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.trade);
          global.city.market.active = true;
          return true;
        }
        return false;
      },
      post() {
        drawResourceTab("market");
      }
    },
    diplomacy: {
      id: "tech-diplomacy",
      title: loc("tech_diplomacy"),
      desc: loc("tech_diplomacy_desc"),
      category: "market",
      era: "discovery",
      reqs: { trade: 1, high_tech: 1 },
      not_trait: ["terrifying"],
      grant: ["trade", 2],
      cost: {
        Knowledge() {
          return 16200;
        }
      },
      effect: loc("tech_diplomacy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    freight: {
      id: "tech-freight",
      title: loc("tech_freight"),
      desc: loc("tech_freight_desc"),
      category: "market",
      era: "industrialized",
      reqs: { trade: 2, high_tech: 3 },
      not_trait: ["terrifying"],
      grant: ["trade", 3],
      cost: {
        Knowledge() {
          return 37800;
        }
      },
      effect: loc("tech_freight_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        if (global.tech["high_tech"] >= 6) {
          arpa("Physics");
        }
      }
    },
    wharf: {
      id: "tech-wharf",
      title: loc("tech_wharf"),
      desc: loc("tech_wharf_desc"),
      category: "market",
      era: "industrialized",
      reqs: { trade: 1, high_tech: 3, oil: 1 },
      not_trait: ["thalassophobia"],
      grant: ["wharf", 1],
      cost: {
        Knowledge() {
          return 44e3;
        }
      },
      effect: loc("tech_wharf_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.wharf);
          return true;
        }
        return false;
      }
    },
    banking: {
      id: "tech-banking",
      title: loc("tech_banking"),
      desc: loc("tech_banking_desc"),
      category: "banking",
      era: "civilized",
      reqs: { currency: 1 },
      grant: ["banking", 1],
      cost: {
        Knowledge() {
          return 90;
        }
      },
      effect: loc("tech_banking_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.bank);
          return true;
        }
        return false;
      }
    },
    investing: {
      id: "tech-investing",
      title: loc("tech_investing"),
      desc: loc("tech_investing_desc"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 1 },
      grant: ["banking", 2],
      cost: {
        Money() {
          return 2500;
        },
        Knowledge() {
          return 900;
        }
      },
      effect: loc("tech_investing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.banker.display = true;
          return true;
        }
        return false;
      }
    },
    vault: {
      id: "tech-vault",
      title: loc("tech_vault"),
      desc: loc("tech_vault_desc"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 2, cement: 1 },
      grant: ["banking", 3],
      cost: {
        Money() {
          return 2e3;
        },
        Knowledge() {
          return 3600;
        },
        Iron() {
          return 500;
        },
        Cement() {
          return 750;
        }
      },
      effect: loc("tech_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    bonds: {
      id: "tech-bonds",
      title: loc("tech_bonds"),
      desc: loc("tech_bonds"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 3 },
      grant: ["banking", 4],
      cost: {
        Money() {
          return 2e4;
        },
        Knowledge() {
          return 5e3;
        }
      },
      effect: loc("tech_bonds_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_vault: {
      id: "tech-steel_vault",
      title: loc("tech_steel_vault"),
      desc: loc("tech_steel_vault"),
      category: "banking",
      era: "civilized",
      reqs: { banking: 4, smelting: 2 },
      grant: ["banking", 5],
      cost: {
        Money() {
          return 3e4;
        },
        Knowledge() {
          return 6750;
        },
        Steel() {
          return 3e3;
        }
      },
      effect: loc("tech_steel_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    eebonds: {
      id: "tech-eebonds",
      title: loc("tech_eebonds"),
      desc: loc("tech_eebonds"),
      category: "banking",
      era: "discovery",
      reqs: { banking: 5, high_tech: 1 },
      grant: ["banking", 6],
      cost: {
        Money() {
          return 75e3;
        },
        Knowledge() {
          return 18e3;
        }
      },
      effect: loc("tech_eebonds_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    swiss_banking: {
      id: "tech-swiss_banking",
      title: swissKnife(),
      desc: swissKnife(),
      category: "banking",
      era: "industrialized",
      reqs: { banking: 6 },
      grant: ["banking", 7],
      cost: {
        Money() {
          return 125e3;
        },
        Knowledge() {
          return 45e3;
        }
      },
      effect: loc("tech_swiss_banking_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    safety_deposit: {
      id: "tech-safety_deposit",
      title: loc("tech_safety_deposit"),
      desc: loc("tech_safety_deposit"),
      category: "banking",
      era: "globalized",
      reqs: { banking: 7, high_tech: 4 },
      grant: ["banking", 8],
      cost: {
        Money() {
          return 25e4;
        },
        Knowledge() {
          return 67500;
        }
      },
      effect: loc("tech_safety_deposit_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    stock_market: {
      id: "tech-stock_market",
      title: loc("tech_stock_market"),
      desc: loc("tech_stock_market"),
      category: "arpa",
      era: "globalized",
      reqs: { banking: 8, high_tech: 6 },
      grant: ["banking", 9],
      cost: {
        Money() {
          return 325e3;
        },
        Knowledge() {
          return 108e3;
        }
      },
      effect: loc("tech_stock_market_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    hedge_funds: {
      id: "tech-hedge_funds",
      title: loc("tech_hedge_funds"),
      desc: loc("tech_hedge_funds"),
      category: "banking",
      era: "early_space",
      reqs: { banking: 9, stock_exchange: 1 },
      grant: ["banking", 10],
      cost: {
        Money() {
          return 375e3;
        },
        Knowledge() {
          return 126e3;
        }
      },
      effect: loc("tech_hedge_funds_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    four_oh_one: {
      id: "tech-four_oh_one",
      title: loc("tech_four_oh_one"),
      desc: loc("tech_four_oh_one"),
      category: "banking",
      era: "early_space",
      reqs: { banking: 10 },
      grant: ["banking", 11],
      cost: {
        Money() {
          return 425e3;
        },
        Knowledge() {
          return 144e3;
        }
      },
      effect: loc("tech_four_oh_one_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_four_oh_one_flair");
      }
    },
    exchange: {
      id: "tech-exchange",
      title: loc("tech_exchange"),
      desc: loc("tech_exchange"),
      category: "banking",
      era: "interstellar",
      reqs: { banking: 11, alpha: 2, graphene: 1 },
      grant: ["banking", 12],
      cost: {
        Money() {
          return 1e6;
        },
        Knowledge() {
          return 675e3;
        }
      },
      effect: loc("tech_exchange_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.exchange);
          return true;
        }
        return false;
      }
    },
    foreign_investment: {
      id: "tech-foreign_investment",
      title: loc("tech_foreign_investment"),
      desc: loc("tech_foreign_investment"),
      category: "banking",
      era: "intergalactic",
      reqs: { banking: 12, xeno: 10 },
      grant: ["banking", 13],
      cost: {
        Money() {
          return 1e8;
        },
        Knowledge() {
          return 8e6;
        }
      },
      effect: loc("tech_foreign_investment_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    crypto_currency: {
      id: "tech-crypto_currency",
      title: loc("tech_crypto_currency"),
      desc: loc("tech_crypto_currency"),
      category: "banking",
      era: "existential",
      reqs: { banking: 13, high_tech: 19 },
      grant: ["banking", 14],
      cost: {
        Money() {
          return 1e10;
        },
        Knowledge() {
          return 1275e5;
        },
        Omniscience() {
          return 38500;
        }
      },
      effect: loc("tech_crypto_currency_effect", [loc("tech_bonds")]),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mythril_vault: {
      id: "tech-mythril_vault",
      title: loc("tech_mythril_vault"),
      desc: loc("tech_mythril_vault"),
      category: "banking",
      era: "early_space",
      reqs: { banking: 5, space: 3 },
      grant: ["vault", 1],
      cost: {
        Money() {
          return 5e5;
        },
        Knowledge() {
          return 15e4;
        },
        Mythril() {
          return 750;
        }
      },
      effect: loc("tech_mythril_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    neutronium_vault: {
      id: "tech-neutronium_vault",
      title: loc("tech_neutronium_vault"),
      desc: loc("tech_neutronium_vault"),
      category: "banking",
      era: "deep_space",
      reqs: { vault: 1, gas_moon: 1 },
      grant: ["vault", 2],
      cost: {
        Money() {
          return 75e4;
        },
        Knowledge() {
          return 28e4;
        },
        Neutronium() {
          return 650;
        }
      },
      effect: loc("tech_neutronium_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_vault: {
      id: "tech-adamantite_vault",
      title: loc("tech_adamantite_vault"),
      desc: loc("tech_adamantite_vault"),
      category: "banking",
      era: "interstellar",
      reqs: { vault: 2, alpha: 2 },
      grant: ["vault", 3],
      cost: {
        Money() {
          return 2e6;
        },
        Knowledge() {
          return 56e4;
        },
        Adamantite() {
          return 2e4;
        }
      },
      effect: loc("tech_adamantite_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    graphene_vault: {
      id: "tech-graphene_vault",
      title: loc("tech_graphene_vault"),
      desc: loc("tech_graphene_vault"),
      category: "banking",
      era: "interstellar",
      path: ["standard", "truepath"],
      reqs: { vault: 3, graphene: 1 },
      grant: ["vault", 4],
      cost: {
        Money() {
          return 3e6;
        },
        Knowledge() {
          return 75e4;
        },
        Graphene() {
          return 4e5;
        }
      },
      effect: loc("tech_graphene_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    home_safe: {
      id: "tech-home_safe",
      title: loc("tech_home_safe"),
      desc: loc("tech_home_safe"),
      category: "banking",
      era: "discovery",
      reqs: { banking: 5 },
      grant: ["home_safe", 1],
      cost: {
        Money() {
          return 42e3;
        },
        Knowledge() {
          return 8e3;
        },
        Steel() {
          return 4500;
        }
      },
      effect: loc("tech_home_safe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fire_proof_safe: {
      id: "tech-fire_proof_safe",
      title: loc("tech_fire_proof_safe"),
      desc: loc("tech_fire_proof_safe"),
      category: "banking",
      era: "early_space",
      reqs: { home_safe: 1, space: 3 },
      grant: ["home_safe", 2],
      cost: {
        Money() {
          return 25e4;
        },
        Knowledge() {
          return 12e4;
        },
        Iridium() {
          return 1e3;
        }
      },
      effect: loc("tech_fire_proof_safe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    tamper_proof_safe: {
      id: "tech-tamper_proof_safe",
      title: loc("tech_tamper_proof_safe"),
      desc: loc("tech_tamper_proof_safe"),
      category: "banking",
      era: "interstellar",
      reqs: { home_safe: 2, infernite: 1 },
      not_trait: ["warlord"],
      grant: ["home_safe", 3],
      cost: {
        Money() {
          return 25e5;
        },
        Knowledge() {
          return 6e5;
        },
        Infernite() {
          return 800;
        }
      },
      effect: loc("tech_tamper_proof_safe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    monument: {
      id: "tech-monument",
      title: loc("tech_monument"),
      desc: loc("tech_monument"),
      category: "arpa",
      era: "globalized",
      reqs: { high_tech: 6 },
      grant: ["monument", 1],
      cost: {
        Knowledge() {
          return 12e4;
        }
      },
      effect: loc("tech_monument_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.arpa["m_type"] = arpa("Monument");
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    tourism: {
      id: "tech-tourism",
      title: loc("tech_tourism"),
      desc: loc("tech_tourism"),
      category: "banking",
      era: "early_space",
      reqs: { monuments: 2, monument: 1 },
      not_trait: ["cataclysm", "lone_survivor"],
      grant: ["monument", 2],
      cost: {
        Knowledge() {
          return 15e4;
        }
      },
      effect: loc("tech_tourism_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.tourist_center);
          return true;
        }
        return false;
      }
    },
    xeno_tourism: {
      id: "tech-xeno_tourism",
      title: loc("tech_xeno_tourism"),
      desc: loc("tech_xeno_tourism"),
      category: "banking",
      era: "intergalactic",
      reqs: { monument: 2, xeno: 10, monuments: 10 },
      not_trait: ["cataclysm"],
      grant: ["monument", 3],
      cost: {
        Knowledge() {
          return 8e6;
        }
      },
      effect: loc("tech_xeno_tourism_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    science: {
      id: "tech-science",
      title: loc("tech_science"),
      desc: loc("tech_science_desc"),
      category: "science",
      era: "civilized",
      reqs: { housing: 1 },
      grant: ["science", 1],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 65);
        }
      },
      effect: loc("tech_science_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.university);
          return true;
        }
        return false;
      }
    },
    library: {
      id: "tech-library",
      title: loc("tech_library"),
      desc: loc("tech_library_desc"),
      category: "science",
      era: "civilized",
      reqs: { science: 1, cement: 1 },
      grant: ["science", 2],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 720);
        }
      },
      effect: loc("tech_library_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.library);
          return true;
        }
        return false;
      }
    },
    thesis: {
      id: "tech-thesis",
      title: loc("tech_thesis"),
      desc: loc("tech_thesis_desc"),
      category: "science",
      era: "civilized",
      reqs: { science: 2 },
      grant: ["science", 3],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 1125);
        }
      },
      effect: loc("tech_thesis_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    research_grant: {
      id: "tech-research_grant",
      title: loc("tech_research_grant"),
      desc: loc("tech_research_grant_desc"),
      category: "science",
      era: "civilized",
      reqs: { science: 3 },
      grant: ["science", 4],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 3240);
        }
      },
      effect: loc("tech_research_grant_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    scientific_journal: {
      id: "tech-scientific_journal",
      title() {
        return global.race.universe === "magic" ? loc("tech_magic_tomes") : loc("tech_scientific_journal");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_magic_tomes_desc") : loc("tech_scientific_journal_desc");
      },
      category: "science",
      era: "industrialized",
      reqs: { science: 4, high_tech: 3 },
      grant: ["science", 5],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 27e3);
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_magic_tomes_effect") : loc("tech_scientific_journal_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adjunct_professor: {
      id: "tech-adjunct_professor",
      title: loc("tech_adjunct_professor"),
      desc: loc("tech_adjunct_professor"),
      category: "science",
      era: "industrialized",
      reqs: { science: 5 },
      grant: ["science", 6],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 36e3);
        }
      },
      effect() {
        return loc("tech_adjunct_professor_effect", [wardenLabel(), global.civic.scientist ? global.civic.scientist.name : jobName("scientist")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    tesla_coil: {
      id: "tech-tesla_coil",
      title: loc("tech_tesla_coil"),
      desc: loc("tech_tesla_coil_desc"),
      category: "science",
      era: "industrialized",
      reqs: { science: 6, high_tech: 3 },
      grant: ["science", 7],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 51750);
        }
      },
      effect() {
        return loc("tech_tesla_coil_effect", [wardenLabel()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    internet: {
      id: "tech-internet",
      title: loc("tech_internet"),
      desc: loc("tech_internet"),
      category: "science",
      era: "globalized",
      reqs: { science: 7, high_tech: 4 },
      grant: ["science", 8],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 61200);
        }
      },
      effect: loc("tech_internet_effect"),
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["toxic"] && global.race.species === "troll") {
            unlockAchieve("godwin");
          }
          return true;
        }
        return false;
      }
    },
    observatory: {
      id: "tech-observatory",
      title: loc("tech_observatory"),
      desc: loc("tech_observatory"),
      category: "science",
      era: "early_space",
      reqs: { science: 8, space: 3, luna: 1 },
      grant: ["science", 9],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 148e3);
        }
      },
      effect: loc("tech_observatory_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_moon.observatory);
          return true;
        }
        return false;
      }
    },
    world_collider: {
      id: "tech-world_collider",
      title: loc("tech_world_collider"),
      desc: loc("tech_world_collider"),
      category: "science",
      era: "deep_space",
      path: ["standard"],
      reqs: { science: 9, elerium: 2 },
      grant: ["science", 10],
      not_trait: ["warlord"],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 35e4);
        }
      },
      effect() {
        return loc("tech_world_collider_effect", [planetName().dwarf]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_dwarf.world_collider);
          initStruct(actions.space.spc_dwarf.world_controller);
          return true;
        }
        return false;
      },
      flair: `<div>${loc("tech_world_collider_flair1")}</div><div>${loc("tech_world_collider_flair2")}</div>`
    },
    laboratory: {
      id: "tech-laboratory",
      title() {
        return global.race.universe === "magic" ? loc("tech_sanctum") : loc("tech_laboratory");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_sanctum") : loc("tech_laboratory_desc");
      },
      category: "science",
      era: "interstellar",
      reqs: { science: 11, alpha: 2 },
      grant: ["science", 12],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 5e5);
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_sanctum_effect") : loc("tech_laboratory_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.laboratory);
          return true;
        }
        return false;
      },
      flair() {
        return global.race.universe === "magic" ? loc("tech_sanctum_flair") : loc("tech_laboratory_flair");
      }
    },
    virtual_assistant: {
      id: "tech-virtual_assistant",
      title: loc("tech_virtual_assistant"),
      desc: loc("tech_virtual_assistant"),
      category: "science",
      era: "interstellar",
      reqs: { science: 12, high_tech: 12 },
      grant: ["science", 13],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 635e3);
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_virtual_assistant_magic_effect") : loc("tech_virtual_assistant_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dimensional_readings: {
      id: "tech-dimensional_readings",
      title: loc("tech_dimensional_readings"),
      desc: loc("tech_dimensional_readings"),
      category: "science",
      era: "interstellar",
      reqs: { science: 13, infernite: 2 },
      grant: ["science", 14],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 75e4);
        }
      },
      effect() {
        return loc("tech_dimensional_readings_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    quantum_entanglement: {
      id: "tech-quantum_entanglement",
      title: loc("tech_quantum_entanglement"),
      desc: loc("tech_quantum_entanglement"),
      category: "science",
      era: "interstellar",
      reqs: { science: 14, neutron: 1 },
      grant: ["science", 15],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 85e4);
        },
        Neutronium() {
          return 7500;
        },
        Soul_Gem() {
          return 2;
        }
      },
      effect() {
        return loc("tech_quantum_entanglement_effect", [2, global.race.universe === "magic" ? loc("tech_sanctum") : loc("interstellar_laboratory_title"), wardenLabel()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    expedition: {
      id: "tech-expedition",
      title() {
        return global.race.universe === "magic" ? loc("tech_expedition_wiz") : loc("tech_expedition");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_expedition_wiz") : loc("tech_expedition");
      },
      category: "science",
      era: "intergalactic",
      reqs: { science: 15, xeno: 4 },
      grant: ["science", 16],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 535e4);
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_expedition_wiz_effect") : loc("tech_expedition_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    subspace_sensors: {
      id: "tech-subspace_sensors",
      title: loc("tech_subspace_sensors"),
      desc: loc("tech_subspace_sensors"),
      category: "science",
      era: "intergalactic",
      reqs: { science: 16, high_tech: 16 },
      grant: ["science", 17],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 6e6);
        }
      },
      effect() {
        return loc("tech_subspace_sensors_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    alien_database: {
      id: "tech-alien_database",
      title: loc("tech_alien_database"),
      desc: loc("tech_alien_database"),
      category: "progress",
      era: "intergalactic",
      reqs: { science: 17, conflict: 5 },
      grant: ["science", 18],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 825e4);
        }
      },
      effect() {
        return loc("tech_alien_database_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    orichalcum_capacitor: {
      id: "tech-orichalcum_capacitor",
      title: loc("tech_orichalcum_capacitor"),
      desc: loc("tech_orichalcum_capacitor"),
      category: "science",
      era: "intergalactic",
      reqs: { science: 18, high_tech: 17 },
      grant: ["science", 19],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 125e5);
        },
        Orichalcum() {
          return 25e4;
        }
      },
      effect() {
        return loc("tech_orichalcum_capacitor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_biotech: {
      id: "tech-advanced_biotech",
      title: loc("tech_advanced_biotech"),
      desc: loc("tech_advanced_biotech"),
      category: "science",
      era: "dimensional",
      reqs: { science: 19, high_tech: 18 },
      grant: ["science", 20],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 255e5);
        }
      },
      effect() {
        return loc("tech_advanced_biotech_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    codex_infinium: {
      id: "tech-codex_infinium",
      title: loc("tech_codex_infinium"),
      desc: loc("tech_codex_infinium"),
      category: "science",
      era: "dimensional",
      reqs: { science: 20, sphinx_bribe: 1 },
      grant: ["science", 21],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 401e5);
        },
        Codex() {
          return 1;
        }
      },
      effect() {
        return loc("tech_codex_infinium_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Codex.display = false;
          return true;
        }
        return false;
      }
    },
    spirit_box: {
      id: "tech-spirit_box",
      title: loc("tech_spirit_box"),
      desc: loc("tech_spirit_box"),
      category: "science",
      era: "existential",
      reqs: { science: 21, asphodel: 3 },
      grant: ["science", 22],
      cost: {
        Knowledge() {
          return 6275e4;
        },
        Asphodel_Powder() {
          return 1e4;
        }
      },
      effect() {
        return loc("tech_spirit_box_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Omniscience.display = true;
          return true;
        }
        return false;
      }
    },
    spirit_researcher: {
      id: "tech-spirit_researcher",
      title: loc("tech_spirit_researcher"),
      desc: loc("tech_spirit_researcher"),
      category: "science",
      era: "existential",
      reqs: { science: 22, asphodel: 8 },
      grant: ["science", 23],
      cost: {
        Knowledge() {
          return 8e7;
        },
        Omniscience() {
          return 12500;
        }
      },
      effect() {
        return loc("tech_spirit_researcher_effect", [global.civic.scientist ? global.civic.scientist.name : jobName("scientist")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dimensional_tap: {
      id: "tech-dimensional_tap",
      title: loc("tech_dimensional_tap"),
      desc: loc("tech_dimensional_tap"),
      category: "science",
      era: "existential",
      reqs: { science: 23, ascension: 7 },
      grant: ["science", 24],
      cost: {
        Knowledge() {
          return 875e5;
        },
        Omniscience() {
          return 13333;
        }
      },
      effect() {
        return loc("tech_dimensional_tap_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.eden.encampment.asc = true;
          return true;
        }
        return false;
      },
      flair() {
        return loc(`tech_dimensional_tap_flair`);
      }
    },
    devilish_dish: {
      id: "tech-devilish_dish",
      title: loc("tech_devilish_dish"),
      desc: loc("tech_devilish_dish"),
      category: "fasting",
      era: "dimensional",
      reqs: { hell_ruins: 4 },
      trait: ["fasting"],
      grant: ["dish", 1],
      cost: {
        Knowledge() {
          return 29e6;
        }
      },
      effect() {
        return loc("tech_devilish_dish_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.tech["hell_lake"] >= 3) {
            messageQueue(loc("tech_lake_analysis_fasting"), "info", false, ["progress", "hell"]);
          }
          return true;
        }
        return false;
      }
    },
    hell_oven: {
      id: "tech-hell_oven",
      title: loc("tech_hell_oven"),
      desc: loc("tech_hell_oven"),
      category: "fasting",
      era: "dimensional",
      reqs: { hell_lake: 3, dish: 1 },
      trait: ["fasting"],
      grant: ["dish", 2],
      cost: {
        Knowledge() {
          return 32e6;
        }
      },
      effect() {
        return loc("tech_hell_oven_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_lake.oven);
          return true;
        }
        return false;
      }
    },
    preparation_methods: {
      id: "tech-preparation_methods",
      title: loc("tech_preparation_methods"),
      desc: loc("tech_preparation_methods"),
      category: "fasting",
      era: "dimensional",
      reqs: { science: 21, dish: 4 },
      trait: ["fasting"],
      grant: ["dish", 5],
      cost: {
        Knowledge() {
          return 62e6;
        }
      },
      effect() {
        return loc("tech_preparation_methods_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_lake.dish_soul_steeper);
          initStruct(actions.portal.prtl_lake.dish_life_infuser);
          return true;
        }
        return false;
      }
    },
    final_ingredient: {
      id: "tech-final_ingredient",
      title: loc("tech_final_ingredient"),
      desc: loc("tech_final_ingredient"),
      category: "fasting",
      era: "dimensional",
      reqs: { dish_reset: 1 },
      grant: ["dish_reset", 2],
      cost: {
        Bolognium() {
          return 5e7;
        },
        Demonic_Essence() {
          return 1;
        }
      },
      effect() {
        return `${loc("tech_final_ingredient_effect")}
            ${global.race["witch_hunter"] ? `<div class="has-text-warning">${loc("dish_witch_hunter_interaction", [loc("tech_outerplane_summon"), loc("portal_devilish_dish_title")])}</div>` : ""}
            <div class="has-text-special">${loc("tech_demonic_infusion_effect2", [calcPrestige("descend").artifact])}</div>`;
      },
      action() {
        if (checkAffordable($(this)[0])) {
          descension();
        }
        return false;
      }
    },
    bioscience: {
      id: "tech-bioscience",
      title: loc("tech_bioscience"),
      desc: loc("tech_bioscience_desc"),
      category: "science",
      era: "globalized",
      reqs: { science: 8 },
      grant: ["genetics", 1],
      cost: {
        Knowledge() {
          return 67500;
        }
      },
      effect: loc("tech_bioscience_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.biolab);
          return true;
        }
        return false;
      }
    },
    genetics: {
      id: "tech-genetics",
      title: loc("tech_genetics"),
      desc: loc("tech_genetics"),
      category: "arpa",
      era: "globalized",
      reqs: { genetics: 1, high_tech: 6 },
      grant: ["genetics", 2],
      cost: {
        Knowledge() {
          return 108e3;
        }
      },
      effect: loc("tech_genetics_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.arpa.genetics = true;
          if (!global.arpa["sequence"]) {
            global.arpa["sequence"] = {
              max: 5e4,
              progress: 0,
              time: 5e4,
              on: global.race["cataclysm"] || global.race["orbit_decayed"] ? false : true,
              boost: false,
              auto: false,
              labs: 0
            };
          }
          return true;
        }
        return false;
      },
      post() {
        arpa("Genetics");
      }
    },
    crispr: {
      id: "tech-crispr",
      title: loc("tech_crispr"),
      desc: loc("tech_crispr"),
      category: "genes",
      era: "globalized",
      reqs: { genetics: 3 },
      grant: ["genetics", 4],
      cost: {
        Knowledge() {
          return 125e3;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_crispr_effect_artifical") : loc("tech_crispr_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.arpa.crispr = true;
          global.settings.arpa.arpaTabs = 2;
          return true;
        }
        return false;
      },
      post() {
        arpa("Genetics");
        arpa("Crispr");
      }
    },
    shotgun_sequencing: {
      id: "tech-shotgun_sequencing",
      title: loc("tech_shotgun_sequencing"),
      desc() {
        return global.race["artifical"] ? loc("tech_shotgun_sequencing_desc_artifical") : loc("tech_shotgun_sequencing_desc");
      },
      category: "genes",
      era: "early_space",
      reqs: { genetics: 4 },
      grant: ["genetics", 5],
      cost: {
        Knowledge() {
          return 165e3;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_shotgun_sequencing_effect_artifical") : loc("tech_shotgun_sequencing_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.arpa.sequence.boost = true;
          return true;
        }
        return false;
      },
      post() {
        arpa("Genetics");
      }
    },
    de_novo_sequencing: {
      id: "tech-de_novo_sequencing",
      title: loc("tech_de_novo_sequencing"),
      desc: loc("tech_de_novo_sequencing"),
      category: "genes",
      era: "early_space",
      reqs: { genetics: 5 },
      grant: ["genetics", 6],
      cost: {
        Knowledge() {
          return 22e4;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_de_novo_sequencing_effect_artifical") : loc("tech_de_novo_sequencing_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Genes.display = true;
          return true;
        }
        return false;
      },
      post() {
        arpa("Genetics");
      }
    },
    dna_sequencer: {
      id: "tech-dna_sequencer",
      title() {
        return global.race["artifical"] ? loc("tech_code_sequencer") : loc("tech_dna_sequencer");
      },
      desc() {
        return global.race["artifical"] ? loc("tech_code_sequencer") : loc("tech_dna_sequencer");
      },
      category: "genes",
      era: "deep_space",
      reqs: { genetics: 6 },
      grant: ["genetics", 7],
      cost: {
        Knowledge() {
          return 3e5;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_code_sequencer_effect") : loc("tech_dna_sequencer_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.arpa.sequence.auto = true;
          return true;
        }
        return false;
      },
      post() {
        arpa("Genetics");
      }
    },
    rapid_sequencing: {
      id: "tech-rapid_sequencing",
      title() {
        return global.race["artifical"] ? loc("tech_agile_development") : loc("tech_rapid_sequencing");
      },
      desc() {
        return global.race["artifical"] ? loc("tech_agile_development") : loc("tech_rapid_sequencing");
      },
      category: "genes",
      era: "interstellar",
      path: ["standard", "truepath"],
      reqs: { genetics: 7, high_tech: 12 },
      grant: ["genetics", 8],
      cost: {
        Knowledge() {
          return 8e5;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_agile_development_effect") : loc("tech_rapid_sequencing_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mad_science: {
      id: "tech-mad_science",
      title() {
        return global.race.universe === "magic" ? loc("tech_sages") : loc("tech_mad_science");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_sages") : loc("tech_mad_science");
      },
      category: "science",
      era: "discovery",
      reqs: { science: 2, smelting: 2 },
      grant: ["high_tech", 1],
      cost: {
        Money() {
          return 1e4;
        },
        Mana() {
          return global.race.universe === "magic" ? 50 : 0;
        },
        Knowledge() {
          return traitCostMod("stubborn", 6750);
        },
        Crystal() {
          return global.race.universe === "magic" ? 1e3 : 0;
        },
        Aluminium() {
          return 750;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_sages_effect") : loc("tech_mad_science_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["terrifying"]) {
            global.civic["taxes"].display = true;
          }
          initStruct(actions.city.wardenclyffe);
          return true;
        }
        return false;
      },
      post() {
        if (global.race["terrifying"]) {
          defineGovernor();
        }
      }
    },
    electricity: {
      id: "tech-electricity",
      title: loc("tech_electricity"),
      desc: loc("tech_electricity"),
      category: "power_generation",
      era: "discovery",
      reqs: { high_tech: 1 },
      grant: ["high_tech", 2],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 13500);
        },
        Copper() {
          return 1e3;
        }
      },
      effect: loc("tech_electricity_effect"),
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_electricity_msg"), "info", false, ["progress"]);
          global.city["power"] = 0;
          global.city["powered"] = true;
          initStruct(actions.city.coal_power);
          global.settings.showPowerGrid = true;
          setPowerGrid();
          return true;
        }
        return false;
      }
    },
    matter_replicator: {
      id: "tech-matter_replicator",
      title() {
        return global.race.universe === "antimatter" && !global.race["amexplode"] ? loc("tech_antireplicator") : loc("tech_replicator");
      },
      desc() {
        return global.race.universe === "antimatter" && !global.race["amexplode"] ? loc("tech_antireplicator") : loc("tech_replicator");
      },
      category: "special",
      era: "discovery",
      reqs: { high_tech: 2 },
      condition() {
        return global.stats.achieve["adam_eve"] && global.stats.achieve.adam_eve.l >= 5 ? true : false;
      },
      not_trait: ["lone_survivor"],
      grant: ["replicator", 1],
      cost: {
        Knowledge() {
          return 25e3;
        }
      },
      effect() {
        return global.race.universe === "antimatter" && !global.race["amexplode"] ? loc("tech_antireplicator_effect_alt") : loc("tech_replicator_effect_alt");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race.universe === "antimatter" && global.race["amexplode"]) {
            unlockFeat("annihilation");
            save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
            $("body").addClass("nuke");
            let nuke = $('<div class="nuke"></div>');
            $("body").append(nuke);
            setTimeout(function() {
              nuke.addClass("burn");
            }, 500);
            setTimeout(function() {
              nuke.addClass("b");
            }, 600);
            setTimeout(function() {
              window.soft_reset();
            }, 4e3);
          } else {
            global.race["replicator"] = { res: "Stone", pow: 1 };
          }
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        defineGovernor();
      }
    },
    industrialization: {
      id: "tech-industrialization",
      title: loc("tech_industrialization"),
      desc: loc("tech_industrialization"),
      category: "progress",
      era: "industrialized",
      reqs: { high_tech: 2, cement: 2, steel_container: 1 },
      grant: ["high_tech", 3],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 25200);
        }
      },
      effect: loc("tech_industrialization_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Titanium.display = true;
          initStruct(actions.city.factory);
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    electronics: {
      id: "tech-electronics",
      title: loc("tech_electronics"),
      desc: loc("tech_electronics"),
      category: "progress",
      era: "industrialized",
      reqs: { high_tech: 3, titanium: 1 },
      grant: ["high_tech", 4],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 5e4);
        }
      },
      effect: loc("tech_electronics_effect"),
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["terrifying"]) {
            global.tech["gambling"] = 1;
            initStruct(actions.city.casino);
            initStruct(actions.space.spc_hell.spc_casino);
          }
          return true;
        }
        return false;
      }
    },
    fission: {
      id: "tech-fission",
      title: loc("tech_fission"),
      desc: loc("tech_fission"),
      category: "progress",
      era: "globalized",
      reqs: { high_tech: 4, uranium: 1 },
      grant: ["high_tech", 5],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 77400);
        },
        Uranium() {
          return 10;
        }
      },
      effect: loc("tech_fission_effect"),
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_fission_msg"), "info", false, ["progress"]);
          initStruct(actions.city.fission_power);
          return true;
        }
        return false;
      }
    },
    arpa: {
      id: "tech-arpa",
      title: loc("tech_arpa"),
      desc: loc("tech_arpa_desc"),
      category: "arpa",
      era: "globalized",
      reqs: { high_tech: 5 },
      grant: ["high_tech", 6],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 9e4);
        }
      },
      effect: loc("tech_arpa_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showGenetics = true;
          global.settings.arpa.physics = true;
          if (global.race["truepath"] && !global.tech["unify"]) {
            global.tech["unify"] = 1;
          }
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    rocketry: {
      id: "tech-rocketry",
      title: loc("tech_rocketry"),
      desc: loc("tech_rocketry"),
      category: "arpa",
      era: "globalized",
      reqs: { high_tech: 6 },
      grant: ["high_tech", 7],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 112500);
        },
        Oil() {
          return global.city.ptrait.includes("dense") ? 8e3 : 6800;
        }
      },
      effect: loc("tech_rocketry_effect"),
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["truepath"] && !global.tech["rival"]) {
            global.tech["rival"] = 1;
            messageQueue(loc(`civics_rival_unlocked`, [govTitle(3)]), "info", false, ["progress", "combat"]);
          }
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    robotics: {
      id: "tech-robotics",
      title: loc("tech_robotics"),
      desc: loc("tech_robotics"),
      category: "progress",
      era: "globalized",
      reqs: { high_tech: 7 },
      grant: ["high_tech", 8],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 125e3);
        }
      },
      effect: loc("tech_robotics_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    lasers: {
      id: "tech-lasers",
      title: loc("tech_lasers"),
      desc: loc("tech_lasers_desc"),
      category: "progress",
      era: "deep_space",
      reqs: { high_tech: 8, space: 3, supercollider: 1, elerium: 1 },
      grant: ["high_tech", 9],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 28e4);
        },
        Elerium() {
          return 100;
        }
      },
      effect: loc("tech_lasers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["cataclysm"]) {
            unlockAchieve("iron_will", false, 3);
          }
          return true;
        }
        return false;
      }
    },
    artifical_intelligence: {
      id: "tech-artifical_intelligence",
      title: loc("tech_artificial_intelligence"),
      desc: loc("tech_artificial_intelligence"),
      category: "progress",
      era: "deep_space",
      reqs: { high_tech: 9 },
      grant: ["high_tech", 10],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 325e3);
        }
      },
      effect: loc("tech_artificial_intelligence_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_artificial_intelligence_flair");
      }
    },
    quantum_computing: {
      id: "tech-quantum_computing",
      title: loc("tech_quantum_computing"),
      desc: loc("tech_quantum_computing"),
      category: "progress",
      era: "deep_space",
      reqs: { high_tech: 10, nano: 1 },
      grant: ["high_tech", 11],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 435e3);
        },
        Elerium() {
          return 250;
        },
        Nano_Tube() {
          return 1e5;
        }
      },
      effect: loc("tech_quantum_computing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_quantum_computing_flair");
      }
    },
    virtual_reality: {
      id: "tech-virtual_reality",
      title: loc("tech_virtual_reality"),
      desc: loc("tech_virtual_reality"),
      category: "progress",
      era: "interstellar",
      reqs: { high_tech: 11, alpha: 2, infernite: 1, stanene: 1 },
      grant: ["high_tech", 12],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 6e5);
        },
        Stanene() {
          return 1250;
        },
        Soul_Gem() {
          return 1;
        }
      },
      effect: loc("tech_virtual_reality_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_virtual_reality_flair");
      }
    },
    plasma: {
      id: "tech-plasma",
      title: loc("tech_plasma"),
      desc: loc("tech_plasma"),
      category: "progress",
      era: "interstellar",
      path: ["standard", "truepath"],
      reqs: { high_tech: 12 },
      grant: ["high_tech", 13],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 755e3);
        },
        Infernite() {
          return global.race["truepath"] ? 0 : 1e3;
        },
        Stanene() {
          return global.race["truepath"] ? 1e6 : 25e4;
        }
      },
      effect: loc("tech_plasma_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    shields: {
      id: "tech-shields",
      title: loc("tech_shields"),
      desc: loc("tech_shields"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { high_tech: 13 },
      grant: ["high_tech", 14],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 85e4);
        }
      },
      effect: loc("tech_shields_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.neutron = true;
          global.settings.space.blackhole = true;
          return true;
        }
        return false;
      }
    },
    ai_core: {
      id: "tech-ai_core",
      title: loc("tech_ai_core"),
      desc: loc("tech_ai_core"),
      category: "ai_core",
      era: "interstellar",
      reqs: { high_tech: 14, science: 15, blackhole: 3 },
      grant: ["high_tech", 15],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 15e5);
        }
      },
      effect: loc("tech_ai_core_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_neutron.citadel);
          return true;
        }
        return false;
      }
    },
    metaphysics: {
      id: "tech-metaphysics",
      title: loc("tech_metaphysics"),
      desc: loc("tech_metaphysics"),
      category: "progress",
      era: "intergalactic",
      reqs: { high_tech: 15, xeno: 5 },
      grant: ["high_tech", 16],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 5e6);
        },
        Vitreloy() {
          return 1e4;
        },
        Soul_Gem() {
          return 10;
        }
      },
      effect() {
        return loc("tech_metaphysics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    orichalcum_analysis: {
      id: "tech-orichalcum_analysis",
      title: loc("tech_orichalcum_analysis"),
      desc: loc("tech_orichalcum_analysis"),
      category: "progress",
      era: "intergalactic",
      reqs: { high_tech: 16, chthonian: 3 },
      grant: ["high_tech", 17],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 122e5);
        },
        Orichalcum() {
          return 1e5;
        }
      },
      effect() {
        return loc("tech_orichalcum_analysis_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_orichalcum_analysis_result"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    cybernetics: {
      id: "tech-cybernetics",
      title: loc("tech_cybernetics"),
      desc: loc("tech_cybernetics"),
      category: "progress",
      era: "dimensional",
      reqs: { high_tech: 17, hell_ruins: 4 },
      grant: ["high_tech", 18],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 25e6);
        },
        Adamantite() {
          return 125e5;
        },
        Stanene() {
          return 5e7;
        },
        Vitreloy() {
          return 1e7;
        }
      },
      effect() {
        return loc("tech_cybernetics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    divinity: {
      id: "tech-divinity",
      title: loc("tech_divinity"),
      desc: loc("tech_divinity"),
      category: "progress",
      era: "existential",
      reqs: { high_tech: 18, elysium: 15, isle: 2 },
      grant: ["high_tech", 19],
      cost: {
        Knowledge() {
          return traitCostMod("stubborn", 12e7);
        },
        Omniscience() {
          return 34e3;
        }
      },
      effect() {
        return loc("tech_divinity_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    blood_pact: {
      id: "tech-blood_pact",
      title: loc("tech_blood_pact"),
      desc: loc("tech_blood_pact"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { high_tech: 18, b_stone: 1 },
      grant: ["b_stone", 2],
      cost: {
        Knowledge() {
          return 52e6;
        },
        Blood_Stone() {
          return 1;
        }
      },
      effect() {
        return loc("tech_blood_pact_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.arpa.blood = true;
          arpa("Crispr");
          return true;
        }
        return false;
      },
      post() {
        arpa("Blood");
      }
    },
    purify: {
      id: "tech-purify",
      title() {
        return global.race["warlord"] ? loc("tech_potent_miasma") : loc("tech_purify");
      },
      desc() {
        return global.race["warlord"] ? loc("tech_potent_miasma") : loc("tech_purify");
      },
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 3, b_stone: 2 },
      grant: ["b_stone", 3],
      cost: {
        Knowledge() {
          return 525e5;
        },
        Blood_Stone() {
          return 1;
        }
      },
      effect() {
        return global.race["warlord"] ? loc("tech_potent_miasma_effect") : loc("tech_purify_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    waygate: {
      id: "tech-waygate",
      title: loc("tech_waygate"),
      desc: loc("tech_waygate"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 10, b_stone: 2 },
      grant: ["waygate", 1],
      cost: {
        Knowledge() {
          return 55e6;
        }
      },
      effect() {
        return loc("tech_waygate_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_spire.waygate);
          return true;
        }
        return false;
      }
    },
    demonic_infusion: {
      id: "tech-demonic_infusion",
      title: loc("tech_demonic_infusion"),
      desc: loc("tech_demonic_infusion"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 10, b_stone: 2, waygate: 3 },
      condition() {
        return global.resource.Demonic_Essence.amount >= 1 ? true : false;
      },
      grant: ["waygate", 4],
      not_trait: ["witch_hunter", "fasting", "warlord"],
      cost: {
        Species() {
          return popCost(1e3);
        },
        Knowledge() {
          return 55e6;
        },
        Demonic_Essence() {
          return 1;
        }
      },
      effect() {
        return `<div>${loc("tech_demonic_infusion_effect")}</div><div class="has-text-special">${loc("tech_demonic_infusion_effect2", [calcPrestige("descend").artifact])}</div>`;
      },
      action() {
        if (checkAffordable($(this)[0])) {
          descension();
        }
        return false;
      }
    },
    purify_essence: {
      id: "tech-purify_essence",
      title() {
        return loc("tech_purify_essence");
      },
      desc() {
        return loc("tech_purify_essence");
      },
      category: "hell_dimension",
      era: "existential",
      reqs: { b_stone: 2, waygate: 3, edenic: 1 },
      condition() {
        return global.resource.Demonic_Essence.amount >= 1 ? true : false;
      },
      grant: ["edenic", 2],
      not_trait: ["witch_hunter", "fasting"],
      cost: {
        Knowledge() {
          return 6e7;
        },
        Artifact() {
          return 1;
        },
        Demonic_Essence() {
          return 1;
        }
      },
      effect() {
        return global.race["warlord"] ? `<div>${loc("tech_purify_essence_effect")}</div>` : `<div>${loc("tech_purify_essence_effect")}</div><div class="has-text-special">${loc("tech_purify_essence_warn")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Demonic_Essence.display = false;
          global.resource.Demonic_Essence.amount = 0;
          global.resource.Blessed_Essence.display = true;
          global.resource.Blessed_Essence.amount = 1;
          return true;
        }
        return false;
      }
    },
    gate_key: {
      id: "tech-gate_key",
      title: loc("tech_gate_key"),
      desc: loc("tech_gate_key"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_gate: 1 },
      grant: ["hell_gate", 2],
      cost: {
        Knowledge() {
          return 3e7;
        }
      },
      effect() {
        return loc("tech_gate_key_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_gate.west_tower);
          initStruct(actions.portal.prtl_gate.east_tower);
          return true;
        }
        return false;
      }
    },
    gate_turret: {
      id: "tech-gate_turret",
      title: loc("tech_gate_turret"),
      desc: loc("tech_gate_turret"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_gate: 2 },
      grant: ["hell_gate", 3],
      cost: {
        Knowledge() {
          return 32e6;
        }
      },
      effect() {
        return loc("tech_gate_turret_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_gate.gate_turret);
          return true;
        }
        return false;
      }
    },
    infernite_mine: {
      id: "tech-infernite_mine",
      title: loc("tech_infernite_mine"),
      desc: loc("tech_infernite_mine"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_gate: 3 },
      grant: ["hell_gate", 4],
      cost: {
        Knowledge() {
          return 325e5;
        }
      },
      effect() {
        return loc("tech_infernite_mine_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_gate.infernite_mine);
          return true;
        }
        return false;
      }
    },
    study_corrupt_gem: {
      id: "tech-study_corrupt_gem",
      title: loc("tech_study_corrupt_gem"),
      desc: loc("tech_study_corrupt_gem"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { high_tech: 16, corrupt: 1 },
      grant: ["corrupt", 2],
      trait: ["witch_hunter"],
      cost: {
        Mana() {
          return global.race["no_plasmid"] ? 1e4 : 3e4;
        },
        Knowledge() {
          return 185e5;
        },
        Corrupt_Gem() {
          return 1;
        }
      },
      effect() {
        return loc("tech_study_corrupt_gem_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_study_corrupt_gem_result"), "info", false, ["progress", "hell"]);
          global.resource.Corrupt_Gem.display = false;
          return true;
        }
        return false;
      }
    },
    soul_binding: {
      id: "tech-soul_binding",
      title: loc("tech_soul_binding"),
      desc: loc("tech_soul_binding"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { corrupt: 2, science: 19 },
      grant: ["forbidden", 1],
      trait: ["witch_hunter"],
      cost: {
        Knowledge() {
          return 19e6;
        }
      },
      effect() {
        return loc("tech_soul_binding_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    soul_capacitor: {
      id: "tech-soul_capacitor",
      title: loc("tech_soul_capacitor"),
      desc: loc("tech_soul_capacitor"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { forbidden: 1 },
      grant: ["forbidden", 2],
      trait: ["witch_hunter"],
      cost: {
        Knowledge() {
          return 195e5;
        }
      },
      effect() {
        return loc("tech_soul_capacitor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.soul_capacitor);
          return true;
        }
        return false;
      }
    },
    absorption_chamber: {
      id: "tech-absorption_chamber",
      title: loc("tech_absorption_chamber"),
      desc: loc("tech_absorption_chamber"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { forbidden: 2 },
      grant: ["forbidden", 3],
      trait: ["witch_hunter"],
      cost: {
        Knowledge() {
          return 2e7;
        }
      },
      effect() {
        return loc("tech_absorption_chamber_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.absorption_chamber);
          return true;
        }
        return false;
      }
    },
    corrupt_gem_analysis: {
      id: "tech-corrupt_gem_analysis",
      title: loc("tech_corrupt_gem_analysis"),
      desc: loc("tech_corrupt_gem_analysis"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { high_tech: 16, corrupt: 1 },
      grant: ["corrupt", 2],
      not_trait: ["witch_hunter"],
      cost: {
        Species() {
          return 1;
        },
        // Not scaled intentionally
        Knowledge() {
          return 22e6;
        },
        Corrupt_Gem() {
          return 1;
        }
      },
      effect() {
        return loc("tech_corrupt_gem_analysis_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_corrupt_gem_analysis_result"), "info", false, ["progress", "hell"]);
          global.resource.Corrupt_Gem.display = false;
          return true;
        }
        return false;
      }
    },
    hell_search: {
      id: "tech-hell_search",
      title: loc("tech_hell_search"),
      desc: loc("tech_hell_search"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { corrupt: 2 },
      grant: ["hell_ruins", 1],
      cost: {
        Knowledge() {
          return 221e5;
        },
        Structs() {
          return {
            portal: {
              sensor_drone: { s: "prtl_badlands", count: 25, on: 25 }
            }
          };
        }
      },
      effect() {
        return loc("tech_hell_search_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_hell_search_result"), "info", false, ["progress", "hell"]);
          global.settings.portal.ruins = true;
          global.settings.portal.gate = true;
          initStruct(actions.portal.prtl_ruins.guard_post);
          return true;
        }
        return false;
      }
    },
    codex_infernium: {
      id: "tech-codex_infernium",
      title: loc("tech_codex_infernium"),
      desc: loc("tech_codex_infernium"),
      category: "progress",
      era: "dimensional",
      reqs: { hell_ruins: 3 },
      grant: ["hell_ruins", 4],
      cost: {
        Knowledge() {
          return 235e5;
        },
        Codex() {
          return 1;
        }
      },
      effect() {
        return loc("tech_codex_infernium_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Codex.display = false;
          return true;
        }
        return false;
      }
    },
    lake_analysis: {
      id: "tech-lake_analysis",
      title: loc("tech_lake_analysis"),
      desc: loc("tech_lake_analysis"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_lake: 2 },
      grant: ["hell_lake", 3],
      cost: {
        Knowledge() {
          return 34e6;
        }
      },
      effect() {
        return loc("tech_lake_analysis_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["fasting"] && global.tech["dish"] >= 1) {
            messageQueue(loc("tech_lake_analysis_fasting"), "info", false, ["progress", "hell"]);
          }
          return true;
        }
        return false;
      }
    },
    lake_threat: {
      id: "tech-lake_threat",
      title: loc("tech_lake_threat"),
      desc: loc("tech_lake_threat"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_lake: 3 },
      grant: ["hell_lake", 4],
      cost: {
        Knowledge() {
          return 345e5;
        }
      },
      effect() {
        return loc("tech_lake_threat_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_lake.bireme);
          messageQueue(loc("tech_lake_threat_result"), "info", false, ["progress", "hell"]);
          return true;
        }
        return false;
      }
    },
    lake_transport: {
      id: "tech-lake_transport",
      title: loc("tech_lake_transport"),
      desc: loc("tech_lake_transport"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_lake: 4 },
      grant: ["hell_lake", 5],
      cost: {
        Knowledge() {
          return 35e6;
        }
      },
      effect() {
        return loc("tech_lake_transport_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_lake.transport);
          return true;
        }
        return false;
      }
    },
    cooling_tower: {
      id: "tech-cooling_tower",
      title: loc("tech_cooling_tower"),
      desc: loc("tech_cooling_tower"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_lake: 5 },
      grant: ["hell_lake", 6],
      cost: {
        Knowledge() {
          return 375e5;
        }
      },
      effect() {
        return loc("tech_cooling_tower_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_lake.cooling_tower);
          return true;
        }
        return false;
      }
    },
    miasma: {
      id: "tech-miasma",
      title: loc("tech_miasma"),
      desc: loc("tech_miasma"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 2 },
      grant: ["hell_spire", 3],
      cost: {
        Knowledge() {
          return 3825e4;
        }
      },
      effect() {
        return loc("tech_miasma_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_spire.port);
          return true;
        }
        return false;
      }
    },
    incorporeal: {
      id: "tech-incorporeal",
      title: loc("tech_incorporeal"),
      desc: loc("tech_incorporeal"),
      category: "special",
      era: "intergalactic",
      reqs: { science: 19 },
      grant: ["ascension", 1],
      not_trait: ["orbit_decay", "witch_hunter", "warlord"],
      cost: {
        Knowledge() {
          return 175e5;
        },
        Phage() {
          return 25;
        }
      },
      effect() {
        return loc("tech_incorporeal_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    tech_ascension: {
      id: "tech-tech_ascension",
      title: loc("tech_ascension"),
      desc: loc("tech_ascension"),
      category: "special",
      era: "intergalactic",
      reqs: { ascension: 1 },
      grant: ["ascension", 2],
      not_trait: ["orbit_decay", "witch_hunter"],
      cost: {
        Knowledge() {
          return 185e5;
        },
        Plasmid() {
          return 100;
        }
      },
      effect() {
        return loc("tech_ascension_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.sirius = true;
          return true;
        }
        return false;
      }
    },
    terraforming: {
      id: "tech-terraforming",
      title: loc("tech_terraforming"),
      desc: loc("tech_terraforming"),
      category: "special",
      era: "intergalactic",
      reqs: { science: 19 },
      path: ["standard"],
      grant: ["terraforming", 1],
      trait: ["orbit_decay"],
      cost: {
        Knowledge() {
          return 18e6;
        }
      },
      effect() {
        return loc("tech_terraforming_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.terraformer);
          return true;
        }
        return false;
      }
    },
    cement_processing: {
      id: "tech-cement_processing",
      title: loc("tech_cement_processing"),
      desc: loc("tech_cement_processing"),
      category: "ai_core",
      era: "interstellar",
      reqs: { high_tech: 15 },
      not_trait: ["flier", "warlord"],
      grant: ["ai_core", 1],
      cost: {
        Knowledge() {
          return 175e4;
        }
      },
      effect: loc("tech_cement_processing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_processing_flier: {
      id: "tech-adamantite_processing_flier",
      title: loc("tech_adamantite_processing"),
      desc: loc("tech_adamantite_processing"),
      category: "ai_core",
      era: "interstellar",
      reqs: { high_tech: 15 },
      trait: ["flier"],
      grant: ["ai_core", 2],
      cost: {
        Knowledge() {
          return 2e6;
        }
      },
      effect: loc("tech_adamantite_processing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_processing: {
      id: "tech-adamantite_processing",
      title: loc("tech_adamantite_processing"),
      desc: loc("tech_adamantite_processing"),
      category: "ai_core",
      era: "interstellar",
      reqs: { ai_core: 1 },
      not_trait: ["flier"],
      grant: ["ai_core", 2],
      cost: {
        Knowledge() {
          return 2e6;
        }
      },
      effect: loc("tech_adamantite_processing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    graphene_processing: {
      id: "tech-graphene_processing",
      title: loc("tech_graphene_processing"),
      desc: loc("tech_graphene_processing"),
      category: "ai_core",
      era: "intergalactic",
      reqs: { ai_core: 2 },
      grant: ["ai_core", 3],
      cost: {
        Knowledge() {
          return 25e5;
        }
      },
      effect: loc("tech_graphene_processing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    crypto_mining: {
      id: "tech-crypto_mining",
      title: loc("tech_crypto_mining"),
      desc: loc("tech_crypto_mining"),
      category: "ai_core",
      era: "existential",
      reqs: { ai_core: 3, banking: 14 },
      grant: ["ai_core", 4],
      cost: {
        Money() {
          return 3e10;
        },
        Knowledge() {
          return 135e6;
        },
        Omniscience() {
          return 45e3;
        }
      },
      effect: loc("tech_crypto_mining_effect", [loc("interstellar_citadel_title")]),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fusion_power: {
      id: "tech-fusion_power",
      title: loc("tech_fusion_power"),
      desc: loc("tech_fusion_power"),
      category: "power_generation",
      era: "interstellar",
      reqs: { ram_scoop: 1 },
      grant: ["fusion", 1],
      cost: {
        Knowledge() {
          return 64e4;
        }
      },
      effect: loc("tech_fusion_power_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.fusion);
          return true;
        }
        return false;
      }
    },
    infernium_power: {
      id: "tech-infernium_power",
      title: loc("tech_infernium_power"),
      desc: loc("tech_infernium_power"),
      category: "power_generation",
      era: "dimensional",
      reqs: { smelting: 8, hell_ruins: 4 },
      grant: ["inferno_power", 1],
      cost: {
        Knowledge() {
          return 3e7;
        }
      },
      effect: loc("tech_infernium_power_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_ruins.inferno_power);
          return true;
        }
        return false;
      }
    },
    thermomechanics: {
      id: "tech-thermomechanics",
      title: loc("tech_thermomechanics"),
      desc: loc("tech_thermomechanics_desc"),
      category: "crafting",
      era: "industrialized",
      reqs: { high_tech: 4 },
      grant: ["alloy", 1],
      cost: {
        Knowledge() {
          return 6e4;
        }
      },
      effect() {
        return loc("tech_thermomechanics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    quantum_manufacturing: {
      id: "tech-quantum_manufacturing",
      title: loc("tech_quantum_manufacturing"),
      desc: loc("tech_quantum_manufacturing"),
      category: "crafting",
      era: "deep_space",
      reqs: { high_tech: 11 },
      grant: ["q_factory", 1],
      cost: {
        Knowledge() {
          return 465e3;
        }
      },
      effect: loc("tech_quantum_manufacturing_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    worker_drone: {
      id: "tech-worker_drone",
      title: loc("tech_worker_drone"),
      desc: loc("tech_worker_drone"),
      category: "mining",
      era: "deep_space",
      reqs: { nano: 1 },
      grant: ["drone", 1],
      cost: {
        Knowledge() {
          return 4e5;
        }
      },
      effect() {
        return loc("tech_worker_drone_effect", [planetName().gas_moon]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_gas_moon.drone);
          return true;
        }
        return false;
      }
    },
    uranium: {
      id: "tech-uranium",
      title: loc("tech_uranium"),
      desc: loc("tech_uranium"),
      category: "power_generation",
      era: "globalized",
      reqs: { high_tech: 4 },
      grant: ["uranium", 1],
      cost: {
        Knowledge() {
          return 72e3;
        }
      },
      effect: loc("tech_uranium_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Uranium.display = true;
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    uranium_storage: {
      id: "tech-uranium_storage",
      title: loc("tech_uranium_storage"),
      desc: loc("tech_uranium_storage"),
      category: "storage",
      era: "globalized",
      reqs: { uranium: 1 },
      grant: ["uranium", 2],
      cost: {
        Knowledge() {
          return 75600;
        },
        Alloy() {
          return 2500;
        }
      },
      effect: loc("tech_uranium_storage_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    uranium_ash: {
      id: "tech-uranium_ash",
      title: loc("tech_uranium_ash"),
      desc: loc("tech_uranium_ash"),
      category: "power_generation",
      era: "globalized",
      reqs: { uranium: 2 },
      grant: ["uranium", 3],
      cost: {
        Knowledge() {
          return 122e3;
        }
      },
      effect: loc("tech_uranium_ash_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    breeder_reactor: {
      id: "tech-breeder_reactor",
      title: loc("tech_breeder_reactor"),
      desc: loc("tech_breeder_reactor"),
      category: "power_generation",
      era: "early_space",
      reqs: { high_tech: 5, uranium: 3, space: 3 },
      grant: ["uranium", 4],
      cost: {
        Knowledge() {
          return 16e4;
        },
        Uranium() {
          return 250;
        },
        Iridium() {
          return 1e3;
        }
      },
      effect: loc("tech_breeder_reactor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mine_conveyor: {
      id: "tech-mine_conveyor",
      title: loc("tech_mine_conveyor"),
      desc: loc("tech_mine_conveyor"),
      category: "mining",
      era: "discovery",
      reqs: { high_tech: 2 },
      grant: ["mine_conveyor", 1],
      cost: {
        Knowledge() {
          return 16200;
        },
        Copper() {
          return 2250;
        },
        Steel() {
          return 1750;
        }
      },
      effect: loc("tech_mine_conveyor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    oil_well: {
      id: "tech-oil_well",
      title() {
        return global.race["blubber"] ? loc("tech_oil_refinery") : loc("tech_oil_well");
      },
      desc() {
        return global.race["blubber"] ? loc("tech_oil_refinery") : loc("tech_oil_well");
      },
      category: "power_generation",
      era: "industrialized",
      reqs: { high_tech: 3 },
      grant: ["oil", 1],
      cost: {
        Knowledge() {
          return 27e3;
        }
      },
      effect() {
        return global.race["blubber"] ? loc("tech_oil_refinery_effect") : loc("tech_oil_well_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.oil_well);
          return true;
        }
        return false;
      }
    },
    oil_depot: {
      id: "tech-oil_depot",
      title: loc("tech_oil_depot"),
      desc: loc("tech_oil_depot"),
      category: "storage",
      era: "industrialized",
      reqs: { oil: 1 },
      grant: ["oil", 2],
      cost: {
        Knowledge() {
          return 32e3;
        }
      },
      effect: loc("tech_oil_depot_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.oil_depot);
          return true;
        }
        return false;
      }
    },
    oil_power: {
      id: "tech-oil_power",
      title() {
        return global.race["environmentalist"] ? loc("city_wind_power") : loc("tech_oil_power");
      },
      desc() {
        return global.race["environmentalist"] ? loc("city_wind_power") : loc("tech_oil_power");
      },
      category: "power_generation",
      era: "industrialized",
      reqs: { oil: 2 },
      grant: ["oil", 3],
      cost: {
        Knowledge() {
          return 44e3;
        }
      },
      effect() {
        return global.race["environmentalist"] ? loc("tech_wind_power_effect") : loc("tech_oil_power_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.oil_power);
          return true;
        }
        return false;
      }
    },
    titanium_drills: {
      id: "tech-titanium_drills",
      title: loc("tech_titanium_drills"),
      desc: loc("tech_titanium_drills"),
      category: "power_generation",
      era: "industrialized",
      reqs: { oil: 3 },
      grant: ["oil", 4],
      cost: {
        Knowledge() {
          return 54e3;
        },
        Titanium() {
          return 3500;
        }
      },
      effect: loc("tech_titanium_drills_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    alloy_drills: {
      id: "tech-alloy_drills",
      title: loc("tech_alloy_drills"),
      desc: loc("tech_alloy_drills"),
      category: "power_generation",
      era: "globalized",
      reqs: { oil: 4 },
      grant: ["oil", 5],
      cost: {
        Knowledge() {
          return 77e3;
        },
        Alloy() {
          return 1e3;
        }
      },
      effect: loc("tech_alloy_drills_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fracking: {
      id: "tech-fracking",
      title: loc("tech_fracking"),
      desc: loc("tech_fracking"),
      category: "power_generation",
      era: "globalized",
      reqs: { oil: 5, high_tech: 6 },
      grant: ["oil", 6],
      cost: {
        Knowledge() {
          return 132e3;
        }
      },
      effect: loc("tech_fracking_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mythril_drills: {
      id: "tech-mythril_drills",
      title: loc("tech_mythril_drills"),
      desc: loc("tech_mythril_drills"),
      category: "power_generation",
      era: "early_space",
      reqs: { oil: 6, space: 3 },
      grant: ["oil", 7],
      cost: {
        Knowledge() {
          return 165e3;
        },
        Mythril() {
          return 100;
        }
      },
      effect: loc("tech_mythril_drills_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mass_driver: {
      id: "tech-mass_driver",
      title: loc("tech_mass_driver"),
      desc: loc("tech_mass_driver"),
      category: "power_generation",
      era: "early_space",
      reqs: { oil: 6, space: 3 },
      grant: ["mass", 1],
      cost: {
        Knowledge() {
          return 16e4;
        }
      },
      effect: loc("tech_mass_driver_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.mass_driver);
          return true;
        }
        return false;
      }
    },
    orichalcum_driver: {
      id: "tech-orichalcum_driver",
      title: loc("tech_orichalcum_driver"),
      desc: loc("tech_orichalcum_driver"),
      category: "science",
      era: "intergalactic",
      reqs: { mass: 1, science: 19 },
      grant: ["mass", 2],
      not_trait: ["orbit_decayed", "warlord"],
      cost: {
        Knowledge() {
          return 14e6;
        },
        Orichalcum() {
          return 4e5;
        }
      },
      effect() {
        return loc("tech_orichalcum_driver_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.terraformer);
          return true;
        }
        return false;
      }
    },
    polymer: {
      id: "tech-polymer",
      title: loc("tech_polymer"),
      desc: loc("tech_polymer"),
      category: "crafting",
      era: "globalized",
      reqs: { genetics: 1 },
      grant: ["polymer", 1],
      cost: {
        Knowledge() {
          return 8e4;
        },
        Oil() {
          return 5e3;
        },
        Alloy() {
          return 450;
        }
      },
      effect: loc("tech_polymer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Polymer.display = true;
          messageQueue(loc("tech_polymer_avail"), "info", false, ["progress"]);
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        renderPsychicPowers();
      }
    },
    fluidized_bed_reactor: {
      id: "tech-fluidized_bed_reactor",
      title: loc("tech_fluidized_bed_reactor"),
      desc: loc("tech_fluidized_bed_reactor"),
      category: "crafting",
      era: "globalized",
      reqs: { polymer: 1, high_tech: 6 },
      grant: ["polymer", 2],
      cost: {
        Knowledge() {
          return 99e3;
        }
      },
      effect: loc("tech_fluidized_bed_reactor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    synthetic_fur: {
      id: "tech-synthetic_fur",
      title() {
        return global.race["evil"] ? loc("tech_faux_leather") : loc("tech_synthetic_fur");
      },
      desc() {
        return global.race["evil"] ? loc("tech_faux_leather") : loc("tech_synthetic_fur");
      },
      category: "crafting",
      era: "globalized",
      reqs: { polymer: 1 },
      condition() {
        return global.resource.Furs.display;
      },
      grant: ["synthetic_fur", 1],
      cost: {
        Knowledge() {
          return 1e5;
        },
        Polymer() {
          return 2500;
        }
      },
      effect() {
        return global.race["evil"] ? loc("tech_faux_leather_effect") : loc("tech_synthetic_fur_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    nanoweave: {
      id: "tech-nanoweave",
      title: loc("tech_nanoweave"),
      desc: loc("tech_nanoweave"),
      category: "crafting",
      era: "intergalactic",
      reqs: { science: 18 },
      grant: ["nanoweave", 1],
      cost: {
        Knowledge() {
          return 85e5;
        },
        Nano_Tube() {
          return 5e6;
        },
        Vitreloy() {
          return 25e4;
        }
      },
      effect: loc("tech_nanoweave_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Nanoweave.display = true;
          messageQueue(loc("tech_nanoweave_avail"), "info", false, ["progress"]);
          loadFoundry();
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    stanene: {
      id: "tech-stanene",
      title: loc("tech_stanene"),
      desc: loc("tech_stanene"),
      category: "crafting",
      era: "interstellar",
      reqs: { infernite: 1 },
      grant: ["stanene", 1],
      cost: {
        Knowledge() {
          return 59e4;
        },
        Aluminium() {
          return 5e5;
        },
        Infernite() {
          return 1e3;
        }
      },
      effect: loc("tech_stanene_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Stanene.display = true;
          messageQueue(loc("tech_stanene_avail"), "info", false, ["progress"]);
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        renderPsychicPowers();
      }
    },
    nano_tubes: {
      id: "tech-nano_tubes",
      title: loc("tech_nano_tubes"),
      desc: loc("tech_nano_tubes"),
      category: "crafting",
      era: "deep_space",
      reqs: { high_tech: 10 },
      grant: ["nano", 1],
      cost: {
        Knowledge() {
          return 375e3;
        },
        Coal() {
          return 1e5;
        },
        Neutronium() {
          return 1e3;
        }
      },
      effect: loc("tech_nano_tubes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Nano_Tube.display = true;
          messageQueue(loc("tech_nano_tubes_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        renderPsychicPowers();
      }
    },
    scarletite: {
      id: "tech-scarletite",
      title: loc("tech_scarletite"),
      desc: loc("tech_scarletite"),
      category: "crafting",
      era: "dimensional",
      reqs: { hell_ruins: 4 },
      grant: ["scarletite", 1],
      cost: {
        Knowledge() {
          return 2675e4;
        },
        Iron() {
          return 1e8;
        },
        Adamantite() {
          return 15e6;
        },
        Orichalcum() {
          return 8e6;
        }
      },
      effect: loc("tech_scarletite_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Scarletite.display = true;
          initStruct(actions.portal.prtl_ruins.hell_forge);
          messageQueue(loc("tech_scarletite_avail"), "info", false, ["progress"]);
          loadFoundry();
          if (global.race.universe !== "micro" && !global.pillars[global.race.species]) {
            global.tech["fusable"] = 1;
          } else {
            if (global.race.universe !== "micro") {
              let rank = alevel();
              if (rank > global.pillars[global.race.species]) {
                global.pillars[global.race.species] = rank;
              }
            }
            global.tech["pillars"] = 2;
          }
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    pillars: {
      id: "tech-pillars",
      title: loc("tech_pillars"),
      desc: loc("tech_pillars"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { scarletite: 1, fusable: 1 },
      grant: ["pillars", 1],
      cost: {
        Knowledge() {
          return 3e7;
        }
      },
      effect: loc("tech_pillars_effect"),
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_pillars_msg", [races[global.race.species].entity]), "info", false, ["progress", "hell"]);
          return true;
        }
        return false;
      }
    },
    reclaimer: {
      id: "tech-reclaimer",
      title: loc("tech_reclaimer"),
      desc: loc("tech_reclaimer_desc"),
      category: "reclaimer",
      era: "civilized",
      reqs: { primitive: 3 },
      grant: ["reclaimer", 1],
      trait: ["evil"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 45;
        },
        Lumber() {
          return 20;
        },
        Stone() {
          return 20;
        }
      },
      effect: loc("tech_reclaimer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.lumberjack.name = loc("job_reclaimer");
          global.civic.lumberjack.display = true;
          initStruct(actions.city.graveyard);
          return true;
        }
        return false;
      }
    },
    shovel: {
      id: "tech-shovel",
      title: loc("tech_shovel"),
      desc: loc("tech_shovel"),
      category: "reclaimer",
      era: "civilized",
      reqs: { reclaimer: 1, mining: 2 },
      grant: ["reclaimer", 2],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 540;
        },
        Copper() {
          return 25;
        }
      },
      effect: loc("tech_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_shovel: {
      id: "tech-iron_shovel",
      title: loc("tech_iron_shovel"),
      desc: loc("tech_iron_shovel"),
      category: "reclaimer",
      era: "civilized",
      reqs: { reclaimer: 2, mining: 3 },
      grant: ["reclaimer", 3],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 2700;
        },
        Iron() {
          return 250;
        }
      },
      effect: loc("tech_iron_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_shovel: {
      id: "tech-steel_shovel",
      title: loc("tech_steel_shovel"),
      desc: loc("tech_steel_shovel"),
      category: "reclaimer",
      era: "discovery",
      reqs: { reclaimer: 3, smelting: 2 },
      grant: ["reclaimer", 4],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 9e3;
        },
        Steel() {
          return 250;
        }
      },
      effect: loc("tech_steel_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_shovel: {
      id: "tech-titanium_shovel",
      title: loc("tech_titanium_shovel"),
      desc: loc("tech_titanium_shovel"),
      category: "reclaimer",
      era: "industrialized",
      reqs: { reclaimer: 4, high_tech: 3 },
      grant: ["reclaimer", 5],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 38e3;
        },
        Titanium() {
          return 350;
        }
      },
      effect: loc("tech_titanium_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    alloy_shovel: {
      id: "tech-alloy_shovel",
      title: loc("tech_alloy_shovel"),
      desc: loc("tech_alloy_shovel"),
      category: "reclaimer",
      era: "globalized",
      reqs: { reclaimer: 5, high_tech: 4 },
      grant: ["reclaimer", 6],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 67500;
        },
        Alloy() {
          return 750;
        }
      },
      effect: loc("tech_alloy_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mythril_shovel: {
      id: "tech-mythril_shovel",
      title: loc("tech_mythril_shovel"),
      desc: loc("tech_mythril_shovel"),
      category: "reclaimer",
      era: "early_space",
      reqs: { reclaimer: 6, space: 3 },
      grant: ["reclaimer", 7],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 16e4;
        },
        Mythril() {
          return 880;
        }
      },
      effect: loc("tech_mythril_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_shovel: {
      id: "tech-adamantite_shovel",
      title: loc("tech_adamantite_shovel"),
      desc: loc("tech_adamantite_shovel"),
      category: "reclaimer",
      era: "interstellar",
      reqs: { reclaimer: 7, alpha: 2 },
      grant: ["reclaimer", 8],
      trait: ["evil"],
      not_trait: ["living_tool"],
      condition() {
        return global.race["kindling_kindred"] || global.race["smoldering"] ? false : global.race.species === "wendigo" ? true : global.race["soul_eater"] ? false : true;
      },
      cost: {
        Knowledge() {
          return 525e3;
        },
        Adamantite() {
          return 1e4;
        }
      },
      effect: loc("tech_adamantite_shovel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    stone_axe: {
      id: "tech-stone_axe",
      title() {
        return loc("tech_stone_axe");
      },
      desc() {
        return loc("tech_stone_axe_desc");
      },
      category: "lumber_gathering",
      reqs: { primitive: 3 },
      era: "civilized",
      grant: ["axe", 1],
      not_trait: ["kindling_kindred", "smoldering", "evil", "cataclysm"],
      cost: {
        Knowledge() {
          return 45;
        },
        Lumber() {
          return 20;
        },
        Stone() {
          return 20;
        }
      },
      effect() {
        if (global.race["living_tool"]) {
          return loc(`tech_basic_livingtools`);
        }
        return global.race["sappy"] ? loc("tech_amber_axe_effect") : loc("tech_stone_axe_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.civic.lumberjack.display = true;
          initStruct(actions.city.lumber_yard);
          return true;
        }
        return false;
      }
    },
    copper_axes: {
      id: "tech-copper_axes",
      title: loc("tech_copper_axes"),
      desc: loc("tech_copper_axes_desc"),
      category: "lumber_gathering",
      era: "civilized",
      reqs: { axe: 1, mining: 2 },
      not_trait: ["living_tool"],
      grant: ["axe", 2],
      cost: {
        Knowledge() {
          return 540;
        },
        Copper() {
          return 25;
        }
      },
      effect: loc("tech_copper_axes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_saw: {
      id: "tech-iron_saw",
      title: loc("tech_iron_saw"),
      desc: loc("tech_iron_saw_desc"),
      category: "lumber_gathering",
      era: "civilized",
      reqs: { axe: 1, mining: 3 },
      grant: ["saw", 1],
      not_trait: ["lone_survivor", "warlord"],
      cost: {
        Knowledge() {
          return 3375;
        },
        Iron() {
          return 400;
        }
      },
      effect: loc("tech_iron_saw_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.sawmill);
          return true;
        }
        return false;
      }
    },
    steel_saw: {
      id: "tech-steel_saw",
      title: loc("tech_steel_saw"),
      desc: loc("tech_steel_saw_desc"),
      category: "lumber_gathering",
      era: "discovery",
      reqs: { smelting: 2, saw: 1 },
      grant: ["saw", 2],
      cost: {
        Knowledge() {
          return 10800;
        },
        Steel() {
          return 400;
        }
      },
      effect: loc("tech_steel_saw_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_axes: {
      id: "tech-iron_axes",
      title: loc("tech_iron_axes"),
      desc: loc("tech_iron_axes_desc"),
      category: "lumber_gathering",
      era: "civilized",
      reqs: { axe: 2, mining: 3 },
      not_trait: ["living_tool"],
      grant: ["axe", 3],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 1350 : 2700;
        },
        Iron() {
          return 250;
        }
      },
      effect: loc("tech_iron_axes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_axes: {
      id: "tech-steel_axes",
      title: loc("tech_steel_axes"),
      desc: loc("tech_steel_axes_desc"),
      category: "lumber_gathering",
      era: "discovery",
      reqs: { axe: 3, smelting: 2 },
      not_trait: ["living_tool"],
      grant: ["axe", 4],
      cost: {
        Knowledge() {
          return 9e3;
        },
        Steel() {
          return 250;
        }
      },
      effect: loc("tech_steel_axes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_axes: {
      id: "tech-titanium_axes",
      title: loc("tech_titanium_axes"),
      desc: loc("tech_titanium_axes_desc"),
      category: "lumber_gathering",
      era: "industrialized",
      reqs: { axe: 4, high_tech: 3 },
      not_trait: ["living_tool"],
      grant: ["axe", 5],
      cost: {
        Knowledge() {
          return 38e3;
        },
        Titanium() {
          return 350;
        }
      },
      effect: loc("tech_titanium_axes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    chainsaws: {
      id: "tech-chainsaws",
      title: loc("tech_chainsaws"),
      desc: loc("tech_chainsaws_desc"),
      category: "lumber_gathering",
      era: "interstellar",
      reqs: { axe: 5, alpha: 2 },
      not_trait: ["living_tool"],
      grant: ["axe", 6],
      cost: {
        Knowledge() {
          return 56e4;
        },
        Oil() {
          return 1e4;
        },
        Adamantite() {
          return 2e3;
        }
      },
      effect: loc("tech_chainsaws_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return `<div>${loc("tech_chainsaws_flair1")}</div><div>${loc("tech_chainsaws_flair2")}</div>`;
      }
    },
    copper_sledgehammer: {
      id: "tech-copper_sledgehammer",
      title: loc("tech_copper_sledgehammer"),
      desc: loc("tech_copper_sledgehammer_desc"),
      category: "stone_gathering",
      era: "civilized",
      reqs: { mining: 2 },
      not_trait: ["cataclysm", "sappy", "living_tool"],
      grant: ["hammer", 1],
      cost: {
        Knowledge() {
          return 540;
        },
        Copper() {
          return 25;
        }
      },
      effect: loc("tech_copper_sledgehammer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_sledgehammer: {
      id: "tech-iron_sledgehammer",
      title: loc("tech_iron_sledgehammer"),
      desc: loc("tech_iron_sledgehammer_desc"),
      category: "stone_gathering",
      era: "civilized",
      reqs: { hammer: 1, mining: 3 },
      not_trait: ["cataclysm", "sappy", "living_tool"],
      grant: ["hammer", 2],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 1350 : 2700;
        },
        Iron() {
          return 250;
        }
      },
      effect: loc("tech_iron_sledgehammer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_sledgehammer: {
      id: "tech-steel_sledgehammer",
      title: loc("tech_steel_sledgehammer"),
      desc: loc("tech_steel_sledgehammer_desc"),
      category: "stone_gathering",
      era: "discovery",
      reqs: { hammer: 2, smelting: 2 },
      not_trait: ["cataclysm", "sappy", "living_tool"],
      grant: ["hammer", 3],
      cost: {
        Knowledge() {
          return 7200;
        },
        Steel() {
          return 250;
        }
      },
      effect: loc("tech_steel_sledgehammer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_sledgehammer: {
      id: "tech-titanium_sledgehammer",
      title: loc("tech_titanium_sledgehammer"),
      desc: loc("tech_titanium_sledgehammer_desc"),
      category: "stone_gathering",
      era: "industrialized",
      reqs: { hammer: 3, high_tech: 3 },
      not_trait: ["cataclysm", "sappy", "living_tool"],
      grant: ["hammer", 4],
      cost: {
        Knowledge() {
          return 4e4;
        },
        Titanium() {
          return 400;
        }
      },
      effect: loc("tech_titanium_sledgehammer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    copper_pickaxe: {
      id: "tech-copper_pickaxe",
      title: loc("tech_copper_pickaxe"),
      desc: loc("tech_copper_pickaxe_desc"),
      category: "mining",
      era: "civilized",
      reqs: { mining: 2 },
      not_trait: ["cataclysm", "living_tool", "tusk"],
      grant: ["pickaxe", 1],
      cost: {
        Knowledge() {
          return 675;
        },
        Copper() {
          return 25;
        }
      },
      effect: loc("tech_copper_pickaxe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_pickaxe: {
      id: "tech-iron_pickaxe",
      title: loc("tech_iron_pickaxe"),
      desc: loc("tech_iron_pickaxe_desc"),
      category: "mining",
      era: "civilized",
      reqs: { pickaxe: 1, mining: 3 },
      not_trait: ["cataclysm", "living_tool", "tusk"],
      grant: ["pickaxe", 2],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 1600 : 3200;
        },
        Iron() {
          return 250;
        }
      },
      effect: loc("tech_iron_pickaxe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_pickaxe: {
      id: "tech-steel_pickaxe",
      title: loc("tech_steel_pickaxe"),
      desc: loc("tech_steel_pickaxe_desc"),
      category: "mining",
      era: "discovery",
      reqs: { pickaxe: 2, smelting: 2 },
      not_trait: ["living_tool", "tusk"],
      grant: ["pickaxe", 3],
      cost: {
        Knowledge() {
          return 9e3;
        },
        Steel() {
          return 250;
        }
      },
      effect: loc("tech_steel_pickaxe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    jackhammer: {
      id: "tech-jackhammer",
      title: loc("tech_jackhammer"),
      desc: loc("tech_jackhammer_desc"),
      category: "mining",
      era: "discovery",
      reqs: { pickaxe: 3, high_tech: 2 },
      not_trait: ["living_tool", "tusk"],
      grant: ["pickaxe", 4],
      cost: {
        Knowledge() {
          return 22500;
        },
        Copper() {
          return 5e3;
        }
      },
      effect: loc("tech_jackhammer_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    jackhammer_mk2: {
      id: "tech-jackhammer_mk2",
      title: loc("tech_jackhammer_mk2"),
      desc: loc("tech_jackhammer_mk2"),
      category: "mining",
      era: "globalized",
      reqs: { pickaxe: 4, high_tech: 4 },
      not_trait: ["living_tool", "tusk"],
      grant: ["pickaxe", 5],
      cost: {
        Knowledge() {
          return 67500;
        },
        Titanium() {
          return 2e3;
        },
        Alloy() {
          return 500;
        }
      },
      effect: loc("tech_jackhammer_mk2_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_hammer: {
      id: "tech-adamantite_hammer",
      title() {
        return loc("tech_improved_jackhammer", [global.resource.Adamantite.name]);
      },
      desc() {
        return loc("tech_improved_jackhammer", [global.resource.Adamantite.name]);
      },
      category: "mining",
      era: "interstellar",
      reqs: { pickaxe: 5, alpha: 2 },
      not_trait: ["living_tool", "tusk"],
      grant: ["pickaxe", 6],
      cost: {
        Knowledge() {
          return 535e3;
        },
        Adamantite() {
          return 12500;
        }
      },
      effect() {
        return loc("tech_improved_jackhammer_effect", [global.resource.Adamantite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elysanite_hammer: {
      id: "tech-elysanite_hammer",
      title() {
        return loc("tech_improved_jackhammer", [global.resource.Elysanite.name]);
      },
      desc() {
        return loc("tech_improved_jackhammer", [global.resource.Elysanite.name]);
      },
      category: "mining",
      era: "existential",
      reqs: { pickaxe: 6, elysium: 7 },
      not_trait: ["living_tool", "tusk"],
      grant: ["pickaxe", 7],
      cost: {
        Knowledge() {
          return 975e5;
        },
        Omniscience() {
          return 21500;
        },
        Elysanite() {
          return 35e6;
        }
      },
      effect() {
        return loc("tech_improved_jackhammer_effect", [global.resource.Elysanite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    copper_hoe: {
      id: "tech-copper_hoe",
      title: loc("tech_copper_hoe"),
      desc: loc("tech_copper_hoe_desc"),
      category: "agriculture",
      era: "civilized",
      reqs: { mining: 2, agriculture: 1 },
      not_trait: ["cataclysm", "living_tool"],
      grant: ["hoe", 1],
      cost: {
        Knowledge() {
          return 720;
        },
        Copper() {
          return 50;
        }
      },
      effect: loc("tech_copper_hoe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    iron_hoe: {
      id: "tech-iron_hoe",
      title: loc("tech_iron_hoe"),
      desc: loc("tech_iron_hoe_desc"),
      category: "agriculture",
      era: "civilized",
      reqs: { hoe: 1, mining: 3, agriculture: 1 },
      not_trait: ["living_tool"],
      grant: ["hoe", 2],
      cost: {
        Knowledge() {
          return global.city.ptrait.includes("unstable") ? 1800 : 3600;
        },
        Iron() {
          return 500;
        }
      },
      effect: loc("tech_iron_hoe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_hoe: {
      id: "tech-steel_hoe",
      title: loc("tech_steel_hoe"),
      desc: loc("tech_steel_hoe_desc"),
      category: "agriculture",
      era: "discovery",
      reqs: { hoe: 2, smelting: 2, agriculture: 1 },
      not_trait: ["living_tool"],
      grant: ["hoe", 3],
      cost: {
        Knowledge() {
          return 12600;
        },
        Steel() {
          return 500;
        }
      },
      effect: loc("tech_steel_hoe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titanium_hoe: {
      id: "tech-titanium_hoe",
      title: loc("tech_titanium_hoe"),
      desc: loc("tech_titanium_hoe_desc"),
      category: "agriculture",
      era: "industrialized",
      reqs: { hoe: 3, high_tech: 3, agriculture: 1 },
      not_trait: ["living_tool"],
      grant: ["hoe", 4],
      cost: {
        Knowledge() {
          return 44e3;
        },
        Titanium() {
          return 500;
        }
      },
      effect: loc("tech_titanium_hoe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_hoe: {
      id: "tech-adamantite_hoe",
      title: loc("tech_adamantite_hoe"),
      desc: loc("tech_adamantite_hoe_desc"),
      category: "agriculture",
      era: "interstellar",
      reqs: { hoe: 4, alpha: 2 },
      not_trait: ["living_tool"],
      grant: ["hoe", 5],
      cost: {
        Knowledge() {
          return 53e4;
        },
        Adamantite() {
          return 1e3;
        }
      },
      effect: loc("tech_adamantite_hoe_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cyber_limbs: {
      id: "tech-cyber_limbs",
      title: loc("tech_cyber_limbs"),
      desc: loc("tech_cyber_limbs"),
      category: "mining",
      era: "dimensional",
      reqs: { high_tech: 18 },
      grant: ["cyber_worker", 1],
      cost: {
        Knowledge() {
          return 27e6;
        }
      },
      effect: loc("tech_cyber_limbs_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    slave_pens: {
      id: "tech-slave_pens",
      title() {
        return loc("city_slave_housing", [global.resource.Slave.name]);
      },
      desc() {
        return loc("city_slave_housing", [global.resource.Slave.name]);
      },
      category: "slaves",
      era: "civilized",
      reqs: { military: 1, mining: 1 },
      not_trait: ["cataclysm", "lone_survivor"],
      grant: ["slaves", 1],
      trait: ["slaver"],
      cost: {
        Knowledge() {
          return 150;
        }
      },
      effect() {
        return loc("tech_slave_pens_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.slave_pen);
          global.resource.Slave.amount = 0;
          return true;
        }
        return false;
      }
    },
    slave_market: {
      id: "tech-slave_market",
      title() {
        return loc("city_slaver_market", [global.resource.Slave.name]);
      },
      desc() {
        return loc("city_slaver_market", [global.resource.Slave.name]);
      },
      category: "slaves",
      era: "discovery",
      reqs: { slaves: 1, high_tech: 1 },
      grant: ["slaves", 2],
      trait: ["slaver"],
      cost: {
        Knowledge() {
          return 8e3;
        }
      },
      effect() {
        return loc("tech_slave_market_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      }
    },
    ceremonial_dagger: {
      id: "tech-ceremonial_dagger",
      title: loc("tech_ceremonial_dagger"),
      desc: loc("tech_ceremonial_dagger"),
      category: "sacrifice",
      era: "civilized",
      reqs: { mining: 1 },
      grant: ["sacrifice", 1],
      trait: ["cannibalize"],
      not_trait: ["cataclysm", "lone_survivor"],
      cost: {
        Knowledge() {
          return 60;
        }
      },
      effect: loc("tech_ceremonial_dagger_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    last_rites: {
      id: "tech-last_rites",
      title: loc("tech_last_rites"),
      desc: loc("tech_last_rites"),
      category: "sacrifice",
      era: "civilized",
      reqs: { sacrifice: 1, theology: 2 },
      grant: ["sacrifice", 2],
      trait: ["cannibalize"],
      cost: {
        Knowledge() {
          return 1e3;
        }
      },
      effect: loc("tech_last_rites_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ancient_infusion: {
      id: "tech-ancient_infusion",
      title: loc("tech_ancient_infusion"),
      desc: loc("tech_ancient_infusion"),
      category: "sacrifice",
      era: "early_space",
      reqs: { sacrifice: 2, theology: 4 },
      grant: ["sacrifice", 3],
      trait: ["cannibalize"],
      cost: {
        Knowledge() {
          return 182e3;
        }
      },
      effect: loc("tech_ancient_infusion_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    garrison: {
      id: "tech-garrison",
      title: loc("tech_garrison"),
      desc: loc("tech_garrison_desc"),
      category: "military",
      era: "civilized",
      reqs: { science: 1, housing: 1 },
      grant: ["military", 1],
      cost: {
        Knowledge() {
          return 70;
        }
      },
      effect: loc("tech_garrison_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.garrison);
          return true;
        }
        return false;
      }
    },
    mercs: {
      id: "tech-mercs",
      title: loc("tech_mercs"),
      desc: loc("tech_mercs_desc"),
      category: "military",
      era: "civilized",
      reqs: { military: 1 },
      grant: ["mercs", 1],
      not_trait: ["lone_survivor"],
      cost: {
        Money() {
          return 1e4;
        },
        Knowledge() {
          return 4500;
        }
      },
      effect: loc("tech_mercs_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.civic.garrison["mercs"] = true;
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      }
    },
    signing_bonus: {
      id: "tech-signing_bonus",
      title: loc("tech_signing_bonus"),
      desc: loc("tech_signing_bonus_desc"),
      category: "military",
      era: "industrialized",
      reqs: { mercs: 1, high_tech: 3 },
      grant: ["mercs", 2],
      cost: {
        Money() {
          return 5e4;
        },
        Knowledge() {
          return 32e3;
        }
      },
      effect: loc("tech_signing_bonus_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    hospital: {
      id: "tech-hospital",
      title: loc("tech_hospital"),
      desc: loc("tech_hospital"),
      category: "military",
      era: "civilized",
      reqs: { military: 1, alumina: 1 },
      grant: ["medic", 1],
      not_trait: ["artifical"],
      cost: {
        Knowledge() {
          return 5e3;
        }
      },
      effect: loc("tech_hospital_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.hospital);
          return true;
        }
        return false;
      }
    },
    bac_tanks: {
      id: "tech-bac_tanks",
      title() {
        return global.race["artifical"] ? loc("tech_repair_subroutines") : loc("tech_bac_tanks");
      },
      desc() {
        return global.race["artifical"] ? loc("tech_repair_subroutines") : loc("tech_bac_tanks_desc");
      },
      category: "military",
      era: "interstellar",
      reqs: { medic: 1, infernite: 1 },
      grant: ["medic", 2],
      cost: {
        Knowledge() {
          return 6e5;
        },
        Infernite() {
          return 250;
        }
      },
      effect() {
        return global.race["artifical"] ? loc("tech_repair_subroutines_effect") : loc("tech_bac_tanks_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    boot_camp: {
      id: "tech-boot_camp",
      title: loc("tech_boot_camp"),
      desc: loc("tech_boot_camp_desc"),
      category: "military",
      era: "discovery",
      reqs: { high_tech: 1 },
      grant: ["boot_camp", 1],
      cost: {
        Knowledge() {
          return 8e3;
        }
      },
      effect: loc("tech_boot_camp_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.boot_camp);
          return true;
        }
        return false;
      }
    },
    vr_training: {
      id: "tech-vr_training",
      title: loc("tech_vr_training"),
      desc: loc("tech_vr_training"),
      category: "military",
      era: "interstellar",
      path: ["standard", "truepath"],
      reqs: { boot_camp: 1, high_tech: 12 },
      not_trait: ["cataclysm", "lone_survivor"],
      grant: ["boot_camp", 2],
      cost: {
        Knowledge() {
          return 625e3;
        }
      },
      effect() {
        return loc("tech_vr_training_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    bows: {
      id: "tech-bows",
      title() {
        return global.race["blubber"] ? loc("tech_harpoon") : loc("tech_bows");
      },
      desc: loc("tech_bows_desc"),
      category: "military",
      era: "civilized",
      reqs: { military: 1 },
      grant: ["military", 2],
      cost: {
        Knowledge() {
          return 225;
        },
        Lumber() {
          return 250;
        }
      },
      effect() {
        return global.race["blubber"] ? loc("tech_harpoon_effect") : loc("tech_bows_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    flintlock_rifle: {
      id: "tech-flintlock_rifle",
      title() {
        return global.race.universe === "magic" ? loc("tech_magic_arrow") : loc("tech_flintlock_rifle");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_magic_arrow") : loc("tech_flintlock_rifle");
      },
      category: "military",
      era: "civilized",
      reqs: { military: 2, explosives: 1 },
      grant: ["military", 3],
      cost: {
        Knowledge() {
          return 5400;
        },
        Coal() {
          return global.race.universe === "magic" ? 0 : 750;
        },
        Mana() {
          return global.race.universe === "magic" ? 100 : 0;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_magic_arrow_effect") : loc("tech_flintlock_rifle_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    machine_gun: {
      id: "tech-machine_gun",
      title() {
        return global.race.universe === "magic" ? loc("tech_fire_mage") : loc("tech_machine_gun");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_fire_mage") : loc("tech_machine_gun");
      },
      category: "military",
      era: "industrialized",
      reqs: { military: 3, oil: 1 },
      grant: ["military", 4],
      cost: {
        Mana() {
          return global.race.universe === "magic" ? 300 : 0;
        },
        Knowledge() {
          return 33750;
        },
        Oil() {
          return 1500;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_fire_mage_effect") : loc("tech_machine_gun_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    bunk_beds: {
      id: "tech-bunk_beds",
      title: loc("tech_bunk_beds"),
      desc: loc("tech_bunk_beds"),
      category: "military",
      era: "globalized",
      reqs: { military: 4, high_tech: 4 },
      grant: ["military", 5],
      cost: {
        Knowledge() {
          return 76500;
        },
        Furs() {
          return 25e3;
        },
        Alloy() {
          return 3e3;
        }
      },
      effect: loc("tech_bunk_beds_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    rail_guns: {
      id: "tech-rail_guns",
      title() {
        return global.race.universe === "magic" ? loc("tech_lightning_caster") : loc("tech_rail_guns");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_lightning_caster") : loc("tech_rail_guns");
      },
      category: "military",
      era: "early_space",
      reqs: { military: 5, mass: 1 },
      grant: ["military", 6],
      cost: {
        Mana() {
          return global.race.universe === "magic" ? 450 : 0;
        },
        Knowledge() {
          return 2e5;
        },
        Iridium() {
          return 2500;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_lightning_caster_effect") : loc("tech_rail_guns_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    laser_rifles: {
      id: "tech-laser_rifles",
      title() {
        return global.race.universe === "magic" ? loc("tech_mana_rifles") : loc("tech_laser_rifles");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_mana_rifles") : loc("tech_laser_rifles");
      },
      category: "military",
      era: "deep_space",
      reqs: { military: 6, high_tech: 9, elerium: 1 },
      grant: ["military", 7],
      cost: {
        Knowledge() {
          return 325e3;
        },
        Elerium() {
          return 250;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_mana_rifles_effect") : loc("tech_laser_rifles_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race.species === "sharkin") {
            unlockAchieve("laser_shark");
          }
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    plasma_rifles: {
      id: "tech-plasma_rifles",
      title() {
        return global.race.universe === "magic" ? loc("tech_focused_rifles") : loc("tech_plasma_rifles");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_focused_rifles") : loc("tech_plasma_rifles");
      },
      category: "military",
      era: "interstellar",
      reqs: { military: 7, high_tech: 13 },
      grant: ["military", 8],
      path: ["standard", "truepath"],
      cost: {
        Knowledge() {
          return 78e4;
        },
        Elerium() {
          return global.race["truepath"] ? 1e3 : 500;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_focused_rifles_effect") : loc("tech_plasma_rifles_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    disruptor_rifles: {
      id: "tech-disruptor_rifles",
      title() {
        return global.race.universe === "magic" ? loc("tech_magic_missile") : loc("tech_disruptor_rifles");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_magic_missile") : loc("tech_disruptor_rifles");
      },
      category: "military",
      era: "interstellar",
      reqs: { military: 8, high_tech: 14, science: 15, infernite: 1 },
      grant: ["military", 9],
      cost: {
        Knowledge() {
          return 1e6;
        },
        Infernite() {
          return 1e3;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_magic_missile_effect") : loc("tech_disruptor_rifles_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    gauss_rifles: {
      id: "tech-gauss_rifles",
      title() {
        return global.race.universe === "magic" ? loc("tech_magicword_kill") : loc("tech_gauss_rifles");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_magicword_kill") : loc("tech_gauss_rifles");
      },
      category: "military",
      era: "intergalactic",
      reqs: { military: 9, science: 18 },
      grant: ["military", 10],
      cost: {
        Knowledge() {
          return 95e5;
        },
        Bolognium() {
          return 1e5;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_magicword_kill_effect") : loc("tech_gauss_rifles_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    cyborg_soldiers: {
      id: "tech-cyborg_soldiers",
      title: loc("tech_cyborg_soldiers"),
      desc: loc("tech_cyborg_soldiers"),
      category: "military",
      era: "dimensional",
      reqs: { military: 10, high_tech: 18 },
      grant: ["military", 11],
      cost: {
        Knowledge() {
          return 26e6;
        },
        Adamantite() {
          return 8e6;
        },
        Bolognium() {
          return 4e6;
        },
        Orichalcum() {
          return 6e6;
        }
      },
      effect: loc("tech_cyborg_soldiers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    ethereal_weapons: {
      id: "tech-ethereal_weapons",
      title: loc("tech_ethereal_weapons"),
      desc: loc("tech_ethereal_weapons"),
      category: "military",
      era: "existential",
      reqs: { military: 11, asphodel: 5 },
      grant: ["military", 12],
      cost: {
        Knowledge() {
          return 725e5;
        },
        Asphodel_Powder() {
          return 7777;
        },
        Soul_Gem() {
          return 100;
        }
      },
      effect: loc("tech_ethereal_weapons_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#garrison` }, "update");
        vBind({ el: `#c_garrison` }, "update");
      }
    },
    space_marines: {
      id: "tech-space_marines",
      title: loc("tech_space_marines"),
      desc: loc("tech_space_marines_desc"),
      category: "military",
      era: "early_space",
      reqs: { space: 3, mars: 2 },
      grant: ["marines", 1],
      cost: {
        Knowledge() {
          return 21e4;
        }
      },
      effect() {
        return `<div>${loc("tech_space_marines_effect", [planetName().red])}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.space_barracks);
          return true;
        }
        return false;
      },
      flair: loc("tech_space_marines_flair")
    },
    hammocks: {
      id: "tech-hammocks",
      title: loc("tech_hammocks"),
      desc: loc("tech_hammocks"),
      category: "military",
      era: "intergalactic",
      reqs: { marines: 1, nanoweave: 1 },
      grant: ["marines", 2],
      cost: {
        Knowledge() {
          return 89e5;
        },
        Nanoweave() {
          return 3e4;
        }
      },
      effect() {
        return loc("tech_hammocks_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cruiser: {
      id: "tech-cruiser",
      title: loc("tech_cruiser"),
      desc: loc("tech_cruiser"),
      category: "military",
      era: "interstellar",
      reqs: { high_tech: 14, proxima: 2, aerogel: 1 },
      grant: ["cruiser", 1],
      cost: {
        Knowledge() {
          return 86e4;
        }
      },
      effect: loc("tech_cruiser_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_proxima.cruiser);
          return true;
        }
        return false;
      }
    },
    armor: {
      id: "tech-armor",
      title: loc("tech_armor"),
      desc: loc("tech_armor_desc"),
      category: "military",
      era: "civilized",
      reqs: { military: 1 },
      not_trait: ["apex_predator"],
      grant: ["armor", 1],
      cost: {
        Money() {
          return 250;
        },
        Knowledge() {
          return 225;
        },
        Furs() {
          return 250;
        }
      },
      effect: loc("tech_armor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    plate_armor: {
      id: "tech-plate_armor",
      title: loc("tech_plate_armor"),
      desc: loc("tech_plate_armor_desc"),
      category: "military",
      era: "civilized",
      reqs: { armor: 1, mining: 3 },
      grant: ["armor", 2],
      cost: {
        Knowledge() {
          return 3400;
        },
        Iron() {
          return 600;
        }
      },
      effect: loc("tech_plate_armor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    kevlar: {
      id: "tech-kevlar",
      title: loc("tech_kevlar"),
      desc: loc("tech_kevlar_desc"),
      category: "military",
      era: "globalized",
      reqs: { armor: 2, polymer: 1 },
      grant: ["armor", 3],
      cost: {
        Knowledge() {
          return 86e3;
        },
        Polymer() {
          return 750;
        }
      },
      effect: loc("tech_kevlar_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    nanoweave_vest: {
      id: "tech-nanoweave_vest",
      title: loc("tech_nanoweave_vest"),
      desc: loc("tech_nanoweave_vest"),
      category: "military",
      era: "intergalactic",
      reqs: { armor: 3, nanoweave: 1 },
      grant: ["armor", 4],
      cost: {
        Knowledge() {
          return 925e4;
        },
        Nanoweave() {
          return 75e3;
        }
      },
      effect: loc("tech_nanoweave_vest_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    laser_turret: {
      id: "tech-laser_turret",
      title: loc("tech_laser_turret"),
      desc: loc("tech_laser_turret"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { high_tech: 9, portal: 2 },
      not_trait: ["warlord"],
      grant: ["turret", 1],
      cost: {
        Knowledge() {
          return 6e5;
        },
        Elerium() {
          return 100;
        }
      },
      effect() {
        return `<div>${loc("tech_laser_turret_effect1")}</div><div class="has-text-special">${loc("tech_laser_turret_effect2")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#fort` }, "update");
        updateQueueNames(false, ["portal-turret"]);
      }
    },
    plasma_turret: {
      id: "tech-plasma_turret",
      title: loc("tech_plasma_turret"),
      desc: loc("tech_plasma_turret"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { high_tech: 13, turret: 1 },
      grant: ["turret", 2],
      cost: {
        Knowledge() {
          return 76e4;
        },
        Elerium() {
          return 350;
        }
      },
      effect() {
        return `<div>${loc("tech_plasma_turret_effect")}</div><div class="has-text-special">${loc("tech_laser_turret_effect2")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        vBind({ el: `#fort` }, "update");
        updateQueueNames(false, ["portal-turret"]);
      }
    },
    black_powder: {
      id: "tech-black_powder",
      title() {
        return global.race.universe === "magic" ? loc("tech_magic_powder") : loc("tech_black_powder");
      },
      desc() {
        return global.race.universe === "magic" ? loc("tech_magic_powder_desc") : loc("tech_black_powder_desc");
      },
      category: "progress",
      era: "civilized",
      reqs: { mining: 4 },
      grant: ["explosives", 1],
      cost: {
        Knowledge() {
          return 4500;
        },
        Mana() {
          return global.race.universe === "magic" ? 100 : 0;
        },
        Crystal() {
          return global.race.universe === "magic" ? 250 : 0;
        },
        Coal() {
          return global.race.universe === "magic" ? 300 : 500;
        }
      },
      effect() {
        return global.race.universe === "magic" ? loc("tech_magic_powder_effect") : loc("tech_black_powder_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dynamite: {
      id: "tech-dynamite",
      title: loc("tech_dynamite"),
      desc: loc("tech_dynamite"),
      category: "mining",
      era: "civilized",
      reqs: { explosives: 1 },
      grant: ["explosives", 2],
      cost: {
        Knowledge() {
          return 4800;
        },
        Coal() {
          return 750;
        }
      },
      effect: loc("tech_dynamite_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    anfo: {
      id: "tech-anfo",
      title: loc("tech_anfo"),
      desc: loc("tech_anfo"),
      category: "mining",
      era: "industrialized",
      reqs: { explosives: 2, oil: 1 },
      grant: ["explosives", 3],
      cost: {
        Knowledge() {
          return 42e3;
        },
        Oil() {
          return 2500;
        }
      },
      effect: loc("tech_anfo_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    super_tnt: {
      id: "tech-super_tnt",
      title: loc("tech_super_tnt"),
      desc: loc("tech_super_tnt"),
      category: "mining",
      era: "existential",
      reqs: { explosives: 3, science: 23 },
      grant: ["explosives", 4],
      cost: {
        Knowledge() {
          return 85e6;
        },
        Omniscience() {
          return 14500;
        },
        Asphodel_Powder() {
          return 66777;
        }
      },
      effect() {
        return loc("tech_super_tnt_effect", [global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mad: {
      id: "tech-mad",
      title: loc("tech_mad"),
      desc: loc("tech_mad_desc"),
      category: "special",
      era: "globalized",
      reqs: { uranium: 1, explosives: 3, high_tech: 7 },
      not_trait: ["cataclysm", "lone_survivor", "warlord"],
      grant: ["mad", 1],
      condition() {
        if (global.race["sludge"] || global.race["ultra_sludge"]) {
          return false;
        }
        return global.race["truepath"] ? global.tech["world_control"] ? true : false : true;
      },
      cost: {
        Knowledge() {
          return 12e4;
        },
        Oil() {
          return global.city.ptrait.includes("dense") ? 1e4 : 8500;
        },
        Uranium() {
          return 1250;
        }
      },
      effect() {
        return global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? loc("tech_mad_effect_easter") : loc("tech_mad_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"])) {
            messageQueue(loc("tech_mad_info_easter"), "info", false, ["progress"]);
          } else {
            messageQueue(loc("tech_mad_info"), "info", false, ["progress"]);
          }
          global.civic.mad.display = true;
          return true;
        }
        return false;
      }
    },
    cement: {
      id: "tech-cement",
      title: loc("tech_cement"),
      desc: loc("tech_cement_desc"),
      category: "cement",
      era: "civilized",
      reqs: { mining: 1, storage: 1, science: 1 },
      not_trait: ["flier"],
      grant: ["cement", 1],
      cost: {
        Knowledge() {
          return 500;
        }
      },
      effect: loc("tech_cement_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.cement_plant);
          return true;
        }
        return false;
      }
    },
    rebar: {
      id: "tech-rebar",
      title: loc("tech_rebar"),
      desc: loc("tech_rebar"),
      category: "cement",
      era: "civilized",
      reqs: { mining: 3, cement: 1 },
      not_trait: ["flier"],
      grant: ["cement", 2],
      cost: {
        Knowledge() {
          return 3200;
        },
        Iron() {
          return 750;
        }
      },
      effect: loc("tech_rebar_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    steel_rebar: {
      id: "tech-steel_rebar",
      title: loc("tech_steel_rebar"),
      desc: loc("tech_steel_rebar"),
      category: "cement",
      era: "civilized",
      reqs: { smelting: 2, cement: 2 },
      not_trait: ["flier"],
      grant: ["cement", 3],
      cost: {
        Knowledge() {
          return 6750;
        },
        Steel() {
          return 750;
        }
      },
      effect: loc("tech_steel_rebar_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    portland_cement: {
      id: "tech-portland_cement",
      title: loc("tech_portland_cement"),
      desc: loc("tech_portland_cement"),
      category: "cement",
      era: "industrialized",
      reqs: { cement: 3, high_tech: 3 },
      not_trait: ["flier"],
      grant: ["cement", 4],
      cost: {
        Knowledge() {
          return 32e3;
        }
      },
      effect: loc("tech_portland_cement_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    screw_conveyor: {
      id: "tech-screw_conveyor",
      title: loc("tech_screw_conveyor"),
      desc: loc("tech_screw_conveyor"),
      category: "cement",
      era: "globalized",
      reqs: { cement: 4, high_tech: 4 },
      not_trait: ["flier"],
      grant: ["cement", 5],
      cost: {
        Knowledge() {
          return 72e3;
        }
      },
      effect: loc("tech_screw_conveyor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_screws: {
      id: "tech-adamantite_screws",
      title: loc("tech_adamantite_screws"),
      desc: loc("tech_adamantite_screws"),
      category: "cement",
      era: "interstellar",
      reqs: { cement: 5, alpha: 2 },
      not_trait: ["cataclysm", "flier"],
      grant: ["cement", 6],
      cost: {
        Knowledge() {
          return 5e5;
        },
        Adamantite() {
          return 1e4;
        }
      },
      effect: loc("tech_adamantite_screws_effect", [3]),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    otherworldly_binder: {
      id: "tech-otherworldly_binder",
      title: loc("tech_otherworldly_binder"),
      desc: loc("tech_otherworldly_binder"),
      category: "cement",
      era: "existential",
      reqs: { cement: 6, science: 22 },
      not_trait: ["cataclysm", "flier"],
      grant: ["cement", 7],
      cost: {
        Knowledge() {
          return 85e6;
        },
        Omniscience() {
          return 2e4;
        },
        Asphodel_Powder() {
          return 5e4;
        }
      },
      effect() {
        return loc("tech_otherworldly_binder_effect", [global.resource.Asphodel_Powder.name, global.resource.Cement.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    hunter_process: {
      id: "tech-hunter_process",
      title: loc("tech_hunter_process"),
      desc: loc("tech_hunter_process"),
      category: "mining",
      era: "industrialized",
      reqs: { high_tech: 3, smelting: 2 },
      grant: ["titanium", 1],
      cost: {
        Knowledge() {
          return 45e3;
        },
        Titanium() {
          return 1e3;
        }
      },
      effect: loc("tech_hunter_process_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Titanium.value = resource_values["Titanium"];
          return true;
        }
        return false;
      }
    },
    kroll_process: {
      id: "tech-kroll_process",
      title: loc("tech_kroll_process"),
      desc: loc("tech_kroll_process"),
      category: "mining",
      era: "globalized",
      reqs: { titanium: 1, high_tech: 4 },
      grant: ["titanium", 2],
      cost: {
        Knowledge() {
          return 78e3;
        },
        Titanium() {
          return 1e4;
        }
      },
      effect: loc("tech_kroll_process_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cambridge_process: {
      id: "tech-cambridge_process",
      title: loc("tech_cambridge_process"),
      desc: loc("tech_cambridge_process"),
      category: "mining",
      era: "early_space",
      reqs: { titanium: 2, supercollider: 1 },
      grant: ["titanium", 3],
      cost: {
        Knowledge() {
          return 135e3;
        },
        Titanium() {
          return 17500;
        }
      },
      effect: loc("tech_cambridge_process_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pynn_partical: {
      id: "tech-pynn_partical",
      title: loc("tech_pynn_partical"),
      desc: loc("tech_pynn_partical"),
      category: "progress",
      era: "early_space",
      path: ["standard"],
      reqs: { supercollider: 1 },
      grant: ["particles", 1],
      cost: {
        Knowledge() {
          return 1e5;
        }
      },
      effect: loc("tech_pynn_partical_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    matter_compression: {
      id: "tech-matter_compression",
      title: loc("tech_matter_compression"),
      desc: loc("tech_matter_compression"),
      category: "storage",
      era: "early_space",
      path: ["standard"],
      reqs: { particles: 1 },
      grant: ["particles", 2],
      cost: {
        Knowledge() {
          return 112500;
        }
      },
      effect: loc("tech_matter_compression_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    higgs_boson: {
      id: "tech-higgs_boson",
      title: loc("tech_higgs_boson"),
      desc: loc("tech_higgs_boson"),
      category: "science",
      era: "early_space",
      path: ["standard"],
      reqs: { particles: 2, supercollider: 2 },
      grant: ["particles", 3],
      cost: {
        Knowledge() {
          return 125e3;
        }
      },
      effect: loc("tech_higgs_boson_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dimensional_compression: {
      id: "tech-dimensional_compression",
      title: loc("tech_dimensional_compression"),
      desc: loc("tech_dimensional_compression"),
      category: "storage",
      era: "interstellar",
      reqs: { particles: 3, science: 11, supercollider: 3 },
      not_trait: ["warlord"],
      grant: ["particles", 4],
      cost: {
        Knowledge() {
          return 425e3;
        }
      },
      effect: loc("tech_dimensional_compression_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    theology: {
      id: "tech-theology",
      title: loc("tech_theology"),
      desc: loc("tech_theology"),
      category: "religion",
      era: "civilized",
      reqs: { theology: 1, housing: 1, cement: 1 },
      grant: ["theology", 2],
      cost: {
        Knowledge() {
          return 900;
        }
      },
      effect: loc("tech_theology_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.temple);
          if (global.race["magnificent"]) {
            initStruct(actions.city.shrine);
          }
          if (global.genes["ancients"] && global.genes["ancients"] >= 2) {
            global.civic.priest.display = true;
          }
          return true;
        }
        return false;
      }
    },
    fanaticism: {
      id: "tech-fanaticism",
      title: loc("tech_fanaticism"),
      desc: loc("tech_fanaticism"),
      category: "religion",
      era: "civilized",
      wiki: global.genes["transcendence"] ? false : true,
      reqs: { theology: 2 },
      grant: ["theology", 3],
      not_gene: ["transcendence"],
      no_queue() {
        return global.r_queue.queue.some((item) => item.id === "tech-anthropology") ? true : false;
      },
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: `<div>${loc("tech_fanaticism_effect")}</div><div class="has-text-special">${loc("tech_fanaticism_warning")}</div>`,
      action() {
        if (payCosts($(this)[0])) {
          global.tech["fanaticism"] = 1;
          if (global.race.gods === global.race.species) {
            unlockAchieve(`second_evolution`);
          }
          fanaticism(global.race.gods);
          if (global.race["warlord"]) {
            global.portal.throne.points++;
          }
          return true;
        }
        return false;
      }
    },
    alt_fanaticism: {
      id: "tech-alt_fanaticism",
      title: loc("tech_fanaticism"),
      desc: loc("tech_fanaticism"),
      category: "religion",
      era: "civilized",
      wiki: global.genes["transcendence"] ? true : false,
      reqs: { theology: 2 },
      grant: ["fanaticism", 1],
      gene: ["transcendence"],
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: `<div>${loc("tech_fanaticism_effect")}</div>`,
      action() {
        if (payCosts($(this)[0])) {
          if (global.tech["theology"] === 2) {
            global.tech["theology"] = 3;
          }
          if (global.race.gods === global.race.species) {
            unlockAchieve(`second_evolution`);
          }
          fanaticism(global.race.gods);
          if (global.race["warlord"]) {
            global.portal.throne.points++;
          }
          return true;
        }
        return false;
      }
    },
    ancient_theology: {
      id: "tech-ancient_theology",
      title: loc("tech_ancient_theology"),
      desc: loc("tech_ancient_theology"),
      category: "religion",
      era: "early_space",
      reqs: { theology: 3, mars: 2 },
      grant: ["theology", 4],
      condition() {
        return global.genes["ancients"] ? true : false;
      },
      cost: {
        Knowledge() {
          return 18e4;
        }
      },
      effect() {
        let entityA = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
        let entityB = global.race.gods !== "none" ? races[global.race.gods.toLowerCase()].entity : races[global.race.species].entity;
        return loc("tech_ancient_theology_effect", [entityA, entityB]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.ziggurat);
          return true;
        }
        return false;
      }
    },
    study: {
      id: "tech-study",
      title: loc("tech_study"),
      desc: loc("tech_study_desc"),
      category: "religion",
      era: "early_space",
      reqs: { theology: 4 },
      grant: ["theology", 5],
      wiki: global.genes["transcendence"] && global.genes.transcendence >= 2 ? false : true,
      condition() {
        return !global.genes["transcendence"] || global.genes.transcendence < 2 ? true : false;
      },
      no_queue() {
        return global.r_queue.queue.some((item) => item.id === "tech-deify") ? true : false;
      },
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect() {
        let entity = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
        return `<div>${loc("tech_study_effect", [entity])}</div><div class="has-text-special">${loc("tech_study_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["ancient_study"] = 1;
          return true;
        }
        return false;
      }
    },
    study_alt: {
      id: "tech-study_alt",
      title: loc("tech_study"),
      desc: loc("tech_study_desc"),
      category: "religion",
      era: "early_space",
      reqs: { theology: 4 },
      grant: ["ancient_study", 1],
      wiki: global.genes["transcendence"] && global.genes.transcendence >= 2 ? true : false,
      condition() {
        return global.genes["transcendence"] && global.genes.transcendence >= 2 ? true : false;
      },
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect() {
        let entity = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
        return `<div>${loc("tech_study_effect", [entity])}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    encoding: {
      id: "tech-encoding",
      title: loc("tech_encoding"),
      desc: loc("tech_encoding_desc"),
      category: "religion",
      era: "deep_space",
      reqs: { ancient_study: 1, mars: 5 },
      grant: ["ancient_study", 2],
      cost: {
        Knowledge() {
          return 268e3;
        }
      },
      effect() {
        return `<div>${loc("tech_encoding_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    deify: {
      id: "tech-deify",
      title: loc("tech_deify"),
      desc: loc("tech_deify_desc"),
      category: "religion",
      era: "early_space",
      reqs: { theology: 4 },
      grant: ["theology", 5],
      wiki: global.genes["transcendence"] && global.genes.transcendence >= 2 ? false : true,
      condition() {
        return !global.genes["transcendence"] || global.genes.transcendence < 2 ? true : false;
      },
      no_queue() {
        return global.r_queue.queue.some((item) => item.id === "tech-study") ? true : false;
      },
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect() {
        let entity = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
        return `<div>${loc("tech_deify_effect", [entity])}</div><div class="has-text-special">${loc("tech_deify_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["ancient_deify"] = 1;
          fanaticism(global.race.old_gods);
          if (global.race["warlord"]) {
            global.portal.throne.points++;
          }
          return true;
        }
        return false;
      }
    },
    deify_alt: {
      id: "tech-deify_alt",
      title: loc("tech_deify"),
      desc: loc("tech_deify_desc"),
      category: "religion",
      era: "early_space",
      reqs: { theology: 4 },
      grant: ["ancient_deify", 1],
      wiki: global.genes["transcendence"] && global.genes.transcendence >= 2 ? true : false,
      condition() {
        return global.genes["transcendence"] && global.genes.transcendence >= 2 ? true : false;
      },
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect() {
        let entity = global.race.old_gods !== "none" ? races[global.race.old_gods.toLowerCase()].entity : races[global.race.species].entity;
        return `<div>${loc("tech_deify_effect", [entity])}</div><div class="has-text-special">${loc("tech_deify_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          fanaticism(global.race.old_gods);
          if (global.race["warlord"]) {
            global.portal.throne.points++;
          }
          return true;
        }
        return false;
      }
    },
    infusion: {
      id: "tech-infusion",
      title: loc("tech_infusion"),
      desc: loc("tech_infusion_desc"),
      category: "religion",
      era: "deep_space",
      reqs: { ancient_deify: 1, mars: 5 },
      grant: ["ancient_deify", 2],
      cost: {
        Knowledge() {
          return 268e3;
        }
      },
      effect() {
        return `<div>${loc("tech_infusion_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    indoctrination: {
      id: "tech-indoctrination",
      title: loc("tech_indoctrination"),
      desc: loc("tech_indoctrination"),
      category: "religion",
      era: "civilized",
      reqs: { fanaticism: 1 },
      grant: ["fanaticism", 2],
      cost: {
        Knowledge() {
          return 5e3;
        }
      },
      effect: loc("tech_indoctrination_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        if (global.race["terrifying"]) {
          global.tech["fanaticism"] = 3;
          drawTech();
        }
      }
    },
    missionary: {
      id: "tech-missionary",
      title: loc("tech_missionary"),
      desc: loc("tech_missionary"),
      category: "religion",
      era: "discovery",
      reqs: { fanaticism: 2 },
      not_trait: ["terrifying"],
      grant: ["fanaticism", 3],
      cost: {
        Knowledge() {
          return 1e4;
        }
      },
      effect: loc("tech_missionary_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    zealotry: {
      id: "tech-zealotry",
      title: loc("tech_zealotry"),
      desc: loc("tech_zealotry"),
      category: "religion",
      era: "discovery",
      reqs: { fanaticism: 3 },
      grant: ["fanaticism", 4],
      cost: {
        Knowledge() {
          return 25e3;
        }
      },
      effect: loc("tech_zealotry_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    anthropology: {
      id: "tech-anthropology",
      title: loc("tech_anthropology"),
      desc: loc("tech_anthropology"),
      category: "religion",
      era: "civilized",
      wiki: global.genes["transcendence"] ? false : true,
      reqs: { theology: 2 },
      grant: ["theology", 3],
      not_gene: ["transcendence"],
      no_queue() {
        return global.r_queue.queue.some((item) => item.id === "tech-fanaticism") ? true : false;
      },
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: `<div>${loc("tech_anthropology_effect")}</div><div class="has-text-special">${loc("tech_anthropology_warning")}</div>`,
      action() {
        if (payCosts($(this)[0])) {
          global.tech["anthropology"] = 1;
          return true;
        }
        return false;
      }
    },
    alt_anthropology: {
      id: "tech-alt_anthropology",
      title: loc("tech_anthropology"),
      desc: loc("tech_anthropology"),
      category: "religion",
      era: "civilized",
      wiki: global.genes["transcendence"] ? true : false,
      reqs: { theology: 2 },
      grant: ["anthropology", 1],
      gene: ["transcendence"],
      cost: {
        Knowledge() {
          return 2500;
        }
      },
      effect: `<div>${loc("tech_anthropology_effect")}</div>`,
      action() {
        if (payCosts($(this)[0])) {
          if (global.tech["theology"] === 2) {
            global.tech["theology"] = 3;
          }
          return true;
        }
        return false;
      }
    },
    mythology: {
      id: "tech-mythology",
      title: loc("tech_mythology"),
      desc: loc("tech_mythology"),
      category: "religion",
      era: "civilized",
      reqs: { anthropology: 1 },
      grant: ["anthropology", 2],
      cost: {
        Knowledge() {
          return 5e3;
        }
      },
      effect: loc("tech_mythology_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    archaeology: {
      id: "tech-archaeology",
      title: loc("tech_archaeology"),
      desc: loc("tech_archaeology"),
      category: "science",
      era: "discovery",
      reqs: { anthropology: 2 },
      grant: ["anthropology", 3],
      cost: {
        Knowledge() {
          return 1e4;
        }
      },
      effect: loc("tech_archaeology_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    merchandising: {
      id: "tech-merchandising",
      title: loc("tech_merchandising"),
      desc: loc("tech_merchandising"),
      category: "banking",
      era: "discovery",
      reqs: { anthropology: 3 },
      grant: ["anthropology", 4],
      cost: {
        Knowledge() {
          return 25e3;
        }
      },
      effect() {
        return global.race["truepath"] ? loc("tech_merchandising_effect_tp") : loc("tech_merchandising_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    astrophysics: {
      id: "tech-astrophysics",
      title: loc("tech_astrophysics"),
      desc: loc("tech_astrophysics_desc"),
      category: "space_exploration",
      era: "early_space",
      reqs: { space: 2 },
      grant: ["space_explore", 1],
      cost: {
        Knowledge() {
          return 125e3;
        }
      },
      effect: loc("tech_astrophysics_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_home.propellant_depot);
          return true;
        }
        return false;
      }
    },
    rover: {
      id: "tech-rover",
      title: loc("tech_rover"),
      desc: loc("tech_rover"),
      category: "space_exploration",
      era: "early_space",
      reqs: { space_explore: 1 },
      grant: ["space_explore", 2],
      cost: {
        Knowledge() {
          return 135e3;
        },
        Alloy() {
          return 22e3;
        },
        Polymer() {
          return 18e3;
        },
        Uranium() {
          return 750;
        }
      },
      effect: loc("tech_rover_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.moon = true;
          initStruct(actions.space.spc_moon.moon_base);
          return true;
        }
        return false;
      }
    },
    probes: {
      id: "tech-probes",
      title: loc("tech_probes"),
      desc: loc("tech_probes"),
      category: "space_exploration",
      era: "early_space",
      reqs: { space_explore: 2 },
      grant: ["space_explore", 3],
      cost: {
        Knowledge() {
          return 168e3;
        },
        Steel() {
          return 1e5;
        },
        Iridium() {
          return 5e3;
        },
        Uranium() {
          return 2250;
        },
        Helium_3() {
          return 3500;
        }
      },
      effect: loc("tech_probes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.red = true;
          global.settings.space.hell = true;
          initStruct(actions.space.spc_red.spaceport);
          return true;
        }
        return false;
      }
    },
    starcharts: {
      id: "tech-starcharts",
      title: loc("tech_starcharts"),
      desc: loc("tech_starcharts"),
      category: "space_exploration",
      era: "early_space",
      reqs: { space_explore: 3, science: 9 },
      grant: ["space_explore", 4],
      cost: {
        Knowledge() {
          return 185e3;
        }
      },
      effect: loc("tech_starcharts_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.gas = true;
          global.settings.space.sun = true;
          if (global.race["truepath"]) {
            global.settings.showOuter = true;
          }
          initStruct(actions.space.spc_sun.swarm_control);
          return true;
        }
        return false;
      }
    },
    colonization: {
      id: "tech-colonization",
      title: loc("tech_colonization"),
      desc() {
        return loc("tech_colonization_desc", [planetName().red]);
      },
      category: "agriculture",
      era: "early_space",
      reqs: { space: 4, mars: 1 },
      grant: ["mars", 2],
      cost: {
        Knowledge() {
          return 172e3;
        }
      },
      effect() {
        return loc(global.race["artifical"] ? "tech_colonization_artifical_effect" : "tech_colonization_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.biodome);
          return true;
        }
        return false;
      }
    },
    red_tower: {
      id: "tech-red_tower",
      title() {
        return loc("tech_red_tower", [planetName().red]);
      },
      desc() {
        return loc("tech_red_tower", [planetName().red]);
      },
      category: "space_exploration",
      era: "early_space",
      reqs: { mars: 2 },
      grant: ["mars", 3],
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect() {
        return loc("tech_red_tower_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.red_tower);
          return true;
        }
        return false;
      }
    },
    space_manufacturing: {
      id: "tech-space_manufacturing",
      title: loc("tech_space_manufacturing"),
      desc: loc("tech_space_manufacturing_desc"),
      category: "crafting",
      era: "early_space",
      reqs: { mars: 3 },
      grant: ["mars", 4],
      cost: {
        Knowledge() {
          return 22e4;
        }
      },
      effect() {
        return loc("tech_space_manufacturing_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.red_factory);
          return true;
        }
        return false;
      }
    },
    exotic_lab: {
      id: "tech-exotic_lab",
      title: loc("tech_exotic_lab"),
      desc: loc("tech_exotic_lab_desc"),
      category: "science",
      era: "deep_space",
      reqs: { mars: 4, asteroid: 5 },
      grant: ["mars", 5],
      cost: {
        Knowledge() {
          return 25e4;
        }
      },
      effect: loc("tech_exotic_lab_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.exotic_lab);
          return true;
        }
        return false;
      }
    },
    hydroponics: {
      id: "tech-hydroponics",
      title: loc("tech_hydroponics"),
      desc() {
        return loc("tech_hydroponics");
      },
      category: "agriculture",
      era: "intergalactic",
      reqs: { mars: 5, gateway: 3 },
      grant: ["mars", 6],
      cost: {
        Knowledge() {
          return 3e6;
        },
        Bolognium() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_hydroponics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dyson_sphere: {
      id: "tech-dyson_sphere",
      title: loc("tech_dyson_sphere"),
      desc: loc("tech_dyson_sphere"),
      category: "power_generation",
      era: "early_space",
      reqs: { solar: 1 },
      grant: ["solar", 2],
      cost: {
        Knowledge() {
          return 195e3;
        }
      },
      effect: loc("tech_dyson_sphere_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dyson_swarm: {
      id: "tech-dyson_swarm",
      title: loc("tech_dyson_swarm"),
      desc: loc("tech_dyson_swarm"),
      category: "power_generation",
      era: "early_space",
      reqs: { solar: 2 },
      grant: ["solar", 3],
      cost: {
        Knowledge() {
          return 21e4;
        }
      },
      effect: loc("tech_dyson_swarm_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_sun.swarm_satellite);
          return true;
        }
        return false;
      }
    },
    swarm_plant: {
      id: "tech-swarm_plant",
      title: loc("tech_swarm_plant"),
      desc: loc("tech_swarm_plant"),
      category: "power_generation",
      era: "deep_space",
      reqs: { solar: 3, hell: 1, gas_moon: 1 },
      grant: ["solar", 4],
      cost: {
        Knowledge() {
          return 25e4;
        }
      },
      effect() {
        return loc("tech_swarm_plant_effect", [races[global.race.species].home, planetName().hell]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_hell.swarm_plant);
          return true;
        }
        return false;
      }
    },
    space_sourced: {
      id: "tech-space_sourced",
      title: loc("tech_space_sourced"),
      desc: loc("tech_space_sourced_desc"),
      category: "power_generation",
      era: "deep_space",
      reqs: { solar: 4, asteroid: 3 },
      grant: ["solar", 5],
      cost: {
        Knowledge() {
          return 3e5;
        }
      },
      effect: loc("tech_space_sourced_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    swarm_plant_ai: {
      id: "tech-swarm_plant_ai",
      title: loc("tech_swarm_plant_ai"),
      desc: loc("tech_swarm_plant_ai"),
      category: "power_generation",
      era: "deep_space",
      reqs: { solar: 4, high_tech: 10 },
      grant: ["swarm", 1],
      cost: {
        Knowledge() {
          return 335e3;
        }
      },
      effect: loc("tech_swarm_plant_ai_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    swarm_control_ai: {
      id: "tech-swarm_control_ai",
      title: loc("tech_swarm_control_ai"),
      desc: loc("tech_swarm_control_ai"),
      category: "power_generation",
      era: "deep_space",
      reqs: { swarm: 1 },
      grant: ["swarm", 2],
      cost: {
        Knowledge() {
          return 36e4;
        }
      },
      effect: loc("tech_swarm_control_ai_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    quantum_swarm: {
      id: "tech-quantum_swarm",
      title: loc("tech_quantum_swarm"),
      desc: loc("tech_quantum_swarm"),
      category: "power_generation",
      era: "deep_space",
      reqs: { swarm: 2, high_tech: 11 },
      grant: ["swarm", 3],
      cost: {
        Knowledge() {
          return 45e4;
        }
      },
      effect: loc("tech_quantum_swarm_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    perovskite_cell: {
      id: "tech-perovskite_cell",
      title: loc("tech_perovskite_cell"),
      desc: loc("tech_perovskite_cell"),
      category: "power_generation",
      era: "interstellar",
      reqs: { swarm: 3 },
      grant: ["swarm", 4],
      path: ["standard", "truepath"],
      cost: {
        Knowledge() {
          return 525e3;
        },
        Titanium() {
          return 1e5;
        }
      },
      effect: loc("tech_perovskite_cell_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    swarm_convection: {
      id: "tech-swarm_convection",
      title: loc("tech_swarm_convection"),
      desc: loc("tech_swarm_convection"),
      category: "power_generation",
      era: "interstellar",
      reqs: { swarm: 4, stanene: 1 },
      grant: ["swarm", 5],
      path: ["standard", "truepath"],
      cost: {
        Knowledge() {
          return 725e3;
        },
        Stanene() {
          return 1e5;
        }
      },
      effect: loc("tech_swarm_convection_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    orichalcum_panels: {
      id: "tech-orichalcum_panels",
      title: loc("tech_orichalcum_panels"),
      desc: loc("tech_orichalcum_panels"),
      category: "power_generation",
      era: "intergalactic",
      reqs: { high_tech: 17, swarm: 5 },
      grant: ["swarm", 6],
      cost: {
        Knowledge() {
          return 14e6;
        },
        Orichalcum() {
          return 125e3;
        }
      },
      effect() {
        return loc("tech_orichalcum_panels_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dyson_net: {
      id: "tech-dyson_net",
      title: loc("tech_dyson_net"),
      desc: loc("tech_dyson_net"),
      category: "power_generation",
      era: "interstellar",
      reqs: { solar: 3, proxima: 2, stanene: 1 },
      grant: ["proxima", 3],
      cost: {
        Knowledge() {
          return 8e5;
        }
      },
      effect: loc("tech_dyson_net_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_proxima.dyson);
          return true;
        }
        return false;
      }
    },
    dyson_sphere2: {
      id: "tech-dyson_sphere2",
      title: loc("tech_dyson_sphere"),
      desc: loc("tech_dyson_sphere"),
      category: "power_generation",
      era: "intergalactic",
      reqs: { proxima: 3, piracy: 1 },
      grant: ["dyson", 1],
      cost: {
        Knowledge() {
          return 5e6;
        }
      },
      effect: loc("tech_dyson_sphere2_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_proxima.dyson_sphere);
          return true;
        }
        return false;
      }
    },
    orichalcum_sphere: {
      id: "tech-orichalcum_sphere",
      title: loc("tech_orichalcum_sphere"),
      desc: loc("tech_orichalcum_sphere"),
      category: "power_generation",
      era: "intergalactic",
      reqs: { dyson: 1, science: 19 },
      condition() {
        return global.interstellar["dyson_sphere"] && global.interstellar.dyson_sphere.count >= 100 ? true : false;
      },
      grant: ["dyson", 2],
      cost: {
        Knowledge() {
          return 175e5;
        },
        Orichalcum() {
          return 25e4;
        }
      },
      effect: loc("tech_orichalcum_sphere_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_proxima.orichalcum_sphere);
          return true;
        }
        return false;
      }
    },
    elysanite_sphere: {
      id: "tech-elysanite_sphere",
      title: loc("tech_elysanite_sphere"),
      desc: loc("tech_elysanite_sphere"),
      category: "power_generation",
      era: "existential",
      reqs: { high_tech: 19, dyson: 2 },
      condition() {
        return global.interstellar?.orichalcum_sphere?.count >= 100;
      },
      grant: ["dyson", 3],
      cost: {
        Knowledge() {
          return 1225e5;
        },
        Omniscience() {
          return 36500;
        }
      },
      effect() {
        return loc("tech_elysanite_sphere_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_proxima.elysanite_sphere);
          return true;
        }
        return false;
      }
    },
    gps: {
      id: "tech-gps",
      title: loc("tech_gps"),
      desc: loc("tech_gps"),
      category: "market",
      era: "early_space",
      reqs: { space_explore: 1 },
      not_trait: ["terrifying"],
      grant: ["satellite", 1],
      cost: {
        Knowledge() {
          return 15e4;
        }
      },
      effect: loc("tech_gps_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_home.gps);
          return true;
        }
        return false;
      }
    },
    nav_beacon: {
      id: "tech-nav_beacon",
      title: loc("tech_nav_beacon"),
      desc: loc("tech_nav_beacon"),
      category: "space_exploration",
      era: "early_space",
      reqs: { luna: 1 },
      grant: ["luna", 2],
      cost: {
        Knowledge() {
          return 18e4;
        }
      },
      effect: loc("tech_nav_beacon_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_home.nav_beacon);
          return true;
        }
        return false;
      }
    },
    subspace_signal: {
      id: "tech-subspace_signal",
      title: loc("tech_subspace_signal"),
      desc: loc("tech_subspace_signal"),
      category: "space_exploration",
      era: "interstellar",
      reqs: { science: 13, luna: 2, stanene: 1 },
      not_trait: ["warlord"],
      grant: ["luna", 3],
      cost: {
        Knowledge() {
          return 7e5;
        },
        Stanene() {
          return 125e3;
        }
      },
      effect() {
        return loc("tech_subspace_signal_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    atmospheric_mining: {
      id: "tech-atmospheric_mining",
      title: loc("tech_atmospheric_mining"),
      desc: loc("tech_atmospheric_mining"),
      category: "power_generation",
      era: "early_space",
      reqs: { space: 5 },
      grant: ["gas_giant", 1],
      cost: {
        Knowledge() {
          return 19e4;
        }
      },
      effect: loc("tech_atmospheric_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_gas.gas_mining);
          initStruct(actions.space.spc_gas.gas_storage);
          return true;
        }
        return false;
      }
    },
    helium_attractor: {
      id: "tech-helium_attractor",
      title: loc("tech_helium_attractor"),
      desc: loc("tech_helium_attractor"),
      category: "power_generation",
      era: "deep_space",
      reqs: { gas_giant: 1, elerium: 1 },
      grant: ["helium", 1],
      cost: {
        Knowledge() {
          return 29e4;
        },
        Elerium() {
          return 250;
        }
      },
      effect() {
        return loc("tech_helium_attractor_effect", [planetName().gas]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ram_scoops: {
      id: "tech-ram_scoops",
      title: loc("tech_ram_scoops"),
      desc: loc("tech_ram_scoops"),
      category: "power_generation",
      era: "interstellar",
      reqs: { nebula: 2 },
      grant: ["ram_scoop", 1],
      cost: {
        Knowledge() {
          return 58e4;
        }
      },
      effect() {
        return loc("tech_ram_scoops_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elerium_prospecting: {
      id: "tech-elerium_prospecting",
      title: loc("tech_elerium_prospecting"),
      desc: loc("tech_elerium_prospecting"),
      category: "space_mining",
      era: "interstellar",
      reqs: { nebula: 2 },
      grant: ["nebula", 3],
      cost: {
        Knowledge() {
          return 61e4;
        }
      },
      effect() {
        return loc("tech_elerium_prospecting_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_nebula.elerium_prospector);
          return true;
        }
        return false;
      }
    },
    zero_g_mining: {
      id: "tech-zero_g_mining",
      title: loc("tech_zero_g_mining"),
      desc: loc("tech_zero_g_mining"),
      category: "space_mining",
      era: "early_space",
      reqs: { asteroid: 1, high_tech: 8 },
      grant: ["asteroid", 2],
      cost: {
        Knowledge() {
          return 21e4;
        }
      },
      effect: loc("tech_zero_g_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_belt.space_station);
          initStruct(actions.space.spc_belt.iridium_ship);
          initStruct(actions.space.spc_belt.iron_ship);
          return true;
        }
        return false;
      }
    },
    elerium_mining: {
      id: "tech-elerium_mining",
      title: loc("tech_elerium_mining"),
      desc: loc("tech_elerium_mining"),
      category: "space_mining",
      era: "deep_space",
      reqs: { asteroid: 4 },
      grant: ["asteroid", 5],
      cost: {
        Knowledge() {
          return 235e3;
        },
        Elerium() {
          return global.race["truepath"] ? 0.5 : 1;
        }
      },
      effect: loc("tech_elerium_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_belt.elerium_ship);
          if (global.race["cataclysm"]) {
            unlockAchieve("iron_will", false, 2);
          }
          return true;
        }
        return false;
      }
    },
    laser_mining: {
      id: "tech-laser_mining",
      title: loc("tech_laser_mining"),
      desc: loc("tech_laser_mining"),
      category: "space_mining",
      era: "deep_space",
      reqs: { asteroid: 5, elerium: 1, high_tech: 9 },
      grant: ["asteroid", 6],
      cost: {
        Knowledge() {
          return 35e4;
        }
      },
      effect: loc("tech_laser_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    plasma_mining: {
      id: "tech-plasma_mining",
      title: loc("tech_plasma_mining"),
      desc: loc("tech_plasma_mining"),
      category: "space_mining",
      era: "interstellar",
      reqs: { asteroid: 6, high_tech: 13 },
      grant: ["asteroid", 7],
      path: ["standard", "truepath"],
      cost: {
        Knowledge() {
          return 825e3;
        }
      },
      effect: loc("tech_plasma_mining_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elerium_tech: {
      id: "tech-elerium_tech",
      title: loc("tech_elerium_tech"),
      desc: loc("tech_elerium_tech"),
      category: "space_mining",
      era: "deep_space",
      reqs: { asteroid: 5 },
      grant: ["elerium", 1],
      cost: {
        Knowledge() {
          return 275e3;
        },
        Elerium() {
          return 20;
        }
      },
      effect: loc("tech_elerium_tech_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elerium_reactor: {
      id: "tech-elerium_reactor",
      title: loc("tech_elerium_reactor"),
      desc: loc("tech_elerium_reactor"),
      category: "power_generation",
      era: "deep_space",
      reqs: { dwarf: 1, elerium: 1 },
      grant: ["elerium", 2],
      cost: {
        Knowledge() {
          return 325e3;
        },
        Elerium() {
          return 180;
        }
      },
      effect: loc("tech_elerium_reactor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_dwarf.e_reactor);
          return true;
        }
        return false;
      }
    },
    neutronium_housing: {
      id: "tech-neutronium_housing",
      title: loc("tech_neutronium_housing"),
      desc: loc("tech_neutronium_housing"),
      category: "housing",
      era: "deep_space",
      reqs: { gas_moon: 1 },
      grant: ["space_housing", 1],
      cost: {
        Knowledge() {
          return 275e3;
        },
        Neutronium() {
          return 350;
        }
      },
      effect() {
        return loc("tech_neutronium_housing_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    unification: {
      id: "tech-unification",
      title: loc("tech_unification"),
      desc() {
        return loc("tech_unification_desc", [races[global.race.species].home]);
      },
      category: "special",
      era: "early_space",
      path: ["standard"],
      reqs: { mars: 2 },
      grant: ["unify", 1],
      cost: {
        Knowledge() {
          return 2e5;
        }
      },
      effect: loc("tech_unification_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    unification2: {
      id: "tech-unification2",
      title: loc("tech_unification"),
      desc() {
        return loc("tech_unification_desc", [races[global.race.species].home]);
      },
      category: "special",
      era: "early_space",
      path: ["standard"],
      reqs: { unify: 1 },
      grant: ["unify", 2],
      cost: {
        Bool() {
          let owned = 0;
          for (let i = 0; i < 3; i++) {
            if (global.civic.foreign[`gov${i}`].occ || global.civic.foreign[`gov${i}`].buy || global.civic.foreign[`gov${i}`].anx) {
              owned++;
            }
          }
          return owned === 3 ? true : false;
        }
      },
      effect() {
        let banana_warn = global.race["banana"] ? `<div class="has-text-danger">${loc("tech_unification_banana")}</div>` : "";
        return `<div>${loc("tech_unification_effect2")}</div><div class="has-text-special">${loc("tech_unification_warning")}</div>${banana_warn}`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["banana"]) {
            if (!global["sim"]) {
              save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
            }
            delete global.race["banana"];
          }
          if (global.civic.foreign.gov0.occ && global.civic.foreign.gov1.occ && global.civic.foreign.gov2.occ) {
            unlockAchieve(`world_domination`);
          }
          if (global.civic.foreign.gov0.anx && global.civic.foreign.gov1.anx && global.civic.foreign.gov2.anx) {
            unlockAchieve(`illuminati`);
          }
          if (global.civic.foreign.gov0.buy && global.civic.foreign.gov1.buy && global.civic.foreign.gov2.buy) {
            unlockAchieve(`syndicate`);
          }
          if (global.stats.attacks === 0) {
            unlockAchieve(`pacifist`);
          }
          uniteEffect();
          return true;
        }
        return false;
      }
    },
    unite: {
      id: "tech-unite",
      title: loc("tech_unite"),
      desc() {
        return loc("tech_unite_desc");
      },
      category: "special",
      era: "globalized",
      path: ["truepath"],
      reqs: { unify: 1 },
      grant: ["unify", 2],
      cost: {
        Bool() {
          let owned = 0;
          for (let i = 0; i < 3; i++) {
            if (global.civic.foreign[`gov${i}`].occ || global.civic.foreign[`gov${i}`].buy || global.civic.foreign[`gov${i}`].anx) {
              owned++;
            }
          }
          return owned === 3 ? true : false;
        }
      },
      effect() {
        return `<div>${loc("tech_unite_effect")}</div><div class="has-text-warning">${loc("tech_unification_effect2")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["banana"]) {
            if (!global["sim"]) {
              save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
            }
            delete global.race["banana"];
          }
          if (global.civic.foreign.gov0.occ && global.civic.foreign.gov1.occ && global.civic.foreign.gov2.occ) {
            unlockAchieve(`world_domination`);
          }
          if (global.civic.foreign.gov0.anx && global.civic.foreign.gov1.anx && global.civic.foreign.gov2.anx) {
            unlockAchieve(`illuminati`);
          }
          if (global.civic.foreign.gov0.buy && global.civic.foreign.gov1.buy && global.civic.foreign.gov2.buy) {
            unlockAchieve(`syndicate`);
          }
          if (global.stats.attacks === 0) {
            unlockAchieve(`pacifist`);
          }
          uniteEffect();
          if (global.race["truepath"] && !global.tech["rival"]) {
            global.tech["rival"] = 1;
            messageQueue(loc(`civics_rival_unlocked`, [govTitle(3)]), "info", false, ["progress", "combat"]);
          }
          return true;
        }
        return false;
      }
    },
    genesis: {
      id: "tech-genesis",
      title: loc("tech_genesis"),
      desc: loc("tech_genesis"),
      category: "special",
      era: "deep_space",
      reqs: { high_tech: 10, genesis: 1 },
      grant: ["genesis", 2],
      cost: {
        Knowledge() {
          return 35e4;
        }
      },
      effect: loc("tech_genesis_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    star_dock: {
      id: "tech-star_dock",
      title: loc("tech_star_dock"),
      desc: loc("tech_star_dock"),
      category: "special",
      era: "deep_space",
      reqs: { genesis: 2, space: 5, high_tech: 10 },
      grant: ["genesis", 3],
      not_trait: ["lone_survivor", "warlord"],
      cost: {
        Knowledge() {
          return 38e4;
        }
      },
      effect: loc("tech_star_dock_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_gas.star_dock);
          return true;
        }
        return false;
      }
    },
    interstellar: {
      id: "tech-interstellar",
      title: loc("tech_interstellar"),
      desc: loc("tech_interstellar"),
      category: "space_exploration",
      era: "deep_space",
      reqs: { genesis: 3 },
      grant: ["genesis", 4],
      cost: {
        Knowledge() {
          return 4e5;
        }
      },
      effect: loc("tech_interstellar_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.starDock.probes);
          return true;
        }
        return false;
      }
    },
    genesis_ship: {
      id: "tech-genesis_ship",
      title() {
        return global.race["cataclysm"] ? loc("tech_generational_ship") : loc("tech_genesis_ship");
      },
      desc() {
        return global.race["cataclysm"] ? loc("tech_generational_ship") : loc("tech_genesis_ship");
      },
      category: "special",
      era: "deep_space",
      reqs: { genesis: 4 },
      grant: ["genesis", 5],
      cost: {
        Knowledge() {
          return 425e3;
        }
      },
      effect() {
        return global.race["cataclysm"] ? loc("tech_generational_effect") : loc("tech_genesis_ship_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.starDock.seeder);
          if (global.race["cataclysm"]) {
            unlockAchieve("iron_will", false, 4);
          }
          return true;
        }
        return false;
      }
    },
    geck: {
      id: "tech-geck",
      title() {
        return loc("tech_geck");
      },
      desc() {
        return loc("tech_geck_desc");
      },
      category: "special",
      era: "deep_space",
      reqs: { genesis: 5 },
      grant: ["geck", 1],
      condition() {
        return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 5 ? true : false;
      },
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_geck_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.starDock.geck);
          return true;
        }
        return false;
      }
    },
    genetic_decay: {
      id: "tech-genetic_decay",
      title: loc("tech_genetic_decay"),
      desc: loc("tech_genetic_decay"),
      category: "genes",
      era: "early_space",
      reqs: { decay: 1 },
      grant: ["decay", 2],
      cost: {
        Knowledge() {
          return 2e5;
        }
      },
      effect: loc("tech_genetic_decay_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    stabilize_decay: {
      id: "tech-stabilize_decay",
      title: loc("tech_stabilize_decay"),
      desc: loc("tech_stabilize_decay"),
      category: "genes",
      era: "dimensional",
      reqs: { decay: 2, high_tech: 18 },
      grant: ["decay", 3],
      cost: {
        Knowledge() {
          return 5e7;
        },
        Blood_Stone() {
          return 1;
        }
      },
      effect: loc("tech_stabilize_decay_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    tachyon: {
      id: "tech-tachyon",
      title: loc("tech_tachyon"),
      desc: loc("tech_tachyon"),
      category: "progress",
      era: "interstellar",
      reqs: { wsc: 1 },
      grant: ["ftl", 1],
      cost: {
        Knowledge() {
          return 435e3;
        }
      },
      effect: loc("tech_tachyon_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    warp_drive: {
      id: "tech-warp_drive",
      title: loc("tech_warp_drive"),
      desc: loc("tech_warp_drive"),
      category: "space_exploration",
      era: "interstellar",
      reqs: { ftl: 1 },
      grant: ["ftl", 2],
      cost: {
        Knowledge() {
          return 45e4;
        }
      },
      effect: loc("tech_warp_drive_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showDeep = true;
          global.settings.space.alpha = true;
          initStruct(actions.interstellar.int_alpha.starport);
          return true;
        }
        return false;
      }
    },
    habitat: {
      id: "tech-habitat",
      title: loc("tech_habitat"),
      desc: loc("tech_habitat_desc"),
      category: "housing",
      era: "interstellar",
      reqs: { alpha: 2, droids: 1 },
      grant: ["alpha", 3],
      cost: {
        Knowledge() {
          return 48e4;
        }
      },
      effect: loc("tech_habitat_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.habitat);
          return true;
        }
        return false;
      }
    },
    graphene: {
      id: "tech-graphene",
      title: loc("tech_graphene"),
      desc: loc("tech_graphene"),
      category: "crafting",
      era: "interstellar",
      reqs: { alpha: 3, infernite: 1 },
      grant: ["graphene", 1],
      cost: {
        Knowledge() {
          return 54e4;
        },
        Adamantite() {
          return 1e4;
        }
      },
      effect: loc("tech_graphene_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.g_factory);
          return true;
        }
        return false;
      }
    },
    aerogel: {
      id: "tech-aerogel",
      title: loc("tech_aerogel"),
      desc: loc("tech_aerogel"),
      category: "crafting",
      era: "interstellar",
      reqs: { graphene: 1, science: 13 },
      grant: ["aerogel", 1],
      cost: {
        Knowledge() {
          return 75e4;
        },
        Graphene() {
          return 5e4;
        },
        Infernite() {
          return 500;
        }
      },
      effect: loc("tech_aerogel_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Aerogel.display = true;
          loadFoundry();
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    mega_manufacturing: {
      id: "tech-mega_manufacturing",
      title: loc("tech_mega_manufacturing"),
      desc: loc("tech_mega_manufacturing"),
      category: "crafting",
      era: "intergalactic",
      reqs: { high_tech: 16, alpha: 3 },
      grant: ["alpha", 4],
      cost: {
        Knowledge() {
          return 565e4;
        }
      },
      effect() {
        return loc("tech_mega_manufacturing_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.int_factory);
          return true;
        }
        return false;
      }
    },
    luxury_condo: {
      id: "tech-luxury_condo",
      title: loc("tech_luxury_condo"),
      desc: loc("tech_luxury_condo"),
      category: "housing",
      era: "intergalactic",
      reqs: { high_tech: 17, alpha: 4 },
      grant: ["alpha", 5],
      cost: {
        Knowledge() {
          return 15e6;
        }
      },
      effect() {
        return loc("tech_luxury_condo_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_alpha.luxury_condo);
          return true;
        }
        return false;
      }
    },
    stellar_engine: {
      id: "tech-stellar_engine",
      title: loc("tech_stellar_engine"),
      desc: loc("tech_stellar_engine"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { blackhole: 2 },
      grant: ["blackhole", 3],
      cost: {
        Knowledge() {
          return 1e6;
        }
      },
      effect: loc("tech_stellar_engine_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_blackhole.stellar_engine);
          return true;
        }
        return false;
      }
    },
    mass_ejector: {
      id: "tech-mass_ejector",
      title: loc("tech_mass_ejector"),
      desc: loc("tech_mass_ejector"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { blackhole: 4 },
      grant: ["blackhole", 5],
      cost: {
        Knowledge() {
          return 11e5;
        }
      },
      effect: loc("tech_mass_ejector_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.interstellar.int_blackhole.mass_ejector);
          return true;
        }
        return false;
      }
    },
    asteroid_redirect: {
      id: "tech-asteroid_redirect",
      title: loc("tech_asteroid_redirect"),
      desc: loc("tech_asteroid_redirect"),
      category: "stellar_engine",
      era: "intergalactic",
      reqs: { blackhole: 5, gateway: 3 },
      grant: ["blackhole", 6],
      cost: {
        Knowledge() {
          return 35e5;
        }
      },
      effect: loc("tech_asteroid_redirect_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    exotic_infusion: {
      id: "tech-exotic_infusion",
      title: loc("tech_exotic_infusion"),
      desc: loc("tech_exotic_infusion"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { whitehole: 1 },
      grant: ["whitehole", 2],
      cost: {
        Knowledge() {
          return 15e5;
        },
        Soul_Gem() {
          return 10;
        }
      },
      effect() {
        return `<div>${loc("tech_exotic_infusion_effect", [global.resource.Soul_Gem.name])}</div><div class="has-text-danger">${loc("tech_exotic_infusion_effect2")}</div>`;
      },
      action() {
        if (checkAffordable($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_exotic_infusion_flair");
      }
    },
    infusion_check: {
      id: "tech-infusion_check",
      title: loc("tech_infusion_check"),
      desc: loc("tech_infusion_check"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { whitehole: 2 },
      grant: ["whitehole", 3],
      cost: {
        Knowledge() {
          return 15e5;
        },
        Soul_Gem() {
          return 10;
        }
      },
      effect() {
        return `<div>${loc("tech_infusion_check_effect")}</div><div class="has-text-danger">${loc("tech_exotic_infusion_effect2")}</div>`;
      },
      action() {
        if (checkAffordable($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_infusion_check_flair");
      }
    },
    infusion_confirm: {
      id: "tech-infusion_confirm",
      title: loc("tech_infusion_confirm"),
      desc: loc("tech_infusion_confirm"),
      category: "stellar_engine",
      era: "interstellar",
      reqs: { whitehole: 3 },
      grant: ["whitehole", 4],
      cost: {
        Knowledge() {
          return 15e5;
        },
        Soul_Gem() {
          return 10;
        }
      },
      effect() {
        let gains = calcPrestige("bigbang");
        let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
        let prestige = `<div class="has-text-caution">${loc("wiki_tech_infusion_confirm_gains", [gains.plasmid, gains.phage, gains.dark, plasmidType])}</div>`;
        return `<div>${loc("tech_infusion_confirm_effect")}</div><div class="has-text-danger">${loc("tech_exotic_infusion_effect2")}</div>${prestige}`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.tech["whitehole"] >= 4) {
            return;
          }
          global.tech["whitehole"] = 4;
          let bang = $('<div class="bigbang"></div>');
          $("body").append(bang);
          setTimeout(function() {
            bang.addClass("burn");
          }, 125);
          setTimeout(function() {
            bang.addClass("b");
          }, 150);
          setTimeout(function() {
            bang.addClass("c");
          }, 2e3);
          setTimeout(function() {
            big_bang();
          }, 4e3);
          return false;
        }
        return false;
      },
      flair() {
        return loc("tech_infusion_confirm_flair");
      }
    },
    stabilize_blackhole: {
      id: "tech-stabilize_blackhole",
      title: loc("tech_stabilize_blackhole"),
      desc() {
        return `<div>${loc("tech_stabilize_blackhole")}</div><div class="has-text-danger">${loc("tech_stabilize_blackhole2")}</div>`;
      },
      category: "stellar_engine",
      era: "interstellar",
      reqs: { whitehole: 1 },
      grant: ["stablized", 1],
      cost: {
        Knowledge() {
          return 15e5;
        },
        Neutronium() {
          return 2e4;
        }
      },
      effect: loc("tech_stabilize_blackhole_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.interstellar.stellar_engine.mass += atomic_mass.Neutronium * 2e4 / 1e10;
          global.interstellar.stellar_engine.mass += global.interstellar.stellar_engine.exotic * 40;
          global.interstellar.stellar_engine.exotic = 0;
          delete global.tech["whitehole"];
          if (global.race["banana"] && global.interstellar.stellar_engine.mass >= 12) {
            let affix = universeAffix();
            global.stats.banana.b3[affix] = true;
            if (affix !== "m" && affix !== "l") {
              global.stats.banana.b3.l = true;
            }
          }
          return true;
        }
        return false;
      }
    },
    veil: {
      id: "tech-veil",
      title: loc("tech_veil"),
      desc: loc("tech_veil"),
      category: "magic",
      era: "interstellar",
      reqs: { blackhole: 2 },
      condition() {
        return global.race.universe === "magic" ? true : false;
      },
      grant: ["veil", 1],
      cost: {
        Knowledge() {
          return 125e4;
        }
      },
      effect: loc("tech_veil_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mana_syphon: {
      id: "tech-mana_syphon",
      title: loc("tech_mana_syphon"),
      desc: loc("tech_mana_syphon"),
      category: "magic",
      era: "interstellar",
      reqs: { veil: 1 },
      condition() {
        return global.race.universe === "magic" ? true : false;
      },
      grant: ["veil", 2],
      cost: {
        Knowledge() {
          return 15e5;
        }
      },
      effect: loc("tech_mana_syphon_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    gravitational_waves: {
      id: "tech-gravitational_waves",
      title: loc("tech_gravitational_waves"),
      desc: loc("tech_gravitational_waves"),
      category: "power_generation",
      era: "interstellar",
      reqs: { blackhole: 4 },
      grant: ["gravity", 1],
      cost: {
        Knowledge() {
          return 125e4;
        }
      },
      effect: loc("tech_gravitational_waves_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    gravity_convection: {
      id: "tech-gravity_convection",
      title: loc("tech_gravity_convection"),
      desc: loc("tech_gravity_convection"),
      category: "power_generation",
      era: "interstellar",
      reqs: { gravity: 1 },
      grant: ["gravity", 2],
      cost: {
        Knowledge() {
          return 135e4;
        }
      },
      effect: loc("tech_gravity_convection_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    wormholes: {
      id: "tech-wormholes",
      title: loc("tech_wormholes"),
      desc: loc("tech_wormholes"),
      category: "space_exploration",
      era: "intergalactic",
      reqs: { gravity: 1, science: 15 },
      grant: ["stargate", 1],
      cost: {
        Knowledge() {
          return 225e4;
        }
      },
      effect: loc("tech_wormholes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    portal: {
      id: "tech-portal",
      title: loc("tech_portal"),
      desc: loc("tech_portal_desc"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { wsc: 1 },
      grant: ["portal", 1],
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      effect: loc("tech_portal_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fortifications: {
      id: "tech-fortifications",
      title: loc("tech_fort"),
      desc: loc("tech_fort_desc"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 1 },
      grant: ["portal", 2],
      cost: {
        Knowledge() {
          return 55e4;
        },
        Stone() {
          return 1e6;
        }
      },
      effect: loc("tech_fort_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.showPortal = true;
          global.settings.portal.fortress = true;
          if (!global.settings.msgFilters.hell.unlocked) {
            global.settings.msgFilters.hell.unlocked = true;
            global.settings.msgFilters.hell.vis = true;
          }
          global.portal["fortress"] = {
            threat: 1e4,
            garrison: 0,
            walls: 100,
            repair: 0,
            patrols: 0,
            patrol_size: 10,
            siege: 999,
            notify: "Yes",
            s_ntfy: "Yes",
            nocrew: false
          };
          initStruct(actions.portal.prtl_fortress.turret);
          initStruct(actions.portal.prtl_fortress.carport);
          if (races[global.race.species].type === "demonic") {
            unlockAchieve("blood_war");
          } else {
            unlockAchieve("pandemonium");
          }
          global.portal.observe = {
            settings: {
              expanded: false,
              average: false,
              hyperSlow: false,
              display: "game_days",
              dropKills: true,
              dropGems: true
            },
            stats: {
              total: {
                start: { year: global.city.calendar.year, day: global.city.calendar.day },
                days: 0,
                wounded: 0,
                died: 0,
                revived: 0,
                surveyors: 0,
                sieges: 0,
                kills: {
                  drones: 0,
                  patrols: 0,
                  sieges: 0,
                  guns: 0,
                  soul_forge: 0,
                  turrets: 0
                },
                gems: {
                  patrols: 0,
                  guns: 0,
                  soul_forge: 0,
                  crafted: 0,
                  turrets: 0,
                  surveyors: 0,
                  compactor: 0
                }
              },
              period: {
                start: { year: global.city.calendar.year, day: global.city.calendar.day },
                days: 0,
                wounded: 0,
                died: 0,
                revived: 0,
                surveyors: 0,
                sieges: 0,
                kills: {
                  drones: 0,
                  patrols: 0,
                  sieges: 0,
                  guns: 0,
                  soul_forge: 0,
                  turrets: 0
                },
                gems: {
                  patrols: 0,
                  guns: 0,
                  soul_forge: 0,
                  crafted: 0,
                  turrets: 0,
                  surveyors: 0,
                  compactor: 0
                }
              }
            },
            graphID: 0,
            graphs: {}
          };
          return true;
        }
        return false;
      },
      post() {
        drawHellObservations();
      }
    },
    war_drones: {
      id: "tech-war_drones",
      title: loc("tech_war_drones"),
      desc: loc("tech_war_drones"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 2, graphene: 1 },
      grant: ["portal", 3],
      cost: {
        Knowledge() {
          return 7e5;
        }
      },
      effect: loc("tech_war_drones_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.portal.badlands = true;
          initStruct(actions.portal.prtl_badlands.war_drone);
          return true;
        }
        return false;
      }
    },
    demon_attractor: {
      id: "tech-demon_attractor",
      title: loc("tech_demon_attractor"),
      desc: loc("tech_demon_attractor"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 3, stanene: 1 },
      not_trait: ["warlord"],
      grant: ["portal", 4],
      cost: {
        Knowledge() {
          return 745e3;
        }
      },
      effect: loc("tech_demon_attractor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.attractor);
          return true;
        }
        return false;
      }
    },
    combat_droids: {
      id: "tech-combat_droids",
      title: loc("tech_combat_droids"),
      desc: loc("tech_combat_droids"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 4 },
      grant: ["portal", 5],
      cost: {
        Knowledge() {
          return 762e3;
        },
        Soul_Gem() {
          return 1;
        }
      },
      effect: loc("tech_combat_droids_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_fortress.war_droid);
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_combat_droids_flair");
      }
    },
    repair_droids: {
      id: "tech-repair_droids",
      title: loc("tech_repair_droids"),
      desc: loc("tech_repair_droids"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 5 },
      grant: ["portal", 6],
      cost: {
        Knowledge() {
          return 794e3;
        },
        Soul_Gem() {
          return 1;
        }
      },
      effect: loc("tech_repair_droids_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_fortress.repair_droid);
          return true;
        }
        return false;
      }
    },
    advanced_predators: {
      id: "tech-advanced_predators",
      title: loc("tech_advanced_predators"),
      desc: loc("tech_advanced_predators"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { portal: 6, xeno: 4 },
      grant: ["portal", 7],
      cost: {
        Knowledge() {
          return 5e6;
        },
        Bolognium() {
          return 5e5;
        },
        Vitreloy() {
          return 25e4;
        }
      },
      effect: loc("tech_advanced_predators_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    enhanced_droids: {
      id: "tech-enhanced_droids",
      title: loc("tech_enhanced_droids"),
      desc: loc("tech_enhanced_droids"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 5, military: 9 },
      grant: ["hdroid", 1],
      cost: {
        Knowledge() {
          return 105e4;
        }
      },
      effect: loc("tech_enhanced_droids_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    sensor_drone: {
      id: "tech-sensor_drone",
      title: loc("tech_sensor_drone"),
      desc: loc("tech_sensor_drone"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { portal: 3, infernite: 1, stanene: 1, graphene: 1 },
      grant: ["infernite", 2],
      cost: {
        Knowledge() {
          return 725e3;
        }
      },
      effect: loc("tech_sensor_drone_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.sensor_drone);
          return true;
        }
        return false;
      }
    },
    map_terrain: {
      id: "tech-map_terrain",
      title: loc("tech_map_terrain"),
      desc: loc("tech_map_terrain"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { infernite: 2 },
      grant: ["infernite", 3],
      cost: {
        Knowledge() {
          return 948e3;
        }
      },
      effect() {
        return loc("tech_map_terrain_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    calibrated_sensors: {
      id: "tech-calibrated_sensors",
      title: loc("tech_calibrated_sensors"),
      desc: loc("tech_calibrated_sensors"),
      category: "hell_dimension",
      era: "interstellar",
      reqs: { infernite: 3 },
      grant: ["infernite", 4],
      cost: {
        Knowledge() {
          return 1125e3;
        },
        Infernite() {
          return 3500;
        }
      },
      effect() {
        return loc("tech_calibrated_sensors_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    shield_generator: {
      id: "tech-shield_generator",
      title: loc("tech_shield_generator"),
      desc: loc("tech_shield_generator"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { high_tech: 14, gateway: 3, infernite: 4 },
      grant: ["infernite", 5],
      cost: {
        Knowledge() {
          return 268e4;
        },
        Bolognium() {
          return 75e3;
        }
      },
      effect() {
        return loc("tech_shield_generator_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    enhanced_sensors: {
      id: "tech-enhanced_sensors",
      title: loc("tech_enhanced_sensors"),
      desc: loc("tech_enhanced_sensors"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { infernite: 5, xeno: 4 },
      grant: ["infernite", 6],
      cost: {
        Knowledge() {
          return 475e4;
        },
        Vitreloy() {
          return 25e3;
        }
      },
      effect() {
        return loc("tech_enhanced_sensors_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    xeno_linguistics: {
      id: "tech-xeno_linguistics",
      title: loc("tech_xeno_linguistics"),
      desc: loc("tech_xeno_linguistics"),
      category: "andromeda",
      era: "intergalactic",
      reqs: { xeno: 1 },
      grant: ["xeno", 2],
      cost: {
        Knowledge() {
          return 3e6;
        }
      },
      effect() {
        return loc("tech_xeno_linguistics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space["gorddon"] = true;
          return true;
        }
        return false;
      }
    },
    xeno_culture: {
      id: "tech-xeno_culture",
      title: loc("tech_xeno_culture"),
      desc: loc("tech_xeno_culture"),
      category: "progress",
      era: "intergalactic",
      reqs: { xeno: 3 },
      grant: ["xeno", 4],
      cost: {
        Knowledge() {
          return 34e5;
        }
      },
      effect() {
        let s1name = races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name;
        let s1desc = races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].entity;
        return loc("tech_xeno_culture_effect", [s1name, s1desc]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gorddon.embassy);
          return true;
        }
        return false;
      }
    },
    cultural_exchange: {
      id: "tech-cultural_exchange",
      title: loc("tech_cultural_exchange"),
      desc: loc("tech_cultural_exchange"),
      category: "andromeda",
      era: "intergalactic",
      reqs: { xeno: 5 },
      grant: ["xeno", 6],
      cost: {
        Knowledge() {
          return 355e4;
        }
      },
      effect() {
        let s1name = races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name;
        return loc("tech_cultural_exchange_effect", [s1name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gorddon.dormitory);
          initStruct(actions.galaxy.gxy_gorddon.symposium);
          return true;
        }
        return false;
      }
    },
    shore_leave: {
      id: "tech-shore_leave",
      title: loc("tech_shore_leave"),
      desc: loc("tech_shore_leave"),
      category: "science",
      era: "intergalactic",
      reqs: { andromeda: 3, xeno: 6 },
      grant: ["xeno", 7],
      cost: {
        Knowledge() {
          return 46e5;
        }
      },
      effect() {
        return loc("tech_shore_leave_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    xeno_gift: {
      id: "tech-xeno_gift",
      title: loc("tech_xeno_gift"),
      desc: loc("tech_xeno_gift"),
      category: "andromeda",
      era: "intergalactic",
      reqs: { high_tech: 16, xeno: 7 },
      grant: ["xeno", 8],
      cost: {
        Knowledge() {
          return 65e5;
        },
        Infernite() {
          return 125e3;
        }
      },
      effect() {
        return loc("tech_xeno_gift_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_alien1.consulate);
          global.settings.space.alien1 = true;
          messageQueue(loc("tech_xeno_gift_msg", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name]), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    industrial_partnership: {
      id: "tech-industrial_partnership",
      title: loc("tech_industrial_partnership"),
      desc() {
        return loc("tech_industrial_partnership");
      },
      category: "andromeda",
      era: "intergalactic",
      reqs: { xeno: 9 },
      grant: ["xeno", 10],
      cost: {
        Knowledge() {
          return 725e4;
        }
      },
      effect() {
        return loc("tech_industrial_partnership_effect", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_alien1.vitreloy_plant);
          return true;
        }
        return false;
      }
    },
    embassy_housing: {
      id: "tech-embassy_housing",
      title: loc("tech_embassy_housing"),
      desc() {
        return loc("tech_embassy_housing");
      },
      category: "andromeda",
      era: "intergalactic",
      reqs: { xeno: 10, science: 18 },
      grant: ["xeno", 11],
      cost: {
        Knowledge() {
          return 1075e4;
        }
      },
      effect() {
        return loc("tech_embassy_housing_effect", [races[global.galaxy.hasOwnProperty("alien1") ? global.galaxy.alien1.id : global.race.species].name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_telemetry: {
      id: "tech-advanced_telemetry",
      title: loc("tech_advanced_telemetry"),
      desc: loc("tech_advanced_telemetry"),
      category: "science",
      era: "intergalactic",
      reqs: { xeno: 5 },
      grant: ["telemetry", 1],
      cost: {
        Knowledge() {
          return 42e5;
        },
        Vitreloy() {
          return 1e4;
        }
      },
      effect() {
        return loc("tech_advanced_telemetry_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    defense_platform: {
      id: "tech-defense_platform",
      title: loc("galaxy_defense_platform"),
      desc: loc("galaxy_defense_platform"),
      category: "andromeda",
      era: "intergalactic",
      reqs: { stargate: 5, piracy: 1 },
      grant: ["stargate", 6],
      cost: {
        Knowledge() {
          return 485e4;
        }
      },
      effect: loc("tech_defense_platform_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_stargate.defense_platform);
          return true;
        }
        return false;
      }
    },
    scout_ship: {
      id: "tech-scout_ship",
      title: loc("galaxy_scout_ship"),
      desc: loc("galaxy_scout_ship"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { gateway: 3 },
      grant: ["andromeda", 1],
      cost: {
        Knowledge() {
          return 26e5;
        }
      },
      effect() {
        return loc("tech_scout_ship_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.scout_ship);
          return true;
        }
        return false;
      }
    },
    corvette_ship: {
      id: "tech-corvette_ship",
      title: loc("galaxy_corvette_ship"),
      desc: loc("galaxy_corvette_ship"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { andromeda: 1, xeno: 1 },
      grant: ["andromeda", 2],
      cost: {
        Knowledge() {
          return 32e5;
        }
      },
      effect() {
        return loc("tech_corvette_ship_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.corvette_ship);
          return true;
        }
        return false;
      }
    },
    frigate_ship: {
      id: "tech-frigate_ship",
      title: loc("galaxy_frigate_ship"),
      desc: loc("galaxy_frigate_ship"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { andromeda: 2, xeno: 6 },
      grant: ["andromeda", 3],
      cost: {
        Knowledge() {
          return 4e6;
        }
      },
      effect() {
        return loc("tech_frigate_ship_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.frigate_ship);
          renderSpace();
          return true;
        }
        return false;
      }
    },
    cruiser_ship: {
      id: "tech-cruiser_ship",
      title: loc("galaxy_cruiser_ship"),
      desc: loc("galaxy_cruiser_ship"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { andromeda: 3, xeno: 10 },
      grant: ["andromeda", 4],
      cost: {
        Knowledge() {
          return 75e5;
        }
      },
      effect() {
        return loc("tech_cruiser_ship_effect", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.cruiser_ship);
          initStruct(actions.galaxy.gxy_alien2.foothold);
          global.settings.space.alien2 = true;
          renderSpace();
          return true;
        }
        return false;
      }
    },
    dreadnought: {
      id: "tech-dreadnought",
      title: loc("galaxy_dreadnought"),
      desc: loc("galaxy_dreadnought"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { andromeda: 4, science: 18 },
      grant: ["andromeda", 5],
      cost: {
        Knowledge() {
          return 1e7;
        }
      },
      effect() {
        return loc("tech_dreadnought_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.dreadnought);
          renderSpace();
          return true;
        }
        return false;
      }
    },
    ship_dock: {
      id: "tech-ship_dock",
      title: loc("galaxy_ship_dock"),
      desc: loc("galaxy_ship_dock"),
      category: "andromeda_ships",
      era: "intergalactic",
      reqs: { gateway: 3, xeno: 6 },
      grant: ["gateway", 4],
      cost: {
        Knowledge() {
          return 39e5;
        }
      },
      effect() {
        return loc("tech_ship_dock_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_gateway.ship_dock);
          return true;
        }
        return false;
      }
    },
    ore_processor: {
      id: "tech-ore_processor",
      title: loc("galaxy_ore_processor"),
      desc: loc("galaxy_ore_processor"),
      category: "space_mining",
      era: "intergalactic",
      reqs: { conflict: 2 },
      grant: ["conflict", 3],
      cost: {
        Knowledge() {
          return 75e5;
        }
      },
      effect() {
        return loc("tech_ore_processor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_alien2.ore_processor);
          return true;
        }
        return false;
      }
    },
    scavenger: {
      id: "tech-scavenger",
      title: loc("galaxy_scavenger"),
      desc: loc("galaxy_scavenger"),
      category: "science",
      era: "intergalactic",
      reqs: { conflict: 3 },
      grant: ["conflict", 4],
      cost: {
        Knowledge() {
          return 8e6;
        }
      },
      effect() {
        return loc("tech_scavenger_effect", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_alien2.scavenger);
          return true;
        }
        return false;
      }
    },
    coordinates: {
      id: "tech-coordinates",
      title: loc("tech_coordinates"),
      desc: loc("tech_coordinates"),
      category: "andromeda",
      era: "intergalactic",
      reqs: { science: 18, conflict: 5 },
      grant: ["chthonian", 1],
      cost: {
        Knowledge() {
          return 1e7;
        }
      },
      effect() {
        return loc("tech_coordinates_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_chthonian.minelayer);
          global.settings.space.chthonian = true;
          return true;
        }
        return false;
      }
    },
    chthonian_survey: {
      id: "tech-chthonian_survey",
      title: loc("tech_chthonian_survey"),
      desc: loc("tech_chthonian_survey"),
      category: "space_mining",
      era: "intergalactic",
      reqs: { chthonian: 2 },
      grant: ["chthonian", 3],
      cost: {
        Knowledge() {
          return 118e5;
        }
      },
      effect() {
        return loc("tech_chthonian_survey_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Orichalcum.display = true;
          initStruct(actions.galaxy.gxy_chthonian.excavator);
          initStruct(actions.galaxy.gxy_chthonian.raider);
          messageQueue(loc("tech_chthonian_survey_result"), "info", false, ["progress"]);
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    gateway_depot: {
      id: "tech-gateway_depot",
      title: loc("galaxy_gateway_depot"),
      desc: loc("galaxy_gateway_depot"),
      category: "storage",
      era: "intergalactic",
      reqs: { gateway: 4 },
      grant: ["gateway", 5],
      cost: {
        Knowledge() {
          return 435e4;
        }
      },
      effect() {
        return loc("tech_gateway_depot_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.galaxy.gxy_stargate.gateway_depot);
          return true;
        }
        return false;
      }
    },
    soul_forge: {
      id: "tech-soul_forge",
      title: loc("portal_soul_forge_title"),
      desc: loc("portal_soul_forge_title"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_pit: 3 },
      grant: ["hell_pit", 4],
      cost: {
        Knowledge() {
          return 275e4;
        }
      },
      effect() {
        return loc("tech_soul_forge_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.soul_forge);
          return true;
        }
        return false;
      }
    },
    soul_attractor: {
      id: "tech-soul_attractor",
      title: loc("portal_soul_attractor_title"),
      desc: loc("portal_soul_attractor_title"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_pit: 4, high_tech: 16 },
      grant: ["hell_pit", 5],
      cost: {
        Knowledge() {
          return 55e5;
        }
      },
      effect() {
        return loc("tech_soul_attractor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.soul_attractor);
          return true;
        }
        return false;
      }
    },
    soul_absorption: {
      id: "tech-soul_absorption",
      title: loc("tech_soul_absorption"),
      desc: loc("tech_soul_absorption"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_pit: 5 },
      grant: ["hell_pit", 6],
      cost: {
        Knowledge() {
          return 6e6;
        },
        Infernite() {
          return 25e4;
        }
      },
      effect() {
        return loc("tech_soul_absorption_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    soul_link: {
      id: "tech-soul_link",
      title: loc("tech_soul_link"),
      desc: loc("tech_soul_link"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_pit: 6 },
      grant: ["hell_pit", 7],
      cost: {
        Knowledge() {
          return 75e5;
        },
        Vitreloy() {
          return 25e4;
        }
      },
      effect() {
        return loc("tech_soul_link_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    soul_bait: {
      id: "tech-soul_bait",
      title: loc("tech_soul_bait"),
      desc: loc("tech_soul_bait"),
      category: "hell_dimension",
      era: "existential",
      reqs: { hell_pit: 7, asphodel: 3 },
      grant: ["hell_pit", 8],
      cost: {
        Knowledge() {
          return 65e6;
        },
        Asphodel_Powder() {
          return 1e4;
        }
      },
      effect() {
        return loc("tech_soul_bait_effect", [global.resource.Asphodel_Powder.name, loc("arpa_blood_attract_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    gun_emplacement: {
      id: "tech-gun_emplacement",
      title: loc("portal_gun_emplacement_title"),
      desc: loc("portal_gun_emplacement_title"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_pit: 4 },
      not_trait: ["warlord"],
      grant: ["hell_gun", 1],
      cost: {
        Knowledge() {
          return 3e6;
        }
      },
      effect() {
        return loc("tech_gun_emplacement_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.gun_emplacement);
          return true;
        }
        return false;
      }
    },
    advanced_emplacement: {
      id: "tech-advanced_emplacement",
      title: loc("tech_advanced_emplacement"),
      desc: loc("tech_advanced_emplacement"),
      category: "hell_dimension",
      era: "intergalactic",
      reqs: { hell_gun: 1, high_tech: 17 },
      grant: ["hell_gun", 2],
      cost: {
        Knowledge() {
          return 125e5;
        },
        Orichalcum() {
          return 18e4;
        }
      },
      effect() {
        return loc("tech_advanced_emplacement_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dial_it_to_11: {
      id: "tech-dial_it_to_11",
      title: loc("tech_dial_it_to_11"),
      desc: loc("tech_dial_it_to_11"),
      category: "science",
      wiki: false,
      era: "deep_space",
      reqs: { quaked: 1 },
      grant: ["quaked", 2],
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      condition() {
        return (global.race["sludge"] || global.race["ultra_sludge"]) && !global.race["cataclysm"] ? false : true;
      },
      effect() {
        let gains = calcPrestige("cataclysm");
        let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
        return `<div>${loc("tech_dial_it_to_11_effect", [planetName().dwarf, global.race["cataclysm"] ? planetName().red : races[global.race.species].home])}</div><div class="has-text-danger">${loc("tech_dial_it_to_11_effect2")}</div><div class="has-text-special">${loc("star_dock_genesis_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-special">${loc("star_dock_genesis_effect3", [gains.phage])}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          $("#main").addClass("earthquake");
          setTimeout(function() {
            $("#main").removeClass("earthquake");
            cataclysm_end();
          }, 4e3);
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_dial_it_to_11_flair");
      }
    },
    limit_collider: {
      id: "tech-limit_collider",
      title: loc("tech_limit_collider"),
      desc: loc("tech_limit_collider"),
      category: "science",
      wiki: false,
      era: "deep_space",
      reqs: { quaked: 1 },
      grant: ["quaked", 2],
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_limit_collider_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    mana: {
      id: "tech-mana",
      title: loc("tech_mana"),
      desc: loc("tech_mana"),
      category: "magic",
      era: "civilized",
      reqs: { primitive: 3 },
      grant: ["magic", 1],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Knowledge() {
          return 25;
        }
      },
      effect() {
        return loc("tech_mana_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Mana.display = true;
          global.resource.Crystal.display = true;
          global.civic.crystal_miner.display = true;
          if (global.race["witch_hunter"]) {
            global.resource.Sus.display = true;
          }
          return true;
        }
        return false;
      },
      flair: loc("tech_mana_flair"),
      post() {
        renderPsychicPowers();
      }
    },
    ley_lines: {
      id: "tech-ley_lines",
      title: loc("tech_ley_lines"),
      desc: loc("tech_ley_lines"),
      category: "magic",
      era: "civilized",
      reqs: { magic: 1 },
      grant: ["magic", 2],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Knowledge() {
          return 40;
        }
      },
      effect() {
        return loc("tech_ley_lines_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.tech["isolation"]) {
            initStruct(actions.tauceti.tau_home.pylon);
          } else if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            initStruct(actions.space.spc_red.pylon);
          } else {
            initStruct(actions.city.pylon);
          }
          return true;
        }
        return false;
      }
    },
    rituals: {
      id: "tech-rituals",
      title: loc("tech_rituals"),
      desc: loc("tech_rituals"),
      category: "magic",
      era: "civilized",
      reqs: { magic: 2 },
      grant: ["magic", 3],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 25;
        },
        Knowledge() {
          return 750;
        },
        Crystal() {
          return 50;
        }
      },
      effect() {
        return loc("tech_rituals_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          setupRituals(true);
          global.settings.showIndustry = true;
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    crafting_ritual: {
      id: "tech-crafting_ritual",
      title: loc("tech_crafting_ritual"),
      desc: loc("tech_crafting_ritual"),
      category: "magic",
      era: "discovery",
      reqs: { magic: 3, foundry: 5 },
      grant: ["magic", 4],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 100;
        },
        Knowledge() {
          return 15e3;
        },
        Crystal() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_crafting_ritual_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race.casting["crafting"] = 0;
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    mana_nexus: {
      id: "tech-mana_nexus",
      title: loc("tech_mana_nexus"),
      desc: loc("tech_mana_nexus"),
      category: "magic",
      era: "early_space",
      reqs: { magic: 4, space: 3, luna: 1 },
      grant: ["magic", 5],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 500;
        },
        Knowledge() {
          return 16e4;
        },
        Crystal() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_mana_nexus_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        arpa("Physics");
      }
    },
    clerics: {
      id: "tech-clerics",
      title: loc("tech_clerics"),
      desc: loc("tech_clerics"),
      category: "magic",
      era: "civilized",
      reqs: { magic: 3 },
      grant: ["cleric", 1],
      condition() {
        return global.race["universe"] === "magic" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display ? true : false;
      },
      cost: {
        Mana() {
          return 100;
        },
        Knowledge() {
          return 2e3;
        },
        Crystal() {
          return 100;
        }
      },
      effect() {
        return loc("tech_clerics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    conjuring: {
      id: "tech-conjuring",
      title: loc("tech_conjuring"),
      desc: loc("tech_conjuring_desc"),
      category: "magic",
      era: "civilized",
      reqs: { magic: 1 },
      grant: ["conjuring", 1],
      not_trait: ["cataclysm"],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 2;
        },
        Crystal() {
          return 5;
        }
      },
      effect() {
        return loc("tech_conjuring_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    res_conjuring: {
      id: "tech-res_conjuring",
      title: loc("tech_res_conjuring"),
      desc: loc("tech_res_conjuring"),
      category: "magic",
      era: "civilized",
      reqs: { conjuring: 1 },
      grant: ["conjuring", 2],
      not_trait: ["cataclysm"],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 5;
        },
        Crystal() {
          return 10;
        }
      },
      effect() {
        return loc("tech_res_conjuring_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    alchemy: {
      id: "tech-alchemy",
      title: loc("tech_alchemy"),
      desc: loc("tech_alchemy"),
      category: "magic",
      era: "discovery",
      reqs: { magic: 3, high_tech: 1 },
      grant: ["alchemy", 1],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 100;
        },
        Knowledge() {
          return 1e4;
        },
        Crystal() {
          return 250;
        }
      },
      effect() {
        return loc("tech_alchemy_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race["alchemy"] = {
            Food: 0,
            Lumber: 0,
            Stone: 0,
            Furs: 0,
            Copper: 0,
            Iron: 0,
            Aluminium: 0,
            Cement: 0,
            Coal: 0,
            Oil: 0,
            Uranium: 0,
            Steel: 0,
            Titanium: 0,
            Alloy: 0,
            Polymer: 0,
            Iridium: 0,
            Helium_3: 0,
            Deuterium: 0,
            Neutronium: 0,
            Adamantite: 0,
            Infernite: 0,
            Elerium: 0,
            Nano_Tube: 0,
            Graphene: 0,
            Stanene: 0,
            Bolognium: 0,
            Vitreloy: 0,
            Orichalcum: 0
          };
          global.settings.showAlchemy = true;
          return true;
        }
        return false;
      },
      post() {
        drawResourceTab("alchemy");
      }
    },
    transmutation: {
      id: "tech-transmutation",
      title: loc("tech_transmutation"),
      desc: loc("tech_transmutation"),
      category: "magic",
      era: "intergalactic",
      reqs: { alchemy: 1, high_tech: 16 },
      grant: ["alchemy", 2],
      condition() {
        return global.race["universe"] === "magic" ? true : false;
      },
      cost: {
        Mana() {
          return 1250;
        },
        Knowledge() {
          return 55e5;
        },
        Crystal() {
          return 1e6;
        }
      },
      effect() {
        return loc("tech_transmutation_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        drawResourceTab("alchemy");
      }
    },
    secret_society: {
      id: "tech-secret_society",
      title: loc("tech_secret_society"),
      desc: loc("tech_secret_society"),
      category: "magic",
      era: "civilized",
      reqs: { magic: 1 },
      grant: ["roguemagic", 1],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 10;
        },
        Knowledge() {
          return 45;
        }
      },
      effect() {
        return loc("tech_secret_society_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cultists: {
      id: "tech-cultists",
      title: loc("tech_cultists"),
      desc: loc("tech_cultists"),
      category: "magic",
      era: "civilized",
      reqs: { roguemagic: 1, cleric: 1 },
      grant: ["roguemagic", 2],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 250;
        },
        Knowledge() {
          return 2125;
        }
      },
      effect() {
        return loc("tech_cultists_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    conceal_ward: {
      id: "tech-conceal_ward",
      title: loc("tech_conceal_ward"),
      desc: loc("tech_conceal_ward"),
      category: "magic",
      era: "discovery",
      reqs: { roguemagic: 2, theatre: 3 },
      grant: ["roguemagic", 3],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 500;
        },
        Knowledge() {
          return 8200;
        },
        Crystal() {
          return 1e3;
        }
      },
      effect() {
        return loc("tech_conceal_ward_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.city.conceal_ward);
          global.space["conceal_ward"] = { count: 0 };
          return true;
        }
        return false;
      }
    },
    subtle_rituals: {
      id: "tech-subtle_rituals",
      title: loc("tech_subtle_rituals"),
      desc: loc("tech_subtle_rituals"),
      category: "magic",
      era: "discovery",
      reqs: { roguemagic: 3, magic: 4 },
      grant: ["roguemagic", 4],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 100;
        },
        Knowledge() {
          return 15e3;
        },
        Crystal() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_subtle_rituals_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pylon_camouflage: {
      id: "tech-pylon_camouflage",
      title: loc("tech_pylon_camouflage"),
      desc: loc("tech_pylon_camouflage"),
      category: "magic",
      era: "industrialized",
      reqs: { roguemagic: 4, high_tech: 3 },
      grant: ["roguemagic", 5],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 1e3;
        },
        Knowledge() {
          return 3e4;
        },
        Crystal() {
          return 3750;
        }
      },
      effect() {
        return loc("tech_pylon_camouflage_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    fake_tech: {
      id: "tech-fake_tech",
      title: loc("tech_fake_tech"),
      desc: loc("tech_fake_tech"),
      category: "magic",
      era: "industrialized",
      reqs: { roguemagic: 5, high_tech: 4 },
      grant: ["roguemagic", 6],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 2250;
        },
        Knowledge() {
          return 6e4;
        }
      },
      effect() {
        return loc("tech_fake_tech_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    concealment: {
      id: "tech-concealment",
      title: loc("tech_concealment"),
      desc: loc("tech_concealment"),
      category: "magic",
      era: "early_space",
      reqs: { roguemagic: 6, magic: 5 },
      grant: ["roguemagic", 7],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return 3e3;
        },
        Knowledge() {
          return 185e3;
        }
      },
      effect() {
        return loc("tech_concealment_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    improved_concealment: {
      id: "tech-improved_concealment",
      title: loc("tech_improved_concealment"),
      desc: loc("tech_improved_concealment"),
      category: "magic",
      era: "intergalactic",
      reqs: { roguemagic: 7, forbidden: 1 },
      grant: ["roguemagic", 8],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return global.race["no_plasmid"] ? 6e3 : 15e3;
        },
        Knowledge() {
          return 2e7;
        }
      },
      effect() {
        return loc("tech_improved_concealment_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    outerplane_summon: {
      id: "tech-outerplane_summon",
      title: loc("tech_outerplane_summon"),
      desc: loc("tech_outerplane_summon"),
      category: "magic",
      era: "dimensional",
      reqs: { roguemagic: 8, forbidden: 4, hell_spire: 10, b_stone: 2, waygate: 3 },
      grant: ["forbidden", 5],
      condition() {
        return global.race["universe"] === "magic" && global.race["witch_hunter"] ? true : false;
      },
      cost: {
        Mana() {
          return global.race["no_plasmid"] ? 12e3 : 4e4;
        },
        Knowledge() {
          return 6e7;
        },
        Demonic_Essence() {
          return 1;
        }
      },
      effect() {
        return loc("tech_outerplane_summon_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dark_bomb: {
      id: "tech-dark_bomb",
      title: loc("tech_dark_bomb"),
      desc: loc("tech_dark_bomb"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 10, b_stone: 2, waygate: 2, sphinx_bribe: 1 },
      condition() {
        let affix = universeAffix();
        if (global.portal.hasOwnProperty("waygate") && global.portal.waygate.progress < 100 && global.stats.spire.hasOwnProperty(affix) && global.stats.spire[affix].hasOwnProperty("dlstr") && global.stats.spire[affix].dlstr > 0) {
          return true;
        }
        return false;
      },
      grant: ["dl_reset", 1],
      cost: {
        Knowledge() {
          return 65e6;
        },
        Soul_Gem() {
          return 5e3;
        },
        Blood_Stone() {
          return 25;
        },
        Dark() {
          return 1;
        },
        Supply() {
          return 1e6;
        }
      },
      effect() {
        return loc("tech_dark_bomb_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.portal.waygate.progress = 100;
          global.portal.waygate.on = 0;
          global.tech["waygate"] = 3;
          global.resource.Demonic_Essence.display = true;
          global.resource.Demonic_Essence.amount = 1;
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_dark_bomb_flair");
      }
    },
    bribe_sphinx: {
      id: "tech-bribe_sphinx",
      title: loc("portal_sphinx_bribe"),
      desc: loc("portal_sphinx_bribe"),
      category: "hell_dimension",
      era: "dimensional",
      reqs: { hell_spire: 8 },
      not_trait: ["warlord"],
      grant: ["sphinx_bribe", 1],
      cost: {
        Soul_Gem() {
          return 250;
        },
        Supply() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_bribe_sphinx_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Codex.display = true;
          global.resource.Codex.amount = 1;
          messageQueue(loc("tech_bribe_sphinx_msg"), "info", false, ["progress", "hell"]);
          return true;
        }
        return false;
      }
    },
    alien_biotech: {
      id: "tech-alien_biotech",
      title: loc("tech_alien_biotech"),
      desc: loc("tech_alien_biotech"),
      category: "science",
      era: "solar",
      reqs: { genetics: 8, kuiper: 1 },
      grant: ["biotech", 1],
      path: ["truepath"],
      cost: {
        Knowledge() {
          return 24e5;
        },
        Orichalcum() {
          return 125e3;
        },
        Cipher() {
          return 15e3;
        }
      },
      effect() {
        return loc(global.race["orbit_decayed"] ? "tech_alien_biotech_effect_alt" : "tech_alien_biotech_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    zero_g_lab: {
      id: "tech-zero_g_lab",
      title: loc("tech_zero_g_lab"),
      desc: loc("tech_zero_g_lab"),
      category: "science",
      era: "solar",
      path: ["truepath"],
      reqs: { high_tech: 13, graphene: 1, enceladus: 2 },
      grant: ["enceladus", 3],
      cost: {
        Knowledge() {
          return 9e5;
        }
      },
      effect: loc("tech_zero_g_lab_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_enceladus.zero_g_lab);
          return true;
        }
        return false;
      }
    },
    operating_base: {
      id: "tech-operating_base",
      title: loc("tech_operating_base"),
      desc: loc("tech_operating_base"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { enceladus: 3, triton: 1 },
      grant: ["enceladus", 4],
      cost: {
        Knowledge() {
          return 14e5;
        }
      },
      effect() {
        return loc("tech_operating_base_effect", [planetName().enceladus]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_enceladus.operating_base);
          return true;
        }
        return false;
      }
    },
    munitions_depot: {
      id: "tech-munitions_depot",
      title: loc("tech_munitions_depot"),
      desc: loc("tech_munitions_depot"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { enceladus: 4 },
      grant: ["enceladus", 5],
      cost: {
        Knowledge() {
          return 15e5;
        }
      },
      effect() {
        return loc("tech_munitions_depot_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_enceladus.munitions_depot);
          return true;
        }
        return false;
      }
    },
    fob: {
      id: "tech-fob",
      title: loc("tech_fob"),
      desc: loc("tech_fob"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { triton: 1 },
      grant: ["triton", 2],
      cost: {
        Knowledge() {
          return 145e4;
        }
      },
      effect() {
        return loc("tech_fob_effect", [planetName().triton]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_triton.fob);
          initStruct(actions.space.spc_triton.lander);
          initStruct(actions.space.spc_triton.crashed_ship);
          return true;
        }
        return false;
      }
    },
    bac_tanks_tp: {
      id: "tech-bac_tanks_tp",
      title: loc("tech_bac_tanks"),
      desc: loc("tech_bac_tanks_desc"),
      category: "military",
      era: "solar",
      path: ["truepath"],
      reqs: { medic: 1, triton: 2 },
      grant: ["medic", 2],
      cost: {
        Knowledge() {
          return 175e4;
        }
      },
      effect: loc("tech_bac_tanks_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    medkit: {
      id: "tech-medkit",
      title: loc("tech_medkit"),
      desc: loc("tech_medkit"),
      category: "military",
      era: "solar",
      path: ["truepath"],
      reqs: { medic: 2, outer: 4 },
      grant: ["medic", 3],
      cost: {
        Knowledge() {
          return 225e4;
        },
        Quantium() {
          return 25e4;
        },
        Cipher() {
          return 8e3;
        }
      },
      effect: loc("tech_medkit_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    sam_site: {
      id: "tech-sam_site",
      title: loc("tech_sam_site"),
      desc: loc("tech_sam_site"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 6, triton: 1 },
      grant: ["titan", 7],
      cost: {
        Knowledge() {
          return 1475e3;
        }
      },
      effect() {
        return loc("tech_sam_site_effect", [planetName().titan]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.sam);
          return true;
        }
        return false;
      }
    },
    data_cracker: {
      id: "tech-data_cracker",
      title: loc("tech_data_cracker"),
      desc: loc("tech_data_cracker"),
      category: "science",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 7, kuiper: 1 },
      grant: ["titan", 8],
      cost: {
        Knowledge() {
          return 275e4;
        },
        Cipher() {
          return 25e3;
        }
      },
      effect() {
        return loc("tech_data_cracker_effect", [global.resource.Cipher.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.decoder);
          return true;
        }
        return false;
      }
    },
    ai_core_tp: {
      id: "tech-ai_core_tp",
      title: loc("tech_ai_core"),
      desc: loc("tech_ai_core"),
      category: "ai_core",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 8 },
      grant: ["titan", 9],
      cost: {
        Knowledge() {
          return 3e6;
        },
        Cipher() {
          return 1e5;
        }
      },
      effect: loc("tech_ai_core_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.ai_core);
          return true;
        }
        return false;
      }
    },
    ai_optimizations: {
      id: "tech-ai_optimizations",
      title: loc("tech_ai_optimizations"),
      desc: loc("tech_ai_optimizations"),
      category: "ai_core",
      era: "solar",
      path: ["truepath"],
      reqs: { eris: 3, titan: 9, titan_ai_core: 1, dig_control: 1 },
      grant: ["titan_ai_core", 2],
      cost: {
        Knowledge() {
          return 375e4;
        },
        Cipher() {
          return 75e3;
        }
      },
      effect: loc("tech_ai_optimizations_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      class: "synth"
    },
    synthetic_life: {
      id: "tech-synthetic_life",
      title: loc("tech_synthetic_life"),
      desc: loc("tech_synthetic_life"),
      category: "ai_core",
      era: "solar",
      path: ["truepath"],
      reqs: { titan_ai_core: 2 },
      grant: ["titan_ai_core", 3],
      cost: {
        Knowledge() {
          return 4e6;
        },
        Cipher() {
          return 75e3;
        }
      },
      effect: loc("tech_synthetic_life_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.ai_colonist);
          return true;
        }
        return false;
      },
      class: "synth"
    },
    protocol66: {
      id: "tech-protocol66",
      title: loc("tech_protocol66"),
      desc: loc("tech_protocol66"),
      category: "ai_core",
      era: "solar",
      path: ["truepath"],
      reqs: { titan_ai_core: 3, corrupted_ai: 1 },
      grant: ["corrupted_ai", 2],
      cost: {
        Knowledge() {
          return 5e6;
        }
      },
      effect: loc("tech_protocol66_effect"),
      action() {
        if (checkAffordable($(this)[0])) {
          return true;
        }
        return false;
      },
      flair: loc("tech_protocol66_flair"),
      class: "synth"
    },
    protocol66a: {
      id: "tech-protocol66a",
      title: loc("tech_protocol66"),
      desc: loc("tech_protocol66"),
      category: "ai_core",
      era: "solar",
      path: ["truepath"],
      reqs: { titan_ai_core: 3, corrupted_ai: 2 },
      wiki: false,
      grant: ["corrupted_ai", 3],
      cost: {
        Knowledge() {
          return 5e6;
        }
      },
      effect() {
        let gains = calcPrestige("ai");
        let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
        let prestige = `<div class="has-text-caution">${loc("tech_protocol66a_effect_gains", [gains.plasmid, plasmidType, gains.phage, gains.cores])}</div>`;
        return `<div>${loc("tech_protocol66a_effect")}</div>${prestige}`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (webWorker.w) {
            webWorker.w.terminate();
          }
          clearPopper();
          $(`body`).append(`<div id="aiAppoc"><div></div></div>`);
          $(`#aiAppoc`).addClass("noise-wrapper");
          $(`#aiAppoc > div`).addClass("noise");
          setTimeout(function() {
            $(`body`).append(`<div id="deadAirTop" class="signal-lost-top"></div>`);
            $(`body`).append(`<div id="deadAirBottom" class="signal-lost-bottom"></div>`);
            $("#deadAirTop").animate({
              height: "50%",
              opacity: 1
            }, 400);
            $("#deadAirBottom").animate({
              height: "50%",
              opacity: 1
            }, 400);
          }, 3e3);
          setTimeout(function() {
            aiApocalypse();
          }, 4e3);
          return true;
        }
        return false;
      },
      flair: loc("tech_protocol66a_flair"),
      class: "synth"
    },
    terraforming_tp: {
      id: "tech-terraforming_tp",
      title: loc("tech_terraforming"),
      desc: loc("tech_terraforming"),
      category: "special",
      era: "solar",
      reqs: { dig_control: 1, eris: 2, titan_ai_core: 2 },
      path: ["truepath"],
      grant: ["terraforming", 1],
      trait: ["orbit_decay"],
      cost: {
        Knowledge() {
          return 5e6;
        }
      },
      effect() {
        return loc("tech_terraforming_effect", [planetName().red]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_red.terraformer);
          return true;
        }
        return false;
      }
    },
    quantium: {
      id: "tech-quantium",
      title: loc("tech_quantium"),
      desc: loc("tech_quantium"),
      category: "crafting",
      era: "solar",
      path: ["truepath"],
      reqs: { supercollider: 10, enceladus: 3 },
      grant: ["quantium", 1],
      cost: {
        Knowledge() {
          return 1e6;
        },
        Elerium() {
          return 1e3;
        },
        Nano_Tube() {
          return 1e6;
        },
        Graphene() {
          return 1e6;
        }
      },
      effect: loc("tech_quantium_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Quantium.display = true;
          limitCraftsmen("Quantium");
          return true;
        }
        return false;
      },
      post() {
        renderPsychicPowers();
      }
    },
    anitgrav_bunk: {
      id: "tech-anitgrav_bunk",
      title: loc("tech_anitgrav_bunk"),
      desc: loc("tech_anitgrav_bunk"),
      category: "military",
      era: "solar",
      path: ["truepath"],
      reqs: { marines: 1, quantium: 1 },
      grant: ["marines", 2],
      cost: {
        Knowledge() {
          return 125e4;
        },
        Quantium() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_anitgrav_bunk_effect", [loc("space_red_space_barracks_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    higgs_boson_tp: {
      id: "tech-higgs_boson_tp",
      title: loc("tech_higgs_boson"),
      desc: loc("tech_higgs_boson"),
      category: "science",
      era: "early_space",
      path: ["truepath"],
      reqs: { supercollider: 2 },
      grant: ["tp_particles", 1],
      cost: {
        Knowledge() {
          return 125e3;
        }
      },
      effect: loc("tech_higgs_boson_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    long_range_probes: {
      id: "tech-long_range_probes",
      title: loc("tech_long_range_probes"),
      desc: loc("tech_long_range_probes"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { high_tech: 10, elerium: 1 },
      grant: ["outer", 1],
      cost: {
        Knowledge() {
          return 4e5;
        },
        Uranium() {
          return 2e4;
        },
        Iridium() {
          return 25e4;
        },
        Neutronium() {
          return 3e3;
        },
        Elerium() {
          return 350;
        }
      },
      effect: loc("tech_long_range_probes_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.titan = true;
          global.settings.space.enceladus = true;
          initStruct(actions.space.spc_titan.titan_spaceport);
          initStruct(actions.space.spc_titan.electrolysis);
          return true;
        }
        return false;
      }
    },
    strange_signal: {
      id: "tech-strange_signal",
      title: loc("tech_strange_signal"),
      desc: loc("tech_strange_signal"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 1, syard_sensor: 4 },
      grant: ["outer", 2],
      cost: {
        Knowledge() {
          return 135e4;
        }
      },
      effect: loc("tech_strange_signal_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.triton = true;
          return true;
        }
        return false;
      }
    },
    data_analysis: {
      id: "tech-data_analysis",
      title: loc("tech_data_analysis"),
      desc: loc("tech_data_analysis"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 3 },
      grant: ["outer", 4],
      cost: {
        Knowledge() {
          return 18e5;
        },
        Cipher() {
          return 12500;
        }
      },
      effect: loc("tech_data_analysis_effect"),
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_data_analysis_result"), "info", false, ["progress"]);
          global.space.syndicate["spc_titan"] += 500;
          global.space.syndicate["spc_enceladus"] += 250;
          global.space.syndicate["spc_triton"] += 1e3;
          return true;
        }
        return false;
      }
    },
    mass_relay: {
      id: "tech-mass_relay",
      title: loc("tech_mass_relay"),
      desc: loc("tech_mass_relay"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 4 },
      grant: ["outer", 5],
      cost: {
        Knowledge() {
          return 22e5;
        },
        Cipher() {
          return 4e4;
        }
      },
      effect: loc("tech_mass_relay_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_dwarf.mass_relay);
          return true;
        }
        return false;
      }
    },
    nav_data: {
      id: "tech-nav_data",
      title: loc("tech_nav_data"),
      desc: loc("tech_nav_data"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 6 },
      grant: ["outer", 7],
      cost: {
        Knowledge() {
          return 225e4;
        },
        Cipher() {
          return 6e4;
        }
      },
      effect: loc("tech_nav_data_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.space.eris = true;
          global.settings.space.kuiper = true;
          global.tech["eris_scan"] = 0;
          initStruct(actions.space.spc_eris.drone_control);
          messageQueue(loc("tech_nav_data_result", [planetName().eris]), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    sensor_logs: {
      id: "tech-sensor_logs",
      title: loc("tech_sensor_logs"),
      desc: loc("tech_sensor_logs"),
      category: "space_exploration",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 7 },
      grant: ["outer", 8],
      cost: {
        Knowledge() {
          return 35e5;
        },
        Cipher() {
          return 65e3;
        }
      },
      effect: loc("tech_sensor_logs_effect"),
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_sensor_logs_result"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    dronewar: {
      id: "tech-dronewar",
      title: loc("tech_dronewar"),
      desc: loc("tech_dronewar"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { eris: 2, titan_ai_core: 1 },
      grant: ["eris", 3],
      cost: {
        Knowledge() {
          return 32e5;
        },
        Cipher() {
          return 25e3;
        }
      },
      effect() {
        return loc("tech_dronewar_effect", [planetName().eris]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_eris.shock_trooper);
          initStruct(actions.space.spc_eris.digsite);
          return true;
        }
        return false;
      }
    },
    drone_tank: {
      id: "tech-drone_tank",
      title: loc("tech_drone_tank"),
      desc: loc("tech_drone_tank"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { eris: 3 },
      grant: ["eris", 4],
      cost: {
        Knowledge() {
          return 34e5;
        },
        Cipher() {
          return 5e4;
        }
      },
      effect: loc("tech_drone_tank_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_eris.tank);
          return true;
        }
        return false;
      }
    },
    stanene_tp: {
      id: "tech-stanene_tp",
      title: loc("tech_stanene"),
      desc: loc("tech_stanene"),
      category: "crafting",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 1, enceladus: 1 },
      grant: ["stanene", 1],
      cost: {
        Knowledge() {
          return 525e3;
        },
        Aluminium() {
          return 5e5;
        },
        Nano_Tube() {
          return 1e5;
        }
      },
      effect: loc("tech_stanene_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.resource.Stanene.display = true;
          messageQueue(loc("tech_stanene_avail"), "info", false, ["progress"]);
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        renderPsychicPowers();
      }
    },
    graphene_tp: {
      id: "tech-graphene_tp",
      title: loc("tech_graphene"),
      desc: loc("tech_graphene"),
      category: "crafting",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 5 },
      grant: ["graphene", 1],
      cost: {
        Knowledge() {
          return 64e4;
        },
        Adamantite() {
          return 25e3;
        }
      },
      effect: loc("tech_graphene_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.g_factory);
          return true;
        }
        return false;
      }
    },
    virtual_reality_tp: {
      id: "tech-virtual_reality_tp",
      title: loc("tech_virtual_reality"),
      desc: loc("tech_virtual_reality"),
      category: "progress",
      era: "solar",
      path: ["truepath"],
      reqs: { high_tech: 11, titan: 4, stanene: 1 },
      grant: ["high_tech", 12],
      cost: {
        Knowledge() {
          return 616e3;
        },
        Nano_Tube() {
          return 1e6;
        },
        Stanene() {
          return 125e3;
        }
      },
      effect: loc("tech_virtual_reality_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_virtual_reality_flair");
      }
    },
    electrolysis: {
      id: "tech-electrolysis",
      title: loc("tech_electrolysis"),
      desc: loc("tech_electrolysis"),
      category: "power_generation",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 2, enceladus: 1 },
      grant: ["titan", 3],
      cost: {
        Knowledge() {
          return 465e3;
        }
      },
      effect() {
        return loc("tech_electrolysis_effect", [planetName().titan, global.resource.Water.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.titan_quarters);
          initStruct(actions.space.spc_titan.titan_mine);
          return true;
        }
        return false;
      }
    },
    storehouse: {
      id: "tech-storehouse",
      title() {
        return loc("tech_storehouse", [planetName().titan]);
      },
      desc() {
        return loc("tech_storehouse", [planetName().titan]);
      },
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 4 },
      grant: ["titan", 5],
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      effect() {
        return loc("tech_storehouse_effect", [planetName().titan]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.storehouse);
          return true;
        }
        return false;
      }
    },
    adamantite_vault_tp: {
      id: "tech-adamantite_vault_tp",
      title: loc("tech_adamantite_vault"),
      desc: loc("tech_adamantite_vault"),
      category: "banking",
      era: "solar",
      path: ["truepath"],
      reqs: { vault: 2, titan: 4 },
      grant: ["vault", 3],
      cost: {
        Money() {
          return 2e6;
        },
        Knowledge() {
          return 56e4;
        },
        Adamantite() {
          return 2e4;
        }
      },
      effect: loc("tech_adamantite_vault_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    titan_bank: {
      id: "tech-titan_bank",
      title() {
        return loc("tech_titan_bank", [planetName().titan]);
      },
      desc() {
        return loc("tech_titan_bank", [planetName().titan]);
      },
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 5 },
      grant: ["titan", 6],
      cost: {
        Knowledge() {
          return 6e5;
        }
      },
      effect() {
        return loc("tech_titan_bank_effect", [planetName().titan]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.titan_bank);
          return true;
        }
        return false;
      }
    },
    hydrogen_plant: {
      id: "tech-hydrogen_plant",
      title: loc("tech_hydrogen_plant"),
      desc: loc("tech_hydrogen_plant"),
      category: "power_generation",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 4, stanene: 1 },
      grant: ["titan_power", 1],
      cost: {
        Knowledge() {
          return 55e4;
        }
      },
      effect() {
        return loc("tech_hydrogen_plant_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_titan.hydrogen_plant);
          return true;
        }
        return false;
      }
    },
    water_mining: {
      id: "tech-water_mining",
      title: loc("tech_water_mining"),
      desc: loc("tech_water_mining"),
      category: "power_generation",
      era: "solar",
      path: ["truepath"],
      reqs: { titan: 2, enceladus: 1 },
      grant: ["enceladus", 2],
      cost: {
        Knowledge() {
          return 45e4;
        }
      },
      effect() {
        return loc("tech_water_mining_effect", [
          planetName().enceladus,
          races[global.race.species].home,
          global.resource.Water.name
        ]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_enceladus.water_freighter);
          return true;
        }
        return false;
      }
    },
    mercury_smelting: {
      id: "tech-mercury_smelting",
      title: loc("tech_mercury_smelting"),
      desc: loc("tech_mercury_smelting"),
      category: "mining",
      era: "solar",
      path: ["truepath"],
      reqs: { hell: 1, titan: 4, smelting: 6 },
      grant: ["m_smelting", 1],
      cost: {
        Knowledge() {
          return 625e3;
        },
        Adamantite() {
          return 5e4;
        }
      },
      effect() {
        return loc("tech_mercury_smelting_effect", [planetName().hell]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_hell.hell_smelter);
          return true;
        }
        return false;
      }
    },
    iridium_smelting: {
      id: "tech-iridium_smelting",
      title: loc("tech_iridium_smelting"),
      desc: loc("tech_iridium_smelting"),
      category: "mining",
      era: "solar",
      path: ["truepath"],
      reqs: { m_smelting: 1, graphene: 1 },
      grant: ["m_smelting", 2],
      cost: {
        Knowledge() {
          return 825e3;
        },
        Graphene() {
          return 125e3;
        }
      },
      effect: loc("tech_iridium_smelting_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    adamantite_crates: {
      id: "tech-adamantite_crates",
      title: loc("tech_adamantite_crates"),
      desc: loc("tech_adamantite_crates_desc"),
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { container: 5, titan: 4 },
      grant: ["container", 6],
      cost: {
        Knowledge() {
          return 525e3;
        },
        Adamantite() {
          return 12500;
        }
      },
      effect: loc("tech_adamantite_crates_effect"),
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    bolognium_crates_tp: {
      id: "tech-bolognium_crates_tp",
      title() {
        return loc("tech_crates", [global.resource.Bolognium.name]);
      },
      desc() {
        return loc("tech_crates", [global.resource.Bolognium.name]);
      },
      category: "storage",
      era: "tauceti",
      path: ["truepath"],
      reqs: { container: 7, tauceti: 4 },
      grant: ["container", 8],
      cost: {
        Knowledge() {
          return 616e4;
        },
        Bolognium() {
          return 75e4;
        }
      },
      effect() {
        return loc("tech_bolognium_crates_effect", [global.resource.Bolognium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    adamantite_containers_tp: {
      id: "tech-adamantite_containers_tp",
      title() {
        return loc("tech_containers", [global.resource.Adamantite.name]);
      },
      desc() {
        return loc("tech_adamantite_containers_desc", [global.resource.Adamantite.name]);
      },
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { steel_container: 4, titan: 4 },
      grant: ["steel_container", 5],
      cost: {
        Knowledge() {
          return 575e3;
        },
        Adamantite() {
          return 17500;
        }
      },
      effect() {
        return loc("tech_adamantite_containers_effect", [global.resource.Adamantite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    quantium_containers: {
      id: "tech-quantium_containers",
      title() {
        return loc("tech_containers", [global.resource.Quantium.name]);
      },
      desc() {
        return loc("tech_containers", [global.resource.Quantium.name]);
      },
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { steel_container: 5, quantium: 1 },
      grant: ["steel_container", 6],
      cost: {
        Knowledge() {
          return 115e4;
        },
        Quantium() {
          return 1e5;
        }
      },
      effect() {
        return loc("tech_quantium_containers_effect", [global.resource.Quantium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          vBind({ el: `#createHead` }, "update");
          return true;
        }
        return false;
      }
    },
    unobtainium_containers: {
      id: "tech-unobtainium_containers",
      title() {
        return loc("tech_containers", [global.resource.Unobtainium.name]);
      },
      desc() {
        return loc("tech_containers", [global.resource.Unobtainium.name]);
      },
      category: "storage",
      era: "tauceti",
      path: ["truepath"],
      reqs: { steel_container: 6, tau_red: 7 },
      grant: ["steel_container", 7],
      cost: {
        Knowledge() {
          return 725e4;
        },
        Unobtainium() {
          return 7500;
        }
      },
      effect() {
        return loc("tech_bolognium_containers_effect", [global.resource.Unobtainium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    reinforced_shelving: {
      id: "tech-reinforced_shelving",
      title: loc("tech_reinforced_shelving"),
      desc: loc("tech_reinforced_shelving"),
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { graphene: 1, titan: 5 },
      grant: ["shelving", 1],
      cost: {
        Knowledge() {
          return 85e4;
        },
        Adamantite() {
          return 35e4;
        },
        Graphene() {
          return 25e4;
        }
      },
      effect: loc("tech_reinforced_shelving_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    garage_shelving: {
      id: "tech-garage_shelving",
      title: loc("tech_garage_shelving"),
      desc: loc("tech_garage_shelving"),
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { shelving: 1, quantium: 1 },
      grant: ["shelving", 2],
      cost: {
        Knowledge() {
          return 125e4;
        },
        Quantium() {
          return 75e3;
        }
      },
      effect: loc("tech_garage_shelving_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    warehouse_shelving: {
      id: "tech-warehouse_shelving",
      title: loc("tech_warehouse_shelving"),
      desc: loc("tech_warehouse_shelving"),
      category: "storage",
      era: "solar",
      path: ["truepath"],
      reqs: { shelving: 2, quantium: 1, outer: 4 },
      grant: ["shelving", 3],
      cost: {
        Knowledge() {
          return 225e4;
        },
        Quantium() {
          return 1e6;
        },
        Cipher() {
          return 25e3;
        }
      },
      effect: loc("tech_warehouse_shelving_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elerium_extraction: {
      id: "tech-elerium_extraction",
      title: loc("tech_elerium_extraction"),
      desc: loc("tech_elerium_extraction"),
      category: "mining",
      era: "solar",
      path: ["truepath"],
      reqs: { kuiper: 1 },
      grant: ["kuiper", 2],
      cost: {
        Knowledge() {
          return 25e5;
        },
        Orichalcum() {
          return 1e5;
        },
        Cipher() {
          return 12e3;
        }
      },
      effect() {
        return loc("tech_elerium_extraction_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_kuiper.elerium_mine);
          return true;
        }
        return false;
      }
    },
    orichalcum_panels_tp: {
      id: "tech-orichalcum_panels_tp",
      title: loc("tech_orichalcum_panels"),
      desc: loc("tech_orichalcum_panels"),
      category: "power_generation",
      era: "solar",
      path: ["truepath"],
      reqs: { kuiper: 1, swarm: 5 },
      grant: ["swarm", 6],
      cost: {
        Knowledge() {
          return 24e5;
        },
        Orichalcum() {
          return 125e3;
        }
      },
      effect() {
        return loc("tech_orichalcum_panels_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    shipyard: {
      id: "tech-shipyard",
      title() {
        return loc("tech_shipyard", [planetName().dwarf]);
      },
      desc() {
        return loc("tech_shipyard", [planetName().dwarf]);
      },
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { outer: 1, syndicate: 1 },
      grant: ["shipyard", 1],
      cost: {
        Knowledge() {
          return 42e4;
        }
      },
      effect() {
        return loc("tech_shipyard_effect", [planetName().dwarf]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.space.spc_dwarf.shipyard);
          setOrbits();
          return true;
        }
        return false;
      }
    },
    ship_lasers: {
      id: "tech-ship_lasers",
      title: loc("tech_ship_lasers"),
      desc: loc("tech_ship_lasers"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { military: 7, syard_weapon: 1 },
      grant: ["syard_weapon", 2],
      cost: {
        Knowledge() {
          return 425e3;
        },
        Elerium() {
          return 500;
        }
      },
      effect: loc("tech_ship_lasers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pulse_lasers: {
      id: "tech-pulse_lasers",
      title: loc("tech_pulse_lasers"),
      desc: loc("tech_pulse_lasers"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_weapon: 2 },
      grant: ["syard_weapon", 3],
      cost: {
        Knowledge() {
          return 5e5;
        },
        Elerium() {
          return 750;
        }
      },
      effect: loc("tech_pulse_lasers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ship_plasma: {
      id: "tech-ship_plasma",
      title: loc("tech_ship_plasma"),
      desc: loc("tech_ship_plasma"),
      category: "space_militarization",
      era: "solar",
      reqs: { high_tech: 13, syard_weapon: 3 },
      grant: ["syard_weapon", 4],
      path: ["truepath"],
      cost: {
        Knowledge() {
          return 88e4;
        },
        Elerium() {
          return 2500;
        }
      },
      effect: loc("tech_ship_plasma_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ship_phaser: {
      id: "tech-ship_phaser",
      title: loc("tech_ship_phaser"),
      desc: loc("tech_ship_phaser"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_weapon: 4, quantium: 1 },
      grant: ["syard_weapon", 5],
      cost: {
        Knowledge() {
          return 1225e3;
        },
        Quantium() {
          return 75e3;
        }
      },
      effect: loc("tech_ship_phaser_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ship_disruptor: {
      id: "tech-ship_disruptor",
      title: loc("tech_ship_disruptor"),
      desc: loc("tech_ship_disruptor"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_weapon: 5, outer: 4 },
      grant: ["syard_weapon", 6],
      cost: {
        Knowledge() {
          return 2e6;
        },
        Cipher() {
          return 25e3;
        }
      },
      effect: loc("tech_ship_disruptor_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    destroyer_ship: {
      id: "tech-destroyer_ship",
      title: loc("tech_destroyer_ship"),
      desc: loc("tech_destroyer_ship"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_class: 2 },
      grant: ["syard_class", 3],
      cost: {
        Knowledge() {
          return 465e3;
        }
      },
      effect: loc("tech_destroyer_ship_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    cruiser_ship_tp: {
      id: "tech-cruiser_ship_tp",
      title: loc("tech_cruiser_ship"),
      desc: loc("tech_cruiser_ship"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_class: 3, titan: 4 },
      grant: ["syard_class", 4],
      cost: {
        Knowledge() {
          return 75e4;
        },
        Adamantite() {
          return 5e4;
        }
      },
      effect: loc("tech_cruiser_ship_tp"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    h_cruiser_ship: {
      id: "tech-h_cruiser_ship",
      title: loc("tech_h_cruiser_ship"),
      desc: loc("tech_h_cruiser_ship"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_class: 4, triton: 1 },
      grant: ["syard_class", 5],
      cost: {
        Knowledge() {
          return 15e5;
        }
      },
      effect: loc("tech_h_cruiser_ship_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    dreadnought_ship: {
      id: "tech-dreadnought_ship",
      title: loc("tech_dreadnought_ship"),
      desc: loc("tech_dreadnought_ship"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_class: 5, kuiper: 1 },
      grant: ["syard_class", 6],
      cost: {
        Knowledge() {
          return 25e5;
        },
        Cipher() {
          return 1e4;
        }
      },
      effect: loc("tech_dreadnought_ship_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    pulse_engine: {
      id: "tech-pulse_engine",
      title: loc("outer_shipyard_engine_pulse"),
      desc: loc("outer_shipyard_engine_pulse"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_engine: 2, stanene: 1 },
      grant: ["syard_engine", 3],
      cost: {
        Knowledge() {
          return 555e3;
        },
        Stanene() {
          return 25e4;
        }
      },
      effect: loc("tech_pulse_engine_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    photon_engine: {
      id: "tech-photon_engine",
      title: loc("outer_shipyard_engine_photon"),
      desc: loc("outer_shipyard_engine_photon"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_engine: 3, quantium: 1 },
      grant: ["syard_engine", 4],
      cost: {
        Knowledge() {
          return 115e4;
        },
        Quantium() {
          return 5e4;
        }
      },
      effect: loc("tech_photon_engine_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    vacuum_drive: {
      id: "tech-vacuum_drive",
      title: loc("outer_shipyard_engine_vacuum"),
      desc: loc("outer_shipyard_engine_vacuum"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_engine: 4, outer: 4 },
      grant: ["syard_engine", 5],
      cost: {
        Knowledge() {
          return 185e4;
        },
        Cipher() {
          return 1e4;
        }
      },
      effect: loc("outer_shipyard_engine_vacuum_desc"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ship_fusion: {
      id: "tech-ship_fusion",
      title: loc("tech_fusion_generator"),
      desc: loc("tech_fusion_generator"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_power: 3, quantium: 1 },
      grant: ["syard_power", 4],
      cost: {
        Knowledge() {
          return 11e5;
        },
        Quantium() {
          return 65e3;
        }
      },
      effect: loc("tech_fusion_generator_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ship_elerium: {
      id: "tech-ship_elerium",
      title: loc("tech_elerium_generator"),
      desc: loc("tech_elerium_generator"),
      category: "space_militarization",
      era: "solar",
      path: ["truepath"],
      reqs: { syard_power: 4, outer: 4 },
      grant: ["syard_power", 5],
      cost: {
        Knowledge() {
          return 19e5;
        },
        Cipher() {
          return 18e3;
        }
      },
      effect: loc("tech_elerium_generator_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    quantum_signatures: {
      id: "tech-quantum_signatures",
      title: loc("tech_quantum_signatures"),
      desc: loc("tech_quantum_signatures"),
      category: "progress",
      era: "solar",
      path: ["truepath"],
      reqs: { quantium: 1, syard_sensor: 3 },
      grant: ["syard_sensor", 4],
      cost: {
        Knowledge() {
          return 105e4;
        },
        Quantium() {
          return 1e4;
        }
      },
      effect: loc("tech_quantum_signatures_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    interstellar_drive: {
      id: "tech-interstellar_drive",
      title: loc("tech_interstellar_drive"),
      desc: loc("tech_interstellar_drive"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { outer: 8, titan_ai_core: 2, syard_sensor: 4 },
      grant: ["tauceti", 1],
      cost: {
        Knowledge() {
          return 45e5;
        },
        Quantium() {
          return 25e4;
        },
        Cipher() {
          return 75e3;
        }
      },
      effect: loc("tech_interstellar_drive_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        drawShipYard();
      }
    },
    alien_outpost: {
      id: "tech-alien_outpost",
      title: loc("tech_alien_outpost"),
      desc: loc("tech_alien_outpost"),
      category: "science",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tauceti: 2, tau_home: 3 },
      grant: ["tau_home", 4],
      cost: {
        Knowledge() {
          return 5e6;
        },
        Cipher() {
          return 1e5;
        }
      },
      effect: loc("tech_alien_outpost_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.alien_outpost);
          initStruct(actions.tauceti.tau_home.jump_gate);
          initStruct(actions.space.spc_sun.jump_gate);
          messageQueue(loc("tech_alien_outpost_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    jumpgates: {
      id: "tech-jumpgates",
      title: loc("tech_jumpgates"),
      desc: loc("tech_jumpgates"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tauceti: 2, tau_home: 4 },
      grant: ["tauceti", 3],
      cost: {
        Knowledge() {
          return 6e6;
        }
      },
      effect: loc("tech_jumpgates_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    system_survey: {
      id: "tech-system_survey",
      title: loc("tech_system_survey"),
      desc: loc("tech_system_survey"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tauceti: 4, womling_tech: 1 },
      grant: ["tauceti", 5],
      cost: {
        Knowledge() {
          return 7e6;
        }
      },
      effect: loc("tech_system_survey_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.tau.roid = true;
          global.settings.tau.gas = true;
          initStruct(actions.tauceti.tau_roid.patrol_ship);
          return true;
        }
        return false;
      }
    },
    repository: {
      id: "tech-repository",
      title: loc("tech_repository"),
      desc: loc("tech_repository"),
      category: "storage",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tauceti: 4, tau_home: 4 },
      grant: ["tau_home", 5],
      cost: {
        Knowledge() {
          return 65e5;
        }
      },
      effect: loc("tech_repository_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.repository);
          return true;
        }
        return false;
      }
    },
    fusion_generator: {
      id: "tech-fusion_generator",
      title: loc("tech_fusion_power"),
      desc: loc("tech_fusion_power"),
      category: "power_generation",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_home: 5 },
      grant: ["tau_home", 6],
      cost: {
        Knowledge() {
          return 675e4;
        }
      },
      effect: loc("tech_tau_fusion_power_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.fusion_generator);
          return true;
        }
        return false;
      }
    },
    tau_cultivation: {
      id: "tech-tau_cultivation",
      title: loc("tech_tau_cultivation"),
      desc: loc("tech_tau_cultivation"),
      category: "agriculture",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_home: 6 },
      grant: ["tau_home", 7],
      cost: {
        Knowledge() {
          return 69e5;
        }
      },
      effect() {
        return loc("tech_tau_cultivation_effect", [races[global.race.species].home]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.tau_farm);
          return true;
        }
        return false;
      }
    },
    tau_manufacturing: {
      id: "tech-tau_manufacturing",
      title: loc("tech_tau_manufacturing"),
      desc: loc("tech_tau_manufacturing"),
      category: "crafting",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_home: 7 },
      grant: ["tau_home", 8],
      cost: {
        Knowledge() {
          return 725e4;
        }
      },
      effect() {
        return loc("tech_tau_manufacturing_effect", [races[global.race.species].home]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.tau_factory);
          return true;
        }
        return false;
      }
    },
    weasels: {
      id: "tech-weasels",
      title: loc("tech_weasels"),
      desc: loc("tech_weasels"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_red: 2 },
      grant: ["tau_red", 3],
      cost: {
        Knowledge() {
          return 625e4;
        }
      },
      effect() {
        return loc("tech_weasels_effect", [loc("tau_planet", [planetName().red])]);
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_weasels_msg", [loc("tau_planet", [planetName().red])]), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    jeff: {
      id: "tech-jeff",
      title: loc("tech_jeff"),
      desc: loc("tech_jeff"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_red: 3 },
      grant: ["tau_red", 4],
      cost: {
        Knowledge() {
          return 638e4;
        }
      },
      effect() {
        return loc("tech_jeff_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_jeff_effect_msg", []), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    womling_fun: {
      id: "tech-womling_fun",
      title: loc("tech_womling_fun"),
      desc: loc("tech_womling_fun"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_red: 5 },
      grant: ["tau_red", 6],
      cost: {
        Knowledge() {
          return 665e4;
        }
      },
      effect() {
        return loc("tech_womling_fun_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_lab: {
      id: "tech-womling_lab",
      title: loc("tech_womling_lab"),
      desc: loc("tech_womling_lab"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_red: 6 },
      grant: ["tau_red", 7],
      cost: {
        Knowledge() {
          return 69e5;
        }
      },
      effect() {
        return loc("tech_womling_lab_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_red.womling_lab);
          global.tech["womling_tech"] = 0;
          return true;
        }
        return false;
      }
    },
    womling_mining: {
      id: "tech-womling_mining",
      title: loc("tech_womling_mining"),
      desc: loc("tech_womling_mining"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 1 },
      grant: ["womling_mining", 1],
      cost: {
        Knowledge() {
          return 71e5;
        }
      },
      effect() {
        return loc("tech_womling_mining_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_firstaid: {
      id: "tech-womling_firstaid",
      title: loc("tech_womling_firstaid"),
      desc: loc("tech_womling_firstaid"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 2 },
      grant: ["womling_firstaid", 1],
      cost: {
        Knowledge() {
          return 735e4;
        }
      },
      effect() {
        return loc("tech_womling_firstaid_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_logistics: {
      id: "tech-womling_logistics",
      title: loc("tech_womling_logistics"),
      desc: loc("tech_womling_logistics"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 3 },
      grant: ["womling_logistics", 1],
      cost: {
        Knowledge() {
          return 765e4;
        }
      },
      effect() {
        return loc("tech_womling_logistics_effect", [loc("tau_red_orbital_platform")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_repulser: {
      id: "tech-womling_repulser",
      title: loc("tech_womling_repulser"),
      desc: loc("tech_womling_repulser"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 4, womling_logistics: 1 },
      grant: ["womling_logistics", 2],
      cost: {
        Knowledge() {
          return 79e5;
        }
      },
      effect() {
        return loc("tech_womling_repulser_effect", [global.resource.Oil.name, loc("tau_red_orbital_platform")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_farming: {
      id: "tech-womling_farming",
      title: loc("tech_womling_farming"),
      desc: loc("tech_womling_farming"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 5 },
      grant: ["womling_pop", 1],
      cost: {
        Knowledge() {
          return 82e5;
        }
      },
      effect() {
        return loc("tech_womling_farming_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_housing: {
      id: "tech-womling_housing",
      title: loc("tech_womling_housing"),
      desc: loc("tech_womling_housing"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 6, womling_pop: 1 },
      grant: ["womling_pop", 2],
      cost: {
        Knowledge() {
          return 85e5;
        }
      },
      effect() {
        return loc("tech_womling_housing_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    womling_support: {
      id: "tech-womling_support",
      title: loc("tech_womling_support"),
      desc: loc("tech_womling_support"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 7, tau_gas: 4 },
      grant: ["womling_technicians", 1],
      cost: {
        Knowledge() {
          return 885e4;
        }
      },
      effect() {
        return `<div>${loc("tech_womling_support_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_gas.womling_station);
          return true;
        }
        return false;
      }
    },
    womling_recycling: {
      id: "tech-womling_recycling",
      title: loc("tech_womling_recycling"),
      desc: loc("tech_womling_recycling"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { womling_tech: 8 },
      grant: ["womling_recycling", 1],
      cost: {
        Knowledge() {
          return 955e4;
        }
      },
      effect() {
        return `<div>${loc("tech_womling_recycling_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    asteroid_analysis: {
      id: "tech-asteroid_analysis",
      title: loc("tech_asteroid_analysis"),
      desc: loc("tech_asteroid_analysis"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_roid: 1 },
      grant: ["tau_roid", 2],
      cost: {
        Knowledge() {
          return 735e4;
        }
      },
      effect() {
        return loc("tech_asteroid_analysis_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_asteroid_analysis_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    shark_repellent: {
      id: "tech-shark_repellent",
      title: loc("tech_shark_repellent"),
      desc: loc("tech_shark_repellent"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_roid: 2 },
      grant: ["tau_roid", 3],
      cost: {
        Knowledge() {
          return 74e5;
        }
      },
      effect() {
        return loc("tech_shark_repellent_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_shark_repellent_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    belt_mining: {
      id: "tech-belt_mining",
      title: loc("tech_belt_mining"),
      desc: loc("tech_belt_mining"),
      category: "space_mining",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_gas: 3, tau_roid: 3 },
      grant: ["tau_gas", 4],
      cost: {
        Knowledge() {
          return 765e4;
        }
      },
      effect() {
        return loc("tech_belt_mining_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_gas.ore_refinery);
          initStruct(actions.tauceti.tau_roid.mining_ship);
          return true;
        }
        return false;
      }
    },
    adv_belt_mining: {
      id: "tech-adv_belt_mining",
      title: loc("tech_adv_belt_mining"),
      desc: loc("tech_adv_belt_mining"),
      category: "space_mining",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_roid: 4 },
      grant: ["tau_roid", 5],
      cost: {
        Knowledge() {
          return 79e5;
        }
      },
      effect() {
        return loc("tech_adv_belt_mining_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
      }
    },
    space_whaling: {
      id: "tech-space_whaling",
      title: loc("tech_space_whaling"),
      desc: loc("tech_space_whaling"),
      category: "whaling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_gas: 3, tau_roid: 3 },
      grant: ["tau_whale", 1],
      cost: {
        Knowledge() {
          return 75e5;
        }
      },
      effect() {
        return loc("tech_space_whaling_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_gas.whaling_station);
          initStruct(actions.tauceti.tau_roid.whaling_ship);
          return true;
        }
        return false;
      }
    },
    infectious_disease_lab: {
      id: "tech-infectious_disease_lab",
      title() {
        return loc(global.race["artifical"] ? "tech_infectious_disease_lab_s" : "tech_infectious_disease_lab");
      },
      desc() {
        return loc(global.race["artifical"] ? "tech_infectious_disease_lab_s" : "tech_infectious_disease_lab");
      },
      category: "science",
      era: "tauceti",
      path: ["truepath"],
      reqs: { plague: 2 },
      grant: ["disease", 1],
      cost: {
        Knowledge() {
          return 825e4;
        }
      },
      effect() {
        return loc(global.race["artifical"] ? "tech_infectious_disease_lab_effect_s" : "tech_infectious_disease_lab_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.infectious_disease_lab);
          return true;
        }
        return false;
      }
    },
    isolation_protocol: {
      id: "tech-isolation_protocol",
      title: loc("tech_isolation_protocol"),
      desc: loc("tech_isolation_protocol"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { disease: 2 },
      grant: ["disease", 3],
      not_trait: ["lone_survivor"],
      cost: {
        Knowledge() {
          return 85e5;
        }
      },
      effect() {
        return `<div>${loc("tech_isolation_protocol_effect", [loc("tab_tauceti")])}</div><div class="has-text-special">${loc("tech_isolation_protocol_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (!global["sim"]) {
            save.setItem("evolveBak", LZString.compressToUTF16(JSON.stringify(global)));
          }
          global.tech["isolation"] = 1;
          jumpGateShutdown();
          return true;
        }
        return false;
      }
    },
    focus_cure: {
      id: "tech-focus_cure",
      title: loc("tech_focus_cure"),
      desc: loc("tech_focus_cure"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { disease: 2 },
      grant: ["disease", 3],
      not_trait: ["lone_survivor"],
      cost: {
        Knowledge() {
          return 85e5;
        }
      },
      effect() {
        return `<div>${loc("tech_focus_cure_effect", [loc("tab_tauceti")])}</div><div class="has-text-special">${loc("tech_focus_cure_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["focus_cure"] = 1;
          return true;
        }
        return false;
      }
    },
    decode_virus: {
      id: "tech-decode_virus",
      title: loc("tech_decode_virus"),
      desc: loc("tech_decode_virus"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 1 },
      grant: ["focus_cure", 2],
      cost: {
        Knowledge() {
          return 9e6;
        }
      },
      effect() {
        return `<div>${loc(global.race["artifical"] ? "tech_decode_virus_effect_s" : "tech_decode_virus_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          if (global.race["artifical"]) {
            messageQueue(loc("tech_decode_virus_msg1s", [actions.tauceti.tau_home.infectious_disease_lab.title()]), "info", false, ["progress"]);
          } else {
            messageQueue(loc("tech_decode_virus_msg1", [actions.tauceti.tau_home.infectious_disease_lab.title()]), "info", false, ["progress"]);
          }
          return true;
        }
        return false;
      }
    },
    vaccine_campaign: {
      id: "tech-vaccine_campaign",
      title: loc("tech_vaccine_campaign"),
      desc: loc("tech_vaccine_campaign"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 3 },
      grant: ["focus_cure", 4],
      cost: {
        Knowledge() {
          return 925e4;
        }
      },
      effect() {
        let struct = global.race["artifical"] ? actions.city.boot_camp.title() : actions.city.hospital.title;
        return `<div>${loc("tech_vaccine_campaign_effect", [struct])}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race["vax"] = 0;
          return true;
        }
        return false;
      }
    },
    vax_strat1: {
      id: "tech-vax_strat1",
      title: loc("tech_vax_strat1"),
      desc: loc("tech_vax_strat1"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 5 },
      grant: ["focus_cure", 6],
      cost: {
        Knowledge() {
          return 95e5;
        }
      },
      effect() {
        return `<div>${loc("tech_vax_strat1_effect")}</div><div class="has-text-special">${loc("tech_vax_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["vax_p"] = 1;
          messageQueue(loc("tech_vax_strat1_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    vax_strat2: {
      id: "tech-vax_strat2",
      title: loc("tech_vax_strat2"),
      desc: loc("tech_vax_strat2"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 5 },
      grant: ["focus_cure", 6],
      cost: {
        Knowledge() {
          return 95e5;
        }
      },
      effect() {
        return `<div>${loc("tech_vax_strat2_effect")}</div><div class="has-text-special">${loc("tech_vax_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["vax_f"] = 1;
          messageQueue(loc("tech_vax_strat2_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    vax_strat3: {
      id: "tech-vax_strat3",
      title: loc("tech_vax_strat3"),
      desc: loc("tech_vax_strat3"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 5 },
      grant: ["focus_cure", 6],
      cost: {
        Knowledge() {
          return 95e5;
        }
      },
      effect() {
        return `<div>${loc("tech_vax_strat3_effect")}</div><div class="has-text-special">${loc("tech_vax_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["vax_s"] = 1;
          messageQueue(loc("tech_vax_strat3_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    vax_strat4: {
      id: "tech-vax_strat4",
      title: loc("tech_vax_strat4"),
      desc: loc("tech_vax_strat4"),
      category: "plague",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 5 },
      grant: ["focus_cure", 6],
      cost: {
        Knowledge() {
          return 95e5;
        }
      },
      effect() {
        return `<div>${loc("tech_vax_strat4_effect")}</div><div class="has-text-special">${loc("tech_vax_warning")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.tech["vax_c"] = 1;
          messageQueue(loc("tech_vax_strat4_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    cloning: {
      id: "tech-cloning",
      title: loc("tech_cloning"),
      desc: loc("tech_cloning"),
      category: "housing",
      era: "tauceti",
      path: ["truepath"],
      reqs: { focus_cure: 7 },
      grant: ["cloning", 1],
      cost: {
        Knowledge() {
          return 975e4;
        }
      },
      effect() {
        return `<div>${loc(global.race["artifical"] ? "tech_cloning_effect_s" : "tech_cloning_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.cloning_facility);
          return true;
        }
        return false;
      },
      post() {
        defineGovernor();
      }
    },
    clone_degradation: {
      id: "tech-clone_degradation",
      title: loc("tech_clone_degradation"),
      desc: loc("tech_clone_degradation"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { cloning: 1 },
      grant: ["cloning", 2],
      cost: {
        Knowledge() {
          return 1e7;
        }
      },
      effect() {
        return `<div>${loc("tech_clone_degradation_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_clone_degradation_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    digital_paradise: {
      id: "tech-digital_paradise",
      title: loc("tech_digital_paradise"),
      desc: loc("tech_digital_paradise"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { cloning: 2 },
      grant: ["matrix", 1],
      cost: {
        Knowledge() {
          return 105e5;
        },
        Cipher() {
          return 2e5;
        }
      },
      effect() {
        return `<div>${loc("tech_digital_paradise_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ringworld: {
      id: "tech-ringworld",
      title: loc("tech_ringworld"),
      desc: loc("tech_ringworld"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { matrix: 1 },
      grant: ["matrix", 2],
      cost: {
        Money() {
          return 3e9;
        },
        Knowledge() {
          return 11e6;
        }
      },
      effect() {
        return `<div>${loc("tech_ringworld_effect")}</div>`;
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.tau.star = true;
          initStruct(actions.tauceti.tau_star.ringworld);
          return true;
        }
        return false;
      }
    },
    iso_gambling: {
      id: "tech-iso_gambling",
      title: loc("tech_iso_gambling"),
      desc: loc("tech_iso_gambling"),
      category: "banking",
      era: "tauceti",
      reqs: { gambling: 4, isolation: 1 },
      grant: ["iso_gambling", 1],
      cost: {
        Knowledge() {
          return 865e4;
        }
      },
      effect: loc("tech_iso_gambling_effect", [5]),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    outpost_boost: {
      id: "tech-outpost_boost",
      title() {
        return loc("tech_outpost_boost");
      },
      desc() {
        return loc("tech_outpost_boost");
      },
      category: "special",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_home: 4, isolation: 1 },
      grant: ["outpost_boost", 1],
      cost: {
        Knowledge() {
          return 89e5;
        }
      },
      effect() {
        return loc("tech_outpost_boost_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_outpost_boost_flair");
      }
    },
    cultural_center: {
      id: "tech-cultural_center",
      title: loc("tech_cultural_center"),
      desc: loc("tech_cultural_center"),
      category: "banking",
      era: "tauceti",
      path: ["truepath"],
      reqs: { iso_gambling: 1, isolation: 1 },
      grant: ["tau_culture", 1],
      cost: {
        Knowledge() {
          return 885e4;
        }
      },
      effect: loc("tech_cultural_center_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_home.tau_cultural_center);
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_cultural_center_flair");
      }
    },
    outer_tau_survey: {
      id: "tech-outer_tau_survey",
      title: loc("tech_outer_tau_survey"),
      desc: loc("tech_outer_tau_survey"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { outpost_boost: 1, plague: 5 },
      grant: ["tau_gas2", 1],
      cost: {
        Knowledge() {
          return 91e5;
        },
        Helium_3() {
          return +int_fuel_adjust(5e6).toFixed(0);
        }
      },
      effect: loc("tech_outer_tau_survey_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.settings.tau.gas2 = true;
          return true;
        }
        return false;
      }
    },
    alien_research: {
      id: "tech-alien_research",
      title: loc("tech_alien_research"),
      desc: loc("tech_alien_research"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_gas2: 5 },
      grant: ["tau_gas2", 6],
      cost: {
        Knowledge() {
          return 935e4;
        }
      },
      effect: loc("tech_alien_research_effect"),
      action() {
        if (payCosts($(this)[0])) {
          global.tauceti.alien_space_station["decrypted"] = 0;
          global.tauceti.alien_space_station["focus"] = 95;
          messageQueue(loc("tech_alien_research_msg"), "info", false, ["progress"]);
          return true;
        }
        return false;
      }
    },
    womling_gene_therapy: {
      id: "tech-womling_gene_therapy",
      title: loc("tech_womling_gene_therapy"),
      desc: loc("tech_womling_gene_therapy"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 1 },
      grant: ["womling_gene", 1],
      cost: {
        Knowledge() {
          return 952e4;
        }
      },
      effect: loc("tech_womling_gene_therapy_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    food_culture: {
      id: "tech-food_culture",
      title() {
        return loc("tech_food_culture", [loc(`tau_gas2_alien_station_data2_r${global.race.tau_food_item || 0}`)]);
      },
      desc() {
        return loc("tech_food_culture", [loc(`tau_gas2_alien_station_data2_r${global.race.tau_food_item || 0}`)]);
      },
      category: "banking",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 2, tau_culture: 1 },
      grant: ["tau_culture", 2],
      cost: {
        Knowledge() {
          return 941e4;
        }
      },
      effect() {
        return loc("tech_food_culture_effect", [loc(`tau_gas2_alien_station_data2_r${global.race.tau_food_item || 0}`), loc("tech_cultural_center")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_refinery: {
      id: "tech-advanced_refinery",
      title: loc("tech_advanced_refinery"),
      desc: loc("tech_advanced_refinery"),
      category: "space_mining",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 3 },
      grant: ["tau_ore_mining", 1],
      cost: {
        Knowledge() {
          return 968e4;
        }
      },
      effect() {
        return loc("tech_advanced_refinery_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_pit_mining: {
      id: "tech-advanced_pit_mining",
      title: loc("tech_advanced_pit_mining"),
      desc: loc("tech_advanced_pit_mining"),
      category: "space_mining",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 3 },
      grant: ["tau_pit_mining", 1],
      cost: {
        Knowledge() {
          return 972e4;
        }
      },
      effect() {
        return loc("tech_advanced_pit_mining_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    useless_junk: {
      id: "tech-useless_junk",
      title: loc("tech_useless_junk"),
      desc: loc("tech_useless_junk"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 4 },
      grant: ["tau_junksale", 1],
      cost: {
        Knowledge() {
          return 955e4;
        }
      },
      effect() {
        return loc("tech_useless_junk_effect", [loc(`tau_gas2_alien_station_data4_r${global.race.tau_junk_item || 0}`), loc(`tau_red_womlings`)]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_asteroid_mining: {
      id: "tech-advanced_asteroid_mining",
      title: loc("tech_advanced_asteroid_mining"),
      desc: loc("tech_advanced_asteroid_mining"),
      category: "space_mining",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 5, tau_ore_mining: 1 },
      grant: ["tau_ore_mining", 2],
      cost: {
        Knowledge() {
          return 975e4;
        }
      },
      effect() {
        return loc("tech_advanced_asteroid_mining_effect", [loc(`tau_roid_mining_ship`)]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    advanced_material_synthesis: {
      id: "tech-advanced_material_synthesis",
      title: loc("tech_advanced_material_synthesis"),
      desc: loc("tech_advanced_material_synthesis"),
      category: "crafting",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 5, disease: 1 },
      grant: ["alien_crafting", 1],
      cost: {
        Knowledge() {
          return 988e4;
        }
      },
      effect() {
        return loc("tech_advanced_material_synthesis_effect", [global.resource.Quantium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    matrioshka_brain: {
      id: "tech-matrioshka_brain",
      title: loc("tech_matrioshka_brain"),
      desc: loc("tech_matrioshka_brain"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 6, tau_gas2: 6 },
      grant: ["tau_gas2", 7],
      not_trait: ["lone_survivor"],
      cost: {
        Knowledge() {
          return 1e7;
        }
      },
      effect() {
        return loc("tech_matrioshka_brain_effect", [actions.tauceti.tau_gas2.info.name()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_gas2.matrioshka_brain);
          return true;
        }
        return false;
      }
    },
    ignition_device: {
      id: "tech-ignition_device",
      title: loc("tech_ignition_device"),
      desc: loc("tech_ignition_device"),
      category: "progress",
      era: "tauceti",
      path: ["truepath"],
      reqs: { alien_data: 6, tau_gas2: 7 },
      grant: ["tau_gas2", 8],
      cost: {
        Knowledge() {
          return 105e5;
        }
      },
      effect() {
        return loc("tech_ignition_device_effect", [actions.tauceti.tau_gas2.info.name()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_gas2.ignition_device);
          if (!global.tauceti.hasOwnProperty("matrioshka_brain")) {
            initStruct(actions.tauceti.tau_gas2.matrioshka_brain);
          }
          return true;
        }
        return false;
      }
    },
    replicator: {
      id: "tech-replicator",
      title() {
        return global.race.universe === "antimatter" ? loc("tech_antireplicator") : loc("tech_replicator");
      },
      desc() {
        return global.race.universe === "antimatter" ? loc("tech_antireplicator") : loc("tech_replicator");
      },
      category: "special",
      era: "tauceti",
      path: ["truepath"],
      reqs: { tau_home: 4, isolation: 1 },
      trait: ["lone_survivor"],
      grant: ["replicator", 1],
      cost: {
        Knowledge() {
          return 625e4;
        }
      },
      effect() {
        return global.race.universe === "antimatter" ? loc("tech_antireplicator_effect") : loc("tech_replicator_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          global.race["replicator"] = { res: "Unobtainium", pow: 1 };
          return true;
        }
        return false;
      },
      post() {
        defineIndustry();
        defineGovernor();
      }
    },
    womling_unlock: {
      id: "tech-womling_unlock",
      title: loc("tech_womling_unlock"),
      desc: loc("tech_womling_unlock"),
      category: "womling",
      era: "tauceti",
      path: ["truepath"],
      reqs: { replicator: 1 },
      trait: ["lone_survivor"],
      grant: ["tau_red", 4],
      cost: {
        Knowledge() {
          return 65e5;
        }
      },
      effect() {
        return loc("tech_womling_unlock_effect", [loc("tau_planet", [planetName().red])]);
      },
      action() {
        if (payCosts($(this)[0])) {
          global.settings.tau.red = true;
          global.tauceti.orbital_platform.count = 1;
          global.tauceti.orbital_platform.on = 1;
          return true;
        }
        return false;
      }
    },
    garden_of_eden: {
      id: "tech-garden_of_eden",
      title: loc("tech_garden_of_eden"),
      desc: loc("tech_garden_of_eden"),
      category: "special",
      era: "tauceti",
      path: ["truepath"],
      reqs: { eden: 1 },
      grant: ["eden", 2],
      cost: {
        Knowledge() {
          return 1e7;
        }
      },
      effect() {
        return loc("tech_garden_of_eden_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.tauceti.tau_star.goe_facility);
          return true;
        }
        return false;
      }
    },
    asphodel_flowers: {
      id: "tech-asphodel_flowers",
      title: loc("tech_asphodel_flowers"),
      desc: loc("tech_asphodel_flowers"),
      category: "edenic",
      era: "existential",
      reqs: { edenic: 4 },
      grant: ["asphodel", 1],
      cost: {
        Knowledge() {
          return 61e6;
        }
      },
      effect() {
        return loc("tech_asphodel_flowers_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          messageQueue(loc("tech_asphodel_flowers_msg"), "info", false, ["progress"]);
          initStruct(actions.eden.eden_asphodel.asphodel_harvester);
          global.resource.Asphodel_Powder.display = true;
          return true;
        }
        return false;
      }
    },
    ghost_traps: {
      id: "tech-ghost_traps",
      title: loc("tech_ghost_traps"),
      desc: loc("tech_ghost_traps"),
      category: "edenic",
      era: "existential",
      reqs: { asphodel: 1 },
      grant: ["asphodel", 2],
      cost: {
        Knowledge() {
          return 6125e4;
        },
        Asphodel_Powder() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_ghost_traps_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.ectoplasm_processor);
          return true;
        }
        return false;
      }
    },
    research_station: {
      id: "tech-research_station",
      title: loc("tech_research_station"),
      desc: loc("tech_research_station"),
      category: "science",
      era: "existential",
      reqs: { asphodel: 2 },
      grant: ["asphodel", 3],
      cost: {
        Knowledge() {
          return 6165e4;
        },
        Asphodel_Powder() {
          return 5e3;
        }
      },
      effect() {
        return loc("tech_research_station_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.research_station);
          return true;
        }
        return false;
      }
    },
    soul_engine: {
      id: "tech-soul_engine",
      title: loc("tech_soul_engine"),
      desc: loc("tech_soul_engine"),
      category: "power_generation",
      era: "existential",
      reqs: { asphodel: 3 },
      grant: ["asphodel", 4],
      cost: {
        Knowledge() {
          return 7e7;
        },
        Omniscience() {
          return 1e3;
        },
        Asphodel_Powder() {
          return 12500;
        }
      },
      effect() {
        return loc("tech_soul_engine_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.soul_engine);
          return true;
        }
        return false;
      }
    },
    railway_to_hell: {
      id: "tech-railway_to_hell",
      title: loc("tech_railway_to_hell"),
      desc: loc("tech_railway_to_hell"),
      category: "hell_dimension",
      era: "existential",
      reqs: { asphodel: 4, hell_lake: 6 },
      grant: ["hell_lake", 7],
      cost: {
        Knowledge() {
          return 7125e4;
        },
        Omniscience() {
          return 5e3;
        },
        Asphodel_Powder() {
          return 15e3;
        }
      },
      effect() {
        return loc("tech_railway_to_hell_effect", [global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    purification: {
      id: "tech-purification",
      title() {
        return global.race["warlord"] ? loc("tech_putrification") : loc("tech_purification");
      },
      desc() {
        return global.race["warlord"] ? loc("tech_putrification") : loc("tech_purification");
      },
      category: "hell_dimension",
      era: "existential",
      reqs: { asphodel: 4, hell_spire: 10 },
      grant: ["hell_spire", 11],
      cost: {
        Knowledge() {
          return 7125e4;
        },
        Omniscience() {
          return 5e3;
        },
        Asphodel_Powder() {
          return 17500;
        }
      },
      effect() {
        return loc(global.race["warlord"] ? "tech_putrification_effect" : "tech_purification_effect", [global.resource.Asphodel_Powder.name, actions.portal.prtl_spire.purifier.title(), 2, loc("eden_asphodel_harvester_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    asphodel_mech: {
      id: "tech-asphodel_mech",
      title: loc("tech_asphodel_mech"),
      desc: loc("tech_asphodel_mech"),
      category: "military",
      era: "existential",
      reqs: { asphodel: 5, military: 12 },
      grant: ["asphodel", 6],
      cost: {
        Knowledge() {
          return 723e5;
        },
        Omniscience() {
          return 6e3;
        }
      },
      effect() {
        return loc("tech_asphodel_mech_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.mech_station);
          return true;
        }
        return false;
      }
    },
    asphodel_storage: {
      id: "tech-asphodel_storage",
      title: loc("tech_asphodel_storage"),
      desc: loc("tech_asphodel_storage"),
      category: "storage",
      era: "existential",
      reqs: { asphodel: 6 },
      grant: ["asphodel", 7],
      cost: {
        Knowledge() {
          return 73e6;
        },
        Omniscience() {
          return 6500;
        }
      },
      effect() {
        return loc("tech_asphodel_storage_effect", [global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.warehouse);
          return true;
        }
        return false;
      }
    },
    asphodel_stabilizer: {
      id: "tech-asphodel_stabilizer",
      title: loc("tech_asphodel_stabilizer"),
      desc: loc("tech_asphodel_stabilizer"),
      category: "storage",
      era: "existential",
      reqs: { asphodel: 7 },
      grant: ["asphodel", 8],
      cost: {
        Knowledge() {
          return 74e6;
        },
        Omniscience() {
          return 1e4;
        }
      },
      effect() {
        return loc("tech_asphodel_stabilizer_effect", [global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.stabilizer);
          return true;
        }
        return false;
      }
    },
    edenic_bunker: {
      id: "tech-edenic_bunker",
      title: loc("tech_edenic_bunker"),
      desc: loc("tech_edenic_bunker"),
      category: "military",
      era: "existential",
      reqs: { asphodel: 8 },
      grant: ["asphodel", 9],
      cost: {
        Knowledge() {
          return 775e5;
        },
        Omniscience() {
          return 12e3;
        }
      },
      effect() {
        return loc("tech_edenic_bunker_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.bunker);
          return true;
        }
        return false;
      }
    },
    bliss_den: {
      id: "tech-bliss_den",
      title: loc("tech_bliss_den"),
      desc: loc("tech_bliss_den"),
      category: "entertainment",
      era: "existential",
      reqs: { asphodel: 9 },
      grant: ["asphodel", 10],
      cost: {
        Knowledge() {
          return 9e7;
        },
        Omniscience() {
          return 16666;
        }
      },
      effect() {
        return loc("tech_bliss_den_effect", [global.resource.Asphodel_Powder.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.bliss_den);
          return true;
        }
        return false;
      }
    },
    hallowed_housing: {
      id: "tech-hallowed_housing",
      title: loc("tech_hallowed_housing"),
      desc: loc("tech_hallowed_housing"),
      category: "housing",
      era: "existential",
      reqs: { asphodel: 10, theology: 2 },
      not_trait: ["warlord"],
      grant: ["asphodel", 11],
      cost: {
        Knowledge() {
          return 95e6;
        },
        Omniscience() {
          return 19500;
        }
      },
      effect() {
        return loc("tech_hallowed_housing_effect", [jobName("priest"), loc("eden_asphodel_name")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.rectory);
          return true;
        }
        return false;
      }
    },
    outer_plane_study: {
      id: "tech-outer_plane_study",
      title: loc("tech_outer_plane_study"),
      desc: loc("tech_outer_plane_study"),
      category: "edenic",
      era: "existential",
      reqs: { asphodel: 3, science: 22 },
      grant: ["elysium", 1],
      cost: {
        Knowledge() {
          return 75e6;
        },
        Omniscience() {
          return 11655;
        }
      },
      effect() {
        return loc("tech_outer_plane_study_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.rune_gate);
          initStruct(actions.eden.eden_asphodel.rune_gate_open);
          return true;
        }
        return false;
      }
    },
    camouflage: {
      id: "tech-camouflage",
      title: loc("tech_camouflage"),
      desc: loc("tech_camouflage"),
      category: "edenic",
      era: "existential",
      reqs: { elysium: 3 },
      grant: ["celestial_warfare", 1],
      cost: {
        Knowledge() {
          return 83e6;
        },
        Omniscience() {
          return 15e3;
        },
        Asphodel_Powder() {
          return 1e5;
        }
      },
      effect() {
        return loc("tech_camouflage_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    celestial_tactics: {
      id: "tech-celestial_tactics",
      title: loc("tech_celestial_tactics"),
      desc: loc("tech_celestial_tactics"),
      category: "military",
      era: "existential",
      reqs: { celestial_warfare: 1 },
      condition() {
        return global.eden.hasOwnProperty("fortress") && global.eden.fortress.patrols <= 18 ? true : false;
      },
      grant: ["celestial_warfare", 2],
      cost: {
        Knowledge() {
          return 86e6;
        },
        Omniscience() {
          return 17500;
        }
      },
      effect() {
        return loc("tech_celestial_tactics_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    active_camouflage: {
      id: "tech-active_camouflage",
      title: loc("tech_active_camouflage"),
      desc: loc("tech_active_camouflage"),
      category: "military",
      era: "existential",
      reqs: { celestial_warfare: 2 },
      condition() {
        return global.eden.hasOwnProperty("fortress") && global.eden.fortress.armory < 100 ? true : false;
      },
      grant: ["celestial_warfare", 3],
      cost: {
        Knowledge() {
          return 89e6;
        },
        Omniscience() {
          return 18750;
        }
      },
      effect() {
        return loc("tech_active_camouflage_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    special_ops_training: {
      id: "tech-special_ops_training",
      title: loc("tech_special_ops_training"),
      desc: loc("tech_special_ops_training"),
      category: "military",
      era: "existential",
      reqs: { celestial_warfare: 3 },
      condition() {
        return global.eden.hasOwnProperty("fortress") && global.eden.fortress.armory <= 80 && global.eden.fortress.patrols <= 15 ? true : false;
      },
      grant: ["celestial_warfare", 4],
      cost: {
        Knowledge() {
          return 92e6;
        },
        Omniscience() {
          return 2e4;
        }
      },
      effect() {
        return loc("tech_special_ops_training_effect", [loc("eden_bunker_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    spectral_training: {
      id: "tech-spectral_training",
      title: loc("tech_spectral_training"),
      desc: loc("tech_spectral_training"),
      category: "military",
      era: "existential",
      reqs: { celestial_warfare: 4 },
      grant: ["celestial_warfare", 5],
      cost: {
        Knowledge() {
          return 945e5;
        },
        Omniscience() {
          return 21e3;
        }
      },
      effect() {
        return loc("tech_spectral_training_effect", [loc("eden_bunker_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elysanite_mining: {
      id: "tech-elysanite_mining",
      title: loc("tech_elysanite_mining"),
      desc: loc("tech_elysanite_mining"),
      category: "mining",
      era: "existential",
      reqs: { elysium: 5 },
      grant: ["elysium", 6],
      cost: {
        Knowledge() {
          return 93e6;
        },
        Omniscience() {
          return 18500;
        }
      },
      effect() {
        return loc("tech_elysanite_mining_effect", [global.resource.Elysanite.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.elysanite_mine);
          global.resource.Elysanite.display = true;
          return true;
        }
        return false;
      }
    },
    sacred_smelter: {
      id: "tech-sacred_smelter",
      title: loc("eden_sacred_smelter_title"),
      desc: loc("eden_sacred_smelter_title"),
      category: "mining",
      era: "existential",
      reqs: { elysium: 6 },
      grant: ["elysium", 7],
      cost: {
        Knowledge() {
          return 96e6;
        },
        Omniscience() {
          return 19425;
        }
      },
      effect() {
        return loc("tech_sacred_smelter_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.sacred_smelter);
          return true;
        }
        return false;
      }
    },
    fire_support_base: {
      id: "tech-fire_support_base",
      title: loc("eden_fire_support_base_title"),
      desc: loc("eden_fire_support_base_title"),
      category: "military",
      era: "existential",
      reqs: { elysium: 7 },
      grant: ["elysium", 8],
      cost: {
        Knowledge() {
          return 1e8;
        },
        Omniscience() {
          return 22500;
        }
      },
      effect() {
        return loc("tech_fire_support_base_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.fire_support_base);
          return true;
        }
        return false;
      }
    },
    pillbox: {
      id: "tech-pillbox",
      title: loc("eden_pillbox_title"),
      desc: loc("eden_pillbox_title"),
      category: "military",
      era: "existential",
      reqs: { elysium: 8 },
      grant: ["elysium", 9],
      cost: {
        Knowledge() {
          return 1025e5;
        },
        Omniscience() {
          return 23500;
        }
      },
      effect() {
        return loc("tech_pillbox_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.pillbox);
          return true;
        }
        return false;
      }
    },
    elerium_cannon: {
      id: "tech-elerium_cannon",
      title: loc("tech_elerium_cannon"),
      desc: loc("tech_elerium_cannon"),
      category: "military",
      era: "existential",
      reqs: { elysium: 9, isle: 1 },
      grant: ["elysium", 10],
      cost: {
        Knowledge() {
          return 105e6;
        },
        Omniscience() {
          return 25e3;
        },
        Steel() {
          return 1e9;
        },
        Nano_Tube() {
          return 5e8;
        },
        Asphodel_Powder() {
          return 25e4;
        },
        Elysanite() {
          return 1e8;
        },
        Soul_Gem() {
          return 5e3;
        }
      },
      effect() {
        return loc("tech_elerium_cannon_effect", [loc("eden_fire_support_base_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    elerium_containment: {
      id: "tech-elerium_containment",
      title() {
        return loc("eden_elerium_containment", [global.resource.Elerium.name]);
      },
      desc() {
        return loc("eden_elerium_containment", [global.resource.Elerium.name]);
      },
      category: "storage",
      era: "existential",
      reqs: { elysium: 10 },
      grant: ["elysium", 11],
      cost: {
        Knowledge() {
          return 1065e5;
        },
        Omniscience() {
          return 26500;
        }
      },
      effect() {
        return loc("tech_elerium_containment_effect", [global.resource.Elerium.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.elerium_containment);
          return true;
        }
        return false;
      }
    },
    ambrosia: {
      id: "tech-ambrosia",
      title() {
        return loc("tech_ambrosia");
      },
      desc() {
        return loc("tech_ambrosia");
      },
      category: "entertainment",
      era: "existential",
      reqs: { elysium: 11 },
      grant: ["elysium", 12],
      cost: {
        Knowledge() {
          return 112e6;
        },
        Omniscience() {
          return 28e3;
        }
      },
      effect() {
        return loc("tech_ambrosia_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.restaurant);
          return true;
        }
        return false;
      }
    },
    eternal_bank: {
      id: "tech-eternal_bank",
      title() {
        return loc("tech_eternal_bank");
      },
      desc() {
        return loc("tech_eternal_bank");
      },
      category: "banking",
      era: "existential",
      reqs: { elysium: 12 },
      grant: ["elysium", 13],
      cost: {
        Knowledge() {
          return 115e6;
        },
        Omniscience() {
          return 3e4;
        }
      },
      effect() {
        return loc("tech_eternal_bank_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.eternal_bank);
          return true;
        }
        return false;
      }
    },
    wisdom: {
      id: "tech-wisdom",
      title() {
        return loc("tech_wisdom");
      },
      desc() {
        return loc("tech_wisdom");
      },
      category: "science",
      era: "existential",
      reqs: { elysium: 13 },
      grant: ["elysium", 14],
      cost: {
        Knowledge() {
          return 118e6;
        },
        Omniscience() {
          return 32e3;
        }
      },
      effect() {
        return loc("tech_wisdom_effect", [loc("eden_elysium_name")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.archive);
          return true;
        }
        return false;
      }
    },
    rushmore: {
      id: "tech-rushmore",
      title() {
        return loc("eden_rushmore", [races[global.race.species].name]);
      },
      desc() {
        return loc("eden_rushmore", [races[global.race.species].name]);
      },
      category: "entertainment",
      era: "existential",
      reqs: { high_tech: 19, elysium: 15 },
      grant: ["elysium", 16],
      cost: {
        Knowledge() {
          return 125e6;
        },
        Omniscience() {
          return 37250;
        }
      },
      effect() {
        return loc("tech_rushmore_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.rushmore);
          return true;
        }
        return false;
      }
    },
    reincarnation: {
      id: "tech-reincarnation",
      title() {
        return loc("eden_reincarnation_title");
      },
      desc() {
        return loc("eden_reincarnation_title");
      },
      category: "housing",
      era: "existential",
      reqs: { elysium: 16 },
      grant: ["elysium", 17],
      cost: {
        Knowledge() {
          return 13e7;
        },
        Omniscience() {
          return 4e4;
        }
      },
      effect() {
        return loc("tech_reincarnation_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.reincarnation);
          return true;
        }
        return false;
      }
    },
    otherworldly_cement: {
      id: "tech-otherworldly_cement",
      title() {
        return loc("tech_otherworldly_cement", [global.resource.Cement.name]);
      },
      desc() {
        return loc("tech_otherworldly_cement", [global.resource.Cement.name]);
      },
      category: "cement",
      era: "existential",
      reqs: { elysium: 17, cement: 7 },
      grant: ["cement", 8],
      not_trait: ["flier"],
      cost: {
        Knowledge() {
          return 135e6;
        },
        Omniscience() {
          return 42500;
        }
      },
      effect() {
        return loc("tech_otherworldly_cement_effect", [global.resource.Cement.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_elysium.eden_cement);
          return true;
        }
        return false;
      }
    },
    ancient_crafters: {
      id: "tech-ancient_crafters",
      title() {
        return loc("tech_ancient_crafters");
      },
      desc() {
        return loc("tech_ancient_crafters");
      },
      category: "crafting",
      era: "existential",
      reqs: { elysium: 17 },
      grant: ["elysium", 18],
      cost: {
        Knowledge() {
          return 14e7;
        },
        Omniscience() {
          return 44e3;
        }
      },
      effect() {
        return loc("tech_ancient_crafters_effect", [actions.eden.eden_elysium.sacred_smelter.title()]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    spirit_syphon: {
      id: "tech-spirit_syphon",
      title: loc("tech_spirit_syphon"),
      desc: loc("tech_spirit_syphon"),
      category: "edenic",
      era: "existential",
      reqs: { high_tech: 19, isle: 3 },
      grant: ["isle", 4],
      cost: {
        Knowledge() {
          return 125e6;
        },
        Omniscience() {
          return 35e3;
        }
      },
      effect() {
        return loc("tech_spirit_syphon_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_isle.spirit_vacuum);
          global.eden["palace"] = { energy: 1e12, rate: 0 };
          return true;
        }
        return false;
      }
    },
    spirit_capacitor: {
      id: "tech-spirit_capacitor",
      title: loc("tech_spirit_capacitor"),
      desc: loc("tech_spirit_capacitor"),
      category: "edenic",
      era: "existential",
      reqs: { isle: 4 },
      grant: ["isle", 5],
      cost: {
        Knowledge() {
          return 128e6;
        },
        Omniscience() {
          return 37500;
        }
      },
      effect() {
        return loc("tech_spirit_capacitor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_isle.spirit_battery);
          return true;
        }
        return false;
      }
    },
    suction_force: {
      id: "tech-suction_force",
      title: loc("tech_suction_force"),
      desc: loc("tech_suction_force"),
      category: "edenic",
      era: "existential",
      reqs: { isle: 5 },
      grant: ["isle", 6],
      cost: {
        Knowledge() {
          return 13e7;
        },
        Omniscience() {
          return 4e4;
        }
      },
      effect() {
        return loc("tech_suction_force_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    soul_compactor: {
      id: "tech-soul_compactor",
      title() {
        return loc("eden_soul_compactor_title");
      },
      desc() {
        return loc("eden_soul_compactor_title");
      },
      category: "edenic",
      era: "existential",
      reqs: { isle: 6 },
      grant: ["isle", 7],
      cost: {
        Knowledge() {
          return 135e6;
        },
        Omniscience() {
          return 42500;
        }
      },
      effect() {
        return loc("tech_soul_compactor_effect", [global.resource.Soul_Gem.name]);
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_isle.soul_compactor);
          return true;
        }
        return false;
      }
    },
    tomb: {
      id: "tech-tomb",
      title() {
        return loc("eden_tomb_title");
      },
      desc() {
        return loc("eden_tomb_title");
      },
      category: "edenic",
      era: "existential",
      reqs: { palace: 2 },
      grant: ["palace", 3],
      cost: {
        Knowledge() {
          return 14e7;
        },
        Omniscience() {
          return 45e3;
        }
      },
      effect() {
        return loc("tech_tomb_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_palace.tomb);
          return true;
        }
        return false;
      }
    },
    energy_drain: {
      id: "tech-energy_drain",
      title() {
        return loc("tech_energy_drain");
      },
      desc() {
        return loc("tech_energy_drain");
      },
      category: "edenic",
      era: "existential",
      reqs: { palace: 4 },
      grant: ["palace", 5],
      cost: {
        Knowledge() {
          return 145e6;
        },
        Omniscience() {
          return 47500;
        }
      },
      effect() {
        return loc("tech_energy_drain_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_palace.conduit);
          return true;
        }
        return false;
      }
    },
    divine_infuser: {
      id: "tech-divine_infuser",
      title() {
        return loc("tech_divine_infuser");
      },
      desc() {
        return loc("tech_divine_infuser");
      },
      category: "edenic",
      era: "existential",
      reqs: { palace: 5 },
      grant: ["palace", 6],
      cost: {
        Knowledge() {
          return 15e7;
        },
        Omniscience() {
          return 5e4;
        }
      },
      effect() {
        return loc("tech_divine_infuser_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_palace.infuser);
          return true;
        }
        return false;
      }
    },
    might: {
      id: "tech-might",
      title: loc("tech_might"),
      desc: loc("tech_might"),
      category: "evil",
      era: "civilized",
      reqs: { military: 1 },
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      grant: ["evil", 1],
      cost: {
        Knowledge() {
          return 100;
        }
      },
      effect: loc("tech_might_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      },
      flair() {
        return loc("tech_might_flair");
      }
    },
    executions: {
      id: "tech-executions",
      title: loc("tech_executions"),
      desc: loc("tech_executions"),
      category: "evil",
      era: "industrialized",
      reqs: { evil: 1, high_tech: 3 },
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      grant: ["evil", 2],
      cost: {
        Knowledge() {
          return 35e3;
        }
      },
      effect: loc("tech_executions_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    secret_police: {
      id: "tech-secret_police",
      title: loc("tech_secret_police"),
      desc: loc("tech_secret_police"),
      category: "evil",
      era: "globalized",
      reqs: { evil: 2, high_tech: 6 },
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      grant: ["evil", 3],
      cost: {
        Knowledge() {
          return 112e3;
        }
      },
      effect: loc("tech_secret_police_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ai_tracking: {
      id: "tech-ai_tracking",
      title: loc("tech_ai_tracking"),
      desc: loc("tech_ai_tracking"),
      category: "evil",
      era: "deep_space",
      reqs: { evil: 3, high_tech: 10 },
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      grant: ["evil", 4],
      cost: {
        Knowledge() {
          return 345e3;
        }
      },
      effect: loc("tech_ai_tracking_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    predictive_arrests: {
      id: "tech-predictive_arrests",
      title: loc("tech_predictive_arrests"),
      desc: loc("tech_predictive_arrests"),
      category: "evil",
      era: "intergalactic",
      reqs: { evil: 4, high_tech: 16 },
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      grant: ["evil", 5],
      cost: {
        Knowledge() {
          return 5123450;
        }
      },
      effect: loc("tech_predictive_arrests_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    hellspawn_tunnelers: {
      id: "tech-hellspawn_tunnelers",
      title: loc("tech_hellspawn_tunnelers"),
      desc: loc("tech_hellspawn_tunnelers"),
      category: "evil",
      era: "dimensional",
      reqs: { evil: 1, hellspawn: 1 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 2],
      cost: {
        Knowledge() {
          return 25e4;
        }
      },
      effect: loc("tech_hellspawn_tunnelers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_wasteland.tunneler);
          return true;
        }
        return false;
      }
    },
    hell_minions: {
      id: "tech-hell_minions",
      title: loc("tech_minion_spawn"),
      desc: loc("tech_minion_spawn"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 2 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 3],
      cost: {
        Knowledge() {
          return 5e5;
        }
      },
      effect: loc("tech_minion_spawn_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.minions);
          return true;
        }
        return false;
      }
    },
    reapers: {
      id: "tech-reapers",
      title: loc("tech_reapers"),
      desc: loc("tech_reapers"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 3 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" && global.race?.absorbed?.length >= 4 ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 4],
      cost: {
        Knowledge() {
          return 175e4;
        }
      },
      effect: loc("tech_reapers_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.reaper);
          return true;
        }
        return false;
      }
    },
    hellfire: {
      id: "tech-hellfire",
      title: loc("tech_hellfire"),
      desc: loc("tech_hellfire"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 5 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 6],
      cost: {
        Knowledge() {
          return 9e7;
        }
      },
      effect: loc("tech_hellfire_effect"),
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    corpse_retrieval: {
      id: "tech-corpse_retrieval",
      title: loc("tech_corpse_retrieval"),
      desc: loc("tech_corpse_retrieval"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 6 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 7],
      cost: {
        Knowledge() {
          return 125e6;
        }
      },
      effect: loc("tech_corpse_retrieval_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.corpse_pile);
          return true;
        }
        return false;
      }
    },
    spire_bazaar: {
      id: "tech-spire_bazaar",
      title: loc("tech_spire_bazaar"),
      desc: loc("tech_spire_bazaar"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 7, hell_spire: 10 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 8],
      cost: {
        Knowledge() {
          return 148e6;
        }
      },
      effect: loc("tech_spire_bazaar_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_spire.bazaar);
          return true;
        }
        return false;
      }
    },
    mortuary: {
      id: "tech-mortuary",
      title: loc("tech_mortuary"),
      desc: loc("tech_mortuary"),
      category: "evil",
      era: "existential",
      reqs: { hellspawn: 8, asphodel: 3 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["hellspawn", 9],
      cost: {
        Knowledge() {
          return 175e6;
        },
        Omniscience() {
          return 5e3;
        }
      },
      effect: loc("tech_mortuary_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_badlands.mortuary);
          return true;
        }
        return false;
      }
    },
    ghost_miners: {
      id: "tech-ghost_miners",
      title: loc("tech_ghost_miners"),
      desc: loc("tech_ghost_miners"),
      category: "evil",
      era: "dimensional",
      reqs: { hellspawn: 2, hell_pit: 5 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["pitspawn", 1],
      cost: {
        Knowledge() {
          return 19e5;
        }
      },
      effect: loc("tech_ghost_miners_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.shadow_mine);
          return true;
        }
        return false;
      }
    },
    tavern: {
      id: "tech-tavern",
      title: loc("tech_tavern"),
      desc: loc("tech_tavern"),
      category: "evil",
      era: "dimensional",
      reqs: { pitspawn: 1 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["pitspawn", 2],
      cost: {
        Knowledge() {
          return 25e5;
        }
      },
      effect: loc("tech_tavern_effect"),
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.portal.prtl_pit.tavern);
          return true;
        }
        return false;
      }
    },
    energized_dead: {
      id: "tech-energized_dead",
      title: loc("tech_energized_dead"),
      desc: loc("tech_energized_dead"),
      category: "evil",
      era: "existential",
      reqs: { pitspawn: 2, asphodel: 3 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["pitspawn", 3],
      cost: {
        Knowledge() {
          return 125e5;
        },
        Asphodel_Powder() {
          return 2500;
        }
      },
      effect() {
        return loc("tech_energized_dead_effect", [global.resource.Asphodel_Powder.name, loc("portal_shadow_mine_title")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    corruptor: {
      id: "tech-corruptor",
      title: loc("tech_corruptor"),
      desc: loc("tech_corruptor"),
      category: "evil",
      era: "existential",
      reqs: { asphodel: 10, theology: 2 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["asphodel", 11],
      cost: {
        Knowledge() {
          return 135e6;
        },
        Omniscience() {
          return 19500;
        }
      },
      effect() {
        return loc("tech_corruptor_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          initStruct(actions.eden.eden_asphodel.corruptor);
          return true;
        }
        return false;
      }
    },
    seeping_corruption: {
      id: "tech-seeping_corruption",
      title() {
        return loc("tech_seeping_corruption");
      },
      desc() {
        return loc("tech_seeping_corruption");
      },
      category: "evil",
      era: "existential",
      reqs: { elysium: 18, asphodel: 11 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["asphodel", 12],
      cost: {
        Knowledge() {
          return 2e8;
        },
        Omniscience() {
          return 47500;
        },
        Elysanite() {
          return 1e8;
        }
      },
      effect() {
        return loc("tech_seeping_corruption_effect", [loc("eden_asphodel_name")]);
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    },
    ultimate_corruption: {
      id: "tech-ultimate_corruption",
      title() {
        return loc("tech_ultimate_corruption");
      },
      desc() {
        return loc("tech_ultimate_corruption");
      },
      category: "evil",
      era: "existential",
      reqs: { isle: 5, asphodel: 12 },
      trait: ["warlord"],
      condition() {
        return global.race["universe"] === "evil" ? true : false;
      },
      wiki: global.race["warlord"] ? true : false,
      grant: ["asphodel", 13],
      cost: {
        Knowledge() {
          return 325e6;
        },
        Omniscience() {
          return 5e4;
        },
        Asphodel_Powder() {
          return 9e5;
        }
      },
      effect() {
        return loc("tech_ultimate_corruption_effect");
      },
      action() {
        if (payCosts($(this)[0])) {
          return true;
        }
        return false;
      }
    }
  };
  function uniteEffect() {
    global.tech["world_control"] = 1;
    buildGarrison($("#garrison"), true);
    buildGarrison($("#c_garrison"), false);
    for (let i = 0; i < 3; i++) {
      if (global.civic.foreign[`gov${i}`].occ) {
        let occ_amount = jobScale(global.civic.govern.type === "federation" ? 15 : 20);
        global.civic["garrison"].max += occ_amount;
        global.civic["garrison"].workers += occ_amount;
        global.civic.foreign[`gov${i}`].occ = false;
      }
      global.civic.foreign[`gov${i}`].buy = false;
      global.civic.foreign[`gov${i}`].anx = false;
      global.civic.foreign[`gov${i}`].sab = 0;
      global.civic.foreign[`gov${i}`].act = "none";
    }
    removeTask("spy");
    removeTask("spyop");
    removeTask("combo_spy");
    defineGovernor();
  }
  function swissKnife(cheeseOnly, cheeseList) {
    let cheeses = [
      "swiss",
      "gouda",
      "cheddar",
      "brie",
      "feta",
      "ricotta",
      "goat",
      "mascarpone",
      "bleu",
      "colby_jack",
      "camembert",
      "gorgonzola",
      "mozzarella",
      "roquefort",
      "provolone",
      "monterey_jack",
      "muenster",
      "cambozola",
      "jarlsberg",
      "bocconcini",
      "cantal",
      "emmental",
      "havarti",
      "burrata",
      "cottage",
      "asiago",
      "wensleydale",
      "pepper_jack",
      "queso_blanco",
      "pecorino",
      "raclette",
      "fontina",
      "reblochon",
      "port_salut",
      "brillat_savarin",
      "cream",
      "stilton",
      "taleggio",
      "manchego",
      "edam",
      "gruyeye",
      "parmigiano_reggiano",
      "epoisses",
      "comte",
      "caciocavallo",
      "teleme",
      "grana_padano",
      "chaumes",
      "morbier",
      "halloumi",
      "lancashire",
      "bleu_de_gex",
      "fourme_d_ambert",
      "fromage_blanc",
      "red_leicester",
      "bleu_d_auvergne",
      "pont_l_eveque",
      "jl_grubb",
      "castello_blue",
      "wagasi",
      "ayibe",
      "caravane",
      "limburger",
      "herve",
      "kashkaval",
      "sirene",
      "paski_sir",
      "akkawi",
      "olomoucke_syrecky",
      "anari",
      "danbo",
      "hermel\xEDn",
      "trappista",
      "stinking_bishop",
      "banbury",
      "sulguni",
      "hofoingi",
      "urda",
      "golka",
      "rokpol",
      "telemea",
      "bryndza",
      "parenica",
      "kackavalj",
      "liptauer",
      "greve",
      "korbaciky",
      "herrgardsost",
      "vasterbottensost",
      "mish",
      "anejo",
      "quesillo",
      "nacho",
      "reggianito",
      "catupiry",
      "queso_paipa",
      "canastra",
      "port_wine",
      "cados",
      "brie_de_meaux"
    ];
    if (cheeseList) {
      return cheeses;
    }
    let type = (global.stats.hasOwnProperty("reset") ? global.stats.reset : 0) % cheeses.length;
    return cheeseOnly ? loc(`cheese_${cheeses[type]}`) : loc(`tech_swiss_bank`, [loc(`cheese_${cheeses[type]}`)]);
  }
  var techPath = {
    standard: ["primitive", "discovery", "civilized", "industrialized", "globalized", "early_space", "deep_space", "interstellar", "intergalactic", "dimensional", "existential"],
    truepath: ["primitive", "discovery", "civilized", "industrialized", "globalized", "early_space", "deep_space", "solar", "tauceti"]
  };
  function techList(path) {
    if (path) {
      let techList2 = {};
      Object.keys(techs).forEach(function(t) {
        if (techPath[path].includes(techs[t].era) || techs[t].hasOwnProperty("path")) {
          if (!techs[t].hasOwnProperty("path") || techs[t].hasOwnProperty("path") && techs[t].path.includes(path)) {
            techList2[t] = techs[t];
          }
        }
      });
      return techList2;
    }
    return techs;
  }
  function stabilize_blackhole() {
    if (global.interstellar["stellar_engine"] && global.interstellar.stellar_engine.exotic >= 0.025 && global.tech["whitehole"]) {
      if (techs.stabilize_blackhole.action()) {
        global.tech["stablized"] = 1;
        drawTech();
      }
    }
  }

  // src/governor.js
  var gmen = {
    soldier: {
      name: loc("governor_soldier"),
      desc: loc("governor_soldier_desc"),
      title: [loc("governor_soldier_t1"), loc("governor_soldier_t2"), loc("governor_soldier_t3")],
      traits: {
        tactician: 1,
        militant: 1,
        nopain: 1
      }
    },
    criminal: {
      name: loc("governor_criminal"),
      desc: loc("governor_criminal_desc"),
      title: [loc("governor_criminal_t1"), loc("governor_criminal_t2"), { m: loc("governor_criminal_t3m"), f: loc("governor_criminal_t3f") }],
      traits: {
        noquestions: 1,
        racketeer: 1
      }
    },
    entrepreneur: {
      name: loc("governor_entrepreneur"),
      desc: loc("governor_entrepreneur_desc"),
      title: [loc("governor_entrepreneur_t1"), loc("governor_entrepreneur_t2"), { m: loc("governor_entrepreneur_t3m"), f: loc("governor_entrepreneur_t3f") }],
      traits: {
        dealmaker: 1,
        risktaker: 1
      }
    },
    educator: {
      name: loc("governor_educator"),
      desc: loc("governor_educator_desc"),
      title: [loc("governor_educator_t1"), loc("governor_educator_t2"), loc("governor_educator_t3")],
      traits: {
        teacher: 1,
        theorist: 1
      }
    },
    spiritual: {
      name: loc("governor_spiritual"),
      desc: loc("governor_spiritual_desc"),
      title: [loc("governor_spiritual_t1"), loc("governor_spiritual_t2"), loc("governor_spiritual_t3")],
      traits: {
        inspirational: 1,
        pious: 1
      }
    },
    bluecollar: {
      name: loc("governor_bluecollar"),
      desc: loc("governor_bluecollar_desc"),
      title: [{ m: loc("governor_bluecollar_t1m"), f: loc("governor_bluecollar_t1f") }, loc("governor_bluecollar_t2"), { m: loc("governor_bluecollar_t3m"), f: loc("governor_bluecollar_t3f") }],
      traits: {
        pragmatist: 1,
        dirty_jobs: 1
      }
    },
    noble: {
      name: loc("governor_noble"),
      desc: loc("governor_noble_desc"),
      title: [{ m: loc("governor_noble_t1m"), f: loc("governor_noble_t1f") }, { m: loc("governor_noble_t2m"), f: loc("governor_noble_t2f") }, { m: loc("governor_noble_t3m"), f: loc("governor_noble_t3f") }, { m: loc("governor_noble_t4m"), f: loc("governor_noble_t4f") }],
      traits: {
        extravagant: 1,
        aristocrat: 1
      }
    },
    media: {
      name: loc("governor_media"),
      desc: loc("governor_media_desc"),
      title: [loc("governor_media_t1"), { m: loc("governor_media_t2m"), f: loc("governor_media_t2f") }, loc("governor_media_t3")],
      traits: {
        gaslighter: 1,
        muckraker: 1
      }
    },
    sports: {
      name: loc("governor_sports"),
      desc: loc("governor_sports_desc"),
      title: [loc("governor_sports_t1"), loc("governor_sports_t2"), loc("governor_sports_t3")],
      traits: {
        athleticism: 1,
        runner: 1
      }
    },
    bureaucrat: {
      name: loc("governor_bureaucrat"),
      desc: loc("governor_bureaucrat_desc"),
      title: [loc("governor_bureaucrat_t1"), { m: loc("governor_bureaucrat_t2m"), f: loc("governor_bureaucrat_t2f") }, loc("governor_bureaucrat_t3")],
      traits: {
        organizer: 1
      }
    }
  };
  var gov_traits = {
    tactician: {
      name: loc(`gov_trait_tactician`),
      effect(b) {
        return loc(`gov_trait_tactician_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [30] : [25];
      }
    },
    militant: {
      name: loc(`gov_trait_militant`),
      effect(b) {
        return loc(`gov_trait_militant_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [30, 10] : [25, 10];
      }
    },
    noquestions: {
      name: loc(`gov_trait_noquestions`),
      effect(b) {
        return loc(`gov_trait_noquestions_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        return [5e-3];
      }
    },
    racketeer: {
      name: loc(`gov_trait_racketeer`),
      effect(b) {
        return loc(`gov_trait_racketeer_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [18, 45] : [20, 35];
      }
    },
    dealmaker: {
      name: loc(`gov_trait_dealmaker`),
      effect(b) {
        return loc(`gov_trait_dealmaker_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [150] : [125];
      }
    },
    risktaker: {
      name: loc(`gov_trait_risktaker`),
      effect(b) {
        return loc(`gov_trait_risktaker_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [14] : [12];
      }
    },
    teacher: {
      name: loc(`gov_trait_teacher`),
      effect(b) {
        return loc(`gov_trait_teacher_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        return [6, 30];
      }
    },
    theorist: {
      name: loc(`gov_trait_theorist`),
      effect(b) {
        return loc(`gov_trait_theorist_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [100, 2] : [50, 4];
      }
    },
    inspirational: {
      name: loc(`gov_trait_inspirational`),
      effect(b) {
        return loc(`gov_trait_inspirational_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [30] : [20];
      }
    },
    pious: {
      name: loc(`gov_trait_pious`),
      effect(b, wiki) {
        let val = $(this)[0].vars(b)[1];
        let xeno = global.tech["monument"] && global.tech.monument >= 3 && isStargateOn(wiki) ? 3 : 1;
        val = (global.civic.govern.type === "corpocracy" ? val * 2 : val) * xeno;
        return loc(`gov_trait_pious_effect`, [$(this)[0].vars(b)[0], val]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [8, 8] : [10, 5];
      }
    },
    pragmatist: {
      name: loc(`gov_trait_pragmatist`),
      effect(b) {
        return loc(`gov_trait_pragmatist_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [100, 2] : [50, 2];
      }
    },
    dirty_jobs: {
      name: loc(`gov_trait_dirty_jobs`),
      effect(b) {
        return loc(`gov_trait_dirty_jobs_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1], $(this)[0].vars(b)[2]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [0.015, 2, 18] : [0.015, 1, 14];
      }
    },
    extravagant: {
      name: loc(`gov_trait_extravagant`),
      effect(b) {
        return loc(`gov_trait_extravagant_effect`, [$(this)[0].vars(b)[0], housingLabel("large", true), $(this)[0].vars(b)[1], jobScale($(this)[0].vars(b)[2] + 5)]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [8, 1, 2] : [10, 1.25, 1];
      }
    },
    aristocrat: {
      name: loc(`gov_trait_aristocrat`),
      effect(b) {
        return loc(`gov_trait_aristocrat_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1], $(this)[0].vars(b)[2]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [60, 20, 5] : [50, 20, 10];
      }
    },
    gaslighter: {
      name: loc(`gov_trait_gaslighter`),
      effect(b) {
        return loc(`gov_trait_gaslighter_effect`, [$(this)[0].vars(b)[0], wardenLabel(), $(this)[0].vars(b)[1], $(this)[0].vars(b)[2], $(this)[0].vars(b)[3]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [2, 2, 0.5, 35] : [1, 1, 0.5, 30];
      }
    },
    muckraker: {
      name: loc(`gov_trait_muckraker`),
      effect(b) {
        return loc(`gov_trait_muckraker_effect`, [$(this)[0].vars(b)[1], $(this)[0].vars(b)[2]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [6, 12, 2] : [8, 12, 3];
      }
    },
    athleticism: {
      name: loc(`gov_trait_athleticism`),
      effect(b) {
        return loc(`gov_trait_athleticism_effect`, [$(this)[0].vars(b)[0], jobScale($(this)[0].vars(b)[1]), $(this)[0].vars(b)[2], wardenLabel()]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [1.5, 2, 3] : [1.5, 2, 4];
      }
    },
    nopain: {
      name: loc(`gov_trait_nopain`),
      effect(b) {
        return loc(`gov_trait_nopain_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [50] : [40];
      }
    },
    runner: {
      name: loc(`gov_trait_runner`),
      effect(b) {
        return loc(`gov_trait_runner_effect`, [$(this)[0].vars(b)[0], $(this)[0].vars(b)[1]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? true : false;
        }
        return b ? [20, 12] : [10, 8];
      }
    },
    organizer: {
      name: loc(`gov_trait_organizer`),
      effect(b) {
        return loc(`gov_trait_organizer_effect`, [$(this)[0].vars(b)[0]]);
      },
      vars(b) {
        if (typeof b === "undefined") {
          b = global.genes.hasOwnProperty("governor") && global.genes.governor >= 2 ? true : false;
        }
        return [b ? 2 : 1];
      }
    }
  };
  var names = {
    humanoid: ["Sanders", "Smith", "Geddon", "Burgundy", "Cristo", "Crunch", "Berg", "Morros", "Bower", "Maximus"],
    carnivore: ["Instinct", "Prowl", "Paws", "Fluffy", "Snarl", "Claws", "Fang", "Stalker", "Pounce", "Sniff"],
    herbivore: ["Sense", "Grazer", "Paws", "Fluffy", "Fern", "Claws", "Fang", "Grass", "Stampy", "Sniff"],
    omnivore: ["Pelt", "Munchy", "Paws", "Fluffy", "Snarl", "Claws", "Fang", "Skavers", "Pounce", "Sniff"],
    small: ["Bahgins", "Banks", "Shorty", "Parte", "Underfoot", "Shrimp", "Finkle", "Littlefoot", "Cub", "Runt"],
    giant: ["Slender", "Titan", "Colossus", "Bean", "Tower", "Cloud", "Bigfoot", "Mountain", "Crusher", "Megaton"],
    reptilian: ["Scale", "Chimera", "Ecto", "Bask", "Forks", "Croc", "Slither", "Sunny", "Coldfoot", "Webtoe"],
    avian: ["Sparrow", "Soar", "Shiney", "Raven", "Squaks", "Eddy", "Breeze", "Flap", "Kettle", "Flock"],
    insectoid: ["Compound", "Centi", "Hiver", "Buzz", "Carpace", "Swarm", "Devour", "Carpi", "Chitter", "Burrow"],
    plant: ["Grover", "Blossom", "Leaf", "Sapper", "Stem", "Seed", "Sprout", "Greensly", "Root", "Fruit"],
    fungi: ["Detritus", "Psychedelic", "Cap", "Rotface", "Patch", "Spore", "Infecto", "Filament", "Symbiote", "Shade"],
    aquatic: ["Seawolf", "Finsley", "Inko", "Sucker", "McBoatFace", "Wave", "Riptide", "Shell", "Coral", "Pearl"],
    fey: ["Whisper", "Prank", "Mischief", "Flutter", "Nature", "Dirt", "Story", "Booker", "Tales", "Spirit"],
    heat: ["Ash", "Magnus", "Pumice", "Vulcano", "Sweat", "Flame", "Lava", "Ember", "Smoke", "Tinder", "Spark"],
    polar: ["Frosty", "Snowball", "Flake", "Chiller", "Frost", "Cooler", "Icecube", "Arctic", "Tundra", "Avalanche"],
    sand: ["Dune", "Oasis", "Sarlac", "Spice", "Quick", "Grain", "Spike", "Storm", "Glass", "Castle"],
    demonic: ["Yekun", "Kesabel", "Gadreel", "Penemue", "Abaddon", "Azazyel", "Leviathan", "Samyaza", "Kasyade", "Typhon"],
    angelic: ["Lightbringer", "Illuminous", "Sparks", "Chrub", "Halo", "Star", "Pompous", "Radiant", "Fluffy", "Fabio"],
    synthetic: ["HK47", "D2R2", "Bishop", "Wally", "Number5", "Sunny", "Data", "Beta", "Dot", "Motoko"],
    eldritch: ["Tentacle", "Faceless", "Horror", "Darkness", "Void", "Dreamer", "Mindflayer", "Whisper", "Paranoia", "Empty"]
  };
  function genGovernor(setSize) {
    let governors = [];
    let genus = global.race.maintype || races[global.race.species].type;
    let backgrounds = Object.keys(gmen);
    let nameList = JSON.parse(JSON.stringify(names[genus]));
    setSize = setSize || backgrounds.length;
    for (let i = 0; i < setSize; i++) {
      if (nameList.length === 0) {
        nameList = JSON.parse(JSON.stringify(names[genus]));
      }
      if (backgrounds.length === 0) {
        backgrounds = Object.keys(gmen);
      }
      let bgIdx = Math.floor(seededRandom(0, backgrounds.length));
      let nameIdx = Math.floor(seededRandom(0, nameList.length));
      let bg = backgrounds.splice(bgIdx, 1)[0];
      let name = loc("gov_name_" + nameList.splice(nameIdx, 1)[0]);
      let title = gmen[bg].title[Math.floor(seededRandom(0, gmen[bg].title.length))];
      if (typeof title === "object") {
        title = Math.floor(seededRandom(0, 2)) === 0 ? title.m : title.f;
      }
      governors.push({ bg, t: title, n: name });
    }
    return governors;
  }
  function govern() {
    if (global.genes["governor"] && global.tech["governor"] && global.race["governor"] && global.race.governor["g"] && global.race.governor["tasks"]) {
      let cnt = [0, 1, 2];
      if (global.genes.governor >= 2) {
        cnt.push(cnt.length);
        if (govActive("organizer", 0)) {
          cnt.push(cnt.length);
        }
      }
      if (govActive("organizer", 0)) {
        cnt.push(cnt.length);
      }
      cnt.forEach(function(n) {
        if (gov_tasks[global.race.governor.tasks[`t${n}`]] && gov_tasks[global.race.governor.tasks[`t${n}`]].req()) {
          gov_tasks[global.race.governor.tasks[`t${n}`]].task();
        }
      });
    }
  }
  function defineGovernor() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 0)) {
      return;
    }
    if (global.genes["governor"] && global.tech["governor"]) {
      clearElement($("#r_govern1"));
      if (global.race.hasOwnProperty("governor") && !global.race.governor.hasOwnProperty("candidates")) {
        drawnGovernOffice();
      } else {
        appointGovernor();
      }
    }
  }
  function clearSpyopDrag() {
    Object.keys(global.civic.foreign).forEach(function(gov) {
      let el = $(`#spyopConfig${gov}`)[0];
      if (el) {
        let sort = Sortable.get(el);
        if (sort) {
          sort.destroy();
        }
      }
    });
  }
  function dragSpyopList(gov) {
    let el = $(`#spyopConfig${gov}`)[0];
    if (el) {
      Sortable.create(el, {
        onEnd(e) {
          let order = global.race.governor.config.spyop[gov];
          order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
          global.race.governor.config.spyop[gov] = order;
          defineGovernor();
        }
      });
    }
  }
  function drawnGovernOffice() {
    clearSpyopDrag();
    let govern2 = $(`<div id="govOffice" class="govOffice"></div>`);
    $("#r_govern1").append(govern2);
    let govHeader = $(`<div class="head"></div>`);
    govern2.append(govHeader);
    let governorTitle = $(`<div></div>`);
    governorTitle.append($(`<div class="has-text-caution" role="heading" aria-level="2">${loc(`governor_office`, [global.race.governor.g.n])}</div>`));
    governorTitle.append($(`<div><span class="has-text-warning">${loc(`governor_background`)}:</span> <span class="bg">${gmen[global.race.governor.g.bg].name}</span></div>`));
    govHeader.append(governorTitle);
    govHeader.append($(`<div class="fire"><b-button v-on:click="fire" v-html="fireText()">${loc(`governor_fire`)}</b-button></div>`));
    let cnt = [0, 1, 2];
    if (global.genes["governor"] && global.genes.governor >= 2) {
      cnt.push(cnt.length);
      if (govActive("organizer", 0)) {
        cnt.push(cnt.length);
      }
    }
    if (govActive("organizer", 0)) {
      cnt.push(cnt.length);
    }
    cnt.forEach(function(num) {
      let options2 = `<b-dropdown-item v-on:click="setTask('none',${num})">{{ 'none' | label }}</b-dropdown-item>`;
      Object.keys(gov_tasks).forEach(function(task) {
        if (gov_tasks[task].req()) {
          options2 += `<b-dropdown-item v-show="activeTask('${task}')" v-on:click="setTask('${task}',${num})">{{ '${task}' | label }}</b-dropdown-item>`;
        }
      });
      govern2.append(`<div class="govTask"><span>${loc(`gov_task`, [num + 1])}</span><b-dropdown hoverable>
            <button class="button is-primary" slot="trigger">
                <span>{{ t.t${num} | label }}</span>
                <i class="fas fa-sort-down"></i>
            </button>
            ${options2}
        </b-dropdown></div>`);
    });
    if (!global.race.governor.hasOwnProperty("config")) {
      global.race.governor["config"] = {};
    }
    let options = $(`<div class="options"><div>`);
    govern2.append(options);
    {
      if (!global.race.governor.config.hasOwnProperty("storage")) {
        global.race.governor.config["storage"] = {
          crt: 1e3,
          cnt: 1e3
        };
      }
      let storeContain = $(`<div class="tConfig" v-show="showTask('storage')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_storage`)}</div></div>`);
      options.append(storeContain);
      let storage = $(`<div class="storage"></div>`);
      storeContain.append(storage);
      let crt_mat = global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? "Chrysotile" : "Stone" : "Plywood";
      let cnt_mat = "Steel";
      storage.append($(`<b-field>${loc(`gov_task_storage_reserve`, [global.resource[crt_mat].name])}<b-numberinput min="0" :max="Number.MAX_SAFE_INTEGER" v-model="c.storage.crt" :controls="false"></b-numberinput></b-field>`));
      storage.append($(`<b-field>${loc(`gov_task_storage_reserve`, [global.resource[cnt_mat].name])}<b-numberinput min="0" :max="Number.MAX_SAFE_INTEGER" v-model="c.storage.cnt" :controls="false"></b-numberinput></b-field>`));
    }
    {
      if (!global.race.governor.config.hasOwnProperty("bal_storage")) {
        global.race.governor.config["bal_storage"] = {};
      }
      if (!global.race.governor.config.bal_storage.hasOwnProperty("adv")) {
        global.race.governor.config.bal_storage["adv"] = false;
      }
      let storeContain = $(`<div class="tConfig" v-show="showTask('bal_storage')"><div class="hRow"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_bal_storage`)}</div><div class="chk"><b-checkbox v-model="c.bal_storage.adv">${loc(`advanced`)}</b-checkbox></div></div></div>`);
      options.append(storeContain);
      let storage = $(`<div class="bal_storage"></div>`);
      storeContain.append(storage);
      Object.keys(global.resource).forEach(function(res) {
        if (global.resource[res].stackable) {
          if (!global.race.governor.config.bal_storage.hasOwnProperty(res)) {
            global.race.governor.config.bal_storage[res] = "2";
          }
          storage.append($(`<div class="ccmOption" :class="bStrEx()" v-show="showStrRes('${res}')"><span role="heading" aria-level="4">${global.resource[res].name}</span>
                <b-field>
                    <b-radio-button class="b1" v-show="c.bal_storage.adv" v-model="c.bal_storage.${res}" native-value="0" type="is-danger is-light">0x</b-radio-button>
                    <b-radio-button class="b2" v-show="c.bal_storage.adv" v-model="c.bal_storage.${res}" native-value="1" type="is-danger is-light">1/2</b-radio-button>
                    <b-radio-button class="b3" v-model="c.bal_storage.${res}" native-value="2" type="is-danger is-light">1x</b-radio-button>
                    <b-radio-button class="b4" v-model="c.bal_storage.${res}" native-value="4" type="is-danger is-light">2x</b-radio-button>
                    <b-radio-button class="b5" v-model="c.bal_storage.${res}" native-value="6" type="is-danger is-light">3x</b-radio-button>
                    <b-radio-button class="b6" v-show="c.bal_storage.adv" v-model="c.bal_storage.${res}" native-value="8" type="is-danger is-light">4x</b-radio-button>
                </b-field>
                </div>`));
        } else if (global.race.governor.config.bal_storage.hasOwnProperty(res)) {
          delete global.race.governor.config.bal_storage[res];
        }
      });
    }
    {
      if (!global.race.governor.config.hasOwnProperty("merc")) {
        global.race.governor.config["merc"] = {
          buffer: 1,
          reserve: 100
        };
      }
      let contain = $(`<div class="tConfig" v-show="showTask('merc')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_merc`)}</div></div>`);
      options.append(contain);
      let merc = $(`<div class="storage"></div>`);
      contain.append(merc);
      merc.append($(`<b-field>${loc(`gov_task_merc_buffer`)}<b-numberinput min="0" :max="Number.MAX_SAFE_INTEGER" v-model="c.merc.buffer" :controls="false"></b-numberinput></b-field>`));
      merc.append($(`<b-field>${loc(`gov_task_merc_reserve`)}<b-numberinput min="0" :max="100" v-model="c.merc.reserve" :controls="false"></b-numberinput></b-field>`));
    }
    {
      if (!global.race.governor.config.hasOwnProperty("spy")) {
        global.race.governor.config["spy"] = {
          reserve: 100
        };
      }
      let contain = $(`<div class="tConfig" v-show="showTask('spy')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_spy`)}</div></div>`);
      options.append(contain);
      let spy = $(`<div class="storage"></div>`);
      contain.append(spy);
      spy.append($(`<b-field>${loc(`gov_task_merc_reserve`)}<b-numberinput min="0" :max="100" v-model="c.spy.reserve" :controls="false"></b-numberinput></b-field>`));
    }
    {
      if (!global.race.governor.config.hasOwnProperty("spyop")) {
        global.race.governor.config["spyop"] = {};
        Object.keys(global.civic.foreign).forEach(function(gov) {
          global.race.governor.config.spyop[gov] = gov === "gov3" ? ["influence", "sabotage"] : ["sabotage", "incite", "influence"];
        });
      }
      let contain = $(`<div class="tConfig" v-show="showTask('spyop')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_spyop`)}</div></div>`);
      options.append(contain);
      Object.keys(global.civic.foreign).forEach(function(gov) {
        if (gov.substr(3, 1) < 3 && !global.tech["world_control"] || gov === "gov3" && global.tech["rival"]) {
          let spyop = $(`<div></div>`);
          contain.append(spyop);
          spyop.append(`
                    <h2 class="has-text-caution" aria-level="4">${loc("gov_task_spyop_priority", [govTitle(gov.substring(3))])}</h2>
                    <ul id="spyopConfig${gov}" class="spyopConfig"></ul>
                `);
          let missions = $(`#spyopConfig${gov}`);
          global.race.governor.config.spyop[gov].forEach(function(mission) {
            missions.append(`
                        <li>${loc("civics_spy_" + mission)}</li>
                    `);
          });
        }
      });
    }
    {
      if (!global.race.governor.config.hasOwnProperty("tax")) {
        global.race.governor.config["tax"] = {
          min: 20
        };
      }
      let contain = $(`<div class="tConfig" v-show="showTask('tax')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_tax`)}</div></div>`);
      options.append(contain);
      let tax = $(`<div class="storage"></div>`);
      contain.append(tax);
      tax.append($(`<b-field>${loc(`gov_task_tax_min`)}<b-numberinput min="0" :max="20" v-model="c.tax.min" :controls="false"></b-numberinput></b-field>`));
    }
    {
      if (!global.race.governor.config.hasOwnProperty("slave")) {
        global.race.governor.config["slave"] = {
          reserve: 100
        };
      }
      let contain = $(`<div class="tConfig" v-show="showTask('slave')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_slave`, [global.resource.Slave.name])}</div></div>`);
      options.append(contain);
      let slave = $(`<div class="storage"></div>`);
      contain.append(slave);
      slave.append($(`<b-field>${loc(`gov_task_merc_reserve`)}<b-numberinput min="0" :max="100" v-model="c.slave.reserve" :controls="false"></b-numberinput></b-field>`));
    }
    {
      if (!global.race.governor.config.hasOwnProperty("trash")) {
        global.race.governor.config["trash"] = {};
      }
      ["Infernite", "Elerium", "Copper", "Iron"].forEach(function(res) {
        if (!global.race.governor.config.trash.hasOwnProperty(res) || typeof global.race.governor.config.trash[res] !== "object" || global.race.governor.config.trash[res] === null) {
          global.race.governor.config.trash[res] = { v: 0, s: true };
        }
      });
      if (!global.race.governor.config.trash.hasOwnProperty("stab")) {
        global.race.governor.config.trash["stab"] = false;
      }
      let advanced = global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 ? `<div class="chk"><b-checkbox v-model="c.trash.stab">${loc(`gov_task_auto_stabilize`)}</b-checkbox></div>` : ``;
      let contain = $(`<div class="tConfig" v-show="showTask('trash')"><div class="hRow"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_trash`)}</div>${advanced}</div></div>`);
      options.append(contain);
      let trash = $(`<div class="storage"></div>`);
      contain.append(trash);
      ["Infernite", "Elerium", "Copper", "Iron"].forEach(function(res) {
        trash.append($(`<b-field class="trash"><div class="trashButton" role="button" @click="trashStrat('${res}')" v-html="$options.methods.trashLabel('${res}')"></div><b-numberinput min="0" :max="1000000" v-model="c.trash.${res}.v" :controls="false"></b-numberinput></b-field>`));
      });
    }
    {
      if (!global.race.governor.config.hasOwnProperty("replicate")) {
        global.race.governor.config["replicate"] = {};
      }
      if (!global.race.governor.config.replicate.hasOwnProperty("pow")) {
        global.race.governor.config.replicate["pow"] = { on: false, cap: 1e4, buffer: 0 };
      }
      if (!global.race.governor.config.replicate.hasOwnProperty("res")) {
        global.race.governor.config.replicate["res"] = { que: true, neg: true, cap: true };
      }
      let contain = $(`<div class="tConfig" v-show="showTask('replicate')"><div class="has-text-warning" role="heading" aria-level="3">${loc(`gov_task_replicate`)}</div></div>`);
      options.append(contain);
      let replicate = $(`<div class="storage"></div>`);
      contain.append(replicate);
      replicate.append($(`<div class="chk"><b-checkbox v-model="c.replicate.pow.on">${loc(`gov_task_replicate_auto`)}</b-checkbox></div>`));
      replicate.append($(`<b-field>${loc(`gov_task_replicate_pmax`)}<b-numberinput min="0" v-model="c.replicate.pow.cap" :controls="false"></b-numberinput></b-field>`));
      replicate.append($(`<b-field>${loc(`gov_task_replicate_buff`)}<b-numberinput min="0" v-model="c.replicate.pow.buffer" :controls="false"></b-numberinput></b-field>`));
      let res_bal = $(`<div class="storage"></div>`);
      contain.append(res_bal);
      res_bal.append($(`<div class="chk"><b-checkbox v-model="c.replicate.res.que">${loc(`gov_task_replicate_que`)}</b-checkbox></div>`));
      res_bal.append($(`<div class="chk"><b-checkbox v-model="c.replicate.res.neg">${loc(`gov_task_replicate_neg`)}</b-checkbox></div>`));
      res_bal.append($(`<div class="chk"><b-checkbox v-model="c.replicate.res.cap">${loc(`gov_task_replicate_cap`)}</b-checkbox></div>`));
    }
    vBind({
      el: "#govOffice",
      data: {
        t: global.race.governor.tasks,
        c: global.race.governor.config,
        r: global.resource
      },
      methods: {
        setTask(t, n) {
          global.race.governor.tasks[`t${n}`] = t;
          if (t === "combo_storage") {
            Object.keys(global.race.governor.tasks).forEach(function(ts) {
              if (global.race.governor.tasks[ts] === "storage" || global.race.governor.tasks[ts] === "bal_storage") {
                global.race.governor.tasks[ts] = "none";
              }
            });
          } else if (t === "storage" || t === "bal_storage") {
            Object.keys(global.race.governor.tasks).forEach(function(ts) {
              if (global.race.governor.tasks[ts] === "combo_storage") {
                global.race.governor.tasks[ts] = "none";
              }
            });
          }
          if (t === "combo_spy") {
            Object.keys(global.race.governor.tasks).forEach(function(ts) {
              if (global.race.governor.tasks[ts] === "spy" || global.race.governor.tasks[ts] === "spyop") {
                global.race.governor.tasks[ts] = "none";
              }
            });
          } else if (t === "spy" || t === "spyop") {
            Object.keys(global.race.governor.tasks).forEach(function(ts) {
              if (global.race.governor.tasks[ts] === "combo_spy") {
                global.race.governor.tasks[ts] = "none";
              }
            });
          }
          tagEvent("govtask", {
            "task": t
          });
          vBind({ el: `#race` }, "update");
        },
        showTask(t) {
          return Object.values(global.race.governor.tasks).includes(t) || Object.values(global.race.governor.tasks).includes("combo_storage") && ["storage", "bal_storage"].includes(t) || Object.values(global.race.governor.tasks).includes("combo_spy") && ["spy", "spyop"].includes(t);
        },
        activeTask(t) {
          let activeTasks = [];
          if (global.race.hasOwnProperty("governor")) {
            Object.keys(global.race.governor.tasks).forEach(function(ts) {
              if (global.race.governor.tasks[ts] !== "none") {
                activeTasks.push(global.race.governor.tasks[ts]);
              }
            });
          }
          return !activeTasks.includes(t);
        },
        showStrRes(r) {
          return global.resource[r].display;
        },
        bStrEx() {
          return global.race.governor.config.bal_storage.adv ? "m" : "";
        },
        fire() {
          let inc = global.race.governor.hasOwnProperty("f") ? global.race.governor.f : 0;
          let cost = (10 + inc) ** 2 - 50;
          let res = global.race.universe === "antimatter" ? "AntiPlasmid" : "Plasmid";
          if (global.prestige[res].count >= cost) {
            global.prestige[res].count -= cost;
            global.race.governor["candidates"] = genGovernor(10);
            if (global.race.governor.hasOwnProperty("f")) {
              global.race.governor.f++;
            } else {
              global.race.governor["f"] = 1;
            }
            delete global.race.governor.g;
            delete global.race.governor.tasks;
            updateQueueNames(true, ["city-amphitheatre", "city-apartment"]);
            drawCity();
            drawTech();
            calcQueueMax();
            calcRQueueMax();
            defineGovernor();
          }
        },
        fireText() {
          let inc = global.race.governor.hasOwnProperty("f") ? global.race.governor.f : 0;
          let cost = (10 + inc) ** 2 - 50;
          return `<div>${loc(`governor_fire`)}</div><div>${cost} ${loc(global.race.universe === "antimatter" ? `resource_AntiPlasmid_plural_name` : `resource_Plasmid_plural_name`)}</div>`;
        },
        trashStrat(r) {
          global.race.governor.config.trash[r].s = global.race.governor.config.trash[r].s ? false : true;
        },
        trashLabel(r) {
          return loc(global.race.governor.config.trash[r].s ? `gov_task_trash_max` : `gov_task_trash_min`, [global.resource[r].name]);
        }
      },
      filters: {
        label(t) {
          return gov_tasks[t] ? typeof gov_tasks[t].name === "string" ? gov_tasks[t].name : gov_tasks[t].name() : loc(`gov_task_${t}`);
        }
      }
    });
    popover(
      `govOffice`,
      function() {
        let desc = "";
        Object.keys(gmen[global.race.governor.g.bg].traits).forEach(function(t) {
          desc += (gov_traits[t].hasOwnProperty("effect") ? gov_traits[t].effect() : "") + " ";
        });
        return desc;
      },
      {
        elm: `#govOffice .bg`
      }
    );
    Object.keys(global.civic.foreign).forEach(function(gov) {
      dragSpyopList(gov);
    });
  }
  function appointGovernor() {
    let govern2 = $(`<div id="candidates" class="governor candidates"></div>`);
    $("#r_govern1").append(govern2);
    if (!global.race.hasOwnProperty("governor") || !global.race.governor.hasOwnProperty("candidates")) {
      global.race["governor"] = {
        candidates: genGovernor(10)
      };
    }
    govern2.append($(`<div class="appoint header"><span class="has-text-caution">${loc(`governor_candidate`)}</span><span class="has-text-caution">${loc(`governor_background`)}</span><span></span><div>`));
    for (let i = 0; i < global.race.governor.candidates.length; i++) {
      let gov = global.race.governor.candidates[i];
      if (global.race["warlord"] && gov.bg === "soldier" || !global.race["warlord"]) {
        govern2.append($(`<div class="appoint ${gov.bg}"><span class="has-text-warning" role="heading" aria-level="3">${gov.t} ${gov.n}</span><span class="bg">${gmen[gov.bg].name}</span><span><button class="button" v-on:click="appoint(${i})">${loc(`governor_appoint`)}</button></span><div>`));
      }
    }
    vBind({
      el: "#candidates",
      data: global.race.governor,
      methods: {
        appoint(gi) {
          if (global.genes["governor"] && global.tech["governor"]) {
            let gov = global.race.governor.candidates[gi];
            global.race.governor["g"] = gov;
            delete global.race.governor.candidates;
            global.race.governor["tasks"] = {
              t0: "none",
              t1: "none",
              t2: "none",
              t3: "none",
              t4: "none",
              t5: "none"
            };
            updateQueueNames(true, ["city-amphitheatre", "city-apartment"]);
            drawCity();
            drawTech();
            calcQueueMax();
            calcRQueueMax();
            defineGovernor();
            tagEvent("governor", {
              "appoint": global.race.governor.g.bg
            });
          }
        }
      }
    });
    global.race.governor.candidates.forEach(function(gov) {
      popover(
        `candidates-${gov.bg}`,
        function() {
          let desc = "";
          Object.keys(gmen[gov.bg].traits).forEach(function(t) {
            desc += (gov_traits[t].hasOwnProperty("effect") ? gov_traits[t].effect() : "") + " ";
          });
          return desc;
        },
        {
          elm: `#candidates .${gov.bg} .bg`
        }
      );
    });
  }
  function govActive(trait, val) {
    if (global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("g")) {
      return gmen[global.race.governor.g.bg].traits[trait] ? gov_traits[trait].vars()[val] : false;
    }
    return false;
  }
  function removeTask(task) {
    if (global.genes["governor"] && global.tech["governor"] && global.race["governor"] && global.race.governor["g"] && global.race.governor["tasks"]) {
      for (let i = 0; i < Object.keys(global.race.governor.tasks).length; i++) {
        if (global.race.governor.tasks[`t${i}`] === task) {
          global.race.governor.tasks[`t${i}`] = "none";
        }
      }
    }
  }
  var gov_tasks = {
    tax: {
      // Dynamic Taxes
      name: loc(`gov_task_tax`),
      req() {
        return global.civic.taxes.display;
      },
      task() {
        if ($(this)[0].req()) {
          let add_morale = 1;
          if (global.civic.taxes.tax_rate >= 40) {
            add_morale += 0.5;
          }
          if (global.civic.govern.type === "oligarchy") {
            if (global.civic.taxes.tax_rate >= 20) {
              add_morale -= 0.5;
            }
          }
          let max = govCivics("tax_cap", false);
          if (global.city.morale.current < 100 && global.civic.taxes.tax_rate > (global.civic.govern.type === "oligarchy" ? 45 : 25)) {
            while (global.city.morale.current < 100 && global.civic.taxes.tax_rate > (global.civic.govern.type === "oligarchy" ? 45 : 25)) {
              govCivics("adj_tax", "sub");
            }
          } else if (global.city.morale.potential >= global.city.morale.cap + add_morale && global.civic.taxes.tax_rate < max) {
            govCivics("adj_tax", "add");
          } else if (global.city.morale.current < global.city.morale.cap && global.civic.taxes.tax_rate > global.race.governor.config.tax.min) {
            govCivics("adj_tax", "sub");
          }
        }
      }
    },
    storage: {
      // Crate/Container Construction
      name: loc(`gov_task_storage`),
      req() {
        return checkCityRequirements("storage_yard") && global.tech["container"] && global.resource.Crates.display ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          if (global.resource.Crates.amount < global.resource.Crates.max) {
            let mat = global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? "Chrysotile" : "Stone" : "Plywood";
            let cost = global.race["kindling_kindred"] || global.race["smoldering"] ? 200 : 10;
            let reserve = global.race.governor.config.storage.crt;
            if (global.resource[mat].amount > reserve + cost) {
              let build = Math.floor((global.resource[mat].amount - reserve) / cost);
              crateGovHook("crate", build);
            }
          }
          if (checkCityRequirements("warehouse") && global.resource.Containers.display && global.resource.Containers.amount < global.resource.Containers.max) {
            let cost = 125;
            let reserve = global.race.governor.config.storage.cnt;
            if (global.resource.Steel.amount > reserve + cost) {
              let build = Math.floor((global.resource.Steel.amount - reserve) / cost);
              crateGovHook("container", build);
            }
          }
        }
      }
    },
    bal_storage: {
      // Balanced Storage
      name: loc(`gov_task_bal_storage`),
      req() {
        return checkCityRequirements("storage_yard") && global.tech["container"] && global.resource.Crates.display ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          let crates = global.resource.Crates.amount;
          let sCrate = crates;
          let containers = global.resource.Containers.amount;
          let sCon = containers;
          let active = 0;
          let res_list = Object.keys(global.resource).slice().reverse();
          res_list.forEach(function(res) {
            if (global.resource[res].display && global.resource[res].stackable) {
              crates += global.resource[res].crates;
              containers += global.resource[res].containers;
              active++;
            } else {
              global.resource[res].crates = 0;
              global.resource[res].containers = 0;
            }
          });
          let crateSet = Math.floor(crates / active);
          let containerSet = Math.floor(containers / active);
          let dist = {
            Food: { m: 0.1, cap: 100 },
            Coal: { m: 0.25 }
          };
          if (global.race["artifical"]) {
            delete dist.Food;
          }
          Object.keys(global.race.governor.config.bal_storage).forEach(function(res) {
            let val = Number(global.race.governor.config.bal_storage[res]);
            if (res === "Coal") {
              dist[res] = { m: 0.125 * val };
            } else if (res === "Food") {
              dist[res] = { m: 0.05 * val, cap: 50 * val };
            } else if (global.resource[res]) {
              dist[res] = { m: val };
            }
          });
          Object.keys(dist).forEach(function(r) {
            if (global.resource[r].display) {
              if (dist[r].hasOwnProperty("cap")) {
                active--;
                {
                  let set = Math.floor(crateSet * dist[r].m);
                  if (dist[r].hasOwnProperty("cap") && set > dist[r].cap) {
                    set = dist[r].cap;
                  }
                  global.resource[r].crates = set;
                  crates -= set;
                }
                if (global.resource.Containers.display) {
                  let set = Math.floor(containerSet * dist[r].m);
                  if (dist[r].hasOwnProperty("cap") && set > dist[r].cap) {
                    set = dist[r].cap;
                  }
                  global.resource[r].containers = set;
                  containers -= set;
                }
              } else {
                active += dist[r].m - 1;
              }
            }
          });
          crateSet = active !== 0 ? Math.floor(crates / active) : 0;
          containerSet = active !== 0 ? Math.floor(containers / active) : 0;
          crates -= Math.floor(crateSet * active);
          containers -= Math.floor(containerSet * active);
          res_list.forEach(function(res) {
            if (dist[res] && dist[res].hasOwnProperty("cap")) {
              return;
            }
            if (global.race["artifical"] && res === "Food") {
              return;
            }
            if (global.resource[res].display && global.resource[res].stackable) {
              let multiplier = dist[res] ? dist[res].m : 1;
              let crtAssign = Math.floor(crateSet > 0 ? crateSet * multiplier : 0);
              global.resource[res].crates = crtAssign;
              if (global.resource.Containers.display) {
                let cntAssign = Math.floor(containerSet > 0 ? containerSet * multiplier : 0);
                global.resource[res].containers = cntAssign;
              }
              if (crates > 0 && multiplier >= 1) {
                let adjust = Math.ceil(multiplier / 2);
                if (crates < adjust) {
                  adjust = crates;
                }
                global.resource[res].crates += adjust;
                crates -= adjust;
              }
              if (containers > 0 && multiplier >= 1) {
                let adjust = Math.ceil(multiplier / 2);
                if (containers < adjust) {
                  adjust = containers;
                }
                global.resource[res].containers += adjust;
                containers -= adjust;
              }
            }
          });
          let max = 3;
          while (max > 0 && (crates > 0 || containers > 0)) {
            max--;
            res_list.forEach(function(res) {
              if (dist[res] && dist[res].hasOwnProperty("cap")) {
                return;
              }
              if (global.race["artifical"] && res === "Food") {
                return;
              }
              if (global.resource[res].display && global.resource[res].stackable) {
                if (crates > 0) {
                  global.resource[res].crates++;
                  crates--;
                }
                if (containers > 0) {
                  global.resource[res].containers++;
                  containers--;
                }
              }
            });
          }
          global.resource.Crates.amount = crates;
          global.resource.Containers.amount = containers;
          if (active) {
            global.resource.Crates.max -= sCrate;
            global.resource.Containers.max -= sCon;
          }
        }
      }
    },
    combo_storage: {
      name: loc(`gov_task_combo_storage`),
      req() {
        return checkCityRequirements("storage_yard") && global.tech["container"] && global.resource.Crates.display && global.genes.governor >= 3 ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          gov_tasks.storage.task();
          gov_tasks.bal_storage.task();
        }
      }
    },
    assemble: {
      // Assemble Citizens
      name: loc(`gov_task_assemble`),
      req() {
        return global.race["artifical"] && (!global.tech["focus_cure"] || global.tech.focus_cure < 7) ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          if (global["resource"][global.race.species].max > global["resource"][global.race.species].amount) {
            actions.city.assembly.action();
          }
        }
      }
    },
    clone: {
      // Clone Citizens
      name: loc(`gov_task_clone`),
      req() {
        return global.tech["cloning"] ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          if (global["resource"][global.race.species].max > global["resource"][global.race.species].amount) {
            actions.tauceti.tau_home.cloning_facility.action();
          }
        }
      }
    },
    merc: {
      // Hire Mercs
      name: loc(`gov_task_merc`),
      req() {
        return checkCityRequirements("garrison") && global.tech["mercs"] ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          let cashCap = global.resource.Money.max * (global.race.governor.config.merc.reserve / 100);
          while (global.civic.garrison.max > global.civic.garrison.workers + global.race.governor.config.merc.buffer && global.resource.Money.amount >= govCivics("m_cost") && (global.resource.Money.amount + global.resource.Money.diff >= cashCap || global.resource.Money.diff >= govCivics("m_cost"))) {
            govCivics("m_buy");
          }
        }
      }
    },
    spy: {
      // Spy Recruiter
      name: loc(`gov_task_spy`),
      req() {
        if (global.tech["isolation"]) {
          return false;
        }
        if (global.race["truepath"] && global.tech["spy"]) {
          return true;
        }
        return global.tech["spy"] && !global.tech["world_control"] && !global.race["cataclysm"] ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          let cashCap = global.resource.Money.max * (global.race.governor.config.spy.reserve / 100);
          let max = global.race["truepath"] && global.tech["rival"] ? 4 : 3;
          let min = global.tech["world_control"] ? 3 : 0;
          for (let i = min; i < max; i++) {
            let cost = govCivics("s_cost", i);
            if (!global.civic.foreign[`gov${i}`].anx && !global.civic.foreign[`gov${i}`].buy && !global.civic.foreign[`gov${i}`].occ && global.civic.foreign[`gov${i}`].trn === 0 && global.resource.Money.amount >= cost && (global.resource.Money.diff >= cost || global.resource.Money.amount + global.resource.Money.diff >= cashCap)) {
              govCivics("t_spy", i);
            }
          }
        }
      }
    },
    spyop: {
      // Spy Operator
      name: loc(`gov_task_spyop`),
      req() {
        if (global.tech["isolation"]) {
          return false;
        }
        if (global.race["truepath"] && global.tech["spy"] && global.tech.spy >= 2) {
          return true;
        }
        return global.tech["spy"] && global.tech.spy >= 2 && !global.tech["world_control"] && !global.race["cataclysm"] ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          let range = global.race["truepath"] && global.tech["rival"] ? [0, 1, 2, 3] : [0, 1, 2];
          if (global.tech["world_control"]) {
            range = [3];
          }
          range.forEach(function(gov) {
            if (global.civic.foreign[`gov${gov}`].sab === 0 && global.civic.foreign[`gov${gov}`].spy > 0 && !global.civic.foreign[`gov${gov}`].anx && !global.civic.foreign[`gov${gov}`].buy && !global.civic.foreign[`gov${gov}`].occ) {
              global.race.governor.config.spyop[`gov${gov}`].every(function(mission) {
                switch (mission) {
                  case "influence":
                    if (global.civic.foreign[`gov${gov}`].hstl > 0 && global.civic.foreign[`gov${gov}`].spy > 1) {
                      govCivics("s_influence", gov);
                      return false;
                    }
                    break;
                  case "sabotage":
                    if (global.civic.foreign[`gov${gov}`].mil > 50) {
                      govCivics("s_sabotage", gov);
                      return false;
                    }
                    break;
                  case "incite":
                    if (global.civic.foreign[`gov${gov}`].unrest < 100 && global.civic.foreign[`gov${gov}`].spy > 2 && gov < 3) {
                      govCivics("s_incite", gov);
                      return false;
                    }
                    break;
                }
                return true;
              });
            }
          });
        }
      }
    },
    combo_spy: {
      name: loc(`gov_task_combo_spy`),
      req() {
        return global.genes.governor >= 3 && gov_tasks.spyop.req();
      },
      task() {
        if ($(this)[0].req()) {
          gov_tasks.spy.task();
          gov_tasks.spyop.task();
        }
      }
    },
    slave: {
      // Replace Slaves
      name() {
        return loc(`gov_task_slave`, [global.resource.Slave.name]);
      },
      req() {
        return !global.race["orbit_decayed"] && checkCityRequirements("slave_market") && global.race["slaver"] && global.city["slave_pen"] ? true : false;
      },
      task() {
        let cashCap = global.resource.Money.max * (global.race.governor.config.slave.reserve / 100);
        let slaveCost = 25e3;
        if (global.race["inflation"]) {
          slaveCost *= 1 + global.race.inflation / 100;
        }
        let extraVal = govActive("extravagant", 0);
        if (extraVal) {
          slaveCost *= 1 + extraVal / 100;
        }
        if ($(this)[0].req() && global.resource.Money.amount >= slaveCost && (global.resource.Money.diff >= slaveCost || global.resource.Money.amount + global.resource.Money.diff >= cashCap)) {
          let max = global.city.slave_pen.count * 4;
          if (max > global.resource.Slave.amount) {
            actions.city.slave_market.action();
          }
        }
      }
    },
    sacrifice: {
      // Sacrifice Population
      name: loc(`gov_task_sacrifice`),
      req() {
        return checkCityRequirements("s_alter") && global.city.hasOwnProperty("s_alter") && global.city["s_alter"].count >= 1 ? true : false;
      },
      task() {
        if ($(this)[0].req() && global.resource[global.race.species].amount === global.resource[global.race.species].max) {
          if (!global.race["kindling_kindred"] && !global.race["smoldering"] && global.city.s_alter.harvest <= 1e4 || global.city.s_alter.mind <= 1e4 || global.city.s_alter.mine <= 1e4 || global.city.s_alter.rage <= 1e4 || global.city.s_alter.regen <= 1e4) {
            actions.city.s_alter.action();
          }
        }
      }
    },
    horseshoe: {
      // Forge horseshoes
      name() {
        return loc(`city_${hoovedRename(true)}`, [hoovedRename(false)]);
      },
      req() {
        return global.race["hooved"] ? true : false;
      },
      task() {
        let cost = actions.city.horseshoe.cost;
        if ($(this)[0].req() && checkAffordable(cost)) {
          cost = adjustCosts(actions.city.horseshoe);
          let res = "Copper";
          let amount = 10;
          Object.keys(cost).forEach(function(r) {
            if (cost[r]() > 0) {
              res = r;
              amount = cost[r]();
            }
          });
          if (global.resource[res].amount > amount && (global.resource[res].diff >= amount || global.resource[res].amount + global.resource[res].diff >= global.resource[res].max)) {
            actions.city.horseshoe.action();
          }
        }
      }
    },
    trash: {
      name: loc(`gov_task_trash`),
      req() {
        return global.interstellar["mass_ejector"] && global.interstellar.mass_ejector.count >= 1 ? true : false;
      },
      task() {
        let mass = function(m) {
          return global.race.universe === "magic" ? atomic_mass[m] : ["Elerium", "Infernite"].includes(m) ? atomic_mass[m] * 10 : atomic_mass[m];
        };
        let remain = p_on["mass_ejector"] * 1e3;
        Object.keys(atomic_mass).sort((a, b) => mass(a) < mass(b) ? 1 : -1).forEach(function(res) {
          let trade = breakdown.p.consume[res].hasOwnProperty(loc("trade")) ? breakdown.p.consume[res][loc("trade")] : 0;
          let craft = breakdown.p.consume[res].hasOwnProperty(loc("job_craftsman")) ? breakdown.p.consume[res][loc("job_craftsman")] : 0;
          if (trade < 0) {
            trade = 0;
          }
          if (craft > 0) {
            craft = 0;
          }
          if (global.race.governor.config.trash[res] || global.interstellar.mass_ejector.hasOwnProperty(res) && global.resource[res].display && global.resource[res].max > 0 && global.interstellar.mass_ejector[res] + global.resource[res].diff > 0 && global.resource[res].amount + trade - craft >= global.resource[res].max * 0.999 - 1) {
            let set = global.resource[res].amount + trade - craft >= global.resource[res].max * 0.999 - 1 || global.race.governor.config.trash[res] && !global.race.governor.config.trash[res].s ? Math.floor(global.interstellar.mass_ejector[res] + global.resource[res].diff) : 0;
            if (global.race.governor.config.trash[res] && set < global.race.governor.config.trash[res].v && global.race.governor.config.trash[res].s) {
              set = Math.abs(global.race.governor.config.trash[res].v);
            } else if (global.race.governor.config.trash[res] && !global.race.governor.config.trash[res].s) {
              set = global.resource[res].amount + trade - craft >= global.resource[res].max * 0.999 - 1 ? set : set - Math.abs(global.race.governor.config.trash[res].v);
            }
            if (set > remain) {
              set = remain;
            }
            if (set < 0) {
              set = 0;
            }
            if (global.race["artifical"] && res === "Food") {
              set = 0;
            }
            global.interstellar.mass_ejector[res] = set;
            remain -= set;
          } else {
            global.interstellar.mass_ejector[res] = 0;
          }
        });
        global.interstellar.mass_ejector.total = p_on["mass_ejector"] * 1e3 - remain;
        if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3 && global.race.governor.config.trash.stab) {
          stabilize_blackhole();
        }
      }
    },
    mech: {
      // Mech Builder
      name: loc(`gov_task_mech`),
      req() {
        return global.stats.achieve.hasOwnProperty("corrupted") && global.stats.achieve.corrupted.l > 0 && checkHellRequirements("prtl_spire", "mechbay") && global.portal.hasOwnProperty("mechbay") ? true : false;
      },
      task() {
        if ($(this)[0].req()) {
          let ctype = global.race["warlord"] ? "cyberdemon" : "large";
          let mCosts = mechCost(ctype, false);
          let cost = mCosts.c;
          let soul = mCosts.s;
          let size = mechSize(ctype);
          let mechs = {
            type: {}
          };
          let sizeTypes = global.race["warlord"] ? ["minion", "fiend", "cyberdemon", "archfiend"] : ["small", "medium", "large", "titan", "collector"];
          let chassisTypes = global.race["warlord"] ? ["imp", "flying_imp", "hound", "harpy", "barghest", "cambion", "minotaur", "nightmare", "rakshasa", "golem", "hover", "spider", "wheel", "tread", "biped", "quad", "dragon", "snake", "gorgon", "hydra"] : ["hover", "spider", "wheel", "tread", "biped", "quad"];
          let weaponTypes = global.race["warlord"] ? ["laser", "kinetic", "shotgun", "missile", "flame", "plasma", "sonic", "tesla", "claws", "venom", "cold", "shock", "fire", "acid", "stone", "iron", "flesh", "ice", "magma", "axe", "hammer"] : ["plasma", "laser", "kinetic", "shotgun", "missile", "flame", "sonic", "tesla"];
          let equipTypes = global.race["warlord"] ? ["shields", "flare", "seals", "grapple", "sonar", "ablative", "radiator", "infrared", "coolant", "stabilizer", "scavenger", "scouter", "darkvision", "echo", "thermal", "manashield", "cold", "heat", "athletic", "lucky", "stoneskin"] : ["shields", "flare", "seals", "grapple", "sonar", "ablative", "radiator", "infrared", "coolant", "stabilizer"];
          sizeTypes.forEach(function(type) {
            mechs.type[type] = 0;
            mechs[type] = {
              chassis: {},
              weapon: {},
              equip: {}
            };
            chassisTypes.forEach(function(chassis) {
              mechs[type].chassis[chassis] = 0;
            });
            weaponTypes.map((a) => ({ sort: Math.random(), value: a })).sort((a, b) => a.sort - b.sort).map((a) => a.value).forEach(function(weapon) {
              mechs[type].weapon[weapon] = 0;
            });
            equipTypes.forEach(function(equip) {
              mechs[type].equip[equip] = 0;
            });
          });
          global.portal.mechbay.mechs.forEach(function(mech) {
            mechs.type[mech.size]++;
            mechs[mech.size].chassis[mech.chassis]++;
            mech.hardpoint.forEach(function(wep) {
              mechs[mech.size].weapon[wep]++;
            });
            mech.equip.forEach(function(equip) {
              mechs[mech.size].equip[equip]++;
            });
          });
          if (global.race["warlord"]) {
            if (mechs.type.minion < 16 || mechs.type.minion < 32 && mechs.type.fiend >= 19 && mechs.type.cyberdemon >= 6 && mechs.type.archfiend >= 5) {
              ctype = "minion";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            } else if (mechs.type.fiend < 14 || mechs.type.cyberdemon >= 4 && mechs.type.fiend < 19) {
              ctype = "fiend";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            } else if (mechs.type.cyberdemon < 4 || mechs.type.archfiend >= 5) {
              ctype = "cyberdemon";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            } else if (mechs.type.archfiend < 5) {
              ctype = "archfiend";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            }
          } else {
            if (mechs.type.large >= 6 && mechs.type.small < 12 || mechs.type.large >= 12 && mechs.type.titan >= 2 && mechs.type.small < 24) {
              ctype = "small";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            } else if (mechs.type.large >= 6 && mechs.type.medium < 12) {
              ctype = "medium";
              mCosts = mechCost(ctype, false);
              cost = mCosts.c;
              soul = mCosts.s;
              size = mechSize(ctype);
            } else if (mechs.type.large >= 12 && mechs.type.titan < 2) {
              mCosts = mechCost("titan", false);
              if (mCosts.c <= global.portal.purifier.sup_max) {
                ctype = "titan";
                cost = mCosts.c;
                soul = mCosts.s;
                size = mechSize(ctype);
              }
            }
          }
          let avail = global.portal.mechbay.max - global.portal.mechbay.bay;
          if (avail < size && global.blood["prepared"] && global.blood.prepared >= 3) {
            if (global.queue.queue.some((q) => ["portal-purifier", "portal-port", "portal-base_camp", "portal-mechbay", "portal-waygate", "portal-bazaar"].includes(q.id))) {
              return;
            }
            for (let i = 0; i < global.portal.mechbay.mechs.length; i++) {
              if (!global.portal.mechbay.mechs[i]["infernal"]) {
                let pattern = global.portal.mechbay.mechs[i];
                ctype = pattern.size;
                mCosts = mechCost(ctype, true);
                cost = mCosts.c;
                soul = mCosts.s;
                let gems = Math.floor(soul / 2);
                let supply = global.portal.purifier.supply + Math.floor(cost / 3);
                if (supply > global.portal.purifier.sup_max) {
                  supply = global.portal.purifier.sup_max;
                }
                if (supply >= cost && global.resource.Soul_Gem.amount + gems >= soul) {
                  global.resource.Soul_Gem.amount += gems;
                  global.resource.Soul_Gem.amount -= soul;
                  global.portal.purifier.supply = supply;
                  global.portal.purifier.supply -= cost;
                  global.portal.mechbay.mechs[i]["infernal"] = true;
                  if (pattern.size === "small" && pattern.equip.length === 0) {
                    global.portal.mechbay.mechs[i].equip.push("special");
                  } else if (pattern.size === "medium" && pattern.equip.length === 1 || pattern.size === "large" && pattern.equip.length === 2 || pattern.size === "titan" && pattern.equip.length < 5) {
                    let equip = "???";
                    Object.keys(mechs[ctype].equip).forEach(function(val) {
                      if (equip === "???" || mechs[ctype].equip[val] < mechs[ctype].equip[equip]) {
                        if (equip !== val) {
                          equip = val;
                        }
                      }
                    });
                    if (!pattern.equip.includes("special")) {
                      global.portal.mechbay.mechs[i].equip.push("special");
                    } else {
                      global.portal.mechbay.mechs[i].equip.push(equip);
                    }
                  }
                  break;
                }
              }
            }
          } else if (global.portal.purifier.supply >= cost && avail >= size && global.resource.Soul_Gem.amount >= soul) {
            let c_val = 99;
            let chassis = "hover";
            let weapons = ctype === "titan" ? ["???", "???", "???", "???"] : ["???", "???"];
            let equipment = [];
            if (global.race["warlord"]) {
              let cList = ["imp", "flying_imp", "hound", "harpy", "barghest"];
              if (ctype === "fiend") {
                cList = ["cambion", "minotaur", "nightmare", "rakshasa", "golem"];
              } else if (ctype === "cyberdemon") {
                cList = ["wheel", "tread", "biped", "quad", "spider", "hover"];
              } else if (ctype === "archfiend") {
                cList = ["dragon", "snake", "gorgon", "hydra"];
              }
              let counts = {};
              cList.forEach(function(creature) {
                counts[creature] = { c: 0, w: {}, e: {} };
                let weapons2 = validWeapons(ctype, creature, false);
                weapons2.forEach(function(wep) {
                  counts[creature].w[wep] = 0;
                });
                let equip = validEquipment(ctype, creature, false);
                equip.forEach(function(eq) {
                  counts[creature].e[eq] = 0;
                });
              });
              global.portal.mechbay.mechs.forEach(function(mech) {
                if (mech.size === ctype) {
                  if (cList.includes(mech.chassis)) {
                    counts[mech.chassis].c++;
                  }
                  mech.hardpoint.forEach(function(wep) {
                    counts[mech.chassis].w[wep]++;
                  });
                  mech.equip.forEach(function(equip) {
                    counts[mech.chassis].e[equip]++;
                  });
                }
              });
              if (ctype === "minion") {
                let type = "imp";
                if (counts.imp.c < 4 || counts.flying_imp.c < 4 || mechs.type.minion >= 16 && (counts.imp.c < 8 || counts.flying_imp.c < 8)) {
                  type = counts.imp.c > counts.flying_imp.c ? "flying_imp" : "imp";
                } else if (counts.hound.c < 4 || mechs.type.minion >= 16 && counts.hound.c < 8) {
                  type = "hound";
                } else if (counts.harpy.c < 2 || mechs.type.minion >= 16 && counts.harpy.c < 8) {
                  type = "harpy";
                } else if (counts.barghest.c < 2 || mechs.type.minion >= 16) {
                  type = "barghest";
                }
                chassis = type;
                let wTypes = validWeapons(ctype, type, 0).sort(() => Math.random() - 0.5);
                let weapon = wTypes[0];
                wTypes.forEach(function(wep) {
                  if (["imp", "flying_imp"].includes(type)) {
                    if (counts.imp.w[wep] + counts.flying_imp.w[wep] < counts.imp.w[weapon] + counts.flying_imp.w[weapon]) {
                      weapon = wep;
                    }
                  } else {
                    if (counts[type].w[wep] < counts[type].w[weapon]) {
                      weapon = wep;
                    }
                  }
                });
                weapons = [weapon];
                if (global.blood["prepared"]) {
                  equipment = mechs.minion.equip.scavenger < 16 ? ["scavenger"] : ["scouter"];
                }
              } else if (ctype === "fiend") {
                let type = "golem";
                if (counts.cambion.c < 4 || counts.rakshasa.c < 4) {
                  type = counts.cambion.c > counts.rakshasa.c ? "rakshasa" : "cambion";
                } else if (counts.nightmare.c < 4) {
                  type = "nightmare";
                } else if (counts.minotaur.c < 2) {
                  type = "minotaur";
                }
                chassis = type;
                let wTypes = validWeapons(ctype, type, 0).sort(() => Math.random() - 0.5);
                let weapon = wTypes[0];
                wTypes.forEach(function(wep) {
                  if (["cambion", "rakshasa"].includes(type)) {
                    if (counts.cambion.w[wep] + counts.rakshasa.w[wep] < counts.cambion.w[weapon] + counts.rakshasa.w[weapon]) {
                      weapon = wep;
                    }
                  } else {
                    if (counts[type].w[wep] < counts[type].w[weapon]) {
                      weapon = wep;
                    }
                  }
                });
                weapons = [weapon];
                let eTypes = validEquipment(ctype, type, 0).sort(() => Math.random() - 0.5);
                let equip = eTypes[0];
                let eTotals = {};
                eTypes.forEach(function(eq) {
                  eTotals[eq] = counts.cambion.e[eq] + counts.minotaur.e[eq] + counts.nightmare.e[eq] + counts.rakshasa.e[eq] + counts.golem.e[eq];
                });
                eTypes.forEach(function(eq) {
                  if (eTotals[eq] < eTotals[equip]) {
                    equip = eq;
                  }
                });
                equipment.push(equip);
                if (global.blood["prepared"]) {
                  let equip2 = eTypes[0] === equip ? eTypes[1] : eTypes[0];
                  eTypes.forEach(function(eq) {
                    if (eTotals[eq] < eTotals[equip2] && equip != eq) {
                      equip2 = eq;
                    }
                  });
                  equipment.push(equip2);
                }
              } else if (ctype === "cyberdemon") {
                let type = "biped";
                let typeList = ["wheel", "tread", "biped", "quad", "spider", "hover"].sort(() => Math.random() - 0.5);
                typeList.forEach(function(loco) {
                  if (mechs[ctype].chassis[loco] < mechs[ctype].chassis[type]) {
                    type = loco;
                  }
                });
                chassis = type;
                weapons = [];
                let wTypes = validWeapons(ctype, type, 0).sort(() => Math.random() - 0.5);
                for (let i = 0; i < 2; i++) {
                  let weapon = weapons.includes(wTypes[i]) ? wTypes[i + 1] : wTypes[i];
                  wTypes.forEach(function(wep) {
                    if (mechs[ctype].weapon[wep] < mechs[ctype].weapon[weapon] && !weapons.includes(wep)) {
                      weapon = wep;
                    }
                  });
                  mechs[ctype].weapon[weapon]++;
                  weapons.push(weapon);
                }
                let eTypes = validEquipment(ctype, type, 0).sort(() => Math.random() - 0.5);
                let eTotals = {};
                eTypes.forEach(function(eq) {
                  eTotals[eq] = counts.wheel.e[eq] + counts.tread.e[eq] + counts.biped.e[eq] + counts.quad.e[eq] + counts.spider.e[eq] + counts.hover.e[eq];
                });
                equipment.push("special");
                let slots = global.blood["prepared"] ? 2 : 1;
                for (let i = 0; i < slots; i++) {
                  let equip = eTypes[0];
                  eTypes.forEach(function(eq) {
                    if (eTotals[eq] < eTotals[equip] && !equipment.includes(eq)) {
                      equip = eq;
                    }
                  });
                  equipment.push(equip);
                  eTotals[equip]++;
                }
              } else if (ctype === "archfiend") {
                let type = "gorgon";
                if (counts.hydra.c < 1) {
                  type = "hydra";
                } else if (counts.dragon.c < 1) {
                  type = "dragon";
                } else if (counts.snake.c < 1) {
                  type = "snake";
                }
                chassis = type;
                if (type === "hydra") {
                  weapons = [
                    validWeapons(ctype, type, 0)[0],
                    validWeapons(ctype, type, 1)[0],
                    validWeapons(ctype, type, 2)[0],
                    validWeapons(ctype, type, 3)[0]
                  ];
                } else {
                  if (["dragon", "snake"].includes(type)) {
                    weapons = [
                      validWeapons(ctype, type, 0)[0]
                    ];
                  } else {
                    weapons = [counts.gorgon.w.hammer < counts.gorgon.w.axe ? "hammer" : "axe"];
                  }
                  let wTypes = validWeapons(ctype, type, 1).sort(() => Math.random() - 0.5);
                  let weapon = wTypes[0];
                  wTypes.forEach(function(wep) {
                    if (counts.dragon.w[wep] + counts.snake.w[wep] + counts.gorgon.w[wep] < counts.dragon.w[weapon] + counts.snake.w[weapon] + counts.gorgon.w[weapon]) {
                      weapon = wep;
                    }
                  });
                  weapons.push(weapon);
                }
                let eTypes = validEquipment(ctype, type, 0).sort(() => Math.random() - 0.5);
                let eTotals = {};
                eTypes.forEach(function(eq) {
                  eTotals[eq] = counts.dragon.e[eq] + counts.snake.e[eq] + counts.gorgon.e[eq] + counts.hydra.e[eq];
                });
                let slots = global.blood["prepared"] ? 5 : 4;
                for (let i = 0; i < slots; i++) {
                  let equip = eTypes[0];
                  eTypes.forEach(function(eq) {
                    if (eTotals[eq] < eTotals[equip] && !equipment.includes(eq)) {
                      equip = eq;
                    }
                  });
                  equipment.push(equip);
                  eTotals[equip]++;
                }
              }
            } else {
              Object.keys(mechs[ctype].chassis).forEach(function(val) {
                if (mechs[ctype].chassis[val] < c_val) {
                  c_val = mechs[ctype].chassis[val];
                  chassis = val;
                }
              });
              let wCap = ctype === "titan" ? 4 : 2;
              for (let i = 0; i < wCap; i++) {
                Object.keys(mechs[ctype].weapon).forEach(function(val) {
                  if (weapons[i] === "???" || mechs[ctype].weapon[val] < mechs[ctype].weapon[weapons[i]]) {
                    if (!weapons.includes(val)) {
                      weapons[i] = val;
                    }
                  }
                });
              }
              let equip = ["???", "???", "???", "???"];
              for (let i = 0; i < 4; i++) {
                Object.keys(mechs[ctype].equip).forEach(function(val) {
                  if (equip[i] === "???" || mechs[ctype].equip[val] < mechs[ctype].equip[equip[i]]) {
                    if (!equip.includes(val)) {
                      equip[i] = val;
                    }
                  }
                });
              }
              equipment = global.blood["prepared"] ? equip : [equip[0], equip[1]];
              if (ctype === "small") {
                weapons = [weapons[0]];
                equipment = global.blood["prepared"] ? ["special"] : [];
              } else if (ctype === "medium") {
                weapons = [weapons[0]];
                equipment = global.blood["prepared"] ? ["special", equip[0]] : ["special"];
              } else if (ctype === "large") {
                equipment = global.blood["prepared"] ? ["special", equip[0], equip[1]] : ["special", equip[0]];
              } else if (ctype === "titan") {
                equipment = global.blood["prepared"] ? ["special", equip[0], equip[1], equip[2], equip[3]] : ["special", equip[0], equip[1], equip[2]];
              }
            }
            global.portal.purifier.supply -= cost;
            global.resource.Soul_Gem.amount -= soul;
            global.portal.mechbay.mechs.push({
              chassis,
              size: ctype,
              equip: equipment,
              hardpoint: weapons,
              infernal: false
            });
            global.portal.mechbay.bay += size;
            global.portal.mechbay.active++;
          }
        }
      }
    },
    replicate: {
      // Replicator Scheduler
      name: loc(`gov_task_replicate`),
      req() {
        return global.tech["replicator"] && global.race["replicator"] ? true : false;
      },
      task() {
        if (global.race.governor.config.replicate.pow.on) {
          let cap = global.race.governor.config.replicate.pow.cap;
          let buffer = global.race.governor.config.replicate.pow.buffer;
          if (global.city.power < buffer && global.race.replicator.pow > 0) {
            let drain = global.city.power < 0 ? Math.abs(global.city.power) + buffer : buffer - global.city.power;
            global.race.replicator.pow -= drain;
            if (global.race.replicator.pow < 0) {
              global.race.replicator.pow = 0;
            }
          } else if (global.city.power > buffer && global.race.replicator.pow < cap) {
            global.race.replicator.pow += global.city.power - buffer;
            if (global.race.replicator.pow > cap) {
              global.race.replicator.pow = cap;
            }
          } else if (global.race.replicator.pow > cap) {
            global.race.replicator.pow = cap;
          }
          global.race.replicator.pow = Math.floor(global.race.replicator.pow);
        }
        let rBal = false;
        let blacklist = ["Asphodel_Powder", "Elysanite"];
        if (global.race["fasting"]) {
          blacklist.push("Food");
        }
        for (let idx = 0; global.race.governor.config.replicate.res.que && idx < global.queue.queue.length; idx++) {
          let struct = decodeStructId(global.queue.queue[idx].id);
          let tc = false;
          if (global.queue.queue[idx].action === "arpa") {
            let remain = (100 - global.arpa[struct.a].complete) / 100;
            let c_action = actions.arpa[struct.a];
            tc = arpaTimeCheck(c_action, remain, false, true);
          } else if (global.queue.queue[idx].action === "tp-ship") {
            let raw = shipCosts(global.queue.queue[idx].type);
            let costs = {};
            Object.keys(raw).forEach(function(res) {
              costs[res] = function() {
                return raw[res];
              };
            });
            let c_action = { cost: costs };
            tc = timeCheck(c_action, false, true);
          } else if (global.queue.queue[idx].action === "hell-mech") {
            let costs = mechCost(global.queue.queue[idx].type.size, global.queue.queue[idx].type.infernal, true);
            let c_action = { cost: costs };
            tc = timeCheck(c_action, false, true);
          } else {
            tc = timeCheck(struct.a, false, true);
          }
          let resSorted = Object.keys(tc.s).sort(function(a, b) {
            return tc.s[b] - tc.s[a];
          });
          for (let i = 0; i < resSorted.length; i++) {
            if (global.resource[resSorted[i]] && global.resource[resSorted[i]].display && atomic_mass[resSorted[i]] && !blacklist.includes(resSorted[i])) {
              global.race.replicator.res = resSorted[i];
              rBal = true;
              break;
            }
          }
          if (!global.settings.qAny || rBal) {
            break;
          }
        }
        if (!rBal) {
          let resSorted = Object.keys(atomic_mass).sort(function(a, b) {
            return global.resource[a].diff - global.resource[b].diff;
          });
          delete resSorted["Asphodel_Powder"];
          delete resSorted["Elysanite"];
          resSorted = resSorted.filter((item) => global.resource[item] && global.resource[item].display);
          if (global.race.governor.config.replicate.res.neg && resSorted[0] && global.resource[resSorted[0]].diff < 0 && (global.resource[resSorted[0]].amount <= global.resource[resSorted[0]].max * 0.95 || global.resource[resSorted[0]].max === -1)) {
            global.race.replicator.res = resSorted[0];
          } else if (global.resource[global.race.replicator.res].max !== -1 && global.race.governor.config.replicate.res.cap && global.resource[global.race.replicator.res].amount >= global.resource[global.race.replicator.res].max) {
            let cappable = resSorted.filter((item) => global.resource[item].max > 0);
            for (let i = 0; i < cappable.length; i++) {
              if (global.resource[cappable[i]].amount < global.resource[cappable[i]].max) {
                global.race.replicator.res = cappable[i];
                rBal = true;
                break;
              }
            }
            if (!rBal) {
              let uncappable = resSorted.filter((item) => global.resource[item].max === -1);
              if (uncappable.length > 0) {
                global.race.replicator.res = uncappable[0];
              }
            }
          }
        }
      }
    }
  };

  // src/seasons.js
  function setWeather() {
    switch (global.city.calendar.moon) {
      case 0:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-1") : $("#moon").removeClass("wi-moon-waning-crescent-6");
        $("#moon").addClass("wi-moon-new");
        break;
      case 1:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-2") : $("#moon").removeClass("wi-moon-new");
        $("#moon").addClass("wi-moon-waxing-crescent-1");
        break;
      case 2:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-3") : $("#moon").removeClass("wi-moon-waxing-crescent-1");
        $("#moon").addClass("wi-moon-waxing-crescent-2");
        break;
      case 3:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-4") : $("#moon").removeClass("wi-moon-waxing-crescent-2");
        $("#moon").addClass("wi-moon-waxing-crescent-3");
        break;
      case 4:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-5") : $("#moon").removeClass("wi-moon-waxing-crescent-3");
        $("#moon").addClass("wi-moon-waxing-crescent-4");
        break;
      case 5:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-crescent-6") : $("#moon").removeClass("wi-moon-waxing-crescent-4");
        $("#moon").addClass("wi-moon-waxing-crescent-5");
        break;
      case 6:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-first-quarter") : $("#moon").removeClass("wi-moon-waxing-crescent-5");
        $("#moon").addClass("wi-moon-waxing-crescent-6");
        break;
      case 7:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-1") : $("#moon").removeClass("wi-moon-waxing-crescent-6");
        $("#moon").addClass("wi-moon-first-quarter");
        break;
      case 8:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-2") : $("#moon").removeClass("wi-moon-first-quarter");
        $("#moon").addClass("wi-moon-waxing-gibbous-1");
        break;
      case 9:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-3") : $("#moon").removeClass("wi-moon-waxing-gibbous-1");
        $("#moon").addClass("wi-moon-waxing-gibbous-2");
        break;
      case 10:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-4") : $("#moon").removeClass("wi-moon-waxing-gibbous-2");
        $("#moon").addClass("wi-moon-waxing-gibbous-3");
        break;
      case 11:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-5") : $("#moon").removeClass("wi-moon-waxing-gibbous-3");
        $("#moon").addClass("wi-moon-waxing-gibbous-4");
        break;
      case 12:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waxing-gibbous-6") : $("#moon").removeClass("wi-moon-waxing-gibbous-4");
        $("#moon").addClass("wi-moon-waxing-gibbous-5");
        break;
      case 13:
        clearElement($("#moon"));
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-full") : $("#moon").removeClass("wi-moon-waxing-gibbous-5");
        $("#moon").addClass("wi-moon-waxing-gibbous-6");
        break;
      case 14:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-1") : $("#moon").removeClass("wi-moon-waxing-gibbous-6");
        let egg = easterEgg(2);
        if (egg.length > 0) {
          $("#moon").append(egg);
        } else {
          $("#moon").addClass("wi-moon-full");
        }
        break;
      case 15:
        clearElement($("#moon"));
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-2") : $("#moon").removeClass("wi-moon-full");
        $("#moon").addClass("wi-moon-waning-gibbous-1");
        break;
      case 16:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-3") : $("#moon").removeClass("wi-moon-waning-gibbous-1");
        $("#moon").addClass("wi-moon-waning-gibbous-2");
        break;
      case 17:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-4") : $("#moon").removeClass("wi-moon-waning-gibbous-2");
        $("#moon").addClass("wi-moon-waning-gibbous-3");
        break;
      case 18:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-5") : $("#moon").removeClass("wi-moon-waning-gibbous-3");
        $("#moon").addClass("wi-moon-waning-gibbous-4");
        break;
      case 19:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-gibbous-6") : $("#moon").removeClass("wi-moon-waning-gibbous-4");
        $("#moon").addClass("wi-moon-waning-gibbous-5");
        break;
      case 20:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-third-quarter") : $("#moon").removeClass("wi-moon-waning-gibbous-5");
        $("#moon").addClass("wi-moon-waning-gibbous-6");
        break;
      case 21:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-1") : $("#moon").removeClass("wi-moon-waning-gibbous-6");
        $("#moon").addClass("wi-moon-third-quarter");
        break;
      case 22:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-2") : $("#moon").removeClass("wi-moon-third-quarter");
        $("#moon").addClass("wi-moon-waning-crescent-1");
        break;
      case 23:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-3") : $("#moon").removeClass("wi-moon-waning-crescent-1");
        $("#moon").addClass("wi-moon-waning-crescent-2");
        break;
      case 24:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-4") : $("#moon").removeClass("wi-moon-waning-crescent-2");
        $("#moon").addClass("wi-moon-waning-crescent-3");
        break;
      case 25:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-5") : $("#moon").removeClass("wi-moon-waning-crescent-3");
        $("#moon").addClass("wi-moon-waning-crescent-4");
        break;
      case 26:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-waning-crescent-6") : $("#moon").removeClass("wi-moon-waning-crescent-4");
        $("#moon").addClass("wi-moon-waning-crescent-5");
        break;
      case 27:
        global.city.ptrait.includes("retrograde") ? $("#moon").removeClass("wi-moon-new") : $("#moon").removeClass("wi-moon-waning-crescent-5");
        $("#moon").addClass("wi-moon-waning-crescent-6");
        break;
    }
    $("#temp").removeClass("wi-thermometer");
    $("#temp").removeClass("wi-thermometer-exterior");
    if (global.city.calendar.temp === 0) {
      $("#temp").addClass("wi-thermometer-exterior");
    } else if (global.city.calendar.temp === 2) {
      $("#temp").addClass("wi-thermometer");
    }
    $("#weather").removeClass("wi-day-sunny");
    $("#weather").removeClass("wi-day-windy");
    $("#weather").removeClass("wi-cloud");
    $("#weather").removeClass("wi-cloudy-gusts");
    $("#weather").removeClass("wi-rain");
    $("#weather").removeClass("wi-storm-showers");
    $("#weather").removeClass("wi-snow");
    $("#weather").removeClass("wi-snow-wind");
    let weather;
    if (global.city.calendar.weather === 0) {
      if (global.city.calendar.temp === 0) {
        weather = global.city.calendar.wind === 0 ? "wi-snow" : "wi-snow-wind";
      } else {
        weather = global.city.calendar.wind === 0 ? "wi-rain" : "wi-storm-showers";
      }
    } else if (global.city.calendar.weather === 1) {
      weather = global.city.calendar.wind === 0 ? "wi-cloud" : "wi-cloudy-gusts";
    } else if (global.city.calendar.weather === 2) {
      weather = global.city.calendar.wind === 0 ? "wi-day-sunny" : "wi-day-windy";
    }
    $("#weather").addClass(weather);
  }
  function seasonDesc(type) {
    switch (type) {
      case "moon":
        return moonDescription();
      case "weather":
        return weatherDescription();
      case "temp":
        return tempDescription();
      case "sign":
        return astrologyDescription();
      case "astrology":
        return astrologySymbol();
      case "season":
        return seasonDescription();
    }
  }
  function moonDescription() {
    if (global.race["orbit_decayed"]) {
      return loc("moon0");
    } else if (global.city.calendar.moon === 0) {
      return loc("moon1");
    } else if (global.city.calendar.moon > 0 && global.city.calendar.moon < 7) {
      return loc("moon2");
    } else if (global.city.calendar.moon === 7) {
      return loc("moon3");
    } else if (global.city.calendar.moon > 7 && global.city.calendar.moon < 14) {
      return loc("moon4");
    } else if (global.city.calendar.moon === 14) {
      return loc("moon5");
    } else if (global.city.calendar.moon > 14 && global.city.calendar.moon < 21) {
      return loc("moon6");
    } else if (global.city.calendar.moon === 21) {
      return loc("moon7");
    } else if (global.city.calendar.moon > 21) {
      return loc("moon8");
    }
  }
  function weatherDescription() {
    switch (global.city.calendar.weather) {
      case 0:
        if (global.city.calendar.temp === 0) {
          return global.city.calendar.wind === 1 ? loc("snowstorm") : loc("snow");
        } else {
          return global.city.calendar.wind === 1 ? loc("thunderstorm") : loc("rain");
        }
      case 1:
        return global.city.calendar.wind === 1 ? loc("cloudy_windy") : loc("cloudy");
      case 2:
        return global.city.calendar.wind === 1 ? loc("sunny_windy") : loc("sunny");
    }
  }
  function tempDescription() {
    switch (global.city.calendar.temp) {
      case 0:
        return loc("cold");
      // weather, cold weather may reduce food output.';
      case 1:
        return loc("moderate");
      case 2:
        return loc("hot");
    }
  }
  function astroVal2(sign) {
    let boosted = global.race["wish"] && global.race["wishStats"] && global.race.wishStats.astro ? true : false;
    let multiplier = 1;
    if (global.race["astrologer"]) {
      multiplier += global.race["unfavored"] ? -(traits.astrologer.vars()[0] / 100) : traits.astrologer.vars()[0] / 100;
    }
    if (global.race["unfavored"]) {
      multiplier *= -(traits.unfavored.vars()[0] / 100);
    }
    switch (sign) {
      case "aries":
        return [boosted ? Math.round(12 * multiplier) : Math.round(10 * multiplier)];
      case "taurus":
        return [+(boosted ? 3 * multiplier : 2 * multiplier).toFixed(2)];
      case "gemini":
        return [boosted ? Math.round(30 * multiplier) : Math.round(20 * multiplier)];
      case "cancer":
        return [boosted ? Math.round(8 * multiplier) : Math.round(5 * multiplier)];
      case "leo":
        return [boosted ? 5 * multiplier : 4 * multiplier];
      case "virgo":
        return [boosted ? Math.round(20 * multiplier) : Math.round(15 * multiplier)];
      case "libra":
        return [boosted ? Math.round(40 * multiplier) : Math.round(25 * multiplier)];
      case "scorpio":
        return boosted ? [Math.round(20 * multiplier), 2] : [Math.round(12 * multiplier), 1];
      case "sagittarius":
        return [boosted ? 6 * multiplier : 5 * multiplier];
      case "capricorn":
        return [boosted ? Math.round(20 * multiplier) : Math.round(10 * multiplier)];
      case "aquarius":
        return [boosted ? Math.round(30 * multiplier) : Math.round(20 * multiplier)];
      case "pisces":
        return boosted ? [Math.round(79 * multiplier), Math.round(45 * multiplier)] : [Math.round(49 * multiplier), Math.round(25 * multiplier)];
    }
  }
  function astrologySign() {
    const date2 = /* @__PURE__ */ new Date();
    if (date2.getMonth() === 0 && date2.getDate() >= 20 || date2.getMonth() === 1 && date2.getDate() <= 18) {
      return "aquarius";
    } else if (date2.getMonth() === 1 && date2.getDate() >= 19 || date2.getMonth() === 2 && date2.getDate() <= 20) {
      return "pisces";
    } else if (date2.getMonth() === 2 && date2.getDate() >= 21 || date2.getMonth() === 3 && date2.getDate() <= 19) {
      return "aries";
    } else if (date2.getMonth() === 3 && date2.getDate() >= 20 || date2.getMonth() === 4 && date2.getDate() <= 20) {
      return "taurus";
    } else if (date2.getMonth() === 4 && date2.getDate() >= 21 || date2.getMonth() === 5 && date2.getDate() <= 21) {
      return "gemini";
    } else if (date2.getMonth() === 5 && date2.getDate() >= 22 || date2.getMonth() === 6 && date2.getDate() <= 22) {
      return "cancer";
    } else if (date2.getMonth() === 6 && date2.getDate() >= 23 || date2.getMonth() === 7 && date2.getDate() <= 22) {
      return "leo";
    } else if (date2.getMonth() === 7 && date2.getDate() >= 23 || date2.getMonth() === 8 && date2.getDate() <= 22) {
      return "virgo";
    } else if (date2.getMonth() === 8 && date2.getDate() >= 23 || date2.getMonth() === 9 && date2.getDate() <= 22) {
      return "libra";
    } else if (date2.getMonth() === 9 && date2.getDate() >= 23 || date2.getMonth() === 10 && date2.getDate() <= 22) {
      return "scorpio";
    } else if (date2.getMonth() === 10 && date2.getDate() >= 23 || date2.getMonth() === 11 && date2.getDate() <= 21) {
      return "sagittarius";
    } else if (date2.getMonth() === 11 && date2.getDate() >= 22 || date2.getMonth() === 0 && date2.getDate() <= 19) {
      return "capricorn";
    } else {
      return "time itself is broken";
    }
  }
  function astrologyDescription() {
    let sign = astrologySign();
    let desc = `<div>${loc(`sign_description`, [loc(`sign_${sign}`), loc(`sign_${sign}_desc`)])}</div>`;
    desc += `<div>${astroEffect(sign)}</div>`;
    return desc;
  }
  function astroEffect(sign) {
    if (sign === "pisces" || sign === "cancer") {
      return global.race["unfavored"] ? loc(`sign_${sign}_unfavored`) : loc(`sign_${sign}_effect`);
    } else if (sign === "scorpio" && global.race["unfavored"]) {
      return loc(`sign_${sign}_unfavored`, [-astroVal2(sign)[0]]);
    } else {
      return global.race["unfavored"] ? loc(`sign_${sign}_unfavored`, [astroVal2(sign)[0]]) : loc(`sign_${sign}_effect`, [astroVal2(sign)[0]]);
    }
  }
  function astrologySymbol() {
    let sign = astrologySign();
    return loc(`sign_${sign}_symbol`);
  }
  function seasonDescription() {
    switch (global.city.calendar.season) {
      case 0:
        return loc("season_spring");
      case 1:
        return loc("season_summer");
      case 2:
        return loc("season_autumn");
      case 3:
        return loc("season_winter");
    }
  }

  // src/civics.js
  function defineGovernment(define) {
    if (!global.civic["taxes"]) {
      global.civic["taxes"] = {
        tax_rate: 20,
        display: false
      };
    }
    if (define) {
      return;
    }
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 0)) {
      return;
    }
    var govern2 = $('<div id="government" class="government is-child"></div>');
    var tabs = $(`<b-tabs class="resTabs govTabs2" v-show="vis()" v-model="s.govTabs2" :animated="s.animated">
        <b-tab-item id="r_govern0">
            <template slot="header">
                <h2 class="is-sr-only">${loc("civics_government")}}</h2>
                <span aria-hidden="true">${loc("civics_government")}</span>
            </template>
        </b-tab-item>
        <b-tab-item id="r_govern1" :visible="s.showGovernor">
            <template slot="header">
                <h2 class="is-sr-only">${loc("governor")}}</h2>
                <span aria-hidden="true">${loc("governor")}</span>
            </template>
        </b-tab-item>
    </b-tabs>`);
    govern2.append(tabs);
    $("#r_civics").append(govern2);
    vBind({
      el: "#government .govTabs2",
      data: {
        t: global.civic["taxes"],
        s: global.settings
      },
      methods: {
        vis() {
          return global.tech["govern"] ? true : false;
        }
      }
    });
    government($(`#r_govern0`));
    taxRates($(`#r_govern0`));
    var civ_garrison = $('<div id="c_garrison" v-show="g.display" class="garrison tile is-child"></div>');
    $("#r_govern0").append(civ_garrison);
    defineGovernor();
  }
  function defineGarrison() {
    commisionGarrison();
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 3)) {
      return;
    }
    var garrison = $('<div id="garrison" v-show="vis()" class="garrison tile is-child"></div>');
    $("#military").append(garrison);
    $("#military").append($(`<div id="fortress"></div>`));
    buildGarrison(garrison, true);
    defineMad();
  }
  function commisionGarrison() {
    if (!global.civic["garrison"]) {
      global.civic["garrison"] = {
        display: false,
        disabled: false,
        rate: 0,
        progress: 0,
        tactic: 0,
        workers: 0,
        wounded: 0,
        raid: 0,
        max: 0
      };
    }
    if (!global.civic.garrison["mercs"]) {
      global.civic.garrison["mercs"] = false;
    }
    if (!global.civic.garrison["fatigue"]) {
      global.civic.garrison["fatigue"] = 0;
    }
    if (!global.civic.garrison["protest"]) {
      global.civic.garrison["protest"] = 0;
    }
    if (!global.civic.garrison["m_use"]) {
      global.civic.garrison["m_use"] = 0;
    }
    if (!global.civic.garrison["crew"]) {
      global.civic.garrison["crew"] = 0;
    }
    if (!global.civic["mad"]) {
      global.civic["mad"] = {
        display: false,
        armed: true
      };
    }
  }
  function govRelationFactor(id) {
    if (global.race["truepath"]) {
      if (global.civic.foreign[`gov${id}`].hstl < 10) {
        return 1 + (10 - global.civic.foreign[`gov${id}`].hstl) / 40;
      } else if (global.civic.foreign[`gov${id}`].hstl > 60) {
        return 1 - (-60 + global.civic.foreign[`gov${id}`].hstl) / 160;
      }
    }
    return 1;
  }
  function govTitle(id) {
    if (typeof global.civic.foreign[`gov${id}`]["name"] == "undefined") {
      let nameFrags = genCivName();
      global.civic.foreign[`gov${id}`]["name"] = {
        s0: nameFrags.s0,
        s1: nameFrags.s1
      };
    }
    return loc(`civics_gov${global.civic.foreign[`gov${id}`].name.s0}`, [global.civic.foreign[`gov${id}`].name.s1]);
  }
  var government_desc = function(type) {
    let desc = {
      anarchy: loc("govern_anarchy_effect"),
      autocracy: loc("govern_autocracy_effect", govEffect.autocracy()),
      democracy: loc(global.race.universe === "evil" ? "govern_managed_democracy_effect" : "govern_democracy_effect", govEffect.democracy()),
      oligarchy: global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? loc("govern_oligarchy_effect_alt", [govEffect.oligarchy()[1]]) : loc("govern_oligarchy_effect", [govEffect.oligarchy()[0], govEffect.oligarchy()[1]]),
      theocracy: loc("govern_theocracy_effect", govEffect.theocracy()),
      theocracy_alt: loc("govern_theocracy_effect_alt", govEffect.theocracy()),
      republic: loc("govern_republic_effect", govEffect.republic()),
      socialist: loc("govern_socialist_effect", govEffect.socialist()),
      corpocracy: loc("govern_corpocracy_effect", govEffect.corpocracy()),
      technocracy: global.tech["high_tech"] && global.tech["high_tech"] >= 16 ? loc("govern_technocracy_effect_alt", [govEffect.technocracy()[0], govEffect.technocracy()[2]]) : loc("govern_technocracy_effect", govEffect.technocracy()),
      federation: loc("govern_federation_effect", [govEffect.federation()[0], govEffect.federation()[1]]),
      federation_alt: loc("govern_federation_effect_alt", [25, govEffect.federation()[2], govEffect.federation()[1]]),
      magocracy: loc("govern_magocracy_effect", govEffect.magocracy()),
      dictator: loc("govern_dictator_effect", govEffect.dictator())
    };
    let effect = desc[type];
    if (global.race.universe === "evil") {
      switch (type) {
        case "autocracy":
          effect += ` ${loc(`govern_authority`, [8])} ${loc(`govern_authority_cap`, [10])}`;
          break;
        case "dictator":
          effect += ` ${loc(`govern_authority`, [12])}`;
          break;
        case "oligarchy":
          effect += ` ${loc(`govern_authority_cap`, [20])}`;
          break;
      }
    }
    return effect;
  };
  var govEffect = {
    autocracy() {
      let stress = global.tech["high_tech"] && global.tech["high_tech"] >= 2 ? global.tech["high_tech"] >= 12 ? 10 : 18 : 25;
      let attack = govActive("organizer", 0) ? 40 : 35;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        attack += govActive("organizer", 0) ? 10 : 5;
      }
      return [stress, attack];
    },
    democracy() {
      let entertainer = global.tech["high_tech"] && global.tech["high_tech"] >= 2 ? global.tech["high_tech"] >= 12 ? 30 : 25 : 20;
      let work_malus = govActive("organizer", 0) ? 1 : 5;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        entertainer += govActive("organizer", 0) ? 10 : 5;
      }
      return [entertainer, work_malus];
    },
    oligarchy() {
      let tax_penalty = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? 0 : global.tech["high_tech"] && global.tech["high_tech"] >= 2 ? 2 : 5;
      let tax_cap = govActive("organizer", 0) ? 25 : 20;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        tax_cap += govActive("organizer", 0) ? 10 : 5;
      }
      return [tax_penalty, tax_cap];
    },
    theocracy() {
      let temple = 12;
      let prof_malus = govActive("organizer", 0) ? 10 : 25;
      let sci_malus = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 25 : 40 : 50;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        temple += govActive("organizer", 0) ? 2 : 1;
      }
      return [temple, prof_malus, sci_malus];
    },
    republic() {
      let bankers = govActive("organizer", 0) ? 30 : 25;
      let morale = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 40 : 30 : 20;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        morale += govActive("organizer", 0) ? 10 : 5;
        bankers += govActive("organizer", 0) ? 10 : 5;
      }
      return [bankers, morale];
    },
    socialist() {
      let crafting = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 50 : 42 : 35;
      let manufacture = govActive("organizer", 0) ? 12 : 10;
      let stress = 10;
      let money_malus = govActive("organizer", 0) ? 10 : 20;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        money_malus -= 5;
        crafting += govActive("organizer", 0) ? 10 : 5;
        manufacture += govActive("organizer", 0) ? 3 : 2;
      }
      return [crafting, manufacture, stress, money_malus];
    },
    corpocracy() {
      let casino = govActive("organizer", 0) ? 220 : 200;
      let lux = govActive("organizer", 0) ? 175 : 150;
      let tourism = govActive("organizer", 0) ? 110 : 100;
      let morale = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? 5 : 10;
      let factory = global.tech["high_tech"] && global.tech["high_tech"] >= 16 ? 40 : 30;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        casino += govActive("organizer", 0) ? 30 : 20;
        lux += govActive("organizer", 0) ? 15 : 10;
        tourism += govActive("organizer", 0) ? 15 : 10;
        factory += govActive("organizer", 0) ? 10 : 5;
      }
      return [casino, lux, tourism, morale, factory];
    },
    technocracy() {
      let knowCost = 8;
      let mat = global.tech["high_tech"] && global.tech["high_tech"] >= 16 ? 0 : global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? 1 : 2;
      let knowGen = govActive("organizer", 0) ? 18 : 10;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        knowGen += govActive("organizer", 0) ? 7 : 5;
      }
      return [knowCost, mat, knowGen];
    },
    federation() {
      let city = 3;
      let morale = govActive("organizer", 0) ? 12 : 10;
      let unified = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 40 : 36 : 32;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        morale += govActive("organizer", 0) ? 6 : 2;
        unified += govActive("organizer", 0) ? 4 : 2;
      }
      return [city, morale, unified];
    },
    magocracy() {
      let wiz = govActive("organizer", 0) ? 30 : 25;
      let crystal = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 50 : 40 : 25;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        wiz += govActive("organizer", 0) ? 10 : 5;
        crystal += govActive("organizer", 0) ? 10 : 5;
      }
      return [wiz, crystal];
    },
    dictator() {
      let stress = govActive("organizer", 0) ? 25 : 30;
      let production2 = global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? 12 : 10;
      let materials = global.tech["high_tech"] && global.tech["high_tech"] >= 16 ? 6 : 4;
      if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
        stress -= govActive("organizer", 0) ? 10 : 5;
        production2 += govActive("organizer", 0) ? 3 : 2;
        materials += govActive("organizer", 0) ? 4 : 2;
      }
      return [stress, production2, materials];
    }
  };
  function government(govern2) {
    var gov = $('<div id="govType" class="govType" v-show="vis()"></div>');
    govern2.append(gov);
    var type = $(`<div>${loc("civics_government_type")} <span id="govLabel" class="has-text-warning">{{ type | govern }}</span></div>`);
    gov.append(type);
    var setgov = $(`<div></div>`);
    gov.append(setgov);
    var change = $(`<span class="change inline"><button class="button" @click="trigModal" :disabled="rev > 0">{{ type | set }}</button></span>`);
    setgov.append(change);
    var modal = {
      template: '<div id="modalBox" class="modalBox"></div>'
    };
    vBind({
      el: "#govType",
      data: global.civic["govern"],
      filters: {
        govern(type2) {
          if (global.race.universe === "evil" && type2 === "democracy") {
            return loc(`govern_managed_democracy`);
          }
          return loc(`govern_${type2}`);
        },
        set(g) {
          return g === "anarchy" ? loc("civics_set_gov") : loc("civics_revolution");
        }
      },
      methods: {
        trigModal() {
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          var checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              drawGovModal();
            }
          }, 50);
        },
        startrev() {
          global.civic.govern.fr = global.civic.govern.rev;
          global.civic.govern.rev = 0;
        },
        force() {
          return global.civic.govern.rev > 0 ? loc("civics_force_rev_desc") : loc("civics_force_rev_desc2");
        },
        vis() {
          return global.tech["govern"] ? true : false;
        }
      }
    });
    popover(
      "govLabel",
      function() {
        let effect_type = global.tech["unify"] && global.tech["unify"] >= 2 && global.civic.govern.type === "federation" ? "federation_alt" : global.civic.govern.type;
        if (effect_type === "theocracy" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
          effect_type = "theocracy_alt";
        }
        return $(`<div>${govDescription(global.civic.govern.type)}</div><div class="has-text-advanced">${government_desc(effect_type)}</div>`);
      }
    );
    popover(
      `govTypeChange`,
      function() {
        return global.civic.govern.rev > 0 ? loc("civics_change_desc", [global.civic.govern.rev]) : loc("civics_change_desc2");
      },
      {
        elm: `#govType .change`
      }
    );
  }
  function govDescription(type) {
    if (global.race["witch_hunter"] && type === "magocracy") {
      return loc(`witch_hunter_magocracy`);
    } else if (global.race.universe === "evil") {
      switch (type) {
        case "democracy":
          return loc(`govern_managed_democracy_desc`);
      }
    }
    return loc(`govern_${type}_desc`);
  }
  function drawGovModal() {
    $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc("civics_government_type")}</p>`));
    let egg = easterEgg(6, 10);
    if (egg.length > 0) {
      $("#modalBoxTitle").append(egg);
    }
    let trick = trickOrTreat(6, 14, false);
    if (trick.length > 0) {
      $("#modalBoxTitle").append(trick);
    }
    var body = $('<div id="govModal" class="modalBody max40"></div>');
    $("#modalBox").append(body);
    if (global.tech["govern"]) {
      if (global.civic.govern.type !== "autocracy") {
        body.append($(`<button class="button gap" data-gov="autocracy" @click="setGov('autocracy')">${loc(`govern_autocracy`)}</button>`));
      }
      if (global.civic.govern.type !== "democracy" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="democracy" @click="setGov('democracy')">${global.race.universe === "evil" ? loc(`govern_managed_democracy`) : loc(`govern_democracy`)}</button>`));
      }
      if (global.civic.govern.type !== "oligarchy" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="oligarchy" @click="setGov('oligarchy')">${loc(`govern_oligarchy`)}</button>`));
      }
      if (global.tech["gov_theo"] && global.civic.govern.type !== "theocracy" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="theocracy" @click="setGov('theocracy')">${loc(`govern_theocracy`)}</button>`));
      }
      if (global.tech["govern"] >= 2 && global.civic.govern.type !== "republic" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="republic" @click="setGov('republic')">${loc(`govern_republic`)}</button>`));
      }
      if (global.tech["gov_soc"] && global.civic.govern.type !== "socialist" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="socialist" @click="setGov('socialist')">${loc(`govern_socialist`)}</button>`));
      }
      if (global.tech["gov_corp"] && global.civic.govern.type !== "corpocracy" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="corpocracy" @click="setGov('corpocracy')">${loc(`govern_corpocracy`)}</button>`));
      }
      if (global.tech["govern"] >= 3 && global.civic.govern.type !== "technocracy" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="technocracy" @click="setGov('technocracy')">${loc(`govern_technocracy`)}</button>`));
      }
      if (global.tech["gov_fed"] && global.civic.govern.type !== "federation" && !global.race["warlord"]) {
        body.append($(`<button class="button gap" data-gov="federation" @click="setGov('federation')">${loc(`govern_federation`)}</button>`));
      }
      if (global.tech["gov_mage"] && global.civic.govern.type !== "magocracy") {
        body.append($(`<button class="button gap" data-gov="magocracy" @click="setGov('magocracy')">${loc(`govern_magocracy`)}</button>`));
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.gov && global.civic.govern.type !== "dictator") {
        body.append($(`<button class="button gap" data-gov="dictator" @click="setGov('dictator')">${loc(`govern_dictator`)}</button>`));
      }
    }
    vBind({
      el: "#govModal",
      data: global.civic["govern"],
      methods: {
        setGov(g) {
          if (global.civic.govern.rev === 0) {
            let drawTechs = global.genes["governor"] && global.civic.govern.type === "anarchy";
            global.civic.govern.type = g;
            let time = 1e3;
            if (global.tech["high_tech"]) {
              time += 250;
              if (global.tech["high_tech"] >= 3) {
                time += 250;
              }
              if (global.tech["high_tech"] >= 6) {
                time += 250;
              }
            }
            if (global.tech["space_explore"] && global.tech["space_explore"] >= 3) {
              time += 250;
            }
            if (global.race["unorganized"]) {
              time = Math.round(time * (1 + traits.unorganized.vars()[0] / 100));
            }
            if (global.stats.achieve["anarchist"]) {
              time = Math.round(time * (1 - global.stats.achieve["anarchist"].l / 10));
            }
            if (global.race["lawless"]) {
              time = Math.round(time * ((100 - traits.lawless.vars()[0]) / 100));
            }
            let fathom = fathomCheck("tuskin");
            if (fathom > 0) {
              time = Math.round(time * ((100 - traits.lawless.vars(1)[0] * fathom) / 100));
            }
            let aristoVal = govActive("aristocrat", 0);
            if (aristoVal) {
              time = Math.round(time * (1 - aristoVal / 100));
            }
            global.civic.govern.rev = time + global.civic.govern.fr;
            if (drawTechs) {
              drawTech();
            }
            vBind({ el: "#govModal" }, "destroy");
            $(".modal-background").click();
            clearPopper();
          }
        }
      }
    });
    popover(
      "GovPop",
      function(obj) {
        let govType = $(obj.this).data("gov");
        let effectType = global.tech["unify"] && global.tech["unify"] >= 2 && govType === "federation" ? "federation_alt" : govType;
        if (effectType === "theocracy" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
          effectType = "theocracy_alt";
        }
        return $(`<div>${govDescription(govType)}</div><div class="has-text-advanced">${government_desc(effectType)}</div>`);
      },
      {
        elm: `#govModal button`,
        self: true,
        classes: `has-background-light has-text-dark`
      }
    );
  }
  function foreignGov() {
    if ($("#foreign").length === 0 && !global.race["cataclysm"] && (!global.tech["world_control"] || global.race["truepath"]) && !global.tech["isolation"]) {
      let foreign = $('<div id="foreign" v-show="vis()" class="government is-child"></div>');
      foreign.append($(`<div class="header"><h2 class="has-text-warning">${loc("civics_foreign")}</h2></div>`));
      $("#r_govern0").append(foreign);
      var modal = {
        template: '<div id="modalBox" class="modalBox"></div>'
      };
      let govEnd = global.race["truepath"] ? 5 : 3;
      for (let i = 0; i < govEnd; i++) {
        let gov = $(`<div id="gov${i}" class="foreign" v-show="gvis(${i})"><span class="has-text-caution">{{ '${i}' | gov }}</span><span v-if="f${i}.occ" class="has-text-advanced"> - ${loc("civics_garrison_occupy")}</span><span v-else-if="f${i}.anx" class="has-text-advanced"> - ${loc("civics_garrison_annex")}</span></span><span v-else-if="f${i}.buy" class="has-text-advanced"> - ${loc("civics_garrison_purchase")}</span></div>`);
        foreign.append(gov);
        let actions2 = $(`<div></div>`);
        actions2.append($(`<button :label="battleAssessment(${i})" class="button gaction attack" @click="campaign(${i})"><span v-show="!f${i}.occ && !f${i}.anx && !f${i}.buy">${loc("civics_garrison_attack")}</span><span v-show="f${i}.occ || f${i}.anx || f${i}.buy">${loc("civics_garrison_unoccupy")}</span></button>`));
        actions2.append($(`<span class="tspy inline"><button :label="spyDesc(${i})" v-show="t.spy >= 1 && !f${i}.occ && !f${i}.anx && !f${i}.buy" :disabled="spy_disabled(${i})" class="button gaction" @click="spy(${i})"><span v-show="f${i}.trn === 0">${loc("tech_spy")}: {{ f${i}.spy }}</span><span v-show="f${i}.trn > 0">${loc("civics_train")}: {{ f${i}.trn }}</span></button></span>`));
        actions2.append($(`<span class="sspy inline"><button :label="espDesc()" v-show="t.spy >= 2 && !f${i}.occ && !f${i}.anx && !f${i}.buy && f${i}.spy >= 1" :disabled="f${i}.sab > 0" class="button gaction" @click="trigModal(${i})"><span v-show="f${i}.sab === 0">${loc("tech_espionage")}</span><span v-show="f${i}.sab > 0">{{ f${i}.act | sab }}: {{ f${i}.sab }}</span></button></span>`));
        gov.append(actions2);
        gov.append($(`<div v-show="!f${i}.occ && !f${i}.anx && !f${i}.buy"><span class="has-text-advanced glabel">${loc("civics_gov_mil_rate")}:</span> <span class="glevel">{{ f${i}.mil | military(${i}) }}<span class="has-text-warning" v-show="f${i}.spy >= 2"> ({{ f${i}.mil }})</span></span></div>`));
        gov.append($(`<div v-show="!f${i}.occ && !f${i}.anx && !f${i}.buy"><span class="has-text-advanced glabel">${loc("civics_gov_relations")}:</span> <span class="glevel">{{ f${i}.hstl | relation }}<span class="has-text-warning" v-show="f${i}.spy >= 1"> ({{ f${i}.hstl | hate }})</span></span></div>`));
        gov.append($(`<div v-show="!f${i}.occ && !f${i}.anx && !f${i}.buy"><span class="has-text-advanced glabel">${loc("civics_gov_eco_rate")}:</span> <span class="glevel">{{ f${i}.eco | eco(${i}) }}<span class="has-text-warning" v-show="f${i}.spy >= 3"> ({{ f${i}.eco }})</span></span></div>`));
        gov.append($(`<div v-show="f${i}.spy >= 2 && !f${i}.occ && !f${i}.anx && !f${i}.buy"><span class="has-text-advanced glabel">${loc("civics_gov_unrest")}:</span> <span class="glevel">{{ f${i}.unrest | discontent(${i}) }}<span class="has-text-warning" v-show="f${i}.spy >= 4"> ({{ f${i}.unrest | turmoil }})</span></span></div>`));
      }
      let bindData = {
        f0: global.civic.foreign[`gov0`],
        f1: global.civic.foreign[`gov1`],
        f2: global.civic.foreign[`gov2`],
        t: global.tech
      };
      if (global.race["truepath"]) {
        bindData["f3"] = global.civic.foreign[`gov3`];
        bindData["f4"] = global.civic.foreign[`gov4`];
      }
      vBind({
        el: `#foreign`,
        data: bindData,
        filters: {
          military(m, i) {
            if (global.civic.foreign[`gov${i}`].spy >= 1) {
              if (m < 50) {
                return loc("civics_gov_v_weak");
              } else if (m < 75) {
                return loc("civics_gov_weak");
              } else if (m > 300) {
                return loc("civics_gov_superpower");
              } else if (m > 200) {
                return loc("civics_gov_v_strong");
              } else if (m > 160) {
                return loc("civics_gov_strong");
              } else if (m > 125) {
                return loc("civics_gov_above_average");
              } else {
                return loc("civics_gov_average");
              }
            } else {
              return "???";
            }
          },
          relation(r) {
            if (r > 80) {
              return loc("civics_gov_hated");
            } else if (r > 60) {
              return loc("civics_gov_hostile");
            } else if (r > 40) {
              return loc("civics_gov_poor");
            } else if (r > 25) {
              return loc("civics_gov_neutral");
            } else if (r > 10) {
              return loc("civics_gov_liked");
            } else {
              return loc("civics_gov_good");
            }
          },
          eco(e, i) {
            if (global.civic.foreign[`gov${i}`].spy >= 2) {
              if (e < 60) {
                return loc("civics_gov_weak");
              } else if (e < 80) {
                return loc("civics_gov_recession");
              } else if (e > 120) {
                return loc("civics_gov_strong");
              } else {
                return loc("civics_gov_average");
              }
            } else {
              return "???";
            }
          },
          discontent(r, i) {
            if (global.civic.foreign[`gov${i}`].spy >= 3) {
              if (r <= 0) {
                return loc("civics_gov_none");
              } else if (r < 30) {
                return loc("civics_gov_low");
              } else if (r < 60) {
                return loc("civics_gov_medium");
              } else if (r < 90) {
                return loc("civics_gov_high");
              } else {
                return loc("civics_gov_extreme");
              }
            } else {
              return "???";
            }
          },
          gov(id) {
            return govTitle(id);
          },
          sab(s) {
            return s === "none" ? "" : loc(`civics_spy_${s}`);
          },
          hate(h) {
            return `${100 - h}%`;
          },
          turmoil(u) {
            return `${u}%`;
          }
        },
        methods: {
          campaign(gov) {
            war_campaign(gov);
          },
          battleAssessment(gov) {
            return battleAssessment(gov);
          },
          trigModal(i) {
            this.$buefy.modal.open({
              parent: this,
              component: modal
            });
            var checkExist = setInterval(function() {
              if ($("#modalBox").length > 0) {
                clearInterval(checkExist);
                drawEspModal(i);
              }
            }, 50);
          },
          spy_disabled(i) {
            return global.civic.foreign[`gov${i}`].trn > 0 || spyCost(i) > global.resource.Money.amount ? true : false;
          },
          spy(i) {
            trainSpy(i);
          },
          spyDesc(i) {
            return spyDesc(i);
          },
          espDesc() {
            return espDesc();
          },
          vis() {
            return global.civic.garrison.display && (!global.tech["world_control"] || global.race["truepath"]) && !global.race["cataclysm"] && !global.tech["isolation"] ? true : false;
          },
          gvis(g) {
            if (global.tech["isolation"]) {
              return false;
            }
            if (g <= 2) {
              return global.tech["world_control"] ? false : true;
            } else if (g === 3) {
              return global.tech["rival"] ? true : false;
            }
            return false;
          }
        }
      });
      for (let i = 0; i < govEnd; i++) {
        popover(
          `gov${i}a`,
          function() {
            return "<span>{{ label() }}</span>";
          },
          {
            elm: `#gov${i} .attack`,
            in: function(obj) {
              vBind({
                el: `#${obj.id} > span`,
                data: { test: "val" },
                methods: {
                  label() {
                    return battleAssessment(i);
                  }
                }
              });
            },
            out: function(obj) {
              vBind({ el: obj.id }, "destroy");
            }
          }
        );
        popover(
          `gov${i}ts`,
          function() {
            return "<span>{{ label() }}</span>";
          },
          {
            elm: `#gov${i} .tspy`,
            in: function(obj) {
              vBind({
                el: `#${obj.id} > span`,
                data: { test: "val" },
                methods: {
                  label() {
                    return spyDesc(i);
                  }
                }
              });
            },
            out: function(obj) {
              vBind({ el: obj.id }, "destroy");
            }
          }
        );
        popover(
          `gov${i}s`,
          function() {
            return espDesc();
          },
          {
            elm: `#gov${i} .sspy`
          }
        );
      }
      if (global.race["truepath"]) {
        popover(
          `garRivaldesc1`,
          function() {
            return loc(`civics_gov_tp_rival`, [govTitle(3), races[global.race.species].home]);
          },
          {
            elm: `#gov3 > span`
          }
        );
      }
    }
  }
  function spyDesc(i) {
    if (global.civic.foreign[`gov${i}`].trn > 0) {
      return loc("civics_progress");
    }
    let cost = sizeApproximation(spyCost(i));
    return loc("civics_gov_spy_desc", [cost]);
  }
  function espDesc() {
    return loc("civics_gov_esp_desc");
  }
  function spyCost(i) {
    let base = Math.round(global.civic.foreign[`gov${i}`].mil / 2 + global.civic.foreign[`gov${i}`].hstl / 2 - global.civic.foreign[`gov${i}`].unrest) + 10;
    if (base < 50) {
      base = 50;
    }
    if (global.race["infiltrator"]) {
      base /= 3;
    }
    if (astrologySign() === "scorpio") {
      base *= 1 - astroVal2("scorpio")[0] / 100;
    }
    return Math.round(base ** (global.civic.foreign[`gov${i}`].spy + 1)) + 500;
  }
  function trainSpy(i) {
    if (global.tech["spy"] && global.civic.foreign[`gov${i}`].trn === 0) {
      let cost = spyCost(i);
      if (global.resource.Money.amount >= cost) {
        global.resource.Money.amount -= cost;
        let time = 300;
        if (global.tech["spy"] >= 3 && global.city["boot_camp"]) {
          time -= (global.race["orbit_decayed"] && global.space["space_barracks"] ? global.space.space_barracks.on : global.city["boot_camp"].count) * 10;
          if (time < 10) {
            time = 10;
          }
        }
        if (global.race["infiltrator"]) {
          time = Math.round(time / 2);
        }
        global.civic.foreign[`gov${i}`].trn = time;
      }
    }
  }
  function govPrice(gov) {
    let price = global.civic.foreign[`gov${gov}`].eco * 15384;
    price *= 1 + global.civic.foreign[`gov${gov}`].hstl * 1.6 / 100;
    price *= 1 - global.civic.foreign[`gov${gov}`].unrest * 0.25 / 100;
    return +price.toFixed(0);
  }
  function checkControlling(gov) {
    if (gov) {
      return global.tech["world_control"] || global.civic.foreign[gov].occ || global.civic.foreign[gov].anx || global.civic.foreign[gov].buy;
    }
    return global.civic.foreign.gov0.occ || global.civic.foreign.gov1.occ || global.civic.foreign.gov2.occ || global.civic.foreign.gov0.anx || global.civic.foreign.gov1.anx || global.civic.foreign.gov2.anx || global.civic.foreign.gov0.buy || global.civic.foreign.gov1.buy || global.civic.foreign.gov2.buy;
  }
  function spyAction(sa, g) {
    if (global.tech["spy"] && global.tech["spy"] >= 2) {
      let num_spies = global.civic.foreign[`gov${g}`].spy;
      if (num_spies >= 1 && global.civic.foreign[`gov${g}`].sab === 0) {
        let timer;
        let can_sab = false;
        switch (sa) {
          case "influence":
            timer = global.tech["spy"] >= 4 ? 200 : 300;
            if (num_spies === 1) {
              timer *= 1.5;
            } else if (num_spies >= 3) {
              timer -= (num_spies - 2) * 50;
            }
            timer = Math.max(timer, 50);
            can_sab = true;
            break;
          case "sabotage":
            timer = global.tech["spy"] >= 4 ? 400 : 600;
            if (num_spies >= 2) {
              timer -= (num_spies - 1) * 50;
            }
            timer = Math.max(timer, 50);
            can_sab = true;
            break;
          case "incite":
            if (g >= 3) {
              break;
            }
            timer = global.tech["spy"] >= 4 ? 600 : 900;
            if (num_spies <= 2) {
              timer *= 1.5;
            } else if (num_spies >= 4) {
              timer -= (num_spies - 3) * 100;
            }
            timer = Math.max(timer, 100);
            can_sab = true;
            break;
        }
        if (can_sab) {
          if (global.genes.hasOwnProperty("governor") && global.genes.governor >= 3) {
            timer *= 0.9;
          }
          timer = Math.ceil(timer);
          if (global.race["befuddle"]) {
            timer = Math.round(timer * (1 - traits.befuddle.vars()[0] / 100));
          }
          let fathom = fathomCheck("dryad");
          if (fathom > 0) {
            timer = Math.round(timer * (1 - traits.befuddle.vars(1)[0] / 100 * fathom));
          }
          global.civic.foreign[`gov${g}`].sab = timer;
          global.civic.foreign[`gov${g}`].act = sa;
        }
      }
    }
  }
  function drawEspModal(gov) {
    $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${loc("civics_espionage_actions")}</p>`));
    var body = $('<div id="espModal" class="modalBody max40"></div>');
    $("#modalBox").append(body);
    if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${gov}`].spy >= 1) {
      body.append($(`<button class="button gap" data-esp="influence" @click="influence('${gov}')">${loc(`civics_spy_influence`)}</button>`));
      body.append($(`<button class="button gap" data-esp="sabotage" @click="sabotage('${gov}')">${loc(`civics_spy_sabotage`)}</button>`));
      if (gov < 3) {
        body.append($(`<button class="button gap" data-esp="incite" @click="incite('${gov}')">${loc(`civics_spy_incite`)}</button>`));
      }
      if (gov < 3 && global.civic.foreign[`gov${gov}`].hstl <= 50 && global.civic.foreign[`gov${gov}`].unrest >= 50) {
        body.append($(`<button class="button gap" data-esp="annex" @click="annex('${gov}')">${loc(`civics_spy_annex`)}</button>`));
      }
      if (gov < 3 && global.civic.foreign[`gov${gov}`].spy >= 3) {
        body.append($(`<button class="button gap" data-esp="purchase" @click="purchase('${gov}')">${loc(`civics_spy_purchase`)}</button>`));
      }
    }
    vBind({
      el: "#espModal",
      data: global.civic.foreign[`gov${gov}`],
      methods: {
        influence(g) {
          if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${g}`].spy >= 1) {
            spyAction("influence", g);
            vBind({ el: "#espModal" }, "destroy");
            $(".modal-background").click();
            clearPopper();
          }
        },
        sabotage(g) {
          if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${g}`].spy >= 1) {
            spyAction("sabotage", g);
            vBind({ el: "#espModal" }, "destroy");
            $(".modal-background").click();
            $("#popGov").hide();
            clearPopper();
          }
        },
        incite(g) {
          if (g >= 3) {
            return;
          }
          if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${g}`].spy >= 1) {
            spyAction("incite", g);
            vBind({ el: "#espModal" }, "destroy");
            $(".modal-background").click();
            clearPopper();
          }
        },
        annex(g) {
          if (g >= 3) {
            return;
          }
          if (global.civic.foreign[`gov${gov}`].hstl <= 50 && global.civic.foreign[`gov${gov}`].unrest >= 50 && global.city.morale.current >= 200 + global.civic.foreign[`gov${gov}`].hstl - global.civic.foreign[`gov${gov}`].unrest) {
            if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${g}`].spy >= 1 && global.civic.foreign[`gov${g}`].sab === 0) {
              let timer = global.tech["spy"] >= 4 ? 150 : 300;
              if (global.race["befuddle"]) {
                timer = Math.round(timer * (1 - traits.befuddle.vars()[0] / 100));
              }
              let fathom = fathomCheck("dryad");
              if (fathom > 0) {
                timer = Math.round(timer * (1 - traits.befuddle.vars(1)[0] / 100 * fathom));
              }
              global.civic.foreign[`gov${g}`].sab = timer;
              global.civic.foreign[`gov${g}`].act = "annex";
              vBind({ el: "#espModal" }, "destroy");
              $(".modal-background").click();
              clearPopper();
            }
          }
        },
        purchase(g) {
          if (g >= 3) {
            return;
          }
          let price = govPrice(g);
          if (price <= global.resource.Money.amount) {
            if (global.tech["spy"] && global.tech["spy"] >= 2 && global.civic.foreign[`gov${g}`].spy >= 3 && global.civic.foreign[`gov${g}`].sab === 0) {
              global.resource.Money.amount -= price;
              let timer = global.tech["spy"] >= 4 ? 150 : 300;
              if (global.race["befuddle"]) {
                timer = Math.round(timer * (1 - traits.befuddle.vars()[0] / 100));
              }
              let fathom = fathomCheck("dryad");
              if (fathom > 0) {
                timer = Math.round(timer * (1 - traits.befuddle.vars(1)[0] / 100 * fathom));
              }
              global.civic.foreign[`gov${g}`].sab = timer;
              global.civic.foreign[`gov${g}`].act = "purchase";
              vBind({ el: "#espModal" }, "destroy");
              $(".modal-background").click();
              clearPopper();
            }
          }
        }
      }
    });
    popover(
      "GovLabel",
      function(obj) {
        let esp = $(obj.this).data("esp");
        let desc = "";
        if (esp === "purchase") {
          let price = govPrice(gov).toLocaleString();
          desc = loc(`civics_spy_${esp}_desc`, [govTitle(gov), price]);
        } else if (esp === "annex") {
          if (global.city.morale.current >= 200 + global.civic.foreign[`gov${gov}`].hstl - global.civic.foreign[`gov${gov}`].unrest) {
            desc = loc(`civics_spy_${esp}_desc`, [govTitle(gov)]);
          } else {
            let morale = 200 + global.civic.foreign[`gov${gov}`].hstl - global.civic.foreign[`gov${gov}`].unrest;
            desc = loc(`civics_spy_${esp}_goal`, [govTitle(gov), morale]);
          }
        } else {
          desc = loc(`civics_spy_${esp}_desc`, [govTitle(gov)]);
        }
        let warn = "";
        if (esp === "influence" && global.civic.foreign[`gov${gov}`].hstl === 0 || esp === "sabotage" && global.civic.foreign[`gov${gov}`].spy >= 2 && global.civic.foreign[`gov${gov}`].mil === 50 || esp === "incite" && global.civic.foreign[`gov${gov}`].spy >= 4 && global.civic.foreign[`gov${gov}`].unrest === 100) {
          warn = `<div class="has-text-danger">${loc(`civics_spy_warning`)}</div>`;
        }
        return $(`${warn}<div>${desc}</div>`);
      },
      {
        elm: `#espModal button`,
        self: true,
        classes: `has-background-light has-text-dark`
      }
    );
  }
  function taxCap(min) {
    let extreme = global.tech["currency"] && global.tech.currency >= 5 ? true : false;
    if (min) {
      return (extreme || global.race["terrifying"]) && !global.race["noble"] ? 0 : global.race["noble"] ? traits.noble.vars()[0] : 10;
    } else {
      let cap = 30;
      if (global.race["noble"]) {
        cap = traits.noble.vars()[1];
      } else if (extreme || global.race["terrifying"]) {
        cap += 20;
      }
      if (global.civic.govern.type === "oligarchy") {
        cap += govEffect.oligarchy()[1];
      }
      let aristoVal = govActive("aristocrat", 1);
      if (aristoVal) {
        cap += aristoVal;
      }
      if (global.race["wish"] && global.race["wishStats"]) {
        cap += global.race.wishStats.tax;
      }
      return cap;
    }
  }
  function adjustTax(a, n) {
    switch (a) {
      case "add":
        {
          let inc = n || keyMultiplier();
          let cap = taxCap(false);
          if (global.race["noble"]) {
            global.civic.taxes.tax_rate += inc;
            if (global.civic.taxes.tax_rate > (global.civic.govern.type === "oligarchy" ? traits.noble.vars()[1] + 20 : traits.noble.vars()[1])) {
              global.civic.taxes.tax_rate = global.civic.govern.type === "oligarchy" ? traits.noble.vars()[1] + 20 : traits.noble.vars()[1];
            }
          } else if (global.civic.taxes.tax_rate < cap) {
            global.civic.taxes.tax_rate += inc;
            if (global.civic.taxes.tax_rate > cap) {
              global.civic.taxes.tax_rate = cap;
            }
          }
        }
        break;
      case "sub":
        {
          let dec = n || keyMultiplier();
          let min = taxCap(true);
          if (global.civic.taxes.tax_rate > min) {
            global.civic.taxes.tax_rate -= dec;
            if (global.civic.taxes.tax_rate < min) {
              global.civic.taxes.tax_rate = min;
            }
          }
        }
        break;
    }
  }
  function taxRates(govern2) {
    var tax_rates = $('<div id="tax_rates" v-show="display" class="taxRate"></div>');
    govern2.append(tax_rates);
    var label = $(`<h3 id="taxRateLabel">${loc("civics_tax_rates")}</h3>`);
    tax_rates.append(label);
    var tax_level = $('<span class="current" v-html="$options.filters.tax_level(tax_rate)"></span>');
    var sub = $(`<span role="button" aria-label="decrease taxes" class="sub has-text-success" @click="sub">&laquo;</span>`);
    var add = $(`<span role="button" aria-label="increase taxes" class="add has-text-danger" @click="add">&raquo;</span>`);
    tax_rates.append(sub);
    tax_rates.append(tax_level);
    tax_rates.append(add);
    vBind({
      el: "#tax_rates",
      data: global.civic["taxes"],
      filters: {
        tax_level(rate) {
          let egg = easterEgg(11, 14);
          let trick = trickOrTreat(2, 14, false);
          if (egg.length > 0 && (rate === 0 && !global.race["noble"] || rate === 10 && global.race["noble"])) {
            return egg;
          } else if (rate === 13 && trick.length > 0) {
            return trick;
          } else {
            return `${rate}%`;
          }
        }
      },
      methods: {
        add() {
          adjustTax("add");
        },
        sub() {
          adjustTax("sub");
        }
      }
    });
    popover(
      "taxRateLabel",
      function() {
        return loc("civics_tax_rates_desc");
      },
      {
        classes: `has-background-light has-text-dark`
      }
    );
  }
  function govCivics(f, v) {
    switch (f) {
      case "m_cost":
        return mercCost();
      case "m_buy":
        return hireMerc(1);
      case "s_cost":
        return spyCost(v);
      case "t_spy":
        return trainSpy(v);
      case "adj_tax":
        return adjustTax(v, 1);
      case "tax_cap":
        return taxCap(v);
      case "s_influence":
        return spyAction("influence", v);
      case "s_sabotage":
        return spyAction("sabotage", v);
      case "s_incite":
        return spyAction("incite", v);
    }
  }
  function mercCost() {
    let cost = Math.round(1.24 ** global.civic.garrison.workers * 75) - 50;
    if (cost > 25e3) {
      cost = 25e3;
    }
    if (global.civic.garrison.m_use > 0) {
      cost *= 1.1 ** global.civic.garrison.m_use;
    }
    if (global.race["brute"]) {
      cost *= 1 - traits.brute.vars()[0] / 100;
    }
    let fathom = fathomCheck("orc");
    if (fathom > 0) {
      cost *= 1 - traits.brute.vars(1)[0] / 100 * fathom;
    }
    if (global.race["inflation"]) {
      cost *= 1 + global.race.inflation / 500;
    }
    if (global.race["high_pop"]) {
      cost *= traits.high_pop.vars()[1] / 100;
    }
    return Math.round(cost);
  }
  function hireMerc(num) {
    let hired = 0;
    if (global.tech["mercs"]) {
      let repeats = num || keyMultiplier();
      let canBuy = true;
      while (canBuy && repeats > 0) {
        let cost = mercCost();
        if (global.civic["garrison"].workers < global.civic["garrison"].max && global.resource.Money.amount >= cost) {
          global.resource.Money.amount -= cost;
          global.civic["garrison"].workers++;
          global.civic.garrison.m_use++;
          hired++;
        } else {
          canBuy = false;
        }
        repeats--;
      }
    }
    return hired;
  }
  function buildGarrison(garrison, full) {
    clearElement(garrison);
    if (global.tech["world_control"] && !global.race["truepath"]) {
      garrison.append($(`<div class="header"><h2 class="has-text-warning">${loc("civics_garrison")}</h2> - <span class="has-text-success"><span class="defenseRating">${loc("rating")} {{ g.workers | hell | rating }}</span> - <span class="soldierRating"><span class="has-text-warning">${loc(`civics_garrison_soldier_rating`)}</span> {{ g.workers | single | rating(true) }}</span></div>`));
    } else {
      garrison.append($(`<div class="header"><h2 class="has-text-warning">${loc("civics_garrison")}</h2> - <span class="has-text-success"><span class="defenseRating">${loc("rating")} {{ g.workers | hell | rating }}</span> / <span class="offenseRating">{{ g.raid | rating }}</span></span> - <span class="soldierRating"><span class="has-text-warning">${loc(`civics_garrison_soldier_rating`)}</span> {{ g.workers | single | rating }}</span></div>`));
    }
    var soliders = $(`<div></div>`);
    garrison.append(soliders);
    var barracks = $('<div class="columns is-mobile bunk"></div>');
    soliders.append(barracks);
    var bunks = $('<div class="bunks"></div>');
    barracks.append(bunks);
    let soldier_title = global.tech["world_control"] && !global.race["truepath"] ? loc("civics_garrison_peacekeepers") : loc("civics_garrison_soldiers");
    if (!global.tech["isolation"]) {
      bunks.append($(`<div class="barracks"><span class="soldier">${soldier_title}</span> <span v-html="$options.filters.stationed(g.workers)"></span> / <span>{{ g.max | s_max }}<span></div>`));
      bunks.append($(`<div class="barracks" v-show="g.crew > 0"><span class="crew">${loc("civics_garrison_crew")}</span> <span>{{ g.crew }}</span></div>`));
      bunks.append($(`<div class="barracks"><span class="wounded">${loc("civics_garrison_wounded")}</span> <span v-html="$options.filters.wounded(g.wounded)"></span></div>`));
      barracks.append($(`<div class="hire"><button v-show="g.mercs" class="button first hmerc" @click="hire">${loc("civics_garrison_hire_mercenary")}</button><div>`));
    }
    if (full) {
      let egg8 = "";
      if (global.tech["isolation"]) {
        egg8 = easterEgg(8, 12);
      }
      garrison.append($(`<div class="training"><span>${loc("civics_garrison_training")} - ${loc("arpa_to_complete")} {{ g.rate, g.progress | trainTime }}${egg8}</span> <progress class="progress" :value="g.progress" max="100">{{ g.progress }}%</progress></div>`));
    }
    var campaign = $('<div class="columns is-mobile battle"></div>');
    soliders.append(campaign);
    var wrap = $('<div class="war"></div>');
    campaign.append(wrap);
    if ((!global.tech["world_control"] || global.race["truepath"]) && !global.race["cataclysm"] && !global.tech["isolation"]) {
      var tactics = $(`<div id="${full ? "tactics" : "c_tactics"}" v-show="g.display" class="tactics"><span>${loc("civics_garrison_campaign")}</span></div>`);
      wrap.append(tactics);
      var strategy = $('<span class="current tactic">{{ g.tactic | tactics }}</span>');
      var last = $('<span role="button" aria-label="easier campaign" class="sub" @click="last">&laquo;</span>');
      var next = $('<span role="button" aria-label="harder campaign" class="add" @click="next">&raquo;</span>');
      tactics.append(last);
      tactics.append(strategy);
      tactics.append(next);
      var battalion = $(`<div id="${full ? "battalion" : "c_battalion"}" v-show="g.display" class="tactics"><span>${loc("civics_garrison_battalion")}</span></div>`);
      wrap.append(battalion);
      var armysize = $('<span class="current bat">{{ g.raid }}</span>');
      var alast = $('<span role="button" aria-label="remove soldiers from campaign" class="sub" @click="aLast">&laquo;</span>');
      var anext = $('<span role="button" aria-label="add soldiers to campaign" class="add" @click="aNext">&raquo;</span>');
      battalion.append(alast);
      battalion.append(armysize);
      battalion.append(anext);
      if (full) {
        if (global.race["truepath"] && global.tech["rival"]) {
          campaign.append($(`<div class="launch gov3" v-show="rvis()"><div class="has-text-caution">${govTitle(3)}</div><button class="button campaign" @click="campaign(3)"><span>${loc("civics_garrison_launch_campaign")}</span></button></div>`));
        }
        if (!global.tech["world_control"]) {
          campaign.append($(`<div class="launch gov0"><div class="has-text-caution">${govTitle(0)}</div><button class="button campaign" @click="campaign(0)"><span v-show="!g0.occ && !g0.anx && !g0.buy">${loc("civics_garrison_launch_campaign")}</span><span v-show="g0.occ || g0.anx || g0.buy">${loc("civics_garrison_deoccupy")}</span></button></div>`));
          campaign.append($(`<div class="launch gov1"><div class="has-text-caution">${govTitle(1)}</div><button class="button campaign" @click="campaign(1)"><span v-show="!g1.occ && !g1.anx && !g1.buy">${loc("civics_garrison_launch_campaign")}</span><span v-show="g1.occ || g1.anx || g1.buy">${loc("civics_garrison_deoccupy")}</span></button></div>`));
          campaign.append($(`<div class="launch gov2"><div class="has-text-caution">${govTitle(2)}</div><button class="button campaign" @click="campaign(2)"><span v-show="!g2.occ && !g2.anx && !g2.buy">${loc("civics_garrison_launch_campaign")}</span><span v-show="g2.occ || g2.anx || g2.buy">${loc("civics_garrison_deoccupy")}</span></button></div>`));
        }
      }
    }
    let bindData = {
      g: global.civic.garrison,
      g0: global.civic.foreign.gov0,
      g1: global.civic.foreign.gov1,
      g2: global.civic.foreign.gov2
    };
    if (global.race["truepath"]) {
      bindData["g3"] = global.civic.foreign.gov3;
      bindData["g4"] = global.civic.foreign.gov4;
    }
    vBind({
      el: full ? "#garrison" : "#c_garrison",
      data: bindData,
      methods: {
        hire() {
          let hired = hireMerc();
          if (hired === 1 && !full) {
            let trick = trickOrTreat(8, 14, true);
            if (trick.length > 0) {
              $(`#c_garrison .hire`).append(trick);
            }
          }
        },
        campaign(gov) {
          war_campaign(gov);
        },
        next() {
          if (global.civic.garrison.tactic < 4) {
            global.civic.garrison.tactic++;
          }
        },
        last() {
          if (global.civic.garrison.tactic > 0) {
            global.civic.garrison.tactic--;
          }
        },
        aNext() {
          let inc = keyMultiplier();
          if (global.civic.garrison.raid < garrisonSize()) {
            global.civic.garrison.raid += inc;
            if (global.civic.garrison.raid > garrisonSize()) {
              global.civic.garrison.raid = garrisonSize();
            }
          }
        },
        aLast() {
          let dec = keyMultiplier();
          if (global.civic.garrison.raid > 0) {
            global.civic.garrison.raid -= dec;
            if (global.civic.garrison.raid < 0) {
              global.civic.garrison.raid = 0;
            }
          }
        },
        vis() {
          return global.civic.garrison.display;
        },
        rvis() {
          return global.tech["rival"] && !global.tech["isolation"] ? true : false;
        }
      },
      filters: {
        tactics(val) {
          switch (val) {
            case 0:
              return loc("civics_garrison_tactic_ambush");
            case 1:
              return loc("civics_garrison_tactic_raid");
            case 2:
              return loc("civics_garrison_tactic_pillage");
            case 3:
              return loc("civics_garrison_tactic_assault");
            case 4:
              return loc("civics_garrison_tactic_siege");
          }
        },
        rating(v, scale) {
          if (scale) {
            return +(armyRating(v, "army", 0) / v).toFixed(1);
          }
          return +armyRating(v, "army").toFixed(1);
        },
        hell(v) {
          return garrisonSize();
        },
        single(v) {
          return global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
        },
        stationed(v) {
          let size = garrisonSize();
          let trickNum = global.race["cataclysm"] ? 13 : 31;
          let trick = size === trickNum && !full ? trickOrTreat(2, 14, true) : false;
          return size === trickNum && trick.length > 0 ? trick : size;
        },
        s_max(v) {
          return garrisonSize(true);
        },
        wounded(w) {
          let egg = easterEgg(8, 12);
          if (full && w === 0 && egg.length > 0) {
            return egg;
          }
          return eventActive("fool", 2021) ? garrisonSize() - w : w;
        },
        trainTime(r, p) {
          return r === 0 ? timeFormat(-1) : timeFormat((100 - p) / (r * 4));
        }
      }
    });
    ["tactic", "bat", "soldier", "crew", "wounded", "hmerc", "defenseRating", "offenseRating", "soldierRating"].forEach(function(k) {
      popover(
        full ? `garrison${k}` : `cGarrison${k}`,
        function() {
          return '<span v-html="label()"></span>';
        },
        {
          elm: `${full ? "#garrison" : "#c_garrison"} .${k}`,
          in: function(obj) {
            vBind({
              el: `#${obj.id} > span`,
              data: { test: "val" },
              methods: {
                label() {
                  switch (k) {
                    case "tactic": {
                      switch (global.civic.garrison.tactic) {
                        case 0:
                          return loc("civics_garrison_tactic_ambush_desc");
                        case 1:
                          return loc("civics_garrison_tactic_raid_desc");
                        case 2:
                          return loc("civics_garrison_tactic_pillage_desc");
                        case 3:
                          return loc("civics_garrison_tactic_assault_desc");
                        case 4:
                          return loc("civics_garrison_tactic_siege_desc", [jobScale(global.civic.govern.type === "federation" ? 15 : 20)]);
                      }
                    }
                    case "bat":
                      return loc("civics_garrison_army_label");
                    case "soldier":
                      return describeSoldier();
                    case "crew":
                      return loc("civics_garrison_crew_desc");
                    case "wounded":
                      return loc("civics_garrison_wounded_desc");
                    case "hmerc": {
                      let cost = Math.round(mercCost()).toLocaleString();
                      return loc("civics_garrison_hire_mercenary_cost", [cost]);
                    }
                    case "defenseRating":
                      return loc("civics_garrison_defensive_rate");
                    case "offenseRating":
                      return loc("civics_garrison_offensive_rate");
                    case "soldierRating":
                      return soldierBreakdown("army");
                  }
                }
              }
            });
          },
          out: function(obj) {
            vBind({ el: obj.id }, "destroy");
          }
        }
      );
    });
    if (full) {
      let end = global.race["truepath"] ? 4 : 3;
      for (let i = 0; i < end; i++) {
        popover(
          `garrison${i}`,
          function() {
            return "<span>{{ label() }}</span>";
          },
          {
            elm: `#garrison .gov${i} button`,
            in: function(obj) {
              vBind({
                el: `#${obj.id} > span`,
                data: { test: "val" },
                methods: {
                  label() {
                    return battleAssessment(i);
                  }
                }
              });
            },
            out: function(obj) {
              vBind({ el: obj.id }, "destroy");
            }
          }
        );
      }
      if (global.race["truepath"] && !global.tech["isolation"]) {
        popover(
          `garRivaldesc2`,
          function() {
            return loc(`civics_gov_tp_rival`, [govTitle(3), races[global.race.species].home]);
          },
          {
            elm: `#garrison .gov3 > div`
          }
        );
      }
    }
  }
  function soldierBreakdown(type) {
    let scale = global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
    let data = armyRating(scale, type, 0, true);
    let desc = `<div class="soldierEvaluation"><div class="head">${loc(`civics_garrison_soldier_rating`)}</div>`;
    data.forEach(function(d) {
      if (d.v > 0 || d.v < 0) {
        if (d.k === "base") {
          desc += `<div><span>${loc(d.k)}</span> <span class="has-text-success">${d.v}</span></div>`;
        } else {
          let val = typeof d.v === "string" ? parseInt(d.v) : +(d.v * 100).toFixed(1);
          desc += `<div><span>${loc(d.k)}</span> <span class="has-text-${d.v >= 0 ? "success" : "danger"}">${d.v < 0 ? "" : "+"}${val}${typeof d.v === "string" ? "" : "%"}</span></div>`;
        }
      }
    });
    desc += `</div>`;
    return desc;
  }
  function describeSoldier() {
    let rating = armyRating(garrisonSize(), "hunting");
    let loot_args = [];
    if ((!global.race["herbivore"] || global.race["carnivore"]) && !global.race["artifical"]) {
      let food = +(rating / 3).toFixed(2);
      loot_args.push(food, global.resource.Food.name);
    }
    let fur = +(rating / 10).toFixed(2);
    loot_args.push(fur, global.resource.Furs.name);
    if (global.race["evil"] && !global.race["kindling_kindred"] && !global.race["smoldering"]) {
      let bones = +(rating / (global.race["soul_eater"] ? 3 : 5)).toFixed(2);
      loot_args.push(bones, global.resource.Lumber.name);
    }
    let loot_string = "civics_garrison_soldier_loot" + loot_args.length / 2;
    let soldiers_desc = global.race["evil"] && global.race["soul_eater"] ? "civics_garrison_soldier_evil_desc" : "civics_garrison_soldier_desc";
    return `${loc(soldiers_desc)} ${loc(loot_string, loot_args)}`;
  }
  function battleAssessment(gov) {
    if (global.civic.foreign[`gov${gov}`].occ) {
      return loc("civics_garrison_deoccupy_desc");
    } else if (global.civic.foreign[`gov${gov}`].buy || global.civic.foreign[`gov${gov}`].anx) {
      return loc("civics_garrison_secede_desc");
    } else if (global.civic.garrison.tactic <= 1 && global.civic.foreign[`gov${gov}`].spy < 1 || global.civic.garrison.tactic >= 2 && global.civic.garrison.tactic <= 3 && global.civic.foreign[`gov${gov}`].spy < 2 || global.civic.garrison.tactic === 4 && global.civic.foreign[`gov${gov}`].spy < 3) {
      return loc("civics_garrison_no_spy");
    }
    let army = armyRating(global.civic.garrison.raid, "army");
    let enemy = 0;
    switch (global.civic.garrison.tactic) {
      case 0:
        enemy = 5;
        break;
      case 1:
        enemy = 27.5;
        break;
      case 2:
        enemy = 62.5;
        break;
      case 3:
        enemy = 125;
        break;
      case 4:
        enemy = 300;
        break;
    }
    enemy *= global.civic.foreign[`gov${gov}`].mil / 100;
    if (global.race["banana"]) {
      enemy *= 2;
    }
    if (global.city.biome === "swamp") {
      enemy *= biomes.swamp.vars()[0];
    }
    if (eventActive("fool", 2021)) {
      enemy /= 1.25;
    }
    if (army < enemy) {
      return loc("civics_garrison_disadvantage", [+((1 - army / enemy) * 100).toFixed(1)]);
    } else {
      return loc("civics_garrison_advantage", [+((1 - enemy / army) * 100).toFixed(1)]);
    }
  }
  function war_campaign(gov) {
    if (global.civic.foreign[`gov${gov}`].occ) {
      global.civic.foreign[`gov${gov}`].occ = false;
      global.civic.garrison.max += jobScale(global.civic.govern.type === "federation" ? 15 : 20);
      global.civic.garrison.workers += jobScale(global.civic.govern.type === "federation" ? 15 : 20);
      return;
    }
    if (global.civic.foreign[`gov${gov}`].buy || global.civic.foreign[`gov${gov}`].anx) {
      global.civic.foreign[`gov${gov}`].buy = false;
      global.civic.foreign[`gov${gov}`].anx = false;
      return;
    }
    if (global.civic.garrison.raid > garrisonSize()) {
      global.civic.garrison.raid = garrisonSize();
    } else if (global.civic.garrison.raid < 0) {
      global.civic.garrison.raid = 0;
    }
    if (global.civic.garrison.raid === 0) {
      messageQueue(loc("civics_garrison_campaign_no_soldier"), "warning", false, ["combat"]);
      return;
    }
    global.stats.attacks++;
    let highLuck = global.race["claws"] ? 20 : 16;
    let lowLuck = global.race["puny"] ? 3 : 5;
    let luck = Math.floor(seededRandom(lowLuck, highLuck, true)) / 10;
    let army = armyRating(global.civic.garrison.raid, "army") * luck;
    let enemy = 0;
    switch (global.civic.garrison.tactic) {
      case 0:
        enemy = seededRandom(0, 10, true);
        global.civic.foreign[`gov${gov}`].hstl += Math.floor(seededRandom(0, 2, true));
        break;
      case 1:
        enemy = seededRandom(5, 50, true);
        global.civic.foreign[`gov${gov}`].hstl += Math.floor(seededRandom(0, 3, true));
        break;
      case 2:
        enemy = seededRandom(25, 100, true);
        global.civic.foreign[`gov${gov}`].hstl += Math.floor(seededRandom(1, 5, true));
        break;
      case 3:
        enemy = seededRandom(50, 200, true);
        global.civic.foreign[`gov${gov}`].hstl += Math.floor(seededRandom(4, 12, true));
        break;
      case 4:
        enemy = seededRandom(100, 500, true);
        global.civic.foreign[`gov${gov}`].hstl += Math.floor(seededRandom(10, 25, true));
        break;
    }
    enemy = Math.floor(enemy * global.civic.foreign[`gov${gov}`].mil / 100);
    if (global.race["banana"]) {
      enemy *= 2;
    }
    if (global.city.biome === "swamp") {
      enemy *= biomes.swamp.vars()[0];
    }
    if (global.race["mistrustful"]) {
      global.civic.foreign[`gov${gov}`].hstl += traits.mistrustful.vars()[0];
    }
    if (global.civic.foreign[`gov${gov}`].hstl > 100) {
      global.civic.foreign[`gov${gov}`].hstl = 100;
    }
    if (global.race["blood_thirst"]) {
      global.race["blood_thirst_count"] += Math.ceil(enemy / 5);
      if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
        global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
      }
    }
    let wounded = 0;
    if (global.civic.garrison.raid > global.civic.garrison.workers - global.civic.garrison.crew - global.civic.garrison.wounded) {
      wounded = global.civic.garrison.raid - (global.civic.garrison.workers - global.civic.garrison.crew - global.civic.garrison.wounded);
    }
    global.civic.garrison.fatigue++;
    if (army > enemy) {
      let deathCap = Math.floor(global.civic.garrison.raid / (5 - global.civic.garrison.tactic));
      deathCap += wounded;
      if (global.city.ptrait.includes("rage")) {
        deathCap += planetTraits.rage.vars()[2];
      }
      if (deathCap < 1) {
        deathCap = 1;
      }
      if (deathCap > looters()) {
        deathCap = looters();
      }
      let death = Math.floor(seededRandom(0, deathCap, true));
      if (global.race["frail"]) {
        death += traits.frail.vars()[0];
      }
      let armor = armorCalc(death);
      if (global.civic.garrison.raid > wounded) {
        death -= armor;
      }
      if (death < 0) {
        death = 0;
      }
      if (death > global.civic.garrison.raid) {
        death = global.civic.garrison.raid;
      }
      if (global.race["instinct"]) {
        let reduction = Math.floor(death * (traits.instinct.vars()[1] / 100));
        death -= reduction;
        wounded += reduction;
      }
      soldierDeath(death);
      global.civic.garrison.protest += death;
      if (death > wounded) {
        global.civic.garrison.wounded -= wounded;
        wounded = 0;
      } else {
        global.civic.garrison.wounded -= death;
        wounded -= death;
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p) {
        global.race.ocularPowerConfig.ds += Math.round(enemy * traits.ocular_power.vars()[1]);
      }
      global.civic.garrison.wounded += Math.floor(seededRandom(wounded, global.civic.garrison.raid - death, true));
      let gains = {
        Money: 0,
        Food: 0,
        Lumber: 0,
        Stone: 0,
        Copper: 0,
        Iron: 0,
        Aluminium: 0,
        Coal: 0,
        Cement: 0,
        Steel: 0,
        Titanium: 0,
        Crystal: 0,
        Chrysotile: 0,
        Furs: 0,
        Iridium: 0,
        Alloy: 0,
        Polymer: 0,
        Oil: 0
      };
      let basic = gov === 3 && global.race["truepath"] ? ["Food", "Lumber", "Stone", "Copper", "Iron"] : ["Food", "Lumber", "Stone"];
      let common = gov === 3 && global.race["truepath"] ? ["Aluminium", "Coal", "Cement", "Steel", "Furs"] : ["Copper", "Iron", "Aluminium", "Coal"];
      let rare = gov === 3 && global.race["truepath"] ? ["Titanium", "Oil", "Iridium", "Alloy", "Polymer"] : ["Cement", "Steel"];
      if (global.race["artifical"] || global.race["fasting"]) {
        basic.shift();
      }
      if (global.race["smoldering"]) {
        basic.push("Chrysotile");
      }
      if (global.race["terrifying"] && gov !== 3) {
        rare.push("Titanium");
      }
      if (global.tech["magic"]) {
        rare.push("Crystal");
      }
      let looted = ["Money"];
      switch (global.civic.garrison.tactic) {
        case 0:
          {
            let extra = ["Money"].concat(basic, common);
            looted.push(basic[Math.floor(seededRandom(0, basic.length, true))]);
            looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            if (global.race["beast_of_burden"]) {
              looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            }
            if (global.resource.Steel.amount < 25 && global.tech["smelting"] && global.tech.smelting === 1 && Math.floor(seededRandom(0, 20, true)) === 0) {
              looted.push("Steel");
            }
          }
          break;
        case 1:
          {
            let extra = ["Money"].concat(basic, common, rare);
            looted.push(basic[Math.floor(seededRandom(0, basic.length, true))]);
            looted.push(common[Math.floor(seededRandom(0, common.length, true))]);
            looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            if (global.race["beast_of_burden"]) {
              looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            }
          }
          break;
        case 2:
          {
            let extra = ["Money"].concat(basic, common, rare);
            let extraB = common.concat(rare);
            looted.push(basic[Math.floor(seededRandom(0, basic.length, true))]);
            looted.push(common[Math.floor(seededRandom(0, common.length, true))]);
            looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            looted.push(extraB[Math.floor(seededRandom(0, extraB.length, true))]);
            if (global.race["beast_of_burden"]) {
              looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            }
          }
          break;
        case 3:
          {
            let extra = ["Money"].concat(basic, common, rare);
            looted.push(basic[Math.floor(seededRandom(0, basic.length, true))]);
            looted.push(common[Math.floor(seededRandom(0, common.length, true))]);
            looted.push(rare[Math.floor(seededRandom(0, rare.length, true))]);
            looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            if (global.race["beast_of_burden"]) {
              looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            }
          }
          break;
        case 4:
          {
            let extra = ["Money"].concat(basic, common, rare);
            looted.push(basic[Math.floor(seededRandom(0, basic.length, true))]);
            looted.push(common[Math.floor(seededRandom(0, common.length, true))]);
            looted.push(rare[Math.floor(seededRandom(0, rare.length, true))]);
            looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            if (global.race["beast_of_burden"]) {
              looted.push(extra[Math.floor(seededRandom(0, extra.length, true))]);
            }
          }
          break;
      }
      let titanium_low = global.race["terrifying"] && gov !== 3 ? traits.terrifying.vars()[0] : 12;
      let titanium_high = global.race["terrifying"] && gov !== 3 ? traits.terrifying.vars()[1] : 32;
      looted.forEach(function(goods) {
        switch (goods) {
          case "Money":
            gains[goods] += Math.floor(seededRandom(100, 375, true));
            break;
          case "Food":
            gains[goods] += Math.floor(seededRandom(40, 175, true));
            break;
          case "Lumber":
          case "Stone":
            gains[goods] += Math.floor(seededRandom(50, 250, true));
            break;
          case "Copper":
          case "Iron":
          case "Aluminium":
            gains[goods] += Math.floor(seededRandom(35, 125, true));
            break;
          case "Coal":
          case "Cement":
            gains[goods] += Math.floor(seededRandom(25, 100, true));
            break;
          case "Steel":
          case "Chrysotile":
            gains[goods] += Math.floor(seededRandom(20, 65, true));
            break;
          case "Titanium":
            gains[goods] += Math.floor(seededRandom(titanium_low, titanium_high, true));
            break;
          case "Crystal":
            gains[goods] += Math.floor(seededRandom(1, 5, true));
            break;
          case "Oil":
            gains[goods] += Math.floor(seededRandom(20, 50, true));
            break;
          case "Iridium":
            gains[goods] += Math.floor(seededRandom(2, 30, true));
            break;
          case "Alloy":
          case "Polymer":
            gains[goods] += Math.floor(seededRandom(5, 38, true));
            break;
        }
      });
      let loot = loc("civics_garrison_gained");
      if (global.resource.Money.display && gains.Money > 0) {
        gains.Money = lootModify(gains.Money, gov);
        loot = loot + loc("civics_garrison_quant_money", [gains.Money]);
        modRes("Money", gains.Money, true);
      }
      let payout = basic.concat(common, rare);
      payout.forEach(function(res) {
        if (gains[res] > 0 && (global.resource[res].display || res === "Steel" || res === "Titanium")) {
          gains[res] = lootModify(gains[res], gov);
          loot = loot + loc("civics_garrison_quant_res", [gains[res], global.resource[res].name]);
          modRes(res, gains[res], true);
          if (res === "Steel" || res === "Titanium") {
            global.resource[res].display = true;
          }
        }
      });
      loot = loot.slice(0, -2);
      loot = loot + ".";
      messageQueue(loot, "warning", false, ["combat"]);
      let revive = 0;
      if (global.race["revive"]) {
        switch (global.city.calendar.temp) {
          case 0:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[0]), true));
            break;
          case 1:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[1]), true));
            break;
          case 2:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[2]), true));
            break;
        }
        global.civic.garrison.workers += revive;
      }
      if (revive > 0) {
        messageQueue(loc("civics_garrison_victorious_revive", [death, revive]), "success", false, ["combat"]);
      } else {
        messageQueue(loc("civics_garrison_victorious", [death]), "success", false, ["combat"]);
      }
      if (global.race["slaver"] && global.city["slave_pen"]) {
        let max = global.city.slave_pen.count * 4;
        if (max > global.resource.Slave.amount) {
          let slaves = Math.floor(seededRandom(0, global.civic.garrison.tactic + 2, true));
          if (slaves + global.resource.Slave.amount > max) {
            slaves = max - global.resource.Slave.amount;
          }
          if (slaves > 0) {
            global.resource.Slave.amount += slaves;
            messageQueue(loc("civics_garrison_capture", [slaves]), "success", false, ["combat"]);
          }
        }
      }
      if (global.race["infectious"]) {
        let infected = 0;
        switch (global.civic.garrison.tactic) {
          case 0:
            infected = Math.floor(seededRandom(0, traits.infectious.vars()[0], true));
            break;
          case 1:
            infected = Math.floor(seededRandom(0, traits.infectious.vars()[1], true));
            break;
          case 2:
            infected = Math.floor(seededRandom(0, traits.infectious.vars()[2], true));
            break;
          case 3:
            infected = Math.floor(seededRandom(0, traits.infectious.vars()[3], true));
            break;
          case 4:
            infected = Math.floor(seededRandom(0, traits.infectious.vars()[4], true));
            break;
        }
        let zombies = global.resource[global.race.species].amount + infected;
        if (zombies > global.resource[global.race.species].max) {
          infected = global.resource[global.race.species].max - global.resource[global.race.species].amount;
        }
        if (infected > 0) {
          global.resource[global.race.species].amount += infected;
          global.civic[global.civic.d_job].workers += infected;
          if (infected === 1) {
            messageQueue(loc("civics_garrison_soldier_infected"), "special", false, ["combat"]);
          } else {
            messageQueue(loc("civics_garrison_soldiers_infected", [infected]), "special", false, ["combat"]);
          }
        }
      }
      let occCost = jobScale(global.civic.govern.type === "federation" ? 15 : 20);
      if (gov <= 2 && global.civic.garrison.tactic === 4 && global.civic.garrison.workers >= occCost) {
        let drawTechs = !global.tech["gov_fed"] && !checkControlling();
        global.civic.garrison.max -= occCost;
        global.civic.garrison.workers -= occCost;
        global.civic.foreign[`gov${gov}`].occ = true;
        global.civic.foreign[`gov${gov}`].sab = 0;
        global.civic.foreign[`gov${gov}`].act = "none";
        if (drawTechs) {
          drawTech();
        }
        if (global.race["banana"]) {
          let affix = universeAffix();
          global.stats.banana.b1[affix] = true;
          if (affix !== "m" && affix !== "l") {
            global.stats.banana.b1.l = true;
          }
        }
      }
    } else {
      let deathCap = global.civic.garrison.raid;
      deathCap += wounded;
      if (global.civic.garrison.tactic === 0) {
        deathCap = Math.floor(deathCap / 2);
      }
      if (global.city.ptrait.includes("rage")) {
        deathCap += planetTraits.rage.vars()[2];
      }
      if (deathCap < 1) {
        deathCap = 1;
      }
      if (deathCap > looters()) {
        deathCap = looters();
      }
      let death = Math.floor(seededRandom(1, deathCap, true));
      if (global.race["frail"]) {
        death += global.civic.garrison.tactic + traits.frail.vars()[1];
        ;
      }
      let armor = armorCalc(death);
      if (global.civic.garrison.raid > wounded) {
        death -= armor;
      }
      if (global.race["instinct"]) {
        let reduction = Math.floor(death * (traits.instinct.vars()[1] / 100));
        death -= reduction;
        wounded += reduction;
      }
      if (death < 1) {
        death = 1;
      }
      if (death > global.civic.garrison.raid) {
        death = global.civic.garrison.raid;
      }
      soldierDeath(death);
      global.civic.garrison.protest += death;
      if (death > wounded) {
        global.civic.garrison.wounded -= wounded;
        wounded = 0;
      } else {
        global.civic.garrison.wounded -= death;
        wounded -= death;
      }
      global.civic.garrison.wounded += 1 + Math.floor(seededRandom(wounded, global.civic.garrison.raid - death, true));
      let revive = 0;
      if (global.race["revive"]) {
        switch (global.city.calendar.temp) {
          case 0:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[3]), true));
            break;
          case 1:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[4]), true));
            break;
          case 2:
            revive = Math.floor(seededRandom(0, Math.floor(death / traits.revive.vars()[5]), true));
            break;
        }
        global.civic.garrison.workers += revive;
      }
      if (revive > 0) {
        messageQueue(loc("civics_garrison_defeat_revive", [death, revive]), "danger", false, ["combat"]);
      } else {
        messageQueue(loc("civics_garrison_defeat", [death]), "danger", false, ["combat"]);
      }
    }
    if (global.civic.garrison.wounded > global.civic.garrison.workers - global.civic.garrison.crew) {
      global.civic.garrison.wounded = global.civic.garrison.workers - global.civic.garrison.crew;
    } else if (global.civic.garrison.wounded < 0) {
      global.civic.garrison.wounded = 0;
    }
  }
  function armorCalc(dead) {
    let armor = 0;
    if (global.race["scales"]) {
      armor += traits.scales.vars()[0];
    }
    if (global.tech["armor"]) {
      armor += global.tech["armor"];
    }
    if (global.race["high_pop"]) {
      armor += Math.floor(seededRandom(0, armor * traits.high_pop.vars()[0], true));
    }
    if (global.race["armored"]) {
      let armored = traits.armored.vars()[0] / 100;
      armor += Math.floor(dead * armored);
    }
    let fathom = fathomCheck("tortoisan");
    if (fathom > 0) {
      let armored = traits.armored.vars(1)[0] / 100 * fathom;
      armor += Math.floor(dead * armored);
    }
    return armor;
  }
  function looters() {
    let cap = 0;
    let looting = global.civic.garrison.raid;
    switch (global.civic.garrison.tactic) {
      case 0:
        cap = 5;
        break;
      case 1:
        cap = 10;
        break;
      case 2:
        cap = 25;
        break;
      case 3:
        cap = 50;
        break;
      case 4:
        cap = 999;
        break;
    }
    if (global.race["high_pop"]) {
      cap = jobScale(cap);
    }
    if (looting > cap) {
      looting = cap;
    }
    return looting;
  }
  function lootModify(val, gov) {
    let looting = looters();
    if (global.race["high_pop"]) {
      looting = looting / jobScale(1);
    }
    let loot = val * Math.log(looting + 1);
    if (global.race["invertebrate"]) {
      loot *= 1 - traits.invertebrate.vars()[0] / 100;
    }
    if (global.race.universe === "evil") {
      loot *= darkEffect("evil");
    }
    if (global.race["gravity_well"]) {
      loot *= 1 - 0.75 * darkEffect("heavy");
    }
    if (global.race["parasite"]) {
      loot *= 1 - traits.parasite.vars()[0] / 100;
    }
    switch (global.civic.garrison.tactic) {
      case 1:
        loot *= 4;
        break;
      case 2:
        loot *= 30;
        break;
      case 3:
        loot *= 100;
        break;
      case 4:
        loot *= 400;
        break;
    }
    if (global.race["banana"]) {
      loot *= 0.5;
    }
    if (global.city.biome === "swamp") {
      loot *= biomes.swamp.vars()[1];
    }
    return Math.floor(loot * global.civic.foreign[`gov${gov}`].eco / 100);
  }
  function weaponTechModifer() {
    let weapon_tech = global.tech["military"] ? global.tech.military >= 5 ? global.tech.military - 1 : global.tech.military : 1;
    if (global.tech["military"] && global.tech.military > 1) {
      weapon_tech -= global.tech.military >= 11 ? 2 : 1;
      if (global.race["sniper"]) {
        weapon_tech *= 1 + traits.sniper.vars()[0] / 100 * weapon_tech;
      }
      let fathom = fathomCheck("centaur");
      if (fathom > 0) {
        weapon_tech *= 1 + traits.sniper.vars(1)[0] / 100 * weapon_tech * fathom;
      }
      weapon_tech += global.tech.military >= 11 ? 2 : 1;
    }
    return weapon_tech;
  }
  function soldierDeath(v) {
    let killed = v;
    if (killed > global.civic.garrison.workers) {
      killed = global.civic.garrison.workers;
    }
    global.civic.garrison.workers -= killed;
    global.stats.died += killed;
    blubberFill(killed);
  }
  function armyRating(val, type, wound, analysis) {
    if (!global.civic.hasOwnProperty("garrison")) {
      return 1;
    }
    let data = [];
    let wounded = 0;
    if (typeof wound === "number") {
      wounded = wound;
    } else if (val > global.civic.garrison.workers - global.civic.garrison.wounded) {
      wounded = val - (global.civic.garrison.workers - global.civic.garrison.wounded);
    }
    let weapon_tech = weaponTechModifer();
    let rhinoFathom = fathomCheck("rhinotaur");
    let adjusted_val = val - wounded / 2;
    if (global.race["rage"] || rhinoFathom > 0) {
      let rageVal = global.race["rage"] ? wounded * traits.rage.vars()[1] / 100 : 0;
      let fathomVal = rhinoFathom > 0 ? wounded * traits.rage.vars(1)[1] / 100 * rhinoFathom : 0;
      adjusted_val = val + rageVal + fathomVal;
    }
    data.push({ k: "base", v: adjusted_val });
    if (global.tech.military) {
      data.push({ k: "civics_garrison_weaponry", v: weapon_tech - 1 });
    }
    let army = global.tech["military"] ? adjusted_val * weapon_tech : adjusted_val;
    if (type === "army" || type === "hellArmy" || type === "Troops") {
      if (global.race["tactical"]) {
        let tactical = traits.tactical.vars()[0] * global.race["tactical"] / 100;
        army *= 1 + tactical;
        data.push({ k: "trait_tactical_name", v: tactical });
      }
      if (global.tech["fanaticism"] && global.tech["fanaticism"] >= 4) {
        let zealotry = templeCount() * 0.01;
        army *= 1 + zealotry;
        data.push({ k: "tech_zealotry", v: zealotry });
      }
      if (global.race["rage"]) {
        let rage = traits.rage.vars()[0] / 100 * (global.civic.garrison.wounded || 0);
        army *= 1 + rage;
        data.push({ k: "trait_rage_name", v: rage });
      }
      if (rhinoFathom > 0) {
        let rage = traits.rage.vars(1)[0] / 100 * rhinoFathom * (global.civic.garrison.wounded || 0);
        army *= 1 + rage;
        data.push({ k: "trait_rage_thrall", v: rage });
      }
      if (global.race["puny"]) {
        let puny = traits.puny.vars()[0] / 100;
        army *= 1 - puny;
        data.push({ k: "trait_puny_name", v: -puny });
      }
      if (global.race["claws"]) {
        let claws = traits.claws.vars()[0] / 100;
        army *= 1 + claws;
        data.push({ k: "trait_claws_name", v: claws });
      }
      let scorpidFathom = fathomCheck("scorpid");
      if (scorpidFathom > 0) {
        let claws = traits.claws.vars(1)[0] / 100 * scorpidFathom;
        army *= 1 + claws;
        data.push({ k: "trait_claws_thrall", v: claws });
      }
      if (global.race["chameleon"]) {
        let cham = traits.chameleon.vars()[0] / 100;
        army *= 1 + cham;
        data.push({ k: "trait_chameleon_name", v: cham });
      }
      if (global.race["cautious"] && global.city.calendar.weather === 0) {
        let cautious = traits.cautious.vars()[0] / 100;
        army *= 1 - cautious;
        data.push({ k: "trait_cautious_name", v: -cautious });
      }
      if (global.race["apex_predator"]) {
        let apex = traits.apex_predator.vars()[0] / 100;
        army *= 1 + apex;
        data.push({ k: "trait_apex_predator_name", v: apex });
      }
      let sharkinFathom = fathomCheck("sharkin");
      if (sharkinFathom > 0) {
        let apex = traits.apex_predator.vars(1)[0] / 100 * sharkinFathom;
        army *= 1 + apex;
        data.push({ k: "trait_apex_predator_thrall", v: apex });
      }
      if (global.race["swift"]) {
        let swift = traits.swift.vars()[0] / 100;
        army *= 1 + swift;
        data.push({ k: "trait_swift_name", v: swift });
      }
      if (global.race["iron_wood"]) {
        let iron_wood = traits.iron_wood.vars()[0] / 100;
        army *= 1 + iron_wood;
        data.push({ k: "trait_iron_wood_name", v: iron_wood });
      }
      if (global.race["fiery"]) {
        let fiery = traits.fiery.vars()[0] / 100;
        army *= 1 + fiery;
        data.push({ k: "trait_fiery_name", v: fiery });
      }
      let balorgFathom = fathomCheck("balorg");
      if (balorgFathom > 0) {
        let fiery = traits.fiery.vars(1)[0] / 100 * balorgFathom;
        army *= 1 + fiery;
        data.push({ k: "trait_fiery_thrall", v: fiery });
      }
      if (global.race["sticky"]) {
        let sticky = traits.sticky.vars()[1] / 100;
        army *= 1 + sticky;
        data.push({ k: "trait_sticky_name", v: sticky });
      }
      let pingFathom = fathomCheck("pinguicula");
      if (pingFathom > 0) {
        let sticky = traits.sticky.vars(1)[1] / 100 * pingFathom;
        army *= 1 + sticky;
        data.push({ k: "trait_sticky_thrall", v: sticky });
      }
      if (global.race["pathetic"]) {
        let pathetic = traits.pathetic.vars()[0] / 100;
        army *= 1 - pathetic;
        data.push({ k: "trait_pathetic_name", v: -pathetic });
      }
      if (global.race["holy"] && type === "hellArmy") {
        let holy = traits.holy.vars()[0] / 100;
        army *= 1 + holy;
        data.push({ k: "trait_holy_name", v: holy });
      }
      let unicornFathom = fathomCheck("unicorn");
      if (unicornFathom > 0 && type === "hellArmy") {
        let holy = traits.holy.vars(1)[0] / 100 * unicornFathom;
        army *= 1 + holy;
        data.push({ k: "trait_holy_thrall", v: holy });
      }
      if (global.race["banana"] && type === "hellArmy") {
        army *= 0.8;
        data.push({ k: "banana", v: -20 });
      }
      if (astrologySign() === "aries") {
        let astro = astroVal2("aries")[0] / 100;
        army *= 1 + astro;
        data.push({ k: "sign_aries", v: astro });
      }
      let tacVal = govActive("tactician", 0);
      if (tacVal) {
        let tac = tacVal / 100;
        army *= 1 + tac;
        data.push({ k: "gov_trait_tactician", v: tac });
      }
      if (global.city.ptrait.includes("rage")) {
        let rage = planetTraits.rage.vars()[0];
        army *= rage;
        data.push({ k: "planet_rage_bd", v: rage - 1 });
      }
      if (global.race["elemental"]) {
        let elemental = traits.elemental.vars()[5] / 100;
        army *= 1 + elemental;
        data.push({ k: "trait_elemental_name", v: elemental });
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.d) {
        let attack = 50 * (traits.ocular_power.vars()[1] / 100);
        let ocular = attack / 100;
        army *= 1 + ocular;
        data.push({ k: "trait_ocular_power_name", v: ocular });
      }
      if (global.tech["psychic"] && global.race["psychicPowers"] && global.race.psychicPowers.hasOwnProperty("assaultTime")) {
        let boost = 0;
        if (global.race.psychicPowers.assaultTime > 0) {
          boost += traits.psychic.vars()[3] / 100;
        }
        if (global.tech.psychic >= 4 && global.race.psychicPowers["channel"]) {
          let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
          boost += +(traits.psychic.vars()[3] / 5e4 * rank * global.race.psychicPowers.channel.assault).toFixed(3);
        }
        army *= 1 + boost;
        data.push({ k: "tech_psychic_attack", v: boost });
      }
    }
    if (type === "hunting") {
      if (global.race["unfathomable"]) {
        army *= 0.66;
        data.push({ k: "trait_unfathomable_name", v: -34 });
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.w) {
        let hunt = 60 * (traits.ocular_power.vars()[1] / 100);
        let ocular = hunt / 100;
        army *= 1 + ocular;
        data.push({ k: "trait_ocular_power_name", v: ocular });
      }
    }
    if (global.race["tusk"]) {
      let bonus = traits.tusk.vars()[1] / 100;
      if (type === "hellArmy") {
        bonus /= 2;
      }
      army *= 1 + bonus;
      data.push({ k: "trait_tusk_name", v: bonus });
    }
    if (global.race["grenadier"]) {
      let grenadier = traits.grenadier.vars()[0] / 100;
      if (type === "hellArmy" && global.race["warlord"]) {
        grenadier *= 0.4;
      }
      army *= 1 + grenadier;
      data.push({ k: "trait_grenadier_name", v: grenadier });
    }
    if (global.race["rejuvenated"]) {
      army *= 1.05;
      data.push({ k: "rejuvenated", v: 0.05 });
    }
    if (global.civic.govern.type === "autocracy") {
      let auto = govEffect.autocracy()[1] / 100;
      army *= 1 + auto;
      data.push({ k: "govern_autocracy", v: auto });
    }
    if (global.race.universe === "evil" && global.resource.Authority.display) {
      if (global.resource.Authority.amount > 100) {
        let boost = (global.resource.Authority.amount - 100) / global.resource.Authority.amount * 0.75;
        boost *= darkEffect("evil", true);
        army *= 1 + boost;
        data.push({ k: "resource_Authority_name", v: boost });
      } else {
        let auth = global.resource.Authority.amount / 100;
        army *= auth;
        data.push({ k: "resource_Authority_name", v: -(1 - auth) });
      }
    }
    army = Math.floor(army);
    let racial = racialTrait(val, type);
    army *= racial;
    if (racial > 1) {
      data.push({ k: "misc", v: racial - 1 });
    } else if (racial < 1) {
      data.push({ k: "misc", v: -(1 - racial) });
    }
    if ((type === "army" || type === "hellArmy" || type === "Troops") && global.race["parasite"]) {
      if (val === 1) {
        army += 2;
        data.push({ k: "trait_parasite_name", v: "2" });
      } else if (val > 1) {
        army += 4;
        data.push({ k: "trait_parasite_name", v: "4" });
      }
    }
    if (analysis) {
      return data;
    }
    if (army <= 0 && val > 0) {
      army = 0.01;
    }
    return army;
  }
  function garrisonSize(max, args = {}) {
    if (!global.civic.garrison) {
      return 0;
    }
    let type = max ? "max" : "workers";
    let fortress = global.portal["fortress"] ? global.portal.fortress.garrison : 0;
    let fob = global.space["fob"] && !args["nofob"] ? global.space.fob.troops : 0;
    let pillbox = global.eden["pillbox"] && !args["nopill"] ? global.eden.pillbox.staffed : 0;
    let troops = global.civic.garrison[type] - global.civic.garrison.crew - fortress - fob - pillbox;
    if (global.race["warlord"] && p_on["soul_forge"] && !args["no_forge"]) {
      let forge = soulForgeSoldiers();
      if (troops >= forge) {
        troops -= forge;
      }
    }
    return troops;
  }
  function defineMad() {
    if (global.race["sludge"] || global.race["ultra_sludge"]) {
      return false;
    }
    if ($(`#mad`).length === 0) {
      let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
      var mad_command = $('<div id="mad" v-show="display" class="tile is-child"></div>');
      $("#military").append(mad_command);
      var mad = $('<div class="mad"></div>');
      mad_command.append(mad);
      mad.append($(`<div class="warn">${loc("civics_mad_reset_desc", [plasmidType])}</div>`));
      let altText = global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? true : false;
      mad.append($(`<div class="defcon mdarm"><button class="button arm" @click="arm">${loc(altText ? "civics_mad_arm_grenades" : "civics_mad_arm_missiles")}</button></div>`));
      mad.append($(`<div class="defcon mdlaunch"><button class="button" @click="launch" :disabled="armed">${loc(altText ? "civics_mad_launch_grenades" : "civics_mad_launch_missiles")}</button></div>`));
      if (!global.civic.mad.armed) {
        $("#mad").addClass("armed");
        $("#mad .arm").html(loc(altText ? "civics_mad_disarm_grenades" : "civics_mad_disarm_missiles"));
      }
      vBind({
        el: "#mad",
        data: global.civic["mad"],
        methods: {
          launch() {
            if (!global.civic.mad.armed && !global.race["cataclysm"]) {
              $("body").addClass("nuke");
              let nuke = $('<div class="nuke"></div>');
              $("body").append(nuke);
              setTimeout(function() {
                nuke.addClass("burn");
              }, 500);
              setTimeout(function() {
                nuke.addClass("b");
              }, 600);
              setTimeout(function() {
                warhead();
              }, 4e3);
            }
          },
          arm() {
            if (global.civic.mad.armed) {
              $("#mad .arm").html(loc(altText ? "civics_mad_disarm_grenades" : "civics_mad_disarm_missiles"));
              global.civic.mad.armed = false;
              $("#mad").addClass("armed");
            } else {
              $("#mad .arm").html(loc(altText ? "civics_mad_arm_grenades" : "civics_mad_arm_missiles"));
              global.civic.mad.armed = true;
              $("#mad").removeClass("armed");
            }
          }
        }
      });
      ["mdarm", "mdlaunch"].forEach(function(k) {
        popover(
          `mad${k}`,
          function() {
            return "<span>{{ label() }}</span>";
          },
          {
            elm: `#mad .${k}`,
            in: function(obj) {
              vBind({
                el: `#${obj.id} > span`,
                data: { test: "val" },
                methods: {
                  label() {
                    switch (k) {
                      case "mdarm":
                        return global.tech["world_control"] && !global.race["truepath"] ? loc("civics_mad_missiles_world_control_desc") : loc(altText ? "civics_mad_missiles_desc_easter" : "civics_mad_missiles_desc");
                      case "mdlaunch": {
                        let gains = calcPrestige("mad");
                        let plasmidType2 = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
                        return loc("civics_mad_missiles_warning", [gains.plasmid, plasmidType2]);
                      }
                    }
                  }
                }
              });
            },
            out: function(obj) {
              vBind({ el: `#${obj.id} > span` }, "destroy");
            }
          }
        );
      });
    }
  }

  // src/prod.js
  function highPopAdjust(v) {
    if (global.race["high_pop"]) {
      v *= traits.high_pop.vars()[1] / 100;
    }
    return v;
  }
  function teamster(v) {
    if (global.race["gravity_well"] && global.race["teamster"] && global.race.teamster > 0) {
      let cap = teamsterCap();
      if (cap < 1) {
        cap = 1;
      }
      let teamster2 = global.civic.teamster.workers > cap ? cap : global.civic.teamster.workers;
      v *= teamster2 / cap;
    }
    return v;
  }
  function production(id, val, wiki) {
    switch (id) {
      case "transmitter": {
        return 2.5;
      }
      case "oil_well": {
        let oil = global.tech["oil"] >= 4 ? 0.48 : 0.4;
        if (global.tech["oil"] >= 7) {
          oil *= 2;
        } else if (global.tech["oil"] >= 5) {
          oil *= global.tech["oil"] >= 6 ? 1.75 : 1.25;
        }
        if (global.city.geology["Oil"]) {
          oil *= global.city.geology["Oil"] + 1;
        }
        if (global.city.biome === "desert") {
          oil *= biomes.desert.vars()[1];
        } else if (global.city.biome === "tundra") {
          oil *= biomes.tundra.vars()[1];
        } else if (global.city.biome === "taiga") {
          oil *= biomes.taiga.vars()[2];
        }
        let dirtVal = govActive("dirty_jobs", 2);
        if (dirtVal) {
          oil *= 1 + dirtVal / 100;
        }
        if (global.race["warlord"]) {
          oil *= 1 + (global.portal?.pumpjack?.rank || 1) * 0.24;
        }
        return oil;
      }
      case "iridium_mine": {
        switch (val) {
          case "iridium": {
            let iridium = 0.035;
            if (global.city.geology["Iridium"]) {
              iridium *= global.city.geology["Iridium"] + 1;
            }
            let base = iridium;
            let gov = govRelationFactor(3);
            return {
              b: base,
              g: gov - 1,
              f: base * gov
            };
          }
          case "coal":
            return 0.55;
        }
      }
      case "helium_mine": {
        let base = global.race["warlord"] ? 0.3 + (global.portal?.pumpjack?.rank || 1) * 0.08 : 0.18;
        let gov = govRelationFactor(3);
        return {
          b: base,
          g: gov - 1,
          f: base * gov
        };
      }
      case "red_mine": {
        switch (val) {
          case "copper": {
            let base = highPopAdjust(0.25);
            let gov = govRelationFactor(3);
            return {
              b: base,
              g: gov - 1,
              f: base * gov
            };
          }
          case "titanium": {
            let base = highPopAdjust(0.02);
            let gov = govRelationFactor(3);
            return {
              b: base,
              g: gov - 1,
              f: base * gov
            };
          }
          case "stone":
            return highPopAdjust(0.75);
          case "asbestos":
            return highPopAdjust(1.25);
          case "aluminium":
            return highPopAdjust(0.066);
        }
      }
      case "biodome": {
        switch (val) {
          case "food":
            return highPopAdjust(global.race.universe === "evil" ? 0.1 : 0.25);
          case "cat_food":
            return 2;
          case "lumber":
            return highPopAdjust(1.5);
        }
      }
      case "gas_mining": {
        return global.tech["helium"] ? 0.65 : 0.5;
      }
      case "outpost": {
        let vals = {
          b: 0.025,
          d: 0,
          n: 0
        };
        if (global.tech["drone"]) {
          let rate = global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 3 ? 0.12 : 0.06;
          vals.d = global.space.drone.count * rate;
          vals.n = vals.b * (1 + vals.d);
        } else {
          vals.n = vals.b;
        }
        return vals;
      }
      case "oil_extractor": {
        let oil = global.tech["oil"] >= 4 ? 0.48 : 0.4;
        if (global.tech["oil"] >= 7) {
          oil *= 2;
        } else if (global.tech["oil"] >= 5) {
          oil *= global.tech["oil"] >= 6 ? 1.75 : 1.25;
        }
        return oil;
      }
      case "elerium_ship": {
        return global.tech.asteroid >= 6 ? global.tech.asteroid >= 7 ? 9e-3 : 75e-4 : 5e-3;
      }
      case "iridium_ship": {
        return global.tech.asteroid >= 6 ? global.tech.asteroid >= 7 ? 0.1 : 0.08 : 0.055;
      }
      case "iron_ship": {
        return global.tech.asteroid >= 6 ? global.tech.asteroid >= 7 ? 4 : 3 : 2;
      }
      case "g_factory": {
        if (global.race["truepath"]) {
          if (global.tech["isolation"]) {
            return 1.8;
          } else {
            let titan_colonists = p_on["ai_colonist"] ? global.civic.titan_colonist.workers + jobScale(p_on["ai_colonist"]) : global.civic.titan_colonist.workers;
            let gain = 0.05 * titan_colonists;
            if (global.race["high_pop"]) {
              gain = highPopAdjust(gain);
            }
            return gain;
          }
        } else {
          return 0.6;
        }
      }
      case "harvester": {
        switch (val) {
          case "helium":
            return 0.85;
          case "deuterium":
            return 0.15;
        }
      }
      case "elerium_prospector": {
        return 0.014;
      }
      case "neutron_miner": {
        return 0.055;
      }
      case "bolognium_ship": {
        return 8e-3;
      }
      case "excavator": {
        return 0.2;
      }
      case "vitreloy_plant": {
        let vitreloy = 0.18;
        if (global.civic.govern.type === "corpocracy") {
          vitreloy *= global.tech["high_tech"] && global.tech["high_tech"] >= 16 ? 1.4 : 1.3;
        }
        if (global.civic.govern.type === "socialist") {
          vitreloy *= 1.1;
        }
        return vitreloy;
      }
      case "infernite_mine": {
        let sup = hellSupression("gate", 0, wiki);
        return 0.5 * sup.supress;
      }
      case "water_freighter": {
        return 1.25;
      }
      case "titan_mine": {
        switch (val) {
          case "adamantite": {
            let base = highPopAdjust(0.02);
            return base * (global.space["titan_mine"] ? global.space.titan_mine.ratio : 50) / 100;
          }
          case "aluminium": {
            let base = highPopAdjust(0.12);
            return base * (100 - (global.space["titan_mine"] ? global.space.titan_mine.ratio : 50)) / 100;
          }
        }
      }
      case "lander": {
        if (global.space.crashed_ship.count === 100) {
          return 5e-3;
        }
        return 0;
      }
      case "orichalcum_mine": {
        return 0.08;
      }
      case "uranium_mine": {
        return 0.025;
      }
      case "neutronium_mine": {
        return 0.04;
      }
      case "elerium_mine": {
        return 9e-3;
      }
      case "shock_trooper": {
        if (global.space.digsite.count === 100) {
          return 18e-4;
        }
        return 0;
      }
      case "tank": {
        if (global.space.digsite.count === 100) {
          return 18e-4;
        }
        return 0;
      }
      case "mining_pit": {
        let mats = 0;
        switch (val) {
          case "materials": {
            mats = global.tech["isolation"] ? 0.12 : 0.09;
            break;
          }
          case "bolognium": {
            mats = global.tech["isolation"] ? 0.0288 : 0.0216;
            break;
          }
          case "stone": {
            mats = global.tech["isolation"] ? 0.8 : 0.6;
            break;
          }
          case "adamantite": {
            mats = global.tech["isolation"] ? 0.448 : 0.336;
            break;
          }
          case "copper": {
            mats = 0.58;
            break;
          }
          case "coal": {
            mats = 0.13;
            break;
          }
          case "iron": {
            mats = 0.74;
            break;
          }
          case "aluminium": {
            mats = 0.88;
            break;
          }
          case "chrysotile": {
            mats = 1.44;
            break;
          }
        }
        if (global.race["tough"]) {
          mats *= 1 + traits.tough.vars()[0] / 100;
        }
        let fathom = fathomCheck("ogre");
        if (fathom > 0) {
          mats *= 1 + traits.tough.vars(1)[0] / 100 * fathom;
        }
        if (global.tech["tau_pit_mining"]) {
          mats *= 1.18;
        }
        return mats;
      }
      case "tau_farm": {
        switch (val) {
          case "food": {
            return global.tech["isolation"] ? 15 : 9;
          }
          case "lumber": {
            return global.tech["isolation"] ? 12 : 5.5;
          }
          case "water": {
            return 0.35;
          }
        }
      }
      case "womling_mine": {
        let boost = 1;
        if (global.tech["womling_mining"]) {
          boost += global.tech.womling_mining * 0.15;
        }
        if (global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5) {
          boost *= 1.1;
        }
        if (global.tech["womling_gene"]) {
          boost *= 1.25;
        }
        switch (val) {
          case "unobtainium": {
            return 0.0305 * boost;
          }
          case "uranium": {
            return 0.047 * boost;
          }
          case "titanium": {
            return 0.616 * boost;
          }
          case "copper": {
            return 1.191 * boost;
          }
          case "iron": {
            return 1.377 * boost;
          }
          case "aluminium": {
            return 1.544 * boost;
          }
          case "neutronium": {
            return 0.382 * boost;
          }
          case "iridium": {
            return 0.535 * boost;
          }
        }
      }
      case "refueling_station": {
        return global.tech["isolation"] ? 18.5 : 9.35;
      }
      case "ore_refinery": {
        return global.tech["tau_ore_mining"] ? 40 : 25;
      }
      case "whaling_station": {
        return 12;
      }
      case "mining_ship": {
        if (global.tauceti["patrol_ship"]) {
          let patrol = 1;
          if (global.tauceti.patrol_ship.support > global.tauceti.patrol_ship.s_max) {
            patrol = flib("curve", global.tauceti.patrol_ship.s_max / global.tauceti.patrol_ship.support, 1.4);
          }
          return (global.tech["tau_ore_mining"] && global.tech.tau_ore_mining >= 2 ? 12 : 10) * patrol;
        }
        return 0;
      }
      case "mining_ship_ore": {
        switch (val) {
          case "iron": {
            return global.tech["isolation"] ? 2.22 : 1.85;
          }
          case "aluminium": {
            return global.tech["isolation"] ? 2.22 : 1.85;
          }
          case "iridium": {
            return global.tech["isolation"] ? 0.42 : 0.35;
          }
          case "neutronium": {
            return global.tech["isolation"] ? 0.42 : 0.35;
          }
          case "orichalcum": {
            return global.tech["isolation"] ? 0.3 : 0.25;
          }
          case "elerium": {
            return global.tech["isolation"] ? 0.024 : 0.02;
          }
        }
      }
      case "whaling_ship": {
        if (global.tauceti["patrol_ship"]) {
          let patrol = 1;
          if (global.tauceti.patrol_ship.support > global.tauceti.patrol_ship.s_max) {
            patrol = flib("curve", global.tauceti.patrol_ship.s_max / global.tauceti.patrol_ship.support, 1.4);
          }
          return 8 * patrol;
        }
        return 0;
      }
      case "whaling_ship_oil": {
        return global.tech["isolation"] ? 0.78 : 0.42;
      }
      case "alien_outpost": {
        return 0.01;
      }
      case "psychic_boost": {
        if (global.tech["psychic"] && global.race["psychic"] && global.race["psychicPowers"] && global.race.psychicPowers.boost.r === val && global.race.psychicPowers.hasOwnProperty("boostTime")) {
          let boost = 0;
          if (global.race.psychicPowers.boostTime > 0) {
            boost += traits.psychic.vars()[3] / 100;
          }
          if (global.tech.psychic >= 4 && global.race.psychicPowers["channel"]) {
            let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
            boost += +(traits.psychic.vars()[3] / 5e4 * rank * global.race.psychicPowers.channel.boost).toFixed(3);
          }
          return 1 + boost;
        }
        return 1;
      }
      case "psychic_cash": {
        if (global.tech["psychic"] && global.race["psychic"] && global.race["psychicPowers"] && global.race.psychicPowers.hasOwnProperty("cash")) {
          let boost = 0;
          if (global.race.psychicPowers.cash > 0) {
            boost += traits.psychic.vars()[3] / 100;
          }
          if (global.tech.psychic >= 4 && global.race.psychicPowers["channel"]) {
            let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
            boost += +(traits.psychic.vars()[3] / 5e4 * rank * global.race.psychicPowers.channel.cash).toFixed(3);
          }
          return 1 + boost;
        }
        return 1;
      }
      case "asphodel_harvester": {
        let base = 0.075;
        if (global.tech["hell_lake"] && global.tech.hell_lake >= 7 && global.tech["railway"]) {
          base *= 1 + global.tech.railway / 100;
        }
        if (global.race["warlord"] && global.eden["corruptor"]) {
          base = 1 + (p_on["corruptor"] || 0) * 0.06;
        }
        return base;
      }
      case "shadow_mine": {
        switch (val) {
          case "elerium": {
            return 0.02;
          }
          case "infernite": {
            return 0.015;
          }
          case "vitreloy": {
            return 0.22;
          }
        }
      }
    }
  }
  function factoryBonus(factory) {
    if (global.race["toxic"]) {
      factory *= 1 + traits.toxic.vars()[0] / 100;
    }
    if (global.race["artisan"]) {
      factory *= 1 + traits.artisan.vars()[1] / 100;
    }
    let fathom = fathomCheck("shroomi");
    if (fathom > 0) {
      factory *= 1 + traits.toxic.vars(1)[0] / 100 * fathom;
    }
    if (global.civic.govern.type === "corpocracy") {
      factory *= 1 + govEffect.corpocracy()[4] / 100;
    }
    if (global.civic.govern.type === "socialist") {
      factory *= 1 + govEffect.socialist()[1] / 100;
    }
    if (global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 2) {
      factory *= 1.1;
    }
    if (global.race["elemental"] && traits.elemental.vars()[0] === "acid") {
      factory *= 1 + highPopAdjust(traits.elemental.vars()[2] * global.resource[global.race.species].amount / 100);
    }
    return factory;
  }

  // src/jobs.js
  var job_desc = {
    unemployed: function(servant) {
      let desc = loc("job_unemployed_desc");
      if (global.civic.d_job === "unemployed" && !servant) {
        desc = desc + " " + loc("job_default", [loc("job_unemployed")]);
      }
      return desc;
    },
    hunter: function(servant) {
      let desc = loc("job_hunter_desc", [global.resource.Food.name]);
      if (global.race["unfathomable"]) {
        desc = loc("job_eld_hunter_desc");
      }
      if (global.race["artifical"]) {
        desc = global.race["soul_eater"] ? loc("job_art_demon_hunter_desc", [global.resource.Furs.name, global.resource.Lumber.name]) : loc("job_art_hunter_desc", [global.resource.Furs.name]);
      } else if (global.race["soul_eater"] && global.race.species !== "wendigo") {
        desc = loc(global.race["evil"] ? "job_evil_hunter_desc" : "job_not_evil_hunter_desc", [global.resource.Food.name, global.resource.Lumber.name, global.resource.Furs.name]);
      }
      if (global.civic.d_job === "hunter" && !servant) {
        desc = desc + " " + loc("job_default", [global.race["unfathomable"] ? loc("job_raider") : jobName("hunter")]);
      }
      return desc;
    },
    forager: function(servant) {
      let desc = loc(`job_forager_desc`);
      if (global.civic.d_job === "forager" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("forager")]);
      }
      return desc;
    },
    farmer: function(servant) {
      let farmer = +farmerValue(true, servant).toFixed(2);
      let farmhand = +farmerValue(false, servant).toFixed(2);
      if (!servant) {
        farmer = +workerScale(farmer, "farmer").toFixed(2);
        farmhand = +workerScale(farmhand, "farmer").toFixed(2);
      }
      let desc = global.race["high_pop"] && !servant ? loc("job_farmer_desc_hp", [farmer, global.resource.Food.name, jobScale(1), farmhand, jobScale(1) * global.city.farm.count]) : loc("job_farmer_desc", [farmer, global.resource.Food.name, global.city.farm.count, farmhand]);
      if (global.civic.d_job === "farmer" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("farmer")]);
      }
      return desc;
    },
    lumberjack: function(servant) {
      let workers = servant && global.race["servants"] ? global.race.servants.jobs.lumberjack : global.civic.lumberjack.workers;
      let impact = global.civic.lumberjack.impact;
      if (!servant) {
        workers = +workerScale(workers, "lumberjack").toFixed(2);
        impact = +workerScale(impact, "lumberjack").toFixed(2);
      }
      if (global.race["evil"] && (!global.race["soul_eater"] || global.race.species === "wendigo")) {
        let multiplier = 1;
        if (!servant) {
          multiplier *= racialTrait(workers, "lumberjack");
        }
        let bone = +(impact * multiplier).toFixed(2);
        let flesh = +(impact / 4 * multiplier).toFixed(2);
        let desc = global.race.species === "wendigo" ? loc("job_reclaimer_desc2", [bone]) : loc("job_reclaimer_desc", [bone, flesh]);
        if (global.civic.d_job === "lumberjack" && !servant) {
          desc = desc + " " + loc("job_default", [jobName("reclaimer")]);
        }
        return desc;
      } else {
        let multiplier = (global.tech["axe"] && global.tech["axe"] > 0 ? (global.tech["axe"] - 1) * 0.35 : 0) + 1;
        if (!servant) {
          multiplier *= racialTrait(workers, "lumberjack");
        }
        if (global.city.biome === "forest") {
          impact *= biomes.forest.vars()[0];
        }
        if (global.city.biome === "savanna") {
          impact *= biomes.savanna.vars()[2];
        }
        if (global.city.biome === "desert") {
          impact *= biomes.desert.vars()[2];
        }
        if (global.city.biome === "swamp") {
          impact *= biomes.swamp.vars()[2];
        }
        if (global.city.biome === "taiga") {
          impact *= biomes.taiga.vars()[0];
        }
        let gain = +(impact * multiplier).toFixed(2);
        let desc = loc("job_lumberjack_desc", [gain, global.resource.Lumber.name]);
        if (global.civic.d_job === "lumberjack" && !servant) {
          desc = desc + " " + loc("job_default", [jobName("lumberjack")]);
        }
        let hallowed2 = getHalloween();
        if (hallowed2.active) {
          desc = desc + ` <span class="has-text-special">${loc("events_halloween_lumberjack")}</span> `;
        }
        return desc;
      }
    },
    quarry_worker: function(servant) {
      let workers = servant && global.race["servants"] ? global.race.servants.jobs.quarry_worker : global.civic.quarry_worker.workers;
      let impact = global.civic.quarry_worker.impact;
      if (!servant) {
        workers = +workerScale(workers, "quarry_worker").toFixed(2);
        impact = +workerScale(impact, "quarry_worker").toFixed(2);
      }
      let multiplier = (global.tech["hammer"] && global.tech["hammer"] > 0 ? global.tech["hammer"] * 0.4 : 0) + 1;
      if (!servant) {
        multiplier *= racialTrait(workers, "miner");
      }
      if (global.city.biome === "desert") {
        multiplier *= biomes.desert.vars()[0];
      }
      if (global.city.biome === "swamp") {
        multiplier *= biomes.swamp.vars()[3];
      }
      if (global.tech["explosives"] && global.tech["explosives"] >= 2) {
        multiplier *= global.tech["explosives"] >= 3 ? 1.75 : 1.5;
      }
      let gain = +(impact * multiplier).toFixed(1);
      let desc = global.resource.Aluminium.display ? loc("job_quarry_worker_desc2", [gain, global.resource.Stone.name, global.resource.Aluminium.name]) : loc("job_quarry_worker_desc1", [gain, global.resource.Stone.name]);
      if (global.race["smoldering"]) {
        desc = desc + " " + loc("job_quarry_worker_smoldering", [global.resource.Chrysotile.name]);
      }
      if (global.civic.d_job === "quarry_worker" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("quarry_worker")]);
      }
      return desc;
    },
    crystal_miner: function(servant) {
      let workers = servant && global.race["servants"] ? global.race.servants.jobs.crystal_miner : global.civic.crystal_miner.workers;
      let impact = global.civic.crystal_miner.impact;
      let multiplier = 1;
      if (!servant) {
        workers = +workerScale(workers, "crystal_miner").toFixed(2);
        impact = +workerScale(impact, "crystal_miner").toFixed(2);
        multiplier *= racialTrait(workers, "miner");
      }
      let gain = +(impact * multiplier).toFixed(2);
      let desc = loc("job_crystal_miner_desc", [gain, global.resource.Crystal.name]);
      if (global.civic.d_job === "crystal_miner" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("crystal_miner")]);
      }
      return desc;
    },
    scavenger: function(servant) {
      let scavenger = traits.scavenger.vars()[0];
      if (global.city.ptrait.includes("trashed") && global.race["scavenger"]) {
        scavenger *= 1 + traits.scavenger.vars()[1] / 100;
      }
      if (global.race["high_pop"] && !servant) {
        scavenger *= traits.high_pop.vars()[1] / 100;
      }
      if (!servant) {
        scavenger = +workerScale(scavenger, "scavenger").toFixed(2);
      }
      let desc = loc("job_scavenger_desc", [races[global.race.species].home, scavenger]);
      if (global.civic.d_job === "scavenger" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("scavenger")]);
      }
      return desc;
    },
    teamster: function(servant) {
      let desc = loc("job_teamster_desc", [teamsterCap()]);
      if (global.civic.d_job === "teamster" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("teamster")]);
      }
      return desc;
    },
    meditator: function(servant) {
      let desc = loc("job_meditator_desc");
      if (global.civic.d_job === "meditator" && !servant) {
        desc = desc + " " + loc("job_default", [jobName("meditator")]);
      }
      return desc;
    },
    torturer: function() {
      return loc("job_torturer_desc");
    },
    miner: function() {
      if (global.race["warlord"]) {
        return loc("job_dig_demon_desc");
      } else if (global.tech["mining"] >= 3) {
        return global.race["sappy"] && global.tech["alumina"] ? loc("job_miner_desc2_amber") : loc("job_miner_desc2");
      } else {
        return loc("job_miner_desc1");
      }
    },
    coal_miner: function() {
      if (global.tech["uranium"]) {
        return loc("job_coal_miner_desc2");
      } else {
        return loc("job_coal_miner_desc1");
      }
    },
    craftsman: function() {
      return loc("job_craftsman_desc");
    },
    cement_worker: function() {
      let unit_price = global.race["high_pop"] ? 3 / traits.high_pop.vars()[0] : 3;
      if (global.city.biome === "ashland") {
        unit_price *= biomes.ashland.vars()[1];
      }
      unit_price = +workerScale(unit_price, "cement_worker").toFixed(2);
      let worker_impact = +workerScale(global.civic.cement_worker.impact, "cement_worker").toFixed(2);
      let impact = global.tech["cement"] >= 4 ? global.tech.cement >= 7 ? 1.45 : 1.2 : 1;
      let cement_multiplier = racialTrait(global.civic.cement_worker.workers, "factory");
      let gain = worker_impact * impact * cement_multiplier;
      if (global.city.biome === "ashland") {
        gain *= biomes.ashland.vars()[1];
      }
      gain = +gain.toFixed(2);
      return global.race["sappy"] ? loc("job_cement_worker_amber_desc", [gain]) : loc("job_cement_worker_desc", [gain, unit_price]);
    },
    banker: function() {
      let interest = +workerScale(global.civic.banker.impact, "banker").toFixed(2) * 100;
      if (global.tech["banking"] >= 10) {
        interest += 2 * global.tech["stock_exchange"];
      }
      if (global.race["truthful"]) {
        interest *= 1 - traits.truthful.vars()[0] / 100;
      }
      if (global.civic.govern.type === "republic") {
        interest *= 1.25;
      }
      if (global.race["high_pop"]) {
        interest *= traits.high_pop.vars()[1] / 100;
      }
      interest = +interest.toFixed(0);
      if (global.race["fasting"]) {
        return loc("job_banker_desc_fasting");
      }
      return loc("job_banker_desc", [interest]);
    },
    entertainer: function() {
      let morale = global.tech["theatre"];
      if (global.race["musical"]) {
        morale += traits.musical.vars()[0];
      }
      if (global.race["emotionless"]) {
        morale *= 1 - traits.emotionless.vars()[0] / 100;
      }
      if (global.race["high_pop"]) {
        morale *= traits.high_pop.vars()[1] / 100;
      }
      morale = +workerScale(morale, "entertainer").toFixed(2);
      let mcap = global.race["high_pop"] ? traits.high_pop.vars()[1] / 100 : 1;
      mcap = +workerScale(mcap, "entertainer").toFixed(2);
      return global.tech["superstar"] ? loc("job_entertainer_desc2", [morale, mcap]) : loc("job_entertainer_desc", [+morale.toFixed(2)]);
    },
    priest: function() {
      let desc = ``;
      if (global.civic.govern.type === "theocracy" && global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
        desc = loc("job_priest_desc2");
      } else {
        desc = global.race.universe === "evil" ? loc("job_pofficer_desc") : loc("job_priest_desc");
      }
      if (global.tech["cleric"]) {
        desc = desc + ` ${loc("job_priest_desc3")}`;
      }
      return desc;
    },
    professor: function() {
      let professor = +workerScale(1, "professor");
      let impact = +(global.race["studious"] ? global.civic.professor.impact + traits.studious.vars()[0] : global.civic.professor.impact);
      let fathom = fathomCheck("elven");
      if (fathom > 0) {
        impact += traits.studious.vars(1)[0] * fathom;
      }
      professor *= impact;
      professor *= global.race["pompous"] ? 1 - traits.pompous.vars()[0] / 100 : 1;
      professor *= racialTrait(global.civic.professor.workers, "science");
      if (global.tech["anthropology"] && global.tech["anthropology"] >= 3) {
        professor *= 1 + templeCount() * 0.05;
      }
      if (global.civic.govern.type === "theocracy") {
        professor *= 0.75;
      }
      professor = +professor.toFixed(2);
      return loc("job_professor_desc", [professor]);
    },
    scientist: function() {
      let impact = +workerScale(global.civic.scientist.impact, "scientist").toFixed(2);
      impact *= racialTrait(global.civic.scientist.workers, "science");
      if (global.tech["science"] >= 6 && global.city["wardenclyffe"]) {
        impact *= 1 + global.civic.professor.workers * global.city["wardenclyffe"].on * 0.01;
      }
      if (global.space["satellite"]) {
        impact *= 1 + global.space.satellite.count * 0.01;
      }
      if (global.civic.govern.type === "theocracy") {
        impact *= global.tech["high_tech"] && global.tech["high_tech"] >= 12 ? global.tech["high_tech"] >= 16 ? 0.75 : 0.6 : 0.5;
      }
      impact = +impact.toFixed(2);
      return global.race.universe === "magic" ? loc("job_wizard_desc", [impact, +(0.025 * darkEffect("magic")).toFixed(4)]) : loc("job_scientist_desc", [impact]);
    },
    colonist() {
      return loc(global.race["truepath"] ? "job_colonist_desc_tp" : "job_colonist_desc", [planetName().red]);
    },
    titan_colonist() {
      return loc("job_colonist_desc_tp", [planetName().titan]);
    },
    space_miner() {
      return loc("job_space_miner_desc");
    },
    hell_surveyor() {
      return loc("job_hell_surveyor_desc");
    },
    archaeologist() {
      let value = highPopAdjust(25e4);
      let sup = hellSupression("ruins");
      let know = Math.round(value * sup.supress);
      return loc("job_archaeologist_desc", [know.toLocaleString()]);
    },
    ghost_trapper() {
      let attact = global.blood["attract"] ? global.blood.attract * 5 : 0;
      let resist = asphodelResist();
      let ascend2 = 1;
      if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
        let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
        heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
        if (heatSink > 0) {
          ascend2 = 1 + heatSink / 12500;
        }
      }
      if (global.race["warlord"] && global.portal["mortuary"] && global.portal["corpse_pile"]) {
        let corpse = (global.portal?.corpse_pile?.count || 0) * (p_on["mortuary"] || 0);
        if (corpse > 0) {
          ascend2 = 1 + corpse / 800;
        }
      }
      let min = Math.floor((150 + attact) * resist * ascend2);
      let max = Math.floor((250 + attact) * resist * ascend2);
      return loc("job_ghost_trapper_desc", [loc("portal_soul_forge_title"), global.resource.Soul_Gem.name, min, max]);
    },
    elysium_miner() {
      let desc = loc("job_elysium_miner_desc", [loc("eden_elysium_name")]);
      if (global.tech["elysium"] && global.tech.elysium >= 12) {
        desc += ` ${loc("eden_restaurant_effect", [0.15, loc(`eden_restaurant_bd`)])}.`;
      }
      return desc;
    },
    pit_miner() {
      return loc("job_pit_miner_desc", [loc("tau_planet", [races[global.race.species].home])]);
    },
    crew() {
      return loc("job_crew_desc");
    }
  };
  function defineJobs(define) {
    if (!define) {
      $("#civics").append($(`<h2 class="is-sr-only">${loc("civics_jobs")}</h2><div class="tile is-child jobList"><div id="sshifter" class="tile sshifter"></div><div id="jobs" class="tile is-child"></div><div id="foundry" class="tile is-child"></div><div id="servants" class="tile is-child"></div><div id="skilledServants" class="tile is-child"></div></div>`));
    }
    loadJob("unemployed", define, 0, 0, "warning");
    loadJob("hunter", define, 0, 0);
    loadJob("forager", define, 0, 0);
    loadJob("farmer", define, 0.82, 5);
    loadJob("lumberjack", define, 1, 5);
    loadJob("quarry_worker", define, 1, 5);
    loadJob("crystal_miner", define, 0.1, 5);
    loadJob("scavenger", define, 0.12, 5);
    loadJob("teamster", define, 1, global.tech["teamster"] ? 6 : 4);
    loadJob("meditator", define, 1, 5);
    loadJob("torturer", define, 1, 3, "advanced");
    loadJob("miner", define, 1, 4, "advanced");
    loadJob("coal_miner", define, 0.2, 4, "advanced");
    loadJob("craftsman", define, 1, 5, "advanced");
    loadJob("cement_worker", define, 0.4, 5, "advanced");
    loadJob("entertainer", define, 1, 10, "advanced");
    loadJob("priest", define, 1, 3, "advanced");
    loadJob("professor", define, 0.5, 6, "advanced");
    loadJob("scientist", define, 1, 5, "advanced");
    loadJob("banker", define, 0.1, 6, "advanced");
    loadJob("colonist", define, 1, 5, "advanced");
    loadJob("titan_colonist", define, 1, 5, "advanced");
    loadJob("space_miner", define, 1, 5, "advanced");
    loadJob("hell_surveyor", define, 1, 1, "advanced");
    loadJob("archaeologist", define, 1, 1, "advanced");
    loadJob("ghost_trapper", define, 1, 3, "advanced");
    loadJob("elysium_miner", define, 1, 3, "advanced");
    loadJob("pit_miner", define, 1, 4.5, "advanced");
    loadJob("crew", define, 1, 4, "alert");
    if (!define && !global.race["start_cataclysm"]) {
      ["Scarletite", "Quantium"].forEach(function(res) {
        limitCraftsmen(res, false);
      });
      loadFoundry();
      if (global.race["servants"]) {
        loadServants();
      }
    }
  }
  function workerScale(num, job) {
    if (global.race["strong"] && ["hunter", "forager", "farmer", "lumberjack", "quarry_worker", "crystal_miner", "scavenger"].includes(job)) {
      num *= traits.strong.vars()[1];
    }
    if ((global.race["swift"] || global.race["living_tool"]) && ["hunter", "forager", "farmer", "lumberjack", "quarry_worker", "crystal_miner", "scavenger"].includes(job)) {
      num *= traits.strong.vars(0.25)[1];
    }
    let teacher = govActive("teacher", 1);
    if (teacher && ["professor"].includes(job)) {
      num *= 1 + teacher / 100;
    }
    if (global.race["lone_survivor"]) {
      if (["hunter", "forager", "farmer", "lumberjack", "quarry_worker", "crystal_miner", "scavenger"].includes(job)) {
        num *= 80;
      } else if (["craftsman"].includes(job)) {
        num *= 60;
      } else if (["miner", "coal_miner", "cement_worker", "banker", "entertainer", "priest", "pit_miner"].includes(job)) {
        num *= 45;
      } else if (["professor", "scientist"].includes(job)) {
        num *= 125;
      }
    }
    return num;
  }
  function jobScale(num) {
    if (global.race["high_pop"]) {
      return num * traits.high_pop.vars()[0];
    }
    return num;
  }
  function setJobName(job) {
    let job_name = "";
    if (global.race["unfathomable"] && job === "hunter") {
      job_name = loc("job_raider");
    } else if (global.race.universe === "magic" && job === "scientist") {
      job_name = loc("job_wizard");
    } else if (global.race["truepath"] && job === "colonist") {
      job_name = loc("job_colonist_tp", [planetName().red]);
    } else if (job === "titan_colonist") {
      job_name = loc("job_colonist_tp", [planetName().titan]);
    } else if (global.race.universe === "evil" && job === "priest" && global.civic.govern.type != "theocracy") {
      job_name = loc("job_pofficer");
    } else if (job === "lumberjack" && global.race["evil"] && (!global.race["soul_eater"] || global.race.species === "wendigo")) {
      job_name = loc("job_reclaimer");
    } else {
      job_name = loc("job_" + job);
    }
    global["civic"][job].name = job_name;
  }
  function jobName(job) {
    let name = global.civic[job]?.name || loc(`job_${job}`);
    return name;
  }
  function loadJob(job, define, impact, stress, color) {
    let servant = false;
    if (define === "servant") {
      servant = true;
      define = false;
    }
    if (!global["civic"][job]) {
      global["civic"][job] = {
        job,
        display: false,
        workers: 0,
        max: 0,
        impact
      };
    }
    let noControl = {};
    if (global.race["warlord"]) {
      noControl["miner"] = true;
    }
    setJobName(job);
    if (!global.civic[job]["assigned"]) {
      global.civic[job]["assigned"] = job === "craftsman" ? 0 : global.civic[job].workers;
    }
    if (!servant) {
      global.civic[job]["stress"] = stress;
      global.civic[job].impact = impact;
    }
    if (job === "craftsman" || define) {
      return;
    }
    var id = servant ? "servant-" + job : "civ-" + job;
    var civ_container = $(`<div id="${id}" v-show="showJob('${job}')" class="job"></div>`);
    var controls = servant ? $(`<div class="controls"></div>`) : $(`<div v-show="!isDefault('${job}')" class="controls"></div>`);
    if (!color || job === "unemployed") {
      color = color || "info";
      let job_label = servant ? $(`<div class="job_label"><h3 class="has-text-${color}">{{ civic.${job}.name }}</h3><span class="count">{{ sjob.${job} }}</span></div>`) : $(`<div class="job_label"><h3><a class="has-text-${color}" @click="setDefault('${job}')">{{ civic.${job}.name }}{{ '${job}' | d_state }}</a></h3><span class="count" v-html="$options.filters.event(civic.${job}.workers)">{{ civic.${job}.workers }}</span></div>`);
      civ_container.append(job_label);
    } else {
      let job_label = $(`<div class="job_label"><h3 class="has-text-${color}">{{ civic.${job}.name }}</h3><span :class="level('${job}')">{{ civic.${job}.workers | adjust('${job}') }} / {{ civic.${job}.max | adjust('${job}') }}</span></div>`);
      civ_container.append(job_label);
    }
    civ_container.append(controls);
    $(servant ? "#servants" : "#jobs").append(civ_container);
    if (job !== "crew" && !noControl[job]) {
      var sub = $(`<span role="button" aria-label="${loc("remove")} ${global["civic"][job].name}" class="sub has-text-danger" @click="sub"><span>&laquo;</span></span>`);
      var add = $(`<span role="button" aria-label="${loc("add")} ${global["civic"][job].name}" class="add has-text-success" @click="add"><span>&raquo;</span></span>`);
      controls.append(sub);
      controls.append(add);
    }
    if (servant) {
      vBind({
        el: `#${id}`,
        data: {
          civic: global.civic,
          sjob: global.race.servants.jobs
        },
        methods: {
          showJob(j) {
            return global.civic[j].display || j === "scavenger" && global.race.servants.force_scavenger;
          },
          add() {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if (global.race.servants.max > global.race.servants.used) {
                global.race.servants.jobs[job]++;
                global.race.servants.used++;
              } else {
                break;
              }
            }
          },
          sub() {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if (global.race.servants.jobs[job] > 0) {
                global.race.servants.jobs[job]--;
                global.race.servants.used--;
              } else {
                break;
              }
            }
          }
        }
      });
    } else {
      vBind({
        el: `#${id}`,
        data: {
          civic: global.civic
        },
        methods: {
          showJob(j) {
            return global.civic[j].display;
          },
          add() {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if ((global["civic"][job].max === -1 || global.civic[job].workers < global["civic"][job].max) && (global.civic[global.civic.d_job] && global.civic[global.civic.d_job].workers > 0)) {
                global.civic[job].workers++;
                global.civic[global.civic.d_job].workers--;
                global.civic[job].assigned = global.civic[job].workers;
              } else {
                break;
              }
            }
          },
          sub() {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if (global.civic[job].workers > 0) {
                global.civic[job].workers--;
                global.civic[global.civic.d_job].workers++;
                global.civic[job].assigned = global.civic[job].workers;
              } else {
                break;
              }
            }
          },
          level(job2) {
            if (global.civic[job2].workers === 0) {
              return "count has-text-danger";
            } else if (global.civic[job2].workers === global.civic[job2].max) {
              return "count has-text-success";
            } else if (global.civic[job2].workers <= global.civic[job2].max / 3) {
              return "count has-text-caution";
            } else if (global.civic[job2].workers <= global.civic[job2].max * 0.66) {
              return "count has-text-warning";
            } else if (global.civic[job2].workers < global.civic[job2].max) {
              return "count has-text-info";
            } else {
              return "count";
            }
          },
          setDefault(j) {
            global.civic.d_job = j;
          },
          isDefault(j) {
            return global.civic.d_job === j;
          }
        },
        filters: {
          d_state(j) {
            return global.civic.d_job === j ? "*" : "";
          },
          event(c) {
            if (job === "unemployed" && global.civic.unemployed.display || job === "hunter" && !global.civic.unemployed.display) {
              let egg = easterEgg(3, 14);
              if (c === 0 && egg.length > 0) {
                return egg;
              }
            }
            return c;
          },
          adjust(v, j) {
            if (j === "titan_colonist" && p_on["ai_colonist"]) {
              return v + jobScale(p_on["ai_colonist"]);
            }
            return v;
          }
        }
      });
    }
    popover(
      id,
      function() {
        return job_desc[job](servant);
      },
      {
        elm: `#${id} .job_label`,
        classes: `has-background-light has-text-dark`
      }
    );
  }
  function loadServants() {
    clearElement($("#servants"));
    if (global.race["servants"] && Object.keys(global.race.servants.jobs).length > 0) {
      var servants = $(`<div id="servantList" class="job"><div class="foundry job_label"><h3 class="serveHeader has-text-warning">${loc("civics_servants")}</h3><span :class="level()">{{ s.used }} / {{ s.max }}</span></div></div>`);
      $("#servants").append(servants);
      ["hunter", "forager", "farmer", "lumberjack", "quarry_worker", "crystal_miner", "scavenger"].forEach(function(job) {
        loadJob(job, "servant");
      });
      vBind({
        el: `#servantList`,
        data: {
          s: global.race.servants
        },
        methods: {
          level() {
            if (global.race.servants.used === 0) {
              return "count has-text-danger";
            } else if (global.race.servants.used === global.race.servants.max) {
              return "count has-text-success";
            } else if (global.race.servants.used <= global.race.servants.max / 3) {
              return "count has-text-caution";
            } else if (global.race.servants.used <= global.race.servants.max * 0.66) {
              return "count has-text-warning";
            } else if (global.race.servants.used < global.race.servants.max) {
              return "count has-text-info";
            } else {
              return "count";
            }
          }
        }
      });
      popover(
        "servants",
        function() {
          return loc("civics_servants_desc");
        },
        {
          elm: `#servants .serveHeader`
        }
      );
    }
  }
  function teamsterCap() {
    let transport = 0;
    if (global.race["gravity_well"]) {
      transport = global.tech["transport"] ? global.tech.transport : 0;
      transport = Math.round(global.race.teamster / transport * 1.5);
    }
    if (global.tech["railway"]) {
      transport -= global.tech["railway"] * 2;
    }
    if (transport < 0) {
      transport = 0;
    }
    return transport;
  }
  function craftsmanCap(res) {
    switch (res) {
      case "Scarletite":
        if (global.portal.hasOwnProperty("hell_forge")) {
          let cap2 = getStructNumActive(actions.portal.prtl_ruins.hell_forge);
          return jobScale(cap2);
        }
        return 0;
      case "Quantium":
        let cap = 0;
        if (global.tech["isolation"]) {
          if (global.tauceti.hasOwnProperty("infectious_disease_lab")) {
            cap = getStructNumActive(actions.tauceti.tau_home.infectious_disease_lab);
          }
        } else if (global.space.hasOwnProperty("zero_g_lab")) {
          cap = getStructNumActive(actions.space.spc_enceladus.zero_g_lab);
        }
        return jobScale(cap || 0);
      // This function isn't used to limit normal craftsmen
      default:
        return Number.MAX_SAFE_INTEGER;
    }
  }
  function limitCraftsmen(res, allow_redraw = true) {
    if (!global.resource[res].display) {
      return;
    }
    if (!tmp_vars.hasOwnProperty("craftsman_cap")) {
      tmp_vars.craftsman_cap = {};
    }
    let cap = craftsmanCap(res);
    let refresh = false;
    if (global.city.hasOwnProperty("foundry") && global.city.foundry.hasOwnProperty(res) && cap < global.city.foundry[res]) {
      let diff = global.city.foundry[res] - cap;
      global.civic.craftsman.workers -= diff;
      global.city.foundry.crafting -= diff;
      global.city.foundry[res] -= diff;
      refresh = true;
    } else if (!tmp_vars["craftsman_cap"].hasOwnProperty(res)) {
      refresh = true;
    } else if (cap != tmp_vars["craftsman_cap"][res]) {
      refresh = true;
    }
    tmp_vars["craftsman_cap"][res] = cap;
    if (allow_redraw && refresh) {
      loadFoundry();
    }
  }
  function farmerValue(farm, servant) {
    let farming = global.civic.farmer.impact;
    if (farm) {
      farming += global.tech["agriculture"] && global.tech.agriculture >= 2 ? 1.15 : 0.65;
    }
    if (global.race["living_tool"] && !servant) {
      farming *= 1 + traits.living_tool.vars()[0] * (global.tech["science"] && global.tech.science > 0 ? global.tech.science / 5 : 0);
    } else {
      farming *= 1 + (global.tech["hoe"] && global.tech.hoe > 0 ? global.tech.hoe / 3 : 0);
    }
    farming *= global.city.biome === "grassland" ? biomes.grassland.vars()[0] : 1;
    farming *= global.city.biome === "savanna" ? biomes.savanna.vars()[0] : 1;
    farming *= global.city.biome === "ashland" ? biomes.ashland.vars()[0] : 1;
    farming *= global.city.biome === "volcanic" ? biomes.volcanic.vars()[0] : 1;
    farming *= global.city.biome === "hellscape" ? biomes.hellscape.vars()[0] : 1;
    farming *= global.city.ptrait.includes("trashed") ? planetTraits.trashed.vars()[0] : 1;
    if (servant) {
      farming *= servantTrait(global.race.servants.jobs.farmer, "farmer");
    } else {
      farming *= racialTrait(global.civic.farmer.workers, "farmer");
    }
    farming *= global.tech["agriculture"] >= 7 ? 1.1 : 1;
    farming *= global.race["low_light"] ? 1 - traits.low_light.vars()[0] / 100 : 1;
    return farming;
  }
  function loadFoundry(servants) {
    clearElement($(servants ? "#skilledServants" : "#foundry"));
    if (global.city["foundry"] && global.city["foundry"].count > 0 || global.race["cataclysm"] || global.race["orbit_decayed"] || global.tech["isolation"] || global.race["warlord"]) {
      let element = $(servants ? "#skilledServants" : "#foundry");
      let track = servants ? `{{ s.sused }} / {{ s.smax }}` : `{{ f.crafting }} / {{ c.max }}`;
      let foundry = $(`<div class="job"><div class="foundry job_label"><h3 class="has-text-warning">${loc(servants ? "civics_skilled_servants" : "craftsman_assigned")}</h3><span :class="level()">${track}</span></div></div>`);
      element.append(foundry);
      let summer = eventActive("summer");
      let list = ["Plywood", "Brick", "Wrought_Iron", "Sheet_Metal", "Mythril", "Aerogel", "Nanoweave"];
      if (!servants) {
        list.push("Scarletite");
        list.push("Quantium");
      }
      if (summer && !servants) {
        list.push("Thermite");
      }
      for (let i = 0; i < list.length; i++) {
        let res = list[i];
        if (servants && !global.race.servants.sjobs.hasOwnProperty(res) || !servants && !global.city.foundry.hasOwnProperty(res)) {
          if (servants) {
            global.race.servants.sjobs[res] = 0;
          } else {
            global.city.foundry[res] = 0;
          }
        }
        if (global.resource[res].display || summer && res === "Thermite") {
          let name = global.resource[res].name;
          let resource = $(`<div class="job"></div>`);
          element.append(resource);
          let controls = $('<div class="controls"></div>');
          let job_label;
          if (res === "Scarletite" && global.portal.hasOwnProperty("hell_forge")) {
            job_label = $(`<div id="craft${res}" class="job_label"><h3 class="has-text-danger">${name}</h3><span class="count">{{ f.${res} }} / {{ p.on | maxScar }}</span></div>`);
          } else if (res === "Quantium" && (global.space.hasOwnProperty("zero_g_lab") || global.tauceti.hasOwnProperty("infectious_disease_lab"))) {
            job_label = $(`<div id="craft${res}" class="job_label"><h3 class="has-text-danger">${name}</h3><span class="count">{{ f.${res} }} / {{ e.on | maxQuantium }}</span></div>`);
          } else {
            let tracker = servants ? `{{ s.sjobs.${res} }}` : `{{ f.${res} }}`;
            let id = servants ? `scraft${res}` : `craft${res}`;
            job_label = $(`<div id="${id}" class="job_label"><h3 class="has-text-danger">${name}</h3><span class="count">${tracker}</span></div>`);
          }
          resource.append(job_label);
          resource.append(controls);
          element.append(resource);
          let sub = $(`<span role="button" aria-label="remove ${global.resource[res].name} crafter" class="sub has-text-danger" @click="sub('${res}')"><span>&laquo;</span></span>`);
          let add = $(`<span role="button" aria-label="add ${global.resource[res].name} crafter" class="add has-text-success" @click="add('${res}')"><span>&raquo;</span></span>`);
          controls.append(sub);
          controls.append(add);
        }
      }
      let bindData = global.portal.hasOwnProperty("hell_forge") ? {
        c: global.civic.craftsman,
        p: global.portal.hell_forge
      } : {
        c: global.civic.craftsman,
        e: global.space.hasOwnProperty("zero_g_lab") || global.tauceti.hasOwnProperty("infectious_disease_lab") ? global.tech["isolation"] ? global.tauceti.infectious_disease_lab : global.space.zero_g_lab : { count: 0, on: 0 }
      };
      if (servants) {
        bindData["s"] = global.race.servants;
      } else {
        bindData["f"] = global.city.foundry;
      }
      vBind({
        el: servants ? "#skilledServants" : "#foundry",
        data: bindData,
        methods: {
          add(res) {
            let keyMult = keyMultiplier();
            let tMax = -1;
            if (res === "Scarletite" || res === "Quantium") {
              tMax = craftsmanCap(res);
            }
            for (let i = 0; i < keyMult; i++) {
              if (servants) {
                if (global.race.servants.sused < global.race.servants.smax) {
                  global.race.servants.sjobs[res]++;
                  global.race.servants.sused++;
                } else {
                  break;
                }
              } else {
                if (global.city.foundry.crafting < global.civic.craftsman.max && (global.civic[global.civic.d_job] && global.civic[global.civic.d_job].workers > 0) && (tMax === -1 || tMax > global.city.foundry[res])) {
                  global.civic.craftsman.workers++;
                  global.city.foundry.crafting++;
                  global.city.foundry[res]++;
                  global.civic[global.civic.d_job].workers--;
                } else {
                  break;
                }
              }
            }
          },
          sub(res) {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if (servants) {
                if (global.race.servants.sjobs[res] > 0) {
                  global.race.servants.sjobs[res]--;
                  global.race.servants.sused--;
                } else {
                  break;
                }
              } else {
                if (global.city.foundry[res] > 0) {
                  global.city.foundry[res]--;
                  global.civic.craftsman.workers--;
                  global.city.foundry.crafting--;
                  global.civic[global.civic.d_job].workers++;
                } else {
                  break;
                }
              }
            }
          },
          level() {
            let workers = servants ? global.race.servants.sused : global.civic.craftsman.workers;
            let max = servants ? global.race.servants.smax : global.civic.craftsman.max;
            if (workers === 0) {
              return "count has-text-danger";
            } else if (workers === max) {
              return "count has-text-success";
            } else if (workers <= max / 3) {
              return "count has-text-caution";
            } else if (workers <= max * 0.66) {
              return "count has-text-warning";
            } else if (workers < max) {
              return "count has-text-info";
            } else {
              return "count";
            }
          }
        },
        filters: {
          maxScar(v) {
            return craftsmanCap("Scarletite");
          },
          maxQuantium(v) {
            return craftsmanCap("Quantium");
          }
        }
      });
      for (let i = 0; i < list.length; i++) {
        let res = list[i];
        if (global.resource[res].display || summer && res === "Thermite") {
          let extra = function() {
            let total = $(`<div></div>`);
            let name = global.resource[res].name;
            let craft_total = craftingRatio(res, "auto");
            let multiplier = craft_total.multiplier;
            let speed = global.genes["crafty"] ? 2 : 1;
            let final = +global.resource[res].diff.toFixed(2);
            let bonus = +(multiplier * 100).toFixed(0);
            total.append($(`<div>${loc("craftsman_hover_bonus", [bonus.toLocaleString(), name])}</div>`));
            total.append($(`<div>${loc("craftsman_hover_prod", [final.toLocaleString(), name])}</div>`));
            let craft_cost = craftCost();
            for (let i2 = 0; i2 < craft_cost[res].length; i2++) {
              let craftCost2 = 1;
              if (global.race["resourceful"]) {
                craftCost2 -= traits.resourceful.vars()[0] / 100;
              }
              let fathom = fathomCheck("arraak");
              if (fathom > 0) {
                craftCost2 -= traits.resourceful.vars(1)[0] / 100 * fathom;
              }
              let cost = +(craft_cost[res][i2].a * global.city.foundry[res] * craftCost2 * speed / 140).toFixed(2);
              total.append($(`<div>${loc("craftsman_hover_cost", [cost, global.resource[craft_cost[res][i2].r].name])}<div>`));
            }
            return total;
          };
          let id = servants ? `scraft${res}` : `craft${res}`;
          craftingPopover(id, res, "auto", extra);
        }
      }
      if (servants) {
        popover(
          "servantFoundry",
          function() {
            return loc("civics_skilled_servants_desc");
          },
          {
            elm: `#skilledServants .foundry`,
            classes: `has-background-light has-text-dark`
          }
        );
      } else {
        popover(
          "craftsmenFoundry",
          function() {
            return loc("job_craftsman_hover");
          },
          {
            elm: `#foundry .foundry`,
            classes: `has-background-light has-text-dark`
          }
        );
      }
      if (global.race["servants"] && !servants && global.race.servants.smax > 0) {
        loadFoundry(true);
      }
    }
  }

  // src/resources.js
  var resource_values = {
    Food: 5,
    Lumber: 5,
    Chrysotile: 5,
    Stone: 5,
    Crystal: 6,
    Furs: 8,
    Copper: 25,
    Iron: 40,
    Aluminium: 50,
    Cement: 15,
    Coal: 20,
    Oil: 75,
    Uranium: 550,
    Steel: 100,
    Titanium: 150,
    Alloy: 350,
    Polymer: 250,
    Iridium: 420,
    Helium_3: 620,
    Deuterium: 950,
    Elerium: 2e3,
    Water: 2,
    Neutronium: 1500,
    Adamantite: 2250,
    Infernite: 2750,
    Nano_Tube: 750,
    Graphene: 3e3,
    Stanene: 3600,
    Bolognium: 9e3,
    Vitreloy: 10200,
    Orichalcum: 99e3,
    Asphodel_Powder: 249e3,
    Horseshoe: 0,
    Nanite: 0,
    Genes: 0,
    Soul_Gem: 0,
    Corrupt_Gem: 0,
    Codex: 0,
    Cipher: 0,
    Demonic_Essence: 0,
    Blessed_Essence: 0
  };
  var tradeRatio = {
    Food: 2,
    Lumber: 2,
    Chrysotile: 1,
    Stone: 2,
    Crystal: 0.4,
    Furs: 1,
    Copper: 1,
    Iron: 1,
    Aluminium: 1,
    Cement: 1,
    Coal: 1,
    Oil: 0.5,
    Uranium: 0.12,
    Steel: 0.5,
    Titanium: 0.25,
    Alloy: 0.2,
    Polymer: 0.2,
    Iridium: 0.1,
    Helium_3: 0.1,
    Deuterium: 0.1,
    Elerium: 0.02,
    Water: 2,
    Neutronium: 0.05,
    Adamantite: 0.05,
    Infernite: 0.01,
    Nano_Tube: 0.1,
    Graphene: 0.1,
    Stanene: 0.1,
    Bolognium: 0.12,
    Vitreloy: 0.12,
    Orichalcum: 0.05
  };
  var atomic_mass = {
    Food: 4.355,
    Lumber: 7.668,
    Chrysotile: 15.395,
    Stone: 20.017,
    Crystal: 5.062,
    Furs: 13.009,
    Copper: 63.546,
    Iron: 55.845,
    Aluminium: 26.9815,
    Cement: 20.009,
    Coal: 12.0107,
    Oil: 5.342,
    Uranium: 238.0289,
    Steel: 55.9,
    Titanium: 47.867,
    Alloy: 45.264,
    Polymer: 120.054,
    Iridium: 192.217,
    Helium_3: 3.0026,
    Deuterium: 2.014,
    Neutronium: 248.74,
    Adamantite: 178.803,
    Infernite: 222.666,
    Elerium: 297.115,
    Nano_Tube: 15.083,
    Graphene: 26.9615,
    Stanene: 33.9615,
    Bolognium: 75.898,
    Unobtainium: 168.59,
    Vitreloy: 41.08,
    Orichalcum: 237.8,
    Asphodel_Powder: 0.01,
    Elysanite: 13.666,
    Water: 18.01,
    Plywood: 7.666,
    Brick: 20.009,
    Wrought_Iron: 55.845,
    Sheet_Metal: 26.9815,
    Mythril: 94.239,
    Aerogel: 7.84,
    Nanoweave: 23.71,
    Scarletite: 188.6,
    Quantium: 241.35
  };
  var supplyValue = {
    Lumber: { in: 0.5, out: 25e3 },
    Chrysotile: { in: 0.5, out: 25e3 },
    Stone: { in: 0.5, out: 25e3 },
    Crystal: { in: 3, out: 25e3 },
    Furs: { in: 3, out: 25e3 },
    Copper: { in: 1.5, out: 25e3 },
    Iron: { in: 1.5, out: 25e3 },
    Aluminium: { in: 2.5, out: 25e3 },
    Cement: { in: 3, out: 25e3 },
    Coal: { in: 1.5, out: 25e3 },
    Oil: { in: 2.5, out: 12e3 },
    Uranium: { in: 5, out: 300 },
    Steel: { in: 3, out: 25e3 },
    Titanium: { in: 3, out: 25e3 },
    Alloy: { in: 6, out: 25e3 },
    Polymer: { in: 6, out: 25e3 },
    Iridium: { in: 8, out: 25e3 },
    Helium_3: { in: 4.5, out: 12e3 },
    Deuterium: { in: 4, out: 1e3 },
    Neutronium: { in: 15, out: 1e3 },
    Adamantite: { in: 12.5, out: 1e3 },
    Infernite: { in: 25, out: 250 },
    Elerium: { in: 30, out: 250 },
    Nano_Tube: { in: 6.5, out: 1e3 },
    Graphene: { in: 5, out: 1e3 },
    Stanene: { in: 4.5, out: 1e3 },
    Bolognium: { in: 18, out: 1e3 },
    Vitreloy: { in: 14, out: 1e3 },
    Orichalcum: { in: 10, out: 1e3 },
    Plywood: { in: 10, out: 250 },
    Brick: { in: 10, out: 250 },
    Wrought_Iron: { in: 10, out: 250 },
    Sheet_Metal: { in: 10, out: 250 },
    Mythril: { in: 12.5, out: 250 },
    Aerogel: { in: 16.5, out: 250 },
    Nanoweave: { in: 18, out: 250 },
    Scarletite: { in: 35, out: 250 }
  };
  function craftCost(manual = false) {
    let costs = {
      Plywood: [{ r: "Lumber", a: 100 }],
      Brick: global.race["flier"] ? [{ r: "Stone", a: 60 }] : [{ r: "Cement", a: 40 }],
      Wrought_Iron: [{ r: "Iron", a: 80 }],
      Sheet_Metal: [{ r: "Aluminium", a: 120 }],
      Mythril: [{ r: "Iridium", a: 100 }, { r: "Alloy", a: 250 }],
      Aerogel: [{ r: "Graphene", a: 2500 }, { r: "Infernite", a: 50 }],
      Nanoweave: [{ r: "Nano_Tube", a: 1e3 }, { r: "Vitreloy", a: 40 }],
      Scarletite: [{ r: "Iron", a: 25e4 }, { r: "Adamantite", a: 7500 }, { r: "Orichalcum", a: 500 }],
      Quantium: [{ r: "Nano_Tube", a: 1e3 }, { r: "Graphene", a: 1e3 }, { r: "Elerium", a: 25 }],
      Thermite: [{ r: "Iron", a: 180 }, { r: "Aluminium", a: 60 }]
    };
    if (global.race["wasteful"]) {
      let rate = 1 + traits.wasteful.vars()[0] / 100;
      Object.keys(costs).forEach(function(res) {
        for (let i = 0; i < costs[res].length; i++) {
          costs[res][i].a = Math.round(costs[res][i].a * rate);
        }
      });
    }
    if (global.race["high_pop"] && !manual) {
      let rate = 1 / traits.high_pop.vars()[0];
      Object.keys(costs).forEach(function(res) {
        for (let i = 0; i < costs[res].length; i++) {
          costs[res][i].a = Math.round(costs[res][i].a * rate);
        }
      });
    }
    return costs;
  }
  var craftingRatio = /* @__PURE__ */ function() {
    var crafting = {};
    return function(res, type, recalc) {
      if (recalc) {
        let noEarth = global.race["cataclysm"] || global.race["orbit_decayed"] ? true : false;
        crafting = {
          general: {
            add: [],
            multi: []
          },
          Plywood: {
            add: [],
            multi: []
          },
          Brick: {
            add: [],
            multi: []
          },
          Wrought_Iron: {
            add: [],
            multi: []
          },
          Sheet_Metal: {
            add: [],
            multi: []
          },
          Mythril: {
            add: [],
            multi: []
          },
          Aerogel: {
            add: [],
            multi: []
          },
          Nanoweave: {
            add: [],
            multi: []
          },
          Scarletite: {
            add: [],
            multi: []
          },
          Quantium: {
            add: [],
            multi: []
          },
          Thermite: {
            add: [],
            multi: []
          }
        };
        if (global.tech["foundry"] >= 2) {
          let skill = global.tech["foundry"] >= 5 ? global.tech["foundry"] >= 8 ? 0.08 : 0.05 : 0.03;
          crafting.general.add.push({
            name: loc(`city_foundry`),
            manual: global.city.foundry.count * skill,
            auto: global.city.foundry.count * skill
          });
        }
        if (global.tech["foundry"] >= 3) {
          Object.keys(crafting).forEach(function(resource) {
            if (global.city.foundry[resource] && global.city.foundry[resource] > 1) {
              crafting[resource].add.push({
                name: loc(`tech_apprentices`),
                manual: (global.city.foundry[resource] - 1) * highPopAdjust(0.03),
                auto: (global.city.foundry[resource] - 1) * highPopAdjust(0.03)
              });
            }
          });
        }
        if (global.tech["foundry"] >= 4 && global.city["sawmill"]) {
          crafting.Plywood.add.push({
            name: loc(`city_sawmill`),
            manual: global.city["sawmill"].count * 0.02,
            auto: global.city["sawmill"].count * 0.02
          });
        }
        if (global.tech["foundry"] >= 6) {
          crafting.Brick.add.push({
            name: loc(`city_foundry`),
            manual: global.city["foundry"].count * 0.02,
            auto: global.city["foundry"].count * 0.02
          });
        }
        if (global.tech["foundry"] >= 7) {
          crafting.general.add.push({
            name: loc(`city_factory`) + ` (${loc(`tab_city5`)})`,
            manual: p_on["factory"] * 0.05,
            auto: p_on["factory"] * 0.05
          });
          if (global.tech["mars"] >= 4) {
            crafting.general.add.push({
              name: loc(`city_factory`) + ` (${loc(`tab_space`)})`,
              manual: p_on["red_factory"] * 0.05,
              auto: p_on["red_factory"] * 0.05
            });
          }
          if (global.interstellar["int_factory"] && p_on["int_factory"]) {
            crafting.general.add.push({
              name: loc(`interstellar_int_factory_title`),
              manual: p_on["int_factory"] * 0.1,
              auto: p_on["int_factory"] * 0.1
            });
          }
        }
        if (global.portal["demon_forge"] && p_on["demon_forge"]) {
          crafting.general.add.push({
            name: loc(`portal_demon_forge_title`),
            manual: 0,
            auto: p_on["demon_forge"] * actions.portal.prtl_wasteland.demon_forge.crafting() / 100
          });
        }
        if (global.portal["hell_factory"] && p_on["hell_factory"]) {
          crafting.general.add.push({
            name: loc(`portal_factory_title`),
            manual: p_on["hell_factory"] * 0.25,
            auto: p_on["hell_factory"] * 0.25
          });
        }
        if (global.space["fabrication"] && support_on["fabrication"]) {
          crafting.general.add.push({
            name: loc(`space_red_fabrication_title`),
            manual: support_on["fabrication"] * global.civic.colonist.workers * (noEarth ? highPopAdjust(0.05) : highPopAdjust(0.02)),
            auto: support_on["fabrication"] * global.civic.colonist.workers * (noEarth ? highPopAdjust(0.05) : highPopAdjust(0.02))
          });
        }
        if (global.race["artisan"]) {
          crafting.general.multi.push({
            name: loc(`trait_artisan_name`),
            manual: 1,
            auto: 1 + traits.artisan.vars()[0] / 100
          });
        }
        if (p_on["stellar_forge"]) {
          crafting.Mythril.add.push({
            name: loc(`interstellar_stellar_forge_title`),
            manual: p_on["stellar_forge"] * 0.05,
            auto: p_on["stellar_forge"] * 0.05
          });
          crafting.general.add.push({
            name: loc(`interstellar_stellar_forge_title`),
            manual: 0,
            auto: p_on["stellar_forge"] * 0.1
          });
        }
        if (p_on["hell_forge"]) {
          let sup = hellSupression("ruins");
          crafting.general.add.push({
            name: loc(`portal_hell_forge_title`),
            manual: 0,
            auto: p_on["hell_forge"] * 0.75 * sup.supress
          });
          crafting.Scarletite.multi.push({
            name: loc(`portal_ruins_supressed`),
            manual: 1,
            auto: sup.supress
          });
        }
        if (global.tauceti["tau_factory"] && support_on["tau_factory"]) {
          crafting.general.add.push({
            name: loc(`tau_home_tau_factory`),
            manual: 0,
            auto: support_on["tau_factory"] * (global.tech["isolation"] ? 2.75 : 0.9)
          });
        }
        if (global.tech["isolation"] && global.tauceti["colony"] && support_on["colony"]) {
          crafting.general.add.push({
            name: loc(`tau_home_colony`),
            manual: support_on["colony"] * 0.5,
            auto: support_on["colony"] * 0.5
          });
        }
        if (support_on["zero_g_lab"] && p_on["zero_g_lab"] || support_on["infectious_disease_lab"] && p_on["infectious_disease_lab"]) {
          let synd = syndicate("spc_enceladus");
          crafting.Quantium.multi.push({
            name: loc(`space_syndicate`),
            manual: 1,
            auto: synd
          });
        }
        if (global.tech["alien_crafting"] && support_on["infectious_disease_lab"] && p_on["infectious_disease_lab"]) {
          let qCraft = 1 + 0.65 * Math.min(support_on["infectious_disease_lab"], p_on["infectious_disease_lab"]);
          crafting.Quantium.multi.push({
            name: loc(`tech_infectious_disease_lab_alt`),
            manual: 1,
            auto: qCraft
          });
        }
        if (global.race["crafty"]) {
          crafting.general.add.push({
            name: loc(`wiki_arpa_crispr_crafty`),
            manual: 0.03,
            auto: 0.03
          });
        }
        if (global.race["ambidextrous"]) {
          crafting.general.add.push({
            name: loc(`trait_ambidextrous_name`),
            manual: traits.ambidextrous.vars()[0] * global.race["ambidextrous"] / 100,
            auto: traits.ambidextrous.vars()[0] * global.race["ambidextrous"] / 100
          });
        }
        if (global.race["rigid"]) {
          crafting.general.add.push({
            name: loc(`trait_rigid_name`),
            manual: -(traits.rigid.vars()[0] / 100),
            auto: -(traits.rigid.vars()[0] / 100)
          });
        }
        if (global.civic.govern.type === "socialist") {
          crafting.general.multi.push({
            name: loc(`govern_socialist`),
            manual: 1 + govEffect.socialist()[0] / 100,
            auto: 1 + govEffect.socialist()[0] / 100
          });
        }
        if (global.race["casting"] && active_rituals["crafting"]) {
          let num_rituals = active_rituals["crafting"];
          let boost_m = 1 + num_rituals / (num_rituals + 75);
          let boost_a = 1 + 2 * num_rituals / (2 * num_rituals + 75);
          crafting.general.multi.push({
            name: loc(`modal_pylon_casting`),
            manual: boost_m,
            auto: boost_a
          });
        }
        if (global.race["universe"] === "magic") {
          crafting.general.multi.push({
            name: loc(`universe_magic`),
            manual: 0.8,
            auto: 0.8
          });
        }
        if (global.tech["v_train"]) {
          crafting.general.multi.push({
            name: loc(`tech_vocational_training`),
            manual: 1,
            auto: 2
          });
        }
        if (global.genes["crafty"]) {
          crafting.general.multi.push({
            name: loc(`tab_arpa_crispr`) + " " + loc(`wiki_arpa_crispr_crafty`),
            manual: 1,
            auto: 1 + (global.genes.crafty - 1) * 0.5
          });
        }
        if (global.race["living_tool"]) {
          crafting.general.multi.push({
            name: loc(`trait_living_tool_name`),
            manual: 1,
            auto: 1 + traits.living_tool.vars()[1] / 100
          });
        }
        if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 1) {
          crafting.general.multi.push({
            name: loc(`evo_challenge_orbit_decay`),
            manual: 1,
            auto: 1.1
          });
        }
        if (global.race["ambidextrous"]) {
          crafting.general.multi.push({
            name: loc(`trait_ambidextrous_name`),
            manual: 1,
            auto: 1 + traits.ambidextrous.vars()[1] * global.race["ambidextrous"] / 100
          });
        }
        if (global.blood["artisan"]) {
          crafting.general.multi.push({
            name: loc(`tab_arpa_blood`) + " " + loc(`arpa_blood_artisan_title`),
            manual: 1,
            auto: 1 + global.blood.artisan / 100
          });
        }
        let faith = faithBonus();
        if (faith > 0) {
          crafting.general.multi.push({
            name: loc(`faith`),
            manual: 1,
            auto: 1 + faith / (global.race.universe === "antimatter" ? 1.5 : 3)
          });
        }
        if (global.prestige.Plasmid.count > 0) {
          crafting.general.multi.push({
            name: loc(`resource_Plasmid_plural_name`),
            manual: plasmidBonus() / 8 + 1,
            auto: plasmidBonus() / 8 + 1
          });
        }
        if (global.genes["challenge"] && global.genes["challenge"] >= 2) {
          crafting.general.multi.push({
            name: loc(`mastery`),
            manual: 1 + calc_mastery() / (global.race["weak_mastery"] ? 50 : 100),
            auto: 1 + calc_mastery() / (global.race["weak_mastery"] ? 50 : 100)
          });
        }
        if (global.race["gravity_well"]) {
          crafting.general.multi.push({
            name: loc(`evo_challenge_gravity_well`),
            manual: teamster(1),
            auto: teamster(1)
          });
        }
      } else {
        let multiplier = 1;
        let add_bd = {};
        let multi_bd = {};
        if (crafting["general"]) {
          for (let i = 0; i < crafting.general.add.length; i++) {
            let curr = crafting.general.add[i];
            add_bd[curr.name] = curr[type];
            multiplier += curr[type];
          }
          for (let i = 0; i < crafting[res].add.length; i++) {
            let curr = crafting[res].add[i];
            add_bd[curr.name] = curr[type] + (add_bd[curr.name] ? add_bd[curr.name] : 0);
            multiplier += curr[type];
          }
          multi_bd[loc(`craft_tools`)] = multiplier - 1;
          for (let i = 0; i < crafting.general.multi.length; i++) {
            let curr = crafting.general.multi[i];
            multi_bd[curr.name] = +curr[type] - 1;
            multiplier *= curr[type];
          }
          for (let i = 0; i < crafting[res].multi.length; i++) {
            let curr = crafting[res].multi[i];
            multi_bd[curr.name] = curr[type] * (1 + (multi_bd[curr.name] ? +multi_bd[curr.name] : 0)) - 1;
            multiplier *= curr[type];
          }
        }
        Object.keys(add_bd).forEach(function(add) {
          add_bd[add] = (+add_bd[add] * 100).toFixed(2) + "%";
        });
        Object.keys(multi_bd).forEach(function(multi) {
          multi_bd[multi] = (+multi_bd[multi] * 100).toFixed(2) + "%";
        });
        let craft_total = {
          multiplier,
          add_bd,
          multi_bd
        };
        return craft_total;
      }
    };
  }();
  function initResourceTabs(tab) {
    if (tab) {
      switch (tab) {
        case "market":
          initMarket();
          break;
        case "storage":
          initStorage();
          break;
        case "ejector":
          initEjector();
          break;
        case "supply":
          initSupply();
          break;
        case "alchemy":
          initAlchemy();
          break;
      }
    } else {
      initMarket();
      initStorage();
      initEjector();
      initSupply();
      initAlchemy();
    }
  }
  function drawResourceTab(tab) {
    if (tab === "market") {
      if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
        return;
      }
      initResourceTabs("market");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          let tradable = tmp_vars.resource[name].tradable;
          if (tradable) {
            var market_item = $(`<div id="market-${name}" class="market-item" v-show="r.display"></div>`);
            $("#market").append(market_item);
            marketItem(`#market-${name}`, market_item, name, color, true);
          }
        });
      }
      tradeSummery();
    } else if (tab === "storage") {
      if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 1)) {
        return;
      }
      initResourceTabs("storage");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          let stackable = tmp_vars.resource[name].stackable;
          if (stackable) {
            var market_item = $(`<div id="stack-${name}" class="market-item" v-show="display"></div>`);
            $("#resStorage").append(market_item);
            containerItem(`#stack-${name}`, market_item, name, color, true);
          }
        });
      }
      tradeSummery();
    } else if (tab === "ejector") {
      if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 2)) {
        return;
      }
      initResourceTabs("ejector");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          if (atomic_mass[name]) {
            loadEjector(name, color);
          }
        });
      }
    } else if (tab === "supply") {
      if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 3)) {
        return;
      }
      initResourceTabs("supply");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          if (supplyValue[name]) {
            loadSupply(name, color);
          }
        });
      }
    } else if (tab === "alchemy") {
      if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 4)) {
        return;
      }
      initResourceTabs("alchemy");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          let tradable = tmp_vars.resource[name].tradable;
          if (tradeRatio[name] && global.race.universe === "magic") {
            global["resource"][name]["basic"] = tradable;
            loadAlchemy(name, color, tradable);
          }
        });
      }
    }
  }
  function defineResources(wiki) {
    if (global.race.species === "protoplasm") {
      let base = 100;
      if (global.stats.achieve["mass_extinction"] && global.stats.achieve["mass_extinction"].l > 1) {
        base += 50 * (global.stats.achieve["mass_extinction"].l - 1);
      }
      loadResource("RNA", wiki, base, 1, false);
      loadResource("DNA", wiki, base, 1, false);
    }
    loadResource("Money", wiki, 1e3, 1, false, false, "success");
    loadResource(global.race.species, wiki, 0, 0, false, false, "warning");
    loadResource("Slave", wiki, 0, 0, false, false, "warning");
    loadResource("Authority", wiki, 0, 0, false, false, "warning");
    loadResource("Mana", wiki, 0, 1, false, false, "warning");
    loadResource("Energy", wiki, 0, 0, false, false, "warning");
    loadResource("Sus", wiki, 0, 0, false, false, "warning");
    loadResource("Knowledge", wiki, 100, 1, false, false, "warning");
    loadResource("Omniscience", wiki, 100, 1, false, false, "warning");
    loadResource("Zen", wiki, 0, 0, false, false, "warning");
    loadResource("Crates", wiki, 0, 0, false, false, "warning");
    loadResource("Containers", wiki, 0, 0, false, false, "warning");
    loadResource("Food", wiki, 250, 1, true, true);
    loadResource("Lumber", wiki, 200, 1, true, true);
    loadResource("Chrysotile", wiki, 200, 1, true, true);
    loadResource("Stone", wiki, 200, 1, true, true);
    loadResource("Crystal", wiki, 200, 1, true, true);
    loadResource("Useless", wiki, -2, 0, false, false);
    loadResource("Furs", wiki, 100, 1, true, true);
    loadResource("Copper", wiki, 100, 1, true, true);
    loadResource("Iron", wiki, 100, 1, true, true);
    loadResource("Aluminium", wiki, 50, 1, true, true);
    loadResource("Cement", wiki, 100, 1, true, true);
    loadResource("Coal", wiki, 50, 1, true, true);
    loadResource("Oil", wiki, 0, 1, true, false);
    loadResource("Uranium", wiki, 10, 1, true, false);
    loadResource("Steel", wiki, 50, 1, true, true);
    loadResource("Titanium", wiki, 50, 1, true, true);
    loadResource("Alloy", wiki, 50, 1, true, true);
    loadResource("Polymer", wiki, 50, 1, true, true);
    loadResource("Iridium", wiki, 0, 1, true, true);
    loadResource("Helium_3", wiki, 0, 1, true, false);
    loadResource("Water", wiki, 0, 1, false, false, "advanced");
    loadResource("Deuterium", wiki, 0, 1, false, false, "advanced");
    loadResource("Neutronium", wiki, 0, 1, false, false, "advanced");
    loadResource("Adamantite", wiki, 0, 1, false, true, "advanced");
    loadResource("Infernite", wiki, 0, 1, false, false, "advanced");
    loadResource("Elerium", wiki, 1, 1, false, false, "advanced");
    loadResource("Nano_Tube", wiki, 0, 1, false, false, "advanced");
    loadResource("Graphene", wiki, 0, 1, false, true, "advanced");
    loadResource("Stanene", wiki, 0, 1, false, true, "advanced");
    loadResource("Bolognium", wiki, 0, 1, false, true, "advanced");
    loadResource("Vitreloy", wiki, 0, 1, false, true, "advanced");
    loadResource("Orichalcum", wiki, 0, 1, false, true, "advanced");
    loadResource("Asphodel_Powder", wiki, 0, 1, false, false, "advanced");
    loadResource("Elysanite", wiki, 0, 1, false, true, "advanced");
    loadResource("Unobtainium", wiki, 0, 1, false, false, "advanced");
    loadResource("Materials", wiki, 0, 1, false, false, "advanced");
    loadResource("Horseshoe", wiki, -2, 0, false, false, "advanced");
    loadResource("Nanite", wiki, 0, 1, false, false, "advanced");
    loadResource("Genes", wiki, -2, 0, false, false, "advanced");
    loadResource("Soul_Gem", wiki, -2, 0, false, false, "advanced");
    loadResource("Plywood", wiki, -1, 0, false, false, "danger");
    loadResource("Brick", wiki, -1, 0, false, false, "danger");
    loadResource("Wrought_Iron", wiki, -1, 0, false, false, "danger");
    loadResource("Sheet_Metal", wiki, -1, 0, false, false, "danger");
    loadResource("Mythril", wiki, -1, 0, false, false, "danger");
    loadResource("Aerogel", wiki, -1, 0, false, false, "danger");
    loadResource("Nanoweave", wiki, -1, 0, false, false, "danger");
    loadResource("Scarletite", wiki, -1, 0, false, false, "danger");
    loadResource("Quantium", wiki, -1, 0, false, false, "danger");
    loadResource("Corrupt_Gem", wiki, -2, 0, false, false, "caution");
    loadResource("Codex", wiki, -2, 0, false, false, "caution");
    loadResource("Cipher", wiki, 0, 1, false, false, "caution");
    loadResource("Demonic_Essence", wiki, -2, 0, false, false, "caution");
    loadResource("Blessed_Essence", wiki, -2, 0, false, false, "caution");
    if (wiki) {
      return;
    }
    loadSpecialResource("Blood_Stone", "caution");
    loadSpecialResource("Artifact", "caution");
    loadResource("Knockoff", wiki, -2, 0, false, false, "special");
    loadSpecialResource("Plasmid");
    loadSpecialResource("AntiPlasmid");
    loadSpecialResource("Supercoiled");
    loadSpecialResource("Phage");
    loadSpecialResource("Dark");
    loadSpecialResource("Harmony");
    loadSpecialResource("AICore");
  }
  function tradeSummery() {
    if (global.race.species !== "protoplasm") {
      loadRouteCounter();
      initGalaxyTrade();
      loadContainerCounter();
    }
  }
  function loadResource(name, wiki, max, rate, tradable, stackable, color) {
    color = color || "info";
    if (!global.resource[name]) {
      global.resource[name] = {};
    }
    setResourceName(name);
    if (global.race["artifical"]) {
      if (name === "Food") {
        stackable = false;
      }
    }
    if (wiki) {
      return;
    }
    if (!global.resource[name].hasOwnProperty("display")) {
      global.resource[name]["display"] = false;
    }
    if (!global.resource[name].hasOwnProperty("value")) {
      global.resource[name]["value"] = global.race["truepath"] ? resource_values[name] * 2 : resource_values[name];
    }
    if (!global.resource[name].hasOwnProperty("amount")) {
      global.resource[name]["amount"] = 0;
    }
    if (!global.resource[name].hasOwnProperty("max")) {
      global.resource[name]["max"] = max;
    }
    if (!global.resource[name].hasOwnProperty("diff")) {
      global.resource[name]["diff"] = 0;
    }
    if (!global.resource[name].hasOwnProperty("delta")) {
      global.resource[name]["delta"] = 0;
    }
    if (!global.resource[name].hasOwnProperty("rate")) {
      global.resource[name]["rate"] = rate;
    }
    if (!global.settings.resBar.hasOwnProperty(name)) {
      global.settings.resBar[name] = true;
    }
    if (!global.resource[name].hasOwnProperty("bar")) {
      global.resource[name]["bar"] = global.settings.resBar[name];
    }
    if (name === "Mana") {
      global["resource"][name]["gen"] = 0;
      global["resource"][name]["gen_d"] = 0;
    }
    global["resource"][name]["stackable"] = stackable;
    if (!global["resource"][name]["crates"]) {
      global["resource"][name]["crates"] = 0;
    }
    if (!global["resource"][name]["containers"]) {
      global["resource"][name]["containers"] = 0;
    }
    if (!global["resource"][name]["trade"] && tradable) {
      global["resource"][name]["trade"] = 0;
    }
    var res_container;
    if (global.resource[name].max === -1 || global.resource[name].max === -2) {
      res_container = $(`<div id="res${name}" class="resource crafted" v-show="display"><div><h3 class="res has-text-${color}">{{ name | namespace }}</h3><span id="cnt${name}" class="count">{{ amount | diffSize }}</span></div></div>`);
    } else {
      res_container = $(`<div id="res${name}" class="resource${global.settings.resBar[name] ? ` showBar` : ``}" v-show="display" :style="{ '--percent-full': (bar && max > 0 ? (amount/max)*100 : 0) + '%' }"><div><h3 class="res has-text-${color} bar" @click="toggle('${name}')">{{ name | namespace }}</h3><span id="cnt${name}" class="count">{{ amount | size }} / {{ max | size }}</span></div></div>`);
    }
    if (stackable) {
      res_container.append($(`<span><span id="con${name}" v-if="showTrigger()" class="interact has-text-success" @click="trigModal" role="button" aria-label="Open crate management for ${global.resource[name].name}">+</span></span>`));
    } else if (max !== -1 || max === -1 && rate === 0 && global.race["no_craft"] || name === "Scarletite" || name === "Quantium") {
      res_container.append($("<span></span>"));
    }
    let infopops = false;
    if (rate !== 0 || max === -1 && rate === 0 && global.race["no_craft"] || name === "Scarletite" || name === "Quantium") {
      res_container.append($(`<span id="inc${name}" class="diff" :aria-label="resRate('${name}')">{{ diff | diffSize }} /s</span>`));
    } else if (max === -1 && !global.race["no_craft"] && name !== "Scarletite" && name !== "Quantium") {
      let craft = $('<span class="craftable"></span>');
      res_container.append(craft);
      let inc = [1, 5];
      for (let i = 0; i < inc.length; i++) {
        craft.append($(`<span id="inc${name}${inc[i]}"><a @click="craft('${name}',${inc[i]})" aria-label="craft ${inc[i]} ${global.resource[name].name}" role="button">+<span class="craft" data-val="${inc[i]}">${inc[i]}</span></a></span>`));
      }
      craft.append($(`<span id="inc${name}A"><a @click="craft('${name}','A')" aria-label="craft max ${global.resource[name].name}" role="button">+<span class="craft" data-val="${"A"}">A</span></a></span>`));
      infopops = true;
    } else if (global.race["fasting"] && name === global.race.species) {
      res_container.append($(`<span id="inc${name}" class="diff" :aria-label="resRate('${name}')">{{ diff | diffSize }}</span>`));
    } else {
      res_container.append($(`<span></span>`));
    }
    $("#resources").append(res_container);
    var modal = {
      template: '<div id="modalBox" class="modalBox"></div>'
    };
    vBind({
      el: `#res${name}`,
      data: global["resource"][name],
      filters: {
        size: function(value) {
          return value ? sizeApproximation(value, 0) : value;
        },
        diffSize: function(value) {
          if (name === "Horseshoe" && !global.race["hooved"] && eventActive("fool", 2023)) {
            value = 5;
          }
          return sizeApproximation(value, 2);
        },
        namespace(val) {
          return val.replace("_", " ");
        }
      },
      methods: {
        resRate(n) {
          let diff = sizeApproximation(global.resource[n].diff, 2);
          return `${global.resource[name].name} ${diff} per second`;
        },
        trigModal() {
          this.$buefy.modal.open({
            parent: this,
            component: modal
          });
          var checkExist = setInterval(function() {
            if ($("#modalBox").length > 0) {
              clearInterval(checkExist);
              drawModal(name, color);
            }
          }, 50);
        },
        showTrigger() {
          return global.resource.Crates.display;
        },
        craft(res, vol) {
          if (!global.race["no_craft"]) {
            let craft_bonus = craftingRatio(res, "manual").multiplier;
            let craft_costs = craftCost(true);
            let volume = Math.floor(global.resource[craft_costs[res][0].r].amount / craft_costs[res][0].a);
            for (let i = 1; i < craft_costs[res].length; i++) {
              let temp = Math.floor(global.resource[craft_costs[res][i].r].amount / craft_costs[res][i].a);
              if (temp < volume) {
                volume = temp;
              }
            }
            if (vol !== "A") {
              let total = vol * keyMultiplier();
              if (total < volume) {
                volume = total;
              }
            }
            for (let i = 0; i < craft_costs[res].length; i++) {
              let num = volume * craft_costs[res][i].a;
              global.resource[craft_costs[res][i].r].amount -= num;
            }
            global.resource[res].amount += volume * craft_bonus;
          }
        },
        craftCost(res, vol) {
          let costs = "";
          let craft_costs = craftCost(true);
          for (let i = 0; i < craft_costs[res].length; i++) {
            let num = vol * craft_costs[res][i].a * keyMultiplier();
            costs = costs + `<div>${global.resource[craft_costs[res][i].r].name} ${num}</div>`;
          }
          return costs;
        },
        toggle(res) {
          if (global.settings.resBar[res]) {
            global.settings.resBar[res] = false;
            $(`#res${name}`).removeClass("showBar");
          } else {
            global.settings.resBar[res] = true;
            $(`#res${name}`).addClass("showBar");
          }
          global.resource[name]["bar"] = global.settings.resBar[name];
        }
      }
    });
    breakdownPopover(`cnt${name}`, name, "c");
    if (infopops) {
      let inc = [1, 5, "A"];
      for (let i = 0; i < inc.length; i++) {
        let extra = function() {
          let popper = $(`<div></div>`);
          let res = name;
          let vol = inc[i];
          let bonus = +(craftingRatio(res, "manual").multiplier * 100).toFixed(0);
          popper.append($(`<div class="has-text-info">${loc("manual_crafting_hover_bonus", [bonus.toLocaleString(), global.resource[res].name])}</div>`));
          let craft_costs = craftCost(true);
          let crafts = $(`<div><span class="has-text-success">${loc("manual_crafting_hover_craft")} </span></div>`);
          let num_crafted = 0;
          if (typeof vol !== "number") {
            num_crafted = global.resource[craft_costs[res][0].r].amount / craft_costs[res][0].a;
            if (craft_costs[res].length > 1) {
              for (let i2 = 1; i2 < craft_costs[res].length; i2++) {
                let curr_max = global.resource[craft_costs[res][i2].r].amount / craft_costs[res][i2].a;
                if (curr_max < num_crafted) {
                  num_crafted = curr_max;
                }
              }
            }
            crafts.append($(`<span class="has-text-advanced">${sizeApproximation(bonus / 100 * num_crafted, 1)} ${global.resource[res].name}</span>`));
          } else {
            num_crafted = keyMultiplier() * vol;
            let total_crafted = sizeApproximation(bonus / 100 * num_crafted, 1);
            crafts.append($(`<span class="has-text-advanced"><span class="craft" data-val="${sizeApproximation(bonus / 100 * vol)}">${total_crafted}</span> ${global.resource[res].name}</span>`));
          }
          let costs = $(`<div><span class="has-text-danger">${loc("manual_crafting_hover_use")} </span></div>`);
          for (let i2 = 0; i2 < craft_costs[res].length; i2++) {
            costs.append($(`<span class="craft-elm has-text-caution">${sizeApproximation(num_crafted * craft_costs[res][i2].a, 1)} ${global.resource[craft_costs[res][i2].r].name}</span>`));
            if (i2 + 1 < craft_costs[res].length) {
              costs.append($(`<span>, </span>`));
            }
          }
          popper.append(crafts);
          popper.append(costs);
          return popper;
        };
        craftingPopover(`inc${name}${inc[i]}`, name, "manual", extra);
      }
    }
    if (stackable) {
      popover(`con${name}`, function() {
        var popper = $(`<div>${loc("resource_Crates_plural")} ${global.resource[name].crates}</div>`);
        if (global.tech["steel_container"]) {
          popper.append($(`<div>${loc("resource_Containers_plural")} ${global.resource[name].containers}</div>`));
        }
        return popper;
      });
    }
    if ((name !== global.race.species || global.race["fasting"]) && name !== "Crates" && name !== "Containers" && max !== -1) {
      breakdownPopover(`inc${name}`, name, "p");
    } else if (max === -1) {
      craftingPopover(`inc${name}`, name, "auto");
    }
    $(`#res${name}`).on("mouseover", function() {
      $(`.res-${name}`).each(function() {
        if (global.resource[name].amount >= $(this).attr(`data-${name}`)) {
          $(this).addClass("hl-ca");
        } else {
          $(this).addClass("hl-cna");
        }
      });
    });
    $(`#res${name}`).on("mouseout", function() {
      $(`.res-${name}`).each(function() {
        $(this).removeClass("hl-ca");
        $(this).removeClass("hl-cna");
      });
    });
    if (typeof tmp_vars["resource"] === "undefined") {
      tmp_vars["resource"] = {};
    }
    tmp_vars.resource[name] = {
      color,
      tradable,
      stackable,
      temp_max: 0
    };
  }
  function setResourceName(name) {
    if (name === global.race.species) {
      global.resource[name].name = flib("name");
    } else {
      global.resource[name].name = name === "Money" ? "$" : loc(`resource_${name}_name`);
    }
    if (name === "Useless") {
      if (!global.resource.Lumber.display) {
        global.resource.Useless.name = loc("resource_Lumber_name");
      } else if (!global.resource.Chrysotile.display) {
        global.resource.Useless.name = loc("resource_Chrysotile_name");
      } else if (!global.resource.Crystal.display) {
        global.resource.Useless.name = loc("resource_Crystal_name");
      } else {
        global.resource.Useless.name = loc("resource_Bronze_name");
      }
    }
    if (eventActive("fool", 2022)) {
      switch (name) {
        case "Lumber":
          global["resource"][name].name = loc("resource_Stone_name");
          break;
        case "Stone":
          global["resource"][name].name = loc("resource_Lumber_name");
          break;
        case "Copper":
          global["resource"][name].name = loc("resource_Iron_name");
          break;
        case "Iron":
          global["resource"][name].name = loc("resource_Copper_name");
          break;
        case "Steel":
          global["resource"][name].name = loc("resource_Titanium_name");
          break;
        case "Titanium":
          global["resource"][name].name = loc("resource_Steel_name");
          break;
        case "Coal":
          global["resource"][name].name = loc("resource_Oil_name");
          break;
        case "Oil":
          global["resource"][name].name = loc("resource_Coal_name");
          break;
        case "Alloy":
          global["resource"][name].name = loc("resource_Polymer_name");
          break;
        case "Polymer":
          global["resource"][name].name = loc("resource_Alloy_name");
          break;
        case "Graphene":
          global["resource"][name].name = loc("resource_Stanene_name");
          break;
        case "Stanene":
          global["resource"][name].name = loc("resource_Graphene_name");
          break;
        case "Plywood":
          global["resource"][name].name = loc("resource_Brick_name");
          break;
        case "Brick":
          global["resource"][name].name = loc("resource_Plywood_name");
          break;
        case "Genes":
          global["resource"][name].name = loc("resource_Soul_Gem_name");
          break;
        case "Soul_Gem":
          global["resource"][name].name = loc("resource_Genes_name");
          break;
        case "Slave":
          global["resource"][name].name = loc("resource_Peon_name");
          break;
      }
    }
    if (name === "Horseshoe") {
      global.resource[name].name = hoovedRename();
    }
    if (global.race["artifical"]) {
      if (name === "Genes") {
        global.resource[name].name = loc(`resource_Program_name`);
      }
    }
    if (global.race["sappy"]) {
      switch (name) {
        case "Stone":
          global["resource"][name].name = loc("resource_Amber_name");
          break;
      }
    } else if (global.race["flier"]) {
      switch (name) {
        case "Stone":
          global["resource"][name].name = loc("resource_Clay_name");
          break;
        case "Brick":
          global["resource"][name].name = loc("resource_Mud_Brick_name");
          break;
      }
    }
    if (global.race["soul_eater"]) {
      switch (name) {
        case "Food":
          global["resource"][name].name = loc("resource_Souls_name");
          break;
      }
    }
    if (global.race["evil"]) {
      switch (name) {
        case "Lumber":
          global["resource"][name].name = loc("resource_Bones_name");
          break;
        case "Furs":
          global["resource"][name].name = loc("resource_Flesh_name");
          break;
        case "Plywood":
          global["resource"][name].name = loc("resource_Boneweave_name");
          break;
      }
    }
    if (global.race["artifical"]) {
      switch (name) {
        case "Food":
          global["resource"][name].name = loc("resource_Signal_name");
          break;
      }
    }
    let hallowed2 = eventActive("halloween");
    if (hallowed2.active) {
      switch (name) {
        case "Food":
          global["resource"][name].name = loc("resource_Candy_name");
          break;
        case "Lumber":
          global["resource"][name].name = loc("resource_Bones_name");
          break;
        case "Stone":
          global["resource"][name].name = loc("resource_RockCandy_name");
          break;
        case "Furs":
          global["resource"][name].name = loc("resource_Webs_name");
          break;
        case "Plywood":
          global["resource"][name].name = loc("resource_Boneweave_name");
          break;
        case "Brick":
          global["resource"][name].name = loc("resource_Tombstone_name");
          break;
        case "Soul_Gem":
          global["resource"][name].name = loc("resource_CandyCorn_name");
          break;
        case "Slave":
          global["resource"][name].name = loc("events_halloween_ghoul");
          break;
      }
    }
  }
  function loadSpecialResource(name, color) {
    if ($(`#res${name}`).length) {
      let bind = $(`#res${name}`);
      bind.detach();
      $("#resources").append(bind);
      return;
    }
    color = color || "special";
    var res_container = $(`<div id="res${name}" class="resource" v-show="count"><div><span class="res has-text-${color}">${loc(`resource_${name}_name`)}</span><span class="count">{{ count | round }}</span></div></div>`);
    $("#resources").append(res_container);
    vBind({
      el: `#res${name}`,
      data: global.prestige[name],
      filters: {
        round(n) {
          return n ? sizeApproximation(n, 3, false, true) : n;
        }
      }
    });
    if (name === "Artifact" || name === "Blood_Stone") {
      return;
    }
    popover(`res${name}`, function() {
      let desc = $(`<div></div>`);
      switch (name) {
        case "Plasmid":
          {
            let potential = global.race.p_mutation + (global.race["wish"] && global.race["wishStats"] ? global.race.wishStats.plas : 0);
            let active = global.race["no_plasmid"] ? Math.min(potential, global.prestige.Plasmid.count) : global.prestige.Plasmid.count;
            desc.append($(`<span>${loc(`resource_${name}_desc`, [active, +(plasmidBonus("plasmid") * 100).toFixed(2)])}</span>`));
            if (global.genes["store"] && (global.race.universe !== "antimatter" || global.genes["bleed"] >= 3)) {
              let plasmidSpatial = spatialReasoning(1, "plasmid");
              if (plasmidSpatial > 1) {
                desc.append($(`<span> ${loc(`resource_Plasmid_desc2`, [+((plasmidSpatial - 1) * 100).toFixed(2)])}</span>`));
              }
            }
          }
          break;
        case "AntiPlasmid":
          {
            desc.append($(`<span>${loc(`resource_${name}_desc`, [global.prestige.AntiPlasmid.count, +(plasmidBonus("antiplasmid") * 100).toFixed(2)])}</span>`));
            let antiSpatial = spatialReasoning(1, "anti");
            if (global.genes["store"] && (global.race.universe === "antimatter" || global.genes["bleed"] >= 3)) {
              if (antiSpatial > 1) {
                desc.append($(`<span> ${loc(`resource_Plasmid_desc2`, [+((antiSpatial - 1) * 100).toFixed(2)])}</span>`));
              }
            }
          }
          break;
        case "Phage":
          {
            desc.append($(`<span>${loc(global.prestige.AntiPlasmid.count > 0 ? `resource_Phage_desc2` : `resource_Phage_desc`, [250 + global.prestige.Phage.count])}</span>`));
            let phageSpatial = spatialReasoning(1, "phage");
            if (global.genes["store"] && global.genes["store"] >= 4) {
              if (phageSpatial > 1) {
                desc.append($(`<span> ${loc(`resource_Plasmid_desc2`, [+((phageSpatial - 1) * 100).toFixed(2)])}</span>`));
              }
            }
          }
          break;
        case "Dark":
          {
            switch (global.race.universe) {
              case "standard":
                desc.append($(`<span>${loc(`resource_${name}_desc_s`, [+((darkEffect("standard") - 1) * 100).toFixed(2)])}</span>`));
                break;
              case "evil":
                desc.append($(`<span>${loc(`resource_${name}_desc_e`, [+((darkEffect("evil") - 1) * 100).toFixed(2), +((darkEffect("evil", true) - 1) * 100).toFixed(2)])}</span>`));
                break;
              case "micro":
                desc.append($(`<span>${loc(`resource_${name}_desc_m`, [darkEffect("micro", false), darkEffect("micro", true)])}</span>`));
                break;
              case "heavy":
                let hDE = darkEffect("heavy");
                let space2 = 0.25 + 0.5 * hDE;
                let int = 0.2 + 0.3 * hDE;
                desc.append($(`<span>${loc(`resource_${name}_desc_h`, [+(space2 * 100).toFixed(4), +(int * 100).toFixed(4)])}</span>`));
                break;
              case "antimatter":
                desc.append($(`<span>${loc(`resource_${name}_desc_a`, [+((darkEffect("antimatter") - 1) * 100).toFixed(2)])}</span>`));
                break;
              case "magic":
                desc.append($(`<span>${loc(`resource_${name}_desc_mg`, [loc("resource_Mana_name"), +((darkEffect("magic") - 1) * 100).toFixed(2)])}</span>`));
                break;
            }
          }
          break;
        case "Harmony":
          desc.append($(`<span>${loc(`resource_${name}_desc`, [global.race.universe === "standard" ? 0.1 : 1, harmonyEffect()])}</span>`));
          break;
        case "AICore":
          {
            let bonus = +((1 - 0.99 ** global.prestige.AICore.count) * 100).toFixed(2);
            desc.append($(`<span>${loc(`resource_${name}_desc`, [bonus])}</span>`));
          }
          break;
        case "Supercoiled":
          {
            let coiled = global.prestige.Supercoiled.count;
            let bonus = coiled / (coiled + 5e3) * 100;
            desc.append($(`<span>${loc(`resource_${name}_desc`, [+bonus.toFixed(2)])}</span>`));
            if (global.genes.hasOwnProperty("trader") && global.genes.trader >= 2) {
              let trade = coiled / (coiled + 500) * 100;
              desc.append($(`<span> ${loc(`resource_${name}_trade_desc`, [+trade.toFixed(2)])}</span>`));
            }
          }
          break;
      }
      return desc;
    });
  }
  function exportRouteEnabled(route) {
    let routeCap = global.tech.currency >= 6 ? -1e6 : global.tech.currency >= 4 ? -100 : -25;
    if (global.race["banana"]) {
      let exporting = false;
      Object.keys(global.resource).forEach(function(res) {
        if (global.resource[res].hasOwnProperty("trade") && global.resource[res].trade < 0) {
          exporting = res;
        }
      });
      if (exporting && exporting !== route) {
        return false;
      }
      routeCap = global.tech.currency >= 6 ? -1e6 : global.tech.currency >= 4 ? -25 : -10;
    }
    if (global.resource[route].trade <= routeCap) {
      return false;
    }
    return true;
  }
  function importRouteEnabled(route) {
    let routeCap = global.tech.currency >= 6 ? 1e6 : global.tech.currency >= 4 ? 100 : 25;
    if (global.resource[route].trade >= routeCap) {
      return false;
    }
    return true;
  }
  function marketItem(mount, market_item, name, color, full) {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
      return;
    }
    if ((global.race["artifical"] || global.race["fasting"]) && name === "Food") {
      return;
    }
    if (full) {
      market_item.append($(`<h3 class="res has-text-${color}">{{ r.name | namespace }}</h3>`));
    }
    if (!global.race["no_trade"]) {
      market_item.append($(`<span class="buy"><span class="has-text-success">${loc("resource_market_buy")}</span></span>`));
      market_item.append($(`<span role="button" class="order" @click="purchase('${name}')">\${{ r.value | buy }}</span>`));
      market_item.append($(`<span class="sell"><span class="has-text-danger">${loc("resource_market_sell")}</span></span>`));
      market_item.append($(`<span role="button" class="order" @click="sell('${name}')">\${{ r.value | sell }}</span>`));
    }
    if (full && (global.race["banana"] && name === "Food" || global.tech["trade"] && !global.race["terrifying"])) {
      let trade = $(`<span class="trade" v-show="m.active"><span class="has-text-warning">${loc("resource_market_routes")}</span></span>`);
      market_item.append(trade);
      trade.append($(`<b-tooltip :label="aSell('${name}')" position="is-bottom" size="is-small" multilined animated><span role="button" aria-label="export ${global.resource[name].name}" class="sub has-text-danger" @click="autoSell('${name}')"><span>-</span></span></b-tooltip>`));
      trade.append($(`<span class="current" v-html="$options.filters.trade(r.trade)"></span>`));
      trade.append($(`<b-tooltip :label="aBuy('${name}')" position="is-bottom" size="is-small" multilined animated><span role="button" aria-label="import ${global.resource[name].name}" class="add has-text-success" @click="autoBuy('${name}')"><span>+</span></span></b-tooltip>`));
      trade.append($(`<span role="button" class="zero has-text-advanced" @click="zero('${name}')">${loc("cancel_routes")}</span>`));
      tradeRouteColor(name);
    }
    vBind({
      el: mount,
      data: {
        r: global.resource[name],
        m: global.city.market
      },
      methods: {
        aSell(res) {
          let unit = tradeRatio[res] === 1 ? loc("resource_market_unit") : loc("resource_market_units");
          let price = tradeSellPrice(res);
          let rate = tradeRatio[res];
          if (global.stats.achieve.hasOwnProperty("trade")) {
            let rank = global.stats.achieve.trade.l;
            if (rank > 5) {
              rank = 5;
            }
            rate *= 1 - rank / 100;
          }
          rate = +rate.toFixed(3);
          return loc("resource_market_auto_sell_desc", [rate, unit, price]);
        },
        aBuy(res) {
          let rate = tradeRatio[res];
          let dealVal = govActive("dealmaker", 0);
          if (dealVal) {
            rate *= 1 + dealVal / 100;
          }
          if (global.race["persuasive"]) {
            rate *= 1 + global.race["persuasive"] / 100;
          }
          if (astroSign === "capricorn") {
            rate *= 1 + astroVal("capricorn")[0] / 100;
          }
          if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.c) {
            let trade = 70 * (traits.ocular_power.vars()[1] / 100);
            rate *= 1 + trade / 100;
          }
          if (global.race["devious"]) {
            rate *= 1 - traits.devious.vars()[0] / 100;
          }
          if (global.race["merchant"]) {
            rate *= 1 + traits.merchant.vars()[1] / 100;
          }
          let fathom = fathomCheck("goblin");
          if (fathom > 0) {
            rate *= 1 + traits.merchant.vars(1)[1] / 100 * fathom;
          }
          if (global.genes["trader"]) {
            let mastery = calc_mastery();
            rate *= 1 + mastery / 100;
          }
          if (global.stats.achieve.hasOwnProperty("trade")) {
            let rank = global.stats.achieve.trade.l;
            if (rank > 5) {
              rank = 5;
            }
            rate *= 1 + rank / 50;
          }
          if (global.race["truepath"]) {
            rate *= 1 - global.civic.foreign.gov3.hstl / 101;
          }
          rate = +rate.toFixed(3);
          let unit = rate === 1 ? loc("resource_market_unit") : loc("resource_market_units");
          let price = tradeBuyPrice(res);
          return loc("resource_market_auto_buy_desc", [rate, unit, price]);
        },
        purchase(res) {
          if (!global.race["no_trade"] && !global.settings.pause) {
            let qty = global.city.market.qty;
            let value = global.resource[res].value;
            if (global.race["arrogant"]) {
              value *= 1 + traits.arrogant.vars()[0] / 100;
            }
            if (global.race["conniving"]) {
              value *= 1 - traits.conniving.vars()[0] / 100;
            }
            let fathom = fathomCheck("imp");
            if (fathom > 0) {
              value *= 1 - traits.conniving.vars(1)[0] / 100 * fathom;
            }
            let amount = Math.floor(Math.min(
              qty,
              global.resource.Money.amount / value,
              global.resource[res].max - global.resource[res].amount
            ));
            if (amount > 0) {
              global.resource[res].amount += amount;
              global.resource.Money.amount -= Math.round(value * amount);
              global.resource[res].value += Number((amount / Math.rand(1e3, 1e4)).toFixed(2));
            }
          }
        },
        sell(res) {
          if (!global.race["no_trade"] && !global.settings.pause) {
            let qty = global.city.market.qty;
            let divide = 4;
            if (global.race["merchant"]) {
              divide *= 1 - traits.merchant.vars()[0] / 100;
            }
            let gobFathom = fathomCheck("goblin");
            if (gobFathom > 0) {
              divide *= 1 - traits.merchant.vars(1)[0] / 100 * gobFathom;
            }
            if (global.race["asymmetrical"]) {
              divide *= 1 + traits.asymmetrical.vars()[0] / 100;
            }
            if (global.race["conniving"]) {
              divide *= 1 - traits.conniving.vars()[1] / 100;
            }
            let impFathom = fathomCheck("imp");
            if (impFathom > 0) {
              divide *= 1 - traits.conniving.vars(1)[1] / 100 * impFathom;
            }
            let price = global.resource[res].value / divide;
            let amount = Math.floor(Math.min(
              qty,
              global.resource[res].amount,
              (global.resource.Money.max - global.resource.Money.amount) / price
            ));
            if (amount > 0) {
              global.resource[res].amount -= amount;
              global.resource.Money.amount += Math.round(price * amount);
              global.resource[res].value -= Number((amount / Math.rand(1e3, 1e4)).toFixed(2));
              if (global.resource[res].value < Number(resource_values[res] / 2)) {
                global.resource[res].value = Number(resource_values[res] / 2);
              }
            }
          }
        },
        autoBuy(res, keyMult = keyMultiplier()) {
          for (let i = 0; i < keyMult; i++) {
            if (govActive("dealmaker", 0)) {
              let exporting = 0;
              let importing = 0;
              Object.keys(global.resource).forEach(function(res2) {
                if (global.resource[res2].hasOwnProperty("trade") && global.resource[res2].trade < 0) {
                  exporting -= global.resource[res2].trade;
                }
                if (global.resource[res2].hasOwnProperty("trade") && global.resource[res2].trade > 0) {
                  importing += global.resource[res2].trade;
                }
              });
              if (exporting <= importing) {
                break;
              }
            }
            if (global.resource[res].trade >= 0) {
              if (importRouteEnabled(res) && global.city.market.trade < global.city.market.mtrade) {
                global.city.market.trade++;
                global.resource[res].trade++;
              } else {
                break;
              }
            } else {
              global.city.market.trade--;
              global.resource[res].trade++;
            }
          }
          tradeRouteColor(res);
        },
        autoSell(res, keyMult = keyMultiplier()) {
          for (let i = 0; i < keyMult; i++) {
            if (global.resource[res].trade <= 0) {
              if (exportRouteEnabled(res) && global.city.market.trade < global.city.market.mtrade) {
                global.city.market.trade++;
                global.resource[res].trade--;
              } else {
                break;
              }
            } else {
              global.city.market.trade--;
              global.resource[res].trade--;
            }
          }
          tradeRouteColor(res);
        },
        zero(res) {
          if (global.resource[res].trade > 0) {
            this.autoSell(res, global.resource[res].trade);
          } else if (global.resource[res].trade < 0) {
            this.autoBuy(res, -global.resource[res].trade);
          }
        }
      },
      filters: {
        buy(value) {
          if (global.race["arrogant"]) {
            value *= 1 + traits.arrogant.vars()[0] / 100;
          }
          return sizeApproximation(value * global.city.market.qty, 0);
        },
        sell(value) {
          let divide = 4;
          if (global.race["merchant"]) {
            divide *= 1 - traits.merchant.vars()[0] / 100;
          }
          let fathom = fathomCheck("goblin");
          if (fathom > 0) {
            divide *= 1 - traits.merchant.vars(1)[0] / 100 * fathom;
          }
          if (global.race["devious"]) {
            divide *= 1 - traits.devious.vars()[0] / 100;
          }
          if (global.race["asymmetrical"]) {
            divide *= 1 + traits.asymmetrical.vars()[0] / 100;
          }
          return sizeApproximation(value * global.city.market.qty / divide, 0);
        },
        trade(val) {
          if (name === "Stone" && (val === 31 || val === -31)) {
            let trick = trickOrTreat(3, 12, false);
            if (trick.length > 0) {
              return trick;
            }
          }
          if (val < 0) {
            val = 0 - val;
            return `-${val}`;
          } else if (val > 0) {
            return `+${val}`;
          } else {
            return 0;
          }
        },
        namespace(val) {
          return val.replace("_", " ");
        }
      }
    });
  }
  function initGalaxyTrade() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
      return;
    }
    $("#market").append($(`<div id="galaxyTrade" v-show="t.xeno && t.xeno >= 5" class="market-header galaxyTrade"><h2 class="is-sr-only">${loc("galaxy_trade")}</h2></div>`));
    galacticTrade();
  }
  function galaxyOffers() {
    let offers = [
      {
        buy: { res: "Deuterium", vol: 5 },
        sell: { res: "Helium_3", vol: 25 }
      },
      {
        buy: { res: "Neutronium", vol: 2.5 },
        sell: { res: "Copper", vol: 200 }
      },
      {
        buy: { res: "Adamantite", vol: 3 },
        sell: { res: "Iron", vol: 300 }
      },
      {
        buy: { res: "Elerium", vol: 1 },
        sell: { res: "Oil", vol: 125 }
      },
      {
        buy: { res: "Nano_Tube", vol: 10 },
        sell: { res: "Titanium", vol: 20 }
      },
      {
        buy: { res: "Graphene", vol: 25 },
        sell: { res: global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? "Chrysotile" : "Stone" : "Lumber", vol: 1e3 }
      },
      {
        buy: { res: "Stanene", vol: 40 },
        sell: { res: "Aluminium", vol: 800 }
      },
      {
        buy: { res: "Bolognium", vol: 0.75 },
        sell: { res: "Uranium", vol: 4 }
      },
      {
        buy: { res: "Vitreloy", vol: 1 },
        sell: { res: "Infernite", vol: 1 }
      }
    ];
    return offers;
  }
  function galacticTrade(modal) {
    let galaxyTrade = modal ? modal : $(`#galaxyTrade`);
    if (!modal) {
      clearElement($(`#galaxyTrade`));
    }
    if (global.galaxy["trade"]) {
      galaxyTrade.append($(`<div class="market-item trade-header"><span class="has-text-special">${loc("galaxy_trade")}</span></div>`));
      let offers = galaxyOffers();
      for (let i = 0; i < offers.length; i++) {
        let offer = $(`<div class="market-item trade-offer"></div>`);
        galaxyTrade.append(offer);
        offer.append($(`<span class="offer-item has-text-success">${global.resource[offers[i].buy.res].name}</span>`));
        offer.append($(`<span class="offer-vol has-text-advanced">+{{ '${i}' | t_vol }}/s</span>`));
        offer.append($(`<span class="offer-item has-text-danger">${global.resource[offers[i].sell.res].name}</span>`));
        offer.append($(`<span class="offer-vol has-text-caution">-{{ '${i}' | s_vol }}/s</span>`));
        let trade = $(`<span class="trade"><span class="has-text-warning">${loc("resource_market_routes")}</span></span>`);
        offer.append(trade);
        let assign = loc("galaxy_freighter_assign", [global.resource[offers[i].buy.res].name, global.resource[offers[i].sell.res].name]);
        let unassign = loc("galaxy_freighter_unassign", [global.resource[offers[i].buy.res].name, global.resource[offers[i].sell.res].name]);
        trade.append($(`<b-tooltip :label="desc('${unassign}')" position="is-bottom" size="is-small" multilined animated><span role="button" aria-label="${unassign}" class="sub has-text-danger" @click="less('${i}')"><span>-</span></span></b-tooltip>`));
        trade.append($(`<span class="current">{{ g.f${i} }}</span>`));
        trade.append($(`<b-tooltip :label="desc('${assign}')" position="is-bottom" size="is-small" multilined animated><span role="button" aria-label="${assign}" class="add has-text-success" @click="more('${i}')"><span>+</span></span></b-tooltip>`));
        trade.append($(`<span role="button" class="zero has-text-advanced" @click="zero('${i}')">${loc("cancel_routes")}</span>`));
      }
      let totals = $(`<div class="market-item trade-offer"><div id="galacticTradeTotal"><span class="tradeTotal"><span class="has-text-caution">${loc("resource_market_galactic_trade_routes")}</span> {{ g.cur }} / {{ g.max }}</span></div></div>`);
      totals.append($(`<span role="button" class="zero has-text-advanced" @click="zero()">${loc("cancel_all_routes")}</span>`));
      galaxyTrade.append(totals);
    }
    vBind({
      el: modal ? "#specialModal" : "#galaxyTrade",
      data: {
        g: global.galaxy.trade,
        t: global.tech
      },
      methods: {
        less(idx) {
          let keyMutipler = keyMultiplier();
          if (global.galaxy.trade[`f${idx}`] >= keyMutipler) {
            global.galaxy.trade[`f${idx}`] -= keyMutipler;
            global.galaxy.trade.cur -= keyMutipler;
          } else {
            global.galaxy.trade.cur -= global.galaxy.trade[`f${idx}`];
            global.galaxy.trade[`f${idx}`] = 0;
          }
        },
        more(idx) {
          let keyMutipler = keyMultiplier();
          if (global.galaxy.trade.cur < global.galaxy.trade.max) {
            if (keyMutipler > global.galaxy.trade.max - global.galaxy.trade.cur) {
              keyMutipler = global.galaxy.trade.max - global.galaxy.trade.cur;
            }
            global.galaxy.trade[`f${idx}`] += keyMutipler;
            global.galaxy.trade.cur += keyMutipler;
          }
        },
        zero(idx) {
          if (idx) {
            global.galaxy.trade.cur -= global.galaxy.trade[`f${idx}`];
            global.galaxy.trade[`f${idx}`] = 0;
          } else {
            let offers = galaxyOffers();
            for (let i = 0; i < offers.length; i++) {
              global.galaxy.trade.cur -= global.galaxy.trade[`f${i}`];
              global.galaxy.trade[`f${i}`] = 0;
            }
          }
        },
        desc(s) {
          return s;
        }
      },
      filters: {
        t_vol(idx) {
          let offers = galaxyOffers();
          let buy_vol = offers[idx].buy.vol;
          if (global.race["persuasive"]) {
            buy_vol *= 1 + global.race["persuasive"] / 100;
          }
          if (global.race["devious"]) {
            buy_vol *= 1 - traits.devious.vars()[0] / 100;
          }
          if (global.race["merchant"]) {
            buy_vol *= 1 + traits.merchant.vars()[1] / 100;
          }
          let fathom = fathomCheck("goblin");
          if (fathom > 0) {
            buy_vol *= 1 + traits.merchant.vars(1)[1] / 100 * fathom;
          }
          if (global.genes["trader"]) {
            let mastery = calc_mastery();
            buy_vol *= 1 + mastery / 100;
          }
          if (global.stats.achieve.hasOwnProperty("trade")) {
            let rank = global.stats.achieve.trade.l;
            if (rank > 5) {
              rank = 5;
            }
            buy_vol *= 1 + rank / 50;
          }
          buy_vol = +buy_vol.toFixed(2);
          return buy_vol;
        },
        s_vol(idx) {
          let offers = galaxyOffers();
          let sell_vol = offers[idx].sell.vol;
          if (global.stats.achieve.hasOwnProperty("trade")) {
            let rank = global.stats.achieve.trade.l;
            if (rank > 5) {
              rank = 5;
            }
            sell_vol *= 1 - rank / 100;
          }
          sell_vol = +sell_vol.toFixed(2);
          return sell_vol;
        }
      }
    });
    popover(`galacticTradeTotal`, function() {
      let bd = $(`<div class="resBreakdown"></div>`);
      if (breakdown.hasOwnProperty("gt_route")) {
        Object.keys(breakdown.gt_route).forEach(function(k) {
          if (breakdown.gt_route[k] > 0) {
            bd.append(`<div class="modal_bd"><span class="has-text-warning">${k}</span> <span>+${breakdown.gt_route[k]}</span></div>`);
          }
        });
      }
      bd.append(`<div class="modal_bd ${global.galaxy.trade.max > 0 ? "sum" : ""}"><span class="has-text-caution">${loc("resource_market_galactic_trade_routes")}</span> <span>${global.galaxy.trade.max}</span></div>`);
      return bd;
    }, {
      elm: `#galacticTradeTotal > span`
    });
  }
  function unassignCrate(res) {
    let keyMutipler = keyMultiplier();
    let cap = crateValue();
    if (keyMutipler > global.resource[res].crates) {
      keyMutipler = global.resource[res].crates;
    }
    if (keyMutipler > 0) {
      global.resource.Crates.amount += keyMutipler;
      global.resource.Crates.max += keyMutipler;
      global.resource[res].crates -= keyMutipler;
      global.resource[res].max -= cap * keyMutipler;
    }
  }
  function assignCrate(res) {
    let keyMutipler = keyMultiplier();
    let cap = crateValue();
    if (keyMutipler > global.resource.Crates.amount) {
      keyMutipler = global.resource.Crates.amount;
    }
    if (keyMutipler > 0) {
      global.resource.Crates.amount -= keyMutipler;
      global.resource.Crates.max -= keyMutipler;
      global.resource[res].crates += keyMutipler;
      global.resource[res].max += cap * keyMutipler;
    }
  }
  function unassignContainer(res) {
    let keyMutipler = keyMultiplier();
    let cap = containerValue();
    if (keyMutipler > global.resource[res].containers) {
      keyMutipler = global.resource[res].containers;
    }
    if (keyMutipler > 0) {
      global.resource.Containers.amount += keyMutipler;
      global.resource.Containers.max += keyMutipler;
      global.resource[res].containers -= keyMutipler;
      global.resource[res].max -= cap * keyMutipler;
    }
  }
  function assignContainer(res) {
    let keyMutipler = keyMultiplier();
    let cap = containerValue();
    if (keyMutipler > global.resource.Containers.amount) {
      keyMutipler = global.resource.Containers.amount;
    }
    if (keyMutipler > 0) {
      global.resource.Containers.amount -= keyMutipler;
      global.resource.Containers.max -= keyMutipler;
      global.resource[res].containers += keyMutipler;
      global.resource[res].max += cap * keyMutipler;
    }
  }
  function containerItem(mount, market_item, name, color) {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 1)) {
      return;
    }
    market_item.append($(`<h3 class="res has-text-${color}">{{ name }}</h3>`));
    if (global.resource.Crates.display) {
      let crate = $(`<span class="trade"><span class="has-text-warning">${global.resource.Crates.name}</span></span>`);
      market_item.append(crate);
      crate.append($(`<span role="button" aria-label="remove ${global.resource[name].name} ${global.resource.Crates.name}" class="sub has-text-danger" @click="subCrate('${name}')"><span>&laquo;</span></span>`));
      crate.append($(`<span class="current" v-html="$options.filters.cCnt(crates,'${name}')"></span>`));
      crate.append($(`<span role="button" aria-label="add ${global.resource[name].name} ${global.resource.Crates.name}" class="add has-text-success" @click="addCrate('${name}')"><span>&raquo;</span></span>`));
    }
    if (global.resource.Containers.display) {
      let container = $(`<span class="trade"><span class="has-text-warning">${global.resource.Containers.name}</span></span>`);
      market_item.append(container);
      container.append($(`<span role="button" aria-label="remove ${global.resource[name].name} ${global.resource.Containers.name}" class="sub has-text-danger" @click="subCon('${name}')"><span>&laquo;</span></span>`));
      container.append($(`<span class="current" v-html="$options.filters.trick(containers)"></span>`));
      container.append($(`<span role="button" aria-label="add ${global.resource[name].name} ${global.resource.Containers.name}" class="add has-text-success" @click="addCon('${name}')"><span>&raquo;</span></span>`));
    }
    vBind({
      el: mount,
      data: global.resource[name],
      methods: {
        addCrate(res) {
          assignCrate(res);
        },
        subCrate(res) {
          unassignCrate(res);
        },
        addCon(res) {
          assignContainer(res);
        },
        subCon(res) {
          unassignContainer(res);
        }
      },
      filters: {
        trick(v) {
          if (name === "Stone" && global.resource[name].crates === 10 && global.resource[name].containers === 31) {
            let trick = trickOrTreat(4, 13, true);
            if (trick.length > 0) {
              return trick;
            }
          }
          return v;
        },
        cCnt(ct, res) {
          if (res === "Food" && !global.race["artifical"] || global.race["artifical"] && res === "Coal" || res === "Souls") {
            let egg = easterEgg(13, 10);
            if (ct === 10 && egg.length > 0) {
              return "1" + egg;
            }
          }
          return ct;
        }
      }
    });
  }
  function tradeSellPrice(res) {
    let divide = 4;
    if (global.race["merchant"]) {
      divide *= 1 - traits.merchant.vars()[0] / 100;
    }
    let fathom = fathomCheck("goblin");
    if (fathom > 0) {
      divide *= 1 - traits.merchant.vars(1)[0] / 100 * fathom;
    }
    if (global.race["asymmetrical"]) {
      divide *= 1 + traits.asymmetrical.vars()[0] / 100;
    }
    if (global.race["devious"]) {
      divide *= 1 + traits.devious.vars()[0] / 100;
    }
    if (global.race["conniving"]) {
      divide--;
    }
    let price = global.resource[res].value * tradeRatio[res] / divide;
    if (global.city["wharf"]) {
      price = price * (1 + global.city["wharf"].count * 0.01);
    }
    if (global.space["gps"] && global.space["gps"].count > 3) {
      price = price * (1 + global.space["gps"].count * 0.01);
    }
    if (global.tech["railway"]) {
      let boost = global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 1 ? 0.03 : 0.02;
      price = price * (1 + global.tech["railway"] * boost);
    }
    if (global.race["truepath"] && !global.race["lone_survivor"]) {
      price *= 1 - global.civic.foreign.gov3.hstl / 101;
    }
    if (global.race["inflation"]) {
      price *= 1 + global.race.inflation / 500;
    }
    if (global.race["witch_hunter"] && global.resource.Sus.amount > 50) {
      let wariness = (global.resource.Sus.amount - 50) / 52;
      price *= 1 - wariness;
    }
    price *= production("psychic_cash");
    price = +price.toFixed(1);
    return price;
  }
  function tradeBuyPrice(res) {
    let rate = global.resource[res].value;
    if (global.race["arrogant"]) {
      rate *= 1 + traits.arrogant.vars()[0] / 100;
    }
    if (global.race["conniving"]) {
      rate *= 1 - traits.conniving.vars()[0] / 100;
    }
    let impFathom = fathomCheck("imp");
    if (impFathom > 0) {
      rate *= 1 - traits.conniving.vars(1)[0] / 100 * impFathom;
    }
    let price = rate * tradeRatio[res];
    if (global.city["wharf"]) {
      price = price * 0.99 ** global.city["wharf"].count;
    }
    if (global.space["gps"] && global.space["gps"].count > 3) {
      price = price * 0.99 ** global.space["gps"].count;
    }
    if (global.tech["railway"]) {
      let boost = global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 1 ? 0.97 : 0.98;
      price = price * boost ** global.tech["railway"];
    }
    if (global.race["truepath"] && !global.race["lone_survivor"]) {
      price *= 1 + global.civic.foreign.gov3.hstl / 101;
    }
    if (global.race["inflation"]) {
      price *= 1 + global.race.inflation / 300;
    }
    if (global.race["quarantine"]) {
      price *= 1 + Math.round(global.race.quarantine ** 3.5);
    }
    if (global.race["witch_hunter"] && global.resource.Sus.amount > 50) {
      let wariness = (global.resource.Sus.amount - 50) / 8;
      price *= 1 + wariness;
    }
    price = +price.toFixed(1);
    return price;
  }
  function craftingPopover(id, res, type, extra) {
    popover(`${id}`, function() {
      let bd = $(`<div class="resBreakdown"><div class="has-text-info">{{ res.name | namespace }}</div></div>`);
      let table = $(`<div class="parent"></div>`);
      bd.append(table);
      let craft_total = craftingRatio(res, type);
      let col1 = $(`<div></div>`);
      table.append(col1);
      if (type === "auto" && breakdown.p[res]) {
        Object.keys(breakdown.p[res]).forEach(function(mod) {
          let raw = breakdown.p[res][mod];
          let val = parseFloat(raw.slice(0, -1));
          if (val != 0 && !isNaN(val)) {
            let type2 = val > 0 ? "success" : "danger";
            let label = mod.replace(/\+.+$/, "");
            mod = mod.replace(/'/g, "\\'");
            col1.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ ${[res]}['${mod}'] | translate }}</span></div>`);
          }
        });
      }
      Object.keys(craft_total.multi_bd).forEach(function(mod) {
        let raw = craft_total.multi_bd[mod];
        let val = parseFloat(raw.slice(0, -1));
        if (val != 0 && !isNaN(val)) {
          let type2 = val > 0 ? "success" : "danger";
          let label = mod.replace(/\+.+$/, "");
          mod = mod.replace(/'/g, "\\'");
          col1.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ craft.multi_bd['${mod}'] | translate }}</span></div>`);
        }
      });
      let col2 = $(`<div class="col"></div>`);
      let title = $(`<div class="has-text-info">${loc(`craft_tools_multi`)}</div>`);
      col2.append(title);
      let count = 0;
      Object.keys(craft_total.add_bd).forEach(function(mod) {
        let raw = craft_total.add_bd[mod];
        let val = parseFloat(raw.slice(0, -1));
        if (val != 0 && !isNaN(val)) {
          count++;
          let type2 = val > 0 ? "success" : "danger";
          let label = mod.replace(/\+.+$/, "");
          mod = mod.replace(/'/g, "\\'");
          col2.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ craft.add_bd['${mod}'] | translate }}</span></div>`);
        }
      });
      if (count > 0) {
        table.append(col2);
      }
      if (breakdown.p.consume && breakdown.p.consume[res]) {
        let col3 = $(`<div class="col"></div>`);
        let count2 = 0;
        Object.keys(breakdown.p.consume[res]).forEach(function(mod) {
          let val = breakdown.p.consume[res][mod];
          if (val != 0 && !isNaN(val)) {
            count2++;
            let type2 = val > 0 ? "success" : "danger";
            let label = mod.replace(/\+.+$/, "");
            mod = mod.replace(/'/g, "\\'");
            col3.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ consume.${res}['${mod}'] | fix | translate }}</span></div>`);
          }
        });
        if (count2 > 0) {
          table.append(col3);
        }
      }
      if (global["resource"][res].diff < 0 && global["resource"][res].amount > 0) {
        bd.append(`<div class="modal_bd sum"><span>${loc("to_empty")}</span><span class="has-text-danger">{{ res.amount | counter }}</span></div>`);
      }
      if (extra) {
        bd.append(`<div class="modal_bd sum"></div>`);
        bd.append(extra);
      }
      return bd;
    }, {
      in: function() {
        vBind({
          el: `#popper > div`,
          data: {
            [res]: breakdown.p[res],
            res: global["resource"][res],
            "consume": breakdown.p["consume"],
            craft: craftingRatio(res, type)
          },
          filters: {
            translate(raw) {
              let type2 = raw[raw.length - 1];
              let val = parseFloat(raw.slice(0, -1));
              let precision = val > 0 && val < 1 || val < 0 && val > -1 ? 4 : val > 0 && val < 10 || val < 0 && val > -10 ? 3 : 2;
              val = +val.toFixed(precision);
              let suffix = type2 === "%" ? "%" : "";
              if (val > 0) {
                return "+" + sizeApproximation(val, precision) + suffix;
              } else if (val < 0) {
                return sizeApproximation(val, precision) + suffix;
              }
            },
            fix(val) {
              return val + "v";
            },
            counter(val) {
              let rate = -global["resource"][res].diff;
              let time = +(val / rate).toFixed(0);
              if (time > 60) {
                let secs = time % 60;
                let mins = (time - secs) / 60;
                if (mins >= 60) {
                  let r = mins % 60;
                  let hours = (mins - r) / 60;
                  return `${hours}h ${r}m`;
                } else {
                  return `${mins}m ${secs}s`;
                }
              } else {
                return `${time}s`;
              }
            },
            namespace(name) {
              return name.replace("_", " ");
            }
          }
        });
      },
      out: function() {
        vBind({ el: `#popper > div` }, "destroy");
      },
      classes: `breakdown has-background-light has-text-dark`,
      prop: {
        modifiers: {
          preventOverflow: { enabled: false },
          hide: { enabled: false }
        }
      }
    });
  }
  function breakdownPopover(id, name, type) {
    popover(`${id}`, function() {
      let bd = $(`<div class="resBreakdown"><div class="has-text-info">{{ res.name | namespace }}</div></div>`);
      if (type === "p" && name === global.race.species) {
        bd = $(`<div class="resBreakdown"><div class="has-text-info">${loc("starvation_resist")}</div></div>`);
      }
      let table = $(`<div class="parent"></div>`);
      bd.append(table);
      let prevCol = false;
      if (breakdown[type][name] && !(global.race.species === name && type === "p")) {
        let col1 = $(`<div></div>`);
        table.append(col1);
        let types = [name];
        types.push("Global");
        for (var i = 0; i < types.length; i++) {
          let t = types[i];
          if (breakdown[type][t]) {
            Object.keys(breakdown[type][t]).forEach(function(mod) {
              let raw = breakdown[type][t][mod];
              let val = parseFloat(raw.slice(0, -1));
              if (val != 0 && !isNaN(val)) {
                prevCol = true;
                let type2 = val > 0 ? "success" : "danger";
                let label = mod.replace(/\+.+$/, "");
                mod = mod.replace(/'/g, "\\'");
                col1.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ ${t}['${mod}'] | translate }}</span></div>`);
              }
            });
          }
        }
      }
      if (breakdown[type].consume && breakdown[type].consume[name]) {
        let col2 = $(`<div class="${prevCol ? "col" : ""}"></div>`);
        let count = 0;
        Object.keys(breakdown[type].consume[name]).forEach(function(mod) {
          let val = breakdown[type].consume[name][mod];
          if (val != 0 && !isNaN(val)) {
            count++;
            let type2 = val > 0 ? "success" : "danger";
            let label = mod.replace(/\+.+$/, "");
            mod = mod.replace(/'/g, "\\'");
            col2.append(`<div class="modal_bd"><span>${label}</span><span class="has-text-${type2}">{{ consume.${name}['${mod}'] | fix | translate }}</span></div>`);
          }
        });
        if (count > 0) {
          table.append(col2);
        }
      }
      if (type === "p" && name !== global.race.species) {
        let dir = global["resource"][name].diff > 0 ? "success" : "danger";
        bd.append(`<div class="modal_bd sum"><span>{{ res.diff | direction }}</span><span class="has-text-${dir}">{{ res.amount | counter }}</span></div>`);
      }
      return bd;
    }, {
      in: function() {
        vBind({
          el: `#popper > div`,
          data: {
            "Global": breakdown[type]["Global"],
            [name]: breakdown[type][name],
            "consume": breakdown[type]["consume"],
            res: global["resource"][name]
          },
          filters: {
            translate(raw) {
              let type2 = raw[raw.length - 1];
              let val = parseFloat(raw.slice(0, -1));
              let precision = val > 0 && val < 1 || val < 0 && val > -1 ? 4 : val > 0 && val < 10 || val < 0 && val > -10 ? 3 : 2;
              let suffix = type2 === "%" ? "%" : "";
              if (val > 0) {
                return "+" + sizeApproximation(val, precision) + suffix;
              } else if (val < 0) {
                return sizeApproximation(val, precision) + suffix;
              }
            },
            fix(val) {
              return val + "v";
            },
            counter(val) {
              let rate = global["resource"][name].diff;
              let time = 0;
              if (rate < 0) {
                rate *= -1;
                time = +(val / rate).toFixed(0);
              } else {
                let gap = global["resource"][name].max - val;
                time = +(gap / rate).toFixed(0);
              }
              if (time === Infinity || Number.isNaN(time)) {
                return "Never";
              }
              if (time > 60) {
                let secs = time % 60;
                let mins = (time - secs) / 60;
                if (mins >= 60) {
                  let r = mins % 60;
                  let hours = (mins - r) / 60;
                  return `${hours}h ${r}m`;
                } else {
                  return `${mins}m ${secs}s`;
                }
              } else {
                return `${time}s`;
              }
            },
            direction(val) {
              return val >= 0 ? loc("to_full") : loc("to_empty");
            },
            namespace(name2) {
              return name2.replace("_", " ");
            }
          }
        });
      },
      out: function() {
        vBind({ el: `#popper > div` }, "destroy");
      },
      classes: `breakdown has-background-light has-text-dark`,
      prop: {
        modifiers: {
          preventOverflow: { enabled: false },
          hide: { enabled: false }
        }
      }
    });
  }
  function loadRouteCounter() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
      return;
    }
    let no_market = global.race["no_trade"] ? " nt" : "";
    var market_item = $(`<div id="tradeTotal" v-show="active" class="market-item"><div id="tradeTotalPopover"><span class="tradeTotal${no_market}"><span class="has-text-caution">${loc("resource_market_trade_routes")}</span> <span v-html="$options.filters.tdeCnt(trade)"></span> / {{ mtrade }}</span></div></div>`);
    market_item.append($(`<span role="button" class="zero has-text-advanced" @click="zero()">${loc("cancel_all_routes")}</span>`));
    $("#market").append(market_item);
    vBind({
      el: "#tradeTotal",
      data: global.city.market,
      methods: {
        zero() {
          Object.keys(global.resource).forEach(function(res) {
            if (global.resource[res]["trade"]) {
              global.city.market.trade -= Math.abs(global.resource[res].trade);
              global.resource[res].trade = 0;
              tradeRouteColor(res);
            }
          });
        }
      },
      filters: {
        tdeCnt(ct) {
          let egg17 = easterEgg(17, 11);
          if ((ct === 100 && !global.tech["isolation"] && !global.race["cataclysm"] || ct === 10 && (global.tech["isolation"] || global.race["cataclysm"])) && egg17.length > 0) {
            return "10" + egg17;
          }
          return ct;
        }
      }
    });
    popover(`tradeTotalPopover`, function() {
      let bd = $(`<div class="resBreakdown"></div>`);
      if (breakdown.hasOwnProperty("t_route")) {
        Object.keys(breakdown.t_route).forEach(function(k) {
          if (breakdown.t_route[k] > 0) {
            bd.append(`<div class="modal_bd"><span class="has-text-warning">${k}</span> <span>+${breakdown.t_route[k]}</span></div>`);
          }
        });
      }
      bd.append(`<div class="modal_bd ${global.city.market.mtrade > 0 ? "sum" : ""}"><span class="has-text-caution">${loc("resource_market_trade_routes")}</span> <span>${global.city.market.mtrade}</span></div>`);
      return bd;
    }, {
      elm: `#tradeTotalPopover > span`
    });
  }
  function loadContainerCounter() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 1)) {
      return;
    }
    var market_item = $(`<div id="crateTotal" class="market-item"><span v-show="cr.display" class="crtTotal"><span class="has-text-warning">${global.resource.Crates.name}</span><span>{{ cr.amount }} / {{ cr.max }}</span></span><span v-show="cn.display" class="cntTotal"><span class="has-text-warning">${global.resource.Containers.name}</span><span>{{ cn.amount }} / {{ cn.max }}</span></span></div>`);
    $("#resStorage").append(market_item);
    vBind({
      el: "#crateTotal",
      data: {
        cr: global.resource.Crates,
        cn: global.resource.Containers
      }
    });
  }
  function tradeRouteColor(res) {
    $(`#market-${res} .trade .current`).removeClass("has-text-warning");
    $(`#market-${res} .trade .current`).removeClass("has-text-danger");
    $(`#market-${res} .trade .current`).removeClass("has-text-success");
    if (global.resource[res].trade > 0) {
      $(`#market-${res} .trade .current`).addClass("has-text-success");
    } else if (global.resource[res].trade < 0) {
      $(`#market-${res} .trade .current`).addClass("has-text-danger");
    } else {
      $(`#market-${res} .trade .current`).addClass("has-text-warning");
    }
  }
  function buildCrateLabel() {
    let material = global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? global.resource.Chrysotile.name : global.resource.Stone.name : global.resource["Plywood"] ? global.resource.Plywood.name : global.resource.Plywood.name;
    if (global.race["iron_wood"]) {
      material = global.resource.Lumber.name;
    }
    let cost = global.race["kindling_kindred"] || global.race["smoldering"] || global.race["iron_wood"] ? 200 : 10;
    return loc("resource_modal_crate_construct_desc", [cost, material, crateValue()]);
  }
  function buildContainerLabel() {
    return loc("resource_modal_container_construct_desc", [125, containerValue()]);
  }
  function crateGovHook(type, num) {
    switch (type) {
      case "crate":
        buildCrate(num);
        break;
      case "container":
        buildContainer(num);
        break;
    }
  }
  function buildCrate(num) {
    let keyMutipler = num || keyMultiplier();
    let material = global.race["kindling_kindred"] || global.race["smoldering"] ? global.race["smoldering"] ? "Chrysotile" : "Stone" : "Plywood";
    if (global.race["iron_wood"]) {
      material = "Lumber";
    }
    let cost = global.race["kindling_kindred"] || global.race["smoldering"] || global.race["iron_wood"] ? 200 : 10;
    if (keyMutipler + global.resource.Crates.amount > global.resource.Crates.max) {
      keyMutipler = global.resource.Crates.max - global.resource.Crates.amount;
    }
    if (global.resource[material].amount < cost * keyMutipler) {
      keyMutipler = Math.floor(global.resource[material].amount / cost);
    }
    if (global.resource[material].amount >= cost * keyMutipler && global.resource.Crates.amount < global.resource.Crates.max) {
      modRes(material, -(cost * keyMutipler), true);
      global.resource.Crates.amount += keyMutipler;
    }
  }
  function buildContainer(num) {
    let keyMutipler = num || keyMultiplier();
    if (keyMutipler + global.resource.Containers.amount > global.resource.Containers.max) {
      keyMutipler = global.resource.Containers.max - global.resource.Containers.amount;
    }
    if (global.resource["Steel"].amount < 125 * keyMutipler) {
      keyMutipler = Math.floor(global.resource["Steel"].amount / 125);
    }
    if (global.resource["Steel"].amount >= 125 * keyMutipler && global.resource.Containers.amount < global.resource.Containers.max) {
      modRes("Steel", -(125 * keyMutipler), true);
      global.resource.Containers.amount += keyMutipler;
    }
  }
  function drawModal(name) {
    $("#modalBox").append($('<p id="modalBoxTitle" class="has-text-warning modalTitle">{{ name }} - {{ amount | size }}/{{ max | size }}</p>'));
    let body = $('<div class="modalBody crateModal"></div>');
    $("#modalBox").append(body);
    if (name === "Food" && !global.race["artifical"] || global.race["artifical"] && name === "Coal" || name === "Souls") {
      let egg = easterEgg(7, 10);
      if (egg.length > 0) {
        $("#modalBoxTitle").prepend(egg);
      }
    }
    if (name === "Stone") {
      let trick = trickOrTreat(1, 12, false);
      if (trick.length > 0) {
        $("#modalBoxTitle").prepend(trick);
      }
    }
    let crates = $('<div id="modalCrates" class="crates"></div>');
    body.append(crates);
    crates.append($(`<div class="crateHead"><span>${loc("resource_modal_crate_owned")} {{ crates.amount }}/{{ crates.max }}</span><span>${loc("resource_modal_crate_assigned")} {{ res.crates }}</span></div>`));
    let buildCr = $(`<button class="button construct" @click="buildCrate()">${loc("resource_modal_crate_construct")}</button>`);
    let removeCr = $(`<button class="button unassign" @click="subCrate('${name}')">${loc("resource_modal_crate_unassign")}</button>`);
    let addCr = $(`<button class="button assign" @click="addCrate('${name}')">${loc("resource_modal_crate_assign")}</button>`);
    crates.append(buildCr);
    crates.append(removeCr);
    crates.append(addCr);
    vBind({
      el: `#modalCrates`,
      data: {
        crates: global["resource"]["Crates"],
        res: global["resource"][name]
      },
      methods: {
        buildCrate() {
          buildCrate();
        },
        subCrate(res) {
          unassignCrate(res);
        },
        addCrate(res) {
          assignCrate(res);
        }
      }
    });
    if (global.resource.Containers.display) {
      let containers = $('<div id="modalContainers" class="crates divide"></div>');
      body.append(containers);
      containers.append($(`<div class="crateHead"><span>${loc("resource_modal_container_owned")} {{ containers.amount }}/{{ containers.max }}</span><span>${loc("resource_modal_container_assigned")} {{ res.containers }}</span></div>`));
      let buildCon = $(`<button class="button construct" @click="buildContainer()">${loc("resource_modal_container_construct")}</button>`);
      let removeCon = $(`<button class="button unassign" @click="removeContainer('${name}')">${loc("resource_modal_container_unassign")}</button>`);
      let addCon = $(`<button class="button assign" @click="addContainer('${name}')">${loc("resource_modal_container_assign")}</button>`);
      containers.append(buildCon);
      containers.append(removeCon);
      containers.append(addCon);
      vBind({
        el: `#modalContainers`,
        data: {
          containers: global["resource"]["Containers"],
          res: global["resource"][name]
        },
        methods: {
          buildContainer() {
            buildContainer();
          },
          removeContainer(res) {
            unassignContainer(res);
          },
          addContainer(res) {
            assignContainer(res);
          }
        }
      });
    }
    vBind({
      el: `#modalBoxTitle`,
      data: global["resource"][name],
      filters: {
        size: function(value) {
          return sizeApproximation(value, 0);
        },
        diffSize: function(value) {
          return sizeApproximation(value, 2);
        }
      }
    });
    function tooltip(type, subtype) {
      if (type === "modalContainers") {
        let cap = containerValue();
        switch (subtype) {
          case "assign":
            return loc("resource_modal_container_assign_desc", [cap]);
          case "unassign":
            return loc("resource_modal_container_unassign_desc", [cap]);
          case "construct":
            return buildContainerLabel();
        }
      } else {
        let cap = crateValue();
        switch (subtype) {
          case "assign":
            return loc("resource_modal_crate_assign_desc", [cap]);
          case "unassign":
            return loc("resource_modal_crate_unassign_desc", [cap]);
          case "construct":
            return buildCrateLabel();
        }
      }
    }
    ["modalCrates", "modalContainers"].forEach(function(type) {
      ["assign", "unassign", "construct"].forEach(function(subtype) {
        popover(`${type}${subtype}`, tooltip(type, subtype), {
          elm: $(`#${type} > .${subtype}`),
          attach: "#main"
        });
      });
    });
  }
  function unlockStorage() {
    if (!global.settings.showResources) {
      global.settings.marketTabs = 1;
    }
    global.settings.showResources = true;
    global.settings.showStorage = true;
    drawResourceTab("storage");
    defineGovernor();
  }
  function unlockCrates() {
    if (!global.resource.Crates.display) {
      messageQueue(loc("city_storage_yard_msg"), "info", false, ["progress"]);
      global.resource.Crates.display = true;
      unlockStorage();
    }
  }
  function unlockContainers() {
    if (!global.resource.Containers.display) {
      messageQueue(loc("city_warehouse_msg"), "info", false, ["progress"]);
      global.resource.Containers.display = true;
      unlockStorage();
    }
  }
  function crateValue() {
    let create_value = global.tech["container"] && global.tech["container"] >= 2 ? 500 : 350;
    if (global.tech["container"] && global.tech["container"] >= 4) {
      create_value += global.tech["container"] >= 5 ? 500 : 250;
    }
    if (global.tech["container"] && global.tech["container"] >= 6) {
      create_value += global.tech["container"] >= 7 ? 1200 : 500;
    }
    if (global.tech["container"] && global.tech["container"] >= 8) {
      create_value += global.tech["container"] >= 9 ? 7800 : 4e3;
    }
    if (global.race["pack_rat"]) {
      create_value *= 1 + traits.pack_rat.vars()[0] / 100;
    }
    let fathom = fathomCheck("kobold");
    if (fathom > 0) {
      create_value *= 1 + traits.pack_rat.vars(1)[0] / 100 * fathom;
    }
    if (global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 3) {
      create_value *= 1.1;
    }
    create_value *= global.stats.achieve["blackhole"] ? 1 + global.stats.achieve.blackhole.l * 0.05 : 1;
    return Math.round(spatialReasoning(create_value));
  }
  function containerValue() {
    let container_value = global.tech["steel_container"] && global.tech["steel_container"] >= 3 ? 1200 : 800;
    if (global.tech["steel_container"] && global.tech["steel_container"] >= 4) {
      container_value += global.tech["steel_container"] >= 5 ? 1e3 : 400;
    }
    if (global.tech["steel_container"] && global.tech["steel_container"] >= 6) {
      container_value += global.tech["steel_container"] >= 7 ? 7500 : 1e3;
    }
    if (global.tech["steel_container"] && global.tech["steel_container"] >= 8) {
      container_value += global.tech["steel_container"] >= 9 ? 15300 : 8e3;
    }
    if (global.race["pack_rat"]) {
      container_value *= 1 + traits.pack_rat.vars()[0] / 100;
    }
    let fathom = fathomCheck("kobold");
    if (fathom > 0) {
      container_value *= 1 + traits.pack_rat.vars(1)[0] / 100 * fathom;
    }
    container_value *= global.stats.achieve["blackhole"] ? 1 + global.stats.achieve.blackhole.l * 0.05 : 1;
    return Math.round(spatialReasoning(container_value));
  }
  function initMarket() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
      return;
    }
    let market = $(`<div id="market-qty" class="market-header"><h2 class="is-sr-only">${loc("resource_market")}</h2></div>`);
    clearElement($("#market"));
    $("#market").append(market);
    loadMarket();
  }
  function initStorage() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 1)) {
      return;
    }
    let store = $(`<div id="createHead" class="storage-header"><h2 class="is-sr-only">${loc("tab_storage")}</h2></div>`);
    clearElement($("#resStorage"));
    $("#resStorage").append(store);
    if (global.resource["Crates"] && global.resource["Containers"]) {
      store.append($(`<b-tooltip :label="buildCrateDesc()" position="is-bottom" class="crate" animated multilined><button :aria-label="buildCrateDesc()" v-show="cr.display" class="button" @click="crate">${loc("resource_modal_crate_construct")}</button></b-tooltip>`));
      store.append($(`<b-tooltip :label="buildContainerDesc()" position="is-bottom" class="container" animated multilined><button :aria-label="buildContainerDesc()" v-show="cn.display" class="button" @click="container">${loc("resource_modal_container_construct")}</button></b-tooltip>`));
      vBind({
        el: "#createHead",
        data: {
          cr: global.resource.Crates,
          cn: global.resource.Containers
        },
        methods: {
          crate() {
            buildCrate();
          },
          container() {
            buildContainer();
          },
          buildCrateDesc() {
            return buildCrateLabel();
          },
          buildContainerDesc() {
            return buildContainerLabel();
          }
        }
      });
    }
  }
  function loadMarket() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 0)) {
      return;
    }
    let market = $("#market-qty");
    clearElement(market);
    if (!global.race["no_trade"]) {
      market.append($(`<h3 class="is-sr-only">${loc("resource_trade_qty")}</h3>`));
      market.append($(`<b-field class="market"><span class="button has-text-danger" role="button" @click="less">-</span><b-numberinput :input="val()" min="1" :max="limit()" v-model="qty" :controls="false"></b-numberinput><span class="button has-text-success" role="button" @click="more">+</span></b-field>`));
    }
    vBind({
      el: `#market-qty`,
      data: global.city.market,
      methods: {
        val() {
          if (global.city.market.qty < 1) {
            global.city.market.qty = 1;
          } else if (global.city.market.qty > tradeMax()) {
            global.city.market.qty = tradeMax();
          }
        },
        limit() {
          return tradeMax();
        },
        less() {
          global.city.market.qty -= keyMultiplier();
        },
        more() {
          global.city.market.qty += keyMultiplier();
        }
      }
    });
  }
  function tradeMax() {
    if (global.tech["currency"] >= 6) {
      return 1e6;
    } else if (global.tech["currency"] >= 4) {
      return 5e3;
    } else {
      return 100;
    }
  }
  function initEjector() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 2)) {
      return;
    }
    clearElement($("#resEjector"));
    if (global.interstellar["mass_ejector"]) {
      let ejector = $(`<div id="eject" class="market-item"><h3 class="res has-text-warning">${loc("interstellar_mass_ejector_vol")}</h3></div>`);
      $("#resEjector").append(ejector);
      let eject = $(`<span class="trade"></span>`);
      ejector.append(eject);
      eject.append($(`<span>{{ total }} / {{ on | max }}{{ on | real }}</span><span class="mass">${loc("interstellar_mass_ejector_mass")}: {{ mass | approx }} kt/s</span>`));
      vBind({
        el: `#eject`,
        data: global.interstellar.mass_ejector,
        filters: {
          max(num) {
            return num * 1e3;
          },
          real(num) {
            if (p_on["mass_ejector"] < num) {
              return ` (${loc("interstellar_mass_ejector_active", [p_on["mass_ejector"] * 1e3])})`;
            }
            return "";
          },
          approx(tons) {
            return sizeApproximation(tons, 2);
          }
        }
      });
    }
  }
  function loadEjector(name, color) {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 2)) {
      return;
    } else if (global.race["artifical"] && name === "Food") {
      return;
    }
    if (atomic_mass[name] && global.interstellar["mass_ejector"]) {
      if (global.race.universe !== "magic" && (name === "Elerium" || name === "Infernite")) {
        color = "caution";
      }
      let ejector = $(`<div id="eject${name}" class="market-item" v-show="r.display"><h3 class="res has-text-${color}">${global.resource[name].name}</h3></div>`);
      $("#resEjector").append(ejector);
      let res = $(`<span class="trade"></span>`);
      ejector.append(res);
      res.append($(`<span role="button" aria-label="eject less ${global.resource[name].name}" class="sub has-text-danger" @click="ejectLess('${name}')"><span>&laquo;</span></span>`));
      res.append($(`<span class="current">{{ e.${name} }}</span>`));
      res.append($(`<span role="button" aria-label="eject more ${global.resource[name].name}" class="add has-text-success" @click="ejectMore('${name}')"><span>&raquo;</span></span>`));
      res.append($(`<span class="mass">${loc("interstellar_mass_ejector_per")}: <span class="has-text-warning">${atomic_mass[name]}</span> kt</span>`));
      if (!global.interstellar.mass_ejector.hasOwnProperty(name)) {
        global.interstellar.mass_ejector[name] = 0;
      }
      vBind({
        el: `#eject${name}`,
        data: {
          r: global.resource[name],
          e: global.interstellar.mass_ejector
        },
        methods: {
          ejectMore(r) {
            let keyMutipler = keyMultiplier();
            if (keyMutipler + global.interstellar.mass_ejector.total > p_on["mass_ejector"] * 1e3) {
              keyMutipler = p_on["mass_ejector"] * 1e3 - global.interstellar.mass_ejector.total;
            }
            global.interstellar.mass_ejector[r] += keyMutipler;
            global.interstellar.mass_ejector.total += keyMutipler;
          },
          ejectLess(r) {
            let keyMutipler = keyMultiplier();
            if (keyMutipler > global.interstellar.mass_ejector[r]) {
              keyMutipler = global.interstellar.mass_ejector[r];
            }
            if (global.interstellar.mass_ejector[r] > 0) {
              global.interstellar.mass_ejector[r] -= keyMutipler;
              global.interstellar.mass_ejector.total -= keyMutipler;
            }
          }
        }
      });
    }
  }
  function initSupply() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 3)) {
      return;
    }
    clearElement($("#resCargo"));
    if (global.portal["transport"]) {
      let supply = $(`<div id="spireSupply"><h3 class="res has-text-warning pad">${loc("portal_transport_supply")}</h3></div>`);
      $("#resCargo").append(supply);
      let cargo = $(`<span class="pad">{{ used }} / {{ max }}</span>`);
      supply.append(cargo);
      vBind({
        el: `#spireSupply`,
        data: global.portal.transport.cargo
      });
    }
  }
  function loadSupply(name, color) {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 3)) {
      return;
    }
    if (supplyValue[name] && global.portal["transport"]) {
      let ejector = $(`<div id="supply${name}" class="market-item" v-show="r.display"><h3 class="res has-text-${color}">${global.resource[name].name}</h3></div>`);
      $("#resCargo").append(ejector);
      let res = $(`<span class="trade"></span>`);
      ejector.append(res);
      res.append($(`<span role="button" aria-label="eject less ${loc("resource_" + name + "_name")}" class="sub has-text-danger" @click="supplyLess('${name}')"><span>&laquo;</span></span>`));
      res.append($(`<span class="current">{{ e.${name} }}</span>`));
      res.append($(`<span role="button" aria-label="eject more ${loc("resource_" + name + "_name")}" class="add has-text-success" @click="supplyMore('${name}')"><span>&raquo;</span></span>`));
      let volume = sizeApproximation(supplyValue[name].out);
      res.append($(`<span class="mass">${loc("portal_transport_item", [`<span class="has-text-caution">${volume}</span>`, `<span class="has-text-success">${supplyValue[name].in}</span>`])}</span>`));
      if (!global.portal.transport.cargo.hasOwnProperty(name)) {
        global.portal.transport.cargo[name] = 0;
      }
      vBind({
        el: `#supply${name}`,
        data: {
          r: global.resource[name],
          e: global.portal.transport.cargo
        },
        methods: {
          supplyMore(r) {
            let keyMutipler = keyMultiplier();
            if (keyMutipler + global.portal.transport.cargo.used > global.portal.transport.cargo.max) {
              keyMutipler = global.portal.transport.cargo.max - global.portal.transport.cargo.used;
              if (global.portal.transport.cargo[r] + keyMutipler < 0) {
                keyMutipler = -global.portal.transport.cargo[r];
              }
            }
            global.portal.transport.cargo[r] += keyMutipler;
            global.portal.transport.cargo.used += keyMutipler;
          },
          supplyLess(r) {
            let keyMutipler = keyMultiplier();
            if (keyMutipler > global.portal.transport.cargo[r]) {
              keyMutipler = global.portal.transport.cargo[r];
            }
            if (global.portal.transport.cargo[r] > 0) {
              global.portal.transport.cargo[r] -= keyMutipler;
              global.portal.transport.cargo.used -= keyMutipler;
            }
          }
        }
      });
    }
  }
  function initAlchemy() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 4)) {
      return;
    }
    clearElement($("#resAlchemy"));
  }
  function loadAlchemy(name, color, basic) {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 4 || global.settings.marketTabs !== 4)) {
      return;
    } else if (global.race["artifical"] && name === "Food") {
      return;
    }
    if (global.tech["alchemy"] && (basic || global.tech.alchemy >= 2) && name !== "Crystal") {
      let alchemy = $(`<div id="alchemy${name}" class="market-item" v-show="r.display"><h3 class="res has-text-${color}">${global.resource[name].name}</h3></div>`);
      $("#resAlchemy").append(alchemy);
      let res = $(`<span class="trade"></span>`);
      alchemy.append(res);
      res.append($(`<span role="button" aria-label="transmute less ${global.resource[name].name}" class="sub has-text-danger" @click="subSpell('${name}')"><span>&laquo;</span></span>`));
      res.append($(`<span class="current">{{ a.${name} }}</span>`));
      res.append($(`<span role="button" aria-label="transmute more ${global.resource[name].name}" class="add has-text-success" @click="addSpell('${name}')"><span>&raquo;</span></span>`));
      if (!global.race.alchemy.hasOwnProperty(name)) {
        global.race.alchemy[name] = 0;
      }
      vBind({
        el: `#alchemy${name}`,
        data: {
          r: global.resource[name],
          a: global.race.alchemy
        },
        methods: {
          addSpell(spell) {
            let keyMult = keyMultiplier();
            let change = Math.min(Math.floor(global.resource.Mana.diff), keyMult);
            if (change > 0) {
              global.race.alchemy[spell] += change;
              global.resource.Mana.diff -= change;
            }
          },
          subSpell(spell) {
            let keyMult = keyMultiplier();
            let change = Math.min(global.race.alchemy[spell], keyMult);
            if (change > 0) {
              global.race.alchemy[spell] -= change;
              global.resource.Mana.diff += change;
            }
          }
        }
      });
      popover(
        `alchemy${name}`,
        function() {
          let rate = basic && global.tech.alchemy >= 2 ? tradeRatio[name] * 8 : tradeRatio[name] * 2;
          if (global.race["witch_hunter"]) {
            rate *= 3;
          }
          if (global.stats.achieve["soul_sponge"] && global.stats.achieve.soul_sponge["mg"]) {
            rate *= global.stats.achieve.soul_sponge.mg + 1;
          }
          return $(`<div>${loc("resource_alchemy", [1, loc(`resource_Mana_name`), 0.15, loc(`resource_Crystal_name`), +rate.toFixed(2), global.resource[name].name])}</div>`);
        },
        {
          elm: `#alchemy${name} h3`
        }
      );
    }
  }
  var spatialReasoning = /* @__PURE__ */ function() {
    var spatial = {};
    return function(value, type, recalc) {
      let tkey = type ? type : "a";
      let key = [
        global.race.universe,
        global.prestige.Plasmid.count,
        global.prestige.AntiPlasmid.count,
        global.prestige.Phage.count,
        global.race["no_plasmid"] || "0",
        global.race["p_mutation"] || "0",
        global.race["nerfed"] || "0",
        global.genes["store"] || "0",
        global.genes["bleed"] || "0",
        templeCount(false) || "0",
        templeCount(true) || "0",
        global.race["cataclysm"] ? global.race.cataclysm : "0",
        global.race["orbit_decayed"] ? global.race.orbit_decayed : "0",
        global.genes["ancients"] || "0",
        global.civic["priest"] ? global.civic.priest.workers : "0"
      ].join("-");
      if (!spatial[tkey]) {
        spatial[tkey] = {};
      }
      if (!spatial[tkey][key] || recalc) {
        let modifier = 1;
        if (global.genes["store"]) {
          let plasmids = 0;
          if (!type || type && (type === "plasmid" && global.race.universe !== "antimatter" || type === "anti" && global.race.universe === "antimatter")) {
            plasmids = global.race.universe === "antimatter" ? global.prestige.AntiPlasmid.count : global.prestige.Plasmid.count;
            let raw = plasmids;
            if (global.race["no_plasmid"]) {
              let active = global.race.p_mutation + (global.race["wish"] && global.race["wishStats"] ? global.race.wishStats.plas : 0);
              raw = Math.min(active, plasmids);
            } else if (global.race["nerfed"]) {
              raw = Math.floor(plasmids / (global.race.universe === "antimatter" ? 2 : 5));
            }
            plasmids = Math.round(raw * (global.race["nerfed"] ? 0.5 : 1));
          }
          if (!type || type && type === "phage") {
            if (global.genes["store"] >= 4) {
              plasmids += Math.round(global.prestige.Phage.count * (global.race["nerfed"] ? 1 / 3 : 1));
            }
          }
          let divisor = global.genes.store >= 2 ? global.genes.store >= 3 ? 1250 : 1666 : 2500;
          if (global.race.universe === "antimatter") {
            divisor *= 2;
          }
          if (global.genes["bleed"] && global.genes["bleed"] >= 3) {
            if (!type || type && (type === "plasmid" && global.race.universe === "antimatter" || type === "anti" && global.race.universe !== "antimatter")) {
              let raw = global.race.universe === "antimatter" ? global.prestige.Plasmid.count / 5 : global.prestige.AntiPlasmid.count / 10;
              plasmids += Math.round(raw * (global.race["nerfed"] ? 0.5 : 1));
            }
          }
          modifier *= 1 + plasmids / divisor;
        }
        if (global.race.universe === "standard") {
          modifier *= darkEffect("standard");
        }
        if (global.race.universe === "antimatter" && faithTempleCount()) {
          let temple = 0.06;
          if (global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
            let priest = global.genes["ancients"] >= 5 ? 12e-4 : global.genes["ancients"] >= 3 ? 1e-3 : 8e-4;
            if (global.race["high_pop"]) {
              priest = highPopAdjust(priest);
            }
            temple += priest * global.civic.priest.workers;
          }
          modifier *= 1 + faithTempleCount() * temple;
        }
        if (!type) {
          if (global["pillars"]) {
            let harmonic = calcPillar();
            modifier *= harmonic[1];
          }
        }
        spatial[tkey] = {};
        spatial[tkey][key] = modifier;
      }
      return type ? spatial[tkey][key] * value : Math.round(spatial[tkey][key] * value);
    };
  }();
  function faithTempleCount() {
    let noEarth = global.race["cataclysm"] || global.race["orbit_decayed"] ? true : false;
    return templeCount(noEarth);
  }
  function faithBonus(num_temples = -1) {
    if (global.race["no_plasmid"] || global.race.universe === "antimatter") {
      if (num_temples == -1) {
        num_temples = faithTempleCount();
      }
      if (num_temples > 0) {
        let temple_bonus = global.tech["anthropology"] && global.tech["anthropology"] >= 1 ? 0.016 : 0.01;
        if (global.tech["fanaticism"] && global.tech["fanaticism"] >= 2) {
          let indoc = workerScale(global.civic.professor.workers, "professor") * highPopAdjust(global.race.universe === "antimatter" ? 2e-4 : 4e-4);
          temple_bonus += indoc;
        }
        if (global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
          let priest_bonus = global.genes["ancients"] >= 5 ? 15e-5 : global.genes["ancients"] >= 3 ? 125e-6 : 1e-4;
          temple_bonus += highPopAdjust(priest_bonus) * workerScale(global.civic.priest.workers, "priest");
        }
        if (global.race.universe === "antimatter") {
          temple_bonus /= global.race["nerfed"] ? 3 : 2;
        } else if (global.race["nerfed"]) {
          temple_bonus /= 2;
        }
        if (global.race["spiritual"]) {
          temple_bonus *= 1 + traits.spiritual.vars()[0] / 100;
        }
        let fathom = fathomCheck("seraph");
        if (fathom > 0) {
          temple_bonus *= 1 + traits.spiritual.vars(1)[0] / 100 * fathom;
        }
        if (global.race["blasphemous"]) {
          temple_bonus *= 1 - traits.blasphemous.vars()[0] / 100;
        }
        if (global.civic.govern.type === "theocracy") {
          temple_bonus *= 1 + govEffect.theocracy()[0] / 100;
        }
        if (global.race["ooze"]) {
          temple_bonus *= 1 - traits.ooze.vars()[1] / 100;
        }
        return num_temples * temple_bonus;
      }
    }
    return 0;
  }
  function templePlasmidBonus(num_temples = -1) {
    if (!global.race["no_plasmid"] && global.race.universe !== "antimatter") {
      if (num_temples == -1) {
        num_temples = faithTempleCount();
      }
      if (num_temples > 0) {
        let temple_bonus = global.tech["anthropology"] && global.tech["anthropology"] >= 1 ? 0.08 : 0.05;
        if (global.tech["fanaticism"] && global.tech["fanaticism"] >= 2) {
          let indoc = workerScale(global.civic.professor.workers, "professor") * highPopAdjust(2e-3);
          temple_bonus += indoc;
        }
        if (global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
          let priest_bonus = global.genes["ancients"] >= 5 ? 15e-4 : global.genes["ancients"] >= 3 ? 125e-5 : 1e-3;
          temple_bonus += highPopAdjust(priest_bonus) * workerScale(global.civic.priest.workers, "priest");
        }
        if (global.race["spiritual"]) {
          temple_bonus *= 1 + traits.spiritual.vars()[0] / 100;
        }
        let fathom = fathomCheck("seraph");
        if (fathom > 0) {
          temple_bonus *= 1 + traits.spiritual.vars(1)[0] / 100 * fathom;
        }
        if (global.race["blasphemous"]) {
          temple_bonus *= 1 - traits.blasphemous.vars()[0] / 100;
        }
        if (global.civic.govern.type === "theocracy") {
          temple_bonus *= 1 + govEffect.theocracy()[0] / 100;
        }
        if (global.race["ooze"]) {
          temple_bonus *= 1 - traits.ooze.vars()[1] / 100;
        }
        if (global.race["orbit_decayed"] && global.race["truepath"]) {
          temple_bonus *= 0.1;
        }
        return num_temples * temple_bonus;
      }
    }
    return 0;
  }
  var plasmidBonus = /* @__PURE__ */ function() {
    var plasma = {};
    return function(type) {
      let key = [
        global.race.universe,
        global.prestige.Plasmid.count,
        global.prestige.AntiPlasmid.count,
        global.prestige.Phage.count,
        global.civic.govern.type,
        global.civic.professor.assigned,
        global.genes["bleed"] || "0",
        global.race["decayed"] || "0",
        global.race["gene_fortify"] || "0",
        global.tech["anthropology"] || "0",
        global.tech["fanaticism"] || "0",
        global.race["nerfed"] || "0",
        global.race["no_plasmid"] || "0",
        global.genes["ancients"] || "0",
        templeCount(false) || "0",
        templeCount(true) || "0",
        global.civic["priest"] ? global.civic.priest.workers : "0",
        global.race["orbit_decayed"] ? global.race.orbit_decayed : "0",
        global.race["spiritual"] || "0",
        global.tech["outpost_boost"] || "0",
        p_on["alien_outpost"] || "0"
      ].join("-");
      if (!plasma[key]) {
        let standard = 0;
        let anti = 0;
        if (global.race.universe !== "antimatter" || global.genes["bleed"]) {
          let active = global.race.p_mutation + (global.race["wish"] && global.race["wishStats"] ? global.race.wishStats.plas : 0);
          let plasmids = global.race["no_plasmid"] ? Math.min(active, global.prestige.Plasmid.count) : global.prestige.Plasmid.count;
          if (global.race.universe === "antimatter" && global.genes["bleed"]) {
            plasmids *= 0.025;
          }
          if (global.race["decayed"]) {
            plasmids -= Math.round((global.stats.days - global.race.decayed) / (300 + global.race.gene_fortify * 6));
          }
          let p_cap = 250 + global.prestige.Phage.count;
          if (plasmids > p_cap) {
            standard = +(Math.log(p_cap + 50) - 3.91202).toFixed(5) / 2.888 + Math.log(plasmids + 1 - p_cap) / Math.LN2 / 250;
          } else if (plasmids < 0) {
            standard = 0;
          } else {
            standard = +(Math.log(plasmids + 50) - 3.91202).toFixed(5) / 2.888;
          }
          if (global.tech["outpost_boost"] && global.race["truepath"] && p_on["alien_outpost"]) {
            standard *= 2;
          }
          let temple_bonus = templePlasmidBonus();
          standard *= 1 + temple_bonus;
        }
        if (global.race.universe === "antimatter" || global.genes["bleed"] && global.genes["bleed"] >= 2) {
          let plasmids = global.prestige.AntiPlasmid.count;
          if (global.race.universe !== "antimatter" && global.genes["bleed"] && global.genes["bleed"] >= 2) {
            plasmids *= 0.25;
          }
          if (global.race["decayed"]) {
            plasmids -= Math.round((global.stats.days - global.race.decayed) / (300 + global.race.gene_fortify * 6));
          }
          let p_cap = 250 + global.prestige.Phage.count;
          if (plasmids > p_cap) {
            anti = +(Math.log(p_cap + 50) - 3.91202).toFixed(5) / 2.888 + Math.log(plasmids + 1 - p_cap) / Math.LN2 / 250;
          } else if (plasmids < 0) {
            anti = 0;
          } else {
            anti = +(Math.log(plasmids + 50) - 3.91202).toFixed(5) / 2.888;
          }
          if (global.tech["outpost_boost"] && global.race["truepath"] && p_on["alien_outpost"]) {
            anti *= 2;
          }
          anti /= 3;
        }
        if (global.race["nerfed"]) {
          if (global.race.universe === "antimatter") {
            standard /= 2;
            anti /= 2;
          } else {
            standard /= 5;
            anti /= 5;
          }
        }
        plasma = {};
        let final = (1 + standard) * (1 + anti) - 1;
        plasma[key] = [final, standard, anti];
      }
      if (type && type === "raw") {
        return plasma[key];
      } else if (type && type === "plasmid") {
        return plasma[key][1];
      } else if (type && type === "antiplasmid") {
        return plasma[key][2];
      } else {
        return plasma[key][0];
      }
    };
  }();

  // src/actions.js
  var actions = {
    evolution: {
      rna: {
        id: "evolution-rna",
        title: loc("resource_RNA_name"),
        desc() {
          let rna = global.race["rapid_mutation"] ? 2 : 1;
          return loc("evo_rna", [rna]);
        },
        condition() {
          return global.resource.hasOwnProperty("RNA") && global.resource.RNA.display && !global.race["evoFinalMenu"];
        },
        action(args) {
          if (global["resource"]["RNA"].amount < global["resource"]["RNA"].max) {
            modRes("RNA", global.race["rapid_mutation"] ? 2 : 1, true);
          }
          return false;
        },
        queue_complete() {
          return 0;
        }
      },
      dna: {
        id: "evolution-dna",
        title: loc("evo_dna_title"),
        desc: loc("evo_dna_desc"),
        condition() {
          return global.resource.hasOwnProperty("DNA") && global.resource.DNA.display && global.resource.DNA.amount < global.resource.DNA.max && !global.race["evoFinalMenu"];
        },
        cost: { RNA() {
          return 2;
        } },
        action(args) {
          if (global["resource"]["RNA"].amount >= 2 && global["resource"]["DNA"].amount < global["resource"]["DNA"].max) {
            modRes("RNA", -2, true);
            modRes("DNA", 1, true);
          }
          return false;
        },
        effect: loc("evo_dna_effect"),
        queue_complete() {
          return 0;
        }
      },
      membrane: {
        id: "evolution-membrane",
        title: loc("evo_membrane_title"),
        desc: loc("evo_membrane_desc"),
        condition() {
          return global.evolution.hasOwnProperty("membrane") && !global.race["evoFinalMenu"];
        },
        cost: { RNA(offset) {
          return evolveCosts("membrane", 2, 2, offset);
        } },
        effect() {
          let effect = global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 5 + 5 : 5;
          return loc("evo_membrane_effect", [effect]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global["resource"]["RNA"].max += global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 5 + 5 : 5;
            global.evolution.membrane.count++;
            return true;
          }
          return false;
        }
      },
      organelles: {
        id: "evolution-organelles",
        title: loc("evo_organelles_title"),
        desc: loc("evo_organelles_desc"),
        condition() {
          return global.evolution.hasOwnProperty("organelles") && !global.race["evoFinalMenu"];
        },
        cost: {
          RNA(offset) {
            return evolveCosts("organelles", 12, 8, offset);
          },
          DNA(offset) {
            return evolveCosts("organelles", 4, 4, offset);
          }
        },
        effect() {
          let rna = global.race["rapid_mutation"] ? 2 : 1;
          if (global.tech["evo"] && global.tech.evo >= 2) {
            rna++;
          }
          return loc("evo_organelles_effect", [rna]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution.organelles.count++;
            return true;
          }
          return false;
        }
      },
      nucleus: {
        id: "evolution-nucleus",
        title: loc("evo_nucleus_title"),
        desc: loc("evo_nucleus_desc"),
        condition() {
          return global.evolution.hasOwnProperty("nucleus") && !global.race["evoFinalMenu"];
        },
        cost: {
          RNA(offset) {
            return evolveCosts("nucleus", 38, global.tech["evo"] && global.tech.evo >= 4 ? 16 : 32, offset);
          },
          DNA(offset) {
            return evolveCosts("nucleus", 18, global.tech["evo"] && global.tech.evo >= 4 ? 12 : 16, offset);
          }
        },
        effect() {
          let dna = global.tech["evo"] && global.tech.evo >= 5 ? 2 : 1;
          return loc("evo_nucleus_effect", [dna]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution.nucleus.count++;
            return true;
          }
          return false;
        }
      },
      eukaryotic_cell: {
        id: "evolution-eukaryotic_cell",
        title: loc("evo_eukaryotic_title"),
        desc: loc("evo_eukaryotic_desc"),
        condition() {
          return global.evolution.hasOwnProperty("eukaryotic_cell") && !global.race["evoFinalMenu"];
        },
        cost: {
          RNA(offset) {
            return evolveCosts("eukaryotic_cell", 20, 20, offset);
          },
          DNA(offset) {
            return evolveCosts("eukaryotic_cell", 40, 12, offset);
          }
        },
        effect() {
          let effect = global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 10 + 10 : 10;
          return loc("evo_eukaryotic_effect", [effect]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution.eukaryotic_cell.count++;
            global["resource"]["DNA"].max += global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 10 + 10 : 10;
            return true;
          }
          return false;
        }
      },
      mitochondria: {
        id: "evolution-mitochondria",
        title: loc("evo_mitochondria_title"),
        desc: loc("evo_mitochondria_desc"),
        condition() {
          return global.evolution.hasOwnProperty("mitochondria") && !global.race["evoFinalMenu"];
        },
        cost: {
          RNA(offset) {
            return evolveCosts("mitochondria", 75, 50, offset);
          },
          DNA(offset) {
            return evolveCosts("mitochondria", 65, 35, offset);
          }
        },
        effect: loc("evo_mitochondria_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution.mitochondria.count++;
            return true;
          }
          return false;
        }
      },
      sexual_reproduction: {
        id: "evolution-sexual_reproduction",
        title: loc("evo_sexual_reproduction_title"),
        desc: loc("evo_sexual_reproduction_desc"),
        reqs: { evo: 1 },
        grant: ["evo", 2],
        condition() {
          return global.tech["evo"] && global.tech.evo === 1;
        },
        cost: {
          DNA() {
            return 150;
          }
        },
        effect: loc("evo_sexual_reproduction_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 20;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 1 ? 1 : 0;
        }
      },
      phagocytosis: {
        id: "evolution-phagocytosis",
        title: loc("evo_phagocytosis_title"),
        desc: loc("evo_phagocytosis_desc"),
        reqs: { evo: 2 },
        grant: ["evo", 3],
        condition() {
          return global.tech["evo"] && global.tech.evo === 2;
        },
        cost: {
          DNA() {
            return 175;
          }
        },
        effect: loc("evo_phagocytosis_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_animal"] = 1;
            global.evolution["final"] = 40;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 2 ? 1 : 0;
        }
      },
      chloroplasts: {
        id: "evolution-chloroplasts",
        title() {
          return global.evolution["gselect"] ? loc("genelab_genus_plant") : loc("evo_chloroplasts_title");
        },
        desc: loc("evo_chloroplasts_desc"),
        reqs: { evo: 2 },
        grant: ["evo", 3],
        condition() {
          return genus_condition(2);
        },
        cost: {
          DNA() {
            return 175;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_chloroplasts_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_chloroplasts_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.evolution["gselect"]) {
              global.tech["evo"] = 7;
              global.tech["evo_plant"] = 2;
              global.evolution["final"] = 100;
            } else {
              global.tech["evo_plant"] = 1;
              global.evolution["final"] = 40;
            }
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_plant");
        }
      },
      chitin: {
        id: "evolution-chitin",
        title() {
          return global.evolution["gselect"] ? loc("genelab_genus_fungi") : loc("evo_chitin_title");
        },
        desc: loc("evo_chitin_desc"),
        reqs: { evo: 2 },
        grant: ["evo", 3],
        condition() {
          return genus_condition(2);
        },
        cost: {
          DNA() {
            return 175;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_chitin_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_chitin_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.evolution["gselect"]) {
              global.tech["evo"] = 7;
              global.tech["evo_fungi"] = 2;
              global.evolution["final"] = 100;
            } else {
              global.tech["evo_fungi"] = 1;
              global.evolution["final"] = 40;
            }
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_fungi");
        }
      },
      exterminate: {
        id: "evolution-exterminate",
        title() {
          return global.evolution["gselect"] ? loc("genelab_genus_synthetic") : loc("evo_exterminate_title");
        },
        desc: loc("evo_exterminate_desc"),
        reqs: { evo: 2 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(2) && global.stats.achieve["obsolete"] && global.stats.achieve.obsolete.l >= 5;
        },
        cost: {
          DNA() {
            return 200;
          }
        },
        effect() {
          return loc("evo_exterminate_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_synthetic"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_synthetic");
        }
      },
      multicellular: {
        id: "evolution-multicellular",
        title: loc("evo_multicellular_title"),
        desc: loc("evo_multicellular_desc"),
        reqs: { evo: 3 },
        grant: ["evo", 4],
        condition() {
          return global.tech["evo"] && global.tech.evo === 3;
        },
        cost: {
          DNA() {
            return 200;
          }
        },
        effect: loc("evo_multicellular_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 60;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 3 ? 1 : 0;
        }
      },
      spores: {
        id: "evolution-spores",
        title: loc("evo_spores_title"),
        desc: loc("evo_spores_desc"),
        reqs: { evo: 4, evo_fungi: 1 },
        grant: ["evo", 5],
        condition() {
          return global.tech["evo"] && global.tech.evo === 4;
        },
        cost: {
          DNA() {
            return 230;
          }
        },
        effect: loc("evo_nucleus_boost"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 80;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 4 ? 1 : 0;
        }
      },
      poikilohydric: {
        id: "evolution-poikilohydric",
        title: loc("evo_poikilohydric_title"),
        desc: loc("evo_poikilohydric_desc"),
        reqs: { evo: 4, evo_plant: 1 },
        grant: ["evo", 5],
        condition() {
          return global.tech["evo"] && global.tech.evo === 4;
        },
        cost: {
          DNA() {
            return 230;
          }
        },
        effect: loc("evo_nucleus_boost"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 80;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 4 ? 1 : 0;
        }
      },
      bilateral_symmetry: {
        id: "evolution-bilateral_symmetry",
        title: loc("evo_bilateral_symmetry_title"),
        desc: loc("evo_bilateral_symmetry_desc"),
        reqs: { evo: 4, evo_animal: 1 },
        grant: ["evo", 5],
        condition() {
          return global.tech["evo"] && global.tech.evo === 4;
        },
        cost: {
          DNA() {
            return 230;
          }
        },
        effect: loc("evo_nucleus_boost"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 80;
            global.tech["evo_insectoid"] = 1;
            global.tech["evo_mammals"] = 1;
            global.tech["evo_eggshell"] = 1;
            global.tech["evo_eldritch"] = 1;
            global.tech["evo_aquatic"] = 1;
            global.tech["evo_fey"] = 1;
            global.tech["evo_sand"] = 1;
            global.tech["evo_heat"] = 1;
            global.tech["evo_polar"] = 1;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 4 ? 1 : 0;
        }
      },
      bryophyte: {
        id: "evolution-bryophyte",
        title: loc("evo_bryophyte_title"),
        desc: loc("evo_bryophyte_desc"),
        reqs: { evo: 5 },
        grant: ["evo", 7],
        condition() {
          let allowed = global.tech["evo_plant"] || global.tech["evo_fungi"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_bryophyte_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.evolution["final"] = 100;
            if (global.tech["evo_fungi"]) {
              global.tech["evo_fungi"] = 2;
            }
            if (global.tech["evo_plant"]) {
              global.tech["evo_plant"] = 2;
            }
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        }
      },
      athropods: {
        id: "evolution-athropods",
        title: loc("evo_athropods_title"),
        desc: loc("evo_athropods_desc"),
        reqs: { evo: 5, evo_insectoid: 1 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_athropods_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_athropods_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_insectoid = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_insectoid");
        }
      },
      mammals: {
        id: "evolution-mammals",
        title: loc("evo_mammals_title"),
        desc: loc("evo_mammals_desc"),
        reqs: { evo: 5, evo_mammals: 1 },
        grant: ["evo", 6],
        condition() {
          return global.tech["evo"] && global.tech.evo === 5;
        },
        cost: {
          DNA() {
            return 245;
          }
        },
        effect: loc("evo_mammals_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_humanoid"] = 1;
            global.tech["evo_giant"] = 1;
            global.tech["evo_small"] = 1;
            global.tech["evo_animalism"] = 1;
            global.tech["evo_demonic"] = 1;
            global.tech["evo_angelic"] = 1;
            global.evolution["final"] = 90;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        }
      },
      humanoid: {
        id: "evolution-humanoid",
        title: loc("evo_humanoid_title"),
        desc: loc("evo_humanoid_desc"),
        reqs: { evo: 6, evo_humanoid: 1 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_humanoid_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_humanoid_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_humanoid = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_humanoid");
        }
      },
      gigantism: {
        id: "evolution-gigantism",
        title: loc("evo_gigantism_title"),
        desc: loc("evo_gigantism_desc"),
        reqs: { evo: 6, evo_giant: 1 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_gigantism_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_gigantism_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_giant = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_giant");
        }
      },
      dwarfism: {
        id: "evolution-dwarfism",
        title: loc("evo_dwarfism_title"),
        desc: loc("evo_dwarfism_desc"),
        reqs: { evo: 6, evo_small: 1 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_dwarfism_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_dwarfism_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_small = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_small");
        }
      },
      animalism: {
        id: "evolution-animalism",
        title: loc("evo_animalism_title"),
        desc: loc("evo_animalism_desc"),
        reqs: { evo: 6, evo_animalism: 1 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6) && global.tech["evo_animalism"] && global.tech.evo_animalism === 1;
        },
        cost: {
          DNA() {
            return 250;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_animalism_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_animalism_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_animalism = 2;
            global.evolution["final"] = 95;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 && global.tech.evo_animalism === 1 ? 1 : 0;
        }
      },
      carnivore: {
        id: "evolution-carnivore",
        title: loc("evo_carnivore_title"),
        desc: loc("evo_carnivore_desc"),
        reqs: { evo_animalism: 2 },
        grant: ["evo_animalism", 3],
        condition() {
          return genus_condition(7) && global.tech["evo_animalism"] && global.tech.evo_animalism === 2;
        },
        cost: {
          DNA() {
            return 255;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_carnivore_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_carnivore_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo"] = 7;
            global.tech["evo_carnivore"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 7 && global.tech.evo_animalism === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_carnivore");
        }
      },
      herbivore: {
        id: "evolution-herbivore",
        title: loc("evo_herbivore_title"),
        desc: loc("evo_herbivore_desc"),
        reqs: { evo_animalism: 2 },
        grant: ["evo_animalism", 3],
        condition() {
          return genus_condition(7) && global.tech["evo_animalism"] && global.tech.evo_animalism === 2;
        },
        cost: {
          DNA() {
            return 255;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_herbivore_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_herbivore_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo"] = 7;
            global.tech["evo_herbivore"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 7 && global.tech.evo_animalism === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_herbivore");
        }
      },
      omnivore: {
        id: "evolution-omnivore",
        title: loc("evo_omnivore_title"),
        desc: loc("evo_omnivore_desc"),
        reqs: { evo_animalism: 2, locked: 1 },
        grant: ["evo_animalism", 3],
        condition() {
          return genus_condition(7) && global.tech["evo_animalism"] && global.tech.evo_animalism === 2;
        },
        cost: {
          DNA() {
            return 255;
          }
        },
        wiki: false,
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_omnivore_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_omnivore_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_omnivore"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 7 && global.tech.evo_animalism === 2 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_omnivore");
        }
      },
      celestial: {
        id: "evolution-celestial",
        title: loc("evo_celestial_title"),
        desc: loc("evo_celestial_desc"),
        reqs: { evo: 6, evo_angelic: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = global.city.biome === "eden" || global.blood["unbound"] && global.blood.unbound >= 3 ? true : false;
          return allowed && genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return loc("evo_celestial_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_angelic = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_angelic");
        }
      },
      demonic: {
        id: "evolution-demonic",
        title: loc("evo_demonic_title"),
        desc: loc("evo_demonic_desc"),
        reqs: { evo: 6, evo_demonic: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = global.city.biome === "hellscape" || global.blood["unbound"] && global.blood.unbound >= 3 ? true : false;
          return allowed && genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe === "evil" ? `<div>${loc("evo_demonic_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_demonic_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_demonic = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_demonic");
        }
      },
      eldritch: {
        id: "evolution-eldritch",
        title: loc("evo_eldritch_title"),
        desc: loc("evo_eldritch_desc"),
        reqs: { evo: 5, evo_eldritch: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_eldritch_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_eldritch = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_eldritch");
        }
      },
      aquatic: {
        id: "evolution-aquatic",
        title: loc("evo_aquatic_title"),
        desc: loc("evo_aquatic_desc"),
        reqs: { evo: 5, evo_aquatic: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = ["oceanic", "swamp"].includes(global.city.biome) || global.blood["unbound"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_aquatic_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_aquatic = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_aquatic");
        }
      },
      fey: {
        id: "evolution-fey",
        title: loc("evo_fey_title"),
        desc: loc("evo_fey_desc"),
        reqs: { evo: 5, evo_fey: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = ["forest", "swamp", "taiga"].includes(global.city.biome) || global.blood["unbound"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_fey_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_fey = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_fey");
        }
      },
      heat: {
        id: "evolution-heat",
        title: loc("evo_heat_title"),
        desc: loc("evo_heat_desc"),
        reqs: { evo: 5, evo_heat: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = ["volcanic", "ashland"].includes(global.city.biome) || global.blood["unbound"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_heat_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_heat = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_heat");
        }
      },
      polar: {
        id: "evolution-polar",
        title: loc("evo_polar_title"),
        desc: loc("evo_polar_desc"),
        reqs: { evo: 5, evo_polar: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = ["tundra", "taiga"].includes(global.city.biome) || global.blood["unbound"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_polar_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_polar = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_polar");
        }
      },
      sand: {
        id: "evolution-sand",
        title: loc("evo_sand_title"),
        desc: loc("evo_sand_desc"),
        reqs: { evo: 5, evo_sand: 1 },
        grant: ["evo", 7],
        condition() {
          let allowed = ["desert", "ashland"].includes(global.city.biome) || global.blood["unbound"] ? true : false;
          return allowed && genus_condition(5);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_sand_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_sand = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_sand");
        }
      },
      eggshell: {
        id: "evolution-eggshell",
        title: loc("evo_eggshell_title"),
        desc: loc("evo_eggshell_desc"),
        reqs: { evo: 5, evo_eggshell: 1 },
        grant: ["evo", 6],
        condition() {
          return global.tech["evo"] && global.tech.evo === 5 && !global.evolution["gselect"];
        },
        cost: {
          DNA() {
            return 245;
          }
        },
        effect() {
          return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_eggshell_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_eggshell_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech.evo_eggshell = 2;
            global.evolution["final"] = 90;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 5 ? 1 : 0;
        }
      },
      endothermic: {
        id: "evolution-endothermic",
        title() {
          return global.evolution["gselect"] ? loc("genelab_genus_avian") : loc("evo_endothermic_title");
        },
        desc: loc("evo_endothermic_desc"),
        reqs: { evo: 6, evo_eggshell: 2 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_endothermic_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_avian"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_avian");
        }
      },
      ectothermic: {
        id: "evolution-ectothermic",
        title() {
          return global.evolution["gselect"] ? loc("genelab_genus_reptilian") : loc("evo_ectothermic_title");
        },
        desc: loc("evo_ectothermic_desc"),
        reqs: { evo: 6, evo_eggshell: 2 },
        grant: ["evo", 7],
        condition() {
          return genus_condition(6);
        },
        cost: {
          DNA() {
            return 260;
          }
        },
        effect: loc("evo_ectothermic_effect"),
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["evo_reptilian"] = 2;
            global.evolution["final"] = 100;
            return true;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 6 ? 1 : 0;
        },
        emblem() {
          return format_emblem("genus_reptilian");
        }
      },
      sentience: {
        id: "evolution-sentience",
        title: loc("evo_sentience_title"),
        desc: loc("evo_sentience_desc"),
        reqs: { evo: 7 },
        grant: ["evo", 8],
        condition() {
          return global.tech["evo"] && global.tech.evo === 7 && global.evolution["final"] === 100;
        },
        cost: {
          RNA() {
            return 300;
          },
          DNA() {
            return 300;
          }
        },
        effect() {
          return global.evolution["exterminate"] ? loc("evo_sentience_ai_effect") : loc("evo_sentience_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let allowed = [];
            let type = "humanoid";
            for (let genus in genus_def) {
              if (global.tech[`evo_${genus}`] && global.tech[`evo_${genus}`] >= 2) {
                type = genus;
                break;
              }
            }
            if (global.race["junker"] || global.race["sludge"] || global.race["ultra_sludge"]) {
              let race = global.race["sludge"] ? "sludge" : global.race["ultra_sludge"] ? "ultra_sludge" : "junker";
              global.race["jtype"] = type;
              allowed.push(race);
            } else {
              for (let idx in raceList) {
                let id = raceList[idx];
                if (races[id].type === type) {
                  allowed.push(id);
                }
              }
            }
            global.race.species = allowed[Math.floor(seededRandom(0, allowed.length))];
            if (global.stats.achieve[`extinct_${global.race.species}`] && global.stats.achieve[`extinct_${global.race.species}`].l >= 1) {
              global.race.species = allowed[Math.floor(seededRandom(0, allowed.length))];
            }
            sentience();
          }
          return false;
        },
        emblem() {
          for (let idx in raceList) {
            let id = raceList[idx];
            if (global.tech[`evo_${races[id].type}`] && global.tech[`evo_${races[id].type}`] >= 2) {
              return format_emblem(`genus_${races[id].type}`);
            }
          }
          return "";
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 7 ? 1 : 0;
        }
      }
    },
    city: {
      gift: {
        id: "city-gift",
        title: loc("city_gift"),
        desc: loc("city_gift_desc"),
        wiki: false,
        category: "outskirts",
        reqs: { primitive: 1 },
        queue_complete() {
          return 0;
        },
        not_tech: ["santa"],
        not_trait: ["cataclysm", "lone_survivor"],
        class: ["hgift"],
        condition() {
          const date2 = /* @__PURE__ */ new Date();
          if (date2.getMonth() !== 11 || date2.getMonth() === 11 && (date2.getDate() <= 16 || date2.getDate() >= 25)) {
            let active_gift = false;
            if (global["special"] && global.special["gift"]) {
              Object.keys(global.special.gift).forEach(function(g) {
                if (global.special.gift[g]) {
                  active_gift = true;
                }
              });
            }
            return active_gift;
          }
          return false;
        },
        count() {
          let gift_count = 0;
          if (global["special"] && global.special["gift"]) {
            Object.keys(global.special.gift).forEach(function(g) {
              if (global.special.gift[g]) {
                gift_count++;
              }
            });
          }
          return gift_count;
        },
        action(args) {
          if (!global.settings.pause) {
            const date2 = /* @__PURE__ */ new Date();
            let active_gift = false;
            if (global["special"] && global.special["gift"]) {
              Object.keys(global.special.gift).forEach(function(g) {
                if (global.special.gift[g]) {
                  active_gift = g;
                }
              });
            }
            if (date2.getMonth() !== 11 || date2.getMonth() === 11 && (date2.getDate() <= 16 || date2.getDate() >= 25)) {
              if (active_gift === `g2019`) {
                if (global["special"] && global.special["gift"]) {
                  delete global.special.gift[active_gift];
                  if (global.race.universe === "antimatter") {
                    global.prestige.AntiPlasmid.count += 100;
                    global.stats.antiplasmid += 100;
                    messageQueue(loc("city_gift_msg", [100, loc("arpa_genepool_effect_antiplasmid")]), "info", false, ["events"]);
                  } else {
                    global.prestige.Plasmid.count += 100;
                    global.stats.plasmid += 100;
                    messageQueue(loc("city_gift_msg", [100, loc("arpa_genepool_effect_plasmid")]), "info", false, ["events"]);
                  }
                  drawCity();
                }
              } else {
                if (global["special"] && global.special["gift"]) {
                  delete global.special.gift[active_gift];
                  let resets = global.stats.hasOwnProperty("reset") ? global.stats.reset : 0;
                  let mad = global.stats.hasOwnProperty("mad") ? global.stats.mad : 0;
                  let bioseed2 = global.stats.hasOwnProperty("bioseed") ? global.stats.bioseed : 0;
                  let cataclysm2 = global.stats.hasOwnProperty("cataclysm") ? global.stats.cataclysm : 0;
                  let plasmid = 100 + resets + mad;
                  let phage = bioseed2 + cataclysm2;
                  let gift = [];
                  if (global.stats.died + global.stats.tdied > 0) {
                    let dead = global.stats.died + global.stats.tdied;
                    global.resource.Coal.amount += dead;
                    gift.push(`${dead.toLocaleString()} ${loc(`resource_Coal_name`)}`);
                  }
                  if (global.race.universe === "antimatter") {
                    global.prestige.AntiPlasmid.count += plasmid;
                    global.stats.antiplasmid += plasmid;
                    gift.push(`${plasmid.toLocaleString()} ${loc(`resource_AntiPlasmid_plural_name`)}`);
                  } else {
                    global.prestige.Plasmid.count += plasmid;
                    global.stats.plasmid += plasmid;
                    gift.push(`${plasmid.toLocaleString()} ${loc(`resource_Plasmid_plural_name`)}`);
                  }
                  if (phage > 0) {
                    global.prestige.Phage.count += phage;
                    global.stats.phage += phage;
                    gift.push(`${phage.toLocaleString()} ${loc(`resource_Phage_name`)}`);
                  }
                  if (global.stats.hasOwnProperty("achieve")) {
                    let universe = global.stats.achieve["whitehole"] ? global.stats.achieve["whitehole"].l : 0;
                    universe += global.stats.achieve["heavy"] ? global.stats.achieve["heavy"].l : 0;
                    universe += global.stats.achieve["canceled"] ? global.stats.achieve["canceled"].l : 0;
                    universe += global.stats.achieve["eviltwin"] ? global.stats.achieve["eviltwin"].l : 0;
                    universe += global.stats.achieve["microbang"] ? global.stats.achieve["microbang"].l : 0;
                    universe += global.stats.achieve["pw_apocalypse"] ? global.stats.achieve["pw_apocalypse"].l : 0;
                    let ascended = global.stats.achieve["ascended"] ? global.stats.achieve["ascended"].l : 0;
                    let descend = global.stats.achieve["corrupted"] ? global.stats.achieve["corrupted"].l : 0;
                    let ai = global.stats.achieve["obsolete"] ? global.stats.achieve["obsolete"].l : 0;
                    if (universe > 30) {
                      universe = 30;
                    }
                    if (ascended > 5) {
                      ascended = 5;
                    }
                    if (descend > 5) {
                      descend = 5;
                    }
                    if (universe > 0) {
                      let dark = +(universe / 7.5).toFixed(2);
                      global.prestige.Dark.count += dark;
                      global.stats.dark += dark;
                      gift.push(`${dark} ${loc(`resource_Dark_name`)}`);
                    }
                    if (ascended > 0) {
                      global.prestige.Harmony.count += ascended;
                      global.stats.harmony += ascended;
                      gift.push(`${ascended} ${loc(`resource_Harmony_name`)}`);
                    }
                    if (descend > 0) {
                      let blood2 = descend * 5;
                      let art = descend;
                      global.prestige.Blood_Stone.count += blood2;
                      global.stats.blood += blood2;
                      global.prestige.Artifact.count += art;
                      global.stats.artifact += art;
                      gift.push(`${blood2} ${loc(`resource_Blood_Stone_name`)}`);
                      gift.push(`${art} ${loc(`resource_Artifact_name`)}`);
                    }
                    if (active_gift !== `g2020` && ai > 0) {
                      global.prestige.AICore.count += ai;
                      global.stats.cores += ai;
                      gift.push(`${ai} ${loc(`resource_AICore_name`)}`);
                    }
                  }
                  messageQueue(loc("city_gift2_msg", [gift.join(", ")]), "info", false, ["events"]);
                  drawCity();
                }
              }
            }
          }
          return false;
        },
        touchlabel: loc(`open`)
      },
      food: {
        id: "city-food",
        title() {
          let hallowed2 = getHalloween();
          if (hallowed2.active) {
            return global.tech["conjuring"] ? loc("city_trick_conjure") : loc("city_trick");
          } else {
            return global.tech["conjuring"] ? loc("city_food_conjure") : loc("city_food");
          }
        },
        desc() {
          let gain = $(this)[0].val(false);
          let hallowed2 = getHalloween();
          if (global.race["fasting"]) {
            return loc("city_food_fasting");
          }
          if (hallowed2.active) {
            return global.tech["conjuring"] ? loc("city_trick_conjure_desc", [gain]) : loc("city_trick_desc", [gain]);
          } else {
            return global.tech["conjuring"] ? loc("city_food_conjure_desc", [gain]) : loc("city_food_desc", [gain]);
          }
        },
        category: "outskirts",
        reqs: { primitive: 1 },
        not_trait: ["cataclysm", "artifical"],
        condition() {
          let hallowed2 = getHalloween();
          if (hallowed2 && global.race["soul_eater"] && !global.race["evil"]) {
            return true;
          }
          return global.race["soul_eater"] ? false : true;
        },
        queue_complete() {
          return 0;
        },
        cost: {
          Mana() {
            return global.tech["conjuring"] ? 1 : 0;
          }
        },
        action(args) {
          if (!global.settings.pause) {
            if (global["resource"]["Food"].amount < global["resource"]["Food"].max && !global.race["fasting"]) {
              modRes("Food", $(this)[0].val(true), true);
            }
            global.stats.cfood++;
            global.stats.tfood++;
          }
          return false;
        },
        val(spend) {
          let gain = global.race["strong"] ? traits.strong.vars()[0] : 1;
          if (global.genes["enhance"]) {
            gain *= 2;
          }
          if (global.tech["conjuring"] && global.resource.Mana.amount >= 1) {
            gain *= 10;
            if (global["resource"]["Food"].amount < global["resource"]["Food"].max && spend) {
              modRes("Mana", -1, true);
            }
          }
          return gain;
        },
        touchlabel: loc(`harvest`)
      },
      lumber: {
        id: "city-lumber",
        title() {
          let hallowed2 = getHalloween();
          if (hallowed2.active) {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? loc("city_dig_conjour") : loc("city_dig");
          } else {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? loc("city_lumber_conjure") : loc("city_lumber");
          }
        },
        desc() {
          let gain = $(this)[0].val(false);
          let hallowed2 = getHalloween();
          if (hallowed2.active) {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? loc("city_dig_conjour_desc", [gain]) : loc("city_dig_desc", [gain]);
          } else {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? loc("city_lumber_conjure_desc", [gain]) : loc("city_lumber_desc", [gain]);
          }
        },
        category: "outskirts",
        reqs: {},
        not_trait: ["evil", "cataclysm"],
        queue_complete() {
          return 0;
        },
        cost: {
          Mana() {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? 1 : 0;
          }
        },
        action(args) {
          if (!global.settings.pause) {
            if (global["resource"]["Lumber"].amount < global["resource"]["Lumber"].max) {
              modRes("Lumber", $(this)[0].val(true), true);
            }
            global.stats.clumber++;
            global.stats.tlumber++;
          }
          return false;
        },
        val(spend) {
          let gain = global.race["strong"] ? traits.strong.vars()[0] : 1;
          if (global.genes["enhance"]) {
            gain *= 2;
          }
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2 && global.resource.Mana.amount >= 1) {
            gain *= 10;
            if (global["resource"]["Lumber"].amount < global["resource"]["Lumber"].max && spend) {
              modRes("Mana", -1, true);
            }
          }
          return gain;
        },
        touchlabel: loc(`harvest`)
      },
      stone: {
        id: "city-stone",
        title() {
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2) {
            return loc(`city_conjour`, [global.resource.Stone.name]);
          } else {
            return loc(`city_gather`, [global.resource.Stone.name]);
          }
        },
        desc() {
          let gain = $(this)[0].val(false);
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2) {
            return loc("city_stone_conjour_desc", [gain, global.resource.Stone.name]);
          } else {
            return loc(global.race["sappy"] ? "city_amber_desc" : "city_stone_desc", [gain, global.resource.Stone.name]);
          }
        },
        category: "outskirts",
        reqs: { primitive: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        queue_complete() {
          return 0;
        },
        cost: {
          Mana() {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? 1 : 0;
          }
        },
        action(args) {
          if (!global.settings.pause) {
            if (global["resource"]["Stone"].amount < global["resource"]["Stone"].max) {
              modRes("Stone", $(this)[0].val(true), true);
            }
            global.stats.cstone++;
            global.stats.tstone++;
          }
          return false;
        },
        val(spend) {
          let gain = global.race["strong"] ? traits.strong.vars()[0] : 1;
          if (global.genes["enhance"]) {
            gain *= 2;
          }
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2 && global.resource.Mana.amount >= 1) {
            gain *= 10;
            if (global["resource"]["Stone"].amount < global["resource"]["Stone"].max && spend) {
              modRes("Mana", -1, true);
            }
          }
          return gain;
        },
        touchlabel: loc(`harvest`)
      },
      chrysotile: {
        id: "city-chrysotile",
        title() {
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2) {
            return loc("city_chrysotile_conjour");
          } else {
            return loc(`city_gather`, [global.resource.Chrysotile.name]);
          }
        },
        desc() {
          let gain = $(this)[0].val(false);
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2) {
            return loc("city_stone_conjour_desc", [gain, global.resource.Chrysotile.name]);
          } else {
            return loc("city_stone_desc", [gain, global.resource.Chrysotile.name]);
          }
        },
        category: "outskirts",
        reqs: { primitive: 2 },
        trait: ["smoldering"],
        not_trait: ["cataclysm", "lone_survivor"],
        queue_complete() {
          return 0;
        },
        cost: {
          Mana() {
            return global.tech["conjuring"] && global.tech["conjuring"] >= 2 ? 1 : 0;
          }
        },
        action(args) {
          if (!global.settings.pause) {
            if (global["resource"]["Chrysotile"].amount < global["resource"]["Chrysotile"].max) {
              modRes("Chrysotile", $(this)[0].val(true), true);
            }
          }
          return false;
        },
        val(spend) {
          let gain = global.race["strong"] ? traits.strong.vars()[0] : 1;
          if (global.genes["enhance"]) {
            gain *= 2;
          }
          if (global.tech["conjuring"] && global.tech["conjuring"] >= 2 && global.resource.Mana.amount >= 1) {
            gain *= 10;
            if (global["resource"]["Chrysotile"].amount < global["resource"]["Chrysotile"].max && spend) {
              modRes("Mana", -1, true);
            }
          }
          return gain;
        },
        touchlabel: loc(`harvest`)
      },
      slaughter: {
        id: "city-slaughter",
        title: loc("city_evil"),
        desc() {
          if (global.race["soul_eater"]) {
            return global.tech["primitive"] ? global.resource.hasOwnProperty("furs") && global.resource.Furs.display ? loc("city_evil_desc3") : loc("city_evil_desc2") : loc("city_evil_desc1");
          } else {
            return global.resource.hasOwnProperty("furs") && global.resource.Furs.display ? loc("city_evil_desc4") : loc("city_evil_desc1");
          }
        },
        category: "outskirts",
        reqs: {},
        trait: ["evil"],
        not_trait: ["kindling_kindred", "smoldering", "cataclysm"],
        queue_complete() {
          return 0;
        },
        action(args) {
          if (!global.settings.pause) {
            let gain = global.race["strong"] ? traits.strong.vars()[0] : 1;
            if (global.genes["enhance"]) {
              gain *= 2;
            }
            if (!global.race["smoldering"]) {
              if (global["resource"]["Lumber"].amount < global["resource"]["Lumber"].max) {
                modRes("Lumber", gain, true);
              }
              global.stats.clumber++;
              global.stats.tlumber++;
            }
            if (global.race["soul_eater"]) {
              if (global.tech["primitive"] && global["resource"]["Food"].amount < global["resource"]["Food"].max) {
                modRes("Food", gain, true);
              }
              global.stats.cfood++;
              global.stats.tfood++;
            }
            if (global.resource.Furs.display && global["resource"]["Furs"].amount < global["resource"]["Furs"].max) {
              modRes("Furs", gain, true);
            }
          }
          return false;
        },
        touchlabel: loc(`kill`)
      },
      horseshoe: buildTemplate(`horseshoe`, "city"),
      bonfire: buildTemplate(`bonfire`, "city"),
      firework: buildTemplate(`firework`, "city"),
      slave_market: {
        id: "city-slave_market",
        title() {
          return loc("city_slaver_market", [global.resource.Slave.name]);
        },
        desc() {
          return loc("city_slaver_market_desc", [global.resource.Slave.name]);
        },
        category: "outskirts",
        reqs: { slaves: 2 },
        trait: ["slaver"],
        not_trait: ["cataclysm", "lone_survivor"],
        inflation: false,
        cost: {
          Money() {
            return 25e3;
          }
        },
        queue_complete() {
          return global.city["slave_pen"] ? global.city.slave_pen.count * 4 - global.resource.Slave.amount : 0;
        },
        action(args) {
          if (global.city["slave_pen"] && global.city.slave_pen.count * 4 > global.resource.Slave.amount) {
            if (payCosts($(this)[0])) {
              global.resource.Slave.amount++;
              return true;
            }
          }
          return false;
        },
        touchlabel: loc(`purchase`)
      },
      s_alter: buildTemplate(`s_alter`, "city"),
      basic_housing: {
        id: "city-basic_housing",
        title() {
          return housingLabel("small");
        },
        desc() {
          return $(this)[0].citizens() === 1 ? loc("city_basic_housing_desc") : loc("city_basic_housing_desc_plural", [$(this)[0].citizens()]);
        },
        category: "residential",
        reqs: { housing: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["basic_housing"] ? global.city["basic_housing"].count : 0) + offset >= 5) {
              return costMultiplier2("basic_housing", offset, 20, 1.17);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return global.race["kindling_kindred"] || global.race["smoldering"] ? 0 : costMultiplier2("basic_housing", offset, 10, 1.23);
          },
          Stone(offset) {
            return global.race["kindling_kindred"] ? costMultiplier2("basic_housing", offset, 10, 1.23) : 0;
          },
          Chrysotile(offset) {
            return global.race["smoldering"] ? costMultiplier2("basic_housing", offset, 10, 1.23) : 0;
          },
          Horseshoe() {
            return global.race["hooved"] ? 1 : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          return global.race["sappy"] ? `<div>${loc("plus_max_resource", [pop, loc("citizen")])}</div><div>${loc("city_grove_effect", [2.5])}</div>` : loc("plus_max_resource", [pop, loc("citizen")]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global["resource"][global.race.species].display = true;
            global["resource"][global.race.species].max += $(this)[0].citizens();
            incrementStruct($(this)[0]);
            global.settings.showCivic = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["basic_housing", "city"]
          };
        },
        citizens() {
          let pop = 1;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      cottage: {
        id: "city-cottage",
        title() {
          return housingLabel("medium");
        },
        desc() {
          return loc("city_cottage_desc", [$(this)[0].citizens()]);
        },
        category: "residential",
        reqs: { housing: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("cottage", offset, 900, 1.15);
          },
          Plywood(offset) {
            return costMultiplier2("cottage", offset, 25, 1.25);
          },
          Brick(offset) {
            return costMultiplier2("cottage", offset, 20, 1.25);
          },
          Wrought_Iron(offset) {
            return costMultiplier2("cottage", offset, 15, 1.25);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("cottage", offset, 5, 1.25) : 0;
          },
          Horseshoe() {
            return global.race["hooved"] ? 2 : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          if (global.tech["home_safe"]) {
            let safe = spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? 5e3 : 2e3 : 1e3);
            return `<div>${loc("plus_max_citizens", [pop])}</div><div>${loc("plus_max_resource", [`$${safe.toLocaleString()}`, loc("resource_Money_name")])}</div>`;
          } else {
            return loc("plus_max_citizens", [pop]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global["resource"][global.race.species].max += $(this)[0].citizens();
            incrementStruct("cottage", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["cottage", "city"]
          };
        },
        citizens() {
          let pop = 2;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      apartment: {
        id: "city-apartment",
        title() {
          return housingLabel("large");
        },
        desc() {
          return `<div>${loc("city_apartment_desc", [$(this)[0].citizens()])}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        category: "residential",
        reqs: { housing: 3 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("apartment", offset, 1750, 1.26) - 500;
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? costMultiplier2("apartment", offset, 25, 1.22) : 0;
          },
          Furs(offset) {
            return costMultiplier2("apartment", offset, 725, 1.32) - 500;
          },
          Copper(offset) {
            return costMultiplier2("apartment", offset, 650, 1.32) - 500;
          },
          Cement(offset) {
            return costMultiplier2("apartment", offset, 700, 1.32) - 500;
          },
          Steel(offset) {
            return costMultiplier2("apartment", offset, 800, 1.32) - 500;
          },
          Horseshoe() {
            return global.race["hooved"] ? 5 : 0;
          }
        },
        effect() {
          let extraVal = govActive("extravagant", 2);
          let pop = $(this)[0].citizens();
          if (global.tech["home_safe"]) {
            let safe = spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? 1e4 : 5e3 : 2e3);
            if (extraVal) {
              safe *= 2;
            }
            return `<div>${loc("plus_max_citizens", [pop])}. <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span></div><div>${loc("plus_max_resource", [`$${safe.toLocaleString()}`, loc("resource_Money_name")])}</div>`;
          } else {
            return `${loc("plus_max_citizens", [pop])}. <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span>`;
          }
        },
        powered() {
          let extraVal = govActive("extravagant", 1);
          return powerCostMod(extraVal ? extraVal : 1);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("apartment", "city");
            if (powerOnNewStruct($(this)[0])) {
              global["resource"][global.race.species].max += $(this)[0].citizens();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["apartment", "city"]
          };
        },
        citizens() {
          let extraVal = govActive("extravagant", 2);
          let pop = extraVal ? 5 + extraVal : 5;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        }
      },
      lodge: {
        id: "city-lodge",
        title: loc("city_lodge"),
        desc() {
          return global.race["detritivore"] ? loc("city_lodge_desc_alt") : loc("city_lodge_desc");
        },
        category: "residential",
        reqs: { housing: 1, currency: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        condition() {
          return (global.race["soul_eater"] || global.race["detritivore"] || global.race["artifical"] || global.race["unfathomable"] || global.race["forager"]) && global.tech["s_lodge"] || global.tech["hunting"] && global.tech["hunting"] >= 2 ? true : false;
        },
        cost: {
          Money(offset) {
            return costMultiplier2("lodge", offset, 50, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("lodge", offset, 20, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("lodge", offset, 10, 1.36);
          },
          Horseshoe() {
            return global.race["hooved"] ? 1 : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          return global.race["carnivore"] && !global.race["artifical"] ? `<div>${loc("plus_max_resource", [pop, loc("citizen")])}</div><div>${loc("city_lodge_effect", [5])}</div>` : loc("plus_max_resource", [pop, loc("citizen")]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("lodge", "city");
            global["resource"][global.race.species].display = true;
            global["resource"][global.race.species].max += 1;
            global.settings.showCivic = true;
            return true;
          }
          return false;
        },
        citizens() {
          let pop = 1;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["lodge", "city"]
          };
        }
      },
      smokehouse: {
        id: "city-smokehouse",
        title() {
          return global.race["hrt"] && ["wolven", "vulpine"].includes(global.race["hrt"]) ? loc("city_smokehouse_easter") : loc("city_smokehouse");
        },
        desc: loc("city_smokehouse_desc"),
        category: "trade",
        reqs: { hunting: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("smokehouse", offset, 85, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("smokehouse", offset, 65, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("smokehouse", offset, 50, 1.36);
          }
        },
        effect() {
          let food = BHStorageMulti(spatialReasoning(100));
          return `<div>${loc("plus_max_resource", [food, global.resource.Food.name])}</div><div>${loc("city_smokehouse_effect", [10])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("smokehouse", "city");
            global["resource"]["Food"].max += BHStorageMulti(spatialReasoning(100));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["smokehouse", "city"]
          };
        }
      },
      soul_well: {
        id: "city-soul_well",
        title: loc("city_soul_well"),
        desc: loc("city_soul_well_desc"),
        category: "trade",
        reqs: { soul_eater: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["soul_well"] ? global.city["soul_well"].count : 0) + offset >= 3) {
              return costMultiplier2("soul_well", offset, 50, 1.32);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("soul_well", offset, 20, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("soul_well", offset, 10, 1.36);
          }
        },
        effect() {
          let souls = BHStorageMulti(spatialReasoning(500));
          let production2 = global.race["ghostly"] ? 2 + traits.ghostly.vars()[1] : 2;
          return `<div>${loc("city_soul_well_effect", [production2])}</div><div>${loc("plus_max_resource", [souls, loc("resource_Souls_name")])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("soul_well", "city");
            global["resource"]["Food"].max += BHStorageMulti(spatialReasoning(500));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["soul_well", "city"]
          };
        }
      },
      slave_pen: {
        id: "city-slave_pen",
        title() {
          return loc("city_slave_housing", [global.resource.Slave.name]);
        },
        desc() {
          return loc("city_slave_housing", [global.resource.Slave.name]);
        },
        category: "commercial",
        reqs: { slaves: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("slave_pen", offset, 250, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("slave_pen", offset, 100, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("slave_pen", offset, 75, 1.36);
          },
          Copper(offset) {
            return costMultiplier2("slave_pen", offset, 10, 1.36);
          },
          Nanite(offset) {
            return global.race["deconstructor"] ? costMultiplier2("slave_pen", offset, 4, 1.36) : 0;
          }
        },
        effect() {
          return `<div>${loc("plus_max_resource", [4, global.resource.Slave.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("slave_pen", "city");
            global.resource.Slave.display = true;
            global.resource.Slave.max = global.city.slave_pen.count * 4;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["slave_pen", "city"]
          };
        }
      },
      transmitter: {
        id: "city-transmitter",
        title: loc("city_transmitter"),
        desc() {
          return `<div>${loc("city_transmitter_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`;
        },
        category: "residential",
        reqs: { high_tech: 4 },
        trait: ["artifical"],
        cost: {
          Money(offset) {
            if (global.city["transmitter"] && global.city["transmitter"].count >= 3) {
              return costMultiplier2("transmitter", offset, 50, 1.32);
            } else {
              return 0;
            }
          },
          Copper(offset) {
            return costMultiplier2("transmitter", offset, 20, 1.36);
          },
          Steel(offset) {
            return costMultiplier2("transmitter", offset, 10, 1.36);
          }
        },
        effect() {
          let signal = +production("transmitter").toFixed(2);
          let sig_cap = spatialReasoning(100);
          return `<div>${loc("gain", [signal, global.resource.Food.name])}</div><div>${loc("city_transmitter_effect", [sig_cap])}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
        },
        powered() {
          return powerCostMod(0.5);
        },
        powerBalancer() {
          return [{ r: "Food", k: "lpmod" }];
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("transmitter", "city");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["transmitter", "city"]
          };
        }
      },
      captive_housing: buildTemplate(`captive_housing`, "city"),
      farm: {
        id: "city-farm",
        title() {
          return structName("farm");
        },
        desc: loc("city_farm_desc"),
        category: "residential",
        reqs: { agriculture: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["farm"] ? global.city["farm"].count : 0) + offset >= 3) {
              return costMultiplier2("farm", offset, 50, 1.32);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("farm", offset, 20, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("farm", offset, 10, 1.36);
          },
          Horseshoe(offset) {
            return global.race["hooved"] && (global.city["farm"] ? global.city["farm"].count : 0) + (offset || 0) >= 2 ? 1 : 0;
          }
        },
        effect() {
          let pop = $(this)[0].citizens();
          return global.tech["farm"] ? `<div>${loc("city_farm_effect")}</div><div>${loc("plus_max_resource", [pop, loc("citizen")])}</div>` : loc("city_farm_effect");
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("farm", "city");
            if (global.race["fasting"]) {
              global.civic.farmer.display = false;
              global.civic.farmer.assigned = 0;
            } else {
              global.civic.farmer.display = true;
            }
            if (global.tech["farm"]) {
              global["resource"][global.race.species].display = true;
              global["resource"][global.race.species].max += $(this)[0].citizens();
              global.settings.showCivic = true;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["farm", "city"]
          };
        },
        citizens() {
          let pop = 1;
          if (global.race["high_pop"]) {
            pop *= traits.high_pop.vars()[0];
          }
          return pop;
        },
        flair() {
          return global.tech.agriculture >= 7 ? loc("city_farm_flair2") : loc("city_farm_flair1");
        }
      },
      compost: {
        id: "city-compost",
        title: loc("city_compost_heap"),
        desc: loc("city_compost_heap_desc"),
        category: "residential",
        reqs: { compost: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["compost"] ? global.city["compost"].count : 0) + offset >= 3) {
              return costMultiplier2("compost", offset, 50, 1.32);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("compost", offset, 12, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("compost", offset, 12, 1.36);
          }
        },
        effect() {
          let generated = 1.2 + (global.tech["compost"] ? global.tech["compost"] : 0) * 0.8;
          generated *= global.city.biome === "grassland" ? biomes.grassland.vars()[0] : 1;
          generated *= global.city.biome === "savanna" ? biomes.savanna.vars()[0] : 1;
          generated *= global.city.biome === "ashland" ? biomes.ashland.vars()[0] : 1;
          generated *= global.city.biome === "volcanic" ? biomes.volcanic.vars()[0] : 1;
          generated *= global.city.biome === "hellscape" ? biomes.hellscape.vars()[0] : 1;
          generated *= global.city.ptrait.includes("trashed") ? planetTraits.trashed.vars()[0] : 1;
          generated = +generated.toFixed(2);
          let store = BHStorageMulti(spatialReasoning(200));
          let wood = global.race["kindling_kindred"] || global.race["smoldering"] ? `` : `<div class="has-text-caution">${loc("city_compost_heap_effect2", [0.5, global.resource.Lumber.name])}</div>`;
          return `<div>${loc("city_compost_heap_effect", [generated])}</div><div>${loc("city_compost_heap_effect3", [store])}</div>${wood}`;
        },
        switchable() {
          return true;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("compost", "city");
            global.city.compost.on++;
            global["resource"]["Food"].max += BHStorageMulti(spatialReasoning(200));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["compost", "city"]
          };
        }
      },
      mill: {
        id: "city-mill",
        title() {
          return global.tech["agriculture"] >= 5 ? structName("windmill") : loc("city_mill_title1");
        },
        desc() {
          let bonus = global.tech["agriculture"] >= 5 ? 5 : 3;
          if (global.tech["agriculture"] >= 6) {
            let power = $(this)[0].powered() * -1;
            return loc("city_mill_desc2", [bonus, power]);
          } else {
            return loc("city_mill_desc1", [bonus]);
          }
        },
        category: "utility",
        reqs: { agriculture: 4 },
        not_tech: ["wind_plant"],
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("mill", offset, 1e3, 1.31);
          },
          Lumber(offset) {
            return costMultiplier2("mill", offset, 600, 1.33);
          },
          Iron(offset) {
            return costMultiplier2("mill", offset, 150, 1.33);
          },
          Cement(offset) {
            return costMultiplier2("mill", offset, 125, 1.33);
          }
        },
        powered() {
          return powerModifier(global.race["environmentalist"] ? -traits.environmentalist.vars()[1] : -1);
        },
        power_reqs: { agriculture: 6 },
        effect() {
          if (global.tech["agriculture"] >= 6) {
            return `<span class="has-text-success">${loc("city_on")}</span> ${loc("city_mill_effect1")} <span class="has-text-danger">${loc("city_off")}</span> ${loc("city_mill_effect2")}`;
          } else {
            return false;
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mill", "city");
            if (checkPowerRequirements($(this)[0])) {
              powerOnNewStruct($(this)[0]);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["mill", "city"]
          };
        }
      },
      windmill: {
        id: "city-windmill",
        title() {
          return global.race["unfathomable"] ? loc("tech_watermill") : structName("windmill");
        },
        desc() {
          return global.race["unfathomable"] ? loc("tech_watermill") : structName("windmill");
        },
        wiki: false,
        category: "utility",
        reqs: { wind_plant: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        powered() {
          return powerModifier(global.race["environmentalist"] ? -traits.environmentalist.vars()[1] : -1);
        },
        power_reqs: { false: 1 },
        cost: {
          Money(offset) {
            return costMultiplier2("windmill", offset, 1e3, 1.31);
          },
          Lumber(offset) {
            return costMultiplier2("windmill", offset, 600, 1.33);
          },
          Iron(offset) {
            return costMultiplier2("windmill", offset, 150, 1.33);
          },
          Cement(offset) {
            return costMultiplier2("windmill", offset, 125, 1.33);
          }
        },
        effect() {
          let power = $(this)[0].powered() * -1;
          return `<div>${loc("space_dwarf_reactor_effect1", [power])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("windmill", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["windmill", "city"]
          };
        }
      },
      silo: {
        id: "city-silo",
        title: loc("city_silo"),
        desc: loc("city_food_storage"),
        category: "trade",
        reqs: { agriculture: 3 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("silo", offset, 85, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("silo", offset, 65, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("silo", offset, 50, 1.36);
          },
          Iron(offset) {
            return (global.city.silo ? global.city.silo.count : 0) + (offset || 0) >= 4 && global.city.ptrait.includes("unstable") ? costMultiplier2("silo", offset, 10, 1.36) : 0;
          }
        },
        effect() {
          let food = BHStorageMulti(spatialReasoning(500));
          return loc("plus_max_resource", [food, global.resource.Food.name]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("silo", "city");
            global["resource"]["Food"].max += BHStorageMulti(spatialReasoning(500));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["silo", "city"]
          };
        }
      },
      assembly: buildTemplate(`assembly`, "city"),
      garrison: {
        id: "city-garrison",
        title() {
          return global.race["flier"] ? loc("city_garrison_flier") : loc("city_garrison");
        },
        desc: loc("city_garrison_desc"),
        category: "military",
        reqs: { military: 1, housing: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("garrison", offset, 240, 1.5);
          },
          Stone(offset) {
            return costMultiplier2("garrison", offset, 260, 1.46);
          },
          Iron(offset) {
            return (global.city["garrison"] ? global.city.garrison.count : 0) + (offset || 0) >= 4 && global.city.ptrait.includes("unstable") ? costMultiplier2("garrison", offset, 50, 1.4) : 0;
          },
          Horseshoe() {
            return global.race["hooved"] ? global.race["chameleon"] ? 1 : 2 : 0;
          }
        },
        effect() {
          let bunks = $(this)[0].soldiers();
          let desc = `<div>${loc("plus_max_resource", [bunks, loc("civics_garrison_soldiers")])}</div>`;
          if (global.race.universe === "evil") {
            desc += `<div>${loc("plus_max_resource", [0.5, global.resource.Authority.name])}</div>`;
          }
          return desc;
        },
        switchable() {
          return true;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.settings["showMil"] = true;
            if (!global.settings.msgFilters.combat.unlocked) {
              global.settings.msgFilters.combat.unlocked = true;
              global.settings.msgFilters.combat.vis = true;
            }
            if (!global.civic.garrison.display) {
              global.civic.garrison.display = true;
              vBind({ el: `#garrison` }, "update");
              vBind({ el: `#c_garrison` }, "update");
            }
            global.civic["garrison"].max += $(this)[0].soldiers();
            incrementStruct("garrison", "city");
            global.city["garrison"].on++;
            global.resource.Furs.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["garrison", "city"]
          };
        },
        soldiers() {
          let soldiers = global.tech["military"] >= 5 ? 3 : 2;
          if (global.race["chameleon"]) {
            soldiers--;
          }
          if (global.race["grenadier"]) {
            soldiers--;
          }
          if (soldiers <= 0) {
            return 1;
          }
          return jobScale(soldiers);
        }
      },
      hospital: {
        id: "city-hospital",
        title() {
          return structName("hospital");
        },
        desc: loc("city_hospital_desc"),
        category: "military",
        reqs: { medic: 1 },
        not_trait: ["cataclysm", "artifical"],
        cost: {
          Money(offset) {
            return costMultiplier2("hospital", offset, 22e3, 1.32);
          },
          Furs(offset) {
            return costMultiplier2("hospital", offset, 4e3, 1.32);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("hospital", offset, 500, 1.32) : 0;
          },
          Aluminium(offset) {
            return costMultiplier2("hospital", offset, 1e4, 1.32);
          }
        },
        effect() {
          let clinic = global.tech["reproduction"] && global.tech.reproduction >= 2 ? `<div>${loc("city_hospital_effect2")}</div>` : ``;
          let healing = (global.tech["medic"] ?? 1) * 5;
          let desc = `<div>${loc("city_hospital_effect", [healing])}</div>${clinic}`;
          if (!global.race["artifical"] && global.race.hasOwnProperty("vax")) {
            desc = desc + `<div>${loc("tau_home_disease_lab_vax", [+global.race.vax.toFixed(2)])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("hospital", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["hospital", "city"]
          };
        }
      },
      boot_camp: {
        id: "city-boot_camp",
        title() {
          return global.race["artifical"] ? loc("city_boot_camp_art") : loc("city_boot_camp");
        },
        desc() {
          return global.race["artifical"] ? loc("city_boot_camp_art_desc", [races[global.race.species].name]) : loc("city_boot_camp_desc");
        },
        category: "military",
        reqs: { boot_camp: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("boot_camp", offset, 5e4, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("boot_camp", offset, 21500, 1.32);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("boot_camp", offset, 300, 1.32) : 0;
          },
          Aluminium(offset) {
            return costMultiplier2("boot_camp", offset, 12e3, 1.32);
          },
          Brick(offset) {
            return costMultiplier2("boot_camp", offset, 1400, 1.32);
          }
        },
        effect() {
          let rate = global.tech["boot_camp"] >= 2 ? 8 : 5;
          if (global.blood["lust"]) {
            rate += global.blood.lust * 0.2;
          }
          let milVal = govActive("militant", 0);
          if (milVal) {
            rate *= 1 + milVal / 100;
          }
          let effect = global.tech["spy"] && global.tech["spy"] >= 3 ? `<div>${loc("city_boot_camp_effect", [rate])}</div><div>${loc("city_boot_camp_effect2", [10])}</div>` : `<div>${loc("city_boot_camp_effect", [rate])}</div>`;
          if (global.race["artifical"] && !global.race["orbit_decayed"]) {
            let repair = global.tech["medic"] || 1;
            effect += `<div>${loc("city_boot_camp_art_effect", [repair * 5])}</div>`;
          }
          if (global.race["artifical"] && global.race.hasOwnProperty("vax")) {
            effect += `<div>${loc("tau_home_disease_lab_vax", [+global.race.vax.toFixed(2)])}</div>`;
          }
          return effect;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("boot_camp", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["boot_camp", "city"]
          };
        }
      },
      shed: {
        id: "city-shed",
        title() {
          return global.tech["storage"] >= 3 ? global.tech["storage"] >= 4 ? loc("city_shed_title3") : loc("city_shed_title2") : loc("city_shed_title1");
        },
        desc() {
          let storage = global.tech["storage"] >= 3 ? global.tech["storage"] >= 4 ? loc("city_shed_desc_size3") : loc("city_shed_desc_size2") : loc("city_shed_desc_size1");
          return loc("city_shed_desc", [storage]);
        },
        category: "trade",
        reqs: { storage: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("shed", offset, 75, 1.22);
          },
          Lumber(offset) {
            if (global.tech["storage"] && global.tech["storage"] < 4) {
              return costMultiplier2("shed", offset, 55, 1.32);
            } else {
              return 0;
            }
          },
          Stone(offset) {
            if (global.tech["storage"] && global.tech["storage"] < 3) {
              return costMultiplier2("shed", offset, 45, 1.32);
            } else {
              return 0;
            }
          },
          Iron(offset) {
            if (global.tech["storage"] && global.tech["storage"] >= 4) {
              return costMultiplier2("shed", offset, 22, 1.32);
            } else {
              return 0;
            }
          },
          Cement(offset) {
            if (global.tech["storage"] && global.tech["storage"] >= 3) {
              return costMultiplier2("shed", offset, 18, 1.32);
            } else {
              return 0;
            }
          }
        },
        res() {
          let r_list = ["Lumber", "Stone", "Chrysotile", "Crystal", "Furs", "Copper", "Iron", "Aluminium", "Cement", "Coal"];
          if (global.tech["storage"] >= 3 && global.resource.Steel.display) {
            r_list.push("Steel");
          }
          if (global.tech["storage"] >= 4 && global.resource.Titanium.display) {
            r_list.push("Titanium");
          }
          if (global.tech["shelving"] && global.tech.shelving >= 3 && global.resource.Graphene.display) {
            r_list.push("Graphene");
          }
          if (global.tech["shelving"] && global.tech.shelving >= 3 && global.resource.Stanene.display) {
            r_list.push("Stanene");
          }
          if (global.race["unfathomable"]) {
            r_list.push("Food");
          }
          return r_list;
        },
        val(res) {
          switch (res) {
            case "Food":
              return 50;
            case "Lumber":
              return 300;
            case "Stone":
              return 300;
            case "Chrysotile":
              return 300;
            case "Crystal":
              return 8;
            case "Furs":
              return 125;
            case "Copper":
              return 90;
            case "Iron":
              return 125;
            case "Aluminium":
              return 90;
            case "Cement":
              return 100;
            case "Coal":
              return 75;
            case "Steel":
              return 40;
            case "Titanium":
              return 20;
            case "Graphene":
              return 15;
            case "Stanene":
              return 25;
            default:
              return 0;
          }
        },
        effect(wiki) {
          let storage = '<div class="aTable">';
          let multiplier = storageMultipler(1, wiki);
          for (const res of $(this)[0].res()) {
            if (global.resource[res].display) {
              let val = sizeApproximation(+(spatialReasoning($(this)[0].val(res)) * multiplier).toFixed(0), 1);
              storage = storage + `<span>${loc("plus_max_resource", [val, global.resource[res].name])}</span>`;
            }
          }
          ;
          storage = storage + "</div>";
          return storage;
        },
        wide: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("shed", "city");
            let multiplier = storageMultipler();
            for (const res of $(this)[0].res()) {
              if (global.resource[res].display) {
                global.resource[res].max += spatialReasoning($(this)[0].val(res) * multiplier);
              }
            }
            ;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["shed", "city"]
          };
        }
      },
      storage_yard: {
        id: "city-storage_yard",
        title() {
          return structName("storage_yard");
        },
        desc: loc("city_storage_yard_desc"),
        category: "trade",
        reqs: { container: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("storage_yard", offset, 10, bananaPerk(1.36));
          },
          Brick(offset) {
            return costMultiplier2("storage_yard", offset, 3, bananaPerk(1.35));
          },
          Wrought_Iron(offset) {
            return costMultiplier2("storage_yard", offset, 5, bananaPerk(1.35));
          }
        },
        effect() {
          let cap = global.tech.container >= 3 ? 20 : 10;
          if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 1) {
            cap += 10;
          }
          if (global.tech["world_control"]) {
            cap += 10;
          }
          if (global.tech["particles"] && global.tech["particles"] >= 2) {
            cap *= 2;
          }
          if (global.tech["trade"] && global.tech["trade"] >= 3) {
            return `<div>${loc("plus_max_resource", [cap, global.resource.Crates.name])}</div><div>${loc("city_trade_effect", [1])}</div>`;
          } else {
            return loc("plus_max_resource", [cap, global.resource.Crates.name]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("storage_yard", "city");
            let cap = global.tech.container >= 3 ? 20 : 10;
            if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 1) {
              cap += 10;
            }
            if (global.tech["world_control"]) {
              cap += 10;
            }
            if (global.tech["particles"] && global.tech["particles"] >= 2) {
              cap *= 2;
            }
            global.resource.Crates.max += cap;
            if (!global.resource.Crates.display) {
              unlockCrates();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["storage_yard", "city"]
          };
        }
      },
      warehouse: {
        id: "city-warehouse",
        title: loc("city_warehouse"),
        desc: loc("city_warehouse_desc"),
        category: "trade",
        reqs: { steel_container: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("warehouse", offset, 400, bananaPerk(1.26));
          },
          Cement(offset) {
            return costMultiplier2("warehouse", offset, 75, bananaPerk(1.26));
          },
          Sheet_Metal(offset) {
            return costMultiplier2("warehouse", offset, 25, bananaPerk(1.25));
          }
        },
        effect() {
          let cap = global.tech.steel_container >= 2 ? 20 : 10;
          if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 2) {
            cap += 10;
          }
          if (global.tech["world_control"]) {
            cap += 10;
          }
          if (global.tech["particles"] && global.tech["particles"] >= 2) {
            cap *= 2;
          }
          return loc("plus_max_resource", [cap, global.resource.Containers.name]);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("warehouse", "city");
            let cap = global.tech["steel_container"] >= 2 ? 20 : 10;
            if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 2) {
              cap += 10;
            }
            if (global.tech["world_control"]) {
              cap += 10;
            }
            if (global.tech["particles"] && global.tech["particles"] >= 2) {
              cap *= 2;
            }
            global.resource.Containers.max += cap;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["warehouse", "city"]
          };
        }
      },
      bank: {
        id: "city-bank",
        title: loc("city_bank"),
        desc() {
          let planet = races[global.race.species].home;
          return loc("city_bank_desc", [planet]);
        },
        category: "commercial",
        reqs: { banking: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("bank", offset, traitCostMod("untrustworthy", 250), 1.35);
          },
          Lumber(offset) {
            return costMultiplier2("bank", offset, traitCostMod("untrustworthy", 75), 1.32);
          },
          Stone(offset) {
            return costMultiplier2("bank", offset, traitCostMod("untrustworthy", 100), 1.35);
          },
          Iron(offset) {
            return (global.city["bank"] ? global.city.bank.count : 0) + (offset || 0) >= 2 && global.city.ptrait.includes("unstable") ? costMultiplier2("bank", offset, traitCostMod("untrustworthy", 30), 1.3) : 0;
          }
        },
        effect() {
          let vault = bank_vault();
          vault = spatialReasoning(vault);
          vault = (+vault.toFixed(0)).toLocaleString();
          if (global.tech["banking"] >= 2) {
            return `<div>${loc("plus_max_resource", [`$${vault}`, loc("resource_Money_name")])}</div><div>${loc("plus_max_resource", [jobScale(1), loc("banker_name")])}</div>`;
          } else {
            return loc("plus_max_resource", [`$${vault}`, loc("resource_Money_name")]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global["resource"]["Money"].max += spatialReasoning(1800);
            incrementStruct("bank", "city");
            global.civic.banker.max = jobScale(global.city.bank.count);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["bank", "city"]
          };
        }
      },
      pylon: {
        id: "city-pylon",
        title: loc("city_pylon"),
        desc: loc("city_pylon"),
        category: "industrial",
        reqs: { magic: 2 },
        not_trait: ["cataclysm", "orbit_decayed"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["pylon"] ? global.city["pylon"].count : 0) + offset >= 2) {
              return costMultiplier2("pylon", offset, 10, 1.48);
            } else {
              return 0;
            }
          },
          Stone(offset) {
            return costMultiplier2("pylon", offset, 12, 1.42);
          },
          Crystal(offset) {
            return costMultiplier2("pylon", offset, 8, 1.42) - 3;
          }
        },
        effect() {
          let max = spatialReasoning(5);
          let mana = +(0.01 * darkEffect("magic")).toFixed(3);
          return `<div>${loc("gain", [mana, global.resource.Mana.name])}</div><div>${loc("plus_max_resource", [max, global.resource.Mana.name])}</div>`;
        },
        special() {
          return global.tech["magic"] && global.tech.magic >= 3 ? true : false;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("pylon", "city");
            global.resource.Mana.max += spatialReasoning(5);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["pylon", "city"]
          };
        }
      },
      conceal_ward: {
        id: "city-conceal_ward",
        title: loc("city_conceal_ward"),
        desc: loc("city_conceal_ward"),
        category: "industrial",
        reqs: { roguemagic: 3 },
        not_trait: ["cataclysm", "orbit_decayed"],
        cost: {
          Money(offset) {
            return costMultiplier2("conceal_ward", offset, 500, 1.25);
          },
          Mana(offset) {
            return costMultiplier2("conceal_ward", offset, conceal_adjust(42), 1.25);
          },
          Crystal(offset) {
            return costMultiplier2("conceal_ward", offset, 5, 1.25);
          }
        },
        effect() {
          let ward = global.tech["roguemagic"] && global.tech.roguemagic >= 8 ? 1.25 : 1;
          return `<div>${loc("city_conceal_ward_effect", [ward])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("conceal_ward", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["conceal_ward", "city"]
          };
        }
      },
      graveyard: {
        id: "city-graveyard",
        title: loc("city_graveyard"),
        desc: loc("city_graveyard_desc"),
        category: "industrial",
        reqs: { reclaimer: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["graveyard"] ? global.city["graveyard"].count : 0) + offset >= 5) {
              return costMultiplier2("graveyard", offset, 5, 1.85);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("graveyard", offset, 2, 1.95);
          },
          Stone(offset) {
            return costMultiplier2("graveyard", offset, 6, 1.9);
          }
        },
        effect() {
          let lum = BHStorageMulti(spatialReasoning(100));
          return `<div>${loc("city_graveyard_effect", [8])}</div><div>${loc("plus_max_resource", [lum, global.resource.Lumber.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("graveyard", "city");
            global["resource"]["Lumber"].max += BHStorageMulti(spatialReasoning(100));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["graveyard", "city"]
          };
        }
      },
      lumber_yard: {
        id: "city-lumber_yard",
        title() {
          return structName("lumberyard");
        },
        desc() {
          return structName("lumberyard");
        },
        category: "industrial",
        reqs: { axe: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["lumber_yard"] ? global.city["lumber_yard"].count : 0) + offset >= 5) {
              return costMultiplier2("lumber_yard", offset, 5, 1.85);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("lumber_yard", offset, 6, 1.9);
          },
          Stone(offset) {
            return costMultiplier2("lumber_yard", offset, 2, 1.95);
          }
        },
        effect() {
          let lum = BHStorageMulti(spatialReasoning(100));
          return `<div>${loc("production", [2, global.resource.Lumber.name])}</div><div>${loc("plus_max_resource", [lum, global.resource.Lumber.name])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("lumber_yard", "city");
            global.civic.lumberjack.display = true;
            global["resource"]["Lumber"].max += BHStorageMulti(spatialReasoning(100));
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["lumber_yard", "city"]
          };
        }
      },
      sawmill: {
        id: "city-sawmill",
        title() {
          return structName("sawmill");
        },
        desc() {
          return structName("sawmill");
        },
        category: "industrial",
        reqs: { saw: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("sawmill", offset, 3e3, 1.26);
          },
          Iron(offset) {
            return costMultiplier2("sawmill", offset, 400, 1.26);
          },
          Cement(offset) {
            return costMultiplier2("sawmill", offset, 420, 1.26);
          }
        },
        effect() {
          let impact = global.tech["saw"] >= 2 ? 8 : 5;
          let lum = BHStorageMulti(spatialReasoning(200));
          let desc = `<div>${loc("plus_max_resource", [lum, global.resource.Lumber.name])}</div><div>${loc("production", [impact, global.resource.Lumber.name])}</div>`;
          if (global.tech["foundry"] && global.tech["foundry"] >= 4) {
            desc = desc + `<div>${loc("crafting", [2, global.resource.Plywood.name])}</div>`;
          }
          if (global.city.powered) {
            desc = desc + `<div class="has-text-caution">${loc("city_sawmill_effect3", [4, $(this)[0].powered()])}</div>`;
          }
          return desc;
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          return global.city.sawmill.hasOwnProperty("psaw") ? [{ r: "Lumber", k: "psaw" }] : false;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("sawmill", "city");
            global["resource"]["Lumber"].max += BHStorageMulti(spatialReasoning(200));
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["sawmill", "city"]
          };
        }
      },
      rock_quarry: {
        id: "city-rock_quarry",
        title() {
          return global.race["flier"] ? loc("city_rock_quarry_alt") : loc("city_rock_quarry");
        },
        desc() {
          return global.race["flier"] ? loc("city_rock_quarry_desc_alt", [global.resource.Stone.name]) : loc("city_rock_quarry_desc");
        },
        category: "industrial",
        reqs: { mining: 1 },
        not_trait: ["cataclysm", "sappy"],
        cost: {
          Money(offset) {
            offset = offset || 0;
            if ((global.city["rock_quarry"] ? global.city["rock_quarry"].count : 0) + offset >= 2) {
              return costMultiplier2("rock_quarry", offset, 20, 1.45);
            } else {
              return 0;
            }
          },
          Lumber(offset) {
            return costMultiplier2("rock_quarry", offset, 50, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("rock_quarry", offset, 10, 1.36);
          }
        },
        effect() {
          let stone = BHStorageMulti(spatialReasoning(100));
          let asbestos = global.race["smoldering"] ? `<div>${loc("plus_max_resource", [stone, global.resource.Chrysotile.name])}</div>` : "";
          if (global.tech["mine_conveyor"]) {
            return `<div>${loc("city_rock_quarry_effect1", [2])}</div><div>${loc("plus_max_resource", [stone, global.resource.Stone.name])}</div>${asbestos}<div class="has-text-caution">${loc("city_rock_quarry_effect2", [4, $(this)[0].powered()])}</div>`;
          } else {
            return `<div>${loc("city_rock_quarry_effect1", [2])}</div><div>${loc("plus_max_resource", [stone, global.resource.Stone.name])}</div>${asbestos}`;
          }
        },
        special() {
          return global.race["smoldering"] ? true : false;
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          if (global.city.rock_quarry.hasOwnProperty("cnvay")) {
            if (global.city.hasOwnProperty("metal_refinery") && global.city.rock_quarry.hasOwnProperty("almcvy")) {
              return [
                { r: "Stone", k: "cnvay" },
                { r: "Aluminium", k: "almcvy" }
              ];
            }
            return [{ r: "Stone", k: "cnvay" }];
          }
          return false;
        },
        power_reqs: { mine_conveyor: 1 },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("rock_quarry", "city");
            global.civic.quarry_worker.display = true;
            let stone = BHStorageMulti(spatialReasoning(100));
            global["resource"]["Stone"].max += stone;
            if (global.race["smoldering"] && global.resource.Chrysotile.display) {
              global["resource"]["Chrysotile"].max += stone;
              if (global.city.rock_quarry.count === 1) {
                global.settings.showCivic = true;
                global.settings.showIndustry = true;
                defineIndustry();
              }
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              asbestos: 50
            },
            p: ["rock_quarry", "city"]
          };
        }
      },
      cement_plant: {
        id: "city-cement_plant",
        title: loc("city_cement_plant"),
        desc: loc("city_cement_plant_desc"),
        category: "industrial",
        reqs: { cement: 1 },
        not_trait: ["cataclysm", "lone_survivor", "flier"],
        cost: {
          Money(offset) {
            return costMultiplier2("cement_plant", offset, 3e3, 1.5);
          },
          Lumber(offset) {
            return costMultiplier2("cement_plant", offset, 1800, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("cement_plant", offset, 2e3, 1.32);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("cement_plant", offset, 275, 1.32) : 0;
          }
        },
        effect() {
          if (global.tech["cement"] >= 5) {
            let screws = global.tech["cement"] >= 6 ? 8 : 5;
            return `<div>${loc("plus_max_resource", [jobScale(2), loc(`job_cement_worker`)])}</div><div class="has-text-caution">${loc("city_cement_plant_effect2", [$(this)[0].powered(), screws])}</div>`;
          } else {
            return loc("plus_max_resource", [jobScale(2), loc(`job_cement_worker`)]);
          }
        },
        powered() {
          return powerCostMod(2);
        },
        powerBalancer() {
          return global.city.cement_plant.hasOwnProperty("cnvay") ? [{ r: "Cement", k: "cnvay" }] : false;
        },
        power_reqs: { cement: 5 },
        action(args) {
          if (payCosts($(this)[0])) {
            global.resource.Cement.display = true;
            incrementStruct("cement_plant", "city");
            global.civic.cement_worker.display = true;
            global.civic.cement_worker.max = global.city.cement_plant.count * jobScale(2);
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["cement_plant", "city"]
          };
        }
      },
      foundry: {
        id: "city-foundry",
        title: loc("city_foundry"),
        desc: loc("city_foundry_desc"),
        category: "industrial",
        reqs: { foundry: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("foundry", offset, 750, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("foundry", offset, 100, 1.36);
          },
          Copper(offset) {
            return costMultiplier2("foundry", offset, 250, 1.36);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("foundry", offset, 40, 1.36) : 0;
          }
        },
        effect() {
          let desc = `<div>${loc("city_foundry_effect1", [jobScale(1)])}</div>`;
          if (global.tech["foundry"] >= 2) {
            let skill = global.tech["foundry"] >= 5 ? global.tech["foundry"] >= 8 ? 8 : 5 : 3;
            desc = desc + `<div>${loc("city_crafted_mats", [skill])}</div>`;
          }
          if (global.tech["foundry"] >= 6) {
            desc = desc + `<div>${loc("city_foundry_effect2", [2])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.city["foundry"].count === 0) {
              if (global.race["no_craft"]) {
                messageQueue(loc("city_foundry_msg2"), "info", false, ["progress"]);
              } else {
                messageQueue(loc("city_foundry_msg1"), "info", false, ["progress"]);
              }
            }
            incrementStruct("foundry", "city");
            global.civic.craftsman.max += jobScale(1);
            global.civic.craftsman.display = true;
            if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
              global.resource.Plywood.display = true;
            }
            global.resource.Brick.display = true;
            if (global.resource.Iron.display) {
              global.resource.Wrought_Iron.display = true;
            }
            if (global.resource.Aluminium.display) {
              global.resource.Sheet_Metal.display = true;
            }
            loadFoundry();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              crafting: 0,
              Plywood: 0,
              Brick: 0,
              Bronze: 0,
              Wrought_Iron: 0,
              Sheet_Metal: 0,
              Mythril: 0,
              Aerogel: 0,
              Nanoweave: 0,
              Scarletite: 0,
              Quantium: 0
            },
            p: ["foundry", "city"]
          };
        }
      },
      factory: {
        id: "city-factory",
        title() {
          return structName("factory");
        },
        desc: `<div>${loc("city_factory_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        category: "industrial",
        reqs: { high_tech: 3 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("factory", offset, 25e3, dirt_adjust(1.32));
          },
          Cement(offset) {
            return costMultiplier2("factory", offset, 1e3, dirt_adjust(1.32));
          },
          Steel(offset) {
            return costMultiplier2("factory", offset, 7500, dirt_adjust(1.32));
          },
          Titanium(offset) {
            return costMultiplier2("factory", offset, 2500, dirt_adjust(1.32));
          }
        },
        effect() {
          let desc = `<div>${loc("city_factory_effect")}</div><div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          if (global.tech["foundry"] >= 7) {
            desc = desc + `<div>${loc("city_crafted_mats", [5])}</div>`;
          }
          return desc;
        },
        powered() {
          return powerCostMod(3);
        },
        special: true,
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("factory", "city");
            if (global.city.factory.count === 1) {
              global.resource.Alloy.display = true;
              if (global.tech["polymer"]) {
                global.resource.Polymer.display = true;
              }
              global.settings.showIndustry = true;
              defineIndustry();
            }
            if (powerOnNewStruct($(this)[0])) {
              global.city.factory.Alloy++;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0,
              Lux: 0,
              Furs: 0,
              Alloy: 0,
              Polymer: 0,
              Nano: 0,
              Stanene: 0
            },
            p: ["factory", "city"]
          };
        }
      },
      nanite_factory: buildTemplate(`nanite_factory`, "city"),
      smelter: {
        id: "city-smelter",
        title: loc("city_smelter"),
        desc: loc("city_smelter_desc"),
        category: "industrial",
        reqs: { smelting: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("smelter", offset, 1e3, dirt_adjust(1.32));
          },
          Iron(offset) {
            return costMultiplier2("smelter", offset, 500, dirt_adjust(1.33));
          }
        },
        effect() {
          var iron_yield = global.tech["smelting"] >= 3 ? global.tech["smelting"] >= 7 ? 15 : 12 : 10;
          if (global.race["pyrophobia"]) {
            iron_yield *= 0.9;
          }
          if (global.tech["smelting"] >= 2 && !global.race["steelen"]) {
            return loc("city_smelter_effect2", [iron_yield]);
          } else {
            return loc("city_smelter_effect1", [iron_yield]);
          }
        },
        special: true,
        smelting() {
          return 1;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("smelter", "city");
            let fuel = "Wood";
            if (global.race["artifical"]) {
              fuel = "Oil";
            } else if ((global.race["kindling_kindred"] || global.race["smoldering"]) && !global.race["evil"]) {
              fuel = "Coal";
            }
            addSmelter($(this)[0].smelting(), "Iron", fuel);
            if (global.city.smelter.count === 1) {
              global.settings.showIndustry = true;
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              cap: 0,
              Wood: 0,
              Coal: 0,
              Oil: 0,
              Star: 0,
              StarCap: 0,
              Inferno: 0,
              Iron: 0,
              Steel: 0,
              Iridium: 0
            },
            p: ["smelter", "city"]
          };
        },
        flair: `<div>${loc("city_smelter_flair1")}<div></div>${loc("city_smelter_flair2")}</div>`
      },
      metal_refinery: {
        id: "city-metal_refinery",
        title: loc("city_metal_refinery"),
        desc: loc("city_metal_refinery_desc"),
        category: "industrial",
        reqs: { alumina: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("metal_refinery", offset, 2500, 1.35);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("metal_refinery", offset, 125, 1.35) : 0;
          },
          Steel(offset) {
            return costMultiplier2("metal_refinery", offset, 350, 1.35);
          }
        },
        powered() {
          return powerCostMod(2);
        },
        powerBalancer() {
          return global.city.metal_refinery.hasOwnProperty("pwr") ? [{ r: "Aluminium", k: "cnvay" }] : false;
        },
        power_reqs: { alumina: 2 },
        effect() {
          let label = global.race["sappy"] ? "city_metal_refinery_effect_alt" : "city_metal_refinery_effect";
          if (global.tech["alumina"] >= 2) {
            return `<span>${loc(label, [6])}</span> <span class="has-text-caution">${loc("city_metal_refinery_effect2", [6, 12, $(this)[0].powered()])}</span>`;
          } else {
            return loc(label, [6]);
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("metal_refinery", "city");
            global.resource.Aluminium.display = true;
            if (global.city["foundry"] && global.city.foundry.count > 0 && !global.resource.Sheet_Metal.display) {
              global.resource.Sheet_Metal.display = true;
              loadFoundry();
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: {
              count: 0,
              on: 0
            },
            p: ["metal_refinery", "city"]
          };
        }
      },
      mine: {
        id: "city-mine",
        title() {
          return structName("mine");
        },
        desc: loc("city_mine_desc"),
        category: "industrial",
        reqs: { mining: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("mine", offset, 60, dirt_adjust(1.6));
          },
          Lumber(offset) {
            return costMultiplier2("mine", offset, 175, dirt_adjust(1.38));
          }
        },
        effect() {
          if (global.tech["mine_conveyor"]) {
            return `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_miner`)])}</div><div class="has-text-caution">${loc("city_mine_effect2", [$(this)[0].powered(), 5])}</div>`;
          } else {
            return loc("plus_max_resource", [jobScale(1), loc(`job_miner`)]);
          }
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          return global.city.mine.hasOwnProperty("cpow") && global.city.mine.hasOwnProperty("ipow") ? [{ r: "Copper", k: "cpow" }, { r: "Iron", k: "ipow" }] : false;
        },
        power_reqs: { mine_conveyor: 1 },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct($(this)[0]);
            global.resource.Copper.display = true;
            global.civic.miner.display = true;
            global.civic.miner.max = jobScale(global.city.mine.count);
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["mine", "city"]
          };
        },
        flair() {
          return races[global.race.species].type === "avian" ? loc(`city_mine_flair_avian`) : "";
        }
      },
      coal_mine: {
        id: "city-coal_mine",
        title() {
          return structName("coal_mine");
        },
        desc: loc("city_coal_mine_desc"),
        category: "industrial",
        reqs: { mining: 4 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("coal_mine", offset, 480, dirt_adjust(1.4));
          },
          Lumber(offset) {
            return costMultiplier2("coal_mine", offset, 250, dirt_adjust(1.36));
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("coal_mine", offset, 28, dirt_adjust(1.36)) : 0;
          },
          Wrought_Iron(offset) {
            return costMultiplier2("coal_mine", offset, 18, dirt_adjust(1.36));
          }
        },
        effect() {
          if (global.tech["mine_conveyor"]) {
            return `<div>${loc("plus_max_resource", [jobScale(1), loc(`job_coal_miner`)])}</div><div class="has-text-caution">${loc("city_coal_mine_effect2", [$(this)[0].powered(), 5])}</div>`;
          } else {
            return loc("plus_max_resource", [jobScale(1), loc(`job_coal_miner`)]);
          }
        },
        powered() {
          return powerCostMod(1);
        },
        powerBalancer() {
          return global.city.coal_mine.hasOwnProperty("cpow") && global.city.coal_mine.hasOwnProperty("upow") && global.resource.Uranium.display ? [{ r: "Coal", k: "cpow" }, { r: "Uranium", k: "upow" }] : global.city.coal_mine.hasOwnProperty("cpow") ? [{ r: "Coal", k: "cpow" }] : false;
        },
        power_reqs: { mine_conveyor: 1 },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct($(this)[0]);
            global.resource.Coal.display = true;
            global.civic.coal_miner.display = true;
            global.civic.coal_miner.max = jobScale(global.city.coal_mine.count);
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["coal_mine", "city"]
          };
        }
      },
      oil_well: {
        id: "city-oil_well",
        title() {
          return global.race["blubber"] ? loc("tech_oil_refinery") : loc("city_oil_well");
        },
        desc() {
          return global.race["blubber"] ? loc("city_oil_well_blubber") : loc("city_oil_well_desc");
        },
        category: "industrial",
        reqs: { oil: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("oil_well", offset, 5e3, dirt_adjust(1.5));
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("oil_well", offset, 450, dirt_adjust(1.5)) : 0;
          },
          Cement(offset) {
            return costMultiplier2("oil_well", offset, 5250, dirt_adjust(1.5));
          },
          Steel(offset) {
            return costMultiplier2("oil_well", offset, 6e3, dirt_adjust(1.5));
          }
        },
        effect() {
          let oil = +production("oil_well").toFixed(2);
          let oc = spatialReasoning(500);
          let desc = `<div>${loc("city_oil_well_effect", [oil, oc])}</div>`;
          if (global.race["blubber"] && global.city.hasOwnProperty("oil_well")) {
            let maxDead = global.city.oil_well.count + (global.space["oil_extractor"] ? global.space.oil_extractor.count : 0);
            desc += `<div>${loc("city_oil_well_bodies", [+global.city.oil_well.dead.toFixed(1), 50 * maxDead])}</div>`;
            desc += `<div>${loc("city_oil_well_consume", [traits.blubber.vars()[0]])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("oil_well", "city");
            global["resource"]["Oil"].max += spatialReasoning(500);
            if (global.city.oil_well.count === 1) {
              global.resource.Oil.display = true;
              defineIndustry();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, dead: 0 },
            p: ["oil_well", "city"]
          };
        },
        flair: loc("city_oil_well_flair")
      },
      oil_depot: {
        id: "city-oil_depot",
        title: loc("city_oil_depot"),
        desc: loc("city_oil_depot_desc"),
        category: "trade",
        reqs: { oil: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("oil_depot", offset, 2500, dirt_adjust(1.46));
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("oil_depot", offset, 325, dirt_adjust(1.36)) : 0;
          },
          Cement(offset) {
            return costMultiplier2("oil_depot", offset, 3750, dirt_adjust(1.46));
          },
          Sheet_Metal(offset) {
            return costMultiplier2("oil_depot", offset, 100, dirt_adjust(1.45));
          }
        },
        effect() {
          let oil = spatialReasoning(1e3);
          oil *= global.tech["world_control"] ? 1.5 : 1;
          let effect = `<div>${loc("plus_max_resource", [oil, global.resource.Oil.name])}.</div>`;
          if (global.resource["Helium_3"].display) {
            let val = spatialReasoning(400);
            val *= global.tech["world_control"] ? 1.5 : 1;
            effect = effect + `<div>${loc("plus_max_resource", [val, global.resource.Helium_3.name])}.</div>`;
          }
          if (global.tech["uranium"] >= 2) {
            let val = spatialReasoning(250);
            val *= global.tech["world_control"] ? 1.5 : 1;
            effect = effect + `<div>${loc("plus_max_resource", [val, global.resource.Uranium.name])}.</div>`;
          }
          return effect;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("oil_depot", "city");
            global["resource"]["Oil"].max += spatialReasoning(1e3) * (global.tech["world_control"] ? 1.5 : 1);
            if (global.resource["Helium_3"].display) {
              global["resource"]["Helium_3"].max += spatialReasoning(400) * (global.tech["world_control"] ? 1.5 : 1);
            }
            if (global.tech["uranium"] >= 2) {
              global["resource"]["Uranium"].max += spatialReasoning(250) * (global.tech["world_control"] ? 1.5 : 1);
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["oil_depot", "city"]
          };
        }
      },
      trade: {
        id: "city-trade",
        title: loc("city_trade"),
        desc: loc("city_trade_desc"),
        category: "trade",
        reqs: { trade: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("trade", offset, 500, 1.36);
          },
          Lumber(offset) {
            return costMultiplier2("trade", offset, 125, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("trade", offset, 50, 1.36);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("trade", offset, 15, 1.36) : 0;
          },
          Furs(offset) {
            return costMultiplier2("trade", offset, 65, 1.36);
          }
        },
        effect() {
          return loc("city_trade_effect", [$(this)[0].routes()]);
        },
        routes() {
          let routes = global.tech["trade"] >= 2 ? 3 : 2;
          if (global.race["xenophobic"] || global.race["nomadic"]) {
            routes--;
          }
          if (global.race["flier"]) {
            routes += traits.flier.vars()[1];
          }
          return routes;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("trade", "city");
            global.city.market.mtrade += $(this)[0].routes();
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["trade", "city"]
          };
        }
      },
      wharf: {
        id: "city-wharf",
        title: loc("city_wharf"),
        desc: loc("city_wharf_desc"),
        category: "trade",
        era: "industrialized",
        reqs: { wharf: 1 },
        not_trait: ["thalassophobia", "cataclysm", "warlord"],
        cost: {
          Money(offset) {
            return costMultiplier2("wharf", offset, 62e3, 1.32);
          },
          Lumber(offset) {
            return costMultiplier2("wharf", offset, 44e3, 1.32);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("wharf", offset, 200, 1.32) : 0;
          },
          Cement(offset) {
            return costMultiplier2("wharf", offset, 3e3, 1.32);
          },
          Oil(offset) {
            return costMultiplier2("wharf", offset, 750, 1.32);
          }
        },
        effect() {
          let containers = global.tech["world_control"] ? 15 : 10;
          if (global.tech["particles"] && global.tech["particles"] >= 2) {
            containers *= 2;
          }
          return `<div>${loc("city_trade_effect", [2])}</div><div>${loc("city_wharf_effect")}</div><div>${loc("plus_max_crates", [containers])}</div><div>${loc("plus_max_containers", [containers])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("wharf", "city");
            global.city.market.mtrade += 2;
            let vol = global.tech["world_control"] ? 15 : 10;
            if (global.tech["particles"] && global.tech["particles"] >= 2) {
              vol *= 2;
            }
            global.resource.Crates.max += vol;
            global.resource.Containers.max += vol;
            if (!global.resource.Containers.display) {
              unlockContainers();
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["wharf", "city"]
          };
        }
      },
      tourist_center: {
        id: "city-tourist_center",
        title: loc("city_tourist_center"),
        desc: loc("city_tourist_center_desc"),
        category: "commercial",
        reqs: { monument: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("tourist_center", offset, 1e5, 1.36);
          },
          Stone(offset) {
            return costMultiplier2("tourist_center", offset, 25e3, 1.36);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("tourist_center", offset, 1e3, 1.36) : 0;
          },
          Furs(offset) {
            return costMultiplier2("tourist_center", offset, 7500, 1.36);
          },
          Plywood(offset) {
            return costMultiplier2("tourist_center", offset, 5e3, 1.36);
          }
        },
        effect(wiki) {
          let xeno = global.tech["monument"] && global.tech.monument >= 3 && isStargateOn(wiki) ? 3 : 1;
          let amp = (global.civic.govern.type === "corpocracy" ? 2 : 1) * xeno;
          let cas = (global.civic.govern.type === "corpocracy" ? 10 : 5) * xeno;
          let mon = (global.civic.govern.type === "corpocracy" ? 4 : 2) * xeno;
          let desc = `<div class="has-text-caution">${loc("city_tourist_center_effect1", [global.resource.Food.name])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [amp, actions.city.amphitheatre.title()])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [cas, structName("casino")])}</div>`;
          desc += `<div>${loc("city_tourist_center_effect2", [mon, loc(`arpa_project_monument_title`)])}</div>`;
          if (global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 4) {
            desc += `<div>${loc(`city_tourist_center_effect2`, [(global.civic.govern.type === "corpocracy" ? 6 : 3) * xeno, loc("city_trade")])}</div>`;
          }
          let piousVal = govActive("pious", 1);
          if (piousVal) {
            desc += `<div>${loc(`city_tourist_center_effect2`, [(global.civic.govern.type === "corpocracy" ? piousVal * 2 : piousVal) * xeno, structName("temple")])}</div>`;
          }
          return desc;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("tourist_center", "city");
            global.city.tourist_center.on++;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["tourist_center", "city"]
          };
        }
      },
      amphitheatre: {
        id: "city-amphitheatre",
        title() {
          if (global.race.universe === "evil") {
            return loc("city_colosseum");
          }
          let athVal = govActive("athleticism", 0);
          return athVal ? loc("city_stadium") : loc("city_amphitheatre");
        },
        desc() {
          if (global.race.universe === "evil") {
            return loc("city_colosseum");
          }
          let athVal = govActive("athleticism", 0);
          return athVal ? loc("city_stadium") : loc("city_amphitheatre_desc");
        },
        category: "commercial",
        reqs: { theatre: 1 },
        not_trait: ["joyless", "cataclysm"],
        cost: {
          Money(offset) {
            return costMultiplier2("amphitheatre", offset, 500, 1.55);
          },
          Lumber(offset) {
            return costMultiplier2("amphitheatre", offset, 50, 1.75);
          },
          Stone(offset) {
            return costMultiplier2("amphitheatre", offset, 200, 1.75);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("amphitheatre", offset, 18, 1.36) : 0;
          }
        },
        effect() {
          let athVal1 = govActive("athleticism", 0);
          let athVal2 = govActive("athleticism", 1);
          return `<div>${loc("plus_max_resource", [jobScale(athVal2 ? athVal2 : 1), loc(`job_entertainer`)])}</div><div>${loc("city_max_morale", [athVal1 ? athVal1 : 1])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("amphitheatre", "city");
            let athVal2 = govActive("athleticism", 1);
            global.civic.entertainer.max += jobScale(athVal2 ? athVal2 : 1);
            global.civic.entertainer.display = true;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, evil: 0 },
            p: ["amphitheatre", "city"]
          };
        },
        flair() {
          if (global.race.universe === "evil") {
            return loc("city_colosseum_flair");
          }
          let athVal = govActive("athleticism", 0);
          return athVal ? loc("city_stadium_flair") : loc("city_amphitheatre_flair");
        }
      },
      casino: {
        id: "city-casino",
        title() {
          return structName("casino");
        },
        desc() {
          return structName("casino");
        },
        category: "commercial",
        reqs: { gambling: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("casino", offset, traitCostMod("untrustworthy", 35e4), 1.35);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("casino", offset, traitCostMod("untrustworthy", 2e3), 1.35) : 0;
          },
          Furs(offset) {
            return costMultiplier2("casino", offset, traitCostMod("untrustworthy", 6e4), 1.35);
          },
          Plywood(offset) {
            return costMultiplier2("casino", offset, traitCostMod("untrustworthy", 1e4), 1.35);
          },
          Brick(offset) {
            return costMultiplier2("casino", offset, traitCostMod("untrustworthy", 6e3), 1.35);
          }
        },
        effect() {
          let desc = casinoEffect();
          desc = desc + `<div class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</div>`;
          return desc;
        },
        powered() {
          return powerCostMod(global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 2 ? 2 : 3);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("casino", "city");
            if (global.tech["theatre"] && !global.race["joyless"]) {
              global.civic.entertainer.max += jobScale(1);
              global.civic.entertainer.display = true;
            }
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["casino", "city"]
          };
        },
        flair: loc("city_casino_flair")
      },
      temple: {
        id: "city-temple",
        title() {
          return structName("temple");
        },
        desc() {
          let entity = global.race.gods !== "none" ? races[global.race.gods.toLowerCase()].entity : races[global.race.species].entity;
          return global.race.universe === "evil" && global.civic.govern.type != "theocracy" ? loc("city_temple_desc_evil", [entity]) : loc("city_temple_desc", [entity]);
        },
        category: "commercial",
        reqs: { theology: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("temple", offset, 50, 1.36);
          },
          Lumber(offset) {
            return costMultiplier2("temple", offset, 25, 1.36);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("temple", offset, 6, 1.36) : 0;
          },
          Furs(offset) {
            return costMultiplier2("temple", offset, 15, 1.36);
          },
          Cement(offset) {
            return costMultiplier2("temple", offset, 10, 1.36);
          }
        },
        effect() {
          let desc = templeEffect();
          if (global.genes["ancients"] && global.genes["ancients"] >= 2) {
            desc = desc + `<div>${loc("plus_max_resource", [jobScale(1), global.civic?.priest?.name || loc(`job_priest`)])}</div>`;
          }
          if (global.race.universe === "evil") {
            desc += `<div>${loc("plus_max_resource", [0.5, global.resource.Authority.name])}</div>`;
          }
          return desc;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            if (global.genes["ancients"] && global.genes["ancients"] >= 2) {
              global.civic.priest.display = true;
              global.civic.priest.max += jobScale(1);
            }
            incrementStruct("temple", "city");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["temple", "city"]
          };
        }
      },
      wonder_lighthouse: {
        id: "city-wonder_lighthouse",
        title() {
          return loc("city_wonder_lighthouse", [races[global.race.species].home]);
        },
        desc() {
          return loc("city_wonder_lighthouse", [races[global.race.species].home]);
        },
        category: "commercial",
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.city["wonder_lighthouse"] ? true : false;
        },
        trait: ["wish"],
        wiki: false,
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action(args) {
          return false;
        }
      },
      wonder_pyramid: {
        id: "city-wonder_pyramid",
        title() {
          return loc("city_wonder_pyramid", [races[global.race.species].name]);
        },
        desc() {
          return loc("city_wonder_pyramid", [races[global.race.species].name]);
        },
        category: "commercial",
        reqs: {},
        condition() {
          return global.race["wish"] && global.race["wishStats"] && global.city["wonder_pyramid"] ? true : false;
        },
        trait: ["wish"],
        wiki: false,
        queue_complete() {
          return false;
        },
        effect() {
          return loc(`city_wonder_effect`, [5]);
        },
        action(args) {
          return false;
        }
      },
      shrine: buildTemplate(`shrine`, "city"),
      meditation: buildTemplate(`meditation`, "city"),
      banquet: {
        id: "city-banquet",
        title: loc("city_banquet"),
        desc: loc(`city_banquet_desc`),
        category: "commercial",
        reqs: { banquet: 1 },
        queue_complete() {
          return global.stats.achieve["endless_hunger"] ? global.stats.achieve["endless_hunger"].l - global.city["banquet"].level : 0;
        },
        no_multi: true,
        condition() {
          return global.stats.achieve["endless_hunger"] && global.stats.achieve["endless_hunger"].l >= 1 ? true : false;
        },
        cost: {
          Money(offset) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            switch (level) {
              case 0:
                return 45e3;
              case 1:
                return 18e4;
              case 2:
                return 24e5;
              case 3:
                return 3e7;
              case 4:
                return 14e7;
              default:
                return 0;
            }
          },
          Food(offset) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            return (() => {
              switch (level) {
                case 0:
                  return 4e4;
                case 1:
                  return 124e3;
                case 2:
                  return 3e5;
                case 3:
                  return 72e4;
                case 4:
                  return 12e5;
                default:
                  return 0;
              }
            })() * (global.race["artifical"] ? 0.25 : 1);
          },
          Brick(offset) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            switch (level) {
              case 0:
                return 1600;
              case 1:
                return 18e3;
              case 2:
                return 75e3;
              default:
                return 0;
            }
          },
          Wrought_Iron(offset) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            switch (level) {
              case 0:
                return 0;
              case 1:
                return 26e3;
              case 2:
                return 88e3;
              case 3:
                return 144e3;
              case 4:
                return 24e4;
              default:
                return 0;
            }
          },
          Iridium(offset) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            switch (level) {
              case 2:
                return 5e4;
              case 3:
                return 27e4;
              case 4:
                return 7e5;
              default:
                return 0;
            }
          },
          Aerogel(offset, wiki) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            if (wiki ? wiki.truepath : global.race["truepath"]) {
              return 0;
            }
            switch (level) {
              case 3:
                return 4e4;
              case 4:
                return 15e4;
              default:
                return 0;
            }
          },
          Quantium(offset, wiki) {
            const level = (offset ? offset : 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
            if (wiki ? !wiki.truepath : !global.race["truepath"]) {
              return 0;
            }
            switch (level) {
              case 3:
                return 4e4;
              case 4:
                return 15e4;
              default:
                return 0;
            }
          },
          Bolognium(offset) {
            const level = (offset ? offset : 0) || (global.city["banquet"] ? global.city["banquet"].level : 0);
            switch (level) {
              case 4:
                return 15e4;
              default:
                return 0;
            }
          }
        },
        effect(wiki) {
          let strength = global.city["banquet"] ? global.city["banquet"].strength : 0;
          let level = (wiki?.count ?? 0) + (global.city["banquet"] ? global.city["banquet"].level : 0);
          let desc = `<div>Strength: <span class="has-text-caution">${strength}</span></div>`;
          desc += `<div>${loc(`city_banquet_effect1`, [sizeApproximation(((level >= 5 ? 1.02 : 1.022) ** strength - 1) * 100)])}</div>`;
          if (level >= 1) {
            desc += `<div>${loc(`city_banquet_effect2`, [(strength ** 0.75).toFixed(2)])}</div>`;
          }
          if (level >= 2) {
            desc += `<div>${loc(`city_banquet_effect3`, [(strength ** 0.65).toFixed(2)])}</div>`;
          }
          if (level >= 3) {
            desc += `<div>${loc(`city_banquet_effect4`, [(strength ** 0.65).toFixed(2)])}</div>`;
          }
          if (level >= 4) {
            desc += `<div>${loc(`city_banquet_effect5`, [(strength ** 0.75).toFixed(2)])}</div>`;
          }
          return desc;
        },
        powered() {
          return 0;
        },
        action(args) {
          if (global.city["banquet"].level < global.stats.achieve["endless_hunger"].l && payCosts($(this)[0])) {
            incrementStruct("banquet", "city");
            global.city["banquet"].level++;
            if (global.city["banquet"].level === 1) {
              global.city["banquet"].on = 1;
            }
            global.city["banquet"].count = 1;
            drawCity();
            return true;
          }
          return false;
        },
        count() {
          return global.city["banquet"].level;
        },
        struct() {
          return {
            d: { count: 0, on: 0, strength: 0, level: 0 },
            p: ["banquet", "city"]
          };
        },
        flair: loc("city_banquet_flair")
      },
      university: {
        id: "city-university",
        title: loc("city_university"),
        desc() {
          let planet = races[global.race.species].home;
          return loc("city_university_desc", [planet]);
        },
        category: "science",
        reqs: { science: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("university", offset, 900, 1.5) - 500;
          },
          Lumber(offset) {
            return costMultiplier2("university", offset, 500, 1.36) - 200;
          },
          Stone(offset) {
            return costMultiplier2("university", offset, 750, 1.36) - 350;
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? costMultiplier2("university", offset, 5, 1.36) : 0;
          },
          Iron(offset) {
            return (global.city["university"] ? global.city.university.count : 0) + (offset || 0) >= 3 && global.city.ptrait.includes("unstable") ? costMultiplier2("university", offset, 25, 1.36) : 0;
          }
        },
        effect(wiki) {
          let gain = +$(this)[0].knowVal(wiki).toFixed(0);
          return `<div>${loc("city_university_effect", [jobScale(1)])}</div><div>${loc("city_max_knowledge", [gain.toLocaleString()])}</div>`;
        },
        knowVal(wiki) {
          let multiplier = 1;
          let base = global.tech["science"] && global.tech["science"] >= 8 ? 700 : 500;
          if (global.city.ptrait.includes("permafrost")) {
            base += planetTraits.permafrost.vars()[1];
          }
          if (global.tech["science"] >= 4) {
            multiplier += global.city.library.count * 0.02;
          }
          if (global.space["observatory"] && global.space.observatory.count > 0) {
            multiplier += (wiki ? global.space.observatory.on : support_on["observatory"]) * 0.05;
          }
          if (global.portal["sensor_drone"] && global.tech["science"] >= 14) {
            multiplier += (wiki ? global.portal.sensor_drone.on : p_on["sensor_drone"]) * 0.02;
          }
          if (global.race["hard_of_hearing"]) {
            multiplier *= 1 - traits.hard_of_hearing.vars()[0] / 100;
          }
          if (global.race["curious"]) {
            multiplier *= 1 + traits.curious.vars()[0] / 100 * global.resource[global.race.species].amount;
          }
          let fathom = fathomCheck("cath");
          if (fathom > 0) {
            multiplier *= 1 + traits.curious.vars(3)[0] * fathom;
          }
          let sg_on = isStargateOn(wiki);
          let num_tech_scavs_on = sg_on ? wiki ? global.galaxy?.scavenger?.on ?? 0 : gal_on["scavenger"] : 0;
          if (num_tech_scavs_on > 0) {
            let pirate_alien2 = piracy("gxy_alien2", false, false, wiki);
            let uni = num_tech_scavs_on * pirate_alien2 / 4;
            multiplier *= 1 + uni;
          }
          let teachVal = govActive("teacher", 0);
          if (teachVal) {
            multiplier *= 1 + teachVal / 100;
          }
          let athVal = govActive("athleticism", 2);
          if (athVal) {
            multiplier *= 1 - athVal / 100;
          }
          if (shrineBonusActive()) {
            let shrineBonus = getShrineBonus("know");
            multiplier *= shrineBonus.mult;
          }
          let gain = base * multiplier;
          if (global.tech["supercollider"]) {
            let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech.particles >= 3 ? 12.5 : 25;
            gain *= global.tech["supercollider"] / ratio + 1;
          }
          if (global.race["orbit_decayed"]) {
            if (global.space["satellite"]) {
              gain *= 1 + global.space.satellite.count * 0.12;
            }
            if (global.tech["biotech"] && global.tech["biotech"] >= 1) {
              gain *= 2;
            }
          }
          return gain;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let gain = global.tech["science"] && global.tech["science"] >= 8 ? 700 : 500;
            if (global.tech["science"] >= 4) {
              gain *= 1 + global.city.library.count * 0.02;
            }
            if (global.tech["supercollider"]) {
              let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
              gain *= global.tech["supercollider"] / ratio + 1;
            }
            global["resource"]["Knowledge"].max += gain;
            incrementStruct("university", "city");
            global.civic.professor.display = true;
            global.civic.professor.max = jobScale(global.city.university.count);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["university", "city"]
          };
        }
      },
      library: {
        id: "city-library",
        title: loc("city_library"),
        desc() {
          let planet = races[global.race.species].home;
          return loc("city_library_desc", [planet]);
        },
        category: "science",
        reqs: { science: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("library", offset, 45, 1.2);
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? costMultiplier2("library", offset, 2, 1.2) : 0;
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("library", offset, 4, 1.2) : 0;
          },
          Furs(offset) {
            return costMultiplier2("library", offset, 22, 1.2);
          },
          Plywood(offset) {
            return costMultiplier2("library", offset, 20, 1.2);
          },
          Brick(offset) {
            return costMultiplier2("library", offset, 15, 1.2);
          }
        },
        effect() {
          let gain = 125;
          if (global.race["nearsighted"]) {
            gain *= 1 - traits.nearsighted.vars()[0] / 100;
          }
          if (global.race["studious"]) {
            gain *= 1 + traits.studious.vars()[1] / 100;
          }
          let fathom = fathomCheck("elven");
          if (fathom > 0) {
            gain *= 1 + traits.studious.vars(1)[1] / 100 * fathom;
          }
          if (global.tech["science"] && global.tech["science"] >= 8) {
            gain *= 1.4;
          }
          if (global.tech["anthropology"] && global.tech["anthropology"] >= 2) {
            gain *= 1 + faithTempleCount() * 0.05;
          }
          if (global.tech["science"] && global.tech["science"] >= 5) {
            let sci_val = workerScale(global.civic.scientist.workers, "scientist");
            if (global.race["high_pop"]) {
              sci_val = highPopAdjust(sci_val);
            }
            gain *= 1 + sci_val * 0.12;
          }
          let teachVal = govActive("teacher", 0);
          if (teachVal) {
            gain *= 1 + teachVal / 100;
          }
          let athVal = govActive("athleticism", 2);
          if (athVal) {
            gain *= 1 - athVal / 100;
          }
          let muckVal1 = govActive("muckraker", 1);
          if (muckVal1) {
            gain *= 1 + muckVal1 / 100;
          }
          gain = +gain.toFixed(0);
          let muckVal2 = govActive("muckraker", 2);
          let know = muckVal2 ? 5 - muckVal2 : 5;
          if (global.race["autoignition"]) {
            know -= traits.autoignition.vars()[0];
            if (know < 0) {
              know = 0;
            }
          }
          return `<div>${loc("city_max_knowledge", [gain.toLocaleString()])}</div><div>${loc("city_library_effect", [know])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let gain = 125;
            if (global.race["nearsighted"]) {
              gain *= 1 - traits.nearsighted.vars()[0] / 100;
            }
            if (global.tech["science"] && global.tech.science >= 8) {
              gain *= 1.4;
            }
            if (global.tech["anthropology"] && global.tech.anthropology >= 2) {
              gain *= 1 + faithTempleCount() * 0.05;
            }
            if (global.tech["science"] && global.tech.science >= 5) {
              gain *= 1 + workerScale(global.civic.scientist.workers, "scientist") * 0.12;
            }
            gain = +gain.toFixed(1);
            global["resource"]["Knowledge"].max += gain;
            incrementStruct("library", "city");
            if (global.tech["science"] && global.tech.science >= 3) {
              global.civic.professor.impact = 0.5 + global.city.library.count * 0.01;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["library", "city"]
          };
        },
        flair: loc("city_library_flair")
      },
      wardenclyffe: {
        id: "city-wardenclyffe",
        title() {
          return wardenLabel();
        },
        desc: loc("city_wardenclyffe_desc"),
        category: "science",
        reqs: { high_tech: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("wardenclyffe", offset, 5e3, 1.22);
          },
          Knowledge(offset) {
            return costMultiplier2("wardenclyffe", offset, global.race["logical"] ? 1e3 - traits.logical.vars()[0] : 1e3, 1.22);
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? costMultiplier2("wardenclyffe", offset, 100, 1.22) : 0;
          },
          Copper(offset) {
            return costMultiplier2("wardenclyffe", offset, 500, 1.22);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("wardenclyffe", offset, 75, 1.22) : 0;
          },
          Cement(offset) {
            return costMultiplier2("wardenclyffe", offset, 350, 1.22);
          },
          Sheet_Metal(offset) {
            return costMultiplier2("wardenclyffe", offset, 125, 1.2);
          },
          Nanite(offset) {
            return global.race["deconstructor"] ? costMultiplier2("wardenclyffe", offset, 50, 1.18) : 0;
          }
        },
        effect() {
          let gain = 1e3;
          if (global.city.ptrait.includes("magnetic")) {
            gain += planetTraits.magnetic.vars()[1];
          }
          if (global.tech["supercollider"]) {
            let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
            gain *= global.tech["supercollider"] / ratio + 1;
          }
          if (global.space["satellite"]) {
            gain *= 1 + global.space.satellite.count * 0.04;
          }
          let athVal = govActive("athleticism", 2);
          if (athVal) {
            gain *= 1 - athVal / 100;
          }
          gain = +gain.toFixed(0);
          let desc = `<div>${loc("city_wardenclyffe_effect1", [jobScale(1), global.civic.scientist ? global.civic.scientist.name : loc("job_scientist")])}</div><div>${loc("city_max_knowledge", [gain.toLocaleString()])}</div>`;
          if (global.city.powered) {
            let pgain = global.tech["science"] >= 7 ? 2500 : 2e3;
            if (global.city.ptrait.includes("magnetic")) {
              pgain += planetTraits.magnetic.vars()[1];
            }
            if (global.space["satellite"]) {
              pgain *= 1 + global.space.satellite.count * 0.04;
            }
            if (global.tech["supercollider"]) {
              let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
              pgain *= global.tech["supercollider"] / ratio + 1;
            }
            let athVal2 = govActive("athleticism", 2);
            if (athVal2) {
              pgain *= 1 - athVal2 / 100;
            }
            pgain = +pgain.toFixed(1);
            if (global.tech.science >= 15) {
              desc = desc + `<div>${loc("city_wardenclyffe_effect4", [2])}</div>`;
            }
            if (global.race.universe === "magic") {
              let mana = spatialReasoning(8);
              desc = desc + `<div>${loc("plus_max_resource", [mana, global.resource.Mana.name])}</div>`;
            }
            if (global.tech["broadcast"]) {
              let morale = global.tech["broadcast"];
              desc = desc + `<div class="has-text-caution">${loc("city_wardenclyffe_effect3", [$(this)[0].powered(), pgain.toLocaleString(), morale])}</div>`;
            } else {
              desc = desc + `<div class="has-text-caution">${loc("city_wardenclyffe_effect2", [$(this)[0].powered(), pgain.toLocaleString()])}</div>`;
            }
            if (global.race["artifical"]) {
              desc = desc + `<div class="has-text-caution">${loc("city_transmitter_effect", [spatialReasoning(250)])}</div`;
            }
          }
          return desc;
        },
        powered() {
          return powerCostMod(2);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            let gain = 1e3;
            incrementStruct("wardenclyffe", "city");
            global.civic.scientist.display = true;
            global.civic.scientist.max += jobScale(1);
            if (powerOnNewStruct($(this)[0])) {
              gain = global.tech["science"] >= 7 ? 2500 : 2e3;
            }
            if (global.tech["supercollider"]) {
              let ratio = global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
              gain *= global.tech["supercollider"] / ratio + 1;
            }
            global["resource"]["Knowledge"].max += gain;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["wardenclyffe", "city"]
          };
        },
        flair() {
          return global.race.universe === "magic" ? `<div>${loc("city_wizard_tower_flair")}</div>` : global.race["evil"] ? `<div>${loc("city_babel_flair")}</div>` : `<div>${loc("city_wardenclyffe_flair1")}</div><div>${loc("city_wardenclyffe_flair2")}</div>`;
        }
      },
      biolab: {
        id: "city-biolab",
        title: loc("city_biolab"),
        desc: `<div>${loc("city_biolab_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        category: "science",
        reqs: { genetics: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("biolab", offset, 25e3, 1.3);
          },
          Knowledge(offset) {
            return costMultiplier2("biolab", offset, 5e3, 1.3);
          },
          Copper(offset) {
            return costMultiplier2("biolab", offset, 1250, 1.3);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("biolab", offset, 160, 1.3) : 0;
          },
          Alloy(offset) {
            return costMultiplier2("biolab", offset, 350, 1.3);
          }
        },
        effect(wiki) {
          let gain = 3e3;
          if (global.portal["sensor_drone"] && global.tech["science"] >= 14) {
            gain *= 1 + (wiki ? global.portal.sensor_drone.on : p_on["sensor_drone"]) * 0.02;
          }
          if (global.tech["science"] >= 20) {
            gain *= 3;
          }
          if (global.tech["science"] >= 21) {
            gain *= 1.45;
          }
          if (global.tech["biotech"] >= 1) {
            gain *= 2.5;
          }
          if (global.race["elemental"] && traits.elemental.vars()[0] === "frost") {
            gain *= 1 + traits.elemental.vars()[4] * global.resource[global.race.species].amount / 100;
          }
          gain = +gain.toFixed(0);
          return `<span>${loc("city_max_knowledge", [gain.toLocaleString()])}</span>, <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span>`;
        },
        powered() {
          return powerCostMod(2);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("biolab", "city");
            if (powerOnNewStruct($(this)[0])) {
              global.resource.Knowledge.max += 3e3;
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["biolab", "city"]
          };
        }
      },
      coal_power: {
        id: "city-coal_power",
        title() {
          return global.race["environmentalist"] ? loc("city_hydro_power") : loc(global.race.universe === "magic" ? "city_mana_engine" : "city_coal_power");
        },
        desc() {
          return global.race["environmentalist"] ? `<div>${loc("city_hydro_power_desc")}</div>` : `<div>${loc(global.race.universe === "magic" ? "city_mana_engine_desc" : "city_coal_power_desc")}</div><div class="has-text-special">${loc("requires_res", [loc(global.race.universe === "magic" ? "resource_Mana_name" : "resource_Coal_name")])}</div>`;
        },
        category: "utility",
        reqs: { high_tech: 2 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("coal_power", offset, 1e4, dirt_adjust(1.22));
          },
          Crystal(offset) {
            return global.race.universe === "magic" ? costMultiplier2("coal_power", offset, 125, dirt_adjust(1.22)) : 0;
          },
          Copper(offset) {
            return costMultiplier2("coal_power", offset, 1800, dirt_adjust(1.22)) - 1e3;
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("coal_power", offset, 175, dirt_adjust(1.22)) : 0;
          },
          Cement(offset) {
            return costMultiplier2("coal_power", offset, 600, dirt_adjust(1.22));
          },
          Steel(offset) {
            return costMultiplier2("coal_power", offset, 2e3, dirt_adjust(1.22)) - 1e3;
          }
        },
        effect() {
          let consume = global.race.universe === "magic" ? 0.05 : 0.35;
          let power = -$(this)[0].powered();
          return global.race["environmentalist"] ? `+${power}MW` : `<span>+${power}MW.</span> <span class="has-text-caution">${loc(global.race.universe === "magic" ? "city_mana_engine_effect" : "city_coal_power_effect", [consume])}</span>`;
        },
        powered(wiki) {
          let power = global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 1 ? -6 : -5;
          if (!wiki && global.race["environmentalist"]) {
            power -= traits.environmentalist.vars()[0];
          }
          let dirt = govActive("dirty_jobs", 1);
          if (dirt) {
            power -= dirt;
          }
          return powerModifier(power);
        },
        p_fuel() {
          if (global.race.universe === "magic") {
            return { r: "Mana", a: global.race["environmentalist"] ? 0 : 0.05 };
          } else {
            return { r: "Coal", a: global.race["environmentalist"] ? 0 : 0.35 };
          }
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("coal_power", "city");
            global.city.coal_power.on++;
            global.city.power += 5;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["coal_power", "city"]
          };
        }
      },
      oil_power: {
        id: "city-oil_power",
        title() {
          return global.race["environmentalist"] ? loc("city_wind_power") : loc("city_oil_power");
        },
        desc() {
          return global.race["environmentalist"] ? `<div>${loc("city_wind_power_desc")}</div>` : `<div>${loc("city_oil_power_desc")}</div><div class="has-text-special">${loc("requires_res", [global.resource.Oil.name])}</div>`;
        },
        category: "utility",
        reqs: { oil: 3 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("oil_power", offset, 5e4, dirt_adjust(1.22));
          },
          Copper(offset) {
            return costMultiplier2("oil_power", offset, 6500, dirt_adjust(1.22)) + 1e3;
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("oil_power", offset, 180, dirt_adjust(1.22)) : 0;
          },
          Aluminium(offset) {
            return costMultiplier2("oil_power", offset, 12e3, dirt_adjust(1.22));
          },
          Cement(offset) {
            return costMultiplier2("oil_power", offset, 5600, dirt_adjust(1.22)) + 1e3;
          }
        },
        effect() {
          let consume = 0.65;
          let power = -$(this)[0].powered();
          return global.race["environmentalist"] ? `+${power}MW` : `<span>+${power}MW.</span> <span class="has-text-caution">${loc("city_oil_power_effect", [consume])}</span>`;
        },
        powered(wiki) {
          let power = 0;
          if (global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 3) {
            power = global.stats.achieve["dissipated"].l >= 5 ? -8 : -7;
          } else {
            power = -6;
          }
          if (!wiki && global.race["environmentalist"]) {
            power -= traits.environmentalist.vars()[0];
            if (global.city.calendar.wind === 1) {
              power -= 1;
            } else {
              power += 1;
            }
          }
          let dirt = govActive("dirty_jobs", 1);
          if (dirt) {
            power -= dirt;
          }
          return powerModifier(power);
        },
        p_fuel() {
          return { r: "Oil", a: global.race["environmentalist"] ? 0 : 0.65 };
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("oil_power", "city");
            global.city.oil_power.on++;
            global.city.power += 6;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["oil_power", "city"]
          };
        }
      },
      fission_power: {
        id: "city-fission_power",
        title: loc("city_fission_power"),
        desc() {
          return `<div>${loc("city_fission_power_desc")}</div><div class="has-text-special">${loc("requires_res", [global.resource.Uranium.name])}</div>`;
        },
        category: "utility",
        reqs: { high_tech: 5 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("fission_power", offset, 25e4, 1.36);
          },
          Copper(offset) {
            return costMultiplier2("fission_power", offset, 13500, 1.36);
          },
          Iron(offset) {
            return global.city.ptrait.includes("unstable") ? costMultiplier2("fission_power", offset, 1750, 1.36) : 0;
          },
          Cement(offset) {
            return costMultiplier2("fission_power", offset, 10800, 1.36);
          },
          Titanium(offset) {
            return costMultiplier2("fission_power", offset, 7500, 1.36);
          }
        },
        effect() {
          let consume = 0.1;
          return `<span>+${-$(this)[0].powered()}MW.</span> <span class="has-text-caution">${loc("city_fission_power_effect", [consume])}</span>`;
        },
        powered() {
          return powerModifier(global.tech["uranium"] >= 4 ? -18 : -14);
        },
        p_fuel() {
          return { r: "Uranium", a: 0.1 };
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("fission_power", "city");
            global.city.fission_power.on++;
            global.city.power += 14;
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["fission_power", "city"]
          };
        }
      },
      mass_driver: {
        id: "city-mass_driver",
        title: loc("city_mass_driver"),
        desc: `<div>${loc("city_mass_driver_desc")}</div><div class="has-text-special">${loc("requires_power")}</div>`,
        category: "utility",
        reqs: { mass: 1 },
        not_trait: ["cataclysm", "lone_survivor"],
        cost: {
          Money(offset) {
            return costMultiplier2("mass_driver", offset, 375e3, 1.32);
          },
          Copper(offset) {
            return costMultiplier2("mass_driver", offset, 33e3, 1.32);
          },
          Iron(offset) {
            return costMultiplier2("mass_driver", offset, 42500, 1.32);
          },
          Iridium(offset) {
            return costMultiplier2("mass_driver", offset, 2200, 1.32);
          }
        },
        effect() {
          let exo = global.tech.mass >= 2 ? `<div>${loc("city_mass_driver_effect2", [1, global.civic.scientist.name])}</div>` : "";
          return `${exo}<span>${loc("city_mass_driver_effect", [global.race["truepath"] ? 6 : 5, flib("name")])}</span> <span class="has-text-caution">${loc("minus_power", [$(this)[0].powered()])}</span>`;
        },
        powered() {
          let power = global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 4 ? 4 : 5;
          return powerCostMod(global.tech.mass >= 2 ? power - 1 : power);
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("mass_driver", "city");
            powerOnNewStruct($(this)[0]);
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0, on: 0 },
            p: ["mass_driver", "city"]
          };
        }
      },
      replicator: {
        id: "city-replicator",
        title: loc("tech_replicator"),
        desc: loc("tech_replicator"),
        category: "utility",
        reqs: { special_hack: 1 },
        cost: {},
        wiki: false,
        effect() {
          return "fake structure";
        },
        powered() {
          return 1;
        },
        action(args) {
          return false;
        }
      }
    },
    tech: techList(),
    arpa: arpa("PhysicsTech"),
    genes: arpa("GeneTech"),
    blood: arpa("BloodTech"),
    space: spaceTech(),
    interstellar: interstellarTech(),
    galaxy: galaxyTech(),
    starDock: {
      probes: {
        id: "starDock-probes",
        title: loc("star_dock_probe"),
        desc() {
          return `<div>${loc("star_dock_probe_desc")}</div>`;
        },
        reqs: { genesis: 4 },
        cost: {
          Money(offset) {
            return costMultiplier2("probes", offset, 35e4, global.race["truepath"] ? 1.125 : 1.25, "starDock");
          },
          Alloy(offset) {
            return costMultiplier2("probes", offset, 75e3, global.race["truepath"] ? 1.125 : 1.25, "starDock");
          },
          Polymer(offset) {
            return costMultiplier2("probes", offset, 85e3, global.race["truepath"] ? 1.125 : 1.25, "starDock");
          },
          Iridium(offset) {
            return costMultiplier2("probes", offset, 12e3, global.race["truepath"] ? 1.125 : 1.25, "starDock");
          },
          Mythril(offset) {
            return costMultiplier2("probes", offset, 3500, global.race["truepath"] ? 1.125 : 1.25, "starDock");
          }
        },
        effect() {
          return `<div>${loc("star_dock_probe_effect")}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("probes", "starDock");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["probes", "starDock"]
          };
        }
      },
      geck: {
        id: "starDock-geck",
        title: loc("tech_geck"),
        desc() {
          return `<div>${loc("tech_geck_desc")}</div>`;
        },
        reqs: { geck: 1 },
        condition() {
          return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 5 ? true : false;
        },
        queue_complete() {
          return 0;
        },
        no_multi: true,
        cost: {
          Money(offset) {
            return costMultiplier2("geck", offset, 1e6, 1.25, "starDock");
          },
          Elerium(offset) {
            return costMultiplier2("geck", offset, 1e3, 1.25, "starDock");
          },
          Plasmid(offset) {
            return costMultiplier2("geck", offset, 25, 1.4, "starDock");
          }
        },
        effect() {
          return `<div>${loc("star_dock_geck_effect")}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            incrementStruct("geck", "starDock");
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["geck", "starDock"]
          };
        }
      },
      seeder: {
        id: "starDock-seeder",
        title() {
          return global.race["cataclysm"] ? loc("star_dock_exodus") : loc("star_dock_seeder");
        },
        desc() {
          let label = global.race["cataclysm"] ? loc("star_dock_exodus") : loc("star_dock_seeder");
          if (global.starDock["seeder"] && global.starDock.seeder.count >= 100) {
            return `<div>${label}</div><div class="has-text-special">${loc("star_dock_seeder_desc2")}</div>`;
          } else {
            return `<div>${label}</div><div class="has-text-special">${loc("star_dock_seeder_desc1")}</div>`;
          }
        },
        reqs: { genesis: 5 },
        queue_size: 10,
        queue_complete() {
          return 100 - global.starDock.seeder.count;
        },
        cost: {
          Money(offset) {
            return (offset || 0) + (global.starDock.hasOwnProperty("seeder") ? global.starDock.seeder.count : 0) < 100 ? 1e5 : 0;
          },
          Steel(offset) {
            return (offset || 0) + (global.starDock.hasOwnProperty("seeder") ? global.starDock.seeder.count : 0) < 100 ? 25e3 : 0;
          },
          Neutronium(offset) {
            return (offset || 0) + (global.starDock.hasOwnProperty("seeder") ? global.starDock.seeder.count : 0) < 100 ? 240 : 0;
          },
          Elerium(offset) {
            return (offset || 0) + (global.starDock.hasOwnProperty("seeder") ? global.starDock.seeder.count : 0) < 100 ? 10 : 0;
          },
          Nano_Tube(offset) {
            return (offset || 0) + (global.starDock.hasOwnProperty("seeder") ? global.starDock.seeder.count : 0) < 100 ? 12e3 : 0;
          }
        },
        effect(wiki) {
          let count = (wiki?.count ?? 0) + (global.starDock["seeder"] ? global.starDock.seeder.count : 0);
          let remain = count < 100 ? loc("star_dock_seeder_status1", [100 - count]) : loc("star_dock_seeder_status2");
          return `<div>${global.race["cataclysm"] ? loc("star_dock_exodus_effect") : loc("star_dock_seeder_effect")}</div><div class="has-text-special">${remain}</div>`;
        },
        action(args) {
          if (global.starDock.seeder.count < 100 && payCosts($(this)[0])) {
            incrementStruct("seeder", "starDock");
            if (global.starDock.seeder.count >= 100) {
              global.tech.genesis = 6;
              clearPopper(`starDock-seeder`);
              clearElement($("#modalBox"));
              let c_action = actions.space.spc_gas.star_dock;
              drawModal2(c_action, "star_dock");
            }
            return true;
          }
          return false;
        },
        struct() {
          return {
            d: { count: 0 },
            p: ["seeder", "starDock"]
          };
        }
      },
      prep_ship: {
        id: "starDock-prep_ship",
        title: loc("star_dock_prep"),
        desc() {
          let label = global.race["cataclysm"] ? loc("star_dock_prep_cata_desc") : loc("star_dock_prep_desc");
          return `<div>${label}</div><div class="has-text-danger">${loc("star_dock_genesis_desc2")}</div>`;
        },
        reqs: { genesis: 6 },
        queue_complete() {
          return 0;
        },
        cost: {
          Helium_3(offset, wiki) {
            return +fuel_adjust(global.race["gravity_well"] ? 15e4 : 75e3, false, wiki).toFixed(0);
          }
        },
        effect() {
          let gains = calcPrestige("bioseed");
          let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
          let label = global.race["cataclysm"] ? loc("star_dock_prep_cata_effect") : loc("star_dock_prep_effect");
          return `<div>${label}</div><div class="has-text-special">${loc("star_dock_genesis_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-special">${loc("star_dock_genesis_effect3", [gains.phage])}</div>`;
        },
        action(args) {
          if (payCosts($(this)[0])) {
            global.tech["genesis"] = 7;
            clearPopper(`starDock-prep_ship`);
            clearElement($("#modalBox"));
            let c_action = actions.space.spc_gas.star_dock;
            drawModal2(c_action, "star_dock");
            return true;
          }
          return false;
        }
      },
      launch_ship: {
        id: "starDock-launch_ship",
        title: loc("star_dock_genesis"),
        desc() {
          let label = global.race["cataclysm"] ? loc("star_dock_prep_cata_effect") : loc("star_dock_genesis_desc1");
          return `<div>${label}</div><div class="has-text-danger">${loc("star_dock_genesis_desc2")}</div>`;
        },
        reqs: { genesis: 7 },
        queue_complete() {
          return 0;
        },
        cost: {},
        effect() {
          let gains = calcPrestige("bioseed");
          let plasmidType = global.race.universe === "antimatter" ? loc("resource_AntiPlasmid_plural_name") : loc("resource_Plasmid_plural_name");
          let label = global.race["cataclysm"] ? loc("star_dock_genesis_cata_effect1") : loc("star_dock_genesis_effect1");
          return `<div>${label}</div><div class="has-text-special">${loc("star_dock_genesis_effect2", [gains.plasmid, plasmidType])}</div><div class="has-text-special">${loc("star_dock_genesis_effect3", [gains.phage])}</div>`;
        },
        action(args) {
          bioseed();
          return false;
        }
      }
    },
    portal: fortressTech(),
    tauceti: tauCetiTech(),
    eden: edenicTech()
  };
  function setChallengeScreen() {
    let list = $(`#evolution .evolving`).nextAll();
    Object.values(list).forEach(function(elm) {
      clearElement($(elm), true);
    });
    clearElement($(`#evolution .evolving`), true);
    global.evolution["bunker"] = { count: 1 };
    removeAction(actions.evolution.bunker.id);
    evoProgress();
    if (global.race["truepath"] || global.race["lone_survivor"]) {
      global.evolution["nerfed"] = { count: 0 };
      global.evolution["badgenes"] = { count: 0 };
    } else {
      if (global.race.universe === "antimatter") {
        global.evolution["mastery"] = { count: 0 };
      } else {
        global.evolution["plasmid"] = { count: 0 };
      }
      global.evolution["crispr"] = { count: 0 };
    }
    global.evolution["trade"] = { count: 0 };
    global.evolution["craft"] = { count: 0 };
    global.evolution["junker"] = { count: 0 };
    global.evolution["joyless"] = { count: 0 };
    global.evolution["steelen"] = { count: 0 };
    if (global.stats.achieve["whitehole"] || global["sim"]) {
      global.evolution["decay"] = { count: 0 };
    }
    if (global.stats.achieve["ascended"] || global["sim"]) {
      global.evolution["emfield"] = { count: 0 };
    }
    if (global.stats.achieve["scrooge"] || global["sim"]) {
      global.evolution["inflation"] = { count: 0 };
    }
    if (global.stats.achieve["shaken"] || global["sim"]) {
      global.evolution["cataclysm"] = { count: 0 };
    }
    if (global.stats.achieve["whitehole"] || global.stats.achieve["ascended"] || global["sim"]) {
      global.evolution["banana"] = { count: 0 };
      global.evolution["orbit_decay"] = { count: 0 };
    }
    if (global.race.universe === "standard" && (global.stats.achieve["whitehole"] || global["sim"])) {
    }
    if (global.race.universe === "heavy" && (global.stats.achieve["seeder"] && global.stats.achieve.seeder["h"] || global["sim"])) {
      global.evolution["gravity_well"] = { count: 0 };
    }
    if (global.race.universe === "magic" && (global.stats.achieve["ascended"] && global.stats.achieve.ascended["mg"] || global["sim"])) {
      global.evolution["witch_hunter"] = { count: 0 };
    }
    if (global.race.universe === "evil" && (global.stats.achieve["godslayer"] && global.stats.achieve.godslayer["e"] || global["sim"])) {
      global.evolution["warlord"] = { count: 0 };
    }
    if (global.stats.achieve["ascended"] || global.stats.achieve["corrupted"] || global["sim"]) {
      global.evolution["truepath"] = { count: 0 };
    }
    if ((global.stats.achieve["ascended"] || global.stats.achieve["corrupted"]) && global.stats.achieve["extinct_junker"] || global["sim"]) {
      global.evolution["sludge"] = { count: 0 };
    }
    if (global.stats.achieve["godslayer"] && global.stats.achieve["extinct_sludge"] || global["sim"]) {
      global.evolution["ultra_sludge"] = { count: 0 };
    }
    if (global.stats.achieve["bluepill"] || global["sim"]) {
      global.evolution["simulation"] = { count: 0 };
    }
    if (global.stats.achieve["retired"] || global["sim"]) {
      global.evolution["lone_survivor"] = { count: 0 };
    }
    if (global.stats.achieve["corrupted"] || global["sim"]) {
      global.evolution["fasting"] = { count: 0 };
    }
    challengeGeneHeader();
    if (global.race["truepath"] || global.race["lone_survivor"]) {
      addAction("evolution", "nerfed");
    } else {
      if (global.race.universe === "antimatter") {
        addAction("evolution", "mastery");
      } else {
        addAction("evolution", "plasmid");
      }
    }
    addAction("evolution", "trade");
    addAction("evolution", "craft");
    if (global.race["truepath"] || global.race["lone_survivor"]) {
      addAction("evolution", "badgenes");
    } else {
      addAction("evolution", "crispr");
    }
    challengeActionHeader();
    addAction("evolution", "joyless");
    addAction("evolution", "steelen");
    if (global.stats.achieve["whitehole"] || global["sim"]) {
      addAction("evolution", "decay");
    }
    if (global.stats.achieve["ascended"] || global["sim"]) {
      addAction("evolution", "emfield");
    }
    if (global.stats.achieve["scrooge"] || global["sim"]) {
      addAction("evolution", "inflation");
    }
    if ((global.stats.achieve["ascended"] || global.stats.achieve["corrupted"]) && global.stats.achieve["extinct_junker"] || global["sim"]) {
      addAction("evolution", "sludge");
    }
    if (global.stats.achieve["godslayer"] && global.stats.achieve["extinct_sludge"] || global["sim"]) {
      addAction("evolution", "ultra_sludge");
    }
    if (global.stats.achieve["whitehole"] || global.stats.achieve["ascended"] || global["sim"]) {
      addAction("evolution", "orbit_decay");
    }
    if (global.race.universe === "standard" && (global.stats.achieve["whitehole"] || global["sim"])) {
    }
    if (global.race.universe === "heavy" && (global.stats.achieve["seeder"] && global.stats.achieve.seeder["h"] || global["sim"])) {
      addAction("evolution", "gravity_well");
    }
    if (global.race.universe === "magic" && (global.stats.achieve["ascended"] && global.stats.achieve.ascended["mg"] || global["sim"])) {
      addAction("evolution", "witch_hunter");
    }
    if (global.hasOwnProperty("beta") && !global["sim"]) {
      addAction("evolution", "simulation");
    }
    scenarioActionHeader();
    addAction("evolution", "junker");
    if (global.stats.achieve["shaken"] || global["sim"]) {
      addAction("evolution", "cataclysm");
    }
    if (global.stats.achieve["whitehole"] || global.stats.achieve["ascended"] || global["sim"]) {
      addAction("evolution", "banana");
    }
    if (global.stats.achieve["ascended"] || global.stats.achieve["corrupted"] || global["sim"]) {
      addAction("evolution", "truepath");
    }
    if (global.stats.achieve["retired"] || global["sim"]) {
      addAction("evolution", "lone_survivor");
    }
    if (global.stats.achieve["corrupted"] || global["sim"]) {
      addAction("evolution", "fasting");
    }
    if (global.race.universe === "evil" && (global.stats.achieve["godslayer"] && global.stats.achieve.godslayer["e"] || global["sim"])) {
      addAction("evolution", "warlord");
    }
    if (global["sim"]) {
      exitSimulation();
    } else if (global.race["simulation"]) {
      configSimulation();
    }
    if (global.race["warlord"]) {
      ["custom", "hybrid", "nano", "sentience"].forEach(function(r) {
        if ($(`#evolution-${r}`).length > 0) {
          $(`#evolution-${r}`).addClass("disabled");
        }
      });
    } else {
      ["custom", "hybrid", "nano", "sentience"].forEach(function(r) {
        if ($(`#evolution-${r}`).length > 0 && $(`#evolution-${r}`).hasClass("disabled")) {
          $(`#evolution-${r}`).removeClass("disabled");
        }
      });
    }
  }
  function buildTemplate(key, region) {
    let tName = global.race["orbit_decay"] ? "orbit_decayed" : global.race["warlord"] ? "warlord" : "cataclysm";
    let tKey = function(a, k, r) {
      if (r === "space" || r === "portal") {
        if (a.hasOwnProperty("trait")) {
          a.trait.push(k);
        } else {
          a["trait"] = [k];
        }
      } else if (r === "tauceti") {
        a.reqs["isolation"] = 1;
      } else {
        if (a.hasOwnProperty("not_trait")) {
          a.not_trait.push(k);
        } else {
          a["not_trait"] = [k];
        }
      }
      return a;
    };
    switch (key) {
      case "bonfire": {
        let action = {
          id: `${region}-bonfire`,
          title: loc("city_bonfire"),
          desc: loc("city_bonfire_desc"),
          category: "outskirts",
          wiki: false,
          reqs: { primitive: 3 },
          condition() {
            return eventActive(`summer`);
          },
          queue_complete() {
            return 0;
          },
          effect() {
            let morale = global.resource.Thermite.diff * 2.5 / (global.resource.Thermite.diff * 2.5 + 500) * 500;
            let thermite = 1e5 + global.stats.reset * 9e3;
            if (thermite > 1e6) {
              thermite = 1e6;
            }
            let goal = global.resource.Thermite.amount < thermite ? `<div class="has-text-warning">${loc("city_bonfire_effect3", [thermite.toLocaleString()])}</div><div class="has-text-caution">${loc("city_bonfire_effect4", [(+global.resource.Thermite.amount.toFixed(0)).toLocaleString(), thermite.toLocaleString()])}</div>` : ``;
            return `<div>${loc(`city_bonfire_effect`, [global.resource.Thermite.diff])}</div><div>${loc(`city_bonfire_effect2`, [+morale.toFixed(1)])}</div>${goal}`;
          },
          action(args) {
            return false;
          },
          flair() {
            return loc(`city_bonfire_flair`);
          }
        };
        return tKey(action, tName, region);
      }
      case "firework": {
        let action = {
          id: `${region}-firework`,
          title: loc("city_firework"),
          desc: loc("city_firework"),
          category: "outskirts",
          wiki: false,
          reqs: { mining: 3 },
          condition() {
            return eventActive(`firework`) && global[region].firework && (global.tech["cement"] || global.race["flier"]);
          },
          cost: {
            Money() {
              return global[region].firework.count === 0 ? 5e4 : 0;
            },
            Iron() {
              return global[region].firework.count === 0 ? 7500 : 0;
            },
            Cement() {
              return global[region].firework.count === 0 ? 1e4 : 0;
            }
          },
          queue_complete() {
            return 1 - global[region].firework.count;
          },
          switchable() {
            return true;
          },
          effect() {
            return global[region].firework.count === 0 ? loc(`city_firework_build`) : loc(`city_firework_effect`);
          },
          action(args) {
            if (global[region].firework.count === 0 && payCosts($(this)[0])) {
              global[region].firework.count = 1;
              return true;
            }
            return false;
          }
        };
        return tKey(action, tName, region);
      }
      case "assembly": {
        let assemblyCostAdjust = function(v) {
          let cost = highPopAdjust(v);
          if (global.race["promiscuous"]) {
            cost /= 1 + traits.promiscuous.vars()[1] * global.race["promiscuous"];
          }
          return Math.round(cost);
        };
        let action = {
          id: `${region}-assembly`,
          title: loc("city_assembly"),
          desc() {
            return loc("city_assembly_desc", [races[global.race.species].name]);
          },
          category: "military",
          reqs: {},
          trait: ["artifical"],
          queue_complete() {
            return global.resource[global.race.species].max - global.resource[global.race.species].amount;
          },
          cost: {
            Money(offset) {
              return global["resource"][global.race.species].amount ? costMultiplier2("citizen", offset, assemblyCostAdjust(125), 1.01) : 0;
            },
            Copper(offset) {
              return global.race["deconstructor"] ? 0 : global["resource"][global.race.species].amount >= 5 ? costMultiplier2("citizen", offset, assemblyCostAdjust(50), 1.01) : 0;
            },
            Aluminium(offset) {
              return global.race["deconstructor"] ? 0 : global["resource"][global.race.species].amount >= 5 ? costMultiplier2("citizen", offset, assemblyCostAdjust(50), 1.01) : 0;
            },
            Nanite(offset) {
              return global.race["deconstructor"] ? global["resource"][global.race.species].amount >= 3 ? costMultiplier2("citizen", offset, assemblyCostAdjust(500), 1.01) : 0 : 0;
            }
          },
          effect() {
            let warn = "";
            if (global["resource"][global.race.species].max === global["resource"][global.race.species].amount) {
              warn = `<div class="has-text-caution">${loc("city_assembly_effect_warn")}</div>`;
            } else if (global.race["parasite"]) {
              let buffer = 6;
              switch (traitRank("parasite")) {
                case 0.25:
                  buffer = 5;
                  break;
                case 0.5:
                  buffer = 4;
                  break;
                case 1:
                case 2:
                case 3:
                case 4:
                  buffer = 4 - traitRank("parasite");
                  break;
              }
              if (global.race["last_assembled"] && global.race.last_assembled + buffer >= global.stats.days) {
                warn = `<div class="has-text-caution">${loc("city_assembly_effect_parasite", [global.race.last_assembled + buffer + 1 - global.stats.days])}</div>`;
              } else {
                warn = `<div class="has-text-success">${loc("city_assembly_effect_parasite_ok")}</div>`;
              }
            }
            return `<div>${loc("city_assembly_effect", [races[global.race.species].name])}</div>${warn}`;
          },
          action(args) {
            if (global.race["parasite"] && (global.race["cataclysm"] || global.race["orbit_decayed"])) {
              let buffer = 6;
              switch (traitRank("parasite")) {
                case 0.25:
                  buffer = 5;
                  break;
                case 0.5:
                  buffer = 4;
                  break;
                case 1:
                case 2:
                case 3:
                case 4:
                  buffer = 4 - traitRank("parasite");
                  break;
              }
              if (global.race["last_assembled"] && global.race.last_assembled + buffer >= global.stats.days) {
                return false;
              }
            }
            if (global.race["vax"] && global.race.vax >= 100) {
              return true;
            } else if (global["resource"][global.race.species].max > global["resource"][global.race.species].amount && payCosts($(this)[0])) {
              global["resource"][global.race.species].amount++;
              global.civic[global.civic.d_job].workers++;
              global.race["last_assembled"] = global.stats.days;
              return true;
            }
            return false;
          }
        };
        return tKey(action, tName, region);
      }
      case "nanite_factory": {
        let action = {
          id: `${region}-nanite_factory`,
          title: loc("city_nanite_factory"),
          desc: loc("city_nanite_factory"),
          category: "industrial",
          reqs: {},
          trait: ["deconstructor"],
          region: "city",
          cost: {
            Money(offset) {
              return costMultiplier2("nanite_factory", offset, 25e3, dirt_adjust(1.25));
            },
            Copper(offset) {
              return costMultiplier2("nanite_factory", offset, 1200, dirt_adjust(1.25));
            },
            Steel(offset) {
              return costMultiplier2("nanite_factory", offset, 1e3, dirt_adjust(1.25));
            }
          },
          effect() {
            let val = spatialReasoning(2500);
            return `<div>${loc("city_nanite_factory_effect", [global.resource.Nanite.name])}</div><div>${loc("plus_max_resource", [val, global.resource.Nanite.name])}.</div>`;
          },
          special: true,
          action(args) {
            if (payCosts($(this)[0])) {
              incrementStruct("nanite_factory", "city");
              if (global.city.nanite_factory.count === 1) {
                global.settings.showIndustry = true;
                defineIndustry();
              }
              return true;
            }
            return false;
          },
          flair: loc(`city_nanite_factory_flair`)
        };
        return tKey(action, tName, region);
      }
      case "captive_housing": {
        let action = {
          id: `${region}-captive_housing`,
          title: loc("city_captive_housing"),
          desc: loc("city_captive_housing_desc"),
          category: "residential",
          reqs: { unfathomable: 1 },
          trait: ["unfathomable"],
          region: "city",
          cost: {
            Money(offset) {
              return costMultiplier2("captive_housing", offset, 40, 1.35);
            },
            Lumber(offset) {
              return costMultiplier2("captive_housing", offset, 30, 1.35);
            },
            Stone(offset) {
              return costMultiplier2("captive_housing", offset, 18, 1.35);
            }
          },
          effect() {
            let desc = ``;
            if (!global.race["artifical"] && !global.race["detritivore"] && !global.race["carnivore"] && !global.race["soul_eater"]) {
              let cattle = global.city.hasOwnProperty("captive_housing") ? global.city.captive_housing.cattle : 0;
              let cattleCap = global.city.hasOwnProperty("captive_housing") ? global.city.captive_housing.cattleCap : 0;
              desc += `<div>${loc(`city_captive_housing_cattle`, [cattle, cattleCap])}</div>`;
            }
            let usedCap = 0;
            if (global.city.hasOwnProperty("surfaceDwellers")) {
              for (let i = 0; i < global.city.surfaceDwellers.length; i++) {
                let r = global.city.surfaceDwellers[i];
                let mindbreak = global.city.captive_housing[`race${i}`];
                let jailed = global.city.captive_housing[`jailrace${i}`];
                usedCap += mindbreak + jailed;
                desc += `<div>${loc(`city_captive_housing_broken`, [races[r].name, mindbreak])}</div>`;
                desc += `<div>${loc(`city_captive_housing_untrained`, [races[r].name, jailed])}</div>`;
              }
            }
            let raceCap = global.city.hasOwnProperty("captive_housing") ? global.city.captive_housing.raceCap : 0;
            desc += `<div>${loc(`city_captive_housing_capacity`, [usedCap, raceCap])}</div>`;
            if (global.tech["unfathomable"] && global.tech.unfathomable >= 2) {
              desc += `<div>${loc(`plus_max_resource`, [1, loc("job_torturer")])}</div>`;
            }
            return desc;
          },
          action(args) {
            if (payCosts($(this)[0])) {
              incrementStruct("captive_housing", "city");
              let houses = global.city.captive_housing.count;
              global.city.captive_housing.raceCap = houses * (global.tech["unfathomable"] && global.tech.unfathomable >= 3 ? 3 : 2);
              global.city.captive_housing.cattleCap = houses * 5;
              return true;
            }
            return false;
          },
          struct() {
            return {
              d: {
                count: 0,
                cattle: 0,
                cattleCatch: 0,
                race0: 0,
                jailrace0: 0,
                race1: 0,
                jailrace1: 0,
                race2: 0,
                jailrace2: 0,
                raceCap: 0,
                cattleCap: 0
              },
              p: ["captive_housing", "city"]
            };
          }
        };
        return tKey(action, tName, region);
      }
      case "horseshoe": {
        let action = {
          id: `${region}-horseshoe`,
          title() {
            return loc(`city_${hoovedRename(true)}`, [hoovedRename(false)]);
          },
          desc() {
            return loc(`city_${hoovedRename(true)}_desc`, [hoovedRename(false)]);
          },
          category: "outskirts",
          reqs: { primitive: 3 },
          condition() {
            return global.race["hooved"] || eventActive("fool", 2023);
          },
          inflation: false,
          cost: {
            Lumber(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              let active = !global.race["kindling_kindred"] && !global.race["smoldering"] && (!global.resource.Copper.display || shoes <= 12) ? true : false;
              return active ? Math.round((shoes > 12 ? 25 : 5) * (shoes <= 5 ? 1 : shoes - 4) * (traits.hooved.vars()[0] / 100)) : 0;
            },
            Copper(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              let lum = global.race["kindling_kindred"] || global.race["smoldering"] ? false : true;
              let active = (!lum || lum && shoes > 12 && global.resource.Copper.display) && (!global.resource.Iron.display || shoes <= 75) ? true : false;
              return active ? Math.round((shoes > 75 ? 20 : 5) * (shoes <= 12 ? 1 : shoes - 11) * (traits.hooved.vars()[0] / 100)) : 0;
            },
            Iron(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              return global.resource.Iron.display && shoes > 75 && (!global.resource.Steel.display || shoes <= 150) ? Math.round((shoes <= 150 ? 12 : 28) * shoes * (traits.hooved.vars()[0] / 100)) : 0;
            },
            Steel(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              return global.resource.Steel.display && shoes > 150 && (!global.resource.Adamantite.display || shoes <= 500) ? Math.round((shoes <= 500 ? 40 : 100) * shoes * (traits.hooved.vars()[0] / 100)) : 0;
            },
            Adamantite(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              return global.resource.Adamantite.display && shoes > 500 && (!global.resource.Orichalcum.display || shoes <= 5e3) ? Math.round((shoes <= 5e3 ? 5 : 25) * shoes * (traits.hooved.vars()[0] / 100)) : 0;
            },
            Orichalcum(offset) {
              let shoes = (global.race["shoecnt"] || 0) + (offset || 0);
              return global.resource.Orichalcum.display && shoes > 5e3 ? Math.round((25 * shoes - 12e4) * (traits.hooved.vars()[0] / 100)) : 0;
            }
          },
          action(args) {
            if (!global.race["hooved"] && eventActive("fool", 2023)) {
              return true;
            }
            if (global.resource.Horseshoe.display && payCosts($(this)[0])) {
              global.resource.Horseshoe.amount++;
              global.race.shoecnt++;
              if (global.race.shoecnt === 5001 && global.resource.Orichalcum.display || global.race.shoecnt === 501 && global.resource.Adamantite.display || global.race.shoecnt === 151 && global.resource.Steel.display || global.race.shoecnt === 76 && global.resource.Iron.display || global.race.shoecnt === 13 && global.resource.Copper.display && global.resource.Lumber.display) {
                return 0;
              }
              return true;
            }
            return false;
          }
        };
        return tKey(action, tName, region);
      }
      case "s_alter": {
        let action = {
          id: `${region}-s_alter`,
          title: loc("city_s_alter"),
          desc() {
            return global.city.hasOwnProperty("s_alter") && global.city["s_alter"].count >= 1 ? `<div>${loc("city_s_alter")}</div><div class="has-text-special">${loc("city_s_alter_desc")}</div>` : loc("city_s_alter");
          },
          category: "outskirts",
          reqs: { mining: 1 },
          trait: ["cannibalize"],
          not_trait: ["cataclysm", "lone_survivor"],
          inflation: false,
          region: "city",
          cost: {
            Stone(offset) {
              return (offset || 0) + (global.city.hasOwnProperty("s_alter") ? global.city["s_alter"].count : 0) >= 1 ? 0 : 100;
            }
          },
          effect() {
            let sacrifices = global.civic[global.civic.d_job] ? global.civic[global.civic.d_job].workers : 0;
            let desc = `<div class="has-text-caution">${loc("city_s_alter_sacrifice", [sacrifices])}</div>`;
            if (global.city.hasOwnProperty("s_alter") && global.city.s_alter.rage > 0) {
              desc = desc + `<div>${loc("city_s_alter_rage", [traits.cannibalize.vars()[0], timeFormat(global.city.s_alter.rage)])}</div>`;
            }
            if (global.city.hasOwnProperty("s_alter") && global.city.s_alter.regen > 0) {
              desc = desc + `<div>${loc("city_s_alter_regen", [traits.cannibalize.vars()[0], timeFormat(global.city.s_alter.regen)])}</div>`;
            }
            if (global.city.hasOwnProperty("s_alter") && global.city.s_alter.mind > 0) {
              desc = desc + `<div>${loc("city_s_alter_mind", [traits.cannibalize.vars()[0], timeFormat(global.city.s_alter.mind)])}</div>`;
            }
            if (global.city.hasOwnProperty("s_alter") && global.city.s_alter.mine > 0) {
              desc = desc + `<div>${loc("city_s_alter_mine", [traits.cannibalize.vars()[0], timeFormat(global.city.s_alter.mine)])}</div>`;
            }
            if (global.city.hasOwnProperty("s_alter") && global.city.s_alter.harvest > 0) {
              let jobType = global.race["evil"] && !global.race["soul_eater"] ? loc("job_reclaimer") : loc("job_lumberjack");
              desc = desc + `<div>${loc("city_s_alter_harvest", [traits.cannibalize.vars()[0], timeFormat(global.city.s_alter.harvest), jobType])}</div>`;
            }
            return desc;
          },
          action(args) {
            if (payCosts($(this)[0])) {
              if (global.city["s_alter"].count === 0) {
                incrementStruct("s_alter", "city");
              } else {
                let sacrifices = global.civic[global.civic.d_job].workers;
                if (sacrifices > 0) {
                  global.resource[global.race.species].amount--;
                  global.civic[global.civic.d_job].workers--;
                  global.stats.sac++;
                  blubberFill(1);
                  modRes("Food", Math.rand(250, 1e3), true);
                  let low = 300;
                  let high = 600;
                  if (global.tech["sacrifice"]) {
                    switch (global.tech["sacrifice"]) {
                      case 1:
                        low = 600;
                        high = 1500;
                        break;
                      case 2:
                        low = 1800;
                        high = 3600;
                        break;
                      case 3:
                        low = 5400;
                        high = 16200;
                        break;
                    }
                  }
                  switch (global.race["kindling_kindred"] || global.race["smoldering"] ? Math.rand(0, 4) : Math.rand(0, 5)) {
                    case 0:
                      global.city.s_alter.rage += Math.rand(low, high);
                      break;
                    case 1:
                      global.city.s_alter.mind += Math.rand(low, high);
                      break;
                    case 2:
                      global.city.s_alter.regen += Math.rand(low, high);
                      break;
                    case 3:
                      global.city.s_alter.mine += Math.rand(low, high);
                      break;
                    case 4:
                      global.city.s_alter.harvest += Math.rand(low, high);
                      break;
                  }
                }
              }
              return true;
            }
            return false;
          },
          struct() {
            return {
              d: {
                count: 0,
                rage: 0,
                mind: 0,
                regen: 0,
                mine: 0,
                harvest: 0
              },
              p: ["s_alter", "city"]
            };
          },
          touchlabel: loc(`tech_dist_sacrifice`)
        };
        return tKey(action, tName, region);
      }
      case "shrine": {
        let action = {
          id: `${region}-shrine`,
          title: loc("city_shrine"),
          desc() {
            return global.race["warlord"] ? loc("city_shrine_warlord_desc") : loc("city_shrine_desc");
          },
          category: "commercial",
          reqs: { theology: 2 },
          trait: ["magnificent"],
          not_trait: ["cataclysm", "lone_survivor"],
          region: "city",
          cost: {
            Money(offset) {
              return costMultiplier2("shrine", offset, 75, 1.32);
            },
            Stone(offset) {
              return costMultiplier2("shrine", offset, 65, 1.32);
            },
            Furs(offset) {
              return costMultiplier2("shrine", offset, 10, 1.32);
            },
            Copper(offset) {
              return costMultiplier2("shrine", offset, 15, 1.32);
            }
          },
          effect() {
            let morale = getShrineBonus("morale");
            let metal = getShrineBonus("metal");
            let know = getShrineBonus("know");
            let tax = getShrineBonus("tax");
            let desc = `<div class="has-text-special">${loc("city_shrine_effect")}</div>`;
            if (global.city["shrine"] && morale.active) {
              desc = desc + `<div>${loc("city_shrine_morale", [+morale.add.toFixed(1)])}</div>`;
            }
            if (global.city["shrine"] && metal.active) {
              desc = desc + `<div>${loc("city_shrine_metal", [+((metal.mult - 1) * 100).toFixed(2)])}</div>`;
            }
            if (global.city["shrine"] && know.active) {
              desc = desc + `<div>${loc("city_shrine_know", [(+know.add.toFixed(1)).toLocaleString()])}</div>`;
              desc = desc + `<div>${loc(global.race["warlord"] ? "city_shrine_warlord" : "city_shrine_know2", [+((know.mult - 1) * 100).toFixed(1)])}</div>`;
            }
            if (global.city["shrine"] && tax.active) {
              desc = desc + `<div>${loc("city_shrine_tax", [+((tax.mult - 1) * 100).toFixed(1)])}</div>`;
            }
            return desc;
          },
          action(args) {
            if (payCosts($(this)[0])) {
              incrementStruct("shrine", "city");
              if (global.city.calendar.moon > 0 && global.city.calendar.moon < 7) {
                global.city.shrine.morale++;
              } else if (global.city.calendar.moon > 7 && global.city.calendar.moon < 14) {
                global.city.shrine.metal++;
              } else if (global.city.calendar.moon > 14 && global.city.calendar.moon < 21) {
                global.city.shrine.know++;
              } else if (global.city.calendar.moon > 21) {
                global.city.shrine.tax++;
              } else {
                global.city.shrine.cycle++;
              }
              return true;
            }
            return false;
          },
          struct() {
            return {
              d: {
                count: 0,
                morale: 0,
                metal: 0,
                know: 0,
                tax: 0,
                cycle: 0
              },
              p: ["shrine", "city"]
            };
          }
        };
        return tKey(action, tName, region);
      }
      case "meditation": {
        let action = {
          id: `${region}-meditation`,
          title: loc("city_meditation"),
          desc: loc("city_meditation"),
          category: "commercial",
          reqs: { primitive: 3 },
          trait: ["calm"],
          not_trait: ["cataclysm", "lone_survivor"],
          region: "city",
          cost: {
            Money(offset) {
              return costMultiplier2("meditation", offset, 50, 1.2);
            },
            Stone(offset) {
              return costMultiplier2("meditation", offset, 25, 1.2);
            },
            Furs(offset) {
              return costMultiplier2("meditation", offset, 8, 1.2);
            }
          },
          effect() {
            let zen = global.resource.Zen.amount / (global.resource.Zen.amount + 5e3);
            return `<div>${loc(`city_meditation_effect`, [traits.calm.vars()[0]])}</div><div class="has-text-special">${loc(`city_meditation_effect2`, [2])}</div><div class="has-text-special">${loc(`city_meditation_effect3`, [1])}</div><div>${loc(`city_meditation_effect4`, [`${(zen * 100).toFixed(2)}%`])}</div>`;
          },
          action(args) {
            if (payCosts($(this)[0])) {
              incrementStruct("meditation", "city");
              global.resource.Zen.max += traits.calm.vars()[0];
              return true;
            }
            return false;
          },
          struct() {
            return {
              d: { count: 0 },
              p: ["meditation", "city"]
            };
          }
        };
        return tKey(action, tName, region);
      }
    }
  }
  function genus_condition(r, t) {
    t = t || "evo";
    let f = global.evolution["final"] || 0;
    return (global.tech[t] && global.tech[t] === r || global.evolution["gselect"]) && f < 100;
  }
  var raceList = [
    "human",
    "orc",
    "elven",
    "troll",
    "ogre",
    "cyclops",
    "kobold",
    "goblin",
    "gnome",
    "cath",
    "wolven",
    "vulpine",
    "centaur",
    "rhinotaur",
    "capybara",
    //'bearkin','porkenari','hedgeoken',
    "tortoisan",
    "gecko",
    "slitheryn",
    "arraak",
    "pterodacti",
    "dracnid",
    "sporgar",
    "shroomi",
    "moldling",
    "mantis",
    "scorpid",
    "antid",
    "entish",
    "cacti",
    "pinguicula",
    "sharkin",
    "octigoran",
    "dryad",
    "satyr",
    "phoenix",
    "salamander",
    "yeti",
    "wendigo",
    "tuskin",
    "kamel",
    "imp",
    "balorg",
    "seraph",
    "unicorn",
    "synth",
    "nano",
    "ghast",
    "shoggoth",
    "dwarf",
    "raccoon",
    "lichen",
    "wyvern",
    "beholder",
    "djinn",
    "narwhal",
    "bombardier",
    "nephilim",
    "custom",
    "hybrid"
  ];
  raceList.forEach(function(race) {
    if (!["custom", "hybrid"].includes(race) || race === "custom" && global.custom.hasOwnProperty("race0") || race === "hybrid" && global.custom.hasOwnProperty("race1")) {
      if (race === "hybrid" && global.custom.race1.genus !== "hybrid") {
        global.custom.race1.hybrid = [global.custom.race1.genus, global.custom.race1.genus === "humanoid" ? "small" : "humanoid"];
        global.custom.race1.genus = "hybrid";
      } else if (race === "custom" && global.custom.race0.genus === "hybrid") {
        global.custom.race0.genus = "humanoid";
      }
      actions.evolution[race] = {
        id: `evolution-${race}`,
        title() {
          return races[race].name;
        },
        desc() {
          return `${loc("evo_evolve")} ${races[race].name}`;
        },
        reqs: { evo: 7 },
        grant: ["evo", 8],
        condition() {
          let typeList = global.stats.achieve["godslayer"] && races[race].type === "hybrid" ? races[race].hybrid : [races[race].type];
          let typeCheck = false;
          typeList.forEach(function(t) {
            if (global.tech[`evo_${t}`] >= 2) {
              typeCheck = true;
            }
          });
          return (global.race.seeded || global.stats.achieve["mass_extinction"] && global.stats.achieve["mass_extinction"].l >= 1 || global.stats.achieve[`extinct_${race}`] && global.stats.achieve[`extinct_${race}`].l >= 1) && typeCheck && global.evolution.final === 100 && !global.race["evoFinalMenu"];
        },
        cost: {
          RNA() {
            return 320;
          },
          DNA() {
            return 320;
          }
        },
        race: true,
        effect() {
          let raceDesc = typeof races[race].desc === "string" ? races[race].desc : races[race].desc();
          return `${raceDesc} ${loc(`evo_complete`)}`;
        },
        action(args) {
          if (global.race["warlord"] && ["custom", "hybrid", "nano"].includes(race)) {
            return false;
          }
          if (payCosts($(this)[0])) {
            if (["synth", "custom"].includes(race)) {
              return evoExtraState(race);
            } else {
              global.race.species = race;
              sentience();
            }
            ;
          }
          return false;
        },
        queue_complete() {
          return global.tech["evo"] && global.tech.evo === 7 ? 1 : 0;
        },
        emblem() {
          return format_emblem(`extinct_${race}`);
        }
      };
    }
  });
  if (Object.keys(global.stats.synth).length > 1) {
    let synthList = deepClone(raceList.filter((r) => !["nano", "synth"].includes(r)));
    synthList.forEach((race) => actions.evolution[`s-${race}`] = {
      id: `evolution-s-${race}`,
      title() {
        return races[race].name;
      },
      desc() {
        return `${loc("evo_imitate")} ${races[race].name}`;
      },
      reqs: { evo: 8 },
      grant: ["evo", 9],
      condition() {
        if (race === "custom" && !global.custom.hasOwnProperty("race0") || race === "hybrid" && !global.custom.hasOwnProperty("race1")) {
          return false;
        }
        return (global.stats.synth[race] || global["beta"]) && global.race["evoFinalMenu"];
      },
      cost: {},
      wiki: false,
      race: true,
      effect() {
        return loc(`evo_imitate_race`, [races[race].name]);
      },
      action(args) {
        if (global.stats.synth[race] || global["beta"]) {
          global.race.species = global.race["evoFinalMenu"];
          global.race["srace"] = race;
          sentience();
        }
        return false;
      },
      queue_complete() {
        return global.tech["evo"] && global.tech.evo === 8 ? 1 : 0;
      }
    });
  }
  var challengeList = {
    "plasmid": "no_plasmid",
    "mastery": "weak_mastery",
    "trade": "no_trade",
    "craft": "no_craft",
    "crispr": "no_crispr",
    "nerfed": "nerfed",
    "badgenes": "badgenes"
  };
  Object.keys(challengeList).forEach((challenge) => actions.evolution[challenge] = {
    id: `evolution-${challenge}`,
    title: loc(`evo_challenge_${challenge}`),
    desc: loc(`evo_challenge_${challenge}`),
    condition() {
      return global.evolution.hasOwnProperty(challenge);
    },
    cost: {
      DNA() {
        return 10;
      }
    },
    challenge: true,
    effect() {
      return challengeEffect(challenge);
    },
    action(args) {
      if (payCosts($(this)[0])) {
        if (global.race[challengeList[challenge]]) {
          delete global.race[challengeList[challenge]];
          $(`#${$(this)[0].id}`).removeClass("hl");
          if (global.race["truepath"] || global.race["lone_survivor"]) {
            delete global.race["nerfed"];
            delete global.race["badgenes"];
          }
          ["junker", "cataclysm", "banana", "truepath", "lone_survivor", "fasting", "warlord"].forEach(function(s) {
            delete global.race[s];
            $(`#evolution-${s}`).removeClass("hl");
          });
        } else {
          global.race[challengeList[challenge]] = 1;
          $(`#${$(this)[0].id}`).addClass("hl");
        }
        setChallengeScreen();
        challengeIcon();
      }
      return false;
    },
    highlight() {
      return global.race[challengeList[challenge]] ? true : false;
    },
    queue_complete() {
      return 0;
    }
  });
  var advancedChallengeList = {
    "joyless": { t: "c", e: "joyless" },
    "steelen": { t: "c", e: "steelen" },
    "decay": { t: "c", e: "dissipated" },
    "emfield": { t: "c", e: "technophobe" },
    "inflation": { t: "c", e: "wheelbarrow" },
    "sludge": { t: "c", e: "extinct_sludge" },
    "ultra_sludge": { t: "c", e: "extinct_ultra_sludge" },
    "orbit_decay": { t: "c", e: "lamentis" },
    //'nonstandard': {t: 'c', e: 'anathema' },
    "gravity_well": { t: "c", e: "escape_velocity" },
    "witch_hunter": { t: "c", e: "soul_sponge" },
    //'storage_wars': {t: 'c', e: '???' },
    "simulation": { t: "c", e: "thereisnospoon" },
    "junker": { t: "s", e: "extinct_junker" },
    "cataclysm": { t: "s", e: "iron_will" },
    "banana": { t: "s", e: "banana" },
    "truepath": { t: "s", e: "pathfinder" },
    "lone_survivor": { t: "s", e: "adam_eve" },
    "fasting": { t: "s", e: "endless_hunger" },
    "warlord": { t: "s", e: "what_is_best" }
  };
  Object.keys(advancedChallengeList).forEach((challenge) => actions.evolution[challenge] = {
    id: `evolution-${challenge}`,
    title: loc(`evo_challenge_${challenge}`),
    desc() {
      let desc = "";
      if (global.race.universe === "micro") {
        desc = desc + `<div class="has-text-danger">${loc("evo_challenge_micro_warn")}</div>`;
      }
      desc = desc + `<div>${loc(`evo_challenge_${challenge}_desc`)}</div>`;
      if (["sludge", "junker", "ultra_sludge"].includes(challenge)) {
        desc = desc + `<div class="has-text-danger">${loc("evo_start")}</div>`;
      }
      return desc;
    },
    condition() {
      return global.evolution.hasOwnProperty(challenge);
    },
    cost: {
      DNA() {
        return advancedChallengeList[challenge].t === "c" ? 25 : 50;
      }
    },
    challenge: true,
    effect() {
      return challengeEffect(challenge);
    },
    action(args) {
      if (payCosts($(this)[0])) {
        if (advancedChallengeList[challenge].t === "c") {
          setChallenge(challenge);
        } else {
          setScenario(challenge);
        }
      }
      return false;
    },
    emblem() {
      return format_emblem(advancedChallengeList[challenge].e);
    },
    highlight() {
      return global.race[challenge] ? true : false;
    },
    queue_complete() {
      return 0;
    }
  });
  actions.evolution["bunker"] = {
    id: "evolution-bunker",
    title: loc("evo_bunker"),
    desc() {
      return `<div>${loc("evo_bunker")}</div><div class="has-text-special">${loc("evo_challenge")}</div>`;
    },
    reqs: { evo: 6 },
    grant: ["evo_challenge", 1],
    condition() {
      return global.genes["challenge"] && global.evolution["final"] === 100 && !global.race["evoFinalMenu"];
    },
    cost: {
      DNA() {
        return 10;
      }
    },
    effect: loc("evo_bunker_effect"),
    action(args) {
      if (payCosts($(this)[0])) {
        return true;
      }
      return false;
    },
    queue_complete() {
      return global.tech["evo_challenge"] ? 0 : 1;
    },
    flair: loc("evo_bunker_flair")
  };
  function drawEvolution() {
    if (!global.settings.tabLoad && global.settings.civTabs !== 0) {
      return;
    }
    if (global.race.universe === "bigbang" || global.race.seeded && !global.race["chose"]) {
      return;
    }
    if (global.tech["evo_challenge"]) {
      let list = $(`#evolution .evolving`).nextAll();
      Object.values(list).forEach(function(elm) {
        clearElement($(elm), true);
      });
      clearElement($(`#evolution .evolving`), true);
    }
    Object.keys(actions.evolution).forEach(function(evo) {
      if (!actions.evolution[evo]["challenge"]) {
        removeAction(actions.evolution[evo].id);
        var isMet = true;
        if (actions.evolution[evo].hasOwnProperty("reqs")) {
          Object.keys(actions.evolution[evo].reqs).forEach(function(req) {
            if (!global.tech[req] || global.tech[req] < actions.evolution[evo].reqs[req]) {
              isMet = false;
            }
          });
        }
        if (isMet) {
          addAction("evolution", evo);
        }
      }
    });
    if (!global.race["evoFinalMenu"]) {
      if (global.tech["evo"] && global.tech.evo >= 2) {
        evoProgress();
      }
      if (global.tech["evo_challenge"]) {
        setChallengeScreen();
      }
    }
  }
  function challengeEffect(c) {
    switch (c) {
      case "nerfed":
        let nVal = global.race.universe === "antimatter" ? [`20%`, `50%`, `50%`, `33%`] : [`50%`, `20%`, `50%`, `33%`];
        return loc(`evo_challenge_${c}_effect`, nVal);
      case "badgenes":
        return loc(`evo_challenge_${c}_effect`, [1, 2]);
      case "orbit_decay": {
        if (calc_mastery() >= 100) {
          return `<div>${loc("evo_challenge_orbit_decay_effect", [5e3])}</div><div class="has-text-caution">${loc("evo_challenge_scenario_failwarn")}</div>`;
        } else {
          return `<div>${loc("evo_challenge_orbit_decay_effect", [5e3])}</div><div class="has-text-caution">${loc("evo_challenge_scenario_failwarn")}</div><div class="has-text-danger">${loc("evo_challenge_scenario_warn")}</div>`;
        }
      }
      case "junker": {
        return global.city.biome === "hellscape" && global.race.universe !== "evil" ? `<div>${loc("evo_challenge_junker_effect")}</div><div class="has-text-special">${loc("evo_warn_unwise")}</div>` : loc("evo_challenge_junker_effect");
      }
      case "cataclysm": {
        if (calc_mastery() >= 50) {
          return `<div>${loc("evo_challenge_cataclysm_effect")}</div><div class="has-text-caution">${loc("evo_challenge_cataclysm_warn")}</div>`;
        } else {
          return `<div>${loc("evo_challenge_cataclysm_effect")}</div><div class="has-text-danger">${loc("evo_challenge_scenario_warn")}</div>`;
        }
      }
      case "gravity_well": {
        let addedFlag = !global.race.hasOwnProperty("gravity_well");
        if (addedFlag) {
          global.race["gravity_well"] = 1;
        }
        let crates = 36 * 40;
        let containers = 36 * 40;
        if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 1) {
          crates *= 1.5;
          if (global.stats.achieve.pathfinder.l >= 2) {
            containers *= 1.5;
          }
        }
        crates += 10 * 20;
        containers += 10 * 20;
        if (global.tech["container"]) {
          let real_tech = global.tech["container"];
          global.tech["container"] = 4;
          crates *= crateValue();
          global.tech["container"] = real_tech;
        } else {
          global.tech["container"] = 4;
          crates *= crateValue();
          delete global.tech["container"];
        }
        if (global.tech["steel_container"]) {
          let real_tech = global.tech["steel_container"];
          global.tech["steel_container"] = 3;
          containers *= containerValue();
          global.tech["steel_container"] = real_tech;
        } else {
          global.tech["steel_container"] = 3;
          containers *= containerValue();
          delete global.tech["steel_container"];
        }
        let warehouses = 40;
        let coeff = 50;
        let cement_name = global.race["flier"] ? "Stone" : "Cement";
        let max_cement = crates + containers + storageMultipler(warehouses * coeff * actions.city.shed.val(cement_name));
        let num_fuel_depot = 0;
        let offset = global.city?.oil_depot?.count ?? 0;
        while (true) {
          let costs2 = adjustCosts(actions.city.oil_depot, num_fuel_depot - offset);
          let cement_cost = costs2[cement_name](num_fuel_depot - offset);
          if (cement_cost > max_cement) {
            break;
          }
          num_fuel_depot++;
        }
        let max_derrick = max_cement + storageMultipler(warehouses * coeff * actions.city.shed.val("Steel"));
        let num_oil_derrick = 0;
        offset = global.city?.oil_well?.count ?? 0;
        while (true) {
          let costs2 = adjustCosts(actions.city.oil_well, num_oil_derrick - offset);
          let cement_cost = costs2[cement_name](num_oil_derrick - offset);
          let steel_cost = costs2["Steel"](num_oil_derrick - offset);
          if (cement_cost + steel_cost > max_derrick) {
            break;
          }
          num_oil_derrick++;
        }
        let num_propellant_depot = 0;
        let unified = global.race["unified"] ? 1.5 : 1;
        let max_oil = spatialReasoning(1e3 * unified * num_fuel_depot + 500 * num_oil_derrick + 1250 * unified * num_propellant_depot);
        offset = global.space?.propellant_depot?.count ?? 0;
        while (true) {
          let costs2 = adjustCosts(actions.space.spc_home.propellant_depot, num_propellant_depot - offset);
          let oil_cost2 = costs2["Oil"](num_propellant_depot - offset);
          if (oil_cost2 > max_oil) {
            break;
          }
          num_propellant_depot++;
          max_oil = spatialReasoning(1e3 * unified * num_fuel_depot + 500 * num_oil_derrick + 1250 * unified * num_propellant_depot);
        }
        let costs = adjustCosts(actions.space.spc_moon.moon_mission);
        let oil_cost = costs["Oil"]();
        let show_warning = max_oil < oil_cost;
        if (addedFlag) {
          delete global.race["gravity_well"];
        }
        if (show_warning) {
          return `<div>${loc("evo_challenge_gravity_well_effect")}</div><div class="has-text-danger">${loc("evo_challenge_gravity_well_warn")}</div>`;
        }
        break;
      }
      case "warlord": {
        if (global.prestige.Artifact === 0) {
          return `<div>${loc("evo_challenge_warlord_effect")}</div><div class="has-text-danger">${loc("evo_challenge_warlord_warn", [1, loc(`resource_Artifact_name`)])}</div>`;
        }
        break;
      }
    }
    return loc(`evo_challenge_${c}_effect`);
  }
  function templeEffect() {
    let desc;
    if (global.race.universe === "antimatter" || global.race["no_plasmid"]) {
      let faith = faithBonus(100);
      faith = +faith.toFixed(3);
      desc = `<div>${loc("city_temple_effect1", [faith])}</div>`;
      if (global.race.universe === "antimatter") {
        let temple = 6;
        if (global.genes["ancients"] && global.genes["ancients"] >= 2 && global.civic.priest.display) {
          let priest = global.genes["ancients"] >= 5 ? 0.12 : global.genes["ancients"] >= 3 ? 0.1 : 0.08;
          if (global.race["high_pop"]) {
            priest = highPopAdjust(priest);
          }
          temple += priest * workerScale(global.civic.priest.workers, "priest");
        }
        desc += `<div>${loc("city_temple_effect5", [temple.toFixed(2)])}</div>`;
      }
    } else {
      let plasmid = templePlasmidBonus(100);
      plasmid = +plasmid.toFixed(3);
      desc = `<div>${loc("city_temple_effect2", [plasmid])}</div>`;
    }
    if (global.tech["fanaticism"] && global.tech["fanaticism"] >= 3) {
      desc = desc + `<div>${loc("city_temple_effect3")}</div>`;
    }
    if (global.tech["anthropology"] && global.tech["anthropology"] >= 4) {
      desc = desc + `<div>${global.race["truepath"] ? loc("city_temple_effect_tp", [2, 25]) : loc("city_temple_effect4")}</div>`;
    }
    return desc;
  }
  function casino_vault() {
    let vault = global.tech["gambling"] >= 3 ? 6e4 : 4e4;
    if (global.tech["gambling"] >= 5) {
      vault += global.tech["gambling"] >= 6 ? 24e4 : 6e4;
    }
    vault = spatialReasoning(vault);
    if (global.race["gambler"]) {
      vault *= 1 + traits.gambler.vars()[0] * global.race["gambler"] / 100;
    }
    if (global.tech["world_control"]) {
      vault *= 1.25;
    }
    if (global.race["truepath"]) {
      vault *= 1.5;
    }
    if (global.tech["stock_exchange"] && global.tech["gambling"] >= 4) {
      vault *= 1 + global.tech["stock_exchange"] * 0.05;
    }
    if (global.race["inflation"]) {
      vault *= 1 + global.race.inflation / 100;
    }
    if (global.tech["isolation"]) {
      vault *= 5.5;
    }
    if (global.race["warlord"]) {
      let absorb = global.race?.absorbed?.length || 1;
      vault *= 1 + absorb / 10;
      if (global.portal["hell_casino"] && global.portal.hell_casino.rank > 1) {
        let rank = global.portal.hell_casino.rank - 1;
        vault *= 1 + rank * 0.1;
      }
    }
    return vault;
  }
  function casinoEarn() {
    let cash = Math.log2(1 + global.resource[global.race.species].amount) * 2.5;
    if (global.race["gambler"]) {
      cash *= 1 + traits.gambler.vars()[0] * global.race["gambler"] / 100;
    }
    if (global.tech["gambling"] && global.tech["gambling"] >= 2) {
      cash *= global.tech.gambling >= 5 ? 2 : 1.5;
      if (global.tech["stock_exchange"] && global.tech["gambling"] >= 4) {
        cash *= 1 + global.tech["stock_exchange"] * 0.01;
      }
    }
    if (global.civic.govern.type === "corpocracy") {
      cash *= 1 + govEffect.corpocracy()[0] / 100;
    }
    if (global.civic.govern.type === "socialist") {
      cash *= 1 - govEffect.socialist()[3] / 100;
    }
    if (global.race["inflation"]) {
      cash *= 1 + global.race.inflation / 1250;
    }
    if (global.tech["isolation"]) {
      cash *= 1.25;
      if (global.tech["iso_gambling"]) {
        cash *= 1 + workerScale(global.civic.banker.workers, "banker") * 0.05;
      }
    }
    if (global.race["warlord"] && global.race["befuddle"]) {
      cash *= 1 + traits.befuddle.vars()[0] / 100;
    }
    cash *= production("psychic_cash");
    let racVal = govActive("racketeer", 1);
    if (racVal) {
      cash *= 1 + racVal / 100;
    }
    if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.casino) {
      cash *= 1.35;
    }
    if (global.race["warlord"] && global.portal["hell_casino"] && global.portal.hell_casino.rank > 1) {
      let rank = global.portal.hell_casino.rank - 1;
      cash *= 1 + rank * 0.36;
    }
    return cash;
  }
  function casinoEffect() {
    let money = Math.round(casino_vault());
    let joy = global.tech["theatre"] && !global.race["joyless"] ? `<div>${loc("plus_max_resource", [jobScale(global.race["warlord"] ? 3 : 1), loc(`job_entertainer`)])}</div>` : "";
    let banker = global.race["orbit_decayed"] || global.tech["isolation"] || global.race["warlord"] ? `<div>${loc("plus_max_resource", [jobScale(1), loc("banker_name")])}</div>` : "";
    let desc = `<div>${loc("plus_max_resource", [`$${money.toLocaleString()}`, loc("resource_Money_name")])}</div>${joy}${banker}<div>${loc("city_max_morale", [1])}</div>`;
    let cash = +casinoEarn().toFixed(2);
    desc = desc + `<div>${loc("tech_casino_effect2", [cash])}</div>`;
    return desc;
  }
  function evolveCosts(molecule, base, mult, offset) {
    let count = (global.evolution.hasOwnProperty(molecule) ? global.evolution[molecule].count : 0) + (offset || 0);
    return count * mult + base;
  }
  function setChallenge(challenge) {
    if (global.race[challenge]) {
      delete global.race[challenge];
      $(`#evolution-${challenge}`).removeClass("hl");
      if (challenge === "sludge") {
        Object.keys(races).forEach(function(r) {
          if (r !== "junker" && r !== "sludge" && r !== "ultra_sludge") {
            $(`#evolution-${r}`).removeClass("is-hidden");
          }
        });
      }
    } else {
      global.race[challenge] = 1;
      $(`#evolution-${challenge}`).addClass("hl");
      if (challenge === "sludge" || challenge === "ultra_sludge") {
        Object.keys(races).forEach(function(r) {
          if (r !== "junker" && r !== "sludge" && r !== "ultra_sludge") {
            $(`#evolution-${r}`).addClass("is-hidden");
          }
        });
        if (global.race["junker"]) {
          delete global.race["junker"];
        }
        if (challenge !== "sludge") {
          delete global.race["sludge"];
        }
        if (challenge !== "ultra_sludge") {
          delete global.race["ultra_sludge"];
        }
      }
      if (challenge === "orbit_decay") {
        delete global.race["cataclysm"];
        delete global.race["warlord"];
        if (global.race["lone_survivor"]) {
          delete global.race["lone_survivor"];
          ["nerfed", "badgenes"].forEach(function(gene) {
            delete global.race[challengeList[gene]];
          });
        }
      }
    }
    setChallengeScreen();
    challengeIcon();
  }
  function setScenario(scenario) {
    if (!global.race["sludge"]) {
      Object.keys(races).forEach(function(r) {
        if (r !== "junker" && r !== "sludge" && r !== "ultra_sludge") {
          $(`#evolution-${r}`).removeClass("is-hidden");
        }
      });
    }
    if (global.race[scenario]) {
      delete global.race[scenario];
      $(`#evolution-${scenario}`).removeClass("hl");
      ["nerfed", "badgenes"].forEach(function(gene) {
        delete global.race[challengeList[gene]];
      });
    } else {
      ["junker", "cataclysm", "banana", "truepath", "lone_survivor", "fasting", "warlord"].forEach(function(s) {
        delete global.race[s];
        $(`#evolution-${s}`).removeClass("hl");
      });
      global.race[scenario] = 1;
      $(`#evolution-${scenario}`).addClass("hl");
      if (scenario === "junker") {
        Object.keys(races).forEach(function(r) {
          if (r !== "junker" && r !== "sludge" && r !== "ultra_sludge") {
            $(`#evolution-${r}`).addClass("is-hidden");
          }
        });
        if (global.race["sludge"]) {
          delete global.race["sludge"];
        }
        if (global.race["ultra_sludge"]) {
          delete global.race["ultra_sludge"];
        }
      }
      if (scenario === "cataclysm" || scenario === "lone_survivor" || scenario === "warlord") {
        delete global.race["orbit_decay"];
      }
      if (scenario === "truepath" || scenario === "lone_survivor") {
        global.race["nerfed"] = 1;
        ["crispr", "plasmid", "mastery"].forEach(function(gene) {
          delete global.race[challengeList[gene]];
        });
      } else {
        ["nerfed", "badgenes"].forEach(function(gene) {
          delete global.race[challengeList[gene]];
        });
        if (global.race.universe === "antimatter") {
          global.race["weak_mastery"] = 1;
          if (!$(`#evolution-mastery`).hasClass("hl")) {
            $(`#evolution-mastery`).addClass("hl");
          }
        } else {
          global.race["no_plasmid"] = 1;
          if (!$(`#evolution-plasmid`).hasClass("hl")) {
            $(`#evolution-plasmid`).addClass("hl");
          }
        }
      }
      let genes = scenario === "truepath" || scenario === "lone_survivor" ? ["badgenes", "trade", "craft"] : ["crispr", "trade", "craft"];
      for (let i = 0; i < genes.length; i++) {
        global.race[challengeList[genes[i]]] = 1;
        if (!$(`#evolution-${genes[i]}`).hasClass("hl")) {
          $(`#evolution-${genes[i]}`).addClass("hl");
        }
      }
    }
    setChallengeScreen();
    challengeIcon();
  }
  function BHStorageMulti(val) {
    if (global.stats.achieve["blackhole"]) {
      val *= 1 + global.stats.achieve.blackhole.l * 0.05;
    }
    return Math.round(val);
  }
  function storageMultipler(scale = 1, wiki = false) {
    let multiplier = ((global.tech["storage"] ?? 1) - 1) * 1.25 + 1;
    if (global.tech["storage"] >= 3) {
      multiplier *= global.tech["storage"] >= 4 ? 3 : 1.5;
    }
    if (global.race["pack_rat"]) {
      multiplier *= 1 + traits.pack_rat.vars()[1] / 100;
    }
    let fathom = fathomCheck("kobold");
    if (fathom > 0) {
      multiplier *= 1 + traits.pack_rat.vars(1)[1] / 100 * fathom;
    }
    if (global.tech["storage"] >= 6) {
      multiplier *= 1 + global.tech["supercollider"] / 20;
    }
    if (global.tech["tp_depot"]) {
      multiplier *= 1 + global.tech["tp_depot"] / 20;
    }
    if (global.tech["shelving"] && global.tech.shelving >= 3) {
      multiplier *= 1.5;
    }
    if (global.stats.achieve["blackhole"]) {
      multiplier *= 1 + global.stats.achieve.blackhole.l * 0.05;
    }
    multiplier *= global.tech["world_control"] ? 3 : 1;
    if (global.race["ascended"]) {
      multiplier *= 1.1;
    }
    if (global.blood["hoarder"]) {
      multiplier *= 1 + global.blood["hoarder"] / 100;
    }
    if (global.tech["storage"] >= 7 && global.interstellar["cargo_yard"]) {
      multiplier *= 1 + global.interstellar["cargo_yard"].count * get_qlevel(wiki) / 100;
    }
    return multiplier * scale;
  }
  function checkCityRequirements(action) {
    if ((global.race["kindling_kindred"] || global.race["smoldering"]) && action === "lumber") {
      return false;
    } else if ((global.race["kindling_kindred"] || global.race["smoldering"]) && action === "stone") {
      return true;
    }
    let c_path = global.race["truepath"] ? "truepath" : "standard";
    if (actions.city[action].hasOwnProperty("path") && !actions.city[action].path.includes(c_path)) {
      return false;
    }
    var isMet = true;
    Object.keys(actions.city[action].reqs).forEach(function(req) {
      if (!global.tech[req] || global.tech[req] < actions.city[action].reqs[req]) {
        isMet = false;
      }
    });
    return isMet;
  }
  function checkTechPath(tech) {
    let path = global.race["truepath"] ? "truepath" : "standard";
    if (!techPath[path].includes(actions.tech[tech].era) && !actions.tech[tech].hasOwnProperty("path") || actions.tech[tech].hasOwnProperty("path") && !actions.tech[tech].path.includes(path)) {
      return false;
    }
    return true;
  }
  function skipRequirement(req, rank) {
    if (global.race["flier"] && req === "cement") {
      return true;
    }
    return false;
  }
  function checkTechRequirements(tech, predList) {
    let isMet = true;
    let precog = false;
    let failChecks = {};
    Object.keys(actions.tech[tech].reqs).forEach(function(req) {
      if (skipRequirement(req, global.tech[req] || 0)) {
        return;
      }
      if (!global.tech[req] || global.tech[req] < actions.tech[tech].reqs[req]) {
        isMet = false;
        failChecks[req] = actions.tech[tech].reqs[req];
      }
    });
    if (predList && typeof predList === "object" && global.genes.hasOwnProperty("queue") && global.genes.queue >= 3) {
      precog = true;
      global.r_queue.queue.forEach(function(q) {
        if (checkTechRequirements(q.type, false)) {
          predList[actions[q.action][q.type].grant[0]] = { v: actions[q.action][q.type].grant[1], a: q.type };
        }
      });
      Object.keys(failChecks).forEach(function(req) {
        let cTech = global.tech[req] || 0;
        if (skipRequirement(req, global.tech[req] || 0)) {
          return;
        }
        if (!predList[req] || predList[req].v < actions.tech[tech].reqs[req] || predList[req].v > cTech + 1) {
          precog = false;
        }
      });
    }
    if ((isMet || precog) && (!global.tech[actions.tech[tech].grant[0]] || global.tech[actions.tech[tech].grant[0]] < actions.tech[tech].grant[1])) {
      return isMet ? "ok" : "precog";
    }
    return false;
  }
  function checkTechQualifications(c_action, type) {
    if (c_action["condition"] && !c_action.condition()) {
      return false;
    }
    if (c_action["not_trait"]) {
      for (let i = 0; i < c_action.not_trait.length; i++) {
        if (global.race[c_action.not_trait[i]]) {
          return false;
        }
      }
    }
    if (c_action["trait"]) {
      for (let i = 0; i < c_action.trait.length; i++) {
        if (!global.race[c_action.trait[i]]) {
          return false;
        }
      }
    }
    if (c_action["not_gene"]) {
      for (let i = 0; i < c_action.not_gene.length; i++) {
        if (global.genes[c_action.not_gene[i]]) {
          return false;
        }
      }
    }
    if (c_action["gene"]) {
      for (let i = 0; i < c_action.gene.length; i++) {
        if (!global.genes[c_action.gene[i]]) {
          return false;
        }
      }
    }
    if (c_action["not_tech"]) {
      for (let i = 0; i < c_action.not_tech.length; i++) {
        if (global.tech[c_action.not_tech[i]]) {
          return false;
        }
      }
    }
    return true;
  }
  function checkOldTech(tech) {
    let tch = actions.tech[tech].grant[0];
    if (global.tech[tch] && global.tech[tch] >= actions.tech[tech].grant[1]) {
      switch (tech) {
        case "fanaticism":
          return Boolean(global.tech["fanaticism"]);
        case "anthropology":
          return Boolean(global.tech["anthropology"]);
        case "deify":
          return Boolean(global.tech["ancient_deify"]);
        case "study":
          return Boolean(global.tech["ancient_study"]);
        case "isolation_protocol":
          return Boolean(global.tech["isolation"]);
        case "focus_cure":
          return Boolean(global.tech["focus_cure"]);
        case "vax_strat1":
          return Boolean(global.tech["vax_p"]);
        case "vax_strat2":
          return Boolean(global.tech["vax_f"]);
        case "vax_strat3":
          return Boolean(global.tech["vax_s"]);
        case "vax_strat4":
          return Boolean(global.tech["vax_c"]);
        default:
          return true;
      }
    }
    return false;
  }
  function checkPowerRequirements(c_action) {
    let isMet = true;
    if (c_action["power_reqs"]) {
      Object.keys(c_action.power_reqs).forEach(function(req) {
        if (!global.tech[req] || global.tech[req] < c_action.power_reqs[req]) {
          isMet = false;
        }
      });
    }
    return isMet;
  }
  function registerTech(action) {
    let tech = actions.tech[action].grant[0];
    if (!global.tech[tech]) {
      global.tech[tech] = 0;
    }
    addAction("tech", action);
  }
  function gainTech(action) {
    let tech = actions.tech[action].grant[0];
    global.tech[tech] = actions.tech[action].grant[1];
    drawCity();
    drawTech();
    renderSpace();
    renderFortress();
    renderTauCeti();
    renderEdenic();
  }
  var cLabels = global.settings["cLabels"];
  function drawCity() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 1 || global.settings.spaceTabs !== 0)) {
      return;
    }
    if (!global.settings.showCity) {
      return;
    }
    let city_buildings = {};
    Object.keys(actions.city).forEach(function(city_name) {
      removeAction(actions.city[city_name].id);
      if (!checkCityRequirements(city_name))
        return;
      let action = actions.city[city_name];
      let category = "category" in action ? action.category : "utility";
      if (!(category in city_buildings)) {
        city_buildings[category] = [];
      }
      if (global.settings["cLabels"]) {
        city_buildings[category].push(city_name);
      } else {
        addAction("city", city_name);
      }
    });
    let city_categories = [
      "outskirts",
      "residential",
      "commercial",
      "science",
      "military",
      "trade",
      "industrial",
      "utility"
    ];
    city_categories.forEach(function(category) {
      clearElement($(`#city-dist-${category}`), true);
      if (global.settings["cLabels"]) {
        if (!(category in city_buildings))
          return;
        $(`<div id="city-dist-${category}" class="city"></div>`).appendTo("#city").append(`<div><h3 class="name has-text-warning">${loc(`city_dist_${category}`)}</h3></div>`);
        city_buildings[category].forEach(function(city_name) {
          addAction("city", city_name);
        });
        popover(
          `dist-${category}`,
          function() {
            return loc(`city_dist_${category}_desc`);
          },
          {
            elm: `#city-dist-${category} h3`,
            classes: `has-background-light has-text-dark`
          }
        );
      }
    });
    cLabels = global.settings["cLabels"];
  }
  function drawTech() {
    if (!global.settings.tabLoad && global.settings.civTabs !== 3) {
      return;
    }
    let techs2 = {};
    let old_techs = {};
    let new_techs = {};
    let tech_categories = [];
    let old_categories = [];
    let all_categories = [];
    ["primitive", "civilized", "discovery", "industrialized", "globalized", "early_space", "deep_space", "interstellar", "intergalactic"].forEach(function(era) {
      new_techs[era] = [];
    });
    const tp_era = {
      interstellar: "solar"
    };
    let preReq = {};
    Object.keys(actions.tech).forEach(function(tech_name) {
      if (!checkTechPath(tech_name)) {
        return;
      }
      removeAction(actions.tech[tech_name].id);
      let isOld = checkOldTech(tech_name);
      let action = actions.tech[tech_name];
      let category = "category" in action ? action.category : "research";
      if (!isOld && tech_categories.indexOf(category) === -1) {
        tech_categories.push(category);
      }
      if (isOld && old_categories.indexOf(category) === -1) {
        old_categories.push(category);
      }
      if (all_categories.indexOf(category) === -1) {
        all_categories.push(category);
      }
      if (isOld === true) {
        if (!(category in old_techs)) {
          old_techs[category] = [];
        }
        old_techs[category].push(tech_name);
      } else {
        let c_action = actions["tech"][tech_name];
        if (!checkTechQualifications(c_action, tech_name)) {
          return;
        }
        let techAvail = checkTechRequirements(tech_name, preReq);
        if (!techAvail) {
          return;
        }
        if (!(category in techs2)) {
          techs2[category] = [];
        }
        let era = global.race["truepath"] && tp_era[c_action.era] ? tp_era[c_action.era] : c_action.era;
        if (!new_techs.hasOwnProperty(era)) {
          new_techs[era] = [];
        }
        new_techs[era].push({ t: tech_name, p: techAvail === "precog" ? true : false });
      }
    });
    clearElement($(`#tech`));
    Object.keys(new_techs).forEach(function(era) {
      if (new_techs[era].length > 0) {
        $(`#tech`).append(`<div><h3 class="name has-text-warning">${loc(`tech_era_${era}`)}</h3></div>`);
        new_techs[era].sort(function(a, b) {
          if (actions.tech[a.t].cost.Knowledge == void 0) {
            return -1;
          }
          if (actions.tech[b.t].cost.Knowledge == void 0) {
            return 1;
          }
          if (actions.tech[a.t].cost.Omniscience != void 0 && actions.tech[b.t].cost.Omniscience != void 0) {
            return actions.tech[a.t].cost.Omniscience() > actions.tech[b.t].cost.Omniscience() ? 1 : -1;
          }
          return actions.tech[a.t].cost.Knowledge() > actions.tech[b.t].cost.Knowledge() ? 1 : -1;
        });
        new_techs[era].forEach(function(tech) {
          addAction("tech", tech.t, false, tech.p ? preReq : false);
        });
      }
    });
    all_categories.forEach(function(category) {
      clearElement($(`#tech-dist-${category}`), true);
      clearElement($(`#tech-dist-old-${category}`), true);
    });
    old_categories.forEach(function(category) {
      if (!(category in old_techs)) {
        return;
      }
      $(`<div id="tech-dist-old-${category}" class="tech"></div>`).appendTo("#oldTech").append(`<div><h3 class="name has-text-warning">${loc(`tech_dist_${category}`)}</h3></div>`);
      let trick = trickOrTreat(4, 12, false);
      if (trick.length > 0 && category === "science") {
        $(`#tech-dist-old-science h3`).append(trick);
      }
      old_techs[category].forEach(function(tech_name) {
        addAction("tech", tech_name, true, false);
      });
    });
  }
  function addAction(action, type, old, prediction) {
    let c_action = actions[action][type];
    setAction(c_action, action, type, old, prediction);
  }
  function setAction(c_action, action, type, old, prediction) {
    if (checkTechQualifications(c_action, type) === false) {
      return;
    }
    let tab = action;
    if (action === "outerSol") {
      action = "space";
    }
    if (c_action["region"]) {
      action = c_action.region;
    }
    if (c_action["powered"] && !global[action][type]["on"]) {
      global[action][type]["on"] = 0;
    }
    let id = c_action.id;
    removeAction(id);
    let reqs = ``;
    if (prediction && c_action && c_action.reqs) {
      Object.keys(c_action.reqs).forEach(function(req) {
        if (prediction[req]) {
          reqs += ` data-req-${req}="${prediction[req].a}"`;
        }
      });
    }
    let parent = c_action["highlight"] && c_action.highlight() ? $(`<div id="${id}" class="action hl"${reqs}></div>`) : $(`<div id="${id}" class="action"${reqs}></div>`);
    if (!checkAffordable(c_action, false, ["genes", "blood"].includes(action))) {
      parent.addClass("cna");
    }
    if (!checkAffordable(c_action, true, ["genes", "blood"].includes(action))) {
      parent.addClass("cnam");
    }
    let element;
    if (old) {
      element = $('<span class="oldTech is-dark"><span class="aTitle">{{ title }}</span></span>');
    } else {
      let cst = "";
      let data = "";
      if (c_action["cost"]) {
        let costs = action !== "genes" && action !== "blood" ? adjustCosts(c_action) : c_action.cost;
        Object.keys(costs).forEach(function(res) {
          let cost = costs[res]();
          if (cost > 0) {
            cst = cst + ` res-${res}`;
            data = data + ` data-${res}="${cost}"`;
          }
        });
      }
      let clss = ``;
      if (c_action["class"]) {
        clss = typeof c_action["class"] === "function" ? ` ${c_action.class()}` : ` ${c_action["class"]}`;
      }
      if (prediction) {
        clss = " precog";
      } else if (c_action["aura"] && c_action.aura()) {
        clss = ` ${c_action.aura()}`;
      }
      let active = c_action["highlight"] ? c_action.highlight() ? `<span class="is-sr-only">${loc("active")}</span>` : `<span class="is-sr-only">${loc("not_active")}</span>` : "";
      element = $(`<a class="button is-dark${cst}${clss}"${data} v-on:click="action" role="link"><span class="aTitle" v-html="$options.filters.title(title)"></span>${active}</a><a role="button" v-on:click="describe" class="is-sr-only">{{ title }} description</a>`);
    }
    parent.append(element);
    if (c_action.hasOwnProperty("special") && (typeof c_action["special"] === "function" && c_action.special() || c_action["special"] === true)) {
      let special = $(`<div class="special" role="button" v-bind:title="title | options" @click="trigModal"><svg version="1.1" x="0px" y="0px" width="12px" height="12px" viewBox="340 140 280 279.416" enable-background="new 340 140 280 279.416" xml:space="preserve">
            <path class="gear" d="M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083
                c-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333
                L362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25
                c2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916
                h51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25
                c4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667
                S533.667,250.25,533.667,280S509.75,333.666,480,333.666z"/>
            </svg></div>`);
      parent.append(special);
    }
    if (c_action["on"] || c_action["off"]) {
      if (c_action["on"]) {
        let powerOn = $(`<span class="on" title="ON" v-html="$options.filters.val('on')"></span>`);
        parent.append(powerOn);
      }
      if (c_action["off"]) {
        let powerOff = $(`<span class="off" title="OFF" v-html="$options.filters.val('off')"></span>`);
        parent.append(powerOff);
      }
    } else {
      let switchable = c_action["switchable"] ? c_action.switchable() : c_action["powered"] && global.tech["high_tech"] && global.tech["high_tech"] >= 2 && checkPowerRequirements(c_action);
      if (switchable) {
        let powerOn = $(`<span role="button" :aria-label="on_label()" class="on" @click="power_on" title="ON" v-html="$options.filters.p_on(act.on,'${c_action.id}')"></span>`);
        let powerOff = $(`<span role="button" :aria-label="off_label()" class="off" @click="power_off" title="OFF" v-html="$options.filters.p_off(act.on,'${c_action.id}')"></span>`);
        parent.append(powerOn);
        parent.append(powerOff);
      }
    }
    if (c_action["count"]) {
      let count = c_action.count();
      if (count > 0 && (id !== "city-gift" || count > 1)) {
        element.append($(`<span class="count">${count}</span>`));
      }
    } else if (action !== "tech" && global[action] && global[action][type] && global[action][type].count >= 0) {
      element.append($(`<span class="count" v-html="$options.filters.count(act.count,'${type}')"></span>`));
    } else if (action === "blood" && global[action] && global[action][c_action.grant[0]] && global[action][c_action.grant[0]] > 0 && c_action.grant[1] === "*") {
      element.append($(`<span class="count"> ${global[action][c_action.grant[0]]} </span>`));
    }
    if (action !== "tech" && global[action] && global[action][type] && typeof global[action][type]["repair"] !== "undefined") {
      element.append($(`<div class="repair"><progress class="progress" :value="repair()" :max="repairMax()"></progress></div>`));
    }
    if (old) {
      $("#oldTech").append(parent);
    } else {
      $("#" + tab).append(parent);
    }
    if (action !== "tech" && global[action] && global[action][type] && global[action][type].count === 0) {
      $(`#${id} .count`).css("display", "none");
      $(`#${id} .special`).css("display", "none");
      $(`#${id} .on`).css("display", "none");
      $(`#${id} .off`).css("display", "none");
    }
    if (c_action["emblem"]) {
      let emblem = c_action.emblem();
      parent.append($(emblem));
    }
    let modal = {
      template: '<div id="modalBox" class="modalBox"></div>'
    };
    vBind({
      el: "#" + id,
      data: {
        title: typeof c_action.title === "string" ? c_action.title : c_action.title(),
        act: global[action][type]
      },
      methods: {
        action(args) {
          if ("ontouchstart" in document.documentElement && navigator.userAgent.match(global.settings.touch) ? true : false) {
            return;
          } else {
            runAction(c_action, action, type);
          }
        },
        describe() {
          srSpeak(srDesc(c_action, old));
        },
        trigModal() {
          if (c_action["sAction"] && typeof c_action["sAction"] === "function") {
            c_action.sAction();
          } else {
            this.$buefy.modal.open({
              parent: this,
              component: modal
            });
            let checkExist = setInterval(function() {
              if ($("#modalBox").length > 0) {
                clearInterval(checkExist);
                drawModal2(c_action, type);
              }
            }, 50);
          }
        },
        on_label() {
          return `on: ${global[action][type].on}`;
        },
        off_label() {
          return `off: ${global[action][type].count - global[action][type].on}`;
        },
        power_on() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[action][type].on < global[action][type].count) {
              global[action][type].on++;
            } else {
              break;
            }
          }
          if (c_action["postPower"]) {
            callback_queue.set([c_action, "postPower"], [true]);
          }
        },
        power_off() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[action][type].on > 0) {
              global[action][type].on--;
            } else {
              break;
            }
          }
          if (c_action["postPower"]) {
            callback_queue.set([c_action, "postPower"], [false]);
          }
        },
        repair() {
          return global[action][type].repair;
        },
        repairMax() {
          return c_action.repair();
        }
      },
      filters: {
        val(v) {
          switch (v) {
            case "on":
              return c_action.on();
            case "off":
              return c_action.off();
          }
        },
        p_off(p, id2) {
          let value = global[action][type].count - p;
          if (id2 === "city-casino" && !global.race["cataclysm"] && !global.race["orbit_decayed"] || id2 === "space-spc_casino" && (global.race["cataclysm"] || global.race["orbit_decayed"]) || id2 === "tauceti-tauceti_casino" && global.tech["isolation"] || id2 === "portal-hell_casino" && global.race["warlord"]) {
            let egg = easterEgg(5, 12);
            if (value === 0 && egg.length > 0) {
              return egg;
            }
          }
          return value;
        },
        p_on(p, id2) {
          if (id2 === "city-biolab" && !global.race["cataclysm"] && !global.race["orbit_decayed"] || (global.race["cataclysm"] || global.race["orbit_decayed"]) && id2 === "space-exotic_lab" || global.tech["isolation"] && id2 === "tauceti-infectious_disease_lab" || global.race["warlord"] && id2 === "portal-twisted_lab") {
            let egg = easterEgg(12, 12);
            if (p === 0 && egg.length > 0) {
              return egg;
            }
          } else if (id2 === "city-garrison" || id2 === "space-space_barracks" || id2 === "portal-brute") {
            let trick = trickOrTreat(1, 14, true);
            let num = id2 === "city-garrison" || id2 === "portal-brute" ? 13 : 0;
            if (p === num && trick.length > 0) {
              return trick;
            }
          }
          return p;
        },
        title(t) {
          return t;
        },
        options(t) {
          return loc(`action_options`, [t]);
        },
        count(v, t) {
          if (["temple", "ziggurat"].includes(t)) {
            return templeCount(t === "temple" ? false : true);
          }
          return v;
        }
      }
    });
    popover(id, function() {
      return void 0;
    }, {
      in: function(obj) {
        actionDesc(obj.popper, c_action, global[action][type], old, action, type);
      },
      out: function() {
        vBind({ el: `#popTimer` }, "destroy");
      },
      attach: action === "starDock" ? "body .modal" : "#main",
      wide: c_action["wide"],
      classes: c_action.hasOwnProperty("class") ? c_action.class : false
    });
  }
  function runAction(c_action, action, type) {
    if (c_action.id === "spcdock-launch_ship") {
      c_action.action({ isQueue: false });
    } else {
      switch (action) {
        case "tech":
          if (!(global.settings.qKey && keyMap.q) && checkTechRequirements(type, false) && c_action.action({ isQueue: false })) {
            gainTech(type);
            if (c_action["post"]) {
              callback_queue.set([c_action, "post"], []);
            }
          } else {
            if (!(c_action["no_queue"] && c_action["no_queue"]()) && global.tech["r_queue"]) {
              if (global.r_queue.queue.length < global.r_queue.max) {
                let queued = false;
                for (let tech in global.r_queue.queue) {
                  if (global.r_queue.queue[tech].id === c_action.id) {
                    queued = true;
                    break;
                  }
                }
                if (!queued) {
                  global.r_queue.queue.push({ id: c_action.id, action, type, label: typeof c_action.title === "string" ? c_action.title : c_action.title(), cna: false, time: 0, bres: false, req: true });
                  resQueue();
                  drawTech();
                }
              }
            }
          }
          break;
        case "genes":
        case "blood":
          if (c_action.action({ isQueue: false })) {
            if (action === "genes") {
              gainGene(type);
            } else {
              gainBlood(type);
            }
            if (c_action["post"]) {
              callback_queue.set([c_action, "post"], []);
            }
          }
          break;
        default: {
          let keyMult = c_action["no_multi"] ? 1 : keyMultiplier();
          if (c_action["grant"]) {
            keyMult = 1;
          }
          let grant = false;
          let add_queue = false;
          let loopNum = global.settings.qKey && keyMap.q ? 1 : keyMult;
          for (let i = 0; i < loopNum; i++) {
            let res = false;
            if (global.settings.qKey && keyMap.q || !(res = c_action.action({ isQueue: false }))) {
              if (res !== 0 && global.tech["queue"] && (keyMult === 1 || global.settings.qKey && keyMap.q)) {
                let used = 0;
                let buid_max = c_action["queue_complete"] ? c_action.queue_complete() : Number.MAX_SAFE_INTEGER;
                for (let j = 0; j < global.queue.queue.length; j++) {
                  used += Math.ceil(global.queue.queue[j].q / global.queue.queue[j].qs);
                  if (global.queue.queue[j].id === c_action.id) {
                    buid_max -= global.queue.queue[j].q;
                  }
                }
                if (used < global.queue.max && buid_max > 0) {
                  let repeat = global.settings.qKey ? keyMult : 1;
                  if (repeat > global.queue.max - used) {
                    repeat = global.queue.max - used;
                  }
                  let q_size = c_action["queue_size"] ? c_action["queue_size"] : 1;
                  if (c_action["region"]) {
                    action = c_action.id.split("-")[0];
                  }
                  if (global.settings.q_merge !== "merge_never") {
                    if (global.queue.queue.length > 0 && global.queue.queue[global.queue.queue.length - 1].id === c_action.id) {
                      global.queue.queue[global.queue.queue.length - 1].q += Math.min(buid_max, q_size * repeat);
                    } else {
                      global.queue.queue.push({ id: c_action.id, action, type, label: typeof c_action.title === "string" ? c_action.title : c_action.title(), cna: false, time: 0, q: Math.min(buid_max, q_size * repeat), qs: q_size, t_max: 0, bres: false });
                    }
                  } else {
                    for (let k = 0; k < repeat && buid_max > 0; k++) {
                      global.queue.queue.push({ id: c_action.id, action, type, label: typeof c_action.title === "string" ? c_action.title : c_action.title(), cna: false, time: 0, q: Math.min(buid_max, q_size), qs: q_size, t_max: 0, bres: false });
                      buid_max -= q_size;
                    }
                  }
                  add_queue = true;
                }
              }
              break;
            } else {
              if (global.race["inflation"] && global.tech["primitive"]) {
                if (!c_action.hasOwnProperty("inflation") || c_action.inflation) {
                  global.race.inflation++;
                }
              }
            }
            grant = true;
          }
          if (grant) {
            postBuild(c_action, action, type);
            if (global.tech["queue"] && c_action["queue_complete"]) {
              let buid_max = c_action.queue_complete();
              for (let i = 0, j = 0; j < global.queue.queue.length; i++, j++) {
                let item = global.queue.queue[j];
                if (item.id === c_action.id) {
                  if (buid_max < 1) {
                    clearPopper(`q${item.id}${i}`);
                    global.queue.queue.splice(j--, 1);
                    add_queue = true;
                  } else if (item.q > buid_max) {
                    item.q = buid_max;
                    buid_max = 0;
                  } else {
                    buid_max -= item.q;
                  }
                }
              }
            }
          }
          if (add_queue) {
            buildQueue();
          }
          break;
        }
      }
    }
  }
  function postBuild(c_action, action, type) {
    if (!checkAffordable(c_action)) {
      let id = c_action.id;
      $(`#${id}`).addClass("cna");
    }
    if (c_action["grant"]) {
      let tech = c_action.grant[0];
      if (!global.tech[tech] || global.tech[tech] < c_action.grant[1]) {
        global.tech[tech] = c_action.grant[1];
      }
    }
    if (c_action["grant"] || c_action["refresh"]) {
      removeAction(c_action.id);
      if (global.race.species === "protoplasm") {
        drawEvolution();
      } else {
        drawCity();
        drawTech();
        renderSpace();
        renderFortress();
        renderTauCeti();
        renderEdenic();
      }
    }
    if (c_action["post"]) {
      callback_queue.set([c_action, "post"], []);
    }
    updateDesc(c_action, action, type);
  }
  function setPlanet(opt) {
    var biome = "grassland";
    let trait = [];
    var orbit = 365;
    let geology = {};
    let custom = false;
    if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 4 && global.custom["planet"] && opt.custom && opt.custom.length > 0 && Math.floor(seededRandom(0, 10)) === 0) {
      custom = opt.custom[Math.floor(seededRandom(0, opt.custom.length))];
      let target = custom.split(":");
      if (global.custom.planet[target[0]] && global.custom.planet[target[0]][target[1]]) {
        let p = deepClone(global.custom.planet[target[0]][target[1]]);
        biome = p.biome;
        trait = p.traitlist;
        orbit = p.orbit;
        geology = p.geology;
        trait.sort();
      } else {
        custom = false;
      }
    }
    if (!custom) {
      biome = buildPlanet("biome", opt);
      trait = buildPlanet("trait", opt, { biome });
      trait.sort();
      let max = Math.floor(seededRandom(0, 3));
      let top = 30;
      if (global.stats.achieve["whitehole"]) {
        top += global.stats.achieve["whitehole"].l * 5;
        max += global.stats.achieve["whitehole"].l;
      }
      if (biome === "eden") {
        top += 5;
      }
      for (let i = 0; i < max; i++) {
        switch (Math.floor(seededRandom(0, 10))) {
          case 0:
            geology["Copper"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 1:
            geology["Iron"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 2:
            geology["Aluminium"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 3:
            geology["Coal"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 4:
            geology["Oil"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 5:
            geology["Titanium"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 6:
            geology["Uranium"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            break;
          case 7:
            if (global.stats.achieve["whitehole"]) {
              geology["Iridium"] = (Math.floor(seededRandom(0, top)) - 10) / 100;
            }
            break;
          default:
            break;
        }
      }
      switch (biome) {
        case "hellscape":
          orbit = 666;
          break;
        case "eden":
          orbit = 777;
          break;
        default:
          {
            let maxOrbit = 600;
            if (trait.includes("elliptical")) {
              maxOrbit += 200;
            }
            if (trait.includes("kamikaze")) {
              maxOrbit += 100;
            }
            orbit = Math.floor(seededRandom(200, maxOrbit));
          }
          break;
      }
    }
    let num = Math.floor(seededRandom(0, 1e4));
    var id = biome + num;
    id = id.charAt(0).toUpperCase() + id.slice(1);
    let traits2 = "";
    trait.forEach(function(t) {
      if (planetTraits.hasOwnProperty(t)) {
        traits2 += `${planetTraits[t].label} `;
      }
    });
    let title = `${traits2}${biomes[biome].label} ${num}`;
    var parent = $(`<div id="${id}" class="action"></div>`);
    var element = $(`<a class="button is-dark" v-on:click="action" role="link"><span class="aTitle">${title}</span></a>`);
    parent.append(element);
    $("#evolution").append(parent);
    let popper = false;
    let gecked = 0;
    popover(id, function(obj) {
      popper = obj;
      planetDesc(obj, title, biome, orbit, trait, geology, gecked);
      return void 0;
    }, {
      classes: `has-background-light has-text-dark`
    });
    $("#" + id).on("click", function() {
      if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 5 && global.race.hasOwnProperty("geck") && global.race.geck > 0) {
        Object.keys(geology).forEach(function(g) {
          geology[g] += Math.floor(seededRandom(0, 7)) / 100;
        });
        if (gecked > 0) {
          let odds = 8 - gecked;
          if (odds < 1) {
            odds = 1;
          }
          if (Math.floor(seededRandom(0, odds)) === 0) {
            biome = buildPlanet("biome", opt);
          }
        }
        if (Math.floor(seededRandom(0, 2)) === 0) {
          let pT = buildPlanet("trait", opt, { biome, cap: 1 });
          if (pT.length > 0) {
            if (trait.includes(pT[0])) {
              let idx = trait.indexOf(pT[0]);
              trait.splice(idx, 1);
            } else if (pT[0] !== void 0) {
              trait.push(pT[0]);
            }
            traits2 = "";
            trait.forEach(function(t) {
              if (planetTraits.hasOwnProperty(t)) {
                traits2 += `${planetTraits[t].label} `;
              }
            });
          }
        }
        title = `${traits2}${biomes[biome].label} ${num}`;
        $(`#${id} .aTitle`).html(title);
        gecked++;
        global.race.geck--;
        if (!global.race.hasOwnProperty("gecked")) {
          global.race["gecked"] = 0;
        }
        global.race.gecked++;
        clearElement(popper.popper);
        planetDesc(popper, title, biome, orbit, trait, geology, gecked);
      } else {
        delete global.race["geck"];
        if (global.race["gecked"]) {
          global.stats.geck += global.race.gecked;
        }
        global.race["chose"] = id;
        global.city.biome = biome;
        global.city.calendar.orbit = orbit;
        global.city.geology = geology;
        global.city.ptrait = trait;
        if (gecked > 0) {
          global.race["rejuvenated"] = true;
        }
        clearElement($("#evolution"));
        clearPopper();
        drawEvolution();
      }
    });
    return custom ? custom : biome === "eden" ? "hellscape" : biome;
  }
  function planetDesc(obj, title, biome, orbit, trait, geology, gecked) {
    obj.popper.append($(`<div>${loc("set_planet", [title, biomes[biome].label, orbit])}</div>`));
    obj.popper.append($(`<div>${biomes[biome].desc}</div>`));
    if (trait.length > 0) {
      trait.forEach(function(t) {
        obj.popper.append($(`<div>${planetTraits[t].desc}</div>`));
      });
    }
    let pg = planetGeology(geology);
    if (pg.length > 0) {
      obj.popper.append($(`<div>${pg}</div>`));
    }
    if (gecked && gecked > 0) {
      obj.popper.append($(`<div class="has-text-special">${loc(`rejuvenated`)}</div>`));
    }
    return void 0;
  }
  function buildPlanet(aspect, opt, args) {
    args = args || {};
    if (aspect === "biome") {
      let biome = "grassland";
      let max_bound = !opt.hell && global.stats.portals >= 1 ? 7 : 6;
      let subbiome = Math.floor(seededRandom(0, 3)) === 0 ? true : false;
      let uAffix = universeAffix();
      switch (Math.floor(seededRandom(0, max_bound))) {
        case 0:
          {
            let sb = subbiome && global.stats.achieve["biome_grassland"] && global.stats.achieve.biome_grassland[uAffix] && global.stats.achieve.biome_grassland[uAffix] > 0;
            biome = sb ? "savanna" : "grassland";
          }
          break;
        case 1:
          {
            let sb = subbiome && global.stats.achieve["biome_oceanic"] && global.stats.achieve.biome_oceanic[uAffix] && global.stats.achieve.biome_oceanic[uAffix] > 0;
            biome = sb ? "swamp" : "oceanic";
          }
          break;
        case 2:
          {
            let sb = subbiome && global.stats.achieve["biome_forest"] && global.stats.achieve.biome_forest[uAffix] && global.stats.achieve.biome_forest[uAffix] > 0;
            biome = sb ? Math.floor(seededRandom(0, 2)) === 0 ? "taiga" : "swamp" : "forest";
          }
          break;
        case 3:
          {
            let sb = subbiome && global.stats.achieve["biome_desert"] && global.stats.achieve.biome_desert[uAffix] && global.stats.achieve.biome_desert[uAffix] > 0;
            biome = sb ? "ashland" : "desert";
          }
          break;
        case 4:
          {
            let sb = subbiome && global.stats.achieve["biome_volcanic"] && global.stats.achieve.biome_volcanic[uAffix] && global.stats.achieve.biome_volcanic[uAffix] > 0;
            biome = sb ? "ashland" : "volcanic";
          }
          break;
        case 5:
          {
            let sb = subbiome && global.stats.achieve["biome_tundra"] && global.stats.achieve.biome_tundra[uAffix] && global.stats.achieve.biome_tundra[uAffix] > 0;
            biome = sb ? "taiga" : "tundra";
          }
          break;
        case 6:
          biome = global.race.universe === "evil" ? "eden" : "hellscape";
          break;
        default:
          biome = "grassland";
          break;
      }
      return biome;
    } else if (aspect === "trait") {
      let trait = [];
      let cap = args["cap"] || 2;
      for (let i = 0; i < cap; i++) {
        let top = 18 + 9 * i;
        switch (Math.floor(seededRandom(0, top))) {
          case 0:
            if (!trait.includes("toxic")) {
              trait.push("toxic");
            }
            break;
          case 1:
            if (!trait.includes("mellow")) {
              trait.push("mellow");
            }
            break;
          case 2:
            if (!trait.includes("rage")) {
              trait.push("rage");
            }
            break;
          case 3:
            if (!trait.includes("stormy")) {
              trait.push("stormy");
            }
            break;
          case 4:
            if (!trait.includes("ozone")) {
              trait.push("ozone");
            }
            break;
          case 5:
            if (!trait.includes("magnetic")) {
              trait.push("magnetic");
            }
            break;
          case 6:
            if (!trait.includes("trashed")) {
              trait.push("trashed");
            }
            break;
          case 7:
            if (!trait.includes("elliptical")) {
              trait.push("elliptical");
            }
            break;
          case 8:
            if (!trait.includes("flare")) {
              trait.push("flare");
            }
            break;
          case 9:
            if (!trait.includes("dense")) {
              trait.push("dense");
            }
            break;
          case 10:
            if (!trait.includes("unstable")) {
              trait.push("unstable");
            }
            break;
          case 11:
            if (!trait.includes("permafrost") && !["volcanic", "ashland", "hellscape"].includes(args["biome"])) {
              trait.push("permafrost");
            }
            break;
          case 12:
            if (!trait.includes("retrograde")) {
              trait.push("retrograde");
            }
            break;
          case 13:
            if (!trait.includes("kamikaze")) {
              trait.push("kamikaze");
            }
            break;
          default:
            break;
        }
      }
      return trait;
    }
  }
  function powerOnNewStruct(c_action) {
    let parts = c_action.id.split("-");
    if (!global.hasOwnProperty(parts[0]) || !global[parts[0]].hasOwnProperty(parts[1])) {
      return false;
    }
    let need_p = c_action.hasOwnProperty("powered") && c_action.powered() > 0;
    let can_p = !need_p;
    let gov_replicator = global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("tasks") && global.race.hasOwnProperty("replicator") && Object.values(global.race.governor.tasks).includes("replicate") && global.race.governor.config.replicate.pow.on && global.race.replicator.pow > 0;
    if (need_p && global.city.hasOwnProperty("powered") && checkPowerRequirements(c_action)) {
      let power = global.city.power;
      if (gov_replicator) {
        power += global.race.replicator.pow;
      }
      can_p = c_action.powered() <= power;
    }
    let need_s = c_action.hasOwnProperty("s_type") && c_action.hasOwnProperty("support") && c_action.support() < 0;
    let can_s = !need_s;
    if (need_s) {
      let grids = gridDefs();
      let s_r = grids[c_action.s_type].r;
      let s_rs = grids[c_action.s_type].rs;
      can_s = global[s_r][s_rs].support - c_action.support() <= global[s_r][s_rs].s_max;
    }
    if (can_p && can_s || global.settings.alwaysPower) {
      global[parts[0]][parts[1]].on++;
      if (need_p) {
        global.city.power -= c_action.powered();
        if (gov_replicator) {
          gov_tasks.replicate.task();
        }
      }
      if (c_action["postPower"]) {
        callback_queue.set([c_action, "postPower"], [true]);
      }
      return true;
    }
    return false;
  }
  function getStructNumActive(c_action, wiki) {
    let parts = c_action.id.split("-");
    if (!global.hasOwnProperty(parts[0]) || !global[parts[0]].hasOwnProperty(parts[1])) {
      return 0;
    }
    let num_on = global[parts[0]][parts[1]].on;
    if (!num_on) {
      return 0;
    }
    if (c_action.hasOwnProperty("powered") && c_action.powered() > 0) {
      if (global.city.hasOwnProperty("powered") && checkPowerRequirements(c_action)) {
        if (p_on.hasOwnProperty(parts[1])) {
          num_on = Math.min(num_on, p_on[parts[1]]);
        }
      } else {
        num_on = 0;
      }
    }
    if (c_action.hasOwnProperty("s_type") && c_action.hasOwnProperty("support") && c_action.support() < 0) {
      let found_support = false;
      if (support_on.hasOwnProperty(parts[1])) {
        found_support = true;
        num_on = Math.min(num_on, support_on[parts[1]]);
      }
      if (int_on.hasOwnProperty(parts[1])) {
        found_support = true;
        num_on = Math.min(num_on, int_on[parts[1]]);
      }
      if (gal_on.hasOwnProperty(parts[1])) {
        found_support = true;
        num_on = isStargateOn(wiki) ? Math.min(num_on, gal_on[parts[1]]) : 0;
      }
      if (spire_on.hasOwnProperty(parts[1])) {
        found_support = true;
        num_on = Math.min(num_on, spire_on[parts[1]]);
      }
      if (!found_support) {
        let grids = gridDefs();
        let s_r = grids[c_action.s_type].r;
        if (s_r === "galaxy" && !isStargateOn(wiki)) {
          num_on = 0;
        } else {
          let s_rs = grids[c_action.s_type].rs;
          let max_s = Math.floor(global[s_r][s_rs].s_max / -c_action.support());
          num_on = Math.min(num_on, max_s);
        }
      }
    }
    return num_on;
  }
  function planetGeology(geology) {
    let geo_traits = ``;
    if (Object.keys(geology).length > 0) {
      let good = ``;
      let bad = ``;
      let numShow = global.stats.achieve["miners_dream"] ? global.stats.achieve["miners_dream"].l >= 4 ? global.stats.achieve["miners_dream"].l * 2 - 3 : global.stats.achieve["miners_dream"].l : 0;
      if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 0) {
        numShow++;
      }
      for (let key in geology) {
        if (key !== 0) {
          if (geology[key] > 0) {
            let res_val = `<div class="has-text-advanced pGeo">${loc(`resource_${key}_name`)}`;
            if (numShow > 0) {
              res_val += `: <span class="has-text-success">+${Math.round((geology[key] + 1) * 100 - 100)}%</span>`;
              numShow--;
            } else {
              res_val += `: <span class="has-text-success">${loc("bonus")}</span>`;
            }
            res_val += `</div>`;
            good = good + res_val;
          } else if (geology[key] < 0) {
            let res_val = `<div class="has-text-caution pGeo">${loc(`resource_${key}_name`)}`;
            if (numShow > 0) {
              res_val += `: <span class="has-text-danger">${Math.round((geology[key] + 1) * 100 - 100)}%</span>`;
              numShow--;
            } else {
              res_val += `: <span class="has-text-danger">${loc("malus")}</span>`;
            }
            res_val += `</div>`;
            bad = bad + res_val;
          }
        }
      }
      geo_traits = `<div class="pGeoList flexAround">${good}${bad}</div>`;
    }
    return geo_traits;
  }
  function srDesc(c_action, old) {
    let desc = typeof c_action.desc === "string" ? c_action.desc : c_action.desc();
    desc = desc + ". ";
    if (c_action.cost && !old) {
      if (checkAffordable(c_action)) {
        desc = desc + loc("affordable") + ". ";
      } else {
        desc = desc + loc("not_affordable") + ". ";
      }
      desc = desc + "Costs: ";
      let type = c_action.id.split("-")[0];
      var costs = type !== "genes" && type !== "blood" ? adjustCosts(c_action) : c_action.cost;
      Object.keys(costs).forEach(function(res) {
        if (res === "Custom") {
          let custom = costs[res]();
          desc = desc + custom.label;
        } else if (res === "Structs") {
          let structs = costs[res]();
          Object.keys(structs).forEach(function(region) {
            Object.keys(structs[region]).forEach(function(struct) {
              let label = "";
              const check_on = structs[region][struct].hasOwnProperty("on");
              let num_on;
              if (structs[region][struct].hasOwnProperty("s")) {
                let sector = structs[region][struct].s;
                label = typeof actions[region][sector][struct].title === "string" ? actions[region][sector][struct].title : actions[region][sector][struct].title();
                if (check_on) {
                  num_on = getStructNumActive(actions[region][sector][struct]);
                }
              } else {
                label = typeof actions[region][struct].title === "string" ? actions[region][struct].title : actions[region][struct].title();
                if (check_on) {
                  num_on = getStructNumActive(actions[region][struct]);
                }
              }
              desc = desc + `${label}. `;
              if (!global[region][struct]) {
                desc = desc + `${loc("insufficient")} ${label}. `;
              } else if (structs[region][struct].count > global[region][struct].count) {
                desc = desc + `${loc("insufficient")} ${label}. `;
              } else if (check_on && structs[region][struct].on > num_on) {
                desc = desc + `${loc("insufficient")} ${label} enabled. `;
              }
            });
          });
        } else if (global.prestige.hasOwnProperty(res)) {
          let res_cost = costs[res]();
          if (res_cost > 0) {
            if (res === "Plasmid" && global.race.universe === "antimatter") {
              res = "AntiPlasmid";
            }
            let label = loc(`resource_${res}_name`);
            desc = desc + `${label}: ${res_cost}. `;
            if (global.prestige[res].count < res_cost) {
              desc = desc + `${loc("insufficient")} ${label}. `;
            }
          }
        } else if (res === "Supply") {
          let res_cost = costs[res]();
          if (res_cost > 0) {
            let label = loc(`resource_${res}_name`);
            desc = desc + `${label}: ${res_cost}. `;
            if (global.portal.purifier.supply < res_cost) {
              desc = desc + `${loc("insufficient")} ${label}. `;
            }
          }
        } else if (res !== "Morale" && res !== "Army" && res !== "Bool") {
          let res_cost = costs[res]();
          let f_res = res === "Species" ? global.race.species : res;
          if (res_cost > 0) {
            let label = f_res === "Money" ? "$" : global.resource[f_res].name + ": ";
            label = label.replace("_", " ");
            let display_cost = sizeApproximation(res_cost, 1);
            desc = desc + `${label}${display_cost}. `;
            if (global.resource[f_res].amount < res_cost) {
              desc = desc + `${loc("insufficient")} ${global.resource[f_res].name}. `;
            }
          }
        }
      });
    }
    if (c_action.effect) {
      let effect = typeof c_action.effect === "string" ? c_action.effect : c_action.effect();
      if (effect) {
        desc = desc + effect + ". ";
      }
    }
    if (c_action.flair) {
      let flair = typeof c_action.flair === "string" ? c_action.flair : c_action.flair();
      if (flair) {
        desc = desc + flair + ".";
      }
    }
    return desc.replace("..", ".");
  }
  function actionDesc(parent, c_action, obj, old, action, a_type, bres) {
    clearElement(parent);
    var desc = typeof c_action.desc === "string" ? c_action.desc : c_action.desc();
    bres = bres || false;
    let touch = false;
    if (action && a_type && "ontouchstart" in document.documentElement && navigator.userAgent.match(/Mobi/) && global.settings.touch ? true : false) {
      touch = $(`<a id="touchButton" class="button is-dark touchButton">${c_action.hasOwnProperty("touchlabel") ? c_action.touchlabel : loc("construct")}</a>`);
      parent.append(touch);
      $("#touchButton").on("touchstart", function() {
        runAction(c_action, action, a_type);
      });
    }
    parent.append($(`<div>${desc}</div>`));
    let type = c_action.id.split("-")[0];
    if (c_action["category"] && type === "tech" && !old) {
      parent.append($(`<div class="has-text-flair">${loc("tech_dist_category")}: ${loc(`tech_dist_${c_action.category}`)}</div>`));
    }
    let tc = timeCheck(c_action, false, true);
    if (c_action.cost && !old) {
      let empty = true;
      var cost = $('<div class="costList"></div>');
      var costs = type !== "genes" && type !== "blood" ? adjustCosts(c_action) : c_action.cost;
      Object.keys(costs).forEach(function(res) {
        if (res === "Custom") {
          let custom = costs[res]();
          cost.append($(`<div>${custom.label}</div>`));
          empty = false;
        } else if (res === "Structs") {
          let structs = costs[res]();
          Object.keys(structs).forEach(function(region) {
            Object.keys(structs[region]).forEach(function(struct) {
              let label = "";
              const check_on = structs[region][struct].hasOwnProperty("on");
              let num_on;
              let res_cost = check_on ? structs[region][struct].on : structs[region][struct].count;
              let color = "has-text-dark";
              let aria = "";
              if (structs[region][struct].hasOwnProperty("s")) {
                const sector = structs[region][struct].s;
                label = typeof actions[region][sector][struct].title === "string" ? actions[region][sector][struct].title : actions[region][sector][struct].title();
                if (check_on) {
                  num_on = getStructNumActive(actions[region][sector][struct]);
                }
              } else {
                label = typeof actions[region][struct].title === "string" ? actions[region][struct].title : actions[region][struct].title();
                if (check_on) {
                  num_on = getStructNumActive(actions[region][struct]);
                }
              }
              if (!global[region][struct]) {
                color = "has-text-danger";
                aria = ' <span class="is-sr-only">(blocking resource)</span>';
              } else if (structs[region][struct].count > global[region][struct].count) {
                color = "has-text-danger";
                aria = ' <span class="is-sr-only">(blocking resource)</span>';
              } else if (check_on && structs[region][struct].on > num_on) {
                color = "has-text-alert";
              }
              empty = false;
              cost.append($(`<div class="${color}">${label}: ${res_cost}${aria}</div>`));
            });
          });
        } else if (global.prestige.hasOwnProperty(res)) {
          let res_cost = costs[res]();
          if (res_cost > 0) {
            if (res === "Plasmid" && global.race.universe === "antimatter") {
              res = "AntiPlasmid";
            }
            let label = loc(`resource_${res}_name`);
            let color = "has-text-dark";
            let aria = "";
            if (global.prestige[res].count < res_cost) {
              color = "has-text-danger";
              aria = ' <span class="is-sr-only">(blocking resource)</span>';
            }
            empty = false;
            cost.append($(`<div class="${color} res-${res}" data-${res}="${res_cost}">${label}: ${res_cost}${aria}</div>`));
          }
        } else if (res === "Supply") {
          let res_cost = costs[res]();
          if (res_cost > 0) {
            let label = loc(`resource_${res}_name`);
            let color = "has-text-dark";
            let aria = "";
            if (global.portal.purifier.supply < res_cost) {
              color = "has-text-danger";
              aria = ' <span class="is-sr-only">(blocking resource)</span>';
            }
            empty = false;
            cost.append($(`<div class="${color} res-${res}" data-${res}="${res_cost}">${label}: ${res_cost}${aria}</div>`));
          }
        } else if (res !== "Morale" && res !== "Army" && res !== "Bool") {
          let res_cost = costs[res]();
          if (res_cost > 0) {
            let aria = "";
            let f_res = res === "Species" ? global.race.species : res;
            if (res === "HellArmy") {
              let label = loc("fortress_troops");
              let color = "has-text-dark";
              if (global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size < res_cost) {
                if (tc.r === f_res) {
                  color = "has-text-danger";
                  aria = ' <span class="is-sr-only">(blocking resource)</span>';
                } else {
                  color = "has-text-alert";
                }
              }
              empty = false;
              cost.append($(`<div class="${color}" data-${res}="${res_cost}">${label}: ${res_cost}${aria}</div>`));
            } else if (res === "Troops") {
              let label = global.tech["world_control"] && !global.race["truepath"] ? loc("civics_garrison_peacekeepers") : loc("civics_garrison_soldiers");
              let color = "has-text-dark";
              if (garrisonSize() < res_cost) {
                if (tc.r === f_res) {
                  color = "has-text-danger";
                  aria = ' <span class="is-sr-only">(blocking resource)</span>';
                } else {
                  color = "has-text-alert";
                }
              }
              empty = false;
              cost.append($(`<div class="${color}" data-${res}="${res_cost}">${label}: ${res_cost}${aria}</div>`));
            } else {
              let label = f_res === "Money" ? "$" : global.resource[f_res].name + ": ";
              label = label.replace("_", " ");
              let color = "has-text-dark";
              let aria2 = "";
              if (global.resource[f_res].amount < res_cost) {
                if (tc.r === f_res) {
                  color = "has-text-danger";
                  aria2 = ' <span class="is-sr-only">(blocking resource)</span>';
                } else {
                  color = "has-text-alert";
                }
                if (bres && bres !== res && tc.r === f_res) {
                  color += " grad-from-left";
                  aria2 = ' <span class="is-sr-only">(first blocking resource)</span>';
                } else if (bres && bres === res && tc.r !== f_res) {
                  color += " grad-from-left-warn";
                }
              } else if (bres && bres === res) {
                color += " grad-from-right";
                aria2 = ' <span class="is-sr-only">(last blocking resource)</span>';
              }
              let display_cost = sizeApproximation(res_cost, 1);
              empty = false;
              cost.append($(`<div class="${color} res-${res}" data-${f_res}="${res_cost}">${label}${display_cost}${aria2}</div>`));
            }
          }
        }
      });
      if (!empty) {
        parent.append(cost);
      }
    }
    if (c_action.effect) {
      var effect = typeof c_action.effect === "string" ? c_action.effect : c_action.effect();
      if (effect) {
        parent.append($(`<div>${effect}</div>`));
      }
    }
    if (c_action.flair) {
      var flair = typeof c_action.flair === "string" ? c_action.flair : c_action.flair();
      parent.append($(`<div class="flair has-text-flair">${flair}</div>`));
      parent.addClass("flair");
    }
    if (c_action["reqs"]) {
      let reqList = [];
      Object.keys(c_action.reqs).forEach(function(r) {
        let req = $(`#${c_action.id}`).attr(`data-req-${r}`);
        if (req) {
          reqList.push(typeof actions.tech[req].title === "string" ? actions.tech[req].title : actions.tech[req].title());
        }
      });
      if (reqList.length > 0) {
        let listing = reqList.join(", ");
        parent.append($(`<div class="has-text-caution">${loc("requires_tech", [listing])}</div>`));
      }
    }
    if (!old && c_action.id.substring(0, 5) !== "blood" && !checkAffordable(c_action) && checkAffordable(c_action, true)) {
      if (typeof obj === "string" && obj === "notimer") {
        return;
      }
      if (obj && obj["time"]) {
        parent.append($(`<div id="popTimer" class="flair has-text-advanced">{{ time | timer }}</div>`));
        vBind({
          el: "#popTimer",
          data: obj,
          filters: {
            timer(t) {
              return loc("action_ready", [t]);
            }
          }
        });
      } else {
        let time = timeFormat(tc.t);
        parent.append($(`<div class="flair has-text-advanced">${loc("action_ready", [time])}</div>`));
      }
    }
    if (c_action.id === "portal-spire" || c_action.id === "portal-waygate" && global.tech.waygate >= 2) {
      if (obj && obj["time"]) {
        parent.append($(`<div id="popTimer" class="flair has-text-advanced">{{ time | timer }}</div>`));
        vBind({
          el: "#popTimer",
          data: obj,
          filters: {
            timer(t) {
              let time = !c_action.hasOwnProperty("mscan") || c_action.hasOwnProperty("mscan") && c_action.mscan() > 0 ? t : "???";
              return loc("floor_clearing", [time]);
            }
          }
        });
      }
    }
    if (c_action.id === "portal-devilish_dish") {
      if (obj && obj["time"]) {
        parent.append($(`<div id="popTimer" class="flair has-text-advanced">{{ time | timer }}</div>`));
        vBind({
          el: "#popTimer",
          data: obj,
          filters: {
            timer(t) {
              let time = !c_action.hasOwnProperty("mscan") || c_action.hasOwnProperty("mscan") && c_action.mscan() > 0 ? t : "???";
              return loc("action_done", [time]);
            }
          }
        });
      }
    }
  }
  function removeAction(id) {
    clearElement($(`#${id}`), true);
    clearPopper(id);
  }
  function updateDesc(c_action, category, action) {
    var id = c_action.id;
    if (global[category] && global[category][action] && global[category][action]["count"]) {
      if (!c_action.hasOwnProperty("count")) {
        $(`#${id} .count`).html(global[category][action].count);
      }
      if (global[category][action] && global[category][action].count > 0) {
        $(`#${id} .count`).css("display", "inline-block");
        $(`#${id} .special`).css("display", "block");
        $(`#${id} .on`).css("display", "block");
        $(`#${id} .off`).css("display", "block");
      }
    }
    if ($("#popper").data("id") === id) {
      actionDesc($("#popper"), c_action, global[category][action], false, category, action);
    }
  }
  function payCosts(c_action, costs) {
    costs = costs || adjustCosts(c_action);
    if (checkCosts(costs)) {
      Object.keys(costs).forEach(function(res) {
        if (global.prestige.hasOwnProperty(res)) {
          let cost = costs[res]();
          if (res === "Plasmid" && global.race.universe === "antimatter") {
            res = "AntiPlasmid";
          }
          global.prestige[res].count -= cost;
        } else if (res === "Supply") {
          let cost = costs[res]();
          global.portal.purifier.supply -= cost;
        } else if (res === "Species") {
          let cost = costs[res]();
          global.resource[global.race.species].amount -= cost;
          global.civic[global.civic.d_job].workers = Math.max(0, global.civic[global.civic.d_job].workers - cost);
        } else if (res !== "Morale" && res !== "Army" && res !== "HellArmy" && res !== "Troops" && res !== "Structs" && res !== "Bool" && res !== "Custom") {
          let cost = costs[res]();
          global.resource[res].amount -= cost;
          if (res === "Knowledge") {
            global.stats.know += cost;
          }
        }
      });
      return true;
    }
    return false;
  }
  function checkAffordable(c_action, max, raw) {
    if (c_action.cost) {
      let cost = raw ? c_action.cost : adjustCosts(c_action);
      if (max) {
        return checkMaxCosts(cost);
      } else {
        return checkCosts(cost);
      }
    }
    return true;
  }
  function templeCount(zig) {
    if (!zig && global.city["temple"]) {
      let count = global.city.temple.count;
      if (!global.race["cataclysm"] && !global.race["orbit_decayed"] && !global.race["lone_survivor"] && !global.race["warlord"]) {
        if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.temple) {
          count++;
        }
        if (global.genes.hasOwnProperty("ancients") && global.genes.ancients >= 6) {
          count++;
        }
      }
      return count;
    } else if (zig && global.space["ziggurat"]) {
      let count = global.space.ziggurat.count;
      if (!global.race["lone_survivor"] && !global.race["warlord"]) {
        if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.zigg) {
          count++;
        }
        if (global.genes.hasOwnProperty("ancients") && global.genes.ancients >= 7) {
          count++;
        }
      }
      return count;
    }
    return 0;
  }
  function checkMaxCosts(costs) {
    var test = true;
    Object.keys(costs).forEach(function(res) {
      if (res === "Custom") {
      } else if (res === "Structs") {
        if (!checkStructs(costs[res]())) {
          test = false;
          return;
        }
      } else if (global.prestige.hasOwnProperty(res)) {
        let oRes = res;
        if (res === "Plasmid" && global.race.universe === "antimatter") {
          res = "AntiPlasmid";
        }
        if (global.prestige[res].count < Number(costs[oRes]())) {
          test = false;
          return;
        }
      } else if (res === "Bool") {
        if (!costs[res]()) {
          test = false;
          return;
        }
      } else if (res === "Morale") {
        if (global.city.morale.current < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Army") {
        if (armyRating(global.civic.garrison.raid, "army") < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "HellArmy") {
        if (typeof global.portal["fortress"] === "undefined" || global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Troops") {
        if (garrisonSize() < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Supply") {
        if (!global.portal.hasOwnProperty("purifier") || global.portal.purifier.sup_max < Number(costs[res]())) {
          test = false;
          return;
        }
      } else {
        var testCost = Number(costs[res]()) || 0;
        let f_res = res === "Species" ? global.race.species : res;
        if (!global.resource[f_res].display && testCost > 0 || global.resource[f_res].max >= 0 && testCost > Number(global.resource[f_res].max) && Number(global.resource[f_res].max) !== -1) {
          test = false;
          return;
        }
      }
    });
    return test;
  }
  function checkCosts(costs) {
    var test = true;
    Object.keys(costs).forEach(function(res) {
      if (res === "Custom") {
        let custom = costs[res]();
        if (!custom.met) {
          test = false;
          return;
        }
      } else if (res === "Structs") {
        if (!checkStructs(costs[res]())) {
          test = false;
          return;
        }
      } else if (global.prestige.hasOwnProperty(res)) {
        let oRes = res;
        if (res === "Plasmid" && global.race.universe === "antimatter") {
          res = "AntiPlasmid";
        }
        if (global.prestige[res].count < Number(costs[oRes]())) {
          test = false;
          return;
        }
      } else if (res === "Bool") {
        if (!costs[res]()) {
          test = false;
          return;
        }
      } else if (res === "Morale") {
        if (global.city.morale.current < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Army") {
        if (armyRating(global.civic.garrison.raid, "army") < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "HellArmy") {
        if (typeof global.portal["fortress"] === "undefined" || global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Troops") {
        if (garrisonSize() < Number(costs[res]())) {
          test = false;
          return;
        }
      } else if (res === "Supply") {
        if (!global.portal.hasOwnProperty("purifier") || global.portal.purifier.supply < Number(costs[res]())) {
          test = false;
          return;
        }
      } else {
        var testCost = Number(costs[res]()) || 0;
        if (testCost === 0) {
          return;
        }
        let f_res = res === "Species" ? global.race.species : res;
        if (testCost > Number(global.resource[f_res].amount) || global.resource[f_res].max >= 0 && testCost > global.resource[f_res].max) {
          test = false;
          return;
        }
      }
    });
    return test;
  }
  function checkStructs(structs) {
    let test = true;
    Object.keys(structs).forEach(function(region) {
      if (global.hasOwnProperty(region)) {
        Object.keys(structs[region]).forEach(function(struct) {
          if (global[region].hasOwnProperty(struct)) {
            if (global[region][struct].count < structs[region][struct].count) {
              test = false;
              return;
            }
            if (structs[region][struct].hasOwnProperty("on")) {
              let num_on;
              if (structs[region][struct].hasOwnProperty("s")) {
                const sector = structs[region][struct].s;
                num_on = getStructNumActive(actions[region][sector][struct]);
              } else {
                num_on = getStructNumActive(actions[region][struct]);
              }
              if (num_on < structs[region][struct].on) {
                test = false;
                return;
              }
            }
          } else {
            test = false;
            return;
          }
        });
      } else {
        test = false;
        return;
      }
    });
    return test;
  }
  function conceal_adjust(mana) {
    if (global.tech["nexus"] && global.tech["roguemagic"] && global.tech.roguemagic >= 7) {
      mana *= 0.96 ** global.tech.nexus;
    }
    return mana;
  }
  function dirt_adjust(creep) {
    let dirtVal = govActive("dirty_jobs", 0);
    if (dirtVal) {
      creep -= dirtVal;
    }
    return creep;
  }
  function challengeGeneHeader() {
    let challenge = $(`<div class="challenge"></div>`);
    $("#evolution").append(challenge);
    challenge.append($(`<div class="divider has-text-warning"><h2 class="has-text-danger">${loc("evo_challenge_genes")}</h2></div>`));
    challenge.append($(`<div class="has-text-advanced">${loc("evo_challenge_genes_desc")}</div>`));
    if (global.genes["challenge"] && global.genes["challenge"] >= 2) {
      challenge.append($(`<div class="has-text-advanced">${loc("evo_challenge_genes_mastery")}</div>`));
    }
  }
  function challengeActionHeader() {
    let challenge = $(`<div class="challenge"></div>`);
    $("#evolution").append(challenge);
    challenge.append($(`<div class="divider has-text-warning"><h2 class="has-text-danger">${loc("evo_challenge_run")}</h2></div>`));
    challenge.append($(`<div class="has-text-advanced">${loc("evo_challenge_run_desc")}</div>`));
  }
  function scenarioActionHeader() {
    let challenge = $(`<div class="challenge"></div>`);
    $("#evolution").append(challenge);
    challenge.append($(`<div class="divider has-text-warning"><h2 class="has-text-danger">${loc("evo_scenario")}</h2></div>`));
    challenge.append($(`<div class="has-text-advanced">${loc("evo_scenario_desc")}</div>`));
  }
  function exitSimulation() {
    let challenge = $(`<div id="simSection" class="challenge"></div>`);
    $("#evolution").append(challenge);
    challenge.append($(`<div class="divider has-text-warning"><h2 class="has-text-danger">${loc("evo_challenge_simulation")}</h2></div>`));
    challenge.append($(`<div class="has-text-advanced">${loc("evo_challenge_simulation_desc")}</div>`));
    challenge.append($(`<button class="button simButton" @click="exitsim()">${loc(`evo_challenge_end_sim`)}</button>`));
    vBind({
      el: "#simSection",
      data: {},
      methods: {
        exitsim() {
          exitSim();
        }
      }
    });
  }
  function configSimulation() {
    let challenge = $(`<div id="simSection" class="challenge"></div>`);
    $("#evolution").append(challenge);
    challenge.append($(`<div class="divider has-text-warning"><h2 class="has-text-danger">${loc("evo_challenge_simulation")}</h2></div>`));
    challenge.append($(`<div class="has-text-advanced">${loc("evo_challenge_simulation_desc")}</div>`));
    let config = $($(`<div class="configList"></div>`));
    challenge.append(config);
    if (!global.race["simConfig"]) {
      global.race["simConfig"] = {};
    }
    ["Plasmid", "AntiPlasmid", "Phage", "Dark", "Harmony", "AICore", "Artifact", "Blood_Stone"].forEach(function(res) {
      global.race.simConfig[res] = global.race.simConfig[res] || 0;
      config.append($(`<div><span class="has-text-warning">${loc(`resource_${res}_name`)}</span><input type="number" min="0" class="input" v-model="${res}"></div>`));
    });
    vBind({
      el: "#simSection",
      data: global.race.simConfig
    });
  }
  function drawModal2(c_action, type) {
    let title = typeof c_action.title === "string" ? c_action.title : c_action.title();
    $("#modalBox").append($(`<p id="modalBoxTitle" class="has-text-warning modalTitle">${title}</p>`));
    var body = $('<div id="specialModal" class="modalBody"></div>');
    $("#modalBox").append(body);
    switch (type) {
      case "smelter":
      case "hell_smelter":
      case "stellar_forge":
      case "hell_forge":
      case "demon_forge":
      case "sacred_smelter":
      case "geothermal":
      case "ore_refinery":
        loadIndustry("smelter", body);
        break;
      case "factory":
      case "red_factory":
      case "int_factory":
      case "tau_factory":
      case "hell_factory":
        loadIndustry("factory", body);
        break;
      case "star_dock":
        starDockModal(body);
        break;
      case "mining_droid":
        loadIndustry("droid", body);
        break;
      case "g_factory":
      case "refueling_station":
      case "twisted_lab":
        loadIndustry("graphene", body);
        break;
      case "freighter":
      case "super_freighter":
        galacticTrade(body);
        break;
      case "pylon":
        loadIndustry("pylon", body);
        break;
      case "rock_quarry":
        loadIndustry("rock_quarry", body);
        break;
      case "titan_mine":
        loadIndustry("titan_mine", body);
        break;
      case "mining_ship":
        loadIndustry("mining_ship", body);
        break;
      case "alien_space_station":
        loadIndustry("alien_space_station", body);
        break;
      case "nanite_factory":
        loadIndustry("nanite_factory", body);
        break;
      case "alien_outpost":
        loadIndustry("replicator", body);
        break;
      case "mech_station":
        loadIndustry("mech_station", body);
        break;
    }
  }
  function starDockModal(modal) {
    if (global.tech["genesis"] < 4) {
      let warn = $(`<div><span class="has-text-warning">${loc("stardock_warn")}</span></div>`);
      modal.append(warn);
      return;
    }
    let dock = $(`<div id="starDock" class="actionSpace"></div>`);
    modal.append(dock);
    let c_action = actions.starDock.probes;
    setAction(c_action, "starDock", "probes");
    if (global.tech["geck"] && global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 5) {
      let c_action2 = actions.starDock.geck;
      setAction(c_action2, "starDock", "geck");
    }
    if (global.tech["genesis"] >= 5) {
      let c_action2 = actions.starDock.seeder;
      setAction(c_action2, "starDock", "seeder");
    }
    if (global.tech["genesis"] === 6) {
      let c_action2 = actions.starDock.prep_ship;
      setAction(c_action2, "starDock", "prep_ship");
    }
    if (global.tech["genesis"] >= 7) {
      let c_action2 = actions.starDock.launch_ship;
      setAction(c_action2, "starDock", "launch_ship");
    }
  }
  function orbitDecayed() {
    if (global.race["orbit_decay"] && global.stats.hasOwnProperty("days") && global.stats.days >= global.race["orbit_decay"] && !global.race["orbit_decayed"]) {
      global.race["orbit_decayed"] = true;
      if (global.race["tidal_decay"]) {
        messageQueue(loc("planet_kamikaze_msg"), "info", false, ["progress"]);
      } else {
        messageQueue(loc("evo_challenge_orbit_decayed_msg", [races[global.race.species].home]), "info", false, ["progress"]);
      }
      if (global.race.universe === "magic") {
        if (global.city["pylon"]) {
          global.space["pylon"] = { count: Math.ceil(global.city.pylon.count / 2) };
        }
        cancelRituals();
      }
      Object.keys(actions.city).forEach(function(k) {
        if (global.city.hasOwnProperty(k) && global.city[k].hasOwnProperty("count")) {
          if (global.race["hooved"]) {
            if (actions.city[k].cost.hasOwnProperty("Horseshoe")) {
              global.race["shoecnt"] -= actions.city[k].cost.Horseshoe() * global.city[k].count;
            }
          }
          global.city[k].count = 0;
          if (global.city[k].hasOwnProperty("on")) {
            global.city[k].on = 0;
          }
        }
      });
      if (global.race["hooved"] && global.race["shoecnt"] < 5) {
        global.race.shoecnt = 5;
      }
      if (global.resource.Zen.display) {
        global.resource.Zen.display = false;
      }
      if (global.resource.Slave.display) {
        global.resource.Slave.display = false;
        global.resource.Slave.amount = 0;
        removeTask("slave");
        defineGovernor();
      }
      if (global.race["deconstructor"]) {
        nf_resources.forEach(function(res) {
          global.city.nanite_factory[res] = 0;
        });
      }
      Object.keys(global.resource).forEach(function(res) {
        if (global.resource[res].hasOwnProperty("trade")) {
          global.resource[res].trade = 0;
        }
      });
      global.space["red_university"] = { count: 0 };
      Object.keys(actions.space.spc_moon).forEach(function(k) {
        if (global.space.hasOwnProperty(k) && global.space[k].hasOwnProperty("count")) {
          global.space[k].count = 0;
          if (global.space[k].hasOwnProperty("on")) {
            global.space[k].on = 0;
          }
        }
      });
      Object.keys(job_desc).forEach(function(job) {
        if (job !== "colonist") {
          global.civic[job].workers = 0;
          global.civic[job].assigned = 0;
        }
      });
      ["bolognium_ship", "scout_ship", "corvette_ship", "frigate_ship", "cruiser_ship", "dreadnought", "freighter", "super_freighter", "armed_miner", "scavenger"].forEach(function(ship) {
        if (global.galaxy[ship]) {
          global.galaxy[ship].on = 0;
        }
      });
      if (global.portal["transport"]) {
        global.portal.transport.on = 0;
      }
      ["forager", "farmer", "lumberjack", "quarry_worker"].forEach(function(job) {
        global.civic[job].display = false;
      });
      if (global.civic.hunter.display) {
        global.civic.d_job = "hunter";
      } else {
        global.civic.d_job = "unemployed";
      }
      for (let building of Object.values(global.race.purgatory.city)) {
        if (building.hasOwnProperty("count")) {
          building.count = 0;
        }
        if (building.hasOwnProperty("on")) {
          building.on = 0;
        }
      }
      if (global.queue.hasOwnProperty("queue")) {
        for (let i = global.queue.queue.length - 1; i >= 0; i--) {
          let item = global.queue.queue[i];
          if (item.action === "city" || item.action === "space" && actions.space.spc_moon[item.type]) {
            global.queue.queue.splice(i, 1);
          }
        }
      }
      if (global.arpa["sequence"]) {
        global.arpa.sequence.on = false;
        global.arpa.sequence.boost = false;
      }
      global.city.calendar.moon = 0;
      document.getElementById("moon").removeAttribute("class");
      $("#moon").addClass("moon wi wi-moon-new");
      global.settings.spaceTabs = 1;
      global.settings.space.moon = false;
      global.settings.showCity = false;
      clearElement($(`#infoTimer`));
      renderSpace();
    }
  }
  function evoProgress() {
    clearElement($("#evolution .evolving"), true);
    let progress = $(`<div class="evolving"><progress class="progress" value="${global.evolution.final}" max="100">${global.evolution.final}%</progress></div>`);
    $("#evolution").append(progress);
  }
  function wardenLabel() {
    if (global.race.universe === "magic") {
      return loc("city_wizard_tower_title");
    } else {
      return global.race["evil"] ? loc("city_babel_title") : loc("city_wardenclyffe");
    }
  }
  function basicHousingLabel() {
    let halloween = eventActive("halloween");
    if (halloween.active) {
      return loc(`events_halloween_basic_house`);
    }
    switch (global.race.species) {
      case "orc":
        return loc("city_basic_housing_orc_title");
      case "wolven":
        return loc("city_basic_housing_wolven_title");
      case "sporgar":
        return loc("city_basic_housing_sporgar_title");
      case "dracnid":
        return loc("city_basic_housing_title7");
      case "balorg":
        return loc("city_basic_housing_title7");
      case "imp":
        return loc("city_basic_housing_title8");
      case "seraph":
        return loc("city_basic_housing_seraph_title");
      case "unicorn":
        return loc("city_basic_housing_unicorn_title");
    }
    switch (global.race.maintype || races[global.race.species].type) {
      case "avian":
        return loc("city_basic_housing_nest_title");
      case "plant":
        return loc("city_basic_housing_entish_title");
      case "sand":
        return loc("city_basic_housing_sand_title");
      case "polar":
        return loc("city_basic_housing_polar_title");
      case "eldritch":
        return loc("city_basic_housing_eldritch_title");
    }
    return global.city.ptrait.includes("trashed") ? loc("city_basic_housing_trash_title") : loc("city_basic_housing_title");
  }
  function mediumHousingLabel() {
    let halloween = eventActive("halloween");
    if (halloween.active) {
      return loc(`events_halloween_medium_house`);
    }
    switch (global.race.species) {
      case "sporgar":
        return loc("city_cottage_title2");
      case "balorg":
        return loc("city_cottage_title3");
      case "imp":
        return loc("city_basic_housing_title7");
      case "seraph":
        return loc("city_cottage_title4");
      case "unicorn":
        return loc("city_cottage_title5");
      case "dracnid":
        return loc("city_cottage_title7");
    }
    switch (global.race.maintype || races[global.race.species].type) {
      case "avian":
        return loc("city_cottage_title6");
      case "eldritch":
        return loc("city_cottage_title8");
    }
    return loc("city_cottage_title1");
  }
  function largeHousingLabel(basic) {
    let halloween = eventActive("halloween");
    if (halloween.active) {
      return loc(`events_halloween_large_house`);
    }
    if (!basic && govActive("extravagant", 0)) {
      return loc(`city_mansion`);
    }
    switch (global.race.species) {
      case "sporgar":
        return loc("city_apartment_title2");
    }
    switch (global.race.maintype || races[global.race.species].type) {
      case "avian":
        return loc("city_apartment_title5");
      case "sand":
        return loc("city_apartment_title6");
      case "demonic":
        return loc("city_apartment_title3");
      case "angelic":
        return loc("city_apartment_title4");
      case "giant":
        return loc("city_apartment_title7");
      case "eldritch":
        return loc("city_apartment_title8");
    }
    return loc("city_apartment_title1");
  }
  function housingLabel(type, flag) {
    switch (type) {
      case "small":
        return basicHousingLabel();
      case "medium":
        return mediumHousingLabel();
      case "large":
        return largeHousingLabel(flag);
    }
  }
  function structName(type) {
    let halloween = eventActive("halloween");
    switch (type) {
      case "casino": {
        return halloween.active ? loc(`events_halloween_casino`) : global.race["warlord"] ? loc(`portal_casino`) : loc(`city_casino`);
      }
      case "farm": {
        return halloween.active ? loc(`events_halloween_farm`) : loc(`city_farm`);
      }
      case "dormitory": {
        return halloween.active ? loc(`events_halloween_dorm`) : loc(`galaxy_dormitory`);
      }
      case "mine": {
        return halloween.active ? loc(`events_halloween_mine`) : loc("city_mine");
      }
      case "coal_mine": {
        return halloween.active ? loc(`events_halloween_coal_mine`) : loc("city_coal_mine");
      }
      case "lumberyard": {
        return halloween.active ? loc(`events_halloween_lumberyard`) : loc("city_lumber_yard");
      }
      case "sawmill": {
        return halloween.active ? loc(`events_halloween_sawmill`) : loc("city_sawmill");
      }
      case "hospital": {
        return halloween.active ? loc(`events_halloween_hospital`) : loc("city_hospital");
      }
      case "windmill": {
        return halloween.active ? loc(`events_halloween_windmill`) : loc("city_mill_title2");
      }
      case "factory": {
        return halloween.active ? loc(`events_halloween_factory`) : loc("city_factory");
      }
      case "storage_yard": {
        return halloween.active ? loc(`events_halloween_storage_yard`) : loc("city_storage_yard");
      }
      case "temple": {
        return halloween.active ? loc(`events_halloween_temple`) : global.race.universe === "evil" && global.civic.govern.type != "theocracy" ? loc("city_propaganda") : loc("city_temple");
      }
    }
  }
  function updateQueueNames(both, items) {
    if (global.tech["queue"] && global.queue.display) {
      let deepScan = ["space", "interstellar", "galaxy", "portal", "tauceti"];
      for (let i = 0; i < global.queue.queue.length; i++) {
        let currItem = global.queue.queue[i];
        if (!items || items.indexOf(currItem.id) > -1) {
          if (deepScan.includes(currItem.action)) {
            let scan = true;
            Object.keys(actions[currItem.action]).forEach(function(region) {
              if (actions[currItem.action][region][currItem.type] && scan) {
                global.queue.queue[i].label = typeof actions[currItem.action][region][currItem.type].title === "string" ? actions[currItem.action][region][currItem.type].title : actions[currItem.action][region][currItem.type].title();
                scan = false;
              }
            });
          } else if (actions[currItem.action]?.[currItem.type]) {
            global.queue.queue[i].label = typeof actions[currItem.action][currItem.type].title === "string" ? actions[currItem.action][currItem.type].title : actions[currItem.action][currItem.type].title();
          }
        }
      }
    }
    if (both && global.tech["r_queue"] && global.r_queue.display) {
      for (let i = 0; i < global.r_queue.queue.length; i++) {
        global.r_queue.queue[i].label = typeof actions.tech[global.r_queue.queue[i].type].title === "string" ? actions.tech[global.r_queue.queue[i].type].title : actions.tech[global.r_queue.queue[i].type].title();
      }
    }
  }
  function initStruct(c_action) {
    let path = c_action.struct().p;
    if (!global[path[1]].hasOwnProperty(path[0])) {
      global[path[1]][path[0]] = deepClone(c_action.struct().d);
    }
  }
  function evoExtraState(race) {
    if ((race === "synth" || race === "custom" && global.custom.race0.traits.includes("imitation") || race === "hybrid" && global.custom.race1.traits.includes("imitation")) && Object.keys(global.stats.synth).length > 1) {
      global.race["evoFinalMenu"] = race;
      drawEvolution();
      return true;
    } else {
      global.race.species = race;
      sentience();
    }
  }
  function sentience() {
    if (global.race["simulation"]) {
      simulation();
    }
    if (global["sim"]) {
      global.settings.showGenetics = true;
      global.settings.arpa.physics = false;
      global.settings.arpa.crispr = true;
      global.settings.arpa.arpaTabs = 2;
    }
    if (global.resource.hasOwnProperty("RNA")) {
      global.resource.RNA.display = false;
    }
    if (global.resource.hasOwnProperty("DNA")) {
      global.resource.DNA.display = false;
    }
    if (global.race.species === "junker" || global.race.species === "sludge" || global.race.species === "ultra_sludge") {
      setJType();
    }
    if (global.race.species !== "junker") {
      delete global.race["junker"];
    }
    if (global.race.species !== "sludge") {
      delete global.race["sludge"];
    }
    if (global.race.species !== "ultra_sludge") {
      delete global.race["ultra_sludge"];
    }
    var evolve_actions = ["rna", "dna", "membrane", "organelles", "nucleus", "eukaryotic_cell", "mitochondria"];
    for (var i = 0; i < evolve_actions.length; i++) {
      if (global.race[evolve_actions[i]]) {
        clearElement($("#" + actions.evolution[evolve_actions[i]].id), true);
        clearPopper(actions.evolution[evolve_actions[i]].id);
      }
    }
    if (global.race["warlord"]) {
      let trait = races[global.race.species].fanaticism;
      global.race["absorbed"] = [global.race.species];
      global.race["origin"] = global.race.species;
      global.race.species = "hellspawn";
      if (trait === "kindling_kindred") {
        trait = "iron_wood";
      }
      setTraitRank(trait, { set: 0.5 });
    } else {
      let typeList = global.stats.achieve["godslayer"] && races[global.race.species].type === "hybrid" ? races[global.race.species].hybrid : [races[global.race.species].type];
      typeList.forEach(function(type) {
        Object.keys(genus_def[type].traits).forEach(function(trait) {
          let mainspec = global.tech[`evo_${type}`] >= 2 ? true : false;
          if (mainspec) {
            global.race["maintype"] = type;
            setTraitRank(trait, { set: genus_def[type].traits[trait] });
            if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 4) {
              setTraitRank(trait);
            }
          } else {
            setTraitRank(trait, { set: genus_def[type].traits[trait] });
            setTraitRank(trait, { down: true });
          }
        });
      });
      Object.keys(races[global.race.species].traits).forEach(function(trait) {
        setTraitRank(trait, { set: races[global.race.species].traits[trait] });
      });
      if (global.race["evil"] && global.race["maintype"] && global.race.maintype === "angelic") {
        delete global.race["evil"];
      }
      if (global.race["imitation"] && global.race["srace"]) {
        setImitation(false);
      }
    }
    if (!global.race.inactiveTraits) {
      global.race.inactiveTraits = {};
    }
    combineTraits();
    Object.keys(global.tech).forEach(function(tech) {
      if (tech.substring(0, 4) === "evo_") {
        delete global.tech[tech];
      }
    });
    delete global.tech["evo"];
    global.evolution = {};
    if (global.race["ocular_power"]) {
      global.settings.showWish = true;
      global.race["ocularPowerConfig"] = {
        d: false,
        p: false,
        w: false,
        t: false,
        f: false,
        c: false,
        ds: 0
      };
      renderSupernatural();
    }
    const date2 = /* @__PURE__ */ new Date();
    if (!global.settings.boring && date2.getMonth() === 11 && date2.getDate() >= 17) {
      if (global.race.species === "elven") {
        setTraitRank("slaver", { set: 2 });
        setTraitRank("resourceful", { set: 0.5 });
        setTraitRank("small", { set: 0.25 });
      } else if (global.race.species === "capybara") {
        setTraitRank("beast_of_burden", { set: 1 });
        setTraitRank("pack_rat", { set: 0.5 });
        setTraitRank("musical", { set: 0.25 });
      } else if (global.race.species === "centaur") {
        setTraitRank("beast_of_burden", { set: 1 });
        setTraitRank("curious", { set: 0.5 });
        setTraitRank("blissful", { set: 0.25 });
      } else if (global.race.species === "wendigo") {
        setTraitRank("immoral", { set: 3 });
        setTraitRank("cannibalize", { set: 0.5 });
        setTraitRank("claws", { set: 0.25 });
      } else if (global.race.species === "yeti") {
        setTraitRank("scavenger", { set: 3 });
        setTraitRank("regenerative", { set: 0.5 });
        setTraitRank("musical", { set: 0.25 });
      } else if (global.race.species === "entish") {
        setTraitRank("photosynth", { set: 3 });
        setTraitRank("optimistic", { set: 0.5 });
        setTraitRank("armored", { set: 0.25 });
      }
    }
    const easter2 = eventActive("easter");
    if (global.race.species === "wolven" && easter2.active) {
      setTraitRank("hyper", { set: 1 });
      setTraitRank("fast_growth", { set: 1 });
      setTraitRank("rainbow", { set: 1 });
      setTraitRank("optimistic", { set: 1 });
    } else if (global.race.species === "vulpine" && easter2.active) {
      setTraitRank("cannibalize", { set: 2 });
      setTraitRank("rage", { set: 1 });
      setTraitRank("blood_thirst", { set: 1 });
      setTraitRank("sticky", { set: 1 });
    }
    const hallowed2 = getHalloween();
    if (global.race.species === "unicorn" && hallowed2.active) {
      setTraitRank("gloomy", { set: 1 });
      setTraitRank("darkness", { set: 1 });
      delete global.race["rainbow"];
    } else if (global.race.species === "human" && hallowed2.active) {
      setTraitRank("anthropophagite", { set: 1 });
      setTraitRank("cannibalize", { set: 2 });
      setTraitRank("infectious", { set: 3 });
    } else if (global.race.species === "tortoisan" && hallowed2.active) {
      setTraitRank("hyper", { set: 0.25 });
      setTraitRank("swift", { set: 0.5 });
      setTraitRank("infiltrator", { set: 1 });
      delete global.race["slow"];
    }
    if (global.race["no_crispr"] || global.race["badgenes"]) {
      let repeat = global.race["badgenes"] ? 3 : 1;
      for (let j = 0; j < repeat; j++) {
        for (let i2 = 0; i2 < 10; i2++) {
          let trait = neg_roll_traits[Math.rand(0, neg_roll_traits.length)];
          if (global.race[trait]) {
            if (global.race[trait] == 0.25) {
              continue;
            }
            setTraitRank(trait, { down: true });
            if (j === 0 && global.race["badgenes"]) {
              setTraitRank(trait, { down: true });
            }
            break;
          } else if (global.race["smart"] && trait === "dumb") {
            continue;
          }
          if (!global.race[trait]) {
            let rank = 1;
            if (global.race["badgenes"]) {
              rank = j === 0 ? 0.5 : 2;
            }
            global.race[trait] = rank;
            break;
          }
        }
      }
    }
    if (global.race.universe === "evil") {
      if (global.race["evil"]) {
        delete global.race["evil"];
      } else if (races[global.race.species].type !== "angelic") {
        global.race["evil"] = 1;
      }
    } else if (global.race.universe === "antimatter" && (!global.stats.feat["annihilation"] || global.stats.feat["annihilation"] < alevel())) {
      global.race["amexplode"] = 1;
    }
    if (global.race["unified"]) {
      global.tech["world_control"] = 1;
      global.tech["unify"] = 2;
    }
    if (global.race["orbit_decay"]) {
      global.race["orbit_decay"] = 5e3;
      popover(
        `infoTimer`,
        function() {
          return global.race["orbit_decayed"] ? "" : loc("evo_challenge_orbit_decay_impact", [global.race["orbit_decay"] - global.stats.days]);
        },
        {
          elm: `#infoTimer`,
          classes: `has-background-light has-text-dark`
        }
      );
    }
    clearElement($("#resources"));
    defineResources();
    if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
      global.resource.Lumber.display = true;
    } else {
      global.resource.Stone.display = true;
    }
    registerTech("club");
    global.city.calendar.day = 0;
    var city_actions = global.race["kindling_kindred"] || global.race["smoldering"] ? ["food", "stone"] : ["food", "lumber", "stone"];
    if (global.race["smoldering"]) {
      city_actions.push("chrysotile");
    }
    if (global.race["evil"] && !global.race["kindling_kindred"] && !global.race["smoldering"]) {
      global.city["slaughter"] = 1;
      city_actions = ["slaughter"];
    }
    for (var i = 0; i < city_actions.length; i++) {
      if (global.city[city_actions[i]]) {
        addAction("city", city_actions[i]);
      }
    }
    if (global.race.species === "custom" && global.custom.hasOwnProperty("race0")) {
      global.race["untapped"] = calcGenomeScore({
        name: global.custom.race0.name,
        desc: global.custom.race0.desc,
        entity: global.custom.race0.entity,
        home: global.custom.race0.home,
        red: global.custom.race0.red,
        hell: global.custom.race0.hell,
        gas: global.custom.race0.gas,
        gas_moon: global.custom.race0.gas_moon,
        dwarf: global.custom.race0.dwarf,
        genes: 0,
        genus: global.custom.race0.genus,
        traitlist: global.custom.race0.traits,
        ranks: global.custom.race0?.ranks || {}
      });
    }
    if (global.race.species === "hybrid" && global.custom.hasOwnProperty("race1")) {
      global.race["untapped"] = calcGenomeScore({
        name: global.custom.race1.name,
        desc: global.custom.race1.desc,
        entity: global.custom.race1.entity,
        home: global.custom.race1.home,
        red: global.custom.race1.red,
        hell: global.custom.race1.hell,
        gas: global.custom.race1.gas,
        gas_moon: global.custom.race1.gas_moon,
        dwarf: global.custom.race1.dwarf,
        genes: 0,
        genus: global.custom.race1.genus,
        hybrid: global.custom.race1.hybrid,
        traitlist: global.custom.race1.traits,
        ranks: global.custom.race1?.ranks || {}
      });
    }
    if (global.race.unfathomable) {
      global.city["surfaceDwellers"] = [];
      while (global.city.surfaceDwellers.length < traits.unfathomable.vars()[0]) {
        global.city.surfaceDwellers.push(basicRace(global.city.surfaceDwellers));
      }
    }
    global.settings.civTabs = 1;
    global.settings.showEvolve = false;
    global.settings.showCiv = true;
    global.settings.showCity = true;
    global.civic.govern.type = "anarchy";
    global.civic.govern.rev = 0;
    global.civic.govern.fr = 0;
    if (global.genes["queue"]) {
      global.tech["queue"] = 1;
      global.tech["r_queue"] = 1;
      global.queue.display = true;
      global.r_queue.display = true;
      if (!global.settings.msgFilters.queue.unlocked) {
        global.settings.msgFilters.queue.unlocked = true;
        global.settings.msgFilters.queue.vis = true;
      }
      if (!global.settings.msgFilters.building_queue.unlocked) {
        global.settings.msgFilters.building_queue.unlocked = true;
        global.settings.msgFilters.building_queue.vis = true;
        global.settings.msgFilters.research_queue.unlocked = true;
        global.settings.msgFilters.research_queue.vis = true;
      }
      if (global.settings.tabLoad) {
        $(`#resQueue`).removeAttr("style");
      }
    }
    Object.keys(global.genes.minor).forEach(function(trait) {
      global.race[trait] = trait === "mastery" ? global.genes.minor[trait] : global.genes.minor[trait] * 2;
    });
    let tempMTOrder = [];
    global.settings.mtorder.forEach(function(trait) {
      if (global.genes.minor[trait] || trait === "mastery") {
        tempMTOrder.push(trait);
      }
    });
    global.settings.mtorder = tempMTOrder;
    if (global.genes["evolve"] && global.genes["evolve"] >= 2) {
      for (let i2 = 1; i2 < 8; i2++) {
        if (global.genes["evolve"] >= i2 + 1) {
          randomMinorTrait(i2);
        }
      }
    }
    let civ0name = genCivName();
    global.civic.foreign.gov0["name"] = {
      s0: civ0name.s0,
      s1: civ0name.s1
    };
    let civ1name = genCivName();
    while (civ0name.s0 === civ1name.s0 && civ0name.s1 === civ1name.s1) {
      civ1name = genCivName();
    }
    global.civic.foreign.gov1["name"] = {
      s0: civ1name.s0,
      s1: civ1name.s1
    };
    let civ2name = genCivName();
    while (civ0name.s0 === civ2name.s0 && civ0name.s1 === civ2name.s1 || civ1name.s0 === civ2name.s0 && civ1name.s1 === civ2name.s1) {
      civ2name = genCivName();
    }
    global.civic.foreign.gov2["name"] = {
      s0: civ2name.s0,
      s1: civ2name.s1
    };
    if (global.race["truepath"] || global.race["lone_survivor"]) {
      global.civic.foreign.gov0.mil = Math.round(global.civic.foreign.gov0.mil * 1.5);
      global.civic.foreign.gov1.mil = Math.round(global.civic.foreign.gov1.mil * 1.4);
      global.civic.foreign.gov2.mil = Math.round(global.civic.foreign.gov2.mil * 1.25);
      global.civic.foreign["gov3"] = {
        unrest: 0,
        hstl: Math.floor(seededRandom(20, 40)),
        mil: Math.floor(seededRandom(650, 750)),
        eco: Math.floor(seededRandom(250, 300)),
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none"
      };
      let civAltName = genCivName(true);
      global.civic.foreign.gov3["name"] = {
        s0: civAltName.s0,
        s1: civAltName.s1
      };
      global.civic.foreign["gov4"] = {
        unrest: 0,
        hstl: 100,
        mil: 300,
        eco: 100,
        spy: 0,
        esp: 0,
        trn: 0,
        sab: 0,
        act: "none"
      };
      let civAltName2 = genCivName(true);
      while (civAltName2.s1 === civAltName.s1) {
        civAltName2 = genCivName(true);
      }
      global.civic.foreign.gov4["name"] = {
        s0: 99,
        s1: civAltName2.s1
      };
    }
    if (global.race["cataclysm"]) {
      messageQueue(loc("cataclysm_sentience", [races[global.race.species].home, flib("name")]), "info", false, ["progress"]);
    } else {
      messageQueue(loc("sentience", [loc("genelab_genus_" + (global.race.maintype || races[global.race.species].type)), races[global.race.species].entity, flib("name")]), "info", false, ["progress"]);
    }
    if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 1) {
      global.resource.Steel.display = true;
      global.resource.Steel.amount = 25;
      if (global.stats.achieve.technophobe.l >= 3) {
        if (!global.race["truepath"] && !global.race["lone_survivor"]) {
          global.resource.Soul_Gem.display = true;
        }
        let gems = 1;
        for (let i2 = 1; i2 < universe_affixes.length; i2++) {
          if (global.stats.achieve.technophobe[universe_affixes[i2]] && global.stats.achieve.technophobe[universe_affixes[i2]] >= 5) {
            gems++;
          }
        }
        global.resource.Soul_Gem.amount = gems;
      }
    }
    if (global.race.species === "tortoisan") {
      let color = Math.floor(seededRandom(100));
      if (color === 99) {
        global.race["shell_color"] = "rainbow";
      } else if (color >= 97 && color <= 98) {
        global.race["shell_color"] = "white";
      } else if (color >= 93 && color <= 96) {
        global.race["shell_color"] = "red";
      } else if (color >= 89 && color <= 92) {
        global.race["shell_color"] = "orange";
      } else if (color >= 85 && color <= 88) {
        global.race["shell_color"] = "yellow";
      } else if (color >= 75 && color <= 84) {
        global.race["shell_color"] = "purple";
      } else if (color >= 65 && color <= 74) {
        global.race["shell_color"] = "blue";
      } else {
        global.race["shell_color"] = "green";
      }
    }
    if (global.race.species === "vulpine") {
      let color = Math.floor(seededRandom(100));
      if (color >= 85) {
        global.race["fox_color"] = "white";
      } else if (color >= 70 && color <= 84) {
        global.race["fox_color"] = "tan";
      } else if (color >= 55 && color <= 69) {
        global.race["fox_color"] = "silver";
      } else if (color >= 35 && color <= 54) {
        global.race["fox_color"] = "grey";
      } else {
        global.race["fox_color"] = "red";
      }
    }
    calcPillar(true);
    if (global.blood["aware"]) {
      global.settings.arpa["blood"] = true;
      global.tech["b_stone"] = 2;
    }
    defineJobs(true);
    commisionGarrison();
    defineGovernment(true);
    if (global.race["shapeshifter"]) {
      shapeShift(false, true);
    }
    if (global.race["carnivore"] || global.race["soul_eater"] || global.race["unfathomable"]) {
      global.civic.d_job = "hunter";
      global.civic.hunter.display = true;
    } else if (global.race["forager"]) {
      global.civic.d_job = "forager";
      global.civic.forager.display = true;
    } else {
      global.civic.d_job = "unemployed";
      global.civic.unemployed.display = true;
    }
    if (global.race["hooved"]) {
      global.resource.Horseshoe.display = true;
      global.resource.Horseshoe.amount = 5;
      global.race["shoecnt"] = 5;
    }
    if (global.race["deconstructor"]) {
      global.resource.Nanite.display = true;
      global.city["nanite_factory"] = {
        count: 1,
        Lumber: 0,
        Chrysotile: 0,
        Stone: 0,
        Crystal: 0,
        Furs: 0,
        Copper: 0,
        Iron: 0,
        Aluminium: 0,
        Cement: 0,
        Coal: 0,
        Oil: 0,
        Uranium: 0,
        Steel: 0,
        Titanium: 0,
        Alloy: 0,
        Polymer: 0,
        Iridium: 0,
        Helium_3: 0,
        Water: 0,
        Deuterium: 0,
        Neutronium: 0,
        Adamantite: 0,
        Bolognium: 0,
        Orichalcum: 0
      };
      global.settings.showIndustry = true;
    }
    calc_mastery(true);
    if (global.race["truepath"] || global.race["lone_survivor"]) {
      Object.keys(resource_values).forEach(function(res) {
        if (global.resource.hasOwnProperty(res)) {
          global.resource[res].value = resource_values[res] * 2;
        }
      });
    }
    altRace(global.race.species, true);
    tagEvent("sentience", {
      "species": global.race.species,
      "challenge": alevel() - 1
    });
    if (global.stats.feat["adept"]) {
      let rank = checkAdept();
      global.resource.Food.amount += rank * 100;
      global.resource.Stone.max += rank * 60;
      global.resource.Stone.amount += rank * 100;
      if (global.race["smoldering"]) {
        global.resource.Chrysotile.max += rank * 60;
        global.resource.Chrysotile.amount += rank * 100;
      } else {
        global.resource.Lumber.max += rank * 60;
        global.resource.Lumber.amount += rank * 100;
      }
    }
    if (global.race["fasting"]) {
      global.resource.Food.amount = 0;
    }
    if (global.race["cataclysm"]) {
      cataclysm();
    } else if (global.race["lone_survivor"]) {
      loneSurvivor();
    } else if (global.race["warlord"]) {
      warlordSetup();
    } else if (global.race["artifical"]) {
      aiStart();
    }
    if (global.settings.tabLoad) {
      drawCity();
      clearElement($(`#r_civics`));
      defineGovernment();
      defineGarrison();
      buildGarrison($("#c_garrison"), false);
      foreignGov();
      defineIndustry();
      initResourceTabs("market");
      initResourceTabs("storage");
      if (tmp_vars.hasOwnProperty("resource")) {
        Object.keys(tmp_vars.resource).forEach(function(name) {
          let color = tmp_vars.resource[name].color;
          let tradable = tmp_vars.resource[name].tradable;
          let stackable = tmp_vars.resource[name].stackable;
          if (stackable) {
            var market_item = $(`<div id="stack-${name}" class="market-item" v-show="display"></div>`);
            $("#resStorage").append(market_item);
            containerItem(`#stack-${name}`, market_item, name, color, true);
          }
          if (tradable) {
            var market_item = $(`<div id="market-${name}" class="market-item" v-show="r.display"></div>`);
            $("#market").append(market_item);
            marketItem(`#market-${name}`, market_item, name, color, true);
          }
        });
      }
      tradeSummery();
      arpa("Genetics");
      arpa("Crispr");
      arpa("Blood");
    } else {
      loadTab("mTabCivil");
    }
    if (global.queue.hasOwnProperty("queue")) {
      global.queue.queue = [];
    }
    if (global.race["slow"] || global.race["hyper"] || global.race.species === "junker") {
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      window.location.reload();
    }
  }
  function simulation() {
    if (global.race["simulation"]) {
      if (!global.hasOwnProperty("sim")) {
        global["sim"] = {
          stats: deepClone(global.stats),
          prestige: deepClone(global.prestige),
          genes: deepClone(global.genes),
          blood: deepClone(global.blood),
          pillars: deepClone(global.pillars),
          race: deepClone(global.race)
        };
        global.stats = {
          start: Date.now(),
          days: 0,
          tdays: 0
        };
        setupStats();
        global.genes = { minor: {}, challenge: 1 };
        global.blood = { aware: 1 };
        global.pillars = {};
        delete global.race["ancient_ruins"];
        delete global.race["rapid_mutation"];
        delete global.race["corruption"];
        delete global.race["rejuvenated"];
        global.race.ascended = false;
        global.race.gods = "none";
        global.race.old_gods = "none";
        ["Plasmid", "AntiPlasmid", "Phage", "Dark", "Harmony", "AICore", "Artifact", "Blood_Stone"].forEach(function(res) {
          global.prestige[res] = { count: Number(global.race.simConfig[res]) };
        });
      }
    }
  }
  function exitSim() {
    if (global.hasOwnProperty("sim")) {
      global.stats = deepClone(global.sim.stats);
      global.prestige = deepClone(global.sim.prestige);
      global.genes = deepClone(global.sim.genes);
      global.blood = deepClone(global.sim.blood);
      global.pillars = deepClone(global.sim.pillars);
      global.race = deepClone(global.sim.race);
      delete global["sim"];
      global.race.species = "protoplasm";
      delete global.race["simulation"];
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      window.location.reload();
    }
  }
  function aiStart() {
    if (global.race["artifical"]) {
      global.tech["spy"] = 5;
      global.tech["primitive"] = 3;
      global.tech["currency"] = 6;
      global.tech["govern"] = 3;
      global.tech["boot_camp"] = 1;
      global.tech["medic"] = 1;
      global.tech["military"] = 5;
      global.tech["explosives"] = 3;
      global.tech["trade"] = 3;
      global.tech["banking"] = 6;
      global.tech["home_safe"] = 1;
      global.tech["housing"] = 3;
      global.tech["smelting"] = 3;
      global.tech["copper"] = 1;
      global.tech["storage"] = 5;
      global.tech["container"] = 4;
      global.tech["steel_container"] = 3;
      global.tech["mining"] = 4;
      global.tech["pickaxe"] = 2;
      global.tech["hammer"] = 2;
      global.tech["oil"] = 3;
      global.tech["alumina"] = 1;
      global.tech["titanium"] = 1;
      global.tech["foundry"] = 7;
      global.tech["factory"] = 1;
      global.tech["science"] = 7;
      global.tech["high_tech"] = 4;
      global.tech["theology"] = 2;
      if (!global.race["joyless"]) {
        global.tech["theatre"] = 3;
        global.tech["broadcast"] = 1;
      }
      global.settings.showPowerGrid = true;
      global.settings.showResearch = true;
      global.settings.showCivic = true;
      global.settings.showResources = true;
      global.settings.showMarket = true;
      global.settings.showStorage = true;
      global.resource[global.race.species].display = true;
      global.resource.Knowledge.display = true;
      global.resource.Money.display = true;
      global.resource.Food.display = true;
      global.resource.Money.amount = 1e3;
      global.resource.Stone.display = true;
      global.resource.Furs.display = true;
      global.resource.Copper.display = true;
      global.resource.Iron.display = true;
      global.resource.Aluminium.display = true;
      global.resource.Coal.display = true;
      global.resource.Oil.display = true;
      global.resource.Steel.display = true;
      global.resource.Titanium.display = true;
      global.resource.Brick.display = true;
      global.resource.Wrought_Iron.display = true;
      global.resource.Sheet_Metal.display = true;
      global.resource.Crates.display = true;
      global.resource.Containers.display = true;
      if (!global.race["flier"]) {
        global.tech["cement"] = 5;
        global.resource.Cement.display = true;
      }
      if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
        if (global.race["evil"]) {
          global.tech["reclaimer"] = 3;
          initStruct(actions.city.graveyard);
          global.city.graveyard.count = 1;
        } else {
          global.tech["axe"] = 3;
          global.tech["saw"] = 2;
          initStruct(actions.city.lumber_yard);
          global.city.lumber_yard.count = 1;
          initStruct(actions.city.sawmill);
        }
        global.resource.Lumber.display = true;
        global.resource.Plywood.display = true;
        global.civic.lumberjack.display = true;
      }
      if (global.race["smoldering"]) {
        global.resource.Chrysotile.display = true;
      }
      global.resource[global.race.species].max = 0;
      global.resource[global.race.species].amount = 0;
      global.resource.Crates.amount = 10;
      global.resource.Containers.amount = 10;
      global.civic.taxes.display = true;
      global.civic.miner.display = true;
      global.civic.coal_miner.display = true;
      if (!global.race["sappy"]) {
        global.civic.quarry_worker.display = true;
      }
      global.civic.professor.display = true;
      global.civic.scientist.display = true;
      if (!global.race["flier"]) {
        global.civic.cement_worker.display = true;
      }
      global.civic.banker.display = true;
      global.city.calendar.day++;
      global.city.market.active = true;
      global.city["power"] = 7.5;
      global.city["powered"] = true;
      initStruct(actions.city.factory);
      initStruct(actions.city.foundry);
      initStruct(actions.city.smelter);
      addSmelter(1, "Iron");
      initStruct(actions.city.oil_power);
      global.city.oil_power.count = 1;
      global.city.oil_power.on = 1;
      initStruct(actions.city.coal_power);
      initStruct(actions.city.transmitter);
      global.city.transmitter.count = 1;
      global.city.transmitter.on = 1;
      initStruct(actions.city.mine);
      global.city.mine.count = 1;
      initStruct(actions.city.coal_mine);
      global.city.coal_mine.count = 1;
      initStruct(actions.city.oil_well);
      global.city.oil_well.count = 1;
      initStruct(actions.city.oil_depot);
      global.city.oil_depot.count = 1;
      initStruct(actions.city.cement_plant);
      global.city.cement_plant.count = 1;
      initStruct(actions.city.garrison);
      initStruct(actions.city.boot_camp);
      initStruct(actions.city.basic_housing);
      initStruct(actions.city.cottage);
      initStruct(actions.city.apartment);
      initStruct(actions.city.amphitheatre);
      initStruct(actions.city.rock_quarry);
      global.city.rock_quarry.count = 1;
      initStruct(actions.city.metal_refinery);
      global.city.metal_refinery.count = 1;
      initStruct(actions.city.shed);
      global.city.shed.count = 2;
      initStruct(actions.city.storage_yard);
      global.city.storage_yard.count = 1;
      initStruct(actions.city.warehouse);
      global.city.warehouse.count = 1;
      initStruct(actions.city.trade);
      initStruct(actions.city.wharf);
      initStruct(actions.city.bank);
      global.city.bank.count = 1;
      initStruct(actions.city.university);
      global.city.university.count = 1;
      initStruct(actions.city.library);
      global.city.library.count = 1;
      initStruct(actions.city.wardenclyffe);
      initStruct(actions.city.temple);
      if (global.race["calm"]) {
        global.resource.Zen.display = true;
        initStruct(actions.city.meditation);
      }
      if (global.race["cannibalize"]) {
        initStruct(actions.city.s_alter);
      }
      if (global.race["magnificent"]) {
        initStruct(actions.city.shrine);
      }
      global.civic.govern.type = "technocracy";
      drawCity();
      drawTech();
    }
  }
  function cataclysm() {
    if (global.race["cataclysm"]) {
      global.tech["unify"] = 2;
      global.tech["spy"] = 5;
      global.tech["primitive"] = 3;
      global.tech["currency"] = 6;
      global.tech["govern"] = 3;
      global.tech["boot_camp"] = 1;
      global.tech["medic"] = 1;
      global.tech["military"] = 5;
      global.tech["marines"] = 1;
      global.tech["explosives"] = 3;
      global.tech["trade"] = 3;
      global.tech["wharf"] = 1;
      global.tech["banking"] = 6;
      global.tech["gambling"] = 1;
      global.tech["home_safe"] = 1;
      global.tech["housing"] = 3;
      global.tech["smelting"] = 3;
      global.tech["copper"] = 1;
      global.tech["storage"] = 5;
      global.tech["container"] = 4;
      global.tech["steel_container"] = 3;
      global.tech["mining"] = 4;
      global.tech["oil"] = 7;
      global.tech["mass"] = 1;
      global.tech["alumina"] = 1;
      global.tech["titanium"] = 2;
      global.tech["polymer"] = 2;
      global.tech["uranium"] = 4;
      global.tech["foundry"] = 7;
      global.tech["factory"] = 1;
      global.tech["theatre"] = 3;
      global.tech["broadcast"] = 2;
      global.tech["mine_conveyor"] = 1;
      global.tech["science"] = 9;
      global.tech["high_tech"] = 7;
      global.tech["genetics"] = 1;
      global.tech["theology"] = 2;
      global.tech["space"] = 6;
      global.tech["solar"] = 3;
      global.tech["luna"] = 2;
      global.tech["hell"] = 1;
      global.tech["mars"] = 5;
      global.tech["gas_giant"] = 1;
      global.tech["gas_moon"] = 2;
      global.tech["asteroid"] = 3;
      global.tech["satellite"] = 1;
      global.tech["space_explore"] = 4;
      global.tech["genesis"] = 2;
      if (global.race["joyless"]) {
        delete global.race["joyless"];
      }
      global.settings.showSpace = true;
      global.settings.space.home = true;
      global.settings.space.moon = true;
      global.settings.space.red = true;
      global.settings.space.hell = true;
      global.settings.space.sun = true;
      global.settings.space.gas = true;
      global.settings.space.gas_moon = true;
      global.settings.space.belt = true;
      global.settings.space.dwarf = true;
      global.settings.showCity = false;
      global.settings.showIndustry = true;
      global.settings.showPowerGrid = true;
      global.settings.showResearch = true;
      global.settings.showCivic = true;
      global.settings.showMil = true;
      global.settings.showResources = true;
      global.settings.showMarket = true;
      global.settings.showStorage = true;
      global.settings.civTabs = 1;
      global.settings.spaceTabs = 1;
      global.settings.showGenetics = true;
      global.settings.arpa.physics = true;
      global.resource[global.race.species].display = true;
      global.resource.Knowledge.display = true;
      global.resource.Money.display = true;
      global.resource.Food.display = true;
      global.resource.Stone.display = true;
      global.resource.Furs.display = true;
      global.resource.Copper.display = true;
      global.resource.Iron.display = true;
      global.resource.Aluminium.display = true;
      global.resource.Coal.display = true;
      global.resource.Oil.display = true;
      global.resource.Uranium.display = true;
      global.resource.Steel.display = true;
      global.resource.Titanium.display = true;
      global.resource.Alloy.display = true;
      global.resource.Polymer.display = true;
      global.resource.Iridium.display = true;
      global.resource.Helium_3.display = true;
      global.resource.Brick.display = true;
      global.resource.Wrought_Iron.display = true;
      global.resource.Sheet_Metal.display = true;
      global.resource.Mythril.display = true;
      global.resource.Crates.display = true;
      global.resource.Containers.display = true;
      if (!global.race["flier"]) {
        global.resource.Cement.display = true;
        global.resource.Cement.max = 75e3;
        global.resource.Cement.amount = 75e3;
      }
      if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
        global.resource.Lumber.display = true;
        global.resource.Plywood.display = true;
        global.resource.Lumber.max = 9e4;
        global.resource.Lumber.amount = 9e4;
        global.resource.Plywood.amount = 5e4;
      }
      if (global.race["smoldering"]) {
        global.resource.Chrysotile.display = true;
        global.resource.Chrysotile.max = 9e4;
        global.resource.Chrysotile.amount = 9e4;
      }
      global.resource[global.race.species].max = 8;
      global.resource[global.race.species].amount = 8;
      global.resource.Crates.amount = 20;
      global.resource.Containers.amount = 20;
      global.resource.Money.max = 225e3;
      global.resource.Money.amount = 225e3;
      global.resource.Food.max = 1e3;
      global.resource.Food.amount = 1e3;
      global.resource.Oil.max = 1e3;
      global.resource.Oil.amount = 1e3;
      global.resource.Helium_3.max = 1e3;
      global.resource.Helium_3.amount = 1e3;
      global.resource.Uranium.max = 1e3;
      global.resource.Uranium.amount = 1e3;
      global.resource.Stone.max = 9e4;
      global.resource.Stone.amount = 9e4;
      global.resource.Furs.max = 4e4;
      global.resource.Furs.amount = 4e4;
      global.resource.Copper.max = 75e3;
      global.resource.Copper.amount = 75e3;
      global.resource.Iron.max = 75e3;
      global.resource.Iron.amount = 75e3;
      global.resource.Steel.max = 75e3;
      global.resource.Steel.amount = 75e3;
      global.resource.Aluminium.max = 75e3;
      global.resource.Aluminium.amount = 75e3;
      global.resource.Titanium.max = 75e3;
      global.resource.Titanium.amount = 75e3;
      global.resource.Coal.max = 1e4;
      global.resource.Coal.amount = 1e4;
      global.resource.Alloy.max = 2e4;
      global.resource.Alloy.amount = 2e4;
      global.resource.Polymer.max = 2e4;
      global.resource.Polymer.amount = 2e4;
      global.resource.Iridium.max = 1e3;
      global.resource.Iridium.amount = 1e3;
      global.resource.Brick.amount = 5e4;
      global.resource.Wrought_Iron.amount = 5e4;
      global.resource.Sheet_Metal.amount = 5e4;
      global.resource.Mythril.amount = 8e3;
      global.resource.Iridium.crates = 5;
      global.resource.Iridium.containers = 5;
      global.civic.taxes.display = true;
      global.civic.professor.display = true;
      global.civic.scientist.display = true;
      global.civic.colonist.display = true;
      global.civic.space_miner.display = true;
      global.civic.craftsman.display = true;
      if (!global.race["flier"]) {
        global.tech["cement"] = 5;
        global.civic.cement_worker.display = true;
        global.civic.cement_worker.max = jobScale(1);
        global.civic.cement_worker.workers = jobScale(1);
      }
      global.civic.colonist.max = jobScale(4);
      global.civic.colonist.workers = jobScale(4);
      global.civic.space_miner.max = jobScale(3);
      global.civic.space_miner.workers = jobScale(2);
      global.civic.professor.max = jobScale(1);
      global.civic.professor.workers = jobScale(1);
      global.city.calendar.day++;
      global.city.market.active = true;
      global.city["power"] = 0;
      global.city["powered"] = true;
      if (global.race["artifical"]) {
        initStruct(actions.city.transmitter);
      }
      initStruct(actions.city.factory);
      initStruct(actions.city.foundry);
      initStruct(actions.city.smelter);
      addSmelter(1, "Iron");
      addSmelter(1, "Steel");
      initStruct(actions.city.fission_power);
      initStruct(actions.city.oil_power);
      initStruct(actions.city.coal_power);
      initStruct(actions.city.mass_driver);
      initStruct(actions.city.mine);
      initStruct(actions.city.coal_mine);
      initStruct(actions.city.oil_well);
      initStruct(actions.city.oil_depot);
      initStruct(actions.city.garrison);
      initStruct(actions.city.basic_housing);
      initStruct(actions.city.cottage);
      initStruct(actions.city.apartment);
      initStruct(actions.city.amphitheatre);
      initStruct(actions.city.casino);
      initStruct(actions.city.rock_quarry);
      initStruct(actions.city.metal_refinery);
      initStruct(actions.city.storage_yard);
      initStruct(actions.city.warehouse);
      initStruct(actions.city.trade);
      initStruct(actions.city.wharf);
      initStruct(actions.city.bank);
      initStruct(actions.city.tourist_center);
      initStruct(actions.city.university);
      initStruct(actions.city.library);
      initStruct(actions.city.wardenclyffe);
      initStruct(actions.city.biolab);
      initStruct(actions.city.lumber_yard);
      initStruct(actions.city.sawmill);
      initStruct(actions.city.temple);
      initStruct(actions.space.spc_home.satellite);
      global.space.satellite.count = 1;
      initStruct(actions.space.spc_home.propellant_depot);
      global.space.propellant_depot.count = 1;
      initStruct(actions.space.spc_home.gps);
      global.space.gps.count = 4;
      initStruct(actions.space.spc_home.nav_beacon);
      global.space.nav_beacon.count = 1;
      global.space.nav_beacon.on = 1;
      initStruct(actions.space.spc_moon.moon_base);
      global.space.moon_base.count = 1;
      global.space.moon_base.on = 1;
      global.space.moon_base.support = 3;
      global.space.moon_base.s_max = 3;
      initStruct(actions.space.spc_moon.iridium_mine);
      global.space.iridium_mine.count = 1;
      global.space.iridium_mine.on = 1;
      initStruct(actions.space.spc_moon.helium_mine);
      global.space.helium_mine.count = 1;
      global.space.helium_mine.on = 1;
      initStruct(actions.space.spc_moon.observatory);
      global.space.observatory.count = 1;
      global.space.observatory.on = 1;
      initStruct(actions.space.spc_red.spaceport);
      global.space.spaceport.count = 2;
      global.space.spaceport.on = 2;
      global.space.spaceport.support = 8;
      global.space.spaceport.s_max = 10;
      initStruct(actions.space.spc_red.red_tower);
      global.space.red_tower.count = 1;
      global.space.red_tower.on = 1;
      initStruct(actions.space.spc_red.living_quarters);
      global.space.living_quarters.count = 4;
      global.space.living_quarters.on = 4;
      initStruct(actions.space.spc_red.vr_center);
      initStruct(actions.space.spc_red.garage);
      global.space.garage.count = 1;
      initStruct(actions.space.spc_red.red_mine);
      global.space.red_mine.count = 1;
      global.space.red_mine.on = 1;
      initStruct(actions.space.spc_red.fabrication);
      global.space.fabrication.count = 1;
      global.space.fabrication.on = 1;
      initStruct(actions.space.spc_red.red_factory);
      global.space.red_factory.count = 1;
      global.space.red_factory.on = 1;
      initStruct(actions.space.spc_red.exotic_lab);
      global.space.exotic_lab.count = 1;
      global.space.exotic_lab.on = 1;
      initStruct(actions.space.spc_red.ziggurat);
      initStruct(actions.space.spc_red.space_barracks);
      global.space.space_barracks.count = 1;
      global.space.space_barracks.on = 1;
      initStruct(actions.space.spc_red.biodome);
      global.space.biodome.count = 2;
      global.space.biodome.on = 2;
      initStruct(actions.space.spc_hell.geothermal);
      global.space.geothermal.count = 2;
      global.space.geothermal.on = 2;
      initStruct(actions.space.spc_hell.spc_casino);
      initStruct(actions.space.spc_hell.swarm_plant);
      initStruct(actions.space.spc_sun.swarm_control);
      global.space.swarm_control.count = 5;
      global.space.swarm_control.support = 40;
      global.space.swarm_control.s_max = 50;
      initStruct(actions.space.spc_sun.swarm_satellite);
      global.space.swarm_satellite.count = 40;
      initStruct(actions.space.spc_gas.gas_mining);
      global.space.gas_mining.count = 2;
      global.space.gas_mining.on = 2;
      initStruct(actions.space.spc_gas.gas_storage);
      global.space.gas_storage.count = 1;
      initStruct(actions.space.spc_gas_moon.outpost);
      initStruct(actions.space.spc_gas_moon.drone);
      initStruct(actions.space.spc_gas_moon.oil_extractor);
      global.space.oil_extractor.count = 2;
      global.space.oil_extractor.on = 2;
      initStruct(actions.space.spc_belt.space_station);
      global.space.space_station.count = 1;
      global.space.space_station.on = 1;
      global.space.space_station.s_max = 3;
      initStruct(actions.space.spc_belt.iridium_ship);
      global.space.iridium_ship.count = 1;
      global.space.iridium_ship.on = 1;
      initStruct(actions.space.spc_belt.elerium_ship);
      initStruct(actions.space.spc_belt.iron_ship);
      global.space.iron_ship.count = 1;
      global.space.iron_ship.on = 1;
      initStruct(actions.space.spc_dwarf.elerium_contain);
      global.civic["garrison"] = {
        display: true,
        disabled: false,
        progress: 0,
        tactic: 0,
        workers: 2,
        wounded: 0,
        raid: 0,
        max: 2
      };
      drawCity();
      drawTech();
      renderSpace();
      arpa("Physics");
      loadFoundry();
    }
  }
  function fanaticism(god) {
    if (["custom", "hybrid", "nano"].includes(god) && global.race["warlord"]) {
      randomMinorTrait(5);
      arpa("Genetics");
    } else {
      switch (races[god].fanaticism) {
        case "smart":
          if (global.race["dumb"]) {
            randomMinorTrait(5);
            arpa("Genetics");
          } else {
            fanaticTrait("smart");
          }
          break;
        case "infectious":
          fanaticTrait("infectious");
          if (global.race.species === "human") {
            unlockAchieve(`infested`);
          }
          break;
        case "blood_thirst":
          fanaticTrait("blood_thirst");
          if (global.race.species === "entish") {
            unlockAchieve(`madagascar_tree`);
          }
          break;
        case "none":
          randomMinorTrait(5);
          arpa("Genetics");
          break;
        case "kindling_kindred":
          fanaticTrait(races[god].fanaticism);
          break;
        default:
          fanaticTrait(races[god].fanaticism);
          break;
      }
    }
    if (global.race["warlord"]) {
      global.race.absorbed.push(god);
    }
  }
  function absorbRace(race) {
    if (global.race["warlord"]) {
      fanaticTrait(races[race].fanaticism, 0.25);
      if (!global.race.absorbed.includes(race)) {
        global.race.absorbed.push(race);
      }
    }
  }
  function fanaticTrait(trait, rank) {
    if (global.race["warlord"] && trait === "kindling_kindred") {
      trait = "iron_wood";
    } else if (global.race["warlord"] && trait === "spiritual") {
      trait = "unified";
    } else if (global.race["warlord"] && trait === "blood_thirst") {
      trait = "apex_predator";
    }
    if (global.race[trait]) {
      if (!setTraitRank(trait)) {
        randomMinorTrait(5);
      } else if (trait === "imitation") {
        setImitation(true);
      } else if (trait === "shapeshifter") {
        shapeShift(global.race["ss_genus"]);
      }
    } else {
      if (global.race["warlord"]) {
        global.race[trait] = rank ?? 0.5;
      } else {
        global.race[trait] = rank ?? 1;
      }
      cleanAddTrait(trait);
    }
    arpa("Genetics");
  }
  function resQueue() {
    if (!global.settings.tabLoad && global.settings.civTabs !== 3) {
      return;
    }
    clearResDrag();
    clearElement($("#resQueue"));
    $("#resQueue").append($(`
        <h2 class="has-text-success">${loc("research_queue")} ({{ queue.length }}/{{ max }})</h2>
        <span id="pauserqueue" class="${global.r_queue.pause ? "pause" : "play"}" role="button" @click="pauseRQueue()" :aria-label="pausedesc()"></span>
    `));
    let queue = $(`<ul class="buildList"></ul>`);
    $("#resQueue").append(queue);
    queue.append($(`<li v-for="(item, index) in queue"><a v-bind:id="setID(index)" class="queued" v-bind:class="{ 'qany': item.qa }" @click="remove(index)" role="link"><span class="has-text-warning">{{ item.label }}</span> [<span v-bind:class="{ 'has-text-danger': item.cna, 'has-text-success': !item.cna && item.req, 'has-text-caution': !item.req && !item.cna }">{{ item.time | time }}</span>]</a></li>`));
    try {
      vBind({
        el: "#resQueue",
        data: global.r_queue,
        methods: {
          remove(index2) {
            clearPopper(`rq${global.r_queue.queue[index2].id}`);
            global.r_queue.queue.splice(index2, 1);
            resQueue();
            drawTech();
          },
          setID(index2) {
            return `rq${global.r_queue.queue[index2].id}`;
          },
          pauseRQueue() {
            $(`#pauserqueue`).removeClass("play");
            $(`#pauserqueue`).removeClass("pause");
            if (global.r_queue.pause) {
              global.r_queue.pause = false;
              $(`#pauserqueue`).addClass("play");
            } else {
              global.r_queue.pause = true;
              $(`#pauserqueue`).addClass("pause");
            }
          },
          pausedesc() {
            return global.r_queue.pause ? loc("r_queue_play") : loc("r_queue_pause");
          }
        },
        filters: {
          time(time) {
            return timeFormat(time);
          }
        }
      });
      resDragQueue();
    } catch {
      global.r_queue.queue = [];
    }
  }
  function clearResDrag() {
    let el = $("#resQueue .buildList")[0];
    if (el) {
      let sort = Sortable.get(el);
      if (sort) {
        sort.destroy();
      }
    }
  }
  function resDragQueue() {
    let el = $("#resQueue .buildList")[0];
    Sortable.create(el, {
      onEnd(e) {
        let order = global.r_queue.queue;
        order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
        global.r_queue.queue = order;
        resQueue();
      }
    });
    attachQueuePopovers();
  }
  function attachQueuePopovers() {
    for (let i = 0; i < global.r_queue.queue.length; i++) {
      let id = `rq${global.r_queue.queue[i].id}`;
      clearPopper(id);
      let c_action;
      let segments = global.r_queue.queue[i].id.split("-");
      c_action = actions[segments[0]][segments[1]];
      popover(id, function() {
        return void 0;
      }, {
        in: function(obj) {
          actionDesc(obj.popper, c_action, global[segments[0]][segments[1]], false);
        },
        out: function() {
          clearPopper(id);
        },
        wide: c_action["wide"]
      });
    }
  }
  function bananaPerk(val) {
    if (global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 5) {
      return val - 0.01;
    }
    return val;
  }
  function bank_vault() {
    let vault = 1800;
    if (global.tech["vault"] >= 1) {
      vault = (global.tech["vault"] + 1) * 7500;
    } else if (global.tech["banking"] >= 5) {
      vault = 9e3;
    } else if (global.tech["banking"] >= 3) {
      vault = 4e3;
    }
    if (global.race["paranoid"]) {
      vault *= 1 - traits.paranoid.vars()[0] / 100;
    }
    if (global.race["hoarder"]) {
      vault *= 1 + traits.hoarder.vars()[0] / 100;
    }
    let fathom = fathomCheck("dracnid");
    if (fathom > 0) {
      vault *= 1 + traits.hoarder.vars(1)[0] / 100 * fathom;
    }
    if (global.tech.banking >= 7) {
      vault *= 1 + highPopAdjust(workerScale(global.civic.banker.workers, "banker") * 0.05);
    }
    if (global.tech.banking >= 8) {
      vault += highPopAdjust(25 * global.resource[global.race.species].amount);
    }
    if (global.tech["stock_exchange"]) {
      vault *= 1 + global.tech["stock_exchange"] * 0.1;
    }
    if (global.tech["world_control"]) {
      vault *= 1.25;
    }
    if (global.race["truepath"]) {
      vault *= 1.25;
    }
    if (global.blood["greed"]) {
      vault *= 1 + global.blood.greed / 100;
    }
    if (global.stats.achieve["wheelbarrow"]) {
      vault *= 1 + global.stats.achieve.wheelbarrow.l / 50;
    }
    if (global.race["inflation"]) {
      vault *= 1 + global.race.inflation / 125;
    }
    if (global.tech["ai_core"] && global.tech.ai_core >= 4) {
      let citadel = p_on["citadel"] || 0;
      vault *= 1 + citadel / 100;
    }
    let rskVal = govActive("risktaker", 0);
    if (rskVal) {
      vault *= 1 + rskVal / 100;
    }
    return vault;
  }
  function start_cataclysm() {
    if (global.race["start_cataclysm"]) {
      delete global.race["start_cataclysm"];
      sentience();
    }
  }
  var callback_repeat = /* @__PURE__ */ new Map();
  function doCallbacks() {
    for (const [[c_action, func], args] of callback_queue) {
      if (c_action[func](...args)) {
        callback_repeat.set([c_action, func], args);
      }
    }
    callback_queue.clear();
    for (const [[c_action, func], args] of callback_repeat) {
      callback_queue.set([c_action, func], args);
    }
    callback_repeat.clear();
  }

  // src/industry.js
  function loadIndustry(industry, parent, bind) {
    switch (industry) {
      case "smelter":
        loadSmelter(parent, bind);
        break;
      case "factory":
        loadFactory(parent, bind);
        break;
      case "droid":
        loadDroid(parent, bind);
        break;
      case "graphene":
        loadGraphene(parent, bind);
        break;
      case "pylon":
        loadPylon(parent, bind);
        break;
      case "rock_quarry":
        loadQuarry(parent, bind);
        break;
      case "titan_mine":
        loadTMine(parent, bind);
        break;
      case "nanite_factory":
        loadNFactory(parent, bind);
        break;
      case "mining_ship":
        loadMiningShip(parent, bind);
        break;
      case "alien_space_station":
        loadAlienSpaceStation(parent, bind);
        break;
      case "replicator":
        loadReplicator(parent, bind);
        break;
      case "mech_station":
        loadMechStation(parent, bind);
        break;
    }
  }
  function defineIndustry() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 1)) {
      return;
    }
    clearElement($("#industry"));
    if (smelterUnlocked()) {
      var smelter = $(`<div id="iSmelter" class="industry"><h2 class="header has-text-advanced">${loc("city_smelter")}</h2></div>`);
      $(`#industry`).append(smelter);
      loadIndustry("smelter", smelter, "#iSmelter");
    }
    if (global.city["factory"] && global.city.factory.count > 0 || global.space["red_factory"] && global.space.red_factory.count > 0 || global.tauceti["tau_factory"] && global.tauceti.tau_factory.count > 0 || global.portal["hell_factory"] && global.portal.hell_factory.count > 0) {
      var factory = $(`<div id="iFactory" class="industry"><h2 class="header has-text-advanced">${loc("city_factory")}</h2></div>`);
      $(`#industry`).append(factory);
      loadIndustry("factory", factory, "#iFactory");
    }
    if (global.interstellar["mining_droid"] && global.interstellar.mining_droid.count > 0) {
      var droid = $(`<div id="iDroid" class="industry"><h2 class="header has-text-advanced">${loc("interstellar_mining_droid_title")}</h2></div>`);
      $(`#industry`).append(droid);
      loadIndustry("droid", droid, "#iDroid");
    }
    if (global.interstellar["g_factory"] && global.interstellar.g_factory.count > 0 || global.portal["twisted_lab"] && global.portal.twisted_lab.count > 0 || global.space["g_factory"] && (global.space.g_factory.count > 0 || global.tauceti["refueling_station"] && global.tauceti.refueling_station.count > 0)) {
      var graphene = $(`<div id="iGraphene" class="industry"><h2 class="header has-text-advanced">${global.race["warlord"] ? loc("portal_twisted_lab_title") : loc("interstellar_g_factory_title")}</h2></div>`);
      $(`#industry`).append(graphene);
      loadIndustry("graphene", graphene, "#iGraphene");
    }
    if (global.race["casting"] && (global.city["pylon"] || global.space["pylon"] || global.tauceti["pylon"])) {
      var casting = $(`<div id="iPylon" class="industry"><h2 class="header has-text-advanced">${loc("city_pylon")}</h2></div>`);
      $(`#industry`).append(casting);
      loadIndustry("pylon", casting, "#iPylon");
    }
    if (global.race["smoldering"] && global.city["rock_quarry"] && !global.race["cataclysm"] && !global.race["orbit_decayed"] && !global.tech["isolation"]) {
      var ratio = $(`<div id="iQuarry" class="industry"><h2 class="header has-text-advanced">${loc("city_rock_quarry")}</h2></div>`);
      $(`#industry`).append(ratio);
      loadIndustry("rock_quarry", ratio, "#iQuarry");
    }
    if (global.space["titan_mine"] && global.space["titan_mine"].count > 0) {
      var ratio = $(`<div id="iTMine" class="industry"><h2 class="header has-text-advanced">${loc("city_mine")}</h2></div>`);
      $(`#industry`).append(ratio);
      loadIndustry("titan_mine", ratio, "#iTMine");
    }
    if (global.tech["tau_roid"] && global.tech.tau_roid >= 4 && global.tauceti["mining_ship"]) {
      var mining_ship = $(`<div id="iMiningShip" class="industry"><h2 class="header has-text-advanced">${loc("tau_roid_mining_ship")}</h2></div>`);
      $(`#industry`).append(mining_ship);
      loadIndustry("mining_ship", mining_ship, "#iMiningShip");
    }
    if (global.tech["tau_gas2"] && global.tech.tau_gas2 === 6 && global.tauceti["alien_space_station"] && (!global.tech["alien_data"] || global.tech.alien_data < 6)) {
      var alien_space_station = $(`<div id="iAlienSpaceStation" class="industry"><h2 class="header has-text-advanced">${loc("tau_gas2_alien_station")}</h2></div>`);
      $(`#industry`).append(alien_space_station);
      loadIndustry("alien_space_station", alien_space_station, "#iAlienSpaceStation");
    }
    if (global.race["deconstructor"] && global.city["nanite_factory"]) {
      var nanite = $(`<div id="iNFactory" class="industry"><h2 class="header has-text-advanced">${loc("city_nanite_factory")}</h2></div>`);
      $(`#industry`).append(nanite);
      loadIndustry("nanite_factory", nanite, "#iNFactory");
    }
    if (global.race["replicator"] && global.tech["replicator"]) {
      var replicator2 = $(`<div id="iReplicator" class="industry"><h2 class="header has-text-advanced">${global.race.universe === "antimatter" ? loc("tech_antireplicator") : loc("tech_replicator")}</h2></div>`);
      $(`#industry`).append(replicator2);
      loadIndustry("replicator", replicator2, "#iReplicator");
    }
  }
  var f_rate = {
    Lux: {
      demand: [0.14, 0.21, 0.28, 0.35, 0.42],
      fur: [2, 3, 4, 5, 6]
    },
    Furs: {
      money: [10, 15, 20, 25, 30],
      polymer: [1.5, 2.25, 3, 3.75, 4.5],
      output: [1, 1.5, 2, 2.5, 3]
    },
    Alloy: {
      copper: [0.75, 1.12, 1.49, 1.86, 2.23],
      aluminium: [1, 1.5, 2, 2.5, 3],
      output: [0.075, 0.112, 0.149, 0.186, 0.223]
    },
    Polymer: {
      oil_kk: [0.22, 0.33, 0.44, 0.55, 0.66],
      oil: [0.18, 0.27, 0.36, 0.45, 0.54],
      lumber: [15, 22, 29, 36, 43],
      output: [0.125, 0.187, 0.249, 0.311, 0.373]
    },
    Nano_Tube: {
      coal: [8, 12, 16, 20, 24],
      neutronium: [0.05, 0.075, 0.1, 0.125, 0.15],
      output: [0.2, 0.3, 0.4, 0.5, 0.6]
    },
    Stanene: {
      aluminium: [30, 45, 60, 75, 90],
      nano: [0.02, 0.03, 0.04, 0.05, 0.06],
      output: [0.6, 0.9, 1.2, 1.5, 1.8]
    }
  };
  function smelterFuelConfig() {
    let fuel = {
      d_fuel: "Lumber",
      l_type: "Lumber",
      l_cost: 3,
      // Discount coal cost for species that (usually) cannot burn lumber
      c_cost: global.race["kindling_kindred"] || global.race["smoldering"] ? 0.15 : 0.25,
      // Oil bonus is free with Forge trait
      o_cost: global.race["forge"] ? 0 : 0.35
    };
    if (global.race["evil"]) {
      if (global.race["soul_eater"] && global.race.species !== "wendigo" && !global.race["artificial"]) {
        fuel.l_type = "Food";
      } else {
        fuel.l_type = "Furs";
        fuel.l_cost = 1;
      }
    } else if (global.race["kindling_kindred"] || global.race["smoldering"]) {
      fuel.d_fuel = "Coal";
    }
    if (global.race["artificial"]) {
      fuel.d_fuel = "Oil";
    }
    return fuel;
  }
  function loadSmelter(parent, bind) {
    const fuel_config = smelterFuelConfig();
    let fuel = $(`<div><span class="has-text-warning">${loc("modal_smelter_fuel")}:</span> <span :class="level()">{{s.count | on}}/{{ s.cap }}</span></div>`);
    parent.append(fuel);
    if (parent.hasClass("modalBody")) {
      let egg = easterEgg(10);
      if (egg.length > 0) {
        fuel.prepend(egg);
      }
    }
    if (bind && global.race["forge"] && global.race["steelen"]) {
      let trick = trickOrTreat(3, 12, true);
      if (trick.length > 0) {
        fuel.prepend(trick);
      }
    }
    let fId = parent.hasClass("modalBody") ? `mSmelterFuels` : `smelterFuels`;
    let fuelTypes = $(`<div id="${fId}" class="fuels"></div>`);
    parent.append(fuelTypes);
    if (!global.race["forge"]) {
      if (!global.race["kindling_kindred"] && !global.race["smoldering"] || global.race["evil"]) {
        let f_label = global.resource[fuel_config.l_type].name;
        let wood = $(`<span :aria-label="buildLabel('wood') + ariaCount('Wood', '${f_label}')" class="current wood">${f_label} {{ s.Wood }}</span>`);
        let subWood = $(`<span role="button" class="sub" @click="subFuel('Wood')" aria-label="Remove ${f_label} fuel"><span>&laquo;</span></span>`);
        let addWood = $(`<span role="button" class="add" @click="addFuel('Wood')" aria-label="Add ${f_label} fuel"><span>&raquo;</span></span>`);
        fuelTypes.append(subWood);
        fuelTypes.append(wood);
        fuelTypes.append(addWood);
      }
      if (global.resource.Coal.display) {
        let coal = $(`<span :aria-label="buildLabel('coal') + ariaCount('Coal')" class="current coal">${global.resource.Coal.name} <span v-html="$options.filters.spook(s.Coal)"></span></span>`);
        let subCoal = $(`<span role="button" class="sub" @click="subFuel('Coal')" aria-label="Remove ${global.resource.Coal.name} fuel"><span>&laquo;</span></span>`);
        let addCoal = $(`<span role="button" class="add" @click="addFuel('Coal')" aria-label="Add ${global.resource.Coal.name} fuel"><span>&raquo;</span></span>`);
        fuelTypes.append(subCoal);
        fuelTypes.append(coal);
        fuelTypes.append(addCoal);
      }
    }
    if (global.race["forge"]) {
      let oil = $(`<span :aria-label="buildLabel('oil') + ariaCount('Oil')" class="current oil infoOnly">${loc("trait_forge_name")} <span v-html="$options.filters.altspook(s.Oil)"></span></span>`);
      fuelTypes.append(oil);
    } else if (global.resource.Oil.display) {
      let oil = $(`<span :aria-label="buildLabel('oil') + ariaCount('Oil')" class="current oil">${global.resource.Oil.name} {{ s.Oil }}</span>`);
      let subOil = $(`<span role="button" class="sub" @click="subFuel('Oil')" aria-label="Remove ${global.resource.Oil.name} fuel"><span>&laquo;</span></span>`);
      let addOil = $(`<span role="button" class="add" @click="addFuel('Oil')" aria-label="Add ${global.resource.Oil.name} fuel"><span>&raquo;</span></span>`);
      fuelTypes.append(subOil);
      fuelTypes.append(oil);
      fuelTypes.append(addOil);
    }
    if (global.tech["star_forge"] && global.tech.star_forge >= 2) {
      let star = $(`<span :aria-label="buildLabel('star') + ariaCount('Star')" class="current star infoOnly">${loc("star")} {{ s.Star }}</span>`);
      fuelTypes.append(star);
    }
    if (global.tech["smelting"] && global.tech.smelting >= 8) {
      let inferno = $(`<span :aria-label="buildLabel('inferno') + ariaCount('Inferno')" class="current inferno">${loc("modal_smelter_inferno")} {{ s.Inferno }}</span>`);
      let subInferno = $(`<span role="button" class="sub" @click="subFuel('Inferno')" aria-label="Remove inferno fuel"><span>&laquo;</span></span>`);
      let addInferno = $(`<span role="button" class="add" @click="addFuel('Inferno')" aria-label="Add inferno fuel"><span>&raquo;</span></span>`);
      fuelTypes.append(subInferno);
      fuelTypes.append(inferno);
      fuelTypes.append(addInferno);
    }
    let available = $('<div class="avail"></div>');
    parent.append(available);
    if (!bind && false) {
      switch (fuel_config.l_type) {
        case "Food":
          available.append(`<span :class="net('Lumber')">{{ food.diff | diffSize }}</span>`);
          break;
        case "Furs":
          available.append(`<span :class="net('Lumber')">{{ fur.diff | diffSize }}</span>`);
          break;
        case "Lumber":
        default:
          available.append(`<span :class="net('Lumber')">{{ lum.diff | diffSize }}</span>`);
          break;
      }
      if (global.resource.Coal.display) {
        available.append(`<span :class="net('Coal')">{{ coal.diff | diffSize }}</span>`);
      }
      if (global.resource.Oil.display) {
        available.append(`<span :class="net('Oil')">{{ oil.diff | diffSize }}</span>`);
      }
    }
    let irid_smelt = global.tech["irid_smelting"] || global.tech["m_smelting"] && global.tech.m_smelting >= 2 ? true : false;
    if (global.resource.Iridium.display && irid_smelt || global.resource.Steel.display && global.tech.smelting >= 2 && !global.race["steelen"]) {
      let smelt = $(`<div id="${parent.hasClass("modalBody") ? `mSmelterMats` : `smelterMats`}" class="smelting"></div>`);
      parent.append(smelt);
      smelt.append(`<div><span class="has-text-warning">${loc("modal_smelter_type")}:</span> <span :class="level()">{{s.count | son}}/{{ s.cap | on }}</span></div>`);
      let smeltTypes = $(`<div class="fuels"></div>`);
      smelt.append(smeltTypes);
      let iron = $(`<span :aria-label="mLabel('iron') + ariaProd('Iron')" class="current iron">${global.resource.Iron.name} {{ s.Iron }}</span>`);
      let ironSub = $(`<span role="button" class="sub" @click="subMetal('Iron')" aria-label="Smelt less iron"><span>&laquo;</span></span>`);
      let ironAdd = $(`<span role="button" class="add" @click="addMetal('Iron')" aria-label="Smelt more iron"><span>&raquo;</span></span>`);
      smeltTypes.append(ironSub);
      smeltTypes.append(iron);
      smeltTypes.append(ironAdd);
      if (global.resource.Steel.display && global.tech.smelting >= 2 && !global.race["steelen"]) {
        let steel = $(`<span :aria-label="mLabel('steel') + ariaProd('Steel')" class="current steel">${global.resource.Steel.name} {{ s.Steel }}</span>`);
        let steelSub = $(`<span role="button" class="sub" @click="subMetal('Steel')" aria-label="Smelt less steel"><span>&laquo;</span></span>`);
        let steelAdd = $(`<span role="button" class="add" @click="addMetal('Steel')" aria-label="Smelt more steel"><span>&raquo;</span></span>`);
        smeltTypes.append(steelSub);
        smeltTypes.append(steel);
        smeltTypes.append(steelAdd);
      }
      if (global.resource.Iridium.display && irid_smelt) {
        let iridium = $(`<span :aria-label="mLabel('iridium') + ariaProd('Iridium')" class="current iridium">${global.resource.Iridium.name} {{ s.Iridium }}</span>`);
        let iridiumSub = $(`<span role="button" class="sub" @click="subMetal('Iridium')" aria-label="Smelt less iridium"><span>&laquo;</span></span>`);
        let iridiumAdd = $(`<span role="button" class="add" @click="addMetal('Iridium')" aria-label="Smelt more iridium"><span>&raquo;</span></span>`);
        smeltTypes.append(iridiumSub);
        smeltTypes.append(iridium);
        smeltTypes.append(iridiumAdd);
      }
    }
    vBind({
      el: bind ? bind : "#specialModal",
      data: {
        s: global.city["smelter"],
        lum: global.resource.Lumber,
        coal: global.resource.Coal,
        oil: global.resource.Oil,
        food: global.resource.Food,
        fur: global.resource.Furs
      },
      methods: {
        addFuel(type) {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            let total = global.city.smelter.Wood + global.city.smelter.Coal + global.city.smelter.Oil + global.city.smelter.Star + global.city.smelter.Inferno;
            if (type === "Star" && global.city.smelter.Star >= global.city.smelter.StarCap) {
              break;
            } else if (total < global.city.smelter.cap) {
              global.city.smelter[type]++;
              global.city.smelter.Iron++;
            } else if (total - global.city.smelter[type] > 0) {
              if (type !== "Wood" && global.city.smelter.Wood > 0) {
                global.city.smelter.Wood--;
                global.city.smelter[type]++;
              } else if (type !== "Coal" && global.city.smelter.Coal > 0) {
                global.city.smelter.Coal--;
                global.city.smelter[type]++;
              } else if (type !== "Oil" && global.city.smelter.Oil > 0) {
                global.city.smelter.Oil--;
                global.city.smelter[type]++;
              } else if (type !== "Inferno" && global.city.smelter.Inferno > 0) {
                global.city.smelter.Inferno--;
                global.city.smelter[type]++;
              }
            } else {
              break;
            }
          }
        },
        subFuel(type) {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.city.smelter[type] > 0) {
              global.city.smelter[type]--;
              if (global.race["forge"] && type === "Inferno") {
                global.city.smelter.Oil++;
              }
              let total = global.city.smelter.Wood + global.city.smelter.Coal + global.city.smelter.Oil + global.city.smelter.Star + global.city.smelter.Inferno;
              let used = global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium;
              if (used > total) {
                if (global.city.smelter.Iron > 0) {
                  global.city.smelter.Iron--;
                } else if (global.city.smelter.Steel > 0) {
                  global.city.smelter.Steel--;
                } else if (global.city.smelter.Iridium > 0) {
                  global.city.smelter.Iridium--;
                }
              }
            } else {
              break;
            }
          }
        },
        mLabel(m) {
          return matText(m);
        },
        addMetal(m) {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            let count = global.city.smelter.Wood + global.city.smelter.Coal + global.city.smelter.Oil + global.city.smelter.Star + global.city.smelter.Inferno;
            if (global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium < count) {
              global.city.smelter[m]++;
            } else if (global.city.smelter.Iron > 0 && m !== "Iron") {
              global.city.smelter.Iron--;
              global.city.smelter[m]++;
            } else if (global.city.smelter.Steel > 0 && m !== "Steel") {
              global.city.smelter.Steel--;
              global.city.smelter[m]++;
            } else if (global.city.smelter.Iridium > 0 && m !== "Iridium") {
              global.city.smelter.Iridium--;
              global.city.smelter[m]++;
            } else {
              break;
            }
          }
        },
        subMetal(m) {
          let keyMult = keyMultiplier();
          global.city.smelter[m] -= keyMult;
          if (global.city.smelter[m] < 0) {
            global.city.smelter[m] = 0;
          }
        },
        buildLabel(type) {
          return tooltip(type);
        },
        ariaCount(fuel2, name = fuel2) {
          return ` ${global.city.smelter[fuel2]} ${name} fueled.`;
        },
        ariaProd(res) {
          return `. ${global.city.smelter[res]} producing ${res}.`;
        },
        net(res) {
          return global.resource[res].diff >= 0 ? "has-text-success" : "has-text-danger";
        },
        level() {
          let workers = global.city.smelter.Wood + global.city.smelter.Coal + global.city.smelter.Oil + global.city.smelter.Star + global.city.smelter.Inferno;
          return colorRange(workers, global.city.smelter.count);
        }
      },
      filters: {
        on(c) {
          return global.city.smelter.Wood + global.city.smelter.Coal + global.city.smelter.Oil + global.city.smelter.Star + global.city.smelter.Inferno;
        },
        son(c) {
          return global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium;
        },
        diffSize(value) {
          return value > 0 ? `+${sizeApproximation(value, 2)}` : sizeApproximation(value, 2);
        },
        spook(v) {
          if (bind && ((global.race["kindling_kindred"] || global.race["smoldering"]) && (global.city.smelter.Steel === 6 || global.city.smelter.Iron === 6) || global.city.smelter.Wood === 6) && global.city.smelter.Coal === 6 && global.city.smelter.Oil === 6) {
            let trick = trickOrTreat(3, 12, true);
            if (trick.length > 0) {
              return trick;
            }
          }
          return v;
        },
        altspook(v) {
          if (bind && global.race["forge"] && global.city.smelter.Steel === 6 && global.city.smelter.Iron === 6) {
            let trick = trickOrTreat(3, 12, true);
            if (trick.length > 0) {
              return trick;
            }
          }
          return v;
        }
      }
    });
    function tooltip(type) {
      const fuel_config2 = smelterFuelConfig();
      switch (type) {
        case "wood":
          return loc("modal_build_wood", [global.resource[fuel_config2.l_type].name, fuel_config2.l_cost]);
        case "coal": {
          if (global.tech["uranium"] && global.tech["uranium"] >= 3) {
            return loc("modal_build_coal2", [fuel_config2.c_cost, global.resource.Coal.name, global.resource.Uranium.name]);
          } else {
            return loc("modal_build_coal1", [fuel_config2.c_cost, global.resource.Coal.name]);
          }
        }
        case "oil":
          return global.race["forge"] ? loc("modal_build_forge") : loc("modal_build_oil", ["0.35", global.resource.Oil.name]);
        case "star":
          return global.tech["irid_smelting"] ? loc("modal_build_star2", [global.resource.Titanium.name, global.resource.Iridium.name]) : loc("modal_build_star", [global.resource.Titanium.name]);
        case "inferno": {
          let coal = 50;
          let oil = 35;
          let infernite = 0.5;
          return loc("modal_build_inferno", [coal, global.resource.Coal.name, oil, global.resource.Oil.name, infernite, global.resource.Infernite.name]);
        }
      }
    }
    function matText(type) {
      if (type === "steel") {
        let boost = global.tech["smelting"] >= 4 ? 1.2 : 1;
        if (global.tech["smelting"] >= 5) {
          boost *= 1.2;
        }
        if (global.tech["smelting"] >= 6) {
          boost *= 1.2;
        }
        if (global.tech["smelting"] >= 7) {
          boost *= 1.25;
        }
        if (global.race["pyrophobia"]) {
          boost *= 0.9;
        }
        return loc("modal_smelter_steel", [+boost.toFixed(3), global.resource.Steel.name, global.resource.Coal.name, global.resource.Iron.name]);
      } else if (type === "iridium") {
        let boost = global.tech["smelting"] >= 7 ? 6.25 : 5;
        if (global.race["pyrophobia"]) {
          boost *= 0.9;
        }
        return loc("modal_smelter_iron", [+boost.toFixed(3), global.resource.Iridium.name]);
      } else {
        let boost = global.tech["smelting"] >= 3 ? global.tech["smelting"] >= 7 ? 15 : 12 : 10;
        if (global.race["pyrophobia"]) {
          boost *= 0.9;
        }
        return loc("modal_smelter_iron", [+boost.toFixed(3), global.resource.Iron.name]);
      }
    }
    let id = parent.hasClass("modalBody") ? `mSmelterFuels` : `smelterFuels`;
    ["wood", "coal", "oil", "star", "inferno"].forEach(function(fuel2) {
      popover(`${id}${fuel2}`, function() {
        return tooltip(fuel2);
      }, {
        elm: $(`#${id} > .${fuel2}`),
        attach: "#main"
      });
    });
    if (global.resource.Steel.display && global.tech.smelting >= 2 && !global.race["steelen"] || global.resource.Iridium.display && irid_smelt) {
      let id2 = parent.hasClass("modalBody") ? `mSmelterMats` : `smelterMats`;
      ["iron", "steel", "iridium"].forEach(function(mat) {
        if (mat === "steel" && (!global.resource.Steel.display || global.race["steelen"])) {
          return;
        } else if (mat === "iridium" && !(global.resource.Iridium.display && irid_smelt)) {
          return;
        }
        popover(`${id2}${mat}`, function() {
          return matText(mat);
        }, {
          elm: $(`#${id2} span.${mat}`),
          attach: "#main"
        });
      });
    }
  }
  function smelterUnlocked() {
    return global.city["smelter"] && (global.city.smelter.count > 0 || global.race["cataclysm"] || global.race["orbit_decayed"] || global.tech["isolation"] || global.race["warlord"]);
  }
  function addSmelter(num = 1, product = "Iron", fuel = "Oil") {
    global.city.smelter.cap += num;
    global.city.smelter[product] += num;
    global.city.smelter[fuel] += num;
    if (fuel === "star") {
      global.city.smelter.StarCap += num;
    }
  }
  function loadFactory(parent, bind) {
    let fuel = $(`<div><span class="has-text-warning">${loc("modal_factory_operate")}:</span> <span :class="level()">{{count | on}}/{{ on | max }}</span></div>`);
    parent.append(fuel);
    let lux = $(`<div class="factory"><span class="Lux" :aria-label="buildLabel('Lux') + ariaProd('Lux')">${loc("modal_factory_lux")}</span></div>`);
    parent.append(lux);
    let luxCount = $(`<span class="current" v-html="$options.filters.spook(Lux)"></span>`);
    let subLux = $(`<span class="sub" @click="subItem('Lux')" role="button" aria-label="Decrease Lux production">&laquo;</span>`);
    let addLux = $(`<span class="add" @click="addItem('Lux')" role="button" aria-label="Increase Lux production">&raquo;</span>`);
    lux.append(subLux);
    lux.append(luxCount);
    lux.append(addLux);
    if (global.tech["synthetic_fur"]) {
      let fur = $(`<div class="factory"><span class="Furs" :aria-label="buildLabel('Furs') + ariaProd('Furs')">${global.race["evil"] ? loc("resource_Flesh_name") : global.resource.Furs.name}</span></div>`);
      parent.append(fur);
      let furCount = $(`<span class="current">{{ Furs }}</span>`);
      let subFurs = $(`<span class="sub" @click="subItem('Furs')" role="button" aria-label="Decrease Furs production">&laquo;</span>`);
      let addFurs = $(`<span class="add" @click="addItem('Furs')" role="button" aria-label="Increase Furs production">&raquo;</span>`);
      fur.append(subFurs);
      fur.append(furCount);
      fur.append(addFurs);
    }
    let alloy = $(`<div class="factory"><span class="Alloy" :aria-label="buildLabel('Alloy') + ariaProd('Alloy')">${global.resource.Alloy.name}</span></div>`);
    parent.append(alloy);
    let alloyCount = $(`<span class="current">{{ Alloy }}</span>`);
    let subAlloy = $(`<span class="sub" @click="subItem('Alloy')" role="button" aria-label="Decrease Alloy production">&laquo;</span>`);
    let addAlloy = $(`<span class="add" @click="addItem('Alloy')" role="button" aria-label="Increase Alloy production">&raquo;</span>`);
    alloy.append(subAlloy);
    alloy.append(alloyCount);
    alloy.append(addAlloy);
    if (global.tech["polymer"]) {
      let polymer = $(`<div class="factory"><span class="Polymer" :aria-label="buildLabel('Polymer') + ariaProd('Polymer')">${global.resource.Polymer.name}</span></div>`);
      parent.append(polymer);
      let polymerCount = $(`<span class="current">{{ Polymer }}</span>`);
      let subPolymer = $(`<span class="sub" @click="subItem('Polymer')" role="button" aria-label="Decrease Polymer production">&laquo;</span>`);
      let addPolymer = $(`<span class="add" @click="addItem('Polymer')" role="button" aria-label="Increase Polymer production">&raquo;</span>`);
      polymer.append(subPolymer);
      polymer.append(polymerCount);
      polymer.append(addPolymer);
    }
    if (global.tech["nano"]) {
      let nano = $(`<div class="factory"><span class="Nano" :aria-label="buildLabel('Nano') + ariaProd('Nano')">${global.resource.Nano_Tube.name}</span></div>`);
      parent.append(nano);
      let nanoCount = $(`<span class="current">{{ Nano }}</span>`);
      let subNano = $(`<span class="sub" @click="subItem('Nano')" role="button" aria-label="Decrease Nanotube production">&laquo;</span>`);
      let addNano = $(`<span class="add" @click="addItem('Nano')" role="button" aria-label="Increase Nanotube production">&raquo;</span>`);
      nano.append(subNano);
      nano.append(nanoCount);
      nano.append(addNano);
    }
    if (global.tech["stanene"]) {
      let stanene = $(`<div class="factory"><span class="Stanene" :aria-label="buildLabel('Stanene') + ariaProd('Stanene')">${global.resource.Stanene.name}</span></div>`);
      parent.append(stanene);
      let staneneCount = $(`<span class="current">{{ Stanene }}</span>`);
      let subStanene = $(`<span class="sub" @click="subItem('Stanene')" role="button" aria-label="Decrease Stanene production">&laquo;</span>`);
      let addStanene = $(`<span class="add" @click="addItem('Stanene')" role="button" aria-label="Increase Stanene production">&raquo;</span>`);
      stanene.append(subStanene);
      stanene.append(staneneCount);
      stanene.append(addStanene);
    }
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.city["factory"],
      methods: {
        subItem: function(item) {
          let keyMult = keyMultiplier();
          for (var i = 0; i < keyMult; i++) {
            if (global.city.factory[item] > 0) {
              global.city.factory[item]--;
            } else {
              break;
            }
          }
        },
        addItem: function(item) {
          let max = global.space["red_factory"] ? global.space.red_factory.on + global.city.factory.on : global.city.factory.on;
          if (global.interstellar["int_factory"] && p_on["int_factory"]) {
            max += p_on["int_factory"] * 2;
          }
          if (global.tauceti["tau_factory"] && support_on["tau_factory"]) {
            max += support_on["tau_factory"] * (global.tech["isolation"] ? 5 : 3);
          }
          if (global.portal["hell_factory"] && p_on["hell_factory"]) {
            max += p_on["hell_factory"] * actions.portal.prtl_wasteland.hell_factory.lines();
          }
          let keyMult = keyMultiplier();
          for (var i = 0; i < keyMult; i++) {
            let used = global.city.factory.Lux + global.city.factory.Furs + global.city.factory.Alloy + global.city.factory.Polymer + global.city.factory.Nano + global.city.factory.Stanene;
            if (used < max) {
              global.city.factory[item]++;
            } else if (used === max && item !== "Alloy" && global.city.factory["Alloy"] > 0) {
              global.city.factory["Alloy"]--;
              global.city.factory[item]++;
            } else {
              break;
            }
          }
        },
        buildLabel: function(type) {
          return tooltip(type);
        },
        ariaProd(prod) {
          return `. ${global.city.factory[prod]} factories producing ${prod}.`;
        },
        level() {
          let on = global.city.factory.Lux + global.city.factory.Furs + global.city.factory.Alloy + global.city.factory.Polymer + global.city.factory.Nano + global.city.factory.Stanene;
          let max = global.space["red_factory"] ? global.space.red_factory.on + global.city.factory.on : global.city.factory.on;
          if (global.interstellar["int_factory"] && p_on["int_factory"]) {
            max += p_on["int_factory"] * 2;
          }
          if (global.tauceti["tau_factory"] && support_on["tau_factory"]) {
            max += support_on["tau_factory"] * (global.tech["isolation"] ? 5 : 3);
          }
          if (global.portal["hell_factory"] && p_on["hell_factory"]) {
            max += p_on["hell_factory"] * actions.portal.prtl_wasteland.hell_factory.lines();
          }
          return colorRange(on, max);
        }
      },
      filters: {
        on() {
          return global.city.factory.Lux + global.city.factory.Furs + global.city.factory.Alloy + global.city.factory.Polymer + global.city.factory.Nano + global.city.factory.Stanene;
        },
        max() {
          let max = global.space["red_factory"] ? global.space.red_factory.on + global.city.factory.on : global.city.factory.on;
          if (global.interstellar["int_factory"] && p_on["int_factory"]) {
            max += p_on["int_factory"] * 2;
          }
          if (global.tauceti["tau_factory"] && support_on["tau_factory"]) {
            max += support_on["tau_factory"] * (global.tech["isolation"] ? 5 : 3);
          }
          if (global.portal["hell_factory"] && p_on["hell_factory"]) {
            max += p_on["hell_factory"] * actions.portal.prtl_wasteland.hell_factory.lines();
          }
          return max;
        },
        spook(v) {
          if (global.city.factory.Lux === 3 && bind) {
            let trick = trickOrTreat(6, 12, true);
            if (trick.length > 0) {
              return trick;
            }
          }
          return v;
        }
      }
    });
    function tooltip(type) {
      let assembly = global.tech["factory"] ? true : false;
      switch (type) {
        case "Lux": {
          let demand = +(highPopAdjust(global.resource[global.race.species].amount) * (assembly ? f_rate.Lux.demand[global.tech["factory"]] : f_rate.Lux.demand[0]));
          demand = luxGoodPrice(demand).toFixed(2);
          let fur = assembly ? f_rate.Lux.fur[global.tech["factory"]] : f_rate.Lux.fur[0];
          return loc("modal_factory_lux_label", [fur, global.resource.Furs.name, demand]);
        }
        case "Furs": {
          let money = assembly ? f_rate.Furs.money[global.tech["factory"]] : f_rate.Furs.money[0];
          let polymer = assembly ? f_rate.Furs.polymer[global.tech["factory"]] : f_rate.Furs.polymer[0];
          return loc("modal_factory_alloy_label", [money, global.resource.Money.name, polymer, global.resource.Polymer.name, global.race["evil"] ? loc("resource_Flesh_name") : global.resource.Furs.name]);
        }
        case "Alloy": {
          let copper = assembly ? f_rate.Alloy.copper[global.tech["factory"]] : f_rate.Alloy.copper[0];
          let aluminium = assembly ? f_rate.Alloy.aluminium[global.tech["factory"]] : f_rate.Alloy.aluminium[0];
          return loc("modal_factory_alloy_label", [copper, global.resource.Copper.name, aluminium, global.resource.Aluminium.name, global.resource.Alloy.name]);
        }
        case "Polymer": {
          if (global.race["kindling_kindred"] || global.race["smoldering"]) {
            let oil = assembly ? f_rate.Polymer.oil_kk[global.tech["factory"]] : f_rate.Polymer.oil_kk[0];
            return loc("modal_factory_polymer_label2", [oil, global.resource.Oil.name, global.resource.Polymer.name]);
          } else {
            let oil = assembly ? f_rate.Polymer.oil[global.tech["factory"]] : f_rate.Polymer.oil[0];
            let lumber = assembly ? f_rate.Polymer.lumber[global.tech["factory"]] : f_rate.Polymer.lumber[0];
            return loc("modal_factory_polymer_label1", [oil, global.resource.Oil.name, lumber, global.resource.Lumber.name, global.resource.Polymer.name]);
          }
        }
        case "Nano": {
          let coal = assembly ? f_rate.Nano_Tube.coal[global.tech["factory"]] : f_rate.Nano_Tube.coal[0];
          let neutronium = assembly ? f_rate.Nano_Tube.neutronium[global.tech["factory"]] : f_rate.Nano_Tube.neutronium[0];
          return loc("modal_factory_nano_label", [coal, global.resource.Coal.name, neutronium, global.resource.Neutronium.name, global.resource.Nano_Tube.name]);
        }
        case "Stanene": {
          let aluminium = assembly ? f_rate.Stanene.aluminium[global.tech["factory"]] : f_rate.Stanene.aluminium[0];
          let nano = assembly ? f_rate.Stanene.nano[global.tech["factory"]] : f_rate.Stanene.nano[0];
          return loc("modal_factory_stanene_label", [aluminium, global.resource.Aluminium.name, nano, global.resource.Nano_Tube.name, global.resource.Stanene.name]);
        }
      }
    }
    ["Lux", "Furs", "Alloy", "Polymer", "Nano", "Stanene"].forEach(function(type) {
      let id = parent.hasClass("modalBody") ? `specialModal` : `iFactory`;
      popover(`${id}${type}`, function() {
        return tooltip(type);
      }, {
        elm: $(`#${id} .factory > .${type}`),
        attach: "#main"
      });
    });
  }
  function luxGoodPrice(demand) {
    if (global.race["toxic"]) {
      demand *= 1 + traits.toxic.vars()[0] / 100;
    }
    let fathom = fathomCheck("shroomi");
    if (fathom > 0) {
      demand *= 1 + traits.toxic.vars(1)[0] / 100 * fathom;
    }
    if (global.civic.govern.type === "corpocracy") {
      demand *= 2.5;
    }
    if (global.civic.govern.type === "socialist") {
      demand *= 0.8;
    }
    if (global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 2) {
      demand *= 1.1;
    }
    if (global.race["inflation"]) {
      demand *= 1 + global.race.inflation / 1250;
    }
    if (global.tech["isolation"]) {
      demand *= 1 + (support_on["colony"] || 0) * 0.5;
    }
    if (global.stats.achieve["endless_hunger"] && global.stats.achieve["endless_hunger"].l >= 4 && global.city.banquet && global.city.banquet.level >= 4 && global.city.banquet.strength) {
      demand *= 1 + global.city.banquet.strength ** 0.75 / 100;
    }
    demand *= production("psychic_cash");
    return demand;
  }
  var nf_resources = [
    "Lumber",
    "Chrysotile",
    "Stone",
    "Crystal",
    "Furs",
    "Copper",
    "Iron",
    "Aluminium",
    "Cement",
    "Coal",
    "Oil",
    "Uranium",
    "Steel",
    "Titanium",
    "Alloy",
    "Polymer",
    "Iridium",
    "Helium_3",
    "Water",
    "Deuterium",
    "Neutronium",
    "Adamantite",
    "Bolognium",
    "Orichalcum"
  ];
  function loadNFactory(parent, bind) {
    let fuel = $(`<div><span class="has-text-warning">${loc("modal_factory_operate")}:</span> <span :class="level()">{{count | on}}/{{ count | max }}</span></div>`);
    parent.append(fuel);
    let rId = parent.hasClass("modalBody") ? `mNFactoryRes` : `NFactoryRes`;
    let resTypes = $(`<div id="${rId}" class="fuels"></div>`);
    parent.append(resTypes);
    nf_resources.forEach(function(r) {
      if (global.resource[r].display) {
        let res = $(`<span :aria-label="eatLabel('${r}')" class="current ${r}">${global.resource[r].name} {{ ${r} }}</span>`);
        let subRes = $(`<span role="button" class="sub" @click="subItem('${r}')" aria-label="Decrease ${r} destruction"><span>&laquo;</span></span>`);
        let addRes = $(`<span role="button" class="add" @click="addItem('${r}')" aria-label="Increase ${r} destruction"><span>&raquo;</span></span>`);
        resTypes.append(subRes);
        resTypes.append(res);
        resTypes.append(addRes);
      }
    });
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.city.nanite_factory,
      methods: {
        subItem: function(r) {
          let keyMult = keyMultiplier();
          global.city.nanite_factory[r] -= keyMult;
          if (global.city.nanite_factory[r] < 0) {
            global.city.nanite_factory[r] = 0;
          }
        },
        addItem: function(r) {
          let keyMult = keyMultiplier();
          let on = 0;
          nf_resources.forEach(function(r2) {
            on += global.city.nanite_factory[r2];
          });
          let avail = global.city.nanite_factory.count * 50 - on;
          if (keyMult > avail) {
            keyMult = avail;
          }
          if (keyMult > 0) {
            global.city.nanite_factory[r] += keyMult;
          }
        },
        eatLabel(r) {
          return `Consume ${r} to produce ${global.resource.Nanite.name}`;
        },
        level() {
          let on = 0;
          nf_resources.forEach(function(r) {
            on += global.city.nanite_factory[r];
          });
          let max = global.city.nanite_factory.count;
          return colorRange(on, max);
        }
      },
      filters: {
        on() {
          let on = 0;
          nf_resources.forEach(function(r) {
            on += global.city.nanite_factory[r];
          });
          return on;
        },
        max() {
          return global.city.nanite_factory.count * 50;
        }
      }
    });
    function tooltip(res) {
      let base_conversion = +(atomic_mass[res] / 100 * (traits.deconstructor.vars()[0] / 100)).toFixed(4);
      let curr_conversion = +(global.city.nanite_factory[res] * base_conversion).toFixed(4);
      return loc("modal_nfactory_resource_label", [1, global.resource[res].name, base_conversion, global.resource.Nanite.name, global.city.nanite_factory[res], curr_conversion]);
    }
    nf_resources.forEach(function(type) {
      let id = parent.hasClass("modalBody") ? `specialModal` : `iNFactory`;
      popover(`${id}${type}`, function() {
        return tooltip(type);
      }, {
        elm: $(`#${id} > .fuels > .${type}`),
        attach: "#main"
      });
    });
  }
  function loadDroid(parent, bind) {
    let fuel = $(`<div><span class="has-text-warning">${loc("modal_factory_operate")}:</span> <span :class="level()">{{count | on}}/{{ on | max }}</span></div>`);
    parent.append(fuel);
    let adam = $(`<div class="factory"><span class="adam" :aria-label="buildLabel('adam') + ariaProd('adam')">${global.resource.Adamantite.name}</span></div>`);
    parent.append(adam);
    let adamCount = $(`<span class="current">{{ adam }}</span>`);
    let adamSub = $(`<span class="sub" @click="subItem('adam')" role="button" aria-label="Decrease Adamantite production">&laquo;</span>`);
    let adamAdd = $(`<span class="add" @click="addItem('adam')" role="button" aria-label="Increase Adamantite production">&raquo;</span>`);
    adam.append(adamSub);
    adam.append(adamCount);
    adam.append(adamAdd);
    let uran = $(`<div class="factory"><span class="uran" :aria-label="buildLabel('uran') + ariaProd('uran')">${global.resource.Uranium.name}</span></div>`);
    parent.append(uran);
    let uranCount = $(`<span class="current">{{ uran }}</span>`);
    let uranSub = $(`<span class="sub" @click="subItem('uran')" role="button" aria-label="Decrease Uranium production">&laquo;</span>`);
    let uranAdd = $(`<span class="add" @click="addItem('uran')" role="button" aria-label="Increase Uranium production">&raquo;</span>`);
    uran.append(uranSub);
    uran.append(uranCount);
    uran.append(uranAdd);
    let coal = $(`<div class="factory"><span class="coal" :aria-label="buildLabel('coal') + ariaProd('coal')">${global.resource.Coal.name}</span></div>`);
    parent.append(coal);
    let coalCount = $(`<span class="current">{{ coal }}</span>`);
    let coalSub = $(`<span class="sub" @click="subItem('coal')" role="button" aria-label="Decrease Coal production">&laquo;</span>`);
    let coalAdd = $(`<span class="add" @click="addItem('coal')" role="button" aria-label="Increase Coal production">&raquo;</span>`);
    coal.append(coalSub);
    coal.append(coalCount);
    coal.append(coalAdd);
    let alum = $(`<div class="factory"><span class="alum" :aria-label="buildLabel('alum') + ariaProd('alum')">${global.resource.Aluminium.name}</span></div>`);
    parent.append(alum);
    let alumCount = $(`<span class="current">{{ alum }}</span>`);
    let alumSub = $(`<span class="sub" @click="subItem('alum')" role="button" aria-label="Decrease Aluminium production">&laquo;</span>`);
    let alumAdd = $(`<span class="add" @click="addItem('alum')" role="button" aria-label="Increase Aluminium production">&raquo;</span>`);
    alum.append(alumSub);
    alum.append(alumCount);
    alum.append(alumAdd);
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.interstellar["mining_droid"],
      methods: {
        subItem: function(item) {
          let keyMult = keyMultiplier();
          for (var i = 0; i < keyMult; i++) {
            if (global.interstellar.mining_droid[item] > 0) {
              global.interstellar.mining_droid[item]--;
            } else {
              break;
            }
          }
        },
        addItem: function(item) {
          let keyMult = keyMultiplier();
          for (var i = 0; i < keyMult; i++) {
            if (global.interstellar.mining_droid.adam + global.interstellar.mining_droid.uran + global.interstellar.mining_droid.coal + global.interstellar.mining_droid.alum < global.interstellar.mining_droid.on) {
              global.interstellar.mining_droid[item]++;
            } else {
              break;
            }
          }
        },
        buildLabel: function(type) {
          return tooltip(type);
        },
        ariaProd(prod) {
          return `. ${global.interstellar.mining_droid[prod]} driod mining ${prod}.`;
        },
        level() {
          let on = global.interstellar.mining_droid.adam + global.interstellar.mining_droid.uran + global.interstellar.mining_droid.coal + global.interstellar.mining_droid.alum;
          let max = global.interstellar.mining_droid.on;
          return colorRange(on, max);
        }
      },
      filters: {
        on() {
          return global.interstellar.mining_droid.adam + global.interstellar.mining_droid.uran + global.interstellar.mining_droid.coal + global.interstellar.mining_droid.alum;
        },
        max() {
          return global.interstellar.mining_droid.on;
        }
      }
    });
    function tooltip(type) {
      switch (type) {
        case "adam":
          return loc("modal_droid_res_label", [global.resource.Adamantite.name]);
        case "uran":
          return loc("modal_droid_res_label", [global.resource.Uranium.name]);
        case "coal":
          return loc("modal_droid_res_label", [global.resource.Coal.name]);
        case "alum":
          return loc("modal_droid_res_label", [global.resource.Aluminium.name]);
      }
    }
    ["adam", "uran", "coal", "alum"].forEach(function(type) {
      let id = parent.hasClass("modalBody") ? `specialModal` : `iDroid`;
      popover(`${id}${type}`, function() {
        return tooltip(type);
      }, {
        elm: $(`#${id} .factory > .${type}`),
        attach: "#main"
      });
    });
  }
  function loadGraphene(parent, bind) {
    let graph_source = global.race["truepath"] ? "space" : "interstellar";
    let graph_struct = "g_factory";
    if (global.race["warlord"]) {
      graph_source = "portal";
      graph_struct = "twisted_lab";
    }
    let fuel = $(`<div><span class="has-text-warning">${loc("modal_smelter_fuel")}:</span> <span :class="level()">{{count | on}}/{{ on | max }}</span></div>`);
    parent.append(fuel);
    let fuelTypes = $("<div></div>");
    parent.append(fuelTypes);
    if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
      let f_label = global.resource.Lumber.name;
      let wood = $(`<span :aria-label="buildLabel('wood') + ariaCount('Wood')" class="current wood">${f_label} {{ Lumber }}</span>`);
      let subWood = $(`<span role="button" class="sub" @click="subWood" aria-label="Remove lumber fuel"><span>&laquo;</span></span>`);
      let addWood = $(`<span role="button" class="add" @click="addWood" aria-label="Add lumber fuel"><span>&raquo;</span></span>`);
      fuelTypes.append(subWood);
      fuelTypes.append(wood);
      fuelTypes.append(addWood);
    }
    if (global.resource.Coal.display) {
      let coal = $(`<span :aria-label="buildLabel('coal') + ariaCount('Coal')" class="current coal">${global.resource.Coal.name} {{ Coal }}</span>`);
      let subCoal = $(`<span role="button" class="sub" @click="subCoal" aria-label="Remove coal fuel"><span>&laquo;</span></span>`);
      let addCoal = $(`<span role="button" class="add" @click="addCoal" aria-label="Add coal fuel"><span>&raquo;</span></span>`);
      fuelTypes.append(subCoal);
      fuelTypes.append(coal);
      fuelTypes.append(addCoal);
    }
    if (global.resource.Oil.display) {
      let oil = $(`<span :aria-label="buildLabel('oil') + ariaCount('Oil')" class="current oil">${global.resource.Oil.name} {{ Oil }}</span>`);
      let subOil = $(`<span role="button" class="sub" @click="subOil" aria-label="Remove oil fuel"><span>&laquo;</span></span>`);
      let addOil = $(`<span role="button" class="add" @click="addOil" aria-label="Add oil fuel"><span>&raquo;</span></span>`);
      fuelTypes.append(subOil);
      fuelTypes.append(oil);
      fuelTypes.append(addOil);
    }
    vBind({
      el: bind ? bind : "#specialModal",
      data: global[graph_source][graph_struct],
      methods: {
        subWood() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Lumber > 0) {
              global[graph_source][graph_struct].Lumber--;
            } else {
              break;
            }
          }
        },
        addWood() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil < global[graph_source][graph_struct].on) {
              global[graph_source][graph_struct].Lumber++;
            } else if (global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil > 0) {
              if (global[graph_source][graph_struct].Oil > global[graph_source][graph_struct].Coal) {
                global[graph_source][graph_struct].Coal > 0 ? global[graph_source][graph_struct].Coal-- : global[graph_source][graph_struct].Oil--;
              } else {
                global[graph_source][graph_struct].Oil > 0 ? global[graph_source][graph_struct].Oil-- : global[graph_source][graph_struct].Coal--;
              }
              global[graph_source][graph_struct].Lumber++;
            } else {
              break;
            }
          }
        },
        subCoal() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Coal > 0) {
              global[graph_source][graph_struct].Coal--;
            } else {
              break;
            }
          }
        },
        addCoal() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil < global[graph_source][graph_struct].on) {
              global[graph_source][graph_struct].Coal++;
            } else if (global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Oil > 0) {
              if (global[graph_source][graph_struct].Lumber > 0) {
                global[graph_source][graph_struct].Lumber--;
              } else {
                global[graph_source][graph_struct].Oil--;
              }
              global[graph_source][graph_struct].Coal++;
            } else {
              break;
            }
          }
        },
        subOil() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Oil > 0) {
              global[graph_source][graph_struct].Oil--;
            } else {
              break;
            }
          }
        },
        addOil() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil < global[graph_source][graph_struct].on) {
              global[graph_source][graph_struct].Oil++;
            } else if (global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal > 0) {
              if (global[graph_source][graph_struct].Lumber > 0) {
                global[graph_source][graph_struct].Lumber--;
              } else {
                global[graph_source][graph_struct].Coal--;
              }
              global[graph_source][graph_struct].Oil++;
            } else {
              break;
            }
          }
        },
        buildLabel(type) {
          return tooltip(type);
        },
        ariaCount(fuel2) {
          return ` ${global[graph_source][graph_struct][fuel2]} ${fuel2} fueled.`;
        },
        ariaProd(res) {
          return `. ${global[graph_source][graph_struct][res]} producing ${res}.`;
        },
        level() {
          let on = global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil;
          let max = global[graph_source][graph_struct].on;
          return colorRange(on, max);
        }
      },
      filters: {
        on: function(c) {
          return global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil;
        }
      }
    });
    function tooltip(type) {
      switch (type) {
        case "wood":
          return loc("modal_graphene_produce", [350, global.race["evil"] ? loc("resource_Bones_name") : global.resource.Lumber.name, global.resource.Graphene.name]);
        case "coal":
          return loc("modal_graphene_produce", [25, global.resource.Coal.name, global.resource.Graphene.name]);
        case "oil":
          return loc("modal_graphene_produce", [15, global.resource.Oil.name, global.resource.Graphene.name]);
      }
    }
    ["wood", "coal", "oil"].forEach(function(type) {
      let id = parent.hasClass("modalBody") ? `specialModal` : `iGraphene`;
      popover(`${id}${type}`, function() {
        return tooltip(type);
      }, {
        elm: $(`#${id} > div > .${type}`),
        attach: "#main"
      });
    });
  }
  function loadPylon(parent, bind) {
    let casting = $(`<div><span class="has-text-warning">${loc("modal_pylon_casting")}:</span> <span :class="level()">{{total | drain}}</span></div>`);
    parent.append(casting);
    let spellTypes = $('<div class="pylon wrap"></div>');
    parent.append(spellTypes);
    let ritualList = ["science", "army", "hunting"];
    if (!global.race["detritivore"] && !global.race["carnivore"] && !global.race["soul_eater"] && !global.race["artifical"] && !global.race["unfathomable"] && !global.race["cataclysm"] && !global.race["orbit_decayed"]) {
      ritualList.push("farmer");
    }
    if (!global.race["cataclysm"]) {
      ritualList.push("miner");
    }
    if (!global.race["kindling_kindred"] && !global.race["smoldering"] && !global.race["evil"] && !global.race["cataclysm"] && !global.race["orbit_decayed"]) {
      ritualList.push("lumberjack");
    }
    if (!global.race["flier"]) {
      ritualList.push("factory");
    }
    if (global.tech.magic >= 4) {
      ritualList.push("crafting");
    }
    if (global.tech["magic"] && global.tech.magic >= 3) {
      ritualList.forEach(function(spell) {
        let cast = $(`<span :aria-label="buildLabel('${spell}') + ariaCount('${spell}')" class="current ${spell}">${loc(`modal_pylon_spell_${spell}`)} {{ ${spell} }}</span>`);
        let sub = $(`<span role="button" class="sub" @click="subSpell('${spell}')" aria-label="Stop casting '${spell}' ritual"><span>&laquo;</span></span>`);
        let add = $(`<span role="button" class="add" @click="addSpell('${spell}')" aria-label="Cast '${spell}' ritual"><span>&raquo;</span></span>`);
        spellTypes.append(sub);
        spellTypes.append(cast);
        spellTypes.append(add);
      });
    }
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.race["casting"],
      methods: {
        buildLabel(spell) {
          return tooltip(spell);
        },
        addSpell(spell) {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            let diff = manaCost(global.race.casting[spell] + 1) - manaCost(global.race.casting[spell]);
            if (global.resource.Mana.diff >= diff) {
              global.race.casting[spell]++;
              global.race.casting.total++;
              global.resource.Mana.diff -= diff;
            } else {
              break;
            }
          }
        },
        subSpell(spell) {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.casting[spell] > 0) {
              global.race.casting[spell]--;
              global.race.casting.total--;
            } else {
              break;
            }
          }
        },
        ariaCount(spell) {
          return ` ${spell} casting.`;
        },
        level() {
          return colorRange(global.race.casting.total, global.resource.Mana.gen, true);
        }
      },
      filters: {
        drain: function(c) {
          let total = 0;
          ritualList.forEach(function(spell) {
            if (global.race.casting[spell] && global.race.casting[spell] > 0) {
              total += manaCost(global.race.casting[spell]);
            }
          });
          return loc("modal_pylon_casting_cost", [+total.toFixed(3)]);
        }
      }
    });
    function tooltip(spell) {
      let draw = +manaCost(global.race.casting[spell]).toFixed(4);
      let diff = +(manaCost(global.race.casting[spell] + 1) - manaCost(global.race.casting[spell])).toFixed(4);
      let boost = +(100 * (global.race.casting[spell] / (global.race.casting[spell] + 75))).toFixed(2);
      if (spell === "crafting") {
        let auto = +(100 * (2 * global.race.casting[spell] / (2 * global.race.casting[spell] + 75))).toFixed(2);
        return loc("modal_pylon_casting_label_crafting", [draw, boost, auto, diff]);
      }
      return loc("modal_pylon_casting_label", [loc(`modal_pylon_spell_${spell}`), draw, diff, boost]);
    }
    ritualList.forEach(function(type) {
      let id = parent.hasClass("modalBody") ? `specialModal` : `iPylon`;
      popover(`${id}${type}`, function() {
        return tooltip(type);
      }, {
        elm: $(`#${id} > .pylon > .${type}`),
        attach: "#main"
      });
    });
  }
  var ritual_types = ["farmer", "miner", "lumberjack", "science", "factory", "army", "hunting", "crafting"];
  function setupRituals(define = false) {
    if (define) {
      global.race["casting"] = {
        farmer: 0,
        miner: 0,
        lumberjack: 0,
        science: 0,
        factory: 0,
        army: 0,
        hunting: 0,
        crafting: 0,
        total: 0
      };
    }
    if (global.race["casting"]) {
      ritual_types.forEach(function(c) {
        active_rituals[c] = global.race.casting[c];
      });
    }
  }
  function cancelRituals() {
    if (global.race["casting"]) {
      Object.keys(global.race.casting).forEach(function(c) {
        global.race.casting[c] = 0;
        active_rituals[c] = 0;
      });
    }
  }
  function loadQuarry(parent, bind) {
    parent.append($(`<div>${loc("modal_quarry_ratio", [global.resource.Chrysotile.name])}</div>`));
    let slider = $(`<div class="sliderbar"><span class="sub" role="button" @click="sub" aria-label="Increase Stone Production">&laquo;</span><b-slider v-model="asbestos" format="percent"></b-slider><span class="add" role="button" @click="add" aria-label="Increase Chrysotile Production">&raquo;</span></div>`);
    parent.append(slider);
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.city.rock_quarry,
      methods: {
        sub() {
          let keyMult = keyMultiplier();
          if (global.city.rock_quarry.asbestos > 0) {
            global.city.rock_quarry.asbestos -= keyMult;
            if (global.city.rock_quarry.asbestos < 0) {
              global.city.rock_quarry.asbestos = 0;
            }
          }
        },
        add() {
          let keyMult = keyMultiplier();
          if (global.city.rock_quarry.asbestos < 100) {
            global.city.rock_quarry.asbestos += keyMult;
            if (global.city.rock_quarry.asbestos > 100) {
              global.city.rock_quarry.asbestos = 100;
            }
          }
        }
      }
    });
  }
  function loadMechStation(parent, bind) {
    let mech = $(`<div class="factory"><span>${global.race["warlord"] ? loc(`eden_demon_station_control`) : loc(`eden_mech_station_control`)}</span></div>`);
    parent.append(mech);
    let mechPatrol = $(`<span class="current">{{ mode | patrolMode }}</span>`);
    let mechDown = $(`<span class="sub" @click="lower()" role="button" aria-label="Decrease Patrol Aggression">&laquo;</span>`);
    let mechUp = $(`<span class="add" @click="higher()" role="button" aria-label="Increase Patrol Aggression">&raquo;</span>`);
    mech.append(mechDown);
    mech.append(mechPatrol);
    mech.append(mechUp);
    let stats = $(`<div class="flexAround"></div>`);
    stats.append($(`<span v-html="$options.filters.patrol(mechs)"></span>`));
    stats.append($(`<span v-html="$options.filters.effect(effect)"></span>`));
    parent.append(stats);
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.eden["mech_station"],
      methods: {
        lower: function() {
          if (global.eden.mech_station.mode > 0) {
            global.eden.mech_station.mode--;
          }
        },
        higher: function() {
          if (global.eden.mech_station.mode < 5) {
            global.eden.mech_station.mode++;
          }
        }
      },
      filters: {
        patrolMode(v) {
          return loc(`eden_mech_station_patrol${v}`);
        },
        patrol(v) {
          return loc(global.race["warlord"] ? `eden_demon_station_mechs` : `eden_mech_station_mechs`, [v]);
        },
        effect(v) {
          return loc(`eden_mech_station_effective`, [v]);
        }
      }
    });
  }
  function loadTMine(parent, bind) {
    parent.append($(`<div>${loc("modal_quarry_ratio", [global.resource.Adamantite.name])}</div>`));
    let slider = $(`<div class="sliderbar"><span class="sub" role="button" @click="sub" aria-label="Increase Aluminium Production">&laquo;</span><b-slider v-model="ratio" format="percent"></b-slider><span class="add" role="button" @click="add" aria-label="Increase Adamantite Production">&raquo;</span></div>`);
    parent.append(slider);
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.space.titan_mine,
      methods: {
        sub() {
          let keyMult = keyMultiplier();
          if (global.space.titan_mine.ratio > 0) {
            global.space.titan_mine.ratio -= keyMult;
            if (global.space.titan_mine.ratio < 0) {
              global.space.titan_mine.ratio = 0;
            }
          }
        },
        add() {
          let keyMult = keyMultiplier();
          if (global.space.titan_mine.ratio < 100) {
            global.space.titan_mine.ratio += keyMult;
            if (global.space.titan_mine.ratio > 100) {
              global.space.titan_mine.ratio = 100;
            }
          }
        }
      }
    });
  }
  function loadMiningShip(parent, bind) {
    parent.append($(`<div>${loc("tau_roid_mining_ship_ratio", [global.resource.Iron.name, global.resource.Aluminium.name])}</div>`));
    let common = $(`<div class="sliderbar thin"><span class="sub" role="button" @click="sub('common')" aria-label="Increase Iron Production">&laquo;</span><b-slider v-model="common" format="percent"></b-slider><span class="add" role="button" @click="add('common')" aria-label="Increase Aluminium Production">&raquo;</span></div>`);
    parent.append(common);
    parent.append($(`<div>${loc("tau_roid_mining_ship_ratio", [global.resource.Iridium.name, global.resource.Neutronium.name])}</div>`));
    let uncommon = $(`<div class="sliderbar thin"><span class="sub" role="button" @click="sub('uncommon')" aria-label="Increase Iridium Production">&laquo;</span><b-slider v-model="uncommon" format="percent"></b-slider><span class="add" role="button" @click="add('uncommon')" aria-label="Increase Neutronium Production">&raquo;</span></div>`);
    parent.append(uncommon);
    if (global.tech.tau_roid >= 5) {
      parent.append($(`<div>${loc("tau_roid_mining_ship_ratio", [global.resource.Orichalcum.name, global.resource.Elerium.name])}</div>`));
      let rare = $(`<div class="sliderbar thin"><span class="sub" role="button" @click="sub('rare')" aria-label="Increase Orichalcum Production">&laquo;</span><b-slider v-model="rare" format="percent"></b-slider><span class="add" role="button" @click="add('rare')" aria-label="Increase Elerium Production">&raquo;</span></div>`);
      parent.append(rare);
    }
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.tauceti.mining_ship,
      methods: {
        sub(r) {
          let keyMult = keyMultiplier();
          if (global.tauceti.mining_ship[r] > 0) {
            global.tauceti.mining_ship[r] -= keyMult;
            if (global.tauceti.mining_ship[r] < 0) {
              global.tauceti.mining_ship[r] = 0;
            }
          }
        },
        add(r) {
          let keyMult = keyMultiplier();
          if (global.tauceti.mining_ship[r] < 100) {
            global.tauceti.mining_ship[r] += keyMult;
            if (global.tauceti.mining_ship[r] > 100) {
              global.tauceti.mining_ship[r] = 100;
            }
          }
        }
      }
    });
  }
  function loadAlienSpaceStation(parent, bind) {
    parent.append($(`<div>${loc("tau_gas2_alien_station_focus", [global.resource.Knowledge.name])}</div>`));
    let common = $(`<div class="sliderbar thin"><span class="sub" role="button" @click="sub('focus')" aria-label="Decrease Knowledge Focus">&laquo;</span><b-slider v-model="focus" format="percent"></b-slider><span class="add" role="button" @click="add('focus')" aria-label="Increase Knowledge Focus">&raquo;</span></div>`);
    parent.append(common);
    vBind({
      el: bind ? bind : "#specialModal",
      data: global.tauceti.alien_space_station,
      methods: {
        sub(r) {
          let keyMult = keyMultiplier();
          if (global.tauceti.alien_space_station[r] > 0) {
            global.tauceti.alien_space_station[r] -= keyMult;
            if (global.tauceti.alien_space_station[r] < 0) {
              global.tauceti.alien_space_station[r] = 0;
            }
          }
        },
        add(r) {
          let keyMult = keyMultiplier();
          if (global.tauceti.alien_space_station[r] < 100) {
            global.tauceti.alien_space_station[r] += keyMult;
            if (global.tauceti.alien_space_station[r] > 100) {
              global.tauceti.alien_space_station[r] = 100;
            }
          }
        }
      }
    });
  }
  function loadReplicator(parent, bind) {
    if (global.race["replicator"]) {
      parent.append($(`<div>${global.race.universe === "antimatter" ? loc("tech_antireplicator") : loc("tech_replicator")}</div>`));
      let content = $(`<div class="doublePane"></div>`);
      parent.append(content);
      if (bind) {
        let values = ``;
        Object.keys(atomic_mass).forEach(function(res) {
          if (res !== "Asphodel_Powder" && res !== "Elysanite") {
            values += `<b-dropdown-item aria-role="listitem" v-on:click="setVal('${res}')" data-val="${res}" v-show="avail('${res}')">${global.resource[res].name}</b-dropdown-item>`;
          }
        });
        content.append(`<div><b-dropdown :triggers="['hover', 'click']" aria-role="list" :scrollable="true" :max-height="200" class="dropList">
                <button class="button is-info" slot="trigger">
                    <span>{{ res | resName }}</span>
                </button>${values}
            </b-dropdown></div>`);
      } else {
        let scrollMenu = ``;
        let blacklist = ["Asphodel_Powder", "Elysanite"];
        if (global.race["fasting"]) {
          blacklist.push("Food");
        }
        Object.keys(atomic_mass).forEach(function(res) {
          if (global.resource[res].display && !blacklist.includes(res)) {
            scrollMenu += `<b-radio-button v-model="res" native-value="${res}">${global.resource[res].name}</b-radio-button>`;
          }
        });
        content.append(`<div id="hscrolltarget" class="left hscroll"><b-field class="buttonList">${scrollMenu}</b-field></div>`);
      }
      let power = bind ? $(`<div></div>`) : $(`<div class="right"></div>`);
      content.append(power);
      let current = $(`<span :aria-label="aria" class="current"><span>{{ pow }}MW</span></span>`);
      let less = $(`<span role="button" class="sub" @click="less" aria-label="Reduce power by 1"><span>&laquo;</span></span>`);
      let more = $(`<span role="button" class="add" @click="more" aria-label="Increase power by 1"><span>&raquo;</span></span>`);
      power.append(less);
      power.append(current);
      power.append(more);
      parent.append(`<div class="topPad">{{ res | result }}</div>`);
      vBind({
        el: bind ? bind : "#specialModal",
        data: global.race.replicator,
        methods: {
          less() {
            let keyMult = keyMultiplier();
            if (global.race.replicator.pow > 0) {
              global.race.replicator.pow -= keyMult;
              if (global.race.replicator.pow < 0) {
                global.race.replicator.pow = 0;
              }
            }
          },
          more() {
            let keyMult = keyMultiplier();
            global.race.replicator.pow += keyMult;
          },
          setVal(r) {
            if (global.resource[r].display) {
              global.race.replicator.res = r;
            }
          },
          avail(r) {
            return global.resource[r].display && !(global.race["fasting"] && r === "Food");
          },
          aria() {
            return global.race.replicator.pow + "MW";
          }
        },
        filters: {
          resName(r) {
            return global.resource[r].name;
          },
          result(r) {
            return loc(`tau_replicator`, [replicator(r, global.race.replicator.pow).toFixed(2), global.resource[r].name]);
          }
        }
      });
      if (!bind) {
        const scrollContainer = document.getElementById("hscrolltarget");
        scrollContainer.addEventListener("wheel", (evt) => {
          evt.preventDefault();
          scrollContainer.scrollLeft += evt.deltaY;
        });
      }
    }
  }
  function replicator(res, pow) {
    if (global.race["lone_survivor"]) {
      return 17.5 * quantum_level / atomic_mass[res] * pow;
    } else {
      let qLevel = quantum_level || 1;
      let mass = res === "Infernite" || res === "Elerium" ? atomic_mass[res] * 4 : atomic_mass[res];
      if (pow > 5e3) {
        pow = (pow - 5e3) ** 0.9 + 5e3;
      }
      if (qLevel > 40) {
        qLevel = (qLevel - 40) ** 0.75 + 40;
      }
      return 12.5 * qLevel / mass * pow ** 0.75;
    }
  }
  function manaCost(spell, rate = 25e-4) {
    return spell * ((1 + rate) ** spell - 1);
  }
  function maxRitualNum(mana, time_multiplier = 0.25, rate = 25e-4) {
    return binary_limit_test(function(num) {
      return manaCost(num, rate) * time_multiplier <= mana;
    });
  }
  function colorRange(num, max, invert) {
    if (num <= 0) {
      return invert ? "has-text-success" : "has-text-danger";
    } else if (num >= max) {
      return invert ? "has-text-danger" : "has-text-success";
    } else if (num <= max / 3) {
      return invert ? "has-text-info" : "has-text-caution";
    } else if (num <= max * 0.66) {
      return "has-text-warning";
    } else if (num < max) {
      return invert ? "has-text-caution" : "has-text-info";
    } else {
      return "";
    }
  }
  function gridEnabled(c_action, region, p0, p1) {
    let isOk = false;
    switch (region) {
      case "city":
        if (p1 === "replicator" && global.race["replicator"]) {
          isOk = true;
        } else {
          isOk = global.race["cataclysm"] || global.race["orbit_decayed"] || global.tech["isolation"] || global.race["warlord"] ? false : checkCityRequirements(p1);
        }
        break;
      case "space":
        isOk = global.tech["isolation"] || global.race["warlord"] ? false : checkSpaceRequirements(region, p0, p1);
        break;
      case "portal":
        isOk = checkRequirements2(fortressTech(), p0, p1);
        break;
      case "tauceti":
        isOk = checkPathRequirements(region, p0, p1);
        break;
      case "eden":
        isOk = checkRequirements2(edenicTech(), p0, p1);
        break;
      default:
        isOk = p0 === "spc_moon" && global.race["orbit_decayed"] ? false : checkSpaceRequirements(region, p0, p1);
        break;
    }
    return global[region][p1] && isOk && checkPowerRequirements(c_action) ? true : false;
  }
  function setPowerGrid() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 2)) {
      return;
    }
    let grids = gridDefs();
    clearGrids(grids);
    clearElement($("#powerGrid"));
    $("#powerGrid").append(`<div class="powerGridHead"><div class="powerGridHeader has-text-info">${loc(`power_grid_header`)}</div><div id="powerModeSwitch"><b-switch class="setting" v-model="lowPowerBalance">Distribute Low Power</b-switch></div></div>`);
    vBind({
      el: `#powerModeSwitch`,
      data: global.settings
    });
    Object.keys(grids).forEach(function(grid_type) {
      if (!grids[grid_type].s) {
        return;
      }
      let candy = "";
      if (grid_type === "power") {
        candy = trickOrTreat(7, 12, false);
      }
      if (grids[grid_type].r && grids[grid_type].rs && global[grids[grid_type].r][grids[grid_type].rs]) {
        $("#powerGrid").append(`<div id="pg${grid_type}sup" class="gridHeader"><span class="has-text-caution">${grids[grid_type].n}</span> {{ support }}/{{ s_max }}</div>`);
        vBind({
          el: `#pg${grid_type}sup`,
          data: global[grids[grid_type].r][grids[grid_type].rs]
        });
      } else {
        $("#powerGrid").append(`<div class="gridHeader has-text-caution">${grids[grid_type].n}${candy}</div>`);
      }
      let grid = $(`<div id="grid${grid_type}" class="powerGrid"></div>`);
      $("#powerGrid").append(grid);
      let idx = 0;
      for (let i = 0; i < grids[grid_type].l.length; i++) {
        let struct = grids[grid_type].l[i];
        let parts = struct.split(":");
        let space2 = convertSpaceSector(parts[0]);
        let region = parts[0] === "city" ? parts[0] : space2;
        let c_action = parts[0] === "city" ? actions.city[parts[1]] : actions[space2][parts[0]][parts[1]];
        let title = typeof c_action.title === "function" ? c_action.title() : c_action.title;
        let extra = ``;
        switch (parts[1]) {
          case "factory":
            extra = ` (${loc(`tab_city5`)})`;
            break;
          case "red_factory":
            extra = ` (${loc(`tab_space`)})`;
            break;
          case "casino":
            extra = ` (${loc(`tab_city5`)})`;
            break;
          case "spc_casino":
            extra = ` (${loc(`tab_space`)})`;
            break;
        }
        if (gridEnabled(c_action, region, parts[0], parts[1])) {
          idx++;
          let circuit = $(`<div id="pg${c_action.id}${grid_type}" class="circuit" data-idx="${i}"></div>`);
          circuit.append(`<span v-html="$options.filters.idx(${idx})"></span> <span class="struct has-text-warning">${title}${extra}</span>`);
          circuit.append(`<span role="button" class="sub off" @click="power_off" aria-label="Powered Off"><span>{{ on | off }}</span></span> <span role="button" class="add on" @click="power_on" aria-label="Powered On"><span>{{ on }}</span></span>`);
          circuit.append(`<span role="button" class="sub is-sr-only" @click="higher" aria-label="Raise Power Priority"><span>&laquo;</span></span> <span role="button" class="add is-sr-only" @click="lower" aria-label="Lower Power Priority"><span>&raquo;</span></span>`);
          grid.append(circuit);
          vBind({
            el: `#pg${c_action.id}${grid_type}`,
            data: global[region][parts[1]],
            methods: {
              power_on() {
                let keyMult = keyMultiplier();
                for (let i2 = 0; i2 < keyMult; i2++) {
                  if (global[region][parts[1]].on < global[region][parts[1]].count) {
                    global[region][parts[1]].on++;
                  } else {
                    break;
                  }
                }
                if (c_action["postPower"]) {
                  callback_queue.set([c_action, "postPower"], [true]);
                }
              },
              power_off() {
                let keyMult = keyMultiplier();
                for (let i2 = 0; i2 < keyMult; i2++) {
                  if (global[region][parts[1]].on > 0) {
                    global[region][parts[1]].on--;
                  } else {
                    break;
                  }
                }
                if (c_action["postPower"]) {
                  callback_queue.set([c_action, "postPower"], [false]);
                }
              },
              higher() {
                let oIdx = $(`#pg${c_action.id}${grid_type}`).attr(`data-idx`);
                let nIdx = $(`#pg${c_action.id}${grid_type}`).prevAll(`.circuit:not(".inactive")`).attr(`data-idx`);
                if (nIdx >= 0) {
                  let order = grids[grid_type].l;
                  order.splice(nIdx, 0, order.splice(oIdx, 1)[0]);
                  grids[grid_type].l = order;
                  setPowerGrid();
                }
              },
              lower() {
                let oIdx = $(`#pg${c_action.id}${grid_type}`).attr(`data-idx`);
                let nIdx = $(`#pg${c_action.id}${grid_type}`).nextAll(`.circuit:not(".inactive")`).attr(`data-idx`);
                if (nIdx < grids[grid_type].l.length) {
                  let order = grids[grid_type].l;
                  order.splice(nIdx, 0, order.splice(oIdx, 1)[0]);
                  grids[grid_type].l = order;
                  setPowerGrid(grid_type);
                }
              }
            },
            filters: {
              off(c) {
                return global[region][parts[1]].count - c;
              },
              idx(idx2) {
                let egg18 = easterEgg(18, 11);
                if (idx2 === 10 && egg18.length > 0) {
                  return "1" + egg18;
                }
                return idx2;
              }
            }
          });
        } else {
          let circuit = $(`<div id="pg${c_action.id}${grid_type}" class="circuit inactive" data-idx="${i}"></div>`);
          circuit.append(`<span class="has-text-warning">${title}${extra}</span>`);
          grid.append(circuit);
        }
      }
      ;
      dragPowerGrid(grid_type);
      let reset3 = $(`<div id="${grid_type}GridReset" class="resetPowerGrid"><button class="button" @click="resetGrid('${grid_type}')">${loc("power_grid_reset", [grids[grid_type].n])}</button></div>`);
      $("#powerGrid").append(reset3);
      vBind({
        el: `#${grid_type}GridReset`,
        data: {},
        methods: {
          resetGrid(type) {
            powerGrid(type, true);
            setPowerGrid();
          }
        }
      });
    });
  }
  function gridDefs() {
    return {
      power: { l: global.power, n: loc(`power`), s: true, r: false, rs: false },
      moon: { l: global.support.moon, n: loc(`space_moon_info_name`), s: global.settings.space.moon, r: "space", rs: "moon_base" },
      red: { l: global.support.red, n: planetName().red, s: global.settings.space.red, r: "space", rs: "spaceport" },
      belt: { l: global.support.belt, n: loc(`space_belt_info_name`), s: global.settings.space.belt, r: "space", rs: "space_station" },
      alpha: { l: global.support.alpha, n: loc(`interstellar_alpha_name`), s: global.settings.space.alpha, r: "interstellar", rs: "starport" },
      nebula: { l: global.support.nebula, n: loc(`interstellar_nebula_name`), s: global.settings.space.nebula, r: "interstellar", rs: "nexus" },
      gateway: { l: global.support.gateway, n: loc(`galaxy_gateway`), s: global.settings.space.gateway, r: "galaxy", rs: "starbase" },
      alien2: { l: global.support.alien2, n: loc("galaxy_alien", [races[global.galaxy.hasOwnProperty("alien2") ? global.galaxy.alien2.id : global.race.species].name]), s: global.settings.space.alien2, r: "galaxy", rs: "foothold" },
      lake: { l: global.support.lake, n: loc(`portal_lake_name`), s: global.settings.portal.lake, r: "portal", rs: "harbor" },
      spire: { l: global.support.spire, n: loc(`portal_spire_name`), s: global.settings.portal.spire, r: "portal", rs: "purifier" },
      titan: { l: global.support.titan, n: planetName().titan, s: global.settings.space.titan, r: "space", rs: "electrolysis" },
      enceladus: { l: global.support.enceladus, n: planetName().enceladus, s: global.settings.space.enceladus, r: "space", rs: "titan_spaceport" },
      eris: { l: global.support.eris, n: planetName().eris, s: global.settings.space.eris, r: "space", rs: "drone_control" },
      tau_home: { l: global.support.tau_home, n: loc(`tau_planet`, [races[global.race.species].home]), s: global.settings.tau.home, r: "tauceti", rs: "orbital_station" },
      tau_red: { l: global.support.tau_red, n: loc(`tau_planet`, [planetName().red]), s: global.settings.tau.red, r: "tauceti", rs: "orbital_platform" },
      tau_roid: { l: global.support.tau_roid, n: loc(`tau_roid_title`), s: global.settings.tau.roid, r: "tauceti", rs: "patrol_ship" },
      asphodel: { l: global.support.asphodel, n: loc(`eden_asphodel_name`), s: global.settings.eden.asphodel, r: "eden", rs: "encampment" }
    };
  }
  function clearGrids(grids) {
    grids = grids || gridDefs();
    Object.keys(grids).forEach(function(grid_type) {
      let el = $(`#grid${grid_type}`)[0];
      if (el) {
        let sort = Sortable.get(el);
        if (sort) {
          sort.destroy();
        }
      }
    });
  }
  function dragPowerGrid(grid_type) {
    let el = $(`#grid${grid_type}`)[0];
    let grids = gridDefs();
    Sortable.create(el, {
      onEnd(e) {
        let order = grids[grid_type].l;
        order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
        grids[grid_type].l = order;
        setPowerGrid();
      }
    });
  }

  // src/events.js
  var events = {
    dna_replication: {
      reqs: {
        race: "protoplasm",
        resource: "DNA"
      },
      type: "major",
      effect() {
        var gain = Math.rand(1, Math.round(global.resource.DNA.max / 3));
        var res = global.resource.DNA.amount + gain;
        if (res > global.resource.DNA.max) {
          res = global.resource.DNA.max;
        }
        global.resource.DNA.amount = res;
        return loc("event_dna", [gain.toLocaleString()]);
      }
    },
    rna_meteor: {
      reqs: {
        race: "protoplasm",
        resource: "RNA"
      },
      type: "major",
      effect() {
        var gain = Math.rand(1, Math.round(global.resource.RNA.max / 2));
        var res = global.resource.RNA.amount + gain;
        if (res > global.resource.RNA.max) {
          res = global.resource.RNA.max;
        }
        global.resource.RNA.amount = res;
        return loc("event_rna", [gain.toLocaleString()]);
      }
    },
    inspiration: {
      reqs: {
        resource: "Knowledge"
      },
      type: "major",
      effect() {
        global.race["inspired"] = Math.rand(300, 600);
        return loc("event_inspiration");
      }
    },
    motivation: {
      reqs: {
        tech: "primitive"
      },
      type: "major",
      effect() {
        global.race["motivated"] = Math.rand(300, 600);
        return loc("event_motivation");
      }
    },
    fire: {
      reqs: {
        resource: "Lumber",
        nogenus: "aquatic",
        notrait: "evil"
      },
      type: "major",
      effect() {
        var loss = Math.rand(1, Math.round(global.resource.Lumber.amount / 4));
        var res = global.resource.Lumber.amount - loss;
        if (res < 0) {
          res = 0;
        }
        global.resource.Lumber.amount = res;
        return loc("event_fire", [loss.toLocaleString()]);
      }
    },
    flare: {
      reqs: {
        tech: "primitive"
      },
      type: "major",
      condition() {
        return global.city.ptrait.includes("flare") ? true : false;
      },
      effect(wiki) {
        let at_risk = 0;
        let planet = races[global.race.species].home;
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          if (global.space.hasOwnProperty("living_quarters")) {
            let num_lq_on = wiki ? global.space.living_quarters.on : support_on["living_quarters"];
            at_risk += Math.round(num_lq_on * actions.space.spc_red.living_quarters.citizens());
          }
          planet = races[global.race.species].solar.red;
        } else {
          if (global.city.hasOwnProperty("basic_housing")) {
            at_risk += global.city.basic_housing.count * actions.city.basic_housing.citizens();
          }
          if (global.city.hasOwnProperty("cottage")) {
            at_risk += global.city.cottage.count * actions.city.cottage.citizens();
          }
          if (global.city.hasOwnProperty("apartment")) {
            let num_apartment_on = wiki ? global.city.apartment.on : p_on["apartment"];
            at_risk += num_apartment_on * actions.city.apartment.citizens();
          }
        }
        if (at_risk > global.resource[global.race.species].amount) {
          at_risk = global.resource[global.race.species].amount;
        }
        at_risk = Math.floor(at_risk * 0.1);
        let loss = Math.rand(0, at_risk);
        global.resource[global.race.species].amount -= loss;
        global.civic[global.civic.d_job].workers -= loss;
        if (global.civic[global.civic.d_job].workers < 0) {
          global.civic[global.civic.d_job].workers = 0;
        }
        if (global.city.biome !== "oceanic") {
          let time = 400;
          if (global.city.biome === "forest") {
            time *= 2;
          } else if (global.city.biome === "desert" || global.city.biome === "volcanic") {
            time /= 2;
          }
          global.city["firestorm"] = Math.rand(time, time * 10);
        }
        return loc(global.city.biome === "oceanic" ? "event_flare2" : "event_flare", [planet, loss.toLocaleString()]);
      }
    },
    raid: {
      reqs: {
        tech: "military",
        notech: "world_control"
      },
      type: "major",
      condition() {
        if (checkControlling(`gov0`) && checkControlling(`gov1`) && checkControlling(`gov2`)) {
          return false;
        }
        return !global.race["truepath"] && !global.race["cataclysm"] && (global.civic.foreign.gov0.hstl > 60 || global.civic.foreign.gov1.hstl > 60 || global.civic.foreign.gov2.hstl > 60) ? true : false;
      },
      effect() {
        let army = armyRating(garrisonSize(), "army", global.civic.garrison.wounded);
        let eAdv = global.tech["high_tech"] ? global.tech["high_tech"] + 1 : 1;
        let enemy = Math.rand(25, 50) * eAdv;
        let injured = global.civic.garrison.wounded > garrisonSize() ? garrisonSize() : global.civic.garrison.wounded;
        let killed = Math.floor(seededRandom(0, injured));
        let wounded = Math.floor(seededRandom(0, garrisonSize() - injured));
        if (global.race["instinct"]) {
          killed = Math.round(killed / 2);
          wounded = Math.round(wounded / 2);
        }
        soldierDeath(killed);
        global.civic.garrison.wounded += wounded;
        if (global.civic.garrison.wounded > global.civic.garrison.workers) {
          global.civic.garrison.wounded = global.civic.garrison.workers;
        }
        if (global.race["blood_thirst"]) {
          global.race["blood_thirst_count"] += Math.ceil(enemy / 5);
          if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
            global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
          }
        }
        if (army > enemy) {
          return loc("event_raid1", [killed.toLocaleString(), wounded.toLocaleString()]);
        } else {
          let loss = Math.rand(1, Math.round(global.resource.Money.amount / 4));
          if (loss <= 0) {
            return loc("event_raid1", [killed.toLocaleString(), wounded.toLocaleString()]);
          } else {
            let res = global.resource.Money.amount - loss;
            if (res < 0) {
              res = 0;
            }
            global.resource.Money.amount = res;
            return loc("event_raid2", [loss.toLocaleString(), killed.toLocaleString(), wounded.toLocaleString()]);
          }
        }
      }
    },
    siege: {
      reqs: {
        tech: "military",
        notech: "world_control"
      },
      type: "major",
      condition() {
        if (checkControlling(`gov0`) || checkControlling(`gov1`) || checkControlling(`gov2`)) {
          return false;
        }
        return !global.race["truepath"] && global.civic.foreign.gov0.hstl > 80 && global.civic.foreign.gov1.hstl > 80 && global.civic.foreign.gov2.hstl > 80 ? true : false;
      },
      effect() {
        let army = armyRating(garrisonSize(), "army", global.civic.garrison.wounded);
        let eAdv = global.tech["high_tech"] ? global.tech["high_tech"] + 1 : 1;
        let enemy = (global.civic.foreign.gov0.mil + global.civic.foreign.gov1.mil + global.civic.foreign.gov2.mil) * eAdv;
        let injured = global.civic.garrison.wounded > garrisonSize() ? garrisonSize() : global.civic.garrison.wounded;
        let killed = Math.floor(seededRandom(0, injured));
        let wounded = Math.floor(seededRandom(0, garrisonSize() - injured));
        if (global.race["instinct"]) {
          killed = Math.round(killed / 2);
          wounded = Math.round(wounded / 2);
        }
        soldierDeath(killed);
        global.civic.garrison.wounded += wounded;
        if (global.civic.garrison.wounded > global.civic.garrison.workers) {
          global.civic.garrison.wounded = global.civic.garrison.workers;
        }
        if (global.race["blood_thirst"]) {
          global.race["blood_thirst_count"] += Math.ceil(enemy / 5);
          if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
            global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
          }
        }
        if (army > enemy) {
          return loc("event_siege1", [killed.toLocaleString(), wounded.toLocaleString()]);
        } else {
          var loss = Math.rand(1, Math.round(global.resource.Money.amount / 2));
          var res = global.resource.Money.amount - loss;
          if (res < 0) {
            res = 0;
          }
          global.resource.Money.amount = res;
          return loc("event_siege2", [loss.toLocaleString(), killed.toLocaleString(), wounded.toLocaleString()]);
        }
      }
    },
    pillage0: {
      reqs: {
        tech: "military",
        notech: "world_control"
      },
      type: "major",
      condition() {
        return global.race["truepath"] && !global.tech["isolation"] && !checkControlling(`gov0`) && global.civic.foreign.gov0.hstl > 60 ? true : false;
      },
      effect() {
        return pillaged(`gov0`);
      }
    },
    pillage1: {
      reqs: {
        tech: "military",
        notech: "world_control"
      },
      type: "major",
      condition() {
        return global.race["truepath"] && !global.tech["isolation"] && !checkControlling(`gov1`) && global.civic.foreign.gov1.hstl > 60 ? true : false;
      },
      effect() {
        return pillaged(`gov1`);
      }
    },
    pillage2: {
      reqs: {
        tech: "military",
        notech: "world_control"
      },
      type: "major",
      condition() {
        return global.race["truepath"] && !global.tech["isolation"] && !checkControlling(`gov2`) && global.civic.foreign.gov2.hstl > 60 ? true : false;
      },
      effect() {
        return pillaged(`gov2`);
      }
    },
    pillage3: {
      reqs: {
        tech: "military"
      },
      type: "major",
      condition() {
        return global.race["truepath"] && !global.tech["isolation"] && global.tech["rival"] && global.civic.foreign.gov3.hstl > 60 ? true : false;
      },
      effect() {
        return pillaged(`gov3`, true);
      }
    },
    witch_hunt_crusade: {
      reqs: {
        tech: "magic"
      },
      type: "major",
      condition() {
        return global.race["witch_hunter"] && global.resource.Sus.amount >= 100 ? true : false;
      },
      effect() {
        return pillaged(`witchhunt`, true);
      }
    },
    terrorist: {
      reqs: {
        tech: "world_control",
        notrait: "truepath"
      },
      type: "major",
      effect() {
        let killed = Math.floor(seededRandom(0, global.civic.garrison.wounded));
        let wounded = Math.floor(seededRandom(0, global.civic.garrison.workers - global.civic.garrison.wounded));
        if (global.race["instinct"]) {
          killed = Math.round(killed / 2);
          wounded = Math.round(wounded / 2);
        }
        soldierDeath(killed);
        global.civic.garrison.wounded += wounded;
        if (global.civic.garrison.wounded > global.civic.garrison.workers) {
          global.civic.garrison.wounded = global.civic.garrison.workers;
        }
        if (global.race["blood_thirst"]) {
          global.race["blood_thirst_count"] += 1e3;
          if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
            global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
          }
        }
        if (killed === 0) {
          return loc("event_terrorist1", [wounded.toLocaleString()]);
        } else {
          return loc("event_terrorist2", [wounded.toLocaleString(), killed.toLocaleString()]);
        }
      }
    },
    quake: {
      reqs: {
        tech: "wsc",
        notech: "quaked"
      },
      type: "major",
      condition() {
        return global.city.ptrait.includes("unstable") ? true : false;
      },
      effect() {
        global.tech["quaked"] = 1;
        drawTech();
        return loc("event_quake", [global.race["cataclysm"] || global.race["orbit_decayed"] ? races[global.race.species].solar.red : races[global.race.species].home]);
      }
    },
    doom: {
      reqs: {
        tech: "wsc",
        notech: "portal_guard"
      },
      type: "major",
      condition() {
        return global.space["space_barracks"] && global.space.space_barracks.on > 0 ? true : false;
      },
      effect() {
        unlockAchieve("doomed");
        global.stats.portals++;
        return loc(global.race["evil"] ? "event_doom_alt" : "event_doom", [races[global.race.species].solar.dwarf]);
      }
    },
    demon_influx: {
      reqs: {
        tech: "portal_guard"
      },
      type: "major",
      effect() {
        let surge = Math.rand(2500, 5e3);
        global.portal.fortress.threat += surge;
        return loc("event_demon_influx", [surge.toLocaleString()]);
      }
    },
    ruins: {
      reqs: {
        trait: "ancient_ruins",
        resource: "Knowledge"
      },
      type: "major",
      effect() {
        let resources = ["Iron", "Copper", "Steel", "Cement"];
        for (var i = 0; i < resources.length; i++) {
          let res = resources[i];
          if (global.resource[res].display) {
            let gain = Math.rand(1, Math.round(global.resource[res].max / 4));
            if (global.resource[res].amount + gain > global.resource[res].max) {
              global.resource[res].amount = global.resource[res].max;
            } else {
              global.resource[res].amount += gain;
            }
          }
        }
        return loc("event_ruins");
      }
    },
    tax_revolt: {
      reqs: {
        low_morale: 99,
        notrait: "blissful",
        tech: "primitive"
      },
      type: "major",
      condition() {
        let threshold = global.civic.govern.type === "oligarchy" ? 45 : 25;
        let aristoVal = govActive("aristocrat", 2);
        if (aristoVal) {
          threshold -= aristoVal;
        }
        return global.civic.taxes.tax_rate > threshold;
      },
      effect() {
        return tax_revolt();
      }
    },
    slave_death1: slaveLoss("major", "death1"),
    slave_death2: slaveLoss("major", "death2"),
    slave_death3: slaveLoss("major", "death3"),
    protest: {
      reqs: {
        tech: "primitive"
      },
      type: "major",
      condition() {
        return global.civic.govern.type === "republic" ? true : false;
      },
      effect() {
        global.civic.govern["protest"] = Math.rand(30, 60);
        switch (Math.rand(0, 10)) {
          case 0:
            return loc("event_protest0", [housingLabel("small")]);
          case 1:
            return loc("event_protest1");
          case 2:
            return loc("event_protest2");
          case 3:
            global.civic.govern["protest"] = Math.rand(45, 75);
            return loc("event_protest3");
          case 4:
            return loc("event_protest4");
          case 5:
            global.civic.govern["protest"] = Math.rand(45, 75);
            return loc("event_protest5");
          case 6:
            return loc("event_protest6");
          case 7:
            return loc("event_protest7");
          case 8:
            return loc("event_protest8");
          case 9:
            global.civic.govern["protest"] = Math.rand(60, 90);
            return loc("event_protest9");
        }
      }
    },
    scandal: {
      reqs: {
        tech: "govern"
      },
      type: "major",
      condition() {
        return govActive("muckraker", 0) ? true : false;
      },
      effect() {
        global.civic.govern["scandal"] = Math.rand(15, 90);
        switch (Math.rand(0, 10)) {
          case 0:
            return loc("event_scandal0");
          case 1:
            return loc("event_scandal1");
          case 2:
            return loc("event_scandal2");
          case 3:
            return loc("event_scandal3");
          case 4:
            return loc("event_scandal4");
          case 5:
            return loc("event_scandal5");
          case 6:
            return loc("event_scandal6");
          case 7:
            return loc("event_scandal7");
          case 8:
            return loc("event_scandal8");
          case 9:
            return loc("event_scandal9");
        }
      }
    },
    spy: {
      reqs: {
        tech: "primitive",
        notech: "world_control"
      },
      type: "major",
      condition() {
        if (global.race["elusive"]) {
          return false;
        }
        let fathom = fathomCheck("satyr");
        if (fathom > 0.25) {
          return false;
        }
        for (let i = 0; i < 3; i++) {
          if (global.civic.foreign[`gov${i}`].spy > 0 && !global.civic.foreign[`gov${i}`].occ && !global.civic.foreign[`gov${i}`].anx && !global.civic.foreign[`gov${i}`].buy) {
            return true;
          }
        }
        return false;
      },
      effect() {
        let govs = [];
        for (let i = 0; i < 3; i++) {
          if (global.civic.foreign[`gov${i}`].spy > 0 && !global.civic.foreign[`gov${i}`].occ && !global.civic.foreign[`gov${i}`].anx && !global.civic.foreign[`gov${i}`].buy) {
            govs.push(i);
          }
        }
        let gov = govs[Math.rand(0, govs.length)];
        global.civic.foreign[`gov${gov}`].spy--;
        if (global.civic.foreign[`gov${gov}`].spy === 0) {
          global.civic.foreign[`gov${gov}`].act = "none";
          global.civic.foreign[`gov${gov}`].sab = 0;
        }
        return loc("event_spy", [govTitle(gov)]);
      }
    },
    mine_collapse: {
      reqs: {
        tech: "mining"
      },
      type: "major",
      condition() {
        if (global.resource[global.race.species].amount > 0 && global.civic.miner.workers > 0) {
          return true;
        }
        return false;
      },
      effect() {
        global.resource[global.race.species].amount--;
        global.civic.miner.workers--;
        blubberFill(1);
        return loc("event_mine_collapse");
      }
    },
    klepto: {
      reqs: {
        trait: "rogue",
        resource: "Money"
      },
      type: "major",
      effect() {
        let stealList = [];
        [
          "Money",
          "Food",
          "Lumber",
          "Stone",
          "Chrysotile",
          "Crystal",
          "Furs",
          "Copper",
          "Iron",
          "Cement",
          "Coal",
          "Uranium",
          "Aluminium",
          "Steel",
          "Titanium",
          "Alloy",
          "Polymer",
          "Iridium",
          "Neutronium",
          "Adamantite",
          "Infernite",
          "Elerium",
          "Nano_Tube",
          "Graphene",
          "Stanene",
          "Bolognium",
          "Vitreloy",
          "Orichalcum",
          "Asphodel_Powder",
          "Elysanite",
          "Unobtainium",
          "Quantium",
          "Plywood",
          "Brick",
          "Wrought_Iron",
          "Sheet_Metal",
          "Mythril",
          "Aerogel",
          "Nanoweave",
          "Scarletite"
        ].forEach(function(r) {
          if (global.resource[r].display) {
            stealList.push(r);
          }
        });
        let maxRoll = Math.round(global.stats.know / 25);
        let res = stealList[Math.floor(seededRandom(0, stealList.length))];
        if (global.resource[res].max > 0 && maxRoll > global.resource[res].max * traits.rogue.vars()[0] / 100) {
          maxRoll = Math.round(global.resource[res].max * traits.rogue.vars()[0] / 100);
        }
        let gain = Math.floor(seededRandom(1, maxRoll));
        if (global.resource[res].max !== -1 && global.resource[res].amount + gain > global.resource[res].max) {
          global.resource[res].amount = global.resource[res].max;
        } else {
          global.resource[res].amount += gain;
        }
        return res === "Money" ? loc("event_klepto_money", [gain]) : loc("event_klepto", [gain, global.resource[res].name]);
      }
    },
    chicken_feast: {
      reqs: {
        tech: "primitive",
        trait: "chicken"
      },
      condition() {
        if (global.resource[global.race.species].amount > 0) {
          return true;
        }
        return false;
      },
      type: "major",
      effect() {
        let dead = Math.floor(seededRandom(2, jobScale(10)));
        let type = Math.floor(seededRandom(0, 10));
        if (dead > global.resource[global.race.species].amount) {
          dead = global.resource[global.race.species].amount;
        }
        global.resource[global.race.species].amount -= dead;
        blubberFill(dead);
        if (type === 7) {
          return loc("event_chicken", [loc(`event_chicken_eaten${type}`, [flib("name")]), dead, loc(`event_chicken_seasoning${Math.floor(seededRandom(0, 10))}`)]);
        }
        return loc("event_chicken", [loc(`event_chicken_eaten${type}`), dead, loc(`event_chicken_seasoning${Math.floor(seededRandom(0, 10))}`)]);
      }
    },
    brawl: {
      reqs: {
        tech: "primitive",
        trait: "aggressive"
      },
      condition() {
        if (global.resource[global.race.species].amount > 0) {
          return true;
        }
        return false;
      },
      type: "major",
      effect() {
        let dead = Math.floor(seededRandom(1, jobScale(traits.aggressive.vars()[0] + 1)));
        if (dead > global.civic.garrison.workers) {
          dead = global.civic.garrison.workers;
        }
        soldierDeath(dead);
        return loc("event_brawl_s", [loc(`event_brawl${Math.floor(seededRandom(0, 10))}`), dead]);
      }
    },
    m_curious: {
      reqs: {
        tech: "primitive",
        trait: "curious"
      },
      condition() {
        if (global.resource[global.race.species].amount >= 40) {
          return true;
        }
        return false;
      },
      type: "major",
      effect() {
        switch (Math.rand(0, 5)) {
          case 0: {
            let res = "Money";
            let vol = Math.rand(5e4, 5e6);
            switch (Math.rand(0, 5)) {
              case 0:
                if (global.resource.Steel.display) {
                  res = "Steel";
                  vol = Math.rand(100, 1e5);
                }
                break;
              case 1:
                if (global.resource.Bolognium.display) {
                  res = "Bolognium";
                  vol = Math.rand(500, 5e4);
                }
                break;
              case 2:
                if (global.resource.Alloy.display) {
                  res = "Alloy";
                  vol = Math.rand(250, 1e6);
                }
                break;
              case 3:
                if (global.resource.Adamantite.display) {
                  res = "Adamantite";
                  vol = Math.rand(1e3, 25e4);
                }
                break;
              case 4:
                if (global.resource.Soul_Gem.display) {
                  res = "Soul_Gem";
                  vol = 1;
                }
                break;
            }
            global.resource[res].amount += vol;
            if (global.resource[res].max >= 0 && global.resource[res].amount > global.resource[res].max) {
              global.resource[res].amount = global.resource[res].max;
            }
            if (res === "Money") {
              return loc(`event_m_curious0`, [races[global.race.species].name, "$", vol.toLocaleString()]);
            }
            return loc(`event_m_curious0`, [races[global.race.species].name, vol.toLocaleString(), global.resource[res].name]);
          }
          case 1: {
            global.resource[global.race.species].amount -= 10;
            global.civic[global.civic.d_job].workers -= 10;
            if (global.civic[global.civic.d_job].workers < 0) {
              global.civic[global.civic.d_job].workers = 0;
            }
            return loc(`event_m_curious1`, [races[global.race.species].name]);
          }
          case 2: {
            global.race["inspired"] = Math.rand(600, 1200);
            return loc(`event_m_curious2`, [races[global.race.species].name]);
          }
          case 3: {
            global.race["distracted"] = Math.rand(200, 600);
            return loc(`event_m_curious3`, [races[global.race.species].name]);
          }
          case 4: {
            if (global.race.species === "cath") {
              global.race["stimulated"] = Math.rand(500, 1e3);
              return loc(`event_m_curious4a`, [races[global.race.species].name]);
            } else {
              return loc(`event_m_curious4b`, [races[global.race.species].name]);
            }
          }
        }
      }
    },
    curious1: {
      reqs: {
        tech: "primitive",
        trait: "curious"
      },
      type: "minor",
      effect() {
        let num = Math.rand(0, 5);
        return loc(`event_curious${num}`, [races[global.race.species].name]);
      }
    },
    curious2: {
      reqs: {
        tech: "primitive",
        trait: "curious"
      },
      type: "minor",
      effect() {
        let num = Math.rand(5, 10);
        return loc(`event_curious${num}`, [races[global.race.species].name]);
      }
    },
    slave_escape1: slaveLoss("minor", "escape1"),
    slave_escape2: slaveLoss("minor", "escape2"),
    slave_escape3: slaveLoss("minor", "death4"),
    shooting_star: basicEvent("shooting_star", "primitive"),
    tumbleweed: basicEvent("tumbleweed", "primitive"),
    flashmob: basicEvent("flashmob", "high_tech"),
    witch_hunt: {
      reqs: {
        tech: "magic"
      },
      type: "minor",
      condition() {
        return global.race["witch_hunter"] && global.resource.Sus.amount >= 50 && global.civic.scientist.workers > 0 ? true : false;
      },
      effect() {
        global.resource[global.race.species].amount--;
        global.civic.scientist.workers--;
        global.civic.scientist.assigned--;
        blubberFill(1);
        return loc(`witch_hunter_witch_hunt`);
      }
    },
    chicken: {
      reqs: {
        tech: "primitive",
        trait: "chicken"
      },
      condition() {
        if (global.resource[global.race.species].amount > 0) {
          return true;
        }
        return false;
      },
      type: "minor",
      effect() {
        global.resource[global.race.species].amount--;
        blubberFill(1);
        let type = Math.floor(seededRandom(0, 10));
        if (type === 7) {
          return loc("event_chicken", [loc(`event_chicken_eaten${type}`, [flib("name")]), 1, loc(`event_chicken_seasoning${Math.floor(seededRandom(0, 10))}`)]);
        }
        return loc("event_chicken", [loc(`event_chicken_eaten${type}`), 1, loc(`event_chicken_seasoning${Math.floor(seededRandom(0, 10))}`)]);
      }
    },
    fight: {
      reqs: {
        tech: "primitive",
        trait: "aggressive"
      },
      condition() {
        if (global.resource[global.race.species].amount > 0) {
          return true;
        }
        return false;
      },
      type: "minor",
      effect() {
        let dead = Math.floor(seededRandom(1, jobScale(traits.aggressive.vars()[1] + 1)));
        if (dead > global.resource[global.race.species].amount) {
          dead = global.resource[global.race.species].amount;
        }
        global.resource[global.race.species].amount -= dead;
        blubberFill(dead);
        return loc("event_brawl_c", [loc(`event_brawl${Math.floor(seededRandom(0, 10))}`), dead]);
      }
    },
    heatwave: {
      reqs: {
        tech: "primitive"
      },
      type: "minor",
      condition() {
        if (global.race["cataclysm"] || global.race["orbit_decayed"] || global.city.calendar.temp === 2) {
          return false;
        }
        if (global.city.calendar.season === 3 && ["tundra", "taiga", "eden"].includes(global.city.biome)) {
          return false;
        }
        return true;
      },
      effect() {
        global.city.calendar.temp = 2;
        global.city.cold = 0;
        return loc("event_heatwave");
      }
    },
    coldsnap: {
      reqs: {
        tech: "primitive"
      },
      type: "minor",
      condition() {
        if (global.race["cataclysm"] || global.race["orbit_decayed"] || global.city.calendar.temp === 0) {
          return false;
        }
        if (global.city.biome === "hellscape" && !global.city.ptrait.includes("permafrost")) {
          return false;
        }
        if (global.city.calendar.season === 1 && ["ashland", "volcanic", "eden"].includes(global.city.biome)) {
          return false;
        }
        return true;
      },
      effect() {
        global.city.calendar.temp = 0;
        global.city.hot = 0;
        return loc("event_coldsnap");
      }
    },
    cucumber: basicEvent("cucumber", "primitive"),
    planking: basicEvent("planking", "high_tech"),
    furryfish: basicEvent("furryfish", "primitive"),
    meteor_shower: basicEvent("meteor_shower", "primitive"),
    hum: basicEvent("hum", "high_tech"),
    bloodrain: basicEvent("bloodrain", "primitive"),
    haunting: basicEvent("haunting", "science"),
    mothman: basicEvent("mothman", "science"),
    dejavu: basicEvent("dejavu", "theology"),
    dollar: basicEvent("dollar", "currency", function() {
      let cash = Math.rand(1, 10);
      global.resource.Money.amount += cash;
      if (global.resource.Money.amount > global.resource.Money.max) {
        global.resource.Money.amount = global.resource.Money.max;
      }
      return cash;
    }),
    pickpocket: basicEvent("pickpocket", "currency", function() {
      let cash = Math.rand(1, 10);
      global.resource.Money.amount -= cash;
      if (global.resource.Money.amount < 0) {
        global.resource.Money.amount = 0;
      }
      return cash;
    }),
    bird: basicEvent("bird", "primitive"),
    contest: {
      reqs: {
        tech: "science"
      },
      type: "minor",
      effect() {
        let place = Math.rand(0, 3);
        let contest = Math.rand(0, 10);
        return loc("event_contest", [loc(`event_contest_place${place}`), loc(`event_contest_type${contest}`)]);
      }
    },
    cloud: basicEvent("cloud", "primitive", function() {
      let type = Math.rand(0, 11);
      return loc(`event_cloud_type${type}`);
    }),
    dark_cloud: {
      reqs: {
        tech: "primitive"
      },
      type: "minor",
      condition() {
        if (!global.race["cataclysm"] && !global.race["orbit_decayed"] && global.city.calendar.weather !== 0) {
          return true;
        }
        return false;
      },
      effect() {
        global.city.calendar.weather = 0;
        return loc("event_dark_cloud");
      }
    },
    gloom: {
      reqs: {
        tech: "primitive"
      },
      type: "minor",
      condition() {
        if (!global.race["cataclysm"] && !global.race["orbit_decayed"] && global.city.calendar.weather !== 1) {
          return true;
        }
        return false;
      },
      effect() {
        global.city.calendar.weather = 1;
        return loc("event_gloom");
      }
    },
    tracks: basicEvent("tracks", "primitive"),
    hoax: basicEvent("hoax", "primitive"),
    burial: basicEvent("burial", "primitive"),
    artifacts: basicEvent("artifacts", "high_tech"),
    parade: basicEvent("parade", "world_control"),
    crop_circle: basicEvent("crop_circle", "agriculture"),
    llama: basicEvent(
      "llama",
      "primitive",
      function() {
        let food = Math.rand(25, 100);
        global.resource.Food.amount -= food;
        if (global.resource.Food.amount < 0) {
          global.resource.Food.amount = 0;
        }
        return food;
      },
      function() {
        if (global.race["carnivore"] || global.race["soul_eater"] || global.race["detritivore"] || global.race["artifical"]) {
          return false;
        }
        return true;
      }
    ),
    cat: basicEvent("cat", "primitive"),
    omen: basicEvent("omen", "primitive"),
    theft: basicEvent("theft", "primitive", function() {
      let thief = Math.rand(0, 10);
      return loc(`event_theft_type${thief}`);
    }),
    compass: basicEvent("compass", "mining"),
    bone: basicEvent("bone", "primitive"),
    delicacy: basicEvent("delicacy", "high_tech"),
    prank: basicEvent("prank", "primitive", function() {
      let prank = Math.rand(0, 10);
      return loc(`event_prank_type${prank}`);
    }),
    graffiti: basicEvent("graffiti", "science"),
    soul: basicEvent("soul", "soul_eater"),
    cheese: {
      reqs: {
        tech: "banking"
      },
      type: "minor",
      condition() {
        if (global.tech["banking"] && global.tech.banking >= 7) {
          return true;
        }
        return false;
      },
      effect() {
        let resets = global.stats.hasOwnProperty("reset") ? global.stats.reset + 1 : 1;
        global.race["cheese"] = Math.rand(10, 10 + resets);
        return loc(`event_cheese`);
      }
    },
    tremor: basicEvent("tremor", "primitive"),
    rumor: basicEvent("rumor", "primitive", function() {
      let rumor = Math.rand(0, 10);
      return loc(`event_rumor_type${rumor}`);
    }),
    pet: {
      reqs: {
        tech: "primitive"
      },
      type: "minor",
      effect() {
        if (global.race["pet"]) {
          global.race.pet.event += Math.rand(300, 600);
          let interaction = Math.rand(0, 10);
          return loc(`event_${global.race.pet.type}_interaction${interaction}`, [loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)]);
        } else {
          let pet = global.race["catnip"] && global.race["catnip"] >= 1 ? "cat" : global.race["anise"] && global.race["anise"] >= 1 ? "dog" : Math.rand(0, 2) === 0 ? "cat" : "dog";
          global.race["pet"] = {
            type: pet,
            name: pet === "cat" ? Math.rand(0, 12) : Math.rand(0, 10),
            event: 0,
            pet: 0
          };
          drawPet();
          return loc(`event_pet_${global.race.pet.type}`, [loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)]);
        }
      }
    }
  };
  function basicEvent(title, tech, func, cond) {
    return {
      reqs: {
        tech
      },
      condition() {
        let val = true;
        if (typeof cond === "function") {
          val = cond();
        }
        return val;
      },
      type: "minor",
      effect() {
        let val = false;
        if (typeof func === "function") {
          val = func();
        }
        return val ? loc(`event_${title}`, [val]) : loc(`event_${title}`);
      }
    };
  }
  function slaveLoss(type, string) {
    return {
      reqs: {
        trait: "slaver",
        tech: "slaves"
      },
      condition() {
        return global.race["cataclysm"] || global.race["orbit_decayed"] || global.tech["isolation"] ? false : true;
      },
      type,
      effect() {
        if (global.city["slave_pen"] && global.resource.Slave.amount > 0) {
          global.resource.Slave.amount--;
          return loc(`event_slave_${string}`);
        } else {
          return loc("event_slave_none");
        }
      }
    };
  }
  function pillaged(gov, serious) {
    let army = armyRating(garrisonSize(), "army", global.civic.garrison.wounded);
    let eAdv = global.tech["high_tech"] ? global.tech["high_tech"] + 1 : 1;
    let enemy = (gov === "witchhunt" ? 1e3 : global.civic.foreign[gov].mil) * (1 + Math.floor(seededRandom(0, 10) - 5) / 10) * eAdv;
    let injured = global.civic.garrison.wounded > garrisonSize() ? garrisonSize() : global.civic.garrison.wounded;
    let killed = garrisonSize() > 0 ? Math.floor(seededRandom(1, injured)) : 0;
    let wounded = Math.floor(seededRandom(0, garrisonSize() - injured));
    if (global.race["instinct"]) {
      killed = Math.round(killed / 2);
      wounded = Math.round(wounded / 2);
    }
    soldierDeath(killed);
    global.civic.garrison.wounded += wounded;
    if (global.civic.garrison.wounded > global.civic.garrison.workers) {
      global.civic.garrison.wounded = global.civic.garrison.workers;
    }
    if (global.race["blood_thirst"]) {
      global.race["blood_thirst_count"] += Math.ceil(enemy / 5);
      if (global.race["blood_thirst_count"] > traits.blood_thirst.vars()[0]) {
        global.race["blood_thirst_count"] = traits.blood_thirst.vars()[0];
      }
    }
    let enemy_name = gov === "witchhunt" ? loc(`witch_hunter_crusade`) : loc(`civics_gov${global.civic.foreign[gov].name.s0}`, [global.civic.foreign[gov].name.s1]);
    if (army > enemy) {
      return loc("event_pillaged1", [enemy_name, killed.toLocaleString(), wounded.toLocaleString()]);
    } else {
      let limiter = serious ? 2 : 4;
      let stolen = [];
      let targets = Object.keys(tradeRatio);
      targets.push("Money");
      targets.forEach(function(res) {
        if (global.resource[res] && global.resource[res].display && global.resource[res].amount > 0) {
          let loss = Math.rand(1, Math.round(global.resource[res].amount / limiter));
          let remain = global.resource[res].amount - loss;
          if (remain < 0) {
            remain = 0;
          }
          global.resource[res].amount = remain;
          if (res === "Money") {
            stolen.push(`$${sizeApproximation(loss)}`);
          } else {
            stolen.push(`${sizeApproximation(loss)} ${global.resource[res].name}`);
          }
        }
      });
      return loc("event_pillaged2", [enemy_name, killed.toLocaleString(), wounded.toLocaleString(), stolen.join(", ")]);
    }
  }
  function eventList(type) {
    let event_pool = [];
    Object.keys(events).forEach(function(event) {
      let isOk = true;
      if (type !== events[event].type) {
        isOk = false;
      }
      if (type === "major" && global.event.l === event || type === "minor" && global.m_event.l === event) {
        isOk = false;
      }
      if (events[event]["reqs"]) {
        Object.keys(events[event].reqs).forEach(function(req) {
          switch (req) {
            case "race":
              if (events[event].reqs[req] !== global.race.species) {
                isOk = false;
              }
              break;
            case "genus":
              if (events[event].reqs[req] !== races[global.race.species].type) {
                isOk = false;
              }
              break;
            case "nogenus":
              if (events[event].reqs[req] === races[global.race.species].type) {
                isOk = false;
              }
              break;
            case "resource":
              if (!global.resource[events[event].reqs[req]] || !global.resource[events[event].reqs[req]].display) {
                isOk = false;
              }
              break;
            case "trait":
              if (!global.race[events[event].reqs[req]]) {
                isOk = false;
              }
              break;
            case "notrait":
              if (global.race[events[event].reqs[req]]) {
                isOk = false;
              }
              break;
            case "tech":
              if (!global.tech[events[event].reqs[req]]) {
                isOk = false;
              }
              break;
            case "notech":
              if (global.tech[events[event].reqs[req]]) {
                isOk = false;
              }
              break;
            case "high_tax_rate":
              if (global.civic.taxes.tax_rate <= events[event].reqs[req]) {
                isOk = false;
              }
              break;
            case "low_morale":
              if (global.city.morale.current >= events[event].reqs[req]) {
                isOk = false;
              }
              break;
            case "biome":
              if (global.city.biome !== events[event].reqs[req]) {
                isOk = false;
              }
              break;
            default:
              isOk = false;
              break;
          }
        });
      }
      if (isOk && events[event]["condition"] && !events[event].condition()) {
        isOk = false;
      }
      if (isOk) {
        event_pool.push(event);
      }
    });
    return event_pool;
  }
  function tax_revolt() {
    let special_res = ["Soul_Gem", "Corrupt_Gem", "Codex", "Demonic_Essence"];
    let ramp = global.civic.govern.type === "oligarchy" ? 45 : 25;
    let aristoVal = govActive("aristocrat", 2);
    if (aristoVal) {
      ramp -= aristoVal;
    }
    let risk = (global.civic.taxes.tax_rate - ramp) * 0.04;
    Object.keys(global.resource).forEach(function(res) {
      if (!special_res.includes(res)) {
        let loss = Math.rand(1, Math.round(global.resource[res].amount * risk));
        let remain = global.resource[res].amount - loss;
        if (remain < 0) {
          remain = 0;
        }
        global.resource[res].amount = remain;
      }
    });
    return loc("event_tax_revolt");
  }

  // src/races.js
  var date = /* @__PURE__ */ new Date();
  var easter = getEaster();
  var hallowed = getHalloween();
  var neg_roll_traits = ["angry", "arrogant", "atrophy", "diverse", "dumb", "fragrant", "frail", "freespirit", "gluttony", "gnawer", "greedy", "hard_of_hearing", "heavy", "hooved", "invertebrate", "lazy", "mistrustful", "nearsighted", "nyctophilia", "paranoid", "pathetic", "pessimistic", "puny", "pyrophobia", "skittish", "slow", "slow_regen", "snowy", "solitary", "unorganized", "unfavored"];
  function altRace(race, set) {
    if (global.settings.boring) {
      if (global.race["hrt"]) {
        delete global.race["hrt"];
      }
      return false;
    }
    switch (race) {
      case "elven":
      case "capybara":
      case "centaur":
      case "wendigo":
      case "entish":
      case "yeti": {
        if (date.getMonth() === 11 && date.getDate() >= 17 || global.race["hrt"] && global.race.hrt === race) {
          if (set) {
            global.race["hrt"] = race;
          }
          return true;
        }
        return false;
      }
      case "wolven":
      case "vulpine": {
        if (easter.active || global.race["hrt"] && global.race.hrt === race) {
          if (set) {
            global.race["hrt"] = race;
          }
          return true;
        }
        return false;
      }
      case "arraak": {
        if (date.getMonth() === 10 && date.getDate() >= 22 && date.getDate() <= 28 || global.race["hrt"] && global.race.hrt === race) {
          if (set) {
            global.race["hrt"] = race;
          }
          return true;
        }
        return false;
      }
      case "seraph": {
        if (date.getMonth() === 1 && date.getDate() === 14 || global.race["hrt"] && global.race.hrt === race) {
          if (set) {
            global.race["hrt"] = race;
          }
          return true;
        }
        return false;
      }
      case "human":
      case "tortoisan":
      case "unicorn":
      case "junker": {
        if (hallowed.active || global.race["hrt"] && global.race.hrt === race) {
          if (set) {
            global.race["hrt"] = race;
          }
          return true;
        }
        return false;
      }
    }
    return false;
  }
  var genus_def = {
    humanoid: {
      traits: {
        adaptable: 1,
        wasteful: 1
      },
      oppose: ["fungi"]
    },
    carnivore: {
      traits: {
        carnivore: 1,
        beast: 1,
        cautious: 1
      },
      oppose: ["herbivore"]
    },
    herbivore: {
      traits: {
        herbivore: 1,
        instinct: 1
      },
      oppose: ["carnivore"]
    },
    omnivore: {
      traits: {
        forager: 1,
        beast: 1,
        cautious: 1,
        instinct: 1
      }
    },
    small: {
      traits: {
        small: 1,
        weak: 1
      },
      oppose: ["giant"]
    },
    giant: {
      traits: {
        large: 1,
        strong: 1
      },
      oppose: ["small"]
    },
    reptilian: {
      traits: {
        cold_blooded: 1,
        scales: 1
      },
      oppose: ["avian"]
    },
    avian: {
      traits: {
        flier: 1,
        hollow_bones: 1,
        sky_lover: 1
      },
      oppose: ["reptilian"]
    },
    insectoid: {
      traits: {
        high_pop: 1,
        fast_growth: 1,
        high_metabolism: 1
      },
      oppose: ["plant"]
    },
    plant: {
      traits: {
        sappy: 1,
        asymmetrical: 1
      },
      oppose: ["insectoid"]
    },
    fungi: {
      traits: {
        detritivore: 1,
        spongy: 1
      },
      oppose: ["humanoid"]
    },
    aquatic: {
      traits: {
        submerged: 1,
        low_light: 1
      },
      oppose: ["sand"]
    },
    fey: {
      traits: {
        elusive: 1,
        iron_allergy: 1
      },
      oppose: ["eldritch", "synthetic"]
    },
    heat: {
      traits: {
        smoldering: 1,
        cold_intolerance: 1
      },
      oppose: ["polar"]
    },
    polar: {
      traits: {
        chilled: 1,
        heat_intolerance: 1
      },
      oppose: ["heat"]
    },
    sand: {
      traits: {
        scavenger: 1,
        nomadic: 1
      },
      oppose: ["aquatic"]
    },
    demonic: {
      traits: {
        immoral: 1,
        evil: 1,
        soul_eater: 1
      },
      oppose: ["angelic"]
    },
    angelic: {
      traits: {
        blissful: 1,
        pompous: 1,
        holy: 1
      },
      oppose: ["demonic"]
    },
    synthetic: {
      traits: {
        artifical: 1,
        powered: 1
      },
      oppose: ["eldritch", "fey"]
    },
    eldritch: {
      traits: {
        psychic: 1,
        tormented: 1,
        darkness: 1,
        unfathomable: 1
      },
      oppose: ["synthetic", "fey"]
    },
    hybrid: {
      traits: {},
      oppose: []
    }
  };
  var traits = {
    adaptable: {
      // Genetic Mutations occur faster from gene tampering
      name: loc("trait_adaptable_name"),
      desc: loc("trait_adaptable"),
      type: "genus",
      origin: "humanoid",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("adaptable") || 1) {
          case 0.1:
            return [2];
          case 0.25:
            return [3];
          case 0.5:
            return [5];
          case 1:
            return [10];
          case 2:
            return [15];
          case 3:
            return [20];
          case 4:
            return [25];
        }
      }
    },
    wasteful: {
      // Craftings cost more materials
      name: loc("trait_wasteful_name"),
      desc: loc("trait_wasteful"),
      type: "genus",
      origin: "humanoid",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("wasteful") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [6];
          case 3:
            return [4];
          case 4:
            return [2];
        }
      }
    },
    xenophobic: {
      // Trade posts suffer a -1 penalty per post
      name: loc("trait_xenophobic_name"),
      desc: loc("trait_xenophobic"),
      type: "genus",
      genus: "humanoid",
      taxonomy: "resource",
      val: -5
    },
    carnivore: {
      // No agriculture tech tree path, however unemployed citizens now act as hunters.
      name: loc("trait_carnivore_name"),
      desc: loc("trait_carnivore"),
      type: "genus",
      origin: "carnivore",
      taxonomy: "resource",
      val: 3,
      vars(r) {
        switch (r || traitRank("carnivore") || 1) {
          case 0.1:
            return [70];
          case 0.25:
            return [65];
          case 0.5:
            return [60];
          case 1:
            return [50];
          case 2:
            return [40];
          case 3:
            return [35];
          case 4:
            return [30];
        }
      }
    },
    beast: {
      // Improved hunting and soldier training
      name: loc("trait_beast_name"),
      desc: loc("trait_beast"),
      type: "genus",
      origin: "carnivore",
      taxonomy: "resource",
      val: 2,
      vars(r) {
        switch (r || traitRank("beast") || 1) {
          case 0.1:
            return [3, 6, 3];
          case 0.25:
            return [4, 8, 4];
          case 0.5:
            return [5, 10, 5];
          case 1:
            return [8, 15, 10];
          case 2:
            return [10, 20, 15];
          case 3:
            return [12, 24, 20];
          case 4:
            return [14, 28, 25];
        }
      }
    },
    cautious: {
      // Rain reduces combat rating
      name: loc("trait_cautious_name"),
      desc: loc("trait_cautious"),
      type: "genus",
      origin: "carnivore",
      taxonomy: "combat",
      val: -2,
      vars(r) {
        switch (r || traitRank("cautious") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    herbivore: {
      // No food is gained from hunting
      name: loc("trait_herbivore_name"),
      desc: loc("trait_herbivore"),
      type: "genus",
      origin: "herbivore",
      taxonomy: "resource",
      val: -7
    },
    instinct: {
      // Avoids Danger
      name: loc("trait_instinct_name"),
      desc: loc("trait_instinct"),
      type: "genus",
      genus: "herbivore",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        switch (r || traitRank("instinct") || 1) {
          case 0.1:
            return [2, 10];
          case 0.25:
            return [3, 15];
          case 0.5:
            return [5, 25];
          case 1:
            return [10, 50];
          case 2:
            return [15, 60];
          case 3:
            return [20, 65];
          case 4:
            return [25, 70];
        }
      }
    },
    forager: {
      // Will eat just about anything
      name: loc("trait_forager_name"),
      desc: loc("trait_forager"),
      type: "genus",
      origin: "hybrid",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("forager") || 1) {
          case 0.1:
            return [70];
          case 0.25:
            return [80];
          case 0.5:
            return [90];
          case 1:
            return [100];
          case 2:
            return [110];
          case 3:
            return [120];
          case 4:
            return [130];
        }
      }
    },
    small: {
      // Reduces cost creep multipliers by 0.01
      name: loc("trait_small_name"),
      desc: loc("trait_small"),
      type: "genus",
      origin: "small",
      taxonomy: "utility",
      val: 6,
      vars(r) {
        switch (r || traitRank("small") || 1) {
          case 0.1:
            return [15e-4, 1e-3];
          case 0.25:
            return [25e-4, 15e-4];
          case 0.5:
            return [5e-3, 25e-4];
          case 1:
            return [0.01, 5e-3];
          case 2:
            return [0.0125, 6e-3];
          case 3:
            return [0.015, 75e-4];
          case 4:
            return [0.016, 8e-3];
        }
      }
    },
    weak: {
      // Lumberjacks, miners, and quarry workers are 10% less effective
      name: loc("trait_weak_name"),
      desc: loc("trait_weak"),
      type: "genus",
      origin: "small",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("weak") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    large: {
      // Increases plantery cost creep multipliers by 0.005
      name: loc("trait_large_name"),
      desc: loc("trait_large"),
      type: "genus",
      origin: "giant",
      taxonomy: "utility",
      val: -5,
      vars(r) {
        switch (r || traitRank("large") || 1) {
          case 0.1:
            return [8e-3];
          case 0.25:
            return [7e-3];
          case 0.5:
            return [6e-3];
          case 1:
            return [5e-3];
          case 2:
            return [4e-3];
          case 3:
            return [3e-3];
          case 4:
            return [2e-3];
        }
      }
    },
    strong: {
      // Increased manual resource gain
      name: loc("trait_strong_name"),
      desc: loc("trait_strong"),
      type: "genus",
      origin: "giant",
      taxonomy: "resource",
      val: 5,
      vars(r) {
        switch (r || traitRank("strong") || 1) {
          case 0.1:
            return [2, 1.1];
          case 0.25:
            return [2, 1.25];
          case 0.5:
            return [3, 1.5];
          case 1:
            return [4, 2];
          case 2:
            return [5, 2.25];
          case 3:
            return [6, 2.5];
          case 4:
            return [7, 2.75];
        }
      }
    },
    cold_blooded: {
      // Weather affects productivity
      name: loc("trait_cold_blooded_name"),
      desc: loc("trait_cold_blooded"),
      type: "genus",
      origin: "reptilian",
      taxonomy: "production",
      val: -2,
      vars(r) {
        switch (r || traitRank("cold_blooded") || 1) {
          case 0.25:
            return [30, 6];
          case 0.5:
            return [25, 8];
          case 1:
            return [20, 10];
          case 2:
            return [15, 15];
          case 3:
            return [12, 18];
          case 4:
            return [10, 20];
        }
      }
    },
    scales: {
      // Minor decrease of soldiers killed in combat
      name: loc("trait_scales_name"),
      desc: loc("trait_scales"),
      type: "genus",
      origin: "reptilian",
      taxonomy: "combat",
      val: 5,
      vars(r) {
        switch (r || traitRank("scales") || 1) {
          case 0.1:
            return [1, 0, 0];
          case 0.25:
            return [1, 0, 1];
          case 0.5:
            return [1, 1, 1];
          case 1:
            return [2, 1, 1];
          case 2:
            return [2, 2, 1];
          case 3:
            return [2, 2, 2];
          case 4:
            return [3, 2, 2];
        }
      }
    },
    flier: {
      // Use Clay instead of Stone or Cement
      name: loc("trait_flier_name"),
      desc: loc("trait_flier"),
      type: "genus",
      origin: "avian",
      taxonomy: "resource",
      val: 3,
      vars(r) {
        switch (r || traitRank("flier") || 1) {
          case 0.1:
            return [5, 0];
          case 0.25:
            return [10, 0];
          case 0.5:
            return [15, 0];
          case 1:
            return [25, 1];
          case 2:
            return [40, 1];
          case 3:
            return [50, 2];
          case 4:
            return [60, 2];
        }
      }
    },
    hollow_bones: {
      // Less Crafted Materials Needed
      name: loc("trait_hollow_bones_name"),
      desc: loc("trait_hollow_bones"),
      type: "genus",
      origin: "avian",
      taxonomy: "resource",
      val: 2,
      vars(r) {
        switch (r || traitRank("hollow_bones") || 1) {
          case 0.1:
            return [1];
          case 0.25:
            return [2];
          case 0.5:
            return [3];
          case 1:
            return [5];
          case 2:
            return [8];
          case 3:
            return [10];
          case 4:
            return [12];
        }
      }
    },
    sky_lover: {
      // Mining type jobs more stressful
      name: loc("trait_sky_lover_name"),
      desc: loc("trait_sky_lover"),
      type: "genus",
      origin: "avian",
      taxonomy: "utility",
      val: -2,
      vars(r) {
        switch (r || traitRank("sky_lover") || 1) {
          case 0.1:
            return [50];
          case 0.25:
            return [40];
          case 0.5:
            return [30];
          case 1:
            return [20];
          case 2:
            return [15];
          case 3:
            return [10];
          case 4:
            return [8];
        }
      }
    },
    rigid: {
      // Crafting production lowered slightly
      name: loc("trait_rigid_name"),
      desc: loc("trait_rigid"),
      type: "genus",
      origin: "avian",
      taxonomy: "resource",
      val: -2,
      vars(r) {
        switch (r || traitRank("rigid") || 1) {
          case 0.1:
            return [4];
          case 0.25:
            return [3];
          case 0.5:
            return [2];
          case 1:
            return [1];
          case 2:
            return [0.5];
          case 3:
            return [0.4];
          case 4:
            return [0.3];
        }
      }
    },
    high_pop: {
      // Population is higher, but less productive
      name: loc("trait_high_pop_name"),
      desc: loc("trait_high_pop"),
      type: "genus",
      origin: "insectoid",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("high_pop") || 1) {
          case 0.1:
            return [2, 50, 1.2];
          case 0.25:
            return [2, 50, 1.5];
          case 0.5:
            return [3, 34, 2.5];
          case 1:
            return [4, 26, 3.5];
          case 2:
            return [5, 21.2, 4.5];
          case 3:
            return [6, 18, 5.5];
          case 4:
            return [7, 15.8, 6.5];
        }
      }
    },
    fast_growth: {
      // Greatly increases odds of population growth each cycle
      name: loc("trait_fast_growth_name"),
      desc: loc("trait_fast_growth"),
      type: "genus",
      origin: "insectoid",
      taxonomy: "utility",
      val: 2,
      vars(r) {
        switch (r || traitRank("fast_growth") || 1) {
          case 0.1:
            return [1.2, 1];
          case 0.25:
            return [1.5, 1];
          case 0.5:
            return [2, 1];
          case 1:
            return [2, 2];
          case 2:
            return [2.5, 3];
          case 3:
            return [3, 3];
          case 4:
            return [3.5, 3];
        }
      }
    },
    high_metabolism: {
      // Food requirements increased by 5%
      name: loc("trait_high_metabolism_name"),
      desc: loc("trait_high_metabolism"),
      type: "genus",
      origin: "insectoid",
      taxonomy: "utility",
      val: -1,
      vars(r) {
        switch (r || traitRank("high_metabolism") || 1) {
          case 0.1:
            return [12];
          case 0.25:
            return [10];
          case 0.5:
            return [8];
          case 1:
            return [5];
          case 2:
            return [3];
          case 3:
            return [2];
          case 4:
            return [1];
        }
      }
    },
    photosynth: {
      // Reduces food requirements dependant on sunshine.
      name: loc("trait_photosynth_name"),
      desc: loc("trait_photosynth"),
      type: "genus",
      origin: "plant",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("photosynth") || 1) {
          case 0.1:
            return [5, 4, 3];
          case 0.25:
            return [10, 5, 4];
          case 0.5:
            return [20, 10, 5];
          case 1:
            return [40, 20, 10];
          case 2:
            return [50, 30, 15];
          case 3:
            return [60, 35, 20];
          case 4:
            return [70, 40, 25];
        }
      }
    },
    sappy: {
      // Stone is replaced with Amber.
      name: loc("trait_sappy_name"),
      desc: loc("trait_sappy", [loc("resource_Amber_name")]),
      type: "genus",
      origin: "plant",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("sappy") || 1) {
          case 0.1:
            return [0.3];
          case 0.25:
            return [0.4];
          case 0.5:
            return [0.5];
          case 1:
            return [0.6];
          case 2:
            return [0.65];
          case 3:
            return [0.7];
          case 4:
            return [0.75];
        }
      }
    },
    asymmetrical: {
      // Trade selling prices are slightly worse then normal
      name: loc("trait_asymmetrical_name"),
      desc: loc("trait_asymmetrical"),
      type: "genus",
      origin: "plant",
      taxonomy: "utility",
      val: -3,
      vars(r) {
        switch (r || traitRank("asymmetrical") || 1) {
          case 0.1:
            return [35];
          case 0.25:
            return [30];
          case 0.5:
            return [25];
          case 1:
            return [20];
          case 2:
            return [15];
          case 3:
            return [10];
          case 4:
            return [5];
        }
      }
    },
    detritivore: {
      // You eat dead matter
      name: loc("trait_detritivore_name"),
      desc: loc("trait_detritivore"),
      type: "genus",
      origin: "fungi",
      taxonomy: "utility",
      val: 2,
      vars(r) {
        switch (r || traitRank("detritivore") || 1) {
          case 0.1:
            return [60];
          case 0.25:
            return [65];
          case 0.5:
            return [72];
          case 1:
            return [80];
          case 2:
            return [85];
          case 3:
            return [90];
          case 4:
            return [95];
        }
      }
    },
    spores: {
      // Birthrate increased when it's windy
      name: loc("trait_spores_name"),
      desc: loc("trait_spores"),
      type: "genus",
      origin: "fungi",
      taxonomy: "utility",
      val: 2,
      vars(r) {
        switch (r || traitRank("spores") || 1) {
          case 0.1:
            return [1, 1.2, 1];
          case 0.25:
            return [1, 1.5, 1];
          case 0.5:
            return [2, 1.5, 1];
          case 1:
            return [2, 2, 1];
          case 2:
            return [2, 2.5, 2];
          case 3:
            return [2, 3, 2];
          case 4:
            return [3, 3.5, 2];
        }
      }
    },
    spongy: {
      // Birthrate decreased when it's raining
      name: loc("trait_spongy_name"),
      desc: loc("trait_spongy"),
      type: "genus",
      origin: "fungi",
      taxonomy: "utility",
      val: -2
    },
    submerged: {
      // Immune to weather effects
      name: loc("trait_submerged_name"),
      desc: loc("trait_submerged"),
      type: "genus",
      origin: "aquatic",
      taxonomy: "utility",
      val: 3
    },
    low_light: {
      // Farming effectiveness decreased
      name: loc("trait_low_light_name"),
      desc: loc("trait_low_light"),
      type: "genus",
      origin: "aquatic",
      taxonomy: "resource",
      val: -2,
      vars(r) {
        switch (r || traitRank("low_light") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    elusive: {
      // Spies are never caught
      name: loc("trait_elusive_name"),
      desc: loc("trait_elusive"),
      type: "genus",
      origin: "fey",
      taxonomy: "utility",
      val: 7,
      vars(r) {
        switch (r || traitRank("elusive") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [10];
          case 0.5:
            return [15];
          case 1:
            return [20];
          case 2:
            return [25];
          case 3:
            return [30];
          case 4:
            return [35];
        }
      }
    },
    iron_allergy: {
      // Iron mining reduced
      name: loc("trait_iron_allergy_name"),
      desc: loc("trait_iron_allergy"),
      type: "genus",
      origin: "fey",
      taxonomy: "resource",
      val: -4,
      vars(r) {
        switch (r || traitRank("iron_allergy") || 1) {
          case 0.1:
            return [45];
          case 0.25:
            return [40];
          case 0.5:
            return [35];
          case 1:
            return [25];
          case 2:
            return [18];
          case 3:
            return [15];
          case 4:
            return [12];
        }
      }
    },
    smoldering: {
      // Hot weather is a bonus
      name: loc("trait_smoldering_name"),
      desc: loc("trait_smoldering"),
      type: "genus",
      origin: "heat",
      taxonomy: "production",
      val: 7,
      vars(r) {
        switch (r || traitRank("smoldering") || 1) {
          case 0.1:
            return [2, 0.1, 0.06];
          case 0.25:
            return [3, 0.14, 0.08];
          case 0.5:
            return [4, 0.18, 0.1];
          case 1:
            return [5, 0.35, 0.2];
          case 2:
            return [10, 0.38, 0.22];
          case 3:
            return [12, 0.4, 0.24];
          case 4:
            return [14, 0.42, 0.25];
        }
      }
    },
    cold_intolerance: {
      // Cold weather is a detriment
      name: loc("trait_cold_intolerance_name"),
      desc: loc("trait_cold_intolerance"),
      type: "genus",
      origin: "heat",
      taxonomy: "production",
      val: -4,
      vars(r) {
        switch (r || traitRank("cold_intolerance") || 1) {
          case 0.1:
            return [0.4];
          case 0.25:
            return [0.35];
          case 0.5:
            return [0.3];
          case 1:
            return [0.25];
          case 2:
            return [0.2];
          case 3:
            return [0.18];
          case 4:
            return [0.16];
        }
      }
    },
    chilled: {
      // Cold weather is a bonus
      name: loc("trait_chilled_name"),
      desc: loc("trait_chilled"),
      type: "genus",
      origin: "polar",
      taxonomy: "production",
      val: 7,
      vars(r) {
        switch (r || traitRank("chilled") || 1) {
          case 0.1:
            return [1, 0.12, 0.06, 3, 2, 22];
          case 0.25:
            return [1, 0.14, 0.08, 5, 2, 20];
          case 0.5:
            return [2, 0.18, 0.1, 10, 5, 18];
          case 1:
            return [5, 0.35, 0.2, 20, 10, 15];
          case 2:
            return [10, 0.38, 0.22, 25, 12, 10];
          case 3:
            return [12, 0.4, 0.24, 30, 14, 8];
          case 4:
            return [14, 0.42, 0.25, 35, 15, 6];
        }
      }
    },
    heat_intolerance: {
      // Hot weather is a detriment
      name: loc("trait_heat_intolerance_name"),
      desc: loc("trait_heat_intolerance"),
      type: "genus",
      origin: "polar",
      taxonomy: "production",
      val: -4,
      vars(r) {
        switch (r || traitRank("heat_intolerance") || 1) {
          case 0.1:
            return [0.4];
          case 0.25:
            return [0.35];
          case 0.5:
            return [0.3];
          case 1:
            return [0.25];
          case 2:
            return [0.2];
          case 3:
            return [0.18];
          case 4:
            return [0.16];
        }
      }
    },
    scavenger: {
      // scavenger job is always available
      name: loc("trait_scavenger_name"),
      desc: loc("trait_scavenger"),
      type: "genus",
      origin: "sand",
      taxonomy: "production",
      val: 3,
      vars(r) {
        switch (r || traitRank("scavenger") || 1) {
          case 0.1:
            return [0.05, 18];
          case 0.25:
            return [0.08, 20];
          case 0.5:
            return [0.1, 22];
          case 1:
            return [0.12, 25];
          case 2:
            return [0.14, 30];
          case 3:
            return [0.16, 32];
          case 4:
            return [0.18, 34];
        }
      }
    },
    nomadic: {
      // -1 Trade route from trade post
      name: loc("trait_nomadic_name"),
      desc: loc("trait_nomadic"),
      type: "genus",
      origin: "sand",
      taxonomy: "utility",
      val: -5
    },
    immoral: {
      // Warmonger is a bonus instead of a penalty
      name: loc("trait_immoral_name"),
      desc: loc("trait_immoral"),
      type: "genus",
      origin: "demonic",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("immoral") || 1) {
          case 0.1:
            return [-40];
          case 0.25:
            return [-30];
          case 0.5:
            return [-20];
          case 1:
            return [0];
          case 2:
            return [20];
          case 3:
            return [30];
          case 4:
            return [40];
        }
      }
    },
    evil: {
      // You are pure evil
      name: loc("trait_evil_name"),
      desc: loc("trait_evil"),
      type: "genus",
      origin: "demonic",
      taxonomy: "utility",
      val: 0
    },
    blissful: {
      // Low morale penalty is halved and citizens never riot.
      name: loc("trait_blissful_name"),
      desc: loc("trait_blissful"),
      type: "genus",
      origin: "angelic",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("blissful") || 1) {
          case 0.1:
            return [75];
          case 0.25:
            return [70];
          case 0.5:
            return [60];
          case 1:
            return [50];
          case 2:
            return [40];
          case 3:
            return [30];
          case 4:
            return [25];
        }
      }
    },
    pompous: {
      // Professors are less effective
      name: loc("trait_pompous_name"),
      desc: loc("trait_pompous"),
      type: "genus",
      origin: "angelic",
      taxonomy: "utility",
      val: -6,
      vars(r) {
        switch (r || traitRank("pompous") || 1) {
          case 0.1:
            return [90];
          case 0.25:
            return [85];
          case 0.5:
            return [80];
          case 1:
            return [75];
          case 2:
            return [65];
          case 3:
            return [58];
          case 4:
            return [50];
        }
      }
    },
    holy: {
      // Combat Bonus in Hell
      name: loc("trait_holy_name"),
      desc: loc("trait_holy"),
      type: "genus",
      origin: "angelic",
      taxonomy: "combat",
      val: 4,
      vars(r) {
        switch (r || traitRank("holy") || 1) {
          case 0.1:
            return [20, 5];
          case 0.25:
            return [25, 10];
          case 0.5:
            return [30, 15];
          case 1:
            return [50, 25];
          case 2:
            return [60, 35];
          case 3:
            return [65, 40];
          case 4:
            return [70, 45];
        }
      }
    },
    artifical: {
      name: loc("trait_artifical_name"),
      desc: loc("trait_artifical"),
      type: "genus",
      origin: "synthetic",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        switch (r || traitRank("artifical") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [5];
          case 0.5:
            return [10];
          case 1:
            return [20];
          case 2:
            return [25];
          case 3:
            return [30];
          case 4:
            return [35];
        }
      }
    },
    powered: {
      name: loc("trait_powered_name"),
      desc: loc("trait_powered"),
      type: "genus",
      origin: "synthetic",
      taxonomy: "utility",
      val: -6,
      vars(r) {
        switch (r || traitRank("powered") || 1) {
          case 0.1:
            return [0.4, 4];
          case 0.25:
            return [0.35, 5];
          case 0.5:
            return [0.3, 8];
          case 1:
            return [0.2, 16];
          case 2:
            return [0.1, 20];
          case 3:
            return [0.05, 24];
          case 4:
            return [0.05, 28];
        }
      }
    },
    psychic: {
      name: loc("trait_psychic_name"),
      desc: loc("trait_psychic"),
      type: "genus",
      origin: "eldritch",
      taxonomy: "utility",
      val: 10,
      vars(r) {
        switch (r || traitRank("psychic") || 1) {
          case 0.1:
            return [0.2, 4, 0.01, 15];
          case 0.25:
            return [0.35, 5, 0.01, 20];
          case 0.5:
            return [0.65, 10, 0.025, 30];
          case 1:
            return [1, 15, 0.05, 40];
          case 2:
            return [1.25, 20, 0.075, 50];
          case 3:
            return [1.5, 25, 0.1, 60];
          case 4:
            return [1.65, 30, 0.12, 65];
        }
      }
    },
    tormented: {
      name: loc("trait_tormented_name"),
      desc: loc("trait_tormented"),
      type: "genus",
      origin: "eldritch",
      taxonomy: "utility",
      val: -25,
      vars(r) {
        switch (r || traitRank("tormented") || 1) {
          case 0.1:
            return [99];
          case 0.25:
            return [98];
          case 0.5:
            return [95];
          case 1:
            return [90];
          case 2:
            return [80];
          case 3:
            return [75];
          case 4:
            return [70];
        }
      }
    },
    darkness: {
      name: loc("trait_darkness_name"),
      desc: loc("trait_darkness"),
      type: "genus",
      origin: "eldritch",
      taxonomy: "utility",
      val: 1,
      vars(r) {
        switch (r || traitRank("darkness") || 1) {
          case 0.1:
            return [0];
          case 0.25:
            return [1];
          case 0.5:
            return [2];
          case 1:
            return [3];
          case 2:
            return [4];
          case 3:
            return [5];
          case 4:
            return [6];
        }
      }
    },
    unfathomable: {
      name: loc("trait_unfathomable_name"),
      desc: loc("trait_unfathomable"),
      type: "genus",
      origin: "eldritch",
      taxonomy: "utility",
      val: 15,
      vars(r) {
        switch (r || traitRank("unfathomable") || 1) {
          case 0.1:
            return [1, 0.4, 0.03];
          case 0.25:
            return [1, 0.5, 0.05];
          case 0.5:
            return [1, 0.65, 0.08];
          case 1:
            return [2, 0.8, 0.1];
          case 2:
            return [2, 0.9, 0.12];
          case 3:
            return [3, 1, 0.13];
          case 4:
            return [3, 1.1, 0.14];
        }
      }
    },
    creative: {
      // A.R.P.A. Projects are cheaper
      name: loc("trait_creative_name"),
      desc: loc("trait_creative"),
      type: "major",
      origin: "human",
      taxonomy: "resource",
      val: 8,
      vars(r) {
        switch (r || traitRank("creative") || 1) {
          case 0.1:
            return [1e-3, 3];
          case 0.25:
            return [15e-4, 5];
          case 0.5:
            return [25e-4, 10];
          case 1:
            return [5e-3, 20];
          case 2:
            return [6e-3, 22];
          case 3:
            return [65e-4, 24];
          case 4:
            return [68e-4, 26];
        }
      }
    },
    diverse: {
      // Training soldiers takes longer
      name: loc("trait_diverse_name"),
      desc: loc("trait_diverse"),
      type: "major",
      origin: "human",
      taxonomy: "combat",
      val: -4,
      vars(r) {
        switch (r || traitRank("diverse") || 1) {
          case 0.1:
            return [40];
          case 0.25:
            return [35];
          case 0.5:
            return [30];
          case 1:
            return [25];
          case 2:
            return [20];
          case 3:
            return [15];
          case 4:
            return [12];
        }
      }
    },
    studious: {
      // Professors generate an extra 0.25 Knowledge per second, Libraries provide 10% more knowledge cap
      name: loc("trait_studious_name"),
      desc: loc("trait_studious"),
      type: "major",
      origin: "elven",
      taxonomy: "utility",
      val: 2,
      vars(r) {
        switch (r || traitRank("studious") || 1) {
          case 0.1:
            return [0.08, 4];
          case 0.25:
            return [0.1, 6];
          case 0.5:
            return [0.15, 8];
          case 1:
            return [0.25, 10];
          case 2:
            return [0.35, 12];
          case 3:
            return [0.4, 14];
          case 4:
            return [0.45, 16];
        }
      }
    },
    arrogant: {
      // Market prices are higher
      name: loc("trait_arrogant_name"),
      desc: loc("trait_arrogant"),
      type: "major",
      origin: "elven",
      taxonomy: "resource",
      val: -2,
      vars(r) {
        switch (r || traitRank("arrogant") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    brute: {
      // Recruitment costs are 1/2 price
      name: loc("trait_brute_name"),
      desc: loc("trait_brute"),
      type: "major",
      origin: "orc",
      taxonomy: "combat",
      val: 7,
      vars(r) {
        switch (r || traitRank("brute") || 1) {
          case 0.1:
            return [15, 40];
          case 0.25:
            return [20, 50];
          case 0.5:
            return [25, 60];
          case 1:
            return [50, 100];
          case 2:
            return [60, 120];
          case 3:
            return [65, 140];
          case 4:
            return [70, 150];
        }
      }
    },
    angry: {
      // When hungry you get hangry, low food penalty is more severe
      name: loc("trait_angry_name"),
      desc: loc("trait_angry"),
      type: "major",
      origin: "orc",
      taxonomy: "production",
      val: -1,
      vars(r) {
        switch (r || traitRank("angry") || 1) {
          case 0.1:
            return [40];
          case 0.25:
            return [35];
          case 0.5:
            return [30];
          case 1:
            return [25];
          case 2:
            return [20];
          case 3:
            return [15];
          case 4:
            return [12];
        }
      }
    },
    lazy: {
      // All production is lowered when the temperature is hot
      name: loc("trait_lazy_name"),
      desc: loc("trait_lazy"),
      type: "major",
      origin: "cath",
      taxonomy: "production",
      val: -4,
      vars(r) {
        switch (r || traitRank("lazy") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    curious: {
      // University cap boosted by citizen count, curious random events
      name: loc("trait_curious_name"),
      desc: loc("trait_curious"),
      type: "major",
      origin: "cath",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("curious") || 1) {
          case 0.1:
            return [0.02];
          case 0.25:
            return [0.03];
          case 0.5:
            return [0.05];
          case 1:
            return [0.1];
          case 2:
            return [0.12];
          case 3:
            return [0.13];
          case 4:
            return [0.14];
        }
      }
    },
    pack_mentality: {
      // Cabins cost more, but cottages cost less.
      name: loc("trait_pack_mentality_name"),
      desc: loc("trait_pack_mentality"),
      type: "major",
      origin: "wolven",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("pack_mentality") || 1) {
          case 0.1:
            return [0.03, 0.014];
          case 0.25:
            return [0.03, 0.016];
          case 0.5:
            return [0.03, 0.018];
          case 1:
            return [0.03, 0.02];
          case 2:
            return [0.026, 0.022];
          case 3:
            return [0.024, 0.023];
          case 4:
            return [0.022, 0.024];
        }
      }
    },
    tracker: {
      // 20% increased gains from hunting
      name: loc("trait_tracker_name"),
      desc: loc("trait_tracker"),
      type: "major",
      origin: "wolven",
      taxonomy: "resource",
      val: 2,
      vars(r) {
        switch (r || traitRank("tracker") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [10];
          case 0.5:
            return [15];
          case 1:
            return [20];
          case 2:
            return [25];
          case 3:
            return [30];
          case 4:
            return [35];
        }
      }
    },
    playful: {
      // Hunters are Happy
      name: loc("trait_playful_name"),
      desc: loc("trait_playful"),
      type: "major",
      origin: "vulpine",
      taxonomy: "production",
      val: 5,
      vars(r) {
        switch (r || traitRank("playful") || 1) {
          case 0.1:
            return [0.2];
          case 0.25:
            return [0.3];
          case 0.5:
            return [0.4];
          case 1:
            return [0.5];
          case 2:
            return [0.6];
          case 3:
            return [0.7];
          case 4:
            return [0.8];
        }
      }
    },
    freespirit: {
      // Job Stress is higher for those who must work mundane jobs
      name: loc("trait_freespirit_name"),
      desc: loc("trait_freespirit"),
      type: "major",
      origin: "vulpine",
      taxonomy: "production",
      val: -3,
      vars(r) {
        switch (r || traitRank("freespirit") || 1) {
          case 0.1:
            return [70];
          case 0.25:
            return [65];
          case 0.5:
            return [60];
          case 1:
            return [50];
          case 2:
            return [35];
          case 3:
            return [25];
          case 4:
            return [20];
        }
      }
    },
    beast_of_burden: {
      // Gains more loot during raids
      name: loc("trait_beast_of_burden_name"),
      desc: loc("trait_beast_of_burden"),
      type: "major",
      origin: "centaur",
      taxonomy: "combat",
      val: 3
    },
    sniper: {
      // Weapon upgrades are more impactful
      name: loc("trait_sniper_name"),
      desc: loc("trait_sniper"),
      type: "major",
      origin: "centaur",
      taxonomy: "combat",
      val: 6,
      vars(r) {
        switch (r || traitRank("sniper") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [4];
          case 0.5:
            return [6];
          case 1:
            return [8];
          case 2:
            return [9];
          case 3:
            return [10];
          case 4:
            return [11];
        }
      }
    },
    hooved: {
      // You require special footwear
      name: loc("trait_hooved_name"),
      desc: loc("trait_hooved"),
      type: "major",
      origin: "centaur",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("hooved") || 1) {
          case 0.1:
            return [140];
          case 0.25:
            return [130];
          case 0.5:
            return [120];
          case 1:
            return [100];
          case 2:
            return [80];
          case 3:
            return [70];
          case 4:
            return [60];
        }
      }
    },
    rage: {
      // Wounded soldiers rage with extra power
      name: loc("trait_rage_name"),
      desc: loc("trait_rage"),
      type: "major",
      origin: "rhinotaur",
      taxonomy: "combat",
      val: 4,
      vars(r) {
        switch (r || traitRank("rage") || 1) {
          case 0.1:
            return [0.2, 10];
          case 0.25:
            return [0.3, 20];
          case 0.5:
            return [0.5, 30];
          case 1:
            return [1, 50];
          case 2:
            return [1.25, 60];
          case 3:
            return [1.4, 65];
          case 4:
            return [1.5, 70];
        }
      }
    },
    heavy: {
      // Some costs increased
      name: loc("trait_heavy_name"),
      desc: loc("trait_heavy"),
      type: "major",
      origin: "rhinotaur",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("heavy") || 1) {
          case 0.1:
            return [20, 12];
          case 0.25:
            return [18, 10];
          case 0.5:
            return [15, 8];
          case 1:
            return [10, 5];
          case 2:
            return [8, 4];
          case 3:
            return [6, 3];
          case 4:
            return [5, 2];
        }
      }
    },
    gnawer: {
      // Population destroys lumber by chewing on it
      name: loc("trait_gnawer_name"),
      desc: loc("trait_gnawer"),
      type: "major",
      origin: "capybara",
      taxonomy: "resource",
      val: -1,
      vars(r) {
        switch (r || traitRank("gnawer") || 1) {
          case 0.1:
            return [0.6];
          case 0.25:
            return [0.5];
          case 0.5:
            return [0.4];
          case 1:
            return [0.25];
          case 2:
            return [0.2];
          case 3:
            return [0.15];
          case 4:
            return [0.12];
        }
      }
    },
    calm: {
      // Your are very calm, almost zen like
      name: loc("trait_calm_name"),
      desc: loc("trait_calm"),
      type: "major",
      origin: "capybara",
      taxonomy: "production",
      val: 6,
      vars(r) {
        switch (r || traitRank("calm") || 1) {
          case 0.1:
            return [6];
          case 0.25:
            return [7];
          case 0.5:
            return [8];
          case 1:
            return [10];
          case 2:
            return [12];
          case 3:
            return [13];
          case 4:
            return [14];
        }
      }
    },
    pack_rat: {
      // Storage space is increased
      name: loc("trait_pack_rat_name"),
      desc: loc("trait_pack_rat"),
      type: "major",
      origin: "kobold",
      taxonomy: "resource",
      val: 3,
      vars(r) {
        switch (r || traitRank("pack_rat") || 1) {
          case 0.1:
            return [4, 1];
          case 0.25:
            return [5, 2];
          case 0.5:
            return [6, 3];
          case 1:
            return [10, 5];
          case 2:
            return [15, 8];
          case 3:
            return [20, 10];
          case 4:
            return [25, 12];
        }
      }
    },
    paranoid: {
      // Bank capacity reduced by 10%
      name: loc("trait_paranoid_name"),
      desc: loc("trait_paranoid"),
      type: "major",
      origin: "kobold",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("paranoid") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    greedy: {
      // Lowers income from taxes
      name: loc("trait_greedy_name"),
      desc: loc("trait_greedy"),
      type: "major",
      origin: "goblin",
      taxonomy: "resource",
      val: -5,
      vars(r) {
        switch (r || traitRank("greedy") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [17.5];
          case 0.5:
            return [15];
          case 1:
            return [12.5];
          case 2:
            return [10];
          case 3:
            return [8];
          case 4:
            return [6];
        }
      }
    },
    merchant: {
      // Better commodity selling prices
      name: loc("trait_merchant_name"),
      desc: loc("trait_merchant"),
      type: "major",
      origin: "goblin",
      taxonomy: "resource",
      val: 3,
      vars(r) {
        switch (r || traitRank("merchant") || 1) {
          case 0.1:
            return [5, 2];
          case 0.25:
            return [10, 3];
          case 0.5:
            return [15, 5];
          case 1:
            return [25, 10];
          case 2:
            return [35, 12];
          case 3:
            return [40, 13];
          case 4:
            return [45, 14];
        }
      }
    },
    smart: {
      // Knowledge costs reduced by 10%
      name: loc("trait_smart_name"),
      desc: loc("trait_smart"),
      type: "major",
      origin: "gnome",
      taxonomy: "utility",
      val: 6,
      vars(r) {
        switch (r || traitRank("smart") || 1) {
          case 0.1:
            return [2];
          case 0.25:
            return [3];
          case 0.5:
            return [5];
          case 1:
            return [10];
          case 2:
            return [12];
          case 3:
            return [13];
          case 4:
            return [14];
        }
      }
    },
    puny: {
      // Lowers minium bound for army score roll
      name: loc("trait_puny_name"),
      desc: loc("trait_puny"),
      type: "major",
      origin: "gnome",
      taxonomy: "combat",
      val: -4,
      vars(r) {
        switch (r || traitRank("puny") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [18];
          case 0.5:
            return [15];
          case 1:
            return [10];
          case 2:
            return [6];
          case 3:
            return [4];
          case 4:
            return [3];
        }
      }
    },
    dumb: {
      // Knowledge costs increased by 5%
      name: loc("trait_dumb_name"),
      desc: loc("trait_dumb"),
      type: "major",
      origin: "ogre",
      taxonomy: "utility",
      val: -5,
      vars(r) {
        switch (r || traitRank("dumb") || 1) {
          case 0.1:
            return [8];
          case 0.25:
            return [7];
          case 0.5:
            return [6];
          case 1:
            return [5];
          case 2:
            return [4];
          case 3:
            return [3];
          case 4:
            return [2];
        }
      }
    },
    tough: {
      // Mining output increased by 25%
      name: loc("trait_tough_name"),
      desc: loc("trait_tough"),
      type: "major",
      origin: "ogre",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("tough") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [10];
          case 0.5:
            return [15];
          case 1:
            return [25];
          case 2:
            return [35];
          case 3:
            return [40];
          case 4:
            return [45];
        }
      }
    },
    nearsighted: {
      // Libraries are less effective
      name: loc("trait_nearsighted_name"),
      desc: loc("trait_nearsighted"),
      type: "major",
      origin: "cyclops",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("nearsighted") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [18];
          case 0.5:
            return [15];
          case 1:
            return [12];
          case 2:
            return [10];
          case 3:
            return [8];
          case 4:
            return [6];
        }
      }
    },
    intelligent: {
      // Professors and Scientists add a global production bonus
      name: loc("trait_intelligent_name"),
      desc: loc("trait_intelligent"),
      type: "major",
      origin: "cyclops",
      taxonomy: "production",
      val: 7,
      vars(r) {
        switch (r || traitRank("intelligent") || 1) {
          case 0.1:
            return [0.05, 0.1];
          case 0.25:
            return [0.08, 0.15];
          case 0.5:
            return [0.1, 0.2];
          case 1:
            return [0.125, 0.25];
          case 2:
            return [0.14, 0.3];
          case 3:
            return [0.15, 0.32];
          case 4:
            return [0.16, 0.34];
        }
      }
    },
    regenerative: {
      // Wounded soldiers heal 4x as fast
      name: loc("trait_regenerative_name"),
      desc: loc("trait_regenerative"),
      type: "major",
      origin: "troll",
      taxonomy: "combat",
      val: 8,
      vars(r) {
        switch (r || traitRank("regenerative") || 1) {
          case 0.1:
            return [1];
          case 0.25:
            return [2];
          case 0.5:
            return [3];
          case 1:
            return [4];
          case 2:
            return [5];
          case 3:
            return [6];
          case 4:
            return [7];
        }
      }
    },
    gluttony: {
      // Eats 10% more food per rank
      name: loc("trait_gluttony_name"),
      desc: loc("trait_gluttony"),
      type: "major",
      origin: "troll",
      taxonomy: "resource",
      val: -2,
      vars(r) {
        switch (r || traitRank("gluttony") || 1) {
          case 0.1:
            return [25];
          case 0.25:
            return [20];
          case 0.5:
            return [15];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    slow: {
      // The game moves at a 10% slower pace
      name: loc("trait_slow_name"),
      desc: loc("trait_slow"),
      type: "major",
      origin: "tortoisan",
      taxonomy: "utility",
      val: -6,
      vars(r) {
        switch (r || traitRank("slow") || 1) {
          case 0.1:
            return [14];
          case 0.25:
            return [13];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    armored: {
      // Less soldiers die in combat
      name: loc("trait_armored_name"),
      desc: loc("trait_armored"),
      type: "major",
      origin: "tortoisan",
      taxonomy: "combat",
      val: 4,
      vars(r) {
        switch (r || traitRank("armored") || 1) {
          case 0.1:
            return [10, 0];
          case 0.25:
            return [15, 1];
          case 0.5:
            return [25, 1];
          case 1:
            return [50, 2];
          case 2:
            return [70, 2];
          case 3:
            return [80, 2];
          case 4:
            return [85, 2];
        }
      }
    },
    optimistic: {
      // Minor reduction to stress
      name: loc("trait_optimistic_name"),
      desc: loc("trait_optimistic"),
      type: "major",
      origin: "gecko",
      taxonomy: "production",
      val: 3,
      vars(r) {
        switch (r || traitRank("optimistic") || 1) {
          case 0.1:
            return [3, 4];
          case 0.25:
            return [4, 6];
          case 0.5:
            return [5, 8];
          case 1:
            return [10, 10];
          case 2:
            return [15, 13];
          case 3:
            return [18, 15];
          case 4:
            return [20, 16];
        }
      }
    },
    chameleon: {
      // Barracks have less soldiers
      name: loc("trait_chameleon_name"),
      desc: loc("trait_chameleon"),
      type: "major",
      origin: "gecko",
      taxonomy: "combat",
      val: 6,
      vars(r) {
        switch (r || traitRank("chameleon") || 1) {
          case 0.1:
            return [3, 5];
          case 0.25:
            return [5, 10];
          case 0.5:
            return [10, 15];
          case 1:
            return [20, 20];
          case 2:
            return [25, 25];
          case 3:
            return [30, 30];
          case 4:
            return [35, 35];
        }
      }
    },
    slow_digestion: {
      // Your race is more resilient to starvation
      name: loc("trait_slow_digestion_name"),
      desc: loc("trait_slow_digestion"),
      type: "major",
      origin: "slitheryn",
      taxonomy: "production",
      val: 1,
      vars(r) {
        switch (r || traitRank("slow_digestion") || 1) {
          case 0.1:
            return [0.2];
          case 0.25:
            return [0.3];
          case 0.5:
            return [0.5];
          case 1:
            return [0.75];
          case 2:
            return [1];
          case 3:
            return [1.25];
          case 4:
            return [1.4];
        }
      }
    },
    astrologer: {
      // Improved astrological effects
      name: loc("trait_astrologer_name"),
      desc: loc("trait_astrologer"),
      type: "major",
      origin: "slitheryn",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("astrologer") || 1) {
          case 0.1:
            return [10];
          case 0.25:
            return [20];
          case 0.5:
            return [30];
          case 1:
            return [40];
          case 2:
            return [50];
          case 3:
            return [60];
          case 4:
            return [70];
        }
      }
    },
    hard_of_hearing: {
      // University science cap gain reduced by 5%
      name: loc("trait_hard_of_hearing_name"),
      desc: loc("trait_hard_of_hearing"),
      type: "major",
      origin: "slitheryn",
      taxonomy: "utility",
      val: -3,
      vars(r) {
        switch (r || traitRank("hard_of_hearing") || 1) {
          case 0.1:
            return [8];
          case 0.25:
            return [7];
          case 0.5:
            return [6];
          case 1:
            return [5];
          case 2:
            return [4];
          case 3:
            return [3];
          case 4:
            return [2];
        }
      }
    },
    resourceful: {
      // Crafting costs are reduced slightly
      name: loc("trait_resourceful_name"),
      desc: loc("trait_resourceful"),
      type: "major",
      origin: "arraak",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("resourceful") || 1) {
          case 0.1:
            return [4];
          case 0.25:
            return [6];
          case 0.5:
            return [8];
          case 1:
            return [12];
          case 2:
            return [16];
          case 3:
            return [18];
          case 4:
            return [20];
        }
      }
    },
    selenophobia: {
      // Moon phase directly affects productivity, on average this is slightly negative
      name: loc("trait_selenophobia_name"),
      desc: loc("trait_selenophobia"),
      type: "major",
      origin: "arraak",
      taxonomy: "production",
      val: -6,
      vars(r) {
        switch (r || traitRank("selenophobia") || 1) {
          case 0.1:
            return [1];
          case 0.25:
            return [2];
          case 0.5:
            return [3];
          case 1:
            return [4];
          case 2:
            return [5];
          case 3:
            return [6];
          case 4:
            return [7];
        }
      }
    },
    leathery: {
      // Morale penalty from some weather conditions are reduced.
      name: loc("trait_leathery_name"),
      desc: loc("trait_leathery"),
      type: "major",
      origin: "pterodacti",
      taxonomy: "production",
      val: 2,
      vars(r) {
        switch (r || traitRank("leathery") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [4];
          case 0.5:
            return [3];
          case 1:
            return [2];
          case 2:
            return [1];
          case 3:
            return [0];
          case 4:
            return [-1];
        }
      }
    },
    pessimistic: {
      // Minor increase to stress
      name: loc("trait_pessimistic_name"),
      desc: loc("trait_pessimistic"),
      type: "major",
      origin: "pterodacti",
      taxonomy: "production",
      val: -1,
      vars(r) {
        switch (r || traitRank("pessimistic") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [4];
          case 0.5:
            return [3];
          case 1:
            return [2];
          case 2:
            return [1];
          case 3:
            return [1];
          case 4:
            return [0];
        }
      }
    },
    hoarder: {
      // Banks can store 20% more money
      name: loc("trait_hoarder_name"),
      desc: loc("trait_hoarder"),
      type: "major",
      origin: "dracnid",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("hoarder") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [5];
          case 0.5:
            return [10];
          case 1:
            return [20];
          case 2:
            return [25];
          case 3:
            return [30];
          case 4:
            return [35];
        }
      }
    },
    solitary: {
      // Cabins are cheaper however cottages cost more
      name: loc("trait_solitary_name"),
      desc: loc("trait_solitary"),
      type: "major",
      origin: "dracnid",
      taxonomy: "utility",
      val: -1,
      vars(r) {
        switch (r || traitRank("solitary") || 1) {
          case 0.1:
            return [0.01, 0.03];
          case 0.25:
            return [0.01, 0.025];
          case 0.5:
            return [0.01, 0.02];
          case 1:
            return [0.02, 0.02];
          case 2:
            return [0.025, 0.02];
          case 3:
            return [0.025, 0.015];
          case 4:
            return [0.028, 0.012];
        }
      }
    },
    kindling_kindred: {
      // Lumber is no longer a resource, however other costs are increased for anything that would have used lumber to compensate.
      name: loc("trait_kindling_kindred_name"),
      desc: loc("trait_kindling_kindred"),
      type: "major",
      origin: "entish",
      taxonomy: "resource",
      val: 8,
      vars(r) {
        switch (r || traitRank("kindling_kindred") || 1) {
          case 0.1:
            return [12];
          case 0.25:
            return [10];
          case 0.5:
            return [8];
          case 1:
            return [5];
          case 2:
            return [4];
          case 3:
            return [3];
          case 4:
            return [2];
        }
      }
    },
    iron_wood: {
      // Removes Plywood as a resource, adds attack bonus
      name: loc("trait_iron_wood_name"),
      desc: loc("trait_iron_wood"),
      type: "major",
      origin: "entish",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("iron_wood") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [6];
          case 0.5:
            return [9];
          case 1:
            return [12];
          case 2:
            return [15];
          case 3:
            return [18];
          case 4:
            return [21];
        }
      }
    },
    pyrophobia: {
      // Smelter productivity is reduced
      name: loc("trait_pyrophobia_name"),
      desc: loc("trait_pyrophobia"),
      type: "major",
      origin: "entish",
      taxonomy: "resource",
      val: -4,
      vars(r) {
        switch (r || traitRank("pyrophobia") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [5];
        }
      }
    },
    catnip: {
      // Attract Cats
      name: loc("trait_catnip_name"),
      desc: loc("trait_catnip"),
      type: "major",
      origin: "entish",
      taxonomy: "production",
      val: 1,
      vars(r) {
        switch (r || traitRank("catnip") || 1) {
          case 0.1:
            return [1, 2];
          case 0.25:
            return [1, 2];
          case 0.5:
            return [1, 2];
          case 1:
            return [1, 2];
          case 2:
            return [1, 2];
          case 3:
            return [2, 2];
          case 4:
            return [2, 4];
        }
      }
    },
    hyper: {
      // The game moves at a 5% faster pace
      name: loc("trait_hyper_name"),
      desc: loc("trait_hyper"),
      type: "major",
      origin: "cacti",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("hyper") || 1) {
          case 0.1:
            return [1];
          case 0.25:
            return [2];
          case 0.5:
            return [3];
          case 1:
            return [5];
          case 2:
            return [6];
          case 3:
            return [7];
          case 4:
            return [8];
        }
      }
    },
    skittish: {
      // Thunderstorms lower all production
      name: loc("trait_skittish_name"),
      desc: loc("trait_skittish"),
      type: "major",
      origin: "cacti",
      taxonomy: "production",
      val: -4,
      vars(r) {
        switch (r || traitRank("skittish") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [18];
          case 0.5:
            return [15];
          case 1:
            return [12];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    fragrant: {
      // Reduced Hunting effectiveness
      name: loc("trait_fragrant_name"),
      desc: loc("trait_fragrant"),
      type: "major",
      origin: "pinguicula",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("fragrant") || 1) {
          case 0.1:
            return [40];
          case 0.25:
            return [35];
          case 0.5:
            return [30];
          case 1:
            return [20];
          case 2:
            return [15];
          case 3:
            return [12];
          case 4:
            return [10];
        }
      }
    },
    sticky: {
      // Food req lowered, Increase Combat Rating
      name: loc("trait_sticky_name"),
      desc: loc("trait_sticky"),
      type: "major",
      origin: "pinguicula",
      taxonomy: "combat",
      val: 3,
      vars(r) {
        switch (r || traitRank("sticky") || 1) {
          case 0.1:
            return [3, 3];
          case 0.25:
            return [5, 5];
          case 0.5:
            return [10, 8];
          case 1:
            return [20, 15];
          case 2:
            return [25, 18];
          case 3:
            return [30, 20];
          case 4:
            return [35, 22];
        }
      }
    },
    anise: {
      // Attract Dogs
      name: loc("trait_anise_name"),
      desc: loc("trait_anise"),
      type: "major",
      origin: "pinguicula",
      taxonomy: "production",
      val: 1,
      vars(r) {
        switch (r || traitRank("anise") || 1) {
          case 0.1:
            return [1, 1];
          case 0.25:
            return [1, 1];
          case 0.5:
            return [1, 1];
          case 1:
            return [1, 1];
          case 2:
            return [1, 1];
          case 3:
            return [2, 1];
          case 4:
            return [2, 3];
        }
      }
    },
    infectious: {
      // Attacking has a chance to infect other creatures and grow your population
      name: loc("trait_infectious_name"),
      desc: loc("trait_infectious"),
      type: "major",
      origin: "sporgar",
      taxonomy: "combat",
      val: 4,
      vars(r) {
        switch (r || traitRank("infectious") || 1) {
          case 0.1:
            return [1, 2, 3, 6, 15];
          case 0.25:
            return [1, 2, 3, 7, 18];
          case 0.5:
            return [1, 2, 4, 8, 20];
          case 1:
            return [2, 3, 5, 10, 25];
          case 2:
            return [2, 4, 6, 12, 30];
          case 3:
            return [3, 4, 7, 13, 32];
          case 4:
            return [3, 5, 8, 14, 34];
        }
      }
    },
    parasite: {
      // You can only reproduce by infecting victims, spores sometimes find a victim when it's windy
      name: loc("trait_parasite_name"),
      desc: loc("trait_parasite"),
      type: "major",
      origin: "sporgar",
      taxonomy: "combat",
      val: -4,
      vars(r) {
        switch (r || traitRank("parasite") || 1) {
          case 0.1:
            return [0, 12];
          case 0.25:
            return [1, 10];
          case 0.5:
            return [1, 8];
          case 1:
            return [2, 6];
          case 2:
            return [2, 4];
          case 3:
            return [3, 2];
          case 4:
            return [3, 0];
        }
      }
    },
    toxic: {
      // Factory type jobs are more productive
      name: loc("trait_toxic_name"),
      desc: loc("trait_toxic"),
      type: "major",
      origin: "shroomi",
      taxonomy: "resource",
      val: 5,
      vars(r) {
        switch (r || traitRank("toxic") || 1) {
          case 0.1:
            return [3, 2, 8];
          case 0.25:
            return [5, 3, 10];
          case 0.5:
            return [10, 5, 15];
          case 1:
            return [20, 8, 30];
          case 2:
            return [25, 10, 40];
          case 3:
            return [30, 12, 45];
          case 4:
            return [35, 14, 50];
        }
      }
    },
    nyctophilia: {
      // Productivity is lost when it is sunny
      name: loc("trait_nyctophilia_name"),
      desc: loc("trait_nyctophilia"),
      type: "major",
      origin: "shroomi",
      taxonomy: "production",
      val: -3,
      vars(r) {
        switch (r || traitRank("nyctophilia") || 1) {
          case 0.1:
            return [12, 6];
          case 0.25:
            return [10, 6];
          case 0.5:
            return [8, 5];
          case 1:
            return [5, 2];
          case 2:
            return [3, 1];
          case 3:
            return [2, 1];
          case 4:
            return [1, 1];
        }
      }
    },
    infiltrator: {
      // Cheap spies and sometimes steal tech from rivals
      name: loc("trait_infiltrator_name"),
      desc: loc("trait_infiltrator"),
      type: "major",
      origin: "moldling",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("infiltrator") || 1) {
          case 0.1:
            return [120];
          case 0.25:
            return [110];
          case 0.5:
            return [100];
          case 1:
            return [90];
          case 2:
            return [85];
          case 3:
            return [80];
          case 4:
            return [75];
        }
      }
    },
    hibernator: {
      // Lower activity during winter
      name: loc("trait_hibernator_name"),
      desc: loc("trait_hibernator"),
      type: "major",
      origin: "moldling",
      taxonomy: "production",
      val: -3,
      vars(r) {
        switch (r || traitRank("hibernator") || 1) {
          case 0.1:
            return [10, 10];
          case 0.25:
            return [15, 9];
          case 0.5:
            return [20, 8];
          case 1:
            return [25, 8];
          case 2:
            return [30, 6];
          case 3:
            return [35, 5];
          case 4:
            return [40, 4];
        }
      }
    },
    cannibalize: {
      // Eat your own for buffs
      name: loc("trait_cannibalize_name"),
      desc: loc("trait_cannibalize"),
      type: "major",
      origin: "mantis",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        switch (r || traitRank("cannibalize") || 1) {
          case 0.1:
            return [6];
          case 0.25:
            return [8];
          case 0.5:
            return [10];
          case 1:
            return [15];
          case 2:
            return [20];
          case 3:
            return [22];
          case 4:
            return [24];
        }
      }
    },
    frail: {
      // More soldiers die in combat
      name: loc("trait_frail_name"),
      desc: loc("trait_frail"),
      type: "major",
      origin: "mantis",
      taxonomy: "combat",
      val: -2,
      vars(r) {
        switch (r || traitRank("frail") || 1) {
          case 0.1:
            return [3, 4];
          case 0.25:
            return [3, 3];
          case 0.5:
            return [2, 3];
          case 1:
            return [2, 2];
          case 2:
            return [1, 2];
          case 3:
            return [1, 1];
          case 4:
            return [0, 1];
        }
      }
    },
    malnutrition: {
      // The rationing penalty is weaker
      name: loc("trait_malnutrition_name"),
      desc: loc("trait_malnutrition"),
      type: "major",
      origin: "mantis",
      taxonomy: "production",
      val: 1,
      vars(r) {
        switch (r || traitRank("malnutrition") || 1) {
          case 0.1:
            return [8];
          case 0.25:
            return [10];
          case 0.5:
            return [12];
          case 1:
            return [25];
          case 2:
            return [40];
          case 3:
            return [50];
          case 4:
            return [60];
        }
      }
    },
    claws: {
      // Raises maximum bound for army score roll
      name: loc("trait_claws_name"),
      desc: loc("trait_claws"),
      type: "major",
      origin: "scorpid",
      taxonomy: "combat",
      val: 5,
      vars(r) {
        switch (r || traitRank("claws") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [8];
          case 0.5:
            return [12];
          case 1:
            return [25];
          case 2:
            return [32];
          case 3:
            return [35];
          case 4:
            return [38];
        }
      }
    },
    atrophy: {
      // More prone to starvation
      name: loc("trait_atrophy_name"),
      desc: loc("trait_atrophy"),
      type: "major",
      origin: "scorpid",
      taxonomy: "production",
      val: -1,
      vars(r) {
        switch (r || traitRank("atrophy") || 1) {
          case 0.1:
            return [0.4];
          case 0.25:
            return [0.35];
          case 0.5:
            return [0.25];
          case 1:
            return [0.15];
          case 2:
            return [0.1];
          case 3:
            return [0.08];
          case 4:
            return [0.06];
        }
      }
    },
    hivemind: {
      // Jobs with low citizen counts assigned to them have reduced output, but those with high numbers have increased output.
      name: loc("trait_hivemind_name"),
      desc: loc("trait_hivemind"),
      type: "major",
      origin: "antid",
      taxonomy: "production",
      val: 9,
      vars(r) {
        switch (r || traitRank("hivemind") || 1) {
          case 0.1:
            return [13];
          case 0.25:
            return [12];
          case 0.5:
            return [11];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [7];
          case 4:
            return [6];
        }
      }
    },
    tunneler: {
      // Mines and Coal Mines are cheaper.
      name: loc("trait_tunneler_name"),
      desc: loc("trait_tunneler"),
      type: "major",
      origin: "antid",
      taxonomy: "utility",
      val: 2,
      vars(r) {
        switch (r || traitRank("tunneler") || 1) {
          case 0.1:
            return [1e-3];
          case 0.25:
            return [2e-3];
          case 0.5:
            return [5e-3];
          case 1:
            return [0.01];
          case 2:
            return [0.015];
          case 3:
            return [0.018];
          case 4:
            return [0.02];
        }
      }
    },
    blood_thirst: {
      // Combat causes a temporary increase in morale
      name: loc("trait_blood_thirst_name"),
      desc: loc("trait_blood_thirst"),
      type: "major",
      origin: "sharkin",
      taxonomy: "combat",
      val: 5,
      vars(r) {
        switch (r || traitRank("blood_thirst") || 1) {
          case 0.1:
            return [15e4];
          case 0.25:
            return [25e4];
          case 0.5:
            return [5e5];
          case 1:
            return [1e6];
          case 2:
            return [2e6];
          case 3:
            return [4e6];
          case 4:
            return [5e6];
        }
      }
    },
    apex_predator: {
      // Hunting and Combat ratings are significantly higher, but you can't use armor
      name: loc("trait_apex_predator_name"),
      desc: loc("trait_apex_predator"),
      type: "major",
      origin: "sharkin",
      taxonomy: "combat",
      val: 6,
      vars(r) {
        switch (r || traitRank("apex_predator") || 1) {
          case 0.1:
            return [10, 15];
          case 0.25:
            return [15, 20];
          case 0.5:
            return [20, 30];
          case 1:
            return [30, 50];
          case 2:
            return [40, 60];
          case 3:
            return [45, 65];
          case 4:
            return [50, 70];
        }
      }
    },
    invertebrate: {
      // You have no bones
      name: loc("trait_invertebrate_name"),
      desc: loc("trait_invertebrate"),
      type: "major",
      origin: "octigoran",
      taxonomy: "combat",
      val: -2,
      vars(r) {
        switch (r || traitRank("invertebrate") || 1) {
          case 0.1:
            return [30];
          case 0.25:
            return [25];
          case 0.5:
            return [20];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [5];
          case 4:
            return [4];
        }
      }
    },
    suction_grip: {
      // Global productivity boost
      name: loc("trait_suction_grip_name"),
      desc: loc("trait_suction_grip"),
      type: "major",
      origin: "octigoran",
      taxonomy: "production",
      val: 4,
      vars(r) {
        switch (r || traitRank("suction_grip") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [5];
          case 0.5:
            return [6];
          case 1:
            return [8];
          case 2:
            return [12];
          case 3:
            return [14];
          case 4:
            return [15];
        }
      }
    },
    befuddle: {
      // Spy actions complete in 1/2 time
      name: loc("trait_befuddle_name"),
      desc: loc("trait_befuddle"),
      type: "major",
      origin: "dryad",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("befuddle") || 1) {
          case 0.1:
            return [10];
          case 0.25:
            return [20];
          case 0.5:
            return [30];
          case 1:
            return [50];
          case 2:
            return [75];
          case 3:
            return [85];
          case 4:
            return [90];
        }
      }
    },
    environmentalist: {
      // Use renewable energy instead of dirtly coal & oil power.
      name: loc("trait_environmentalist_name"),
      desc: loc("trait_environmentalist"),
      type: "major",
      origin: "dryad",
      taxonomy: "utility",
      val: -5,
      vars(r) {
        switch (r || traitRank("environmentalist") || 1) {
          case 0.1:
            return [-2.5, 1];
          case 0.25:
            return [-2, 1.15];
          case 0.5:
            return [-1.5, 1.25];
          case 1:
            return [-1, 1.35];
          case 2:
            return [-0.5, 1.4];
          case 3:
            return [-0.25, 1.45];
          case 4:
            return [0, 1.5];
        }
      }
    },
    unorganized: {
      // Increased time between revolutions
      name: loc("trait_unorganized_name"),
      desc: loc("trait_unorganized"),
      type: "major",
      origin: "satyr",
      taxonomy: "utility",
      val: -2,
      vars(r) {
        switch (r || traitRank("unorganized") || 1) {
          case 0.1:
            return [100];
          case 0.25:
            return [90];
          case 0.5:
            return [80];
          case 1:
            return [50];
          case 2:
            return [40];
          case 3:
            return [30];
          case 4:
            return [25];
        }
      }
    },
    musical: {
      // Entertainers are more effective
      name: loc("trait_musical_name"),
      desc: loc("trait_musical"),
      type: "major",
      origin: "satyr",
      taxonomy: "production",
      val: 5,
      vars(r) {
        switch (r || traitRank("musical") || 1) {
          case 0.1:
            return [0.15];
          case 0.25:
            return [0.25];
          case 0.5:
            return [0.5];
          case 1:
            return [1];
          case 2:
            return [1.1];
          case 3:
            return [1.2];
          case 4:
            return [1.25];
        }
      }
    },
    revive: {
      // Soldiers sometimes self res
      name: loc("trait_revive_name"),
      desc: loc("trait_revive"),
      type: "major",
      origin: "phoenix",
      taxonomy: "combat",
      val: 4,
      vars(r) {
        switch (r || traitRank("revive") || 1) {
          case 0.1:
            return [8, 6, 2, 9, 7, 3.5, 4];
          case 0.25:
            return [7, 5, 2, 8, 6, 3, 4];
          case 0.5:
            return [6, 4, 2, 7, 5, 2.5, 4];
          case 1:
            return [5, 3, 1.5, 6, 4, 2, 3];
          case 2:
            return [4, 2, 1, 5, 3, 1.5, 2];
          case 3:
            return [3, 1.5, 1, 4, 2.5, 1, 2];
          case 4:
            return [2.5, 1.2, 1, 3.5, 2, 1, 2];
        }
      }
    },
    slow_regen: {
      // Your soldiers wounds heal slower.
      name: loc("trait_slow_regen_name"),
      desc: loc("trait_slow_regen"),
      type: "major",
      origin: "phoenix",
      taxonomy: "combat",
      val: -4,
      vars(r) {
        switch (r || traitRank("slow_regen") || 1) {
          case 0.1:
            return [45];
          case 0.25:
            return [40];
          case 0.5:
            return [35];
          case 1:
            return [25];
          case 2:
            return [20];
          case 3:
            return [15];
          case 4:
            return [12];
        }
      }
    },
    forge: {
      // Smelters do not require fuel, boosts geothermal power
      name: loc("trait_forge_name"),
      desc: loc("trait_forge"),
      type: "major",
      origin: "salamander",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("forge") || 1) {
          case 0.1:
            return [0.25];
          case 0.25:
            return [0.5];
          case 0.5:
            return [1];
          case 1:
            return [2];
          case 2:
            return [2.5];
          case 3:
            return [3];
          case 4:
            return [3.5];
        }
      }
    },
    autoignition: {
      // Library knowledge bonus reduced
      name: loc("trait_autoignition_name"),
      desc: loc("trait_autoignition"),
      type: "major",
      origin: "salamander",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("autoignition") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [4];
          case 0.5:
            return [3];
          case 1:
            return [2];
          case 2:
            return [1.5];
          case 3:
            return [1];
          case 4:
            return [0.5];
        }
      }
    },
    blurry: {
      // Increased success chance of spies // Warlord improves Reapers
      name: loc("trait_blurry_name"),
      desc: loc("trait_blurry"),
      type: "major",
      origin: "yeti",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        switch (r || traitRank("blurry") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [10];
          case 0.5:
            return [15];
          case 1:
            return [25];
          case 2:
            return [35];
          case 3:
            return [40];
          case 4:
            return [45];
        }
      }
    },
    snowy: {
      // You lose morale if it's not snowing
      name: loc("trait_snowy_name"),
      desc: loc("trait_snowy"),
      type: "major",
      origin: "yeti",
      taxonomy: "production",
      val: -3,
      vars(r) {
        switch (r || traitRank("snowy") || 1) {
          case 0.1:
            return [5, 12];
          case 0.25:
            return [4, 10];
          case 0.5:
            return [3, 8];
          case 1:
            return [2, 5];
          case 2:
            return [2, 4];
          case 3:
            return [1, 3];
          case 4:
            return [1, 2];
        }
      }
    },
    ravenous: {
      // Drastically increases food consumption
      name: loc("trait_ravenous_name"),
      desc: loc("trait_ravenous"),
      type: "major",
      origin: "wendigo",
      taxonomy: "resource",
      val: -5,
      vars(r) {
        switch (r || traitRank("ravenous") || 1) {
          case 0.1:
            return [35, 2];
          case 0.25:
            return [30, 2];
          case 0.5:
            return [25, 2];
          case 1:
            return [20, 3];
          case 2:
            return [15, 4];
          case 3:
            return [10, 4];
          case 4:
            return [8, 4];
        }
      }
    },
    ghostly: {
      // More souls from hunting and soul wells, increased soul gem drop chance
      name: loc("trait_ghostly_name"),
      desc: loc("trait_ghostly"),
      type: "major",
      origin: "wendigo",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        switch (r || traitRank("ghostly") || 1) {
          case 0.1:
            return [15, 1.1, 2];
          case 0.25:
            return [20, 1.2, 5];
          case 0.5:
            return [25, 1.25, 10];
          case 1:
            return [50, 1.5, 15];
          case 2:
            return [60, 1.6, 20];
          case 3:
            return [65, 1.7, 22];
          case 4:
            return [70, 1.8, 23];
        }
      }
    },
    lawless: {
      // Government lockout timer is reduced by 90%
      name: loc("trait_lawless_name"),
      desc: loc("trait_lawless"),
      type: "major",
      origin: "tuskin",
      taxonomy: "utility",
      val: 3,
      vars(r) {
        switch (r || traitRank("lawless") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [30];
          case 0.5:
            return [50];
          case 1:
            return [90];
          case 2:
            return [95];
          case 3:
            return [98];
          case 4:
            return [99];
        }
      }
    },
    mistrustful: {
      // Lose standing with rival cities quicker
      name: loc("trait_mistrustful_name"),
      desc: loc("trait_mistrustful"),
      type: "major",
      origin: "tuskin",
      taxonomy: "utility",
      val: -1,
      vars(r) {
        switch (r || traitRank("mistrustful") || 1) {
          case 0.1:
            return [5];
          case 0.25:
            return [4];
          case 0.5:
            return [3];
          case 1:
            return [2];
          case 2:
            return [2];
          case 3:
            return [1];
          case 4:
            return [1];
        }
      }
    },
    humpback: {
      // Starvation resistance and miner/lumberjack boost
      name: loc("trait_humpback_name"),
      desc: loc("trait_humpback"),
      type: "major",
      origin: "kamel",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("humpback") || 1) {
          case 0.1:
            return [0.15, 5];
          case 0.25:
            return [0.2, 8];
          case 0.5:
            return [0.25, 10];
          case 1:
            return [0.5, 20];
          case 2:
            return [0.75, 25];
          case 3:
            return [0.8, 30];
          case 4:
            return [0.85, 35];
        }
      }
    },
    thalassophobia: {
      // Wharves are unavailable
      name: loc("trait_thalassophobia_name"),
      desc: loc("trait_thalassophobia"),
      type: "major",
      origin: "kamel",
      taxonomy: "utility",
      val: -4
    },
    unfavored: {
      // Zodiac Signs give negative Effects
      name: loc("trait_unfavored_name"),
      desc: loc("trait_unfavored"),
      type: "major",
      origin: "kamel",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("unfavored") || 1) {
          case 0.1:
            return [175];
          case 0.25:
            return [150];
          case 0.5:
            return [125];
          case 1:
            return [100];
          case 2:
            return [75];
          case 3:
            return [50];
          case 4:
            return [25];
        }
      }
    },
    fiery: {
      // Major war bonus
      name: loc("trait_fiery_name"),
      desc: loc("trait_fiery"),
      type: "major",
      origin: "balorg",
      taxonomy: "combat",
      val: 10,
      vars(r) {
        switch (r || traitRank("fiery") || 1) {
          case 0.1:
            return [20, 12];
          case 0.25:
            return [30, 15];
          case 0.5:
            return [40, 18];
          case 1:
            return [65, 25];
          case 2:
            return [70, 35];
          case 3:
            return [72, 38];
          case 4:
            return [74, 40];
        }
      }
    },
    terrifying: {
      // No one will trade with you
      name: loc("trait_terrifying_name"),
      desc: loc("trait_terrifying"),
      type: "major",
      origin: "balorg",
      taxonomy: "resource",
      val: 6,
      vars(r) {
        switch (r || traitRank("terrifying") || 1) {
          case 0.1:
            return [6, 15];
          case 0.25:
            return [8, 20];
          case 0.5:
            return [10, 25];
          case 1:
            return [12, 32];
          case 2:
            return [13, 34];
          case 3:
            return [14, 36];
          case 4:
            return [15, 38];
        }
      }
    },
    slaver: {
      // You capture victims and force them to work for you
      name: loc("trait_slaver_name"),
      desc: loc("trait_slaver"),
      type: "major",
      origin: "balorg",
      taxonomy: "production",
      val: 12,
      vars(r) {
        switch (r || traitRank("slaver") || 1) {
          case 0.1:
            return [0.05];
          case 0.25:
            return [0.1];
          case 0.5:
            return [0.14];
          case 1:
            return [0.28];
          case 2:
            return [0.3];
          case 3:
            return [0.32];
          case 4:
            return [0.33];
        }
      }
    },
    compact: {
      // You hardly take up any space at all
      name: loc("trait_compact_name"),
      desc: loc("trait_compact"),
      type: "major",
      origin: "imp",
      taxonomy: "utility",
      val: 10,
      vars(r) {
        switch (r || traitRank("compact") || 1) {
          case 0.1:
            return [3e-3, 2e-3];
          case 0.25:
            return [5e-3, 3e-3];
          case 0.5:
            return [0.01, 5e-3];
          case 1:
            return [0.015, 75e-4];
          case 2:
            return [0.018, 85e-4];
          case 3:
            return [0.02, 9e-3];
          case 4:
            return [0.021, 92e-4];
        }
      }
    },
    conniving: {
      // Better trade deals
      name: loc("trait_conniving_name"),
      desc: loc("trait_conniving"),
      type: "major",
      origin: "imp",
      taxonomy: "resource",
      val: 4,
      vars(r) {
        switch (r || traitRank("conniving") || 1) {
          case 0.1:
            return [1, 6];
          case 0.25:
            return [2, 8];
          case 0.5:
            return [3, 10];
          case 1:
            return [5, 15];
          case 2:
            return [8, 20];
          case 3:
            return [10, 24];
          case 4:
            return [12, 28];
        }
      }
    },
    pathetic: {
      // You suck at combat
      name: loc("trait_pathetic_name"),
      desc: loc("trait_pathetic"),
      type: "major",
      origin: "imp",
      taxonomy: "combat",
      val: -5,
      vars(r) {
        switch (r || traitRank("pathetic") || 1) {
          case 0.1:
            return [40];
          case 0.25:
            return [35];
          case 0.5:
            return [30];
          case 1:
            return [25];
          case 2:
            return [20];
          case 3:
            return [15];
          case 4:
            return [12];
        }
      }
    },
    spiritual: {
      // Temples are 13% more effective
      name: loc("trait_spiritual_name"),
      desc: loc("trait_spiritual"),
      type: "major",
      origin: "seraph",
      taxonomy: "production",
      val: 4,
      vars(r) {
        switch (r || traitRank("spiritual") || 1) {
          case 0.1:
            return [6];
          case 0.25:
            return [8];
          case 0.5:
            return [10];
          case 1:
            return [13];
          case 2:
            return [15];
          case 3:
            return [18];
          case 4:
            return [20];
        }
      }
    },
    truthful: {
      // Bankers are less effective
      name: loc("trait_truthful_name"),
      desc: loc("trait_truthful"),
      type: "major",
      origin: "seraph",
      taxonomy: "resource",
      val: -7,
      vars(r) {
        switch (r || traitRank("truthful") || 1) {
          case 0.1:
            return [85];
          case 0.25:
            return [75];
          case 0.5:
            return [65];
          case 1:
            return [50];
          case 2:
            return [30];
          case 3:
            return [20];
          case 4:
            return [15];
        }
      }
    },
    unified: {
      // Start with unification
      name: loc("trait_unified_name"),
      desc: loc("trait_unified"),
      type: "major",
      origin: "seraph",
      taxonomy: "production",
      val: 4,
      vars(r) {
        switch (r || traitRank("unified") || 1) {
          case 0.1:
            return [0];
          case 0.25:
            return [1];
          case 0.5:
            return [2];
          case 1:
            return [3];
          case 2:
            return [5];
          case 3:
            return [7];
          case 4:
            return [8];
        }
      }
    },
    rainbow: {
      // Gain a bonus if sunny after raining
      name: loc("trait_rainbow_name"),
      desc: loc("trait_rainbow"),
      type: "major",
      origin: "unicorn",
      taxonomy: "production",
      val: 3,
      vars(r) {
        switch (r || traitRank("rainbow") || 1) {
          case 0.1:
            return [10];
          case 0.25:
            return [20];
          case 0.5:
            return [30];
          case 1:
            return [50];
          case 2:
            return [80];
          case 3:
            return [100];
          case 4:
            return [120];
        }
      }
    },
    gloomy: {
      // Gain a bonus if cloudy
      name: loc("trait_gloomy_name"),
      desc: loc("trait_gloomy"),
      type: "major",
      origin: "unicorn",
      taxonomy: "production",
      val: 3,
      vars(r) {
        switch (r || traitRank("gloomy") || 1) {
          case 0.1:
            return [3];
          case 0.25:
            return [5];
          case 0.5:
            return [8];
          case 1:
            return [10];
          case 2:
            return [12];
          case 3:
            return [13];
          case 4:
            return [14];
        }
      }
    },
    magnificent: {
      // construct shrines to receive boons
      name: loc("trait_magnificent_name"),
      desc: loc("trait_magnificent"),
      type: "major",
      origin: "unicorn",
      taxonomy: "utility",
      val: 6,
      vars(r) {
        switch (r || traitRank("magnificent") || 1) {
          case 0.1:
            return [250, 1, 0.35, 0.65, 0.5];
          case 0.25:
            return [300, 1, 0.5, 0.75, 1];
          case 0.5:
            return [350, 2, 0.75, 0.8, 1];
          case 1:
            return [400, 3, 1, 1, 1];
          case 2:
            return [450, 3, 1.5, 1.5, 1.5];
          case 3:
            return [500, 3, 2, 2, 2];
          case 4:
            return [520, 3, 2.5, 2.5, 2.5];
        }
      }
    },
    noble: {
      // Unable to raise taxes above base value or set very low taxes
      name: loc("trait_noble_name"),
      desc: loc("trait_noble"),
      type: "major",
      origin: "unicorn",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("noble") || 1) {
          case 0.1:
            return [18, 20];
          case 0.25:
            return [15, 20];
          case 0.5:
            return [12, 20];
          case 1:
            return [10, 20];
          case 2:
            return [10, 24];
          case 3:
            return [10, 28];
          case 4:
            return [10, 30];
        }
      }
    },
    imitation: {
      // You are an imitation of another species
      name: loc("trait_imitation_name"),
      desc: loc("trait_imitation"),
      type: "major",
      origin: "synth",
      taxonomy: "utility",
      val: 6,
      vars(r) {
        switch (r || traitRank("imitation") || 1) {
          case 0.1:
            return [0.5, 0.1];
          case 0.25:
            return [0.5, 0.25];
          case 0.5:
            return [0.5, 0.5];
          case 1:
            return [0.5, 1];
          case 2:
            return [0.5, 2];
          case 3:
            return [0.5, 3];
          case 4:
            return [0.5, 4];
        }
      }
    },
    emotionless: {
      // You have no emotions, cold logic dictates your decisions
      name: loc("trait_emotionless_name"),
      desc: loc("trait_emotionless"),
      type: "major",
      origin: "synth",
      taxonomy: "production",
      val: -4,
      vars(r) {
        switch (r || traitRank("emotionless") || 1) {
          case 0.1:
            return [55, 8];
          case 0.25:
            return [50, 10];
          case 0.5:
            return [45, 10];
          case 1:
            return [35, 13];
          case 2:
            return [25, 15];
          case 3:
            return [20, 15];
          case 4:
            return [18, 16];
        }
      }
    },
    logical: {
      // Citizens add Knowledge
      name: loc("trait_logical_name"),
      desc: loc("trait_logical"),
      type: "major",
      origin: "synth",
      taxonomy: "utility",
      val: 6,
      vars(r) {
        switch (r || traitRank("logical") || 1) {
          case 0.1:
            return [10, 5];
          case 0.25:
            return [25, 10];
          case 0.5:
            return [50, 15];
          case 1:
            return [100, 25];
          case 2:
            return [125, 30];
          case 3:
            return [150, 32];
          case 4:
            return [160, 33];
        }
      }
    },
    shapeshifter: {
      name: loc("trait_shapeshifter_name"),
      desc: loc("trait_shapeshifter"),
      type: "major",
      origin: "nano",
      taxonomy: "utility",
      val: 10,
      vars(r) {
        switch (r || traitRank("shapeshifter") || 1) {
          case 0.1:
            return [0.5, 0.1];
          case 0.25:
            return [0.5, 0.25];
          case 0.5:
            return [0.5, 0.5];
          case 1:
            return [0.5, 1];
          case 2:
            return [0.5, 2];
          case 3:
            return [0.5, 3];
          case 4:
            return [0.5, 4];
        }
      }
    },
    deconstructor: {
      name: loc("trait_deconstructor_name"),
      desc: loc("trait_deconstructor"),
      type: "major",
      origin: "nano",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("deconstructor") || 1) {
          case 0.1:
            return [25];
          case 0.25:
            return [40];
          case 0.5:
            return [60];
          case 1:
            return [100];
          case 2:
            return [125];
          case 3:
            return [140];
          case 4:
            return [150];
        }
      }
    },
    linked: {
      name: loc("trait_linked_name"),
      desc: loc("trait_linked"),
      type: "major",
      origin: "nano",
      taxonomy: "utility",
      val: 4,
      vars(r) {
        switch (r || traitRank("linked") || 1) {
          case 0.1:
            return [0.02, 40];
          case 0.25:
            return [0.03, 40];
          case 0.5:
            return [0.05, 40];
          case 1:
            return [0.1, 80];
          case 2:
            return [0.12, 100];
          case 3:
            return [0.14, 100];
          case 4:
            return [0.15, 100];
        }
      }
    },
    dark_dweller: {
      name: loc("trait_dark_dweller_name"),
      desc: loc("trait_dark_dweller"),
      type: "major",
      origin: "ghast",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("dark_dweller") || 1) {
          case 0.1:
            return [99];
          case 0.25:
            return [90];
          case 0.5:
            return [75];
          case 1:
            return [60];
          case 2:
            return [45];
          case 3:
            return [30];
          case 4:
            return [25];
        }
      }
    },
    swift: {
      name: loc("trait_swift_name"),
      desc: loc("trait_swift"),
      type: "major",
      origin: "ghast",
      taxonomy: "combat",
      val: 10,
      vars(r) {
        switch (r || traitRank("swift") || 1) {
          case 0.1:
            return [20, 8];
          case 0.25:
            return [35, 15];
          case 0.5:
            return [55, 30];
          case 1:
            return [75, 45];
          case 2:
            return [85, 55];
          case 3:
            return [90, 65];
          case 4:
            return [92, 70];
        }
      }
    },
    anthropophagite: {
      name: loc("trait_anthropophagite_name"),
      desc: loc("trait_anthropophagite"),
      type: "major",
      origin: "ghast",
      taxonomy: "utility",
      val: -2,
      vars(r) {
        switch (r || traitRank("anthropophagite") || 1) {
          case 0.1:
            return [0.25];
          case 0.25:
            return [0.4];
          case 0.5:
            return [0.65];
          case 1:
            return [1];
          case 2:
            return [1.5];
          case 3:
            return [2];
          case 4:
            return [2.5];
        }
      }
    },
    living_tool: {
      name: loc("trait_living_tool_name"),
      desc: loc("trait_living_tool"),
      type: "major",
      origin: "shoggoth",
      taxonomy: "resource",
      val: 12,
      vars(r) {
        switch (r || traitRank("living_tool") || 1) {
          case 0.1:
            return [0.5, 2];
          case 0.25:
            return [0.65, 5];
          case 0.5:
            return [0.8, 12];
          case 1:
            return [1, 25];
          case 2:
            return [1.1, 35];
          case 3:
            return [1.2, 42];
          case 4:
            return [1.25, 45];
        }
      }
    },
    bloated: {
      name: loc("trait_bloated_name"),
      desc: loc("trait_bloated"),
      type: "major",
      origin: "shoggoth",
      taxonomy: "utility",
      val: -10,
      vars(r) {
        switch (r || traitRank("bloated") || 1) {
          case 0.1:
            return [30];
          case 0.25:
            return [25];
          case 0.5:
            return [20];
          case 1:
            return [15];
          case 2:
            return [10];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    artisan: {
      name: loc("trait_artisan_name"),
      desc: loc("trait_artisan"),
      type: "major",
      origin: "dwarf",
      taxonomy: "resource",
      val: 9,
      vars(r) {
        switch (r || traitRank("artisan") || 1) {
          case 0.1:
            return [15, 8, 0.15];
          case 0.25:
            return [20, 10, 0.2];
          case 0.5:
            return [35, 15, 0.35];
          case 1:
            return [50, 20, 0.5];
          case 2:
            return [60, 25, 0.55];
          case 3:
            return [70, 30, 0.6];
          case 4:
            return [80, 35, 0.65];
        }
      }
    },
    stubborn: {
      name: loc("trait_stubborn_name"),
      desc: loc("trait_stubborn"),
      type: "major",
      origin: "dwarf",
      taxonomy: "utility",
      val: -5,
      vars(r) {
        switch (r || traitRank("stubborn") || 1) {
          case 0.1:
            return [20];
          case 0.25:
            return [18];
          case 0.5:
            return [14];
          case 1:
            return [10];
          case 2:
            return [6];
          case 3:
            return [4];
          case 4:
            return [3];
        }
      }
    },
    rogue: {
      name: loc("trait_rogue_name"),
      desc: loc("trait_rogue"),
      type: "major",
      origin: "raccoon",
      taxonomy: "resource",
      val: 6,
      vars(r) {
        switch (r || traitRank("rogue") || 1) {
          case 0.1:
            return [4];
          case 0.25:
            return [6];
          case 0.5:
            return [8];
          case 1:
            return [10];
          case 2:
            return [12];
          case 3:
            return [14];
          case 4:
            return [16];
        }
      }
    },
    untrustworthy: {
      name: loc("trait_untrustworthy_name"),
      desc: loc("trait_untrustworthy"),
      type: "major",
      origin: "raccoon",
      taxonomy: "utility",
      val: -4,
      vars(r) {
        switch (r || traitRank("untrustworthy") || 1) {
          case 0.1:
            return [8];
          case 0.25:
            return [7];
          case 0.5:
            return [6];
          case 1:
            return [5];
          case 2:
            return [4];
          case 3:
            return [3];
          case 4:
            return [2];
        }
      }
    },
    living_materials: {
      name: loc("trait_living_materials_name"),
      desc: loc("trait_living_materials"),
      type: "major",
      origin: "lichen",
      taxonomy: "resource",
      val: 6,
      vars(r) {
        switch (r || traitRank("living_materials") || 1) {
          case 0.1:
            return [0.995];
          case 0.25:
            return [0.99];
          case 0.5:
            return [0.98];
          case 1:
            return [0.97];
          case 2:
            return [0.96];
          case 3:
            return [0.95];
          case 4:
            return [0.94];
        }
      }
    },
    unstable: {
      name: loc("trait_unstable_name"),
      desc: loc("trait_unstable"),
      type: "major",
      origin: "lichen",
      taxonomy: "utility",
      val: -5,
      vars(r) {
        switch (r || traitRank("unstable") || 1) {
          case 0.1:
            return [7, 10];
          case 0.25:
            return [6, 10];
          case 0.5:
            return [5, 10];
          case 1:
            return [4, 10];
          case 2:
            return [3, 10];
          case 3:
            return [2, 10];
          case 4:
            return [1, 10];
        }
      }
    },
    elemental: {
      name: loc("trait_elemental_name"),
      desc: loc("trait_elemental"),
      type: "major",
      origin: "wyvern",
      taxonomy: "utility",
      val: 5,
      vars(r) {
        let element = "fire";
        switch (global.city.biome || "grassland") {
          case "savanna":
          case "forest":
          case "swamp":
            element = "acid";
            break;
          case "grassland":
          case "desert":
          case "eden":
            element = "electric";
            break;
          case "oceanic":
          case "tundra":
          case "taiga":
            element = "frost";
            break;
          case "volcanic":
          case "ashland":
          case "hellscape":
            element = "fire";
            break;
        }
        switch (r || traitRank("elemental") || 1) {
          case 0.1:
            return [element, 0.08, 0.01, 0.02, 5e-3, 1];
          case 0.25:
            return [element, 0.12, 0.02, 0.03, 0.01, 2];
          case 0.5:
            return [element, 0.16, 0.04, 0.06, 0.02, 4];
          case 1:
            return [element, 0.2, 0.06, 0.09, 0.03, 6];
          case 2:
            return [element, 0.23, 0.08, 0.12, 0.04, 8];
          case 3:
            return [element, 0.26, 0.1, 0.15, 0.05, 10];
          case 4:
            return [element, 0.28, 0.12, 0.18, 0.06, 12];
        }
      }
    },
    chicken: {
      name: loc("trait_chicken_name"),
      desc: loc("trait_chicken"),
      type: "major",
      origin: "wyvern",
      taxonomy: "combat",
      val: -8,
      vars(r) {
        switch (r || traitRank("chicken") || 1) {
          case 0.1:
            return [110, 20];
          case 0.25:
            return [100, 18];
          case 0.5:
            return [75, 15];
          case 1:
            return [50, 12];
          case 2:
            return [40, 9];
          case 3:
            return [30, 6];
          case 4:
            return [20, 3];
        }
      }
    },
    tusk: {
      name: loc("trait_tusk_name"),
      desc: loc("trait_tusk"),
      type: "major",
      origin: "narwhal",
      taxonomy: "resource",
      val: 6,
      vars(r) {
        let moisture = 0;
        switch (global.city.biome || "grassland") {
          case "oceanic":
          case "swamp":
            moisture = 30;
            break;
          case "eden":
          case "forest":
          case "grassland":
          case "savanna":
            moisture = 20;
            break;
          case "tundra":
          case "taiga":
            moisture = 10;
            break;
          case "desert":
          case "volcanic":
          case "ashland":
          case "hellscape":
            moisture = 0;
            break;
        }
        if (global.city.calendar.weather === 0 && global.city.calendar.temp > 0) {
          moisture += 10;
        }
        switch (r || traitRank("tusk") || 1) {
          case 0.1:
            return [80, Math.round(moisture * 0.4)];
          case 0.25:
            return [100, Math.round(moisture * 0.5)];
          case 0.5:
            return [130, Math.round(moisture * 0.75)];
          case 1:
            return [160, Math.round(moisture * 1)];
          case 2:
            return [190, Math.round(moisture * 1.2)];
          case 3:
            return [220, Math.round(moisture * 1.4)];
          case 4:
            return [250, Math.round(moisture * 1.6)];
        }
      }
    },
    blubber: {
      name: loc("trait_blubber_name"),
      desc: loc("trait_blubber"),
      type: "major",
      origin: "narwhal",
      taxonomy: "resource",
      val: -3,
      vars(r) {
        switch (r || traitRank("blubber") || 1) {
          case 0.1:
            return [2.5];
          case 0.25:
            return [2];
          case 0.5:
            return [1.5];
          case 1:
            return [1];
          case 2:
            return [0.75];
          case 3:
            return [0.5];
          case 4:
            return [0.25];
        }
      }
    },
    ocular_power: {
      name: loc("trait_ocular_power_name"),
      desc: loc("trait_ocular_power"),
      type: "major",
      origin: "beholder",
      taxonomy: "utility",
      val: 9,
      vars(r) {
        switch (r || traitRank("ocular_power") || 1) {
          case 0.1:
            return [1, 10];
          case 0.25:
            return [1, 25];
          case 0.5:
            return [1, 50];
          case 1:
            return [2, 75];
          case 2:
            return [2, 100];
          case 3:
            return [3, 125];
          case 4:
            return [3, 150];
        }
      }
    },
    floating: {
      name: loc("trait_floating_name"),
      desc: loc("trait_floating"),
      type: "major",
      origin: "beholder",
      taxonomy: "production",
      val: -3,
      vars(r) {
        switch (r || traitRank("floating") || 1) {
          case 0.1:
            return [16];
          case 0.25:
            return [14];
          case 0.5:
            return [12];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    wish: {
      name: loc("trait_wish_name"),
      desc: loc("trait_wish"),
      type: "major",
      origin: "djinn",
      taxonomy: "utility",
      val: 13,
      vars(r) {
        switch (r || traitRank("wish") || 1) {
          case 0.1:
            return [2520];
          case 0.25:
            return [2160];
          case 0.5:
            return [1800];
          case 1:
            return [1440];
          case 2:
            return [1080];
          case 3:
            return [720];
          case 4:
            return [540];
        }
      }
    },
    devious: {
      name: loc("trait_devious_name"),
      desc: loc("trait_devious"),
      type: "major",
      origin: "djinn",
      taxonomy: "resource",
      val: -4,
      vars(r) {
        switch (r || traitRank("devious") || 1) {
          case 0.1:
            return [35];
          case 0.25:
            return [30];
          case 0.5:
            return [25];
          case 1:
            return [20];
          case 2:
            return [15];
          case 3:
            return [10];
          case 4:
            return [8];
        }
      }
    },
    grenadier: {
      name: loc("trait_grenadier_name"),
      desc: loc("trait_grenadier"),
      type: "major",
      origin: "bombardier",
      taxonomy: "combat",
      val: 6,
      vars(r) {
        switch (r || traitRank("grenadier") || 1) {
          case 0.1:
            return [100];
          case 0.25:
            return [110];
          case 0.5:
            return [125];
          case 1:
            return [150];
          case 2:
            return [175];
          case 3:
            return [200];
          case 4:
            return [225];
        }
      }
    },
    aggressive: {
      name: loc("trait_aggressive_name"),
      desc: loc("trait_aggressive"),
      type: "major",
      origin: "bombardier",
      taxonomy: "combat",
      val: -2,
      vars(r) {
        switch (r || traitRank("aggressive") || 1) {
          case 0.1:
            return [35, 14];
          case 0.25:
            return [30, 12];
          case 0.5:
            return [25, 10];
          case 1:
            return [20, 8];
          case 2:
            return [15, 6];
          case 3:
            return [10, 4];
          case 4:
            return [5, 2];
        }
      }
    },
    empowered: {
      name: loc("trait_empowered_name"),
      desc: loc("trait_empowered"),
      type: "major",
      origin: "nephilim",
      taxonomy: "utility",
      val: 8,
      vars(r) {
        switch (r || traitRank("empowered") || 1) {
          case 0.1:
            return [-1, 2];
          case 0.25:
            return [-2, 3];
          case 0.5:
            return [-3, 4];
          case 1:
            return [-4, 6];
          case 2:
            return [-6, 9];
          case 3:
            return [-8, 12];
          case 4:
            return [-99, 99];
        }
      }
    },
    blasphemous: {
      name: loc("trait_blasphemous_name"),
      desc: loc("trait_blasphemous"),
      type: "major",
      origin: "nephilim",
      taxonomy: "production",
      val: -5,
      vars(r) {
        switch (r || traitRank("blasphemous") || 1) {
          case 0.1:
            return [25];
          case 0.25:
            return [20];
          case 0.5:
            return [15];
          case 1:
            return [10];
          case 2:
            return [8];
          case 3:
            return [6];
          case 4:
            return [4];
        }
      }
    },
    ooze: {
      // you are some kind of ooze, everything is bad
      name: loc("trait_ooze_name"),
      desc: loc("trait_ooze"),
      type: "major",
      origin: "sludge",
      taxonomy: "production",
      val: -50,
      vars(r) {
        switch (r || traitRank("ooze") || 1) {
          case 0.1:
            return [25, 30, 50];
          case 0.25:
            return [20, 25, 40];
          case 0.5:
            return [15, 20, 35];
          case 1:
            return [12, 15, 30];
          case 2:
            return [10, 12, 25];
          case 3:
            return [8, 10, 20];
          case 4:
            return [6, 8, 18];
        }
      }
    },
    soul_eater: {
      // You eat souls for breakfast, lunch, and dinner
      name: loc("trait_soul_eater_name"),
      desc: loc("trait_soul_eater"),
      type: "special",
      val: 0
    },
    untapped: {
      // Untapped Potential
      name: loc("trait_untapped_name"),
      desc: loc("trait_untapped"),
      type: "special",
      val: 0
    },
    emfield: {
      // Your body produces a natural electromagnetic field that disrupts electriciy
      name: loc("trait_emfield_name"),
      desc: loc("trait_emfield"),
      type: "special",
      val: -20
    },
    tactical: {
      // War Bonus
      name: loc("trait_tactical_name"),
      desc: loc("trait_tactical"),
      type: "minor",
      vars(r) {
        return [5];
      }
    },
    analytical: {
      // Science Bonus
      name: loc("trait_analytical_name"),
      desc: loc("trait_analytical"),
      type: "minor",
      vars(r) {
        return [1];
      }
    },
    promiscuous: {
      // Organics Growth Bonus, Synths Population Discount
      name: loc("trait_promiscuous_name"),
      desc: loc("trait_promiscuous"),
      type: "minor",
      vars(r) {
        return [1, 0.02];
      }
    },
    resilient: {
      // Coal Mining Bonus
      name: loc("trait_resilient_name"),
      desc: loc("trait_resilient"),
      type: "minor",
      vars(r) {
        return [2];
      }
    },
    cunning: {
      // Hunting Bonus
      name: loc("trait_cunning_name"),
      desc: loc("trait_cunning"),
      type: "minor",
      vars(r) {
        return [5];
      }
    },
    hardy: {
      // Factory Woker Bonus
      name: loc("trait_hardy_name"),
      desc: loc("trait_hardy"),
      type: "minor",
      vars(r) {
        return [1];
      }
    },
    ambidextrous: {
      // Crafting Bonus
      name: loc("trait_ambidextrous_name"),
      desc: loc("trait_ambidextrous"),
      type: "minor",
      vars(r) {
        return [3, 2];
      }
    },
    industrious: {
      // Miner Bonus
      name: loc("trait_industrious_name"),
      desc: loc("trait_industrious"),
      type: "minor",
      vars(r) {
        return [2];
      }
    },
    content: {
      // Morale Bonus
      name: loc("trait_content_name"),
      desc: loc("trait_content"),
      type: "minor"
    },
    fibroblast: {
      // Healing Bonus
      name: loc("trait_fibroblast_name"),
      desc: loc("trait_fibroblast"),
      type: "minor",
      vars(r) {
        return [2];
      }
    },
    metallurgist: {
      // Alloy bonus
      name: loc("trait_metallurgist_name"),
      desc: loc("trait_metallurgist"),
      type: "minor",
      vars(r) {
        return [4];
      }
    },
    gambler: {
      // Casino bonus
      name: loc("trait_gambler_name"),
      desc: loc("trait_gambler"),
      type: "minor",
      vars(r) {
        return [4];
      }
    },
    persuasive: {
      // Trade bonus
      name: loc("trait_persuasive_name"),
      desc: loc("trait_persuasive"),
      type: "minor",
      vars(r) {
        return [1];
      }
    },
    fortify: {
      // gene fortification
      name: loc("trait_fortify_name"),
      desc: loc("trait_fortify"),
      type: "special"
    },
    mastery: {
      // mastery booster
      name: loc("trait_mastery_name"),
      desc: loc("trait_mastery"),
      type: "special",
      vars(r) {
        return [1];
      }
    }
  };
  var races = {
    protoplasm: {
      name: loc("race_protoplasm"),
      desc: loc("race_protoplasm_desc"),
      type: "organism",
      home: loc("race_prehistoric"),
      entity: loc("race_protoplasm_entity"),
      traits: {},
      solar: {
        red: loc("race_human_solar_red"),
        hell: loc("race_human_solar_hell"),
        gas: loc("race_human_solar_gas"),
        gas_moon: loc("race_human_solar_gas_moon"),
        dwarf: loc("race_human_solar_dwarf")
      },
      fanaticism: "none",
      basic() {
        return false;
      }
    },
    human: {
      name: loc(altRace("human") ? "race_zombie" : "race_human"),
      desc: loc(altRace("human") ? "race_zombie_desc" : "race_human_desc"),
      type: "humanoid",
      home: loc("race_human_home"),
      entity: loc("race_human_entity"),
      traits: {
        creative: 1,
        diverse: 1
      },
      solar: {
        red: loc(altRace("human") ? "race_zombie_solar_red" : "race_human_solar_red"),
        hell: loc(altRace("human") ? "race_zombie_solar_hell" : "race_human_solar_hell"),
        gas: loc(altRace("human") ? "race_zombie_solar_gas" : "race_human_solar_gas"),
        gas_moon: loc(altRace("human") ? "race_zombie_solar_gas_moon" : "race_human_solar_gas_moon"),
        dwarf: loc(altRace("human") ? "race_zombie_solar_dwarf" : "race_human_solar_dwarf")
      },
      fanaticism: "creative",
      basic() {
        return true;
      }
    },
    elven: {
      name: loc("race_elven"),
      desc: loc(altRace("elven") ? "race_xmas_elf_desc" : "race_elven_desc"),
      type: "humanoid",
      home: loc(altRace("elven") ? "race_xmas_elf_home" : "race_elven_home"),
      entity: altRace("elven") ? loc("race_xmas_elf_entity") : loc("race_elven_entity"),
      traits: {
        studious: 1,
        arrogant: 1
      },
      solar: {
        red: loc(altRace("elven") ? "race_xmas_elf_solar_red" : "race_elven_solar_red"),
        hell: loc(altRace("elven") ? "race_xmas_elf_solar_hell" : "race_elven_solar_hell"),
        gas: loc(altRace("elven") ? "race_xmas_elf_solar_gas" : "race_elven_solar_gas"),
        gas_moon: loc(altRace("elven") ? "race_xmas_elf_solar_gas_moon" : "race_elven_solar_gas_moon"),
        dwarf: loc(altRace("elven") ? "race_xmas_elf_solar_dwarf" : "race_elven_solar_dwarf")
      },
      fanaticism: "studious",
      basic() {
        return true;
      }
    },
    orc: {
      name: loc("race_orc"),
      desc: loc("race_orc_desc"),
      type: "humanoid",
      home: loc("race_orc_home"),
      entity: loc("race_orc_entity"),
      traits: {
        brute: 1,
        angry: 1
      },
      solar: {
        red: loc("race_orc_solar_red"),
        hell: loc("race_orc_solar_hell"),
        gas: loc("race_orc_solar_gas"),
        gas_moon: loc("race_orc_solar_gas_moon"),
        dwarf: loc("race_orc_solar_dwarf")
      },
      fanaticism: "brute",
      basic() {
        return true;
      }
    },
    cath: {
      name: loc("race_cath"),
      desc: loc("race_cath_desc"),
      type: "carnivore",
      home: loc("race_cath_home"),
      entity: loc("race_cath_entity"),
      traits: {
        lazy: 1,
        curious: 1
      },
      solar: {
        red: loc("race_cath_solar_red"),
        hell: loc("race_cath_solar_hell"),
        gas: loc("race_cath_solar_gas"),
        gas_moon: loc("race_cath_solar_gas_moon"),
        dwarf: loc("race_cath_solar_dwarf")
      },
      fanaticism: "curious",
      basic() {
        return true;
      }
    },
    wolven: {
      name: altRace("wolven") ? loc("race_rabbit") : loc("race_wolven"),
      desc: altRace("wolven") ? loc("race_rabbit_desc") : loc("race_wolven_desc"),
      type: "carnivore",
      home: altRace("wolven") ? loc("race_rabbit_home") : loc("race_wolven_home"),
      entity: altRace("wolven") ? loc("race_rabbit_entity") : loc("race_wolven_entity"),
      traits: {
        pack_mentality: 1,
        tracker: 1
      },
      solar: {
        red: altRace("wolven") ? loc("race_rabbit_solar_red") : loc("race_wolven_solar_red"),
        hell: altRace("wolven") ? loc("race_rabbit_solar_hell") : loc("race_wolven_solar_hell"),
        gas: altRace("wolven") ? loc("race_rabbit_solar_gas") : loc("race_wolven_solar_gas"),
        gas_moon: altRace("wolven") ? loc("race_rabbit_solar_gas_moon") : loc("race_wolven_solar_gas_moon"),
        dwarf: altRace("wolven") ? loc("race_rabbit_solar_dwarf") : loc("race_wolven_solar_dwarf")
      },
      fanaticism: "tracker",
      basic() {
        return true;
      }
    },
    vulpine: {
      name: altRace("vulpine") ? loc("race_chocolate_rabbit") : loc(global.race.universe === "magic" ? "race_kitsune" : "race_vulpine"),
      desc() {
        return altRace("vulpine") ? loc("race_chocolate_rabbit_desc") : loc("race_vulpine_desc", [loc(global.race.universe === "magic" ? "race_kitsune" : "race_vulpine"), foxColor()]);
      },
      type: "carnivore",
      home: altRace("vulpine") ? loc("race_chocolate_rabbit_home") : loc("race_vulpine_home"),
      entity: altRace("vulpine") ? loc("race_chocolate_rabbit_entity") : loc("race_vulpine_entity"),
      traits: {
        playful: 1,
        freespirit: 1
      },
      solar: {
        red: altRace("vulpine") ? loc("race_chocolate_rabbit_solar_red") : loc("race_vulpine_solar_red"),
        hell: altRace("vulpine") ? loc("race_chocolate_rabbit_solar_hell") : loc("race_vulpine_solar_hell"),
        gas: altRace("vulpine") ? loc("race_chocolate_rabbit_solar_gas") : loc("race_vulpine_solar_gas"),
        gas_moon: altRace("vulpine") ? loc("race_chocolate_rabbit_solar_gas_moon") : loc("race_vulpine_solar_gas_moon"),
        dwarf: altRace("vulpine") ? loc("race_chocolate_rabbit_solar_dwarf") : loc("race_vulpine_solar_dwarf")
      },
      fanaticism: "playful",
      basic() {
        return true;
      }
    },
    centaur: {
      name: loc(altRace("centaur") ? "race_reindeer" : "race_centaur"),
      desc: loc(altRace("centaur") ? "race_reindeer_desc" : "race_centaur_desc"),
      type: "herbivore",
      home: loc(altRace("centaur") ? "race_reindeer_home" : "race_centaur_home"),
      entity: loc(altRace("centaur") ? "race_reindeer_entity" : "race_centaur_entity"),
      traits: {
        sniper: 1,
        hooved: 1
      },
      solar: {
        red: loc(altRace("centaur") ? "race_reindeer_solar_red" : "race_centaur_solar_red"),
        hell: loc(altRace("centaur") ? "race_reindeer_solar_hell" : "race_centaur_solar_hell"),
        gas: loc(altRace("centaur") ? "race_reindeer_solar_gas" : "race_centaur_solar_gas"),
        gas_moon: loc(altRace("centaur") ? "race_reindeer_solar_gas_moon" : "race_centaur_solar_gas_moon"),
        dwarf: loc(altRace("centaur") ? "race_reindeer_solar_dwarf" : "race_centaur_solar_dwarf")
      },
      fanaticism: "sniper",
      basic() {
        return true;
      }
    },
    rhinotaur: {
      name: loc("race_rhinotaur"),
      desc: loc("race_rhinotaur_desc"),
      type: "herbivore",
      home: loc("race_rhinotaur_home"),
      entity: loc("race_rhinotaur_entity"),
      traits: {
        rage: 1,
        heavy: 1
      },
      solar: {
        red: loc("race_rhinotaur_solar_red"),
        hell: loc("race_rhinotaur_solar_hell"),
        gas: loc("race_rhinotaur_solar_gas"),
        gas_moon: loc("race_rhinotaur_solar_gas_moon"),
        dwarf: loc("race_rhinotaur_solar_dwarf")
      },
      fanaticism: "rage",
      basic() {
        return true;
      }
    },
    capybara: {
      name: loc(altRace("capybara") ? "race_donkey" : "race_capybara"),
      desc: loc(altRace("capybara") ? "race_donkey_desc" : "race_capybara_desc"),
      type: "herbivore",
      home: loc(altRace("capybara") ? "race_donkey_home" : "race_capybara_home"),
      entity: loc(altRace("capybara") ? "race_donkey_entity" : "race_capybara_entity"),
      traits: {
        gnawer: 1,
        calm: 1
      },
      solar: {
        red: loc(altRace("capybara") ? "race_donkey_solar_red" : "race_capybara_solar_red"),
        hell: loc(altRace("capybara") ? "race_donkey_solar_hell" : "race_capybara_solar_hell"),
        gas: loc(altRace("capybara") ? "race_donkey_solar_gas" : "race_capybara_solar_gas"),
        gas_moon: loc(altRace("capybara") ? "race_donkey_solar_gas_moon" : "race_capybara_solar_gas_moon"),
        dwarf: loc(altRace("capybara") ? "race_donkey_solar_dwarf" : "race_capybara_solar_dwarf")
      },
      fanaticism: "calm",
      basic() {
        return true;
      }
    },
    /*bearkin: {
        name: loc('race_bearkin'),
        desc: loc('race_bearkin_desc'),
        type: 'omnivore',
        home: loc('race_bearkin_home'),
        entity: loc('race_bearkin_entity'),
        traits: {
            
        },
        solar: {
            red: loc('race_bearkin_solar_red'),
            hell: loc('race_bearkin_solar_hell'),
            gas: loc('race_bearkin_solar_gas'),
            gas_moon: loc('race_bearkin_solar_gas_moon'),
            dwarf: loc('race_bearkin_solar_dwarf'),
        },
        fanaticism: '',
        basic(){ return true; }
    },
    porkenari: {
        name: loc('race_porkenari'),
        desc: loc('race_porkenari_desc'),
        type: 'omnivore',
        home: loc('race_porkenari_home'),
        entity: loc('race_porkenari_entity'),
        traits: {
            
        },
        solar: {
            red: loc('race_porkenari_solar_red'),
            hell: loc('race_porkenari_solar_hell'),
            gas: loc('race_porkenari_solar_gas'),
            gas_moon: loc('race_porkenari_solar_gas_moon'),
            dwarf: loc('race_porkenari_solar_dwarf'),
        },
        fanaticism: '',
        basic(){ return true; }
    },
    hedgeoken: {
        name: loc('race_hedgeoken'),
        desc: loc('race_hedgeoken_desc'),
        type: 'omnivore',
        home: loc('race_hedgeoken_home'),
        entity: loc('race_hedgeoken_entity'),
        traits: {
            
        },
        solar: {
            red: loc('race_hedgeoken_solar_red'),
            hell: loc('race_hedgeoken_solar_hell'),
            gas: loc('race_hedgeoken_solar_gas'),
            gas_moon: loc('race_hedgeoken_solar_gas_moon'),
            dwarf: loc('race_hedgeoken_solar_dwarf'),
        },
        fanaticism: '',
        basic(){ return true; }
    },*/
    kobold: {
      name: loc("race_kobold"),
      desc: loc("race_kobold_desc"),
      type: "small",
      home: loc("race_kobold_home"),
      entity: loc("race_kobold_entity"),
      traits: {
        pack_rat: 1,
        paranoid: 1
      },
      solar: {
        red: loc("race_kobold_solar_red"),
        hell: loc("race_kobold_solar_hell"),
        gas: loc("race_kobold_solar_gas"),
        gas_moon: loc("race_kobold_solar_gas_moon"),
        dwarf: loc("race_kobold_solar_dwarf")
      },
      fanaticism: "pack_rat",
      basic() {
        return true;
      }
    },
    goblin: {
      name: loc("race_goblin"),
      desc: loc("race_goblin_desc"),
      type: "small",
      home: loc("race_goblin_home"),
      entity: loc("race_goblin_entity"),
      traits: {
        greedy: 1,
        merchant: 1
      },
      solar: {
        red: loc("race_goblin_solar_red"),
        hell: loc("race_goblin_solar_hell"),
        gas: loc("race_goblin_solar_gas"),
        gas_moon: loc("race_goblin_solar_gas_moon"),
        dwarf: loc("race_goblin_solar_dwarf")
      },
      fanaticism: "merchant",
      basic() {
        return true;
      }
    },
    gnome: {
      name: loc("race_gnome"),
      desc: loc("race_gnome_desc"),
      type: "small",
      home: loc("race_gnome_home"),
      entity: loc("race_gnome_entity"),
      traits: {
        smart: 1,
        puny: 1
      },
      solar: {
        red: loc("race_gnome_solar_red"),
        hell: loc("race_gnome_solar_hell"),
        gas: loc("race_gnome_solar_gas"),
        gas_moon: loc("race_gnome_solar_gas_moon"),
        dwarf: loc("race_gnome_solar_dwarf")
      },
      fanaticism: "smart",
      basic() {
        return true;
      }
    },
    ogre: {
      name: loc("race_ogre"),
      desc: loc("race_ogre_desc"),
      type: "giant",
      home: loc("race_ogre_home"),
      entity: loc("race_ogre_entity"),
      traits: {
        dumb: 1,
        tough: 1
      },
      solar: {
        red: loc("race_ogre_solar_red"),
        hell: loc("race_ogre_solar_hell"),
        gas: loc("race_ogre_solar_gas"),
        gas_moon: loc("race_ogre_solar_gas_moon"),
        dwarf: loc("race_ogre_solar_dwarf")
      },
      fanaticism: "tough",
      basic() {
        return true;
      }
    },
    cyclops: {
      name: loc("race_cyclops"),
      desc: loc("race_cyclops_desc"),
      type: "giant",
      home: loc("race_cyclops_home"),
      entity: loc("race_cyclops_entity"),
      traits: {
        nearsighted: 1,
        intelligent: 1
      },
      solar: {
        red: loc("race_cyclops_solar_red"),
        hell: loc("race_cyclops_solar_hell"),
        gas: loc("race_cyclops_solar_gas"),
        gas_moon: loc("race_cyclops_solar_gas_moon"),
        dwarf: loc("race_cyclops_solar_dwarf")
      },
      fanaticism: "intelligent",
      basic() {
        return true;
      }
    },
    troll: {
      name: loc("race_troll"),
      desc: loc("race_troll_desc"),
      type: "giant",
      home: loc("race_troll_home"),
      entity: loc("race_troll_entity"),
      traits: {
        regenerative: 1,
        gluttony: 1
      },
      solar: {
        red: loc("race_troll_solar_red"),
        hell: loc("race_troll_solar_hell"),
        gas: loc("race_troll_solar_gas"),
        gas_moon: loc("race_troll_solar_gas_moon"),
        dwarf: loc("race_troll_solar_dwarf")
      },
      fanaticism: "regenerative",
      basic() {
        return true;
      }
    },
    tortoisan: {
      name: loc(altRace("tortoisan") ? "race_ninja_turtle" : "race_tortoisan"),
      desc() {
        return altRace("tortoisan") ? loc("race_ninja_turtle_desc", [shellColor()]) : loc("race_tortoisan_desc", [shellColor()]);
      },
      type: "reptilian",
      home: loc(altRace("tortoisan") ? "race_ninja_turtle_home" : "race_tortoisan_home"),
      entity: loc(altRace("tortoisan") ? "race_ninja_turtle_entity" : "race_tortoisan_entity"),
      traits: {
        slow: 1,
        armored: 1
      },
      solar: {
        red: loc(altRace("tortoisan") ? "race_ninja_turtle_solar_red" : "race_tortoisan_solar_red"),
        hell: loc(altRace("tortoisan") ? "race_ninja_turtle_solar_hell" : "race_tortoisan_solar_hell"),
        gas: loc(altRace("tortoisan") ? "race_ninja_turtle_solar_gas" : "race_tortoisan_solar_gas"),
        gas_moon: loc(altRace("tortoisan") ? "race_ninja_turtle_solar_gas_moon" : "race_tortoisan_solar_gas_moon"),
        dwarf: loc(altRace("tortoisan") ? "race_ninja_turtle_solar_dwarf" : "race_tortoisan_solar_dwarf")
      },
      fanaticism: "armored",
      basic() {
        return true;
      }
    },
    gecko: {
      name: loc("race_gecko"),
      desc: loc("race_gecko_desc"),
      type: "reptilian",
      home: loc("race_gecko_home"),
      entity: loc("race_gecko_entity"),
      traits: {
        optimistic: 1,
        chameleon: 1
      },
      solar: {
        red: loc("race_gecko_solar_red"),
        hell: loc("race_gecko_solar_hell"),
        gas: loc("race_gecko_solar_gas"),
        gas_moon: loc("race_gecko_solar_gas_moon"),
        dwarf: loc("race_gecko_solar_dwarf")
      },
      fanaticism: "optimistic",
      basic() {
        return true;
      }
    },
    slitheryn: {
      name: loc("race_slitheryn"),
      desc: loc("race_slitheryn_desc"),
      type: "reptilian",
      home: loc("race_slitheryn_home"),
      entity: loc("race_slitheryn_entity"),
      traits: {
        astrologer: 1,
        hard_of_hearing: 1,
        slow_digestion: 1
      },
      solar: {
        red: loc("race_slitheryn_solar_red"),
        hell: loc("race_slitheryn_solar_hell"),
        gas: loc("race_slitheryn_solar_gas"),
        gas_moon: loc("race_slitheryn_solar_gas_moon"),
        dwarf: loc("race_slitheryn_solar_dwarf")
      },
      fanaticism: "astrologer",
      basic() {
        return true;
      }
    },
    arraak: {
      name: loc(altRace("arraak") ? "race_turkey" : "race_arraak"),
      desc: loc(altRace("arraak") ? "race_turkey_desc" : "race_arraak_desc"),
      type: "avian",
      home: loc(altRace("arraak") ? "race_turkey_home" : "race_arraak_home"),
      entity: altRace("arraak") ? loc("race_turkey_entity") : loc("race_arraak_entity"),
      traits: {
        resourceful: 1,
        selenophobia: 1
      },
      solar: {
        red: loc(altRace("arraak") ? "race_turkey_solar_red" : "race_arraak_solar_red"),
        hell: loc(altRace("arraak") ? "race_turkey_solar_hell" : "race_arraak_solar_hell"),
        gas: loc(altRace("arraak") ? "race_turkey_solar_gas" : "race_arraak_solar_gas"),
        gas_moon: loc(altRace("arraak") ? "race_turkey_solar_gas_moon" : "race_arraak_solar_gas_moon"),
        dwarf: loc(altRace("arraak") ? "race_turkey_solar_dwarf" : "race_arraak_solar_dwarf")
      },
      fanaticism: "resourceful",
      basic() {
        return true;
      }
    },
    pterodacti: {
      name: loc("race_pterodacti"),
      desc: loc("race_pterodacti_desc"),
      type: "avian",
      home: loc("race_pterodacti_home"),
      entity: loc("race_pterodacti_entity"),
      traits: {
        leathery: 1,
        pessimistic: 1
      },
      solar: {
        red: loc("race_pterodacti_solar_red"),
        hell: loc("race_pterodacti_solar_hell"),
        gas: loc("race_pterodacti_solar_gas"),
        gas_moon: loc("race_pterodacti_solar_gas_moon"),
        dwarf: loc("race_pterodacti_solar_dwarf")
      },
      fanaticism: "leathery",
      basic() {
        return true;
      }
    },
    dracnid: {
      name: loc("race_dracnid"),
      desc: loc("race_dracnid_desc"),
      type: "avian",
      home: loc("race_dracnid_home"),
      entity: loc("race_dracnid_entity"),
      traits: {
        hoarder: 1,
        solitary: 1
      },
      solar: {
        red: loc("race_dracnid_solar_red"),
        hell: loc("race_dracnid_solar_hell"),
        gas: loc("race_dracnid_solar_gas"),
        gas_moon: loc("race_dracnid_solar_gas_moon"),
        dwarf: loc("race_dracnid_solar_dwarf")
      },
      fanaticism: "hoarder",
      basic() {
        return true;
      }
    },
    entish: {
      name: loc(altRace("entish") ? "race_spruce" : "race_entish"),
      desc: loc(altRace("entish") ? "race_spruce_desc" : "race_entish_desc"),
      type: "plant",
      home: loc(altRace("entish") ? "race_spruce_home" : "race_entish_home"),
      entity: loc(altRace("entish") ? "race_spruce_entity" : "race_entish_entity"),
      traits: {
        kindling_kindred: 1,
        pyrophobia: 1,
        catnip: 1
      },
      solar: {
        red: loc(altRace("entish") ? "race_spruce_solar_red" : "race_entish_solar_red"),
        hell: loc(altRace("entish") ? "race_spruce_solar_hell" : "race_entish_solar_hell"),
        gas: loc(altRace("entish") ? "race_spruce_solar_gas" : "race_entish_solar_gas"),
        gas_moon: loc(altRace("entish") ? "race_spruce_solar_gas_moon" : "race_entish_solar_gas_moon"),
        dwarf: loc(altRace("entish") ? "race_spruce_solar_dwarf" : "race_entish_solar_dwarf")
      },
      fanaticism: "kindling_kindred",
      basic() {
        return true;
      }
    },
    cacti: {
      name: loc("race_cacti"),
      desc: loc("race_cacti_desc"),
      type: "plant",
      home: loc("race_cacti_home"),
      entity: loc("race_cacti_entity"),
      traits: {
        hyper: 1,
        skittish: 1
      },
      solar: {
        red: loc("race_cacti_solar_red"),
        hell: loc("race_cacti_solar_hell"),
        gas: loc("race_cacti_solar_gas"),
        gas_moon: loc("race_cacti_solar_gas_moon"),
        dwarf: loc("race_cacti_solar_dwarf")
      },
      fanaticism: "hyper",
      basic() {
        return true;
      }
    },
    pinguicula: {
      name: loc("race_pinguicula"),
      desc: loc("race_pinguicula_desc"),
      type: "plant",
      home: loc("race_pinguicula_home"),
      entity: loc("race_pinguicula_entity"),
      traits: {
        fragrant: 1,
        sticky: 1,
        anise: 1
      },
      solar: {
        red: loc("race_pinguicula_solar_red"),
        hell: loc("race_pinguicula_solar_hell"),
        gas: loc("race_pinguicula_solar_gas"),
        gas_moon: loc("race_pinguicula_solar_gas_moon"),
        dwarf: loc("race_pinguicula_solar_dwarf")
      },
      fanaticism: "sticky",
      basic() {
        return true;
      }
    },
    sporgar: {
      name: loc("race_sporgar"),
      desc: loc("race_sporgar_desc"),
      type: "fungi",
      home: loc("race_sporgar_home"),
      entity: loc("race_sporgar_entity"),
      traits: {
        infectious: 1,
        parasite: 1
      },
      solar: {
        red: loc("race_sporgar_solar_red"),
        hell: loc("race_sporgar_solar_hell"),
        gas: loc("race_sporgar_solar_gas"),
        gas_moon: loc("race_sporgar_solar_gas_moon"),
        dwarf: loc("race_sporgar_solar_dwarf")
      },
      fanaticism: "infectious",
      basic() {
        return false;
      }
    },
    shroomi: {
      name: loc("race_shroomi"),
      desc: loc("race_shroomi_desc"),
      type: "fungi",
      home: loc("race_shroomi_home"),
      entity: loc("race_shroomi_entity"),
      traits: {
        toxic: 1,
        nyctophilia: 1
      },
      solar: {
        red: loc("race_shroomi_solar_red"),
        hell: loc("race_shroomi_solar_hell"),
        gas: loc("race_shroomi_solar_gas"),
        gas_moon: loc("race_shroomi_solar_gas_moon"),
        dwarf: loc("race_shroomi_solar_dwarf")
      },
      fanaticism: "toxic",
      basic() {
        return true;
      }
    },
    moldling: {
      name: loc("race_moldling"),
      desc: loc("race_moldling_desc"),
      type: "fungi",
      home: loc("race_moldling_home"),
      entity: loc("race_moldling_entity"),
      traits: {
        infiltrator: 1,
        hibernator: 1
      },
      solar: {
        red: loc("race_moldling_solar_red"),
        hell: loc("race_moldling_solar_hell"),
        gas: loc("race_moldling_solar_gas"),
        gas_moon: loc("race_moldling_solar_gas_moon"),
        dwarf: loc("race_moldling_solar_dwarf")
      },
      fanaticism: "infiltrator",
      basic() {
        return true;
      }
    },
    mantis: {
      name: loc("race_mantis"),
      desc: loc("race_mantis_desc"),
      type: "insectoid",
      home: loc("race_mantis_home"),
      entity: loc("race_mantis_entity"),
      traits: {
        cannibalize: 1,
        malnutrition: 1
      },
      solar: {
        red: loc("race_mantis_solar_red"),
        hell: loc("race_mantis_solar_hell"),
        gas: loc("race_mantis_solar_gas"),
        gas_moon: loc("race_mantis_solar_gas_moon"),
        dwarf: loc("race_mantis_solar_dwarf")
      },
      fanaticism: "cannibalize",
      basic() {
        return true;
      }
    },
    scorpid: {
      name: loc("race_scorpid"),
      desc: loc("race_scorpid_desc"),
      type: "insectoid",
      home: loc("race_scorpid_home"),
      entity: loc("race_scorpid_entity"),
      traits: {
        claws: 1,
        atrophy: 1
      },
      solar: {
        red: loc("race_scorpid_solar_red"),
        hell: loc("race_scorpid_solar_hell"),
        gas: loc("race_scorpid_solar_gas"),
        gas_moon: loc("race_scorpid_solar_gas_moon"),
        dwarf: loc("race_scorpid_solar_dwarf")
      },
      fanaticism: "claws",
      basic() {
        return true;
      }
    },
    antid: {
      name: loc("race_antid"),
      desc: loc("race_antid_desc"),
      type: "insectoid",
      home: loc("race_antid_home"),
      entity: loc("race_antid_entity"),
      traits: {
        hivemind: 1,
        tunneler: 1
      },
      solar: {
        red: loc("race_antid_solar_red"),
        hell: loc("race_antid_solar_hell"),
        gas: loc("race_antid_solar_gas"),
        gas_moon: loc("race_antid_solar_gas_moon"),
        dwarf: loc("race_antid_solar_dwarf")
      },
      fanaticism: "hivemind",
      basic() {
        return true;
      }
    },
    sharkin: {
      name: loc("race_sharkin"),
      desc: loc("race_sharkin_desc"),
      type: "aquatic",
      home: loc("race_sharkin_home"),
      entity: loc("race_sharkin_entity"),
      traits: {
        blood_thirst: 1,
        apex_predator: 1
      },
      solar: {
        red: loc("race_sharkin_solar_red"),
        hell: loc("race_sharkin_solar_hell"),
        gas: loc("race_sharkin_solar_gas"),
        gas_moon: loc("race_sharkin_solar_gas_moon"),
        dwarf: loc("race_sharkin_solar_dwarf")
      },
      fanaticism: "blood_thirst",
      basic() {
        return ["oceanic", "swamp"].includes(global.city.biome) ? true : false;
      }
    },
    octigoran: {
      name: loc("race_octigoran"),
      desc: loc("race_octigoran_desc"),
      type: "aquatic",
      home: loc("race_octigoran_home"),
      entity: loc("race_octigoran_entity"),
      traits: {
        invertebrate: 1,
        suction_grip: 1
      },
      solar: {
        red: loc("race_octigoran_solar_red"),
        hell: loc("race_octigoran_solar_hell"),
        gas: loc("race_octigoran_solar_gas"),
        gas_moon: loc("race_octigoran_solar_gas_moon"),
        dwarf: loc("race_octigoran_solar_dwarf")
      },
      fanaticism: "suction_grip",
      basic() {
        return ["oceanic", "swamp"].includes(global.city.biome) ? true : false;
      }
    },
    dryad: {
      name: loc("race_dryad"),
      desc: loc("race_dryad_desc"),
      type: "fey",
      home: loc("race_dryad_home"),
      entity: loc("race_dryad_entity"),
      traits: {
        befuddle: 1,
        environmentalist: 1,
        kindling_kindred: 1
      },
      solar: {
        red: loc("race_dryad_solar_red"),
        hell: loc("race_dryad_solar_hell"),
        gas: loc("race_dryad_solar_gas"),
        gas_moon: loc("race_dryad_solar_gas_moon"),
        dwarf: loc("race_dryad_solar_dwarf")
      },
      fanaticism: "befuddle",
      basic() {
        return ["forest", "swamp", "taiga"].includes(global.city.biome) ? true : false;
      }
    },
    satyr: {
      name: loc("race_satyr"),
      desc: loc("race_satyr_desc"),
      type: "fey",
      home: loc("race_satyr_home"),
      entity: loc("race_satyr_entity"),
      traits: {
        unorganized: 1,
        musical: 1
      },
      solar: {
        red: loc("race_satyr_solar_red"),
        hell: loc("race_satyr_solar_hell"),
        gas: loc("race_satyr_solar_gas"),
        gas_moon: loc("race_satyr_solar_gas_moon"),
        dwarf: loc("race_satyr_solar_dwarf")
      },
      fanaticism: "musical",
      basic() {
        return ["forest", "swamp", "taiga"].includes(global.city.biome) ? true : false;
      }
    },
    phoenix: {
      name: loc("race_phoenix"),
      desc: loc("race_phoenix_desc"),
      type: "heat",
      home: loc("race_phoenix_home"),
      entity: loc("race_phoenix_entity"),
      traits: {
        revive: 1,
        slow_regen: 1
      },
      solar: {
        red: loc("race_phoenix_solar_red"),
        hell: loc("race_phoenix_solar_hell"),
        gas: loc("race_phoenix_solar_gas"),
        gas_moon: loc("race_phoenix_solar_gas_moon"),
        dwarf: loc("race_phoenix_solar_dwarf")
      },
      fanaticism: "revive",
      basic() {
        return ["volcanic", "ashland"].includes(global.city.biome) ? true : false;
      }
    },
    salamander: {
      name: loc("race_salamander"),
      desc: loc("race_salamander_desc"),
      type: "heat",
      home: loc("race_salamander_home"),
      entity: loc("race_salamander_entity"),
      traits: {
        forge: 1,
        autoignition: 1
      },
      solar: {
        red: loc("race_salamander_solar_red"),
        hell: loc("race_salamander_solar_hell"),
        gas: loc("race_salamander_solar_gas"),
        gas_moon: loc("race_salamander_solar_gas_moon"),
        dwarf: loc("race_salamander_solar_dwarf")
      },
      fanaticism: "forge",
      basic() {
        return ["volcanic", "ashland"].includes(global.city.biome) ? true : false;
      }
    },
    yeti: {
      name: loc(altRace("yeti") ? "race_snowman" : "race_yeti"),
      desc: loc(altRace("yeti") ? "race_snowman_desc" : "race_yeti_desc"),
      type: "polar",
      home: loc(altRace("yeti") ? "race_snowman_home" : "race_yeti_home"),
      entity: loc(altRace("yeti") ? "race_snowman_entity" : "race_yeti_entity"),
      traits: {
        blurry: 1,
        snowy: 1
      },
      solar: {
        red: loc(altRace("yeti") ? "race_snowman_solar_red" : "race_yeti_solar_red"),
        hell: loc(altRace("yeti") ? "race_snowman_solar_hell" : "race_yeti_solar_hell"),
        gas: loc(altRace("yeti") ? "race_snowman_solar_gas" : "race_yeti_solar_gas"),
        gas_moon: loc(altRace("yeti") ? "race_snowman_solar_gas_moon" : "race_yeti_solar_gas_moon"),
        dwarf: loc(altRace("yeti") ? "race_snowman_solar_dwarf" : "race_yeti_solar_dwarf")
      },
      fanaticism: "blurry",
      basic() {
        return ["tundra", "taiga"].includes(global.city.biome) ? true : false;
      }
    },
    wendigo: {
      name: loc(altRace("wendigo") ? "race_krampus" : "race_wendigo"),
      desc: loc(altRace("wendigo") ? "race_krampus_desc" : "race_wendigo_desc"),
      type: "polar",
      home: loc(altRace("wendigo") ? "race_krampus_home" : "race_wendigo_home"),
      entity: loc(altRace("wendigo") ? "race_krampus_entity" : "race_wendigo_entity"),
      traits: {
        ravenous: 1,
        ghostly: 1,
        soul_eater: 1
      },
      solar: {
        red: loc(altRace("wendigo") ? "race_krampus_solar_red" : "race_wendigo_solar_red"),
        hell: loc(altRace("wendigo") ? "race_krampus_solar_hell" : "race_wendigo_solar_hell"),
        gas: loc(altRace("wendigo") ? "race_krampus_solar_gas" : "race_wendigo_solar_gas"),
        gas_moon: loc(altRace("wendigo") ? "race_krampus_solar_gas_moon" : "race_wendigo_solar_gas_moon"),
        dwarf: loc(altRace("wendigo") ? "race_krampus_solar_dwarf" : "race_wendigo_solar_dwarf")
      },
      fanaticism: "ghostly",
      basic() {
        return ["tundra", "taiga"].includes(global.city.biome) ? true : false;
      }
    },
    tuskin: {
      name: loc("race_tuskin"),
      desc: loc("race_tuskin_desc"),
      type: "sand",
      home: loc("race_tuskin_home"),
      entity: loc("race_tuskin_entity"),
      traits: {
        lawless: 1,
        mistrustful: 1
      },
      solar: {
        red: loc("race_tuskin_solar_red"),
        hell: loc("race_tuskin_solar_hell"),
        gas: loc("race_tuskin_solar_gas"),
        gas_moon: loc("race_tuskin_solar_gas_moon"),
        dwarf: loc("race_tuskin_solar_dwarf")
      },
      fanaticism: "lawless",
      basic() {
        return ["desert", "ashland"].includes(global.city.biome) ? true : false;
      }
    },
    kamel: {
      name: loc("race_kamel"),
      desc: loc("race_kamel_desc"),
      type: "sand",
      home: loc("race_kamel_home"),
      entity: loc("race_kamel_entity"),
      traits: {
        humpback: 1,
        unfavored: 1
      },
      solar: {
        red: loc("race_kamel_solar_red"),
        hell: loc("race_kamel_solar_hell"),
        gas: loc("race_kamel_solar_gas"),
        gas_moon: loc("race_kamel_solar_gas_moon"),
        dwarf: loc("race_kamel_solar_dwarf")
      },
      fanaticism: "humpback",
      basic() {
        return ["desert", "ashland"].includes(global.city.biome) ? true : false;
      }
    },
    balorg: {
      name: loc("race_balorg"),
      desc: loc("race_balorg_desc"),
      type: "demonic",
      home: loc("race_balorg_home"),
      entity: loc("race_balorg_entity"),
      traits: {
        fiery: 1,
        terrifying: 1,
        slaver: 1
      },
      solar: {
        red: loc("race_balorg_solar_red"),
        hell: loc("race_balorg_solar_hell"),
        gas: loc("race_balorg_solar_gas"),
        gas_moon: loc("race_balorg_solar_gas_moon"),
        dwarf: loc("race_balorg_solar_dwarf")
      },
      fanaticism: "fiery",
      basic() {
        return global.city.biome === "hellscape" ? true : false;
      }
    },
    imp: {
      name: loc("race_imp"),
      desc: loc("race_imp_desc"),
      type: "demonic",
      home: loc("race_imp_home"),
      entity: loc("race_imp_entity"),
      traits: {
        compact: 1,
        conniving: 1,
        pathetic: 1
      },
      solar: {
        red: loc("race_imp_solar_red"),
        hell: loc("race_imp_solar_hell"),
        gas: loc("race_imp_solar_gas"),
        gas_moon: loc("race_imp_solar_gas_moon"),
        dwarf: loc("race_imp_solar_dwarf")
      },
      fanaticism: "conniving",
      basic() {
        return global.city.biome === "hellscape" ? true : false;
      }
    },
    seraph: {
      name: loc(altRace("seraph") ? "race_cherub" : "race_seraph"),
      desc: loc(altRace("seraph") ? "race_cherub_desc" : "race_seraph_desc"),
      type: "angelic",
      home: loc(altRace("seraph") ? "race_cherub_home" : "race_seraph_home"),
      entity: loc(altRace("seraph") ? "race_cherub_entity" : "race_seraph_entity"),
      traits: {
        unified: 1,
        spiritual: 1,
        truthful: 1
      },
      solar: {
        red: loc(altRace("seraph") ? "race_cherub_solar_red" : "race_seraph_solar_red"),
        hell: loc(altRace("seraph") ? "race_cherub_solar_hell" : "race_seraph_solar_hell"),
        gas: loc(altRace("seraph") ? "race_cherub_solar_gas" : "race_seraph_solar_gas"),
        gas_moon: loc(altRace("seraph") ? "race_cherub_solar_gas_moon" : "race_seraph_solar_gas_moon"),
        dwarf: loc(altRace("seraph") ? "race_cherub_solar_dwarf" : "race_seraph_solar_dwarf")
      },
      fanaticism: "spiritual",
      basic() {
        return global.city.biome === "eden" ? true : false;
      }
    },
    unicorn: {
      name: loc(altRace("unicorn") ? "race_emocorn" : "race_unicorn"),
      desc: loc(altRace("unicorn") ? "race_emocorn_desc" : "race_unicorn_desc"),
      type: "angelic",
      home: loc(altRace("unicorn") ? "race_emocorn_home" : "race_unicorn_home"),
      entity: loc(altRace("unicorn") ? "race_emocorn_entity" : "race_unicorn_entity"),
      traits: {
        rainbow: 1,
        magnificent: 1,
        noble: 1
      },
      solar: {
        red: loc(altRace("unicorn") ? "race_emocorn_solar_red" : "race_unicorn_solar_red"),
        hell: loc(altRace("unicorn") ? "race_emocorn_solar_hell" : "race_unicorn_solar_hell"),
        gas: loc(altRace("unicorn") ? "race_emocorn_solar_gas" : "race_unicorn_solar_gas"),
        gas_moon: loc(altRace("unicorn") ? "race_emocorn_solar_gas_moon" : "race_unicorn_solar_gas_moon"),
        dwarf: loc(altRace("unicorn") ? "race_emocorn_solar_dwarf" : "race_unicorn_solar_dwarf")
      },
      fanaticism: "magnificent",
      basic() {
        return global.city.biome === "eden" ? true : false;
      }
    },
    synth: {
      name: loc("race_synth"),
      desc() {
        let race = global.race.hasOwnProperty("srace") ? global.race.srace : "human";
        return loc("race_synth_desc", [races[race].name]);
      },
      type: "synthetic",
      home: loc("race_synth_home"),
      entity: loc("race_synth_entity"),
      traits: {
        imitation: 1,
        emotionless: 1,
        logical: 1
      },
      solar: {
        red: loc("race_synth_solar_red"),
        hell: loc("race_synth_solar_hell"),
        gas: loc("race_synth_solar_gas"),
        gas_moon: loc("race_synth_solar_gas_moon"),
        dwarf: loc("race_synth_solar_dwarf")
      },
      fanaticism: "logical",
      basic() {
        return false;
      }
    },
    nano: {
      name: loc("race_nano"),
      desc: loc("race_nano_desc"),
      type: "synthetic",
      home: loc("race_nano_home"),
      entity: loc("race_nano_entity"),
      traits: {
        deconstructor: 1,
        linked: 1,
        shapeshifter: 1
      },
      solar: {
        red: loc("race_nano_solar_red"),
        hell: loc("race_nano_solar_hell"),
        gas: loc("race_nano_solar_gas"),
        gas_moon: loc("race_nano_solar_gas_moon"),
        dwarf: loc("race_nano_solar_dwarf")
      },
      fanaticism: "shapeshifter",
      basic() {
        return false;
      }
    },
    ghast: {
      name: loc("race_ghast"),
      desc: loc("race_ghast_desc"),
      type: "eldritch",
      home: loc("race_ghast_home"),
      entity: loc("race_ghast_entity"),
      traits: {
        dark_dweller: 1,
        swift: 1,
        anthropophagite: 1
      },
      solar: {
        red: loc("race_ghast_solar_red"),
        hell: loc("race_ghast_solar_hell"),
        gas: loc("race_ghast_solar_gas"),
        gas_moon: loc("race_ghast_solar_gas_moon"),
        dwarf: loc("race_ghast_solar_dwarf")
      },
      fanaticism: "swift",
      basic() {
        return false;
      }
    },
    shoggoth: {
      name: loc("race_shoggoth"),
      desc: loc("race_shoggoth_desc"),
      type: "eldritch",
      home: loc("race_shoggoth_home"),
      entity: loc("race_shoggoth_entity"),
      traits: {
        living_tool: 1,
        bloated: 1
      },
      solar: {
        red: loc("race_shoggoth_solar_red"),
        hell: loc("race_shoggoth_solar_hell"),
        gas: loc("race_shoggoth_solar_gas"),
        gas_moon: loc("race_shoggoth_solar_gas_moon"),
        dwarf: loc("race_shoggoth_solar_dwarf")
      },
      fanaticism: "living_tool",
      basic() {
        return false;
      }
    },
    dwarf: {
      name: loc("race_dwarf"),
      desc: loc("race_dwarf_desc"),
      type: "hybrid",
      hybrid: ["humanoid", "small"],
      home: loc("race_dwarf_home"),
      entity: loc("race_dwarf_entity"),
      traits: {
        artisan: 1,
        stubborn: 1
      },
      solar: {
        red: loc("race_dwarf_solar_red"),
        hell: loc("race_dwarf_solar_hell"),
        gas: loc("race_dwarf_solar_gas"),
        gas_moon: loc("race_dwarf_solar_gas_moon"),
        dwarf: loc("race_dwarf_solar_dwarf")
      },
      fanaticism: "artisan",
      basic() {
        return false;
      }
    },
    raccoon: {
      name: loc("race_raccoon"),
      desc: loc("race_raccoon_desc"),
      type: "hybrid",
      hybrid: ["carnivore", "herbivore"],
      // ['omnivore'],
      home: loc("race_raccoon_home"),
      entity: loc("race_raccoon_entity"),
      traits: {
        rogue: 1,
        untrustworthy: 1
      },
      solar: {
        red: loc("race_raccoon_solar_red"),
        hell: loc("race_raccoon_solar_hell"),
        gas: loc("race_raccoon_solar_gas"),
        gas_moon: loc("race_raccoon_solar_gas_moon"),
        dwarf: loc("race_raccoon_solar_dwarf")
      },
      fanaticism: "rogue",
      basic() {
        return false;
      }
    },
    lichen: {
      name: loc("race_lichen"),
      desc: loc("race_lichen_desc"),
      type: "hybrid",
      hybrid: ["plant", "fungi"],
      home: loc("race_lichen_home"),
      entity: loc("race_lichen_entity"),
      traits: {
        living_materials: 1,
        unstable: 1
      },
      solar: {
        red: loc("race_lichen_solar_red"),
        hell: loc("race_lichen_solar_hell"),
        gas: loc("race_lichen_solar_gas"),
        gas_moon: loc("race_lichen_solar_gas_moon"),
        dwarf: loc("race_lichen_solar_dwarf")
      },
      fanaticism: "living_materials",
      basic() {
        return false;
      }
    },
    wyvern: {
      name: loc("race_wyvern"),
      desc: loc("race_wyvern_desc"),
      type: "hybrid",
      hybrid: ["avian", "reptilian"],
      home: loc("race_wyvern_home"),
      entity: loc("race_wyvern_entity"),
      traits: {
        elemental: 1,
        chicken: 1
      },
      solar: {
        red: loc("race_wyvern_solar_red"),
        hell: loc("race_wyvern_solar_hell"),
        gas: loc("race_wyvern_solar_gas"),
        gas_moon: loc("race_wyvern_solar_gas_moon"),
        dwarf: loc("race_wyvern_solar_dwarf")
      },
      fanaticism: "elemental",
      basic() {
        return false;
      }
    },
    beholder: {
      name: loc("race_beholder"),
      desc: loc("race_beholder_desc"),
      type: "hybrid",
      hybrid: ["eldritch", "giant"],
      home: loc("race_beholder_home"),
      entity: loc("race_beholder_entity"),
      traits: {
        ocular_power: 1,
        floating: 1
      },
      solar: {
        red: loc("race_beholder_solar_red"),
        hell: loc("race_beholder_solar_hell"),
        gas: loc("race_beholder_solar_gas"),
        gas_moon: loc("race_beholder_solar_gas_moon"),
        dwarf: loc("race_beholder_solar_dwarf")
      },
      fanaticism: "ocular_power",
      basic() {
        return false;
      }
    },
    djinn: {
      name: loc("race_djinn"),
      desc: loc("race_djinn_desc"),
      type: "hybrid",
      hybrid: ["sand", "fey"],
      home: loc("race_djinn_home"),
      entity: loc("race_djinn_entity"),
      traits: {
        wish: 1,
        devious: 1
      },
      solar: {
        red: loc("race_djinn_solar_red"),
        hell: loc("race_djinn_solar_hell"),
        gas: loc("race_djinn_solar_gas"),
        gas_moon: loc("race_djinn_solar_gas_moon"),
        dwarf: loc("race_djinn_solar_dwarf")
      },
      fanaticism: "wish",
      basic() {
        return false;
      }
    },
    narwhal: {
      name: loc("race_narwhal"),
      desc: loc("race_narwhal_desc"),
      type: "hybrid",
      hybrid: ["aquatic", "polar"],
      home: loc("race_narwhal_home"),
      entity: loc("race_narwhal_entity"),
      traits: {
        tusk: 1,
        blubber: 1
      },
      solar: {
        red: loc("race_narwhal_solar_red"),
        hell: loc("race_narwhal_solar_hell"),
        gas: loc("race_narwhal_solar_gas"),
        gas_moon: loc("race_narwhal_solar_gas_moon"),
        dwarf: loc("race_narwhal_solar_dwarf")
      },
      fanaticism: "tusk",
      basic() {
        return false;
      }
    },
    bombardier: {
      name: loc("race_bombardier"),
      desc: loc("race_bombardier_desc"),
      type: "hybrid",
      hybrid: ["insectoid", "heat"],
      home: loc("race_bombardier_home"),
      entity: loc("race_bombardier_entity"),
      traits: {
        grenadier: 1,
        aggressive: 1
      },
      solar: {
        red: loc("race_bombardier_solar_red"),
        hell: loc("race_bombardier_solar_hell"),
        gas: loc("race_bombardier_solar_gas"),
        gas_moon: loc("race_bombardier_solar_gas_moon"),
        dwarf: loc("race_bombardier_solar_dwarf")
      },
      fanaticism: "grenadier",
      basic() {
        return false;
      }
    },
    nephilim: {
      name: loc("race_nephilim"),
      desc: loc("race_nephilim_desc"),
      type: "hybrid",
      hybrid: ["demonic", "angelic"],
      home: loc("race_nephilim_home"),
      entity: loc("race_nephilim_entity"),
      traits: {
        empowered: 2,
        blasphemous: 1
      },
      solar: {
        red: loc("race_nephilim_solar_red"),
        hell: loc("race_nephilim_solar_hell"),
        gas: loc("race_nephilim_solar_gas"),
        gas_moon: loc("race_nephilim_solar_gas_moon"),
        dwarf: loc("race_nephilim_solar_dwarf")
      },
      fanaticism: "empowered",
      basic() {
        return false;
      }
    },
    hellspawn: {
      name: loc("race_hellspawn"),
      desc: loc("race_hellspawn_desc"),
      type: "demonic",
      home: loc("race_hellspawn_home"),
      entity: loc("race_hellspawn_entity"),
      traits: { immoral: 4 },
      solar: {
        red: loc("race_hellspawn_solar_red"),
        hell: loc("race_hellspawn_solar_hell"),
        gas: loc("race_hellspawn_solar_gas"),
        gas_moon: loc("race_hellspawn_solar_gas_moon"),
        dwarf: loc("race_hellspawn_solar_dwarf")
      },
      fanaticism: "immoral",
      basic() {
        return false;
      }
    },
    junker: {
      name: altRace("junker") ? loc("race_ghoul") : loc("race_junker"),
      desc: altRace("junker") ? loc("race_ghoul_desc") : loc("race_junker_desc"),
      type: function() {
        return global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
      }(),
      home: altRace("junker") ? loc("race_ghoul_home") : loc("race_junker_home"),
      entity: altRace("junker") ? loc("race_ghoul_entity") : loc("race_junker_entity"),
      traits: {
        diverse: 1,
        arrogant: 1,
        angry: 1,
        lazy: 1,
        paranoid: 1,
        greedy: 1,
        puny: 1,
        dumb: 1,
        nearsighted: 1,
        gluttony: 1,
        slow: 1,
        hard_of_hearing: 1,
        pessimistic: 1,
        solitary: 1,
        pyrophobia: 1,
        skittish: 1,
        nyctophilia: 1,
        frail: 1,
        atrophy: 1,
        invertebrate: 1,
        pathetic: 1,
        hibernator: 1,
        freespirit: 1,
        heavy: 1,
        gnawer: 1,
        hooved: 1
      },
      solar: {
        red: altRace("junker") ? loc("race_ghoul_solar_red") : loc("race_junker_solar_red"),
        hell: altRace("junker") ? loc("race_ghoul_solar_hell") : loc("race_junker_solar_hell"),
        gas: altRace("junker") ? loc("race_ghoul_solar_gas") : loc("race_junker_solar_gas"),
        gas_moon: altRace("junker") ? loc("race_ghoul_solar_gas_moon") : loc("race_junker_solar_gas_moon"),
        dwarf: altRace("junker") ? loc("race_ghoul_solar_dwarf") : loc("race_junker_solar_dwarf")
      },
      fanaticism: "none",
      basic() {
        return false;
      }
    },
    sludge: {
      name: loc("race_sludge"),
      desc: loc("race_sludge_desc"),
      type: function() {
        return global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
      }(),
      home: loc("race_sludge_home"),
      entity: loc("race_sludge_entity"),
      traits: {
        ooze: 0.25,
        diverse: 0.25,
        arrogant: 0.25,
        angry: 0.25,
        lazy: 0.25,
        hooved: 0.25,
        freespirit: 0.25,
        heavy: 0.25,
        gnawer: 0.25,
        paranoid: 0.25,
        greedy: 0.25,
        puny: 0.25,
        dumb: 0.25,
        nearsighted: 0.25,
        gluttony: 0.25,
        slow: 0.25,
        hard_of_hearing: 0.25,
        selenophobia: 0.25,
        pessimistic: 0.25,
        solitary: 0.25,
        pyrophobia: 0.25,
        skittish: 0.25,
        fragrant: 0.25,
        nyctophilia: 0.25,
        hibernator: 0.25,
        frail: 0.25,
        atrophy: 0.25,
        invertebrate: 0.25,
        unorganized: 0.25,
        slow_regen: 0.25,
        autoignition: 0.25,
        snowy: 0.25,
        mistrustful: 0.25,
        thalassophobia: 0.25,
        pathetic: 0.25,
        truthful: 0.25
      },
      solar: {
        red: loc("race_sludge_solar_red"),
        hell: loc("race_sludge_solar_hell"),
        gas: loc("race_sludge_solar_gas"),
        gas_moon: loc("race_sludge_solar_gas_moon"),
        dwarf: loc("race_sludge_solar_dwarf")
      },
      fanaticism: "ooze",
      basic() {
        return false;
      }
    },
    ultra_sludge: {
      name: loc("race_ultra_sludge"),
      desc: loc("race_ultra_sludge_desc"),
      type: function() {
        return global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
      }(),
      home: loc("race_sludge_home"),
      entity: loc("race_sludge_entity"),
      traits: {
        ooze: 0.1,
        diverse: 0.1,
        arrogant: 0.1,
        angry: 0.1,
        lazy: 0.1,
        hooved: 0.1,
        freespirit: 0.1,
        heavy: 0.1,
        gnawer: 0.1,
        paranoid: 0.1,
        greedy: 0.1,
        puny: 0.1,
        dumb: 0.1,
        nearsighted: 0.1,
        gluttony: 0.1,
        slow: 0.1,
        hard_of_hearing: 0.1,
        selenophobia: 0.1,
        pessimistic: 0.1,
        solitary: 0.1,
        pyrophobia: 0.1,
        skittish: 0.1,
        fragrant: 0.1,
        nyctophilia: 0.1,
        hibernator: 0.1,
        frail: 0.1,
        atrophy: 0.1,
        invertebrate: 0.1,
        unorganized: 0.1,
        slow_regen: 0.1,
        autoignition: 0.1,
        snowy: 0.1,
        mistrustful: 0.1,
        thalassophobia: 0.1,
        pathetic: 0.1,
        truthful: 0.1,
        blubber: 0.25,
        aggressive: 0.25,
        devious: 0.25,
        floating: 0.25,
        blasphemous: 0.25,
        chicken: 0.25,
        unstable: 0.25,
        stubborn: 0.25,
        untrustworthy: 0.25,
        bloated: 0.25,
        dark_dweller: 0.25
      },
      solar: {
        red: loc("race_sludge_solar_red"),
        hell: loc("race_sludge_solar_hell"),
        gas: loc("race_sludge_solar_gas"),
        gas_moon: loc("race_sludge_solar_gas_moon"),
        dwarf: loc("race_sludge_solar_dwarf")
      },
      fanaticism: "ooze",
      basic() {
        return false;
      }
    },
    custom: customRace(),
    hybrid: customRace(true)
  };
  var genusVars = {
    organism: {},
    humanoid: {},
    carnivore: {},
    herbivore: {},
    omnivore: {},
    small: {},
    giant: {},
    reptilian: {},
    avian: {},
    insectoid: {},
    plant: {},
    fungi: {},
    aquatic: {},
    fey: {},
    heat: {},
    polar: {},
    sand: {},
    demonic: {},
    angelic: {},
    synthetic: {},
    eldritch: {}
  };
  Object.keys(genusVars).forEach(function(k) {
    let g = k === "organism" ? "humanoid" : k;
    genusVars[k]["solar"] = {
      titan: loc(`genus_${g}_solar_titan`),
      enceladus: loc(`genus_${g}_solar_enceladus`),
      triton: loc(`genus_${g}_solar_triton`),
      eris: loc(`genus_${g}_solar_eris`)
    };
  });
  function setJType() {
    races.junker.type = global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
    races.sludge.type = global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
    races.ultra_sludge.type = global.race.hasOwnProperty("jtype") ? global.race.jtype : "humanoid";
  }
  function customRace(hybrid) {
    let slot = hybrid ? "race1" : "race0";
    if (global.hasOwnProperty("custom") && global.custom.hasOwnProperty(slot)) {
      let trait = {};
      let ranks = global.custom[slot]?.ranks || {};
      for (let i = 0; i < global.custom[slot].traits.length; i++) {
        trait[global.custom[slot].traits[i]] = ranks[global.custom[slot].traits[i]] || 1;
      }
      let fanatic = global.custom[slot].hasOwnProperty("fanaticism") && global.custom[slot].fanaticism ? global.custom[slot].fanaticism : false;
      if (fanatic && !global.custom[slot].traits.includes(fanatic)) {
        fanatic = false;
      }
      if (!fanatic) {
        fanatic = "pathetic";
        for (let i = 0; i < global.custom[slot].traits.length; i++) {
          if (traits[global.custom[slot].traits[i]].val > traits[fanatic].val) {
            fanatic = global.custom[slot].traits[i];
          }
        }
      }
      let def = {
        name: global.custom[slot].name,
        desc: global.custom[slot].desc,
        type: global.custom[slot].genus,
        home: global.custom[slot].home,
        entity: global.custom[slot].entity,
        traits: trait,
        solar: {
          red: global.custom[slot].red,
          hell: global.custom[slot].hell,
          gas: global.custom[slot].gas,
          gas_moon: global.custom[slot].gas_moon,
          dwarf: global.custom[slot].dwarf
        },
        fanaticism: fanatic,
        basic() {
          return false;
        }
      };
      if (hybrid) {
        def["hybrid"] = global.custom[slot].hybrid;
      }
      return def;
    } else {
      return {};
    }
  }
  function racialTrait(workers, type) {
    let modifier = 1;
    let theoryVal = govActive("theorist", 1);
    if (theoryVal && (type === "factory" || type === "miner" || type === "lumberjack")) {
      modifier *= 1 - theoryVal / 100;
    }
    let inspireVal = govActive("inspirational", 0);
    if (inspireVal && (type === "farmer" || type === "factory" || type === "miner" || type === "lumberjack")) {
      modifier *= 1 + inspireVal / 100;
    }
    let dirtVal = govActive("dirty_jobs", 2);
    if (dirtVal && type === "miner") {
      modifier *= 1 + dirtVal / 100;
    }
    if (global.race["rejuvenated"] && ["lumberjack", "miner", "factory"].includes(type)) {
      modifier *= 1.1;
    }
    if (type === "lumberjack" && global.race["evil"] && (global.race.universe === "evil" || !global.race["soul_eater"])) {
      if (global.race["living_tool"]) {
        modifier *= 1 + traits.living_tool.vars()[0] * (global.tech["science"] && global.tech.science > 0 ? global.tech.science * 0.3 : 0);
      } else {
        modifier *= 1 + (global.tech["reclaimer"] - 1) * 0.4;
      }
    }
    if (global.race["powered"] && (type === "factory" || type === "miner" || type === "lumberjack")) {
      modifier *= 1 + traits.powered.vars()[1] / 100;
    }
    if (global.race["artifical"] && type === "science") {
      modifier *= 1 + traits.artifical.vars()[0] / 100;
    }
    if (global.race["hivemind"] && type !== "farmer" && !global.race["lone_survivor"]) {
      let breakpoint = traits.hivemind.vars()[0];
      let scale = 0.05;
      if (global.race["high_pop"] && type !== "army" && type !== "hellArmy") {
        breakpoint *= traits.high_pop.vars()[0];
        scale = 0.5 / (traits.hivemind.vars()[0] * traits.high_pop.vars()[0]);
      }
      if (workers <= breakpoint) {
        let start = 1 - breakpoint * scale;
        modifier *= workers * scale + start;
      } else {
        let mod = type === "army" || type === "hellArmy" ? 0.99 : global.race["high_pop"] ? 0.985 : 0.98;
        modifier *= 1 + (1 - mod ** (workers - breakpoint));
      }
    }
    let antidFathom = fathomCheck("antid");
    if (antidFathom > 0) {
      let mod = type === "army" || type === "hellArmy" ? 0.99 : global.race["high_pop"] ? 0.985 : 0.98;
      modifier *= 1 + (1 - mod ** (workers * antidFathom / 4)) / 2;
    }
    if (global.race["cold_blooded"] && type !== "army" && type !== "hellArmy" && type !== "factory" && type !== "science") {
      switch (global.city.calendar.temp) {
        case 0:
          modifier *= 1 - traits.cold_blooded.vars()[0] / 100;
          break;
        case 2:
          modifier *= 1 + traits.cold_blooded.vars()[1] / 100;
          break;
        default:
          modifier *= 1;
          break;
      }
      switch (global.city.calendar.weather) {
        case 0:
          modifier *= 1 - traits.cold_blooded.vars()[0] / 100;
          break;
        case 2:
          modifier *= 1 + traits.cold_blooded.vars()[1] / 100;
          break;
        default:
          modifier *= 1;
          break;
      }
    }
    if (global.race["cannibalize"] && global.city["s_alter"] && global.city["s_alter"].count > 0) {
      if (type === "miner" && global.city.s_alter.mine > 0) {
        modifier *= 1 + traits.cannibalize.vars()[0] / 100;
      }
      if (type === "lumberjack" && global.city.s_alter.harvest > 0) {
        modifier *= 1 + traits.cannibalize.vars()[0] / 100;
      }
      if ((type === "army" || type === "hellArmy") && global.city.s_alter.rage > 0) {
        modifier *= 1 + traits.cannibalize.vars()[0] / 100;
      }
      if (type === "science" && global.city.s_alter.mind > 0) {
        modifier *= 1 + traits.cannibalize.vars()[0] / 100;
      }
    }
    let mantisFathom = fathomCheck("mantis");
    if (mantisFathom > 0) {
      if (type === "miner") {
        modifier *= 1 + traits.cannibalize.vars(1)[0] / 100 * mantisFathom;
      }
      if (type === "lumberjack") {
        modifier *= 1 + traits.cannibalize.vars(1)[0] / 100 * mantisFathom;
      }
      if (type === "army" || type === "hellArmy") {
        modifier *= 1 + traits.cannibalize.vars(1)[0] / 100 * mantisFathom;
      }
      if (type === "science") {
        modifier *= 1 + traits.cannibalize.vars(1)[0] / 100 * mantisFathom;
      }
    }
    if (global.race["humpback"] && (type === "miner" || type === "lumberjack")) {
      modifier *= 1 + traits.humpback.vars()[1] / 100;
    }
    let kamelFathom = fathomCheck("kamel");
    if (kamelFathom > 0 && (type === "miner" || type === "lumberjack")) {
      modifier *= 1 + traits.humpback.vars(1)[1] / 100 * kamelFathom;
    }
    if (global.city.ptrait.includes("magnetic") && type === "miner") {
      modifier *= planetTraits.magnetic.vars()[2];
    }
    if (global.race["weak"] && (type === "miner" || type === "lumberjack")) {
      modifier *= 1 - traits.weak.vars()[0] / 100;
    }
    if (global.race["hydrophilic"] && global.city.calendar.weather === 0 && global.city.calendar.temp > 0 && type !== "factory") {
      modifier *= 0.75;
    }
    if (global.race["toxic"] && type === "factory") {
      modifier *= 1 + traits.toxic.vars()[2] / 100;
    }
    let shroomiFathom = fathomCheck("shroomi");
    if (shroomiFathom > 0 && type === "factory") {
      modifier *= 1 + traits.toxic.vars(1)[2] / 100 * shroomiFathom;
    }
    if (global.race["hardy"] && type === "factory") {
      modifier *= 1 + traits.hardy.vars()[0] * global.race["hardy"] / 100;
    }
    if (global.race["analytical"] && type === "science") {
      modifier *= 1 + traits.analytical.vars()[0] * global.race["analytical"] / 100;
    }
    if (global.race["ooze"]) {
      modifier *= 1 - traits.ooze.vars()[0] / 100;
    }
    if (global.civic.govern.type === "democracy") {
      modifier *= 1 - govEffect.democracy()[1] / 100;
    }
    if (global.tech["cyber_worker"] && (type === "lumberjack" || type === "miner" || type === "forager")) {
      modifier *= 1.25;
    }
    if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.t && ["farmer", "miner", "lumberjack", "scavenger", "factory"].includes(type)) {
      let labor = 20 * (traits.ocular_power.vars()[1] / 100);
      modifier *= 1 + labor / 100;
    }
    if (type === "hunting") {
      if (global.race["tracker"]) {
        modifier *= 1 + traits.tracker.vars()[0] / 100;
      }
      let wolvenFathom = fathomCheck("wolven");
      if (wolvenFathom > 0) {
        modifier *= 1 + traits.tracker.vars(1)[0] / 100 * wolvenFathom;
      }
      if (global.race["beast"]) {
        let rate = global.city.calendar.wind === 1 ? traits.beast.vars()[1] : traits.beast.vars()[0];
        modifier *= 1 + rate / 100;
      }
      if (global.race["apex_predator"]) {
        modifier *= 1 + traits.apex_predator.vars()[1] / 100;
      }
      let sharkinFathom = fathomCheck("sharkin");
      if (sharkinFathom > 0) {
        modifier *= 1 + traits.apex_predator.vars(1)[1] / 100 * sharkinFathom;
      }
      if (global.race["fiery"]) {
        modifier *= 1 + traits.fiery.vars()[1] / 100;
      }
      let balorgFathom = fathomCheck("balorg");
      if (balorgFathom > 0) {
        modifier *= 1 + traits.fiery.vars(1)[1] / 100 * balorgFathom;
      }
      if (global.race["fragrant"]) {
        modifier *= 1 - traits.fragrant.vars()[0] / 100;
      }
      if (global.city.ptrait.includes("rage")) {
        modifier *= planetTraits.rage.vars()[1];
      }
      if (global.race["cunning"]) {
        modifier *= 1 + traits.cunning.vars()[0] * global.race["cunning"] / 100;
      }
      if (global.city.biome === "savanna") {
        modifier *= biomes.savanna.vars()[1];
      }
      if (global.race["dark_dweller"] && global.city.calendar.weather === 2) {
        modifier *= 1 - traits.dark_dweller.vars()[0] / 100;
      }
      if (global.city.banquet && global.city.banquet.on && global.city.banquet.level >= 3) {
        modifier *= 1 + global.city.banquet.strength ** 0.65 / 100;
      }
    }
    if (global.race.universe === "magic") {
      if (type === "science") {
        modifier *= 0.6;
      } else if (type === "army" || type === "hellArmy") {
        modifier *= 0.75;
      } else {
        modifier *= 0.8;
      }
      if (global.race["witch_hunter"]) {
        modifier *= 0.75;
      }
      if (global.race.hasOwnProperty("casting") && active_rituals[type === "hellArmy" ? "army" : type]) {
        let boost = active_rituals[type === "hellArmy" ? "army" : type];
        if (global.race["witch_hunter"]) {
          modifier *= 1 + boost / (boost + 75) * 2.5;
        } else {
          modifier *= 1 + boost / (boost + 75);
        }
      }
    }
    if ((global.race["living_tool"] || global.race["tusk"]) && type === "miner") {
      const balance = global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
      let tusk = global.race["tusk"] ? 1 + traits.tusk.vars()[0] / 100 * (armyRating(jobScale(balance), "army", 0) / balance / 100) : 1;
      let lt = global.race["living_tool"] ? 1 + traits.living_tool.vars()[0] * (global.tech["science"] && global.tech.science > 0 ? global.tech.science * 0.12 : 0) : 1;
      modifier *= lt > tusk ? lt : tusk;
    }
    if (global.race["warlord"]) {
      if (type === "miner") {
        modifier *= 1.82;
      } else if (type === "lumberjack") {
        modifier *= 1.3;
      } else if (type === "science") {
        modifier *= 1.5;
      }
    }
    if (global.race["forager"] && type === "forager") {
      modifier *= traits.forager.vars()[0] / 100;
    }
    if (global.race["high_pop"]) {
      modifier = highPopAdjust(modifier);
    }
    if (global.race["gravity_well"] && ["farmer", "miner", "lumberjack", "factory", "hunting", "forager"].includes(type)) {
      modifier = teamster(modifier);
    }
    return modifier;
  }
  function servantTrait(workers, type) {
    let modifier = 1;
    if (global.race["gravity_well"] && ["farmer", "miner", "lumberjack", "factory", "hunting", "scavenger", "forager"].includes(type)) {
      modifier = teamster(modifier);
    }
    return modifier;
  }
  function randomMinorTrait(ranks) {
    let trait_list = [];
    Object.keys(traits).forEach(function(t) {
      if (traits[t].type === "minor" && !global.race[t]) {
        trait_list.push(t);
      }
    });
    if (trait_list.length === 0) {
      Object.keys(traits).forEach(function(t) {
        if (traits[t].type === "minor") {
          trait_list.push(t);
        }
      });
    }
    let trait = trait_list[Math.floor(seededRandom(0, trait_list.length))];
    if (global.race[trait]) {
      global.race[trait] += ranks;
    } else {
      global.race[trait] = ranks;
    }
    return trait;
  }
  function checkPurgatory(s, t, dv) {
    if (global.race.purgatory[s].hasOwnProperty(t)) {
      global[s][t] = global.race.purgatory[s][t];
      delete global.race.purgatory[s][t];
    } else if (dv) {
      global[s][t] = dv;
    }
  }
  function checkAltPurgatory(s, t, a, dv) {
    if (global.race.purgatory[s].hasOwnProperty(t)) {
      global[s][t] = global.race.purgatory[s][t];
      delete global.race.purgatory[s][t];
    } else if (global.race.purgatory[s].hasOwnProperty(a)) {
      global[s][t] = global.race.purgatory[s][a];
      delete global.race.purgatory[s][a];
    } else if (dv) {
      global[s][t] = dv;
    }
  }
  function setPurgatory(s, t) {
    if (global[s].hasOwnProperty(t)) {
      global.race.purgatory[s][t] = global[s][t];
      delete global[s][t];
    }
  }
  function getPurgatory(s, t) {
    if (global.race.purgatory[s].hasOwnProperty(t)) {
      return global.race.purgatory[s][t];
    }
  }
  function purgeLumber() {
    releaseResource("Lumber");
    releaseResource("Plywood");
    removeFromQueue(["city-graveyard", "city-lumber_yard", "city-sawmill"]);
    removeFromRQueue(["reclaimer", "axe", "saw"]);
    setPurgatory("city", "sawmill");
    setPurgatory("city", "graveyard");
    setPurgatory("city", "lumber_yard");
    setPurgatory("tech", "axe");
    setPurgatory("tech", "reclaimer");
    setPurgatory("tech", "saw");
    global.civic.lumberjack.display = false;
    global.civic.lumberjack.workers = 0;
    global.civic.lumberjack.assigned = 0;
    if (global.civic.d_job === "lumberjack") {
      global.civic.d_job = global.race["carnivore"] || global.race["soul_eater"] ? "hunter" : "unemployed";
    }
    if (global.race["casting"]) {
      global.race.casting.total -= global.race.casting.lumberjack;
      global.race.casting.lumberjack = 0;
      active_rituals.lumberjack = 0;
      defineIndustry();
    }
    if (global.city["s_alter"]) {
      global.city.s_alter.harvest = 0;
    }
  }
  function releaseResource(res) {
    global.resource[res].display = false;
    if (global.race["alchemy"] && global.race.alchemy.hasOwnProperty(res)) {
      global.resource.Mana.diff += global.race.alchemy[res];
      global.race.alchemy[res] = 0;
    }
    if (global.interstellar["mass_ejector"] && global.interstellar.mass_ejector.hasOwnProperty(res)) {
      global.interstellar.mass_ejector.total -= global.interstellar.mass_ejector[res];
      global.interstellar.mass_ejector[res] = 0;
    }
    if (global.city["nanite_factory"] && global.city.nanite_factory.hasOwnProperty(res)) {
      global.city.nanite_factory[res] = 0;
    }
    if (global.portal["transport"] && global.portal.transport.cargo.hasOwnProperty(res)) {
      global.portal.transport.cargo.used -= global.portal.transport.cargo[res];
      global.portal.transport.cargo[res] = 0;
    }
    if (global.tech["foundry"] && global.city.foundry.hasOwnProperty(res)) {
      global.civic.craftsman.workers -= global.city.foundry[res];
      global.city.foundry.crafting -= global.city.foundry[res];
      global.city.foundry[res] = 0;
      loadFoundry();
    }
    if (global.resource[res].hasOwnProperty("trade")) {
      global.city.market.trade -= Math.abs(global.resource[res].trade);
      global.resource[res].trade = 0;
    }
    global.resource.Crates.amount += global.resource[res].crates;
    global.resource[res].crates = 0;
    global.resource.Containers.amount += global.resource[res].containers;
    global.resource[res].containers = 0;
  }
  function adjustFood() {
    let farmersEnabled = checkTechQualifications(actions.tech.agriculture);
    let huntingEnabled = checkTechQualifications(actions.tech.smokehouse);
    let lumberEnabled = checkTechQualifications(actions.tech.reclaimer) || checkTechQualifications(actions.tech.stone_axe);
    let altLodge = checkTechQualifications(actions.tech.alt_lodge);
    let altMill = checkTechQualifications(actions.tech.wind_plant);
    let disabledCity = [], disabledTech = [];
    if (!global.race["artifical"]) {
      ["agriculture", "farm", "hunting", "s_lodge", "wind_plant", "compost", "soul_eater"].forEach(function(tech) {
        setPurgatory("tech", tech);
      });
      ["silo", "farm", "mill", "windmill", "smokehouse", "lodge", "compost", "soul_well"].forEach(function(city) {
        setPurgatory("city", city);
      });
      if (altLodge) {
        checkPurgatory("tech", "s_lodge");
        let minAltLodge = getPurgatory("tech", "farm") >= 1 || getPurgatory("tech", "hunting") >= 2 ? 1 : 0;
        if (minAltLodge > 0 && (!global.tech["s_lodge"] || global.tech["s_lodge"] < minAltLodge)) {
          global.tech["s_lodge"] = minAltLodge;
        }
        if (global.tech["s_lodge"] >= 1) {
          checkAltPurgatory("city", "lodge", "farm", { count: 0 });
        }
      }
      if (huntingEnabled) {
        checkPurgatory("tech", "hunting");
        let minHunting = getPurgatory("tech", "farm") >= 1 || getPurgatory("tech", "s_lodge") >= 1 ? 2 : getPurgatory("tech", "agriculture") >= 3 ? 1 : 0;
        if (minHunting > 0 && (!global.tech["hunting"] || global.tech["hunting"] < minHunting)) {
          global.tech["hunting"] = minHunting;
        }
        if (global.tech["hunting"] >= 1) {
          checkAltPurgatory("city", "smokehouse", "silo", { count: 0 });
        }
        if (global.tech["hunting"] >= 2 && !altLodge) {
          checkAltPurgatory("city", "lodge", "farm", { count: 0 });
        }
      } else {
        disabledTech.push("hunting");
        disabledCity.push("city-smokehouse");
        if (!altLodge) {
          disabledTech.push("city-lodge");
        }
      }
      if (farmersEnabled) {
        checkPurgatory("tech", "farm");
        let minFarm = getPurgatory("tech", "hunting") >= 2 || getPurgatory("tech", "s_lodge") >= 1 ? 1 : 0;
        if (minFarm > 0 && (!global.tech["farm"] || global.tech["farm"] < minFarm)) {
          global.tech["farm"] = minFarm;
        }
        checkPurgatory("tech", "agriculture");
        let minAgriculture = getPurgatory("tech", "hunting") >= 1 ? 3 : getPurgatory("tech", "s_lodge") >= 1 ? 1 : 0;
        if (minAgriculture > 0 && (!global.tech["agriculture"] || global.tech["agriculture"] < minAgriculture)) {
          global.tech["agriculture"] = minAgriculture;
        }
        if (global.tech["agriculture"] >= 1) {
          checkAltPurgatory("city", "farm", "lodge", { count: 0 });
        }
        if (global.tech["agriculture"] >= 3) {
          checkAltPurgatory("city", "silo", "smokehouse", { count: 0 });
        }
        if (global.tech["agriculture"] >= 4 && !altMill) {
          checkAltPurgatory("city", "mill", "windmill", { count: 0, on: 0 });
        }
      } else {
        disabledTech.push("agriculture", "farm");
        disabledCity.push("city-farm", "city-silo", "city-mill");
      }
      if (global.race["soul_eater"]) {
        checkPurgatory("tech", "soul_eater");
        checkPurgatory("city", "soul_well");
      } else {
        disabledCity.push("city-soul_well");
        disabledTech.push("soul_eater");
      }
      if (global.race["detritivore"]) {
        checkPurgatory("tech", "compost");
        checkPurgatory("city", "compost");
      } else {
        disabledTech.push("compost");
        disabledCity.push("city-compost");
      }
      if (altMill) {
        checkPurgatory("tech", "wind_plant");
        if (global.tech["wind_plant"] >= 1) {
          checkAltPurgatory("city", "windmill", "mill", { count: 0, on: 0 });
        }
      } else {
        disabledTech.push("wind_plant");
        disabledCity.push("city-windmill");
        delete power_generated[loc("city_mill_title2")];
      }
    }
    let jobEnabled = [], jobDisabled = [];
    if (!global.race["orbit_decayed"] && farmersEnabled && global.tech["agriculture"] >= 1 && global.city["farm"].count > 0) {
      jobEnabled.push("farmer");
    } else {
      jobDisabled.push("farmer");
    }
    if (global.race["carnivore"] && !global.race["herbivore"] || global.race["soul_eater"] || global.race["unfathomable"]) {
      jobEnabled.push("hunter");
      jobDisabled.push("unemployed");
    } else {
      jobDisabled.push("hunter");
      jobEnabled.push("unemployed");
    }
    if (!global.race["orbit_decayed"] && lumberEnabled) {
      jobEnabled.push("lumberjack");
    } else {
      jobDisabled.push("lumberjack");
    }
    jobEnabled.forEach(function(job) {
      if (!global.civic[job].display) {
        global.civic[job].workers = 0;
        global.civic[job].display = true;
      }
    });
    jobDisabled.forEach(function(job) {
      if (global.civic[job].display) {
        if (global.civic.d_job === job) {
          global.civic.d_job = jobEnabled[0];
        }
        global.civic[jobEnabled[0]].workers += global.civic[job].workers;
        global.civic[job].workers = 0;
        global.civic[job].assigned = 0;
        global.civic[job].display = false;
      }
    });
    if (global.race["casting"]) {
      if (!farmersEnabled) {
        global.race.casting.total -= global.race.casting.farmer;
        global.race.casting.farmer = 0;
        active_rituals.farmer = 0;
      }
      defineIndustry();
    }
    removeFromQueue(disabledCity);
    removeFromRQueue(disabledTech);
    setResourceName("Food");
  }
  function traitCostMod(t, val) {
    if (!global.race[t]) {
      return val;
    }
    switch (t) {
      case "stubborn": {
        val *= 1 + traits.stubborn.vars()[0] / 100;
      }
      case "untrustworthy": {
        val *= 1 + traits.untrustworthy.vars()[0] / 100;
      }
    }
    return Math.round(val);
  }
  function cleanAddTrait(trait) {
    switch (trait) {
      case "high_pop":
        global.resource[global.race.species].amount = Math.round(global.resource[global.race.species].amount * traits.high_pop.vars()[0]);
        if (global.civic.hasOwnProperty("garrison")) {
          global.civic.garrison.workers = Math.round(global.civic.garrison.workers * traits.high_pop.vars()[0]);
        }
        break;
      case "kindling_kindred":
        if (global.race["smoldering"]) {
          break;
        }
        purgeLumber();
        break;
      case "smoldering":
        global.resource.Chrysotile.display = true;
        if (global.race["kindling_kindred"]) {
          break;
        }
        purgeLumber();
        break;
      case "iron_wood":
        if (global.race["smoldering"]) {
          break;
        }
        releaseResource("Plywood");
        break;
      case "forge":
        defineIndustry();
        break;
      case "soul_eater":
        setJobName("lumberjack");
      case "detritivore":
      case "carnivore":
      case "herbivore":
        adjustFood();
        break;
      case "unfathomable":
        adjustFood();
        if (!global.city.hasOwnProperty("surfaceDwellers")) {
          global.city["surfaceDwellers"] = [];
        }
        while (global.city.surfaceDwellers.length < traits.unfathomable.vars()[0]) {
          global.city.surfaceDwellers.push(basicRace(global.city.surfaceDwellers));
        }
        if (global.city.surfaceDwellers.length > traits.unfathomable.vars()[0]) {
          global.city.surfaceDwellers.length = traits.unfathomable.vars()[0];
        }
        if (global.race["psychic"]) {
          renderPsychicPowers();
        }
        break;
      case "flier":
        setResourceName("Stone");
        setResourceName("Brick");
        global.resource.Cement.display = false;
        global.civic.cement_worker.display = false;
        global.civic.cement_worker.workers = 0;
        global.civic.cement_worker.assigned = 0;
        setPurgatory("tech", "cement");
        setPurgatory("city", "cement_plant");
        setPurgatory("eden", "eden_cement");
        break;
      case "sappy":
        if (global.civic.d_job === "quarry_worker") {
          global.civic.d_job = global.race["carnivore"] || global.race["soul_eater"] ? "hunter" : "unemployed";
        }
        global.civic.quarry_worker.display = false;
        global.civic.quarry_worker.workers = 0;
        global.civic.quarry_worker.assigned = 0;
        setResourceName("Stone");
        setPurgatory("tech", "hammer");
        setPurgatory("city", "rock_quarry");
        break;
      case "apex_predator":
        removeFromRQueue(["armor"]);
        setPurgatory("tech", "armor");
        break;
      case "environmentalist":
        delete power_generated[loc("city_coal_power")];
        delete power_generated[loc("city_mana_engine")];
        delete power_generated[loc("city_oil_power")];
        break;
      case "terrifying":
        Object.keys(global.resource).forEach(function(res) {
          if (global.resource[res].hasOwnProperty("trade")) {
            global.resource[res].trade = 0;
          }
        });
        global.city.market.active = false;
        if (!global.galaxy?.freighter?.count) {
          global.settings.showMarket = false;
          if (global.settings.marketTabs === 0) {
            global.settings.marketTabs = 1;
          }
        }
        removeFromQueue(["city-trade"]);
        removeFromRQueue(["trade"]);
        setPurgatory("tech", "trade");
        setPurgatory("city", "trade");
        break;
      case "slaver":
        checkPurgatory("tech", "slaves");
        if (global.tech["slaves"] >= 1) {
          checkPurgatory("city", "slave_pen", { count: 0 });
          if (global.city["slave_pen"].count > 0 && !global.race["orbit_decayed"]) {
            global.resource.Slave.display = true;
          }
          if (global.tech["slaves"] >= 2) {
            defineGovernor();
          }
        }
        break;
      case "cannibalize":
        checkPurgatory("tech", "sacrifice");
        if (global.tech["mining"]) {
          initStruct(actions.city.s_alter);
          defineGovernor();
        }
        break;
      case "magnificent":
        if (global.tech["theology"] >= 2) {
          checkPurgatory("city", "shrine", actions.city.shrine.struct().d);
        }
        break;
      case "unified":
        global.tech["world_control"] = 1;
        global.tech["unify"] = 2;
        buildGarrison($("#garrison"), true);
        buildGarrison($("#c_garrison"), false);
        for (let i = 0; i < 3; i++) {
          if (global.civic.foreign[`gov${i}`].occ) {
            let occ_amount = jobScale(global.civic.govern.type === "federation" ? 15 : 20);
            global.civic["garrison"].max += occ_amount;
            global.civic["garrison"].workers += occ_amount;
            global.civic.foreign[`gov${i}`].occ = false;
          }
          global.civic.foreign[`gov${i}`].buy = false;
          global.civic.foreign[`gov${i}`].anx = false;
          global.civic.foreign[`gov${i}`].sab = 0;
          global.civic.foreign[`gov${i}`].act = "none";
        }
        removeTask("spy");
        removeTask("spyop");
        removeTask("combo_spy");
        defineGovernor();
        break;
      case "noble":
        if (global.civic.taxes.tax_rate < 10) {
          global.civic.taxes.tax_rate = 10;
        } else if (global.civic.taxes.tax_rate > 20) {
          global.civic.taxes.tax_rate = 20;
        }
        break;
      case "toxic":
        if (global.race.species === "troll" && global.tech["science"] && global.tech["science"] >= 8) {
          unlockAchieve("godwin");
        }
        break;
      case "thalassophobia":
        removeFromQueue(["city-wharf"]);
        removeFromRQueue(["wharf"]);
        setPurgatory("city", "wharf");
        break;
      case "hooved":
        global.resource.Horseshoe.display = true;
        if (!global.race.hasOwnProperty("shoecnt")) {
          global.race["shoecnt"] = 0;
        }
        defineGovernor();
        break;
      case "slow":
        save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
        if (webWorker.w) {
          gameLoop("stop");
          gameLoop("start");
        } else {
          window.location.reload();
        }
        break;
      case "hyper":
        save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
        if (webWorker.w) {
          gameLoop("stop");
          gameLoop("start");
        } else {
          window.location.reload();
        }
        break;
      case "calm":
        if (global.tech["primitive"] >= 3) {
          checkPurgatory("city", "meditation", actions.city.meditation.struct().d);
          if (!global.race["orbit_decayed"]) {
            global.resource.Zen.display = true;
          }
        }
        break;
      case "blood_thirst":
        global.race["blood_thirst_count"] = 1;
        break;
      case "deconstructor":
        global.resource.Nanite.display = true;
        checkPurgatory("city", "nanite_factory", {
          count: 1,
          Lumber: 0,
          Chrysotile: 0,
          Stone: 0,
          Crystal: 0,
          Furs: 0,
          Copper: 0,
          Iron: 0,
          Aluminium: 0,
          Cement: 0,
          Coal: 0,
          Oil: 0,
          Uranium: 0,
          Steel: 0,
          Titanium: 0,
          Alloy: 0,
          Polymer: 0,
          Iridium: 0,
          Helium_3: 0,
          Water: 0,
          Deuterium: 0,
          Neutronium: 0,
          Adamantite: 0,
          Bolognium: 0,
          Orichalcum: 0
        });
        break;
      case "shapeshifter":
        shapeShift(false, true);
        break;
      case "imitation":
        setImitation(true);
        if (global.race["shapeshifter"]) {
          shapeShift(false, true, false);
        }
        break;
      case "evil":
        setResourceName("Lumber");
        setResourceName("Furs");
        setResourceName("Plywood");
        break;
      case "psychic":
        if (global.tech["psychic"]) {
          global.resource.Energy.display = true;
          global.settings.showPsychic = true;
        }
        break;
      case "wish":
        if (global.tech["wish"]) {
          global.settings.showWish = true;
          if (global.race["wishStats"] && global.race.wishStats.strong && !global.race["strong"]) {
            global.race["strong"] = 0.25;
            cleanAddTrait("strong");
          }
        }
        break;
      case "ocular_power":
        global.settings.showWish = true;
        global.race["ocularPowerConfig"] = {
          d: false,
          p: false,
          w: false,
          t: false,
          f: false,
          c: false,
          ds: 0
        };
        renderSupernatural();
        break;
      case "ooze":
        if (!global.tech["high_tech"] && global.race.species !== "custom" && (global.race.species !== "sludge" || global.race.species !== "ultra_sludge")) {
          global.race["gross_enabled"] = 1;
        }
        calc_mastery(true);
        break;
      default:
        break;
    }
  }
  function cleanRemoveTrait(trait, rank) {
    switch (trait) {
      case "high_pop":
        global.resource[global.race.species].amount = Math.round(global.resource[global.race.species].amount / traits.high_pop.vars(rank)[0]);
        if (global.civic.hasOwnProperty("garrison")) {
          global.civic.garrison.workers = Math.round(global.civic.garrison.workers / traits.high_pop.vars(rank)[0]);
        }
        break;
      case "kindling_kindred":
        if (global.race["smoldering"]) {
          break;
        }
        global.resource.Lumber.display = true;
        if (global.tech["foundry"]) {
          global.resource.Plywood.display = true;
        }
        if (global.race["casting"]) {
          defineIndustry();
        }
        checkPurgatory("city", "sawmill");
        checkPurgatory("city", "graveyard");
        checkPurgatory("city", "lumber_yard");
        checkPurgatory("tech", "axe");
        checkPurgatory("tech", "reclaimer");
        checkPurgatory("tech", "saw");
        if ((global.tech["axe"] || global.tech["reclaimer"]) && !global.race["orbit_decayed"]) {
          global.civic.lumberjack.display = true;
        }
        break;
      case "smoldering":
        releaseResource("Chrysotile");
        if (global.race["kindling_kindred"]) {
          break;
        }
        global.resource.Lumber.display = true;
        if (global.tech["foundry"]) {
          global.resource.Plywood.display = true;
        }
        if (global.race["casting"]) {
          defineIndustry();
        }
        checkPurgatory("city", "sawmill");
        checkPurgatory("city", "graveyard");
        checkPurgatory("city", "lumber_yard");
        checkPurgatory("tech", "axe");
        checkPurgatory("tech", "reclaimer");
        checkPurgatory("tech", "saw");
        if ((global.tech["axe"] || global.tech["reclaimer"]) && !global.race["orbit_decayed"]) {
          global.civic.lumberjack.display = true;
        }
        break;
      case "iron_wood":
        if (global.tech["foundry"]) {
          global.resource.Plywood.display = true;
        }
        break;
      case "forge":
        defineIndustry();
        break;
      case "soul_eater":
        setJobName("lumberjack");
      case "detritivore":
      case "carnivore":
      case "herbivore":
      case "unfathomable":
        adjustFood();
        if (global.race["psychic"]) {
          renderPsychicPowers();
        }
        break;
      case "flier":
        setResourceName("Stone");
        setResourceName("Brick");
        checkPurgatory("tech", "cement");
        if (global.tech["cement"]) {
          checkPurgatory("city", "cement_plant");
          checkPurgatory("eden", "eden_cement");
          global.resource.Cement.display = true;
          global.civic.cement_worker.display = true;
        }
        break;
      case "sappy":
        setResourceName("Stone");
        checkPurgatory("tech", "hammer");
        if (global.tech["mining"] >= 1) {
          checkPurgatory("city", "rock_quarry", { count: 0, asbestos: 0 });
          if (global.city["rock_quarry"] && global.city.rock_quarry.count > 0 || global.race["lone_survivor"]) {
            global.civic.quarry_worker.display = true;
          }
        }
        break;
      case "apex_predator":
        checkPurgatory("tech", "armor");
        break;
      case "environmentalist":
        delete power_generated[loc("city_hydro_power")];
        delete power_generated[loc("city_wind_power")];
        break;
      case "terrifying":
        checkPurgatory("tech", "trade");
        checkPurgatory("city", "trade");
        if (global.tech["trade"]) {
          global.settings.showMarket = true;
          global.city.market.active = true;
          drawResourceTab("market");
        }
        break;
      case "slaver":
        removeFromQueue(["city-slave_pen"]);
        removeFromRQueue(["slaves"]);
        setPurgatory("city", "slave_pen");
        setPurgatory("tech", "slaves");
        global.resource.Slave.amount = 0;
        global.resource.Slave.max = 0;
        global.resource.Slave.display = false;
        removeTask("slave");
        defineGovernor();
        break;
      case "cannibalize":
        removeFromQueue(["city-s_alter"]);
        removeFromRQueue(["sacrifice"]);
        setPurgatory("tech", "sacrifice");
        delete global.city["s_alter"];
        removeTask("sacrifice");
        defineGovernor();
        break;
      case "magnificent":
        removeFromQueue(["city-shrine"]);
        setPurgatory("city", "shrine");
        break;
      case "thalassophobia":
        if (global.tech["wharf"]) {
          checkPurgatory("city", "wharf", { count: 0 });
        }
        break;
      case "hooved":
        removeFromQueue(["city-horseshoe", "space-horseshoe"]);
        global.resource.Horseshoe.display = false;
        removeTask("horseshoe");
        defineGovernor();
        break;
      case "slow":
        save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
        if (webWorker.w) {
          gameLoop("stop");
          gameLoop("start");
        } else {
          window.location.reload();
        }
        break;
      case "hyper":
        save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
        if (webWorker.w) {
          gameLoop("stop");
          gameLoop("start");
        } else {
          window.location.reload();
        }
        break;
      case "calm":
        removeFromQueue(["city-meditation"]);
        global.resource.Zen.display = false;
        setPurgatory("city", "meditation");
        break;
      case "blood_thirst":
        delete global.race["blood_thirst_count"];
        break;
      case "deconstructor":
        removeFromQueue(["city-nanite_factory"]);
        global.resource.Nanite.display = false;
        setPurgatory("city", "nanite_factory");
        break;
      case "shapeshifter":
        clearElement($("#sshifter"));
        shapeShift();
        break;
      case "imitation":
        if (global.race["iTraits"]) {
          Object.keys(global.race.iTraits).forEach(function(t) {
            if (t !== "imitation") {
              let base = global.race.inactiveTraits[t] ? global.race.inactiveTraits : global.race;
              if (global.race.iTraits[t] === 0) {
                let rank2 = base[t];
                delete base[t];
                cleanRemoveTrait(t, rank2);
              } else {
                base[t] = global.race.iTraits[t];
              }
            }
          });
          delete global.race["iTraits"];
          if (global.race["shapeshifter"]) {
            shapeShift(false, true, false);
          }
          combineTraits();
        }
        break;
      case "evil":
        setResourceName("Lumber");
        setResourceName("Furs");
        setResourceName("Plywood");
        break;
      case "psychic":
        global.resource.Energy.display = false;
        global.settings.showPsychic = false;
        break;
      case "wish":
        if (!global.race["ocular_power"]) {
          global.settings.showWish = false;
        }
        if (global.race["wishStats"] && global.race.wishStats.strong) {
          delete global.race["strong"];
          cleanRemoveTrait("strong");
        }
        break;
      case "ocular_power":
        if (!global.tech["wish"]) {
          global.settings.showWish = false;
        }
        break;
      case "ooze":
        delete global.race["gross_enabled"];
        calc_mastery(true);
        break;
      default:
        break;
    }
  }
  function setImitation(mod) {
    if (global.race["imitation"] && global.race["srace"]) {
      if (!global.race["iTraits"]) {
        global.race["iTraits"] = {};
      }
      if (global.race["shapeshifter"]) {
        if (races[global.race["srace"]].type === "hybrid" && races[global.race["srace"]].hybrid.includes(global.race["ss_genus"]) || global.race["ss_genus"] === races[global.race["srace"]].type) {
          shapeShift("none", true, true);
        }
      }
      Object.keys(global.race.inactiveTraits).forEach(function(trait) {
        global.race[trait] = global.race.inactiveTraits[trait];
      });
      global.race.inactiveTraits = {};
      let i_traits = [];
      if (races[global.race["srace"]].type === "hybrid") {
        races[global.race["srace"]].hybrid.forEach(function(genus) {
          Object.keys(genus_def[genus].traits).forEach(function(trait) {
            if (!global.race[trait]) {
              i_traits.push(trait);
            }
          });
        });
      } else {
        Object.keys(genus_def[races[global.race["srace"]].type].traits).forEach(function(trait) {
          if (!global.race[trait]) {
            i_traits.push(trait);
          }
        });
      }
      if (["custom", "hybrid"].includes(global.race["srace"])) {
        let list = [races[global.race["srace"]].fanaticism, "evil"];
        Object.keys(races[global.race["srace"]].traits).forEach(function(trait) {
          if (traits[trait].val < traits[list[1]].val) {
            list[1] = trait;
          }
        });
        i_traits.push(...list);
      } else {
        i_traits.push(...Object.keys(races[global.race["srace"]].traits));
      }
      for (let trait of i_traits) {
        if (!["evil", "imitation"].includes(trait)) {
          let set = global.race[trait] ? false : true;
          if (!global.race.iTraits.hasOwnProperty(trait)) {
            global.race.iTraits[trait] = global.race[trait] || 0;
          }
          let forced = global.race.iTraits[trait] ? false : true;
          let rank = traits[trait].val < 0 ? traits.imitation.vars()[1] : traits.imitation.vars()[0];
          setTraitRank(trait, { set: rank, force: forced });
          if (mod && set) {
            cleanAddTrait(trait);
          }
        }
      }
      combineTraits();
    }
  }
  function shapeShift(genus, setup, forceClean) {
    let shifted = global.race.hasOwnProperty("ss_traits") ? global.race.ss_traits : [];
    Object.keys(global.race.inactiveTraits).forEach(function(trait) {
      global.race[trait] = global.race.inactiveTraits[trait];
    });
    global.race.inactiveTraits = {};
    if (!setup || forceClean) {
      shifted.forEach(function(trait) {
        let rank = global.race[trait];
        delete global.race[trait];
        cleanRemoveTrait(trait, rank);
      });
      shifted = [];
    }
    if (genus) {
      if (genus !== "none") {
        Object.keys(genus_def[genus].traits).forEach(function(trait) {
          if (!global.race[trait] && trait !== "high_pop") {
            if (traits[trait].val >= 0) {
              global.race[trait] = traits.shapeshifter.vars()[0];
            } else {
              global.race[trait] = traits.shapeshifter.vars()[1];
            }
            cleanAddTrait(trait);
            shifted.push(trait);
          }
        });
      }
      global.race["ss_genus"] = genus;
    }
    if (setup) {
      clearElement($("#sshifter"));
      global.race["ss_genus"] = global.race.hasOwnProperty("ss_genus") ? global.race.ss_genus : "none";
      let drop = ``;
      const imitation = global.race["imitation"] ? races[global.race["srace"]].type === "hybrid" ? races[global.race["srace"]].hybrid : [races[global.race["srace"]].type] : [];
      const base = races[global.race.species].type === "hybrid" ? races[global.race.species].hybrid : [races[global.race.species].type];
      Object.keys(genus_def).forEach(function(gen) {
        if (!["synthetic", "eldritch", "hybrid", ...base, ...imitation].includes(gen) && global.stats.achieve[`genus_${gen}`] && global.stats.achieve[`genus_${gen}`].l > 0) {
          drop += `<b-dropdown-item v-on:click="setShape('${gen}')">{{ '${gen}' | genus }}</b-dropdown-item>`;
        }
      });
      $("#sshifter").append(
        `<span>${loc(`trait_shapeshifter_name`)}</span>: <b-dropdown hoverable scrollable>
            <button class="button is-primary" slot="trigger">
                <span>{{ ss_genus | genus }}</span>
            </button>
            <b-dropdown-item v-on:click="setShape('none')">{{ 'none' | genus }}</b-dropdown-item>${drop}
        </b-dropdown>`
      );
      vBind({
        el: `#sshifter`,
        data: global.race,
        methods: {
          setShape(s) {
            shapeShift(s);
          }
        },
        filters: {
          genus(g) {
            return loc(`genelab_genus_${g}`);
          }
        }
      });
    }
    global.race["ss_traits"] = shifted;
    combineTraits();
    if (genus || !setup || forceClean) {
      arpa("Genetics");
      drawCity();
      renderEdenic();
      drawTech();
    }
  }
  function combineTraits() {
    Object.keys(global.race.inactiveTraits).forEach(function(trait) {
      global.race[trait] = global.race.inactiveTraits[trait];
    });
    global.race.inactiveTraits = {};
    if (global.race["herbivore"] && global.race["carnivore"]) {
      let rank = 1;
      global.race.inactiveTraits["herbivore"] = global.race["herbivore"];
      global.race.inactiveTraits["carnivore"] = global.race["carnivore"];
      delete global.race["herbivore"];
      delete global.race["carnivore"];
      if (global.race["forager"] !== rank) {
        setTraitRank("forager", { set: rank, force: true });
        cleanRemoveTrait("carnivore");
        cleanRemoveTrait("herbivore");
        cleanAddTrait("forager");
      }
    } else if (global.race["forager"]) {
      delete global.race["forager"];
      cleanRemoveTrait("forager");
    }
  }
  function traitRank(trait) {
    if (global.race["empowered"] && !["empowered", "catnip", "anise"].includes(trait)) {
      let val = traits[trait].val;
      if (val >= traits.empowered.vars()[0] && val <= traits.empowered.vars()[1]) {
        switch (global.race[trait]) {
          case 0.1:
            return 0.25;
          case 0.25:
            return 0.5;
          case 0.5:
            return 1;
          case 1:
            return 2;
          case 2:
            return 3;
          case 3:
            return 4;
          case 4:
            return 4;
        }
      }
    }
    return global.race[trait];
  }
  function setTraitRank(trait, opts) {
    opts = opts || {};
    if (global.race[trait] && !opts["force"]) {
      switch (global.race[trait]) {
        case 0.1:
          global.race[trait] = opts["down"] ? 0.1 : 0.25;
          return opts["down"] ? false : true;
        case 0.25:
          global.race[trait] = opts["down"] ? 0.1 : 0.5;
          return true;
        case 0.5:
          global.race[trait] = opts["down"] ? 0.25 : 1;
          return true;
        case 1:
          global.race[trait] = opts["down"] ? 0.5 : 2;
          return true;
        case 2:
          global.race[trait] = opts["down"] ? 1 : 3;
          return true;
        case 3:
          global.race[trait] = opts["down"] ? 2 : 4;
          return true;
        case 4:
          global.race[trait] = opts["down"] ? 3 : 4;
          return opts["down"] ? true : false;
      }
    } else if (opts["set"]) {
      global.race[trait] = opts["set"];
      return true;
    }
    return false;
  }
  function fathomCheck(race) {
    if (global.race["unfathomable"] && global.city["surfaceDwellers"] && global.city.surfaceDwellers.includes(race) && global.city["captive_housing"]) {
      let idx = global.city.surfaceDwellers.indexOf(race);
      let active = global.city.captive_housing[`race${idx}`];
      if (active > 100) {
        active = 100;
      }
      if (active > global.civic.torturer.workers) {
        let unsupervised = active - global.civic.torturer.workers;
        active -= Math.ceil(unsupervised / 3);
      }
      let rank = (global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0) / 5;
      return active / 100 * rank;
    }
    return 0;
  }
  function traitSkin(type, trait, species) {
    let artificial = species ? genus_def[races[species].type].traits.artifical : global.race["artifical"];
    switch (type) {
      case "name": {
        let name = {
          hooved: hoovedReskin(false, species),
          promiscuous: artificial ? loc("trait_promiscuous_synth_name") : traits.promiscuous.name,
          weak: species === "dwarf" ? loc("trait_drunk_name") : traits.weak.name,
          spiritual: global.race.universe === "evil" && global.civic.govern.type != "theocracy" ? loc("trait_manipulator_name") : traits.spiritual.name
        };
        return trait ? name[trait] ? name[trait] : traits[trait].name : name;
      }
      case "desc": {
        let desc = {
          hooved: hoovedReskin(true, species),
          promiscuous: artificial ? loc("trait_promiscuous_synth") : traits["promiscuous"].desc,
          weak: species === "dwarf" ? loc("trait_drunk") : traits.weak.desc,
          spiritual: global.race.universe === "evil" && global.civic.govern.type != "theocracy" ? loc("trait_manipulator") : traits.spiritual.desc,
          blurry: global.race["warlord"] ? loc("trait_blurry_warlord") : traits.blurry.desc,
          playful: global.race["warlord"] ? loc("trait_playful_warlord") : traits.playful.desc,
          befuddle: global.race["warlord"] ? loc("trait_befuddle_warlord") : traits.befuddle.desc
        };
        return trait ? desc[trait] ? desc[trait] : traits[trait].desc : desc;
      }
    }
  }
  function hoovedReskin(desc, species = global.race.species) {
    let type = species === global.race.species ? global.race.maintype || races[species].type : races[species].type;
    if (species === "sludge" || species === "ultra_sludge") {
      return desc ? loc("trait_hooved_slime") : loc("trait_hooved_slime_name");
    } else if ([
      "cath",
      "wolven",
      "dracnid",
      "seraph",
      "cyclops",
      "kobold",
      "tuskin",
      "sharkin",
      "beholder",
      "djinn"
    ].includes(species)) {
      return desc ? loc(`trait_hooved_${species}`) : loc(`trait_hooved_${species}_name`);
    } else if ([
      "humanoid",
      "avian",
      "plant",
      "fungi",
      "reptilian",
      "fey",
      "synthetic"
    ].includes(type)) {
      return desc ? loc(`trait_hooved_${type}`) : loc(`trait_hooved_${type}_name`);
    } else {
      return desc ? traits["hooved"].desc : traits["hooved"].name;
    }
  }
  var biomes = {
    grassland: {
      label: loc("biome_grassland_name"),
      desc: loc("biome_grassland"),
      vars() {
        return global.race["rejuvenated"] ? [1.25] : [1.2];
      },
      // [Agriculture]
      wiki: ["%"]
    },
    oceanic: {
      label: loc("biome_oceanic_name"),
      desc: loc("biome_oceanic"),
      vars() {
        return global.race["rejuvenated"] ? [1.25, 1.12, 0.92] : [1.12, 1.06, 0.95];
      },
      // [Iron Titanium, cSteel Titanium, Hunting Fur]
      wiki: ["%", "%", "%"]
    },
    forest: {
      label: loc("biome_forest_name"),
      desc: loc("biome_forest"),
      vars() {
        return global.race["rejuvenated"] ? [1.35] : [1.2];
      },
      // [Lumberjack Lumber]
      wiki: ["%"]
    },
    desert: {
      label: loc("biome_desert_name"),
      desc: loc("biome_desert"),
      vars() {
        return global.race["rejuvenated"] ? [1.35, 1.18, 0.6] : [1.2, 1.1, 0.75];
      },
      // [Quarry Worker, Oil Well, Lumberjack]
      wiki: ["%", "%", "%"]
    },
    volcanic: {
      label: loc("biome_volcanic_name"),
      desc: loc("biome_volcanic"),
      vars() {
        return global.race["rejuvenated"] ? [0.8, 1.25, 1.15] : [0.9, 1.12, 1.08];
      },
      // [Agriculture, Copper, Iron]
      wiki: ["%", "%", "%"]
    },
    tundra: {
      label: loc("biome_tundra_name"),
      desc: loc("biome_tundra"),
      vars() {
        return global.race["rejuvenated"] ? [1.5, 0.8] : [1.25, 0.9];
      },
      // [Hunting Fur, Oil Well]
      wiki: ["%", "%"]
    },
    savanna: {
      label: loc("biome_savanna_name"),
      desc: loc("biome_savanna"),
      vars() {
        return global.race["rejuvenated"] ? [1.18, 1.25, 0.75] : [1.1, 1.18, 0.8];
      },
      // [Agriculture, Hunting, Lumberjack]
      wiki: ["%", "%", "%"]
    },
    swamp: {
      label: loc("biome_swamp_name"),
      desc: loc("biome_swamp"),
      vars() {
        return global.race["rejuvenated"] ? [1.6, 1.35, 1.15, 0.78] : [1.4, 1.25, 1.1, 0.88];
      },
      // [City Defense, War Loot, Lumber, Stone]
      wiki: ["%", "%", "%", "%"]
    },
    ashland: {
      label: loc("biome_ashland_name"),
      desc: loc("biome_ashland"),
      vars() {
        return global.race["rejuvenated"] ? [0.55, 1.35, 1.2] : [0.62, 1.25, 1.1];
      },
      // [Agriculture, Ashcrete, Iron & Copper]
      wiki: ["%", "%", "%"]
    },
    taiga: {
      label: loc("biome_taiga_name"),
      desc: loc("biome_taiga"),
      vars() {
        return global.race["rejuvenated"] ? [1.2, 1.65, 0.88] : [1.1, 1.5, 0.92];
      },
      // [Lumber, Pop Growth Speed, Oil Well]
      wiki: ["%", "%", "%"]
    },
    hellscape: {
      label: loc("biome_hellscape_name"),
      desc: loc("biome_hellscape"),
      vars() {
        return global.race["rejuvenated"] ? [0.2] : [0.25];
      },
      // [Agriculture]
      wiki: ["%"]
    },
    eden: {
      label: loc("biome_eden_name"),
      desc: loc("biome_eden")
    }
  };
  var planetTraits = {
    toxic: {
      label: loc("planet_toxic"),
      desc: loc("planet_toxic_desc"),
      vars() {
        return global.race["rejuvenated"] ? [2, 1.5] : [1, 1.25];
      },
      // [Mutation Bonus, Birth Rate]
      wiki: ["A", "-%"]
    },
    mellow: {
      label: loc("planet_mellow"),
      desc: loc("planet_mellow_desc"),
      vars() {
        return global.race["rejuvenated"] ? [2, 3, 0.88] : [1.5, 2, 0.9];
      },
      // [Unemployed and Soldier Stress Divisor, Job Stress Reduction, Production]
      wiki: ["%", "A", "%"]
    },
    rage: {
      label: loc("planet_rage"),
      desc: loc("planet_rage_desc"),
      vars() {
        return global.race["rejuvenated"] ? [1.1, 1.05, 1] : [1.05, 1.02, 1];
      },
      // [Combat, Hunting, Death]
      wiki: ["%", "%", "A"]
    },
    stormy: {
      label: loc("planet_stormy"),
      desc: loc("planet_stormy_desc")
    },
    ozone: {
      label: loc("planet_ozone"),
      desc: loc("planet_ozone_desc"),
      vars() {
        return global.race["rejuvenated"] ? [0.18] : [0.25];
      },
      // [Ozone Penalty]
      wiki: ["-A"]
    },
    magnetic: {
      label: loc("planet_magnetic"),
      desc: loc("planet_magnetic_desc"),
      vars() {
        return global.race["rejuvenated"] ? [2, 150, 0.98] : [1, 100, 0.985];
      },
      // [Sundial, Wardenclyffe, Miner]
      wiki: ["A", "A", "%"]
    },
    trashed: {
      label: loc("planet_trashed"),
      desc: loc("planet_trashed_desc"),
      vars() {
        return global.race["rejuvenated"] ? [0.8, 1.2] : [0.75, 1];
      },
      // [Agriculture, Scavenger Bonus]
      wiki: ["%", "%"]
    },
    elliptical: {
      label: loc("planet_elliptical"),
      desc: loc("planet_elliptical_desc")
    },
    flare: {
      label: loc("planet_flare"),
      desc: loc("planet_flare_desc")
    },
    dense: {
      label: loc("planet_dense"),
      desc: loc("planet_dense_desc"),
      vars() {
        return global.race["rejuvenated"] ? [1.5, 1.2, 1.35] : [1.2, 1, 1.2];
      },
      // [Mining Production, Miner Stress, Solar Fuel Cost]
      wiki: ["%", "A", "%"]
    },
    unstable: {
      label: loc("planet_unstable"),
      desc: loc("planet_unstable_desc")
    },
    permafrost: {
      label: loc("planet_permafrost"),
      desc: loc("planet_permafrost_desc"),
      vars() {
        return global.race["rejuvenated"] ? [0.7, 125] : [0.75, 100];
      },
      // [Mining Production, University Base]
      wiki: ["%", "A"]
    },
    retrograde: {
      label: loc("planet_retrograde"),
      desc: loc("planet_retrograde_desc")
    },
    kamikaze: {
      label: loc("planet_kamikaze"),
      desc: loc("planet_kamikaze_desc"),
      vars() {
        return [100, -1];
      },
      // [Orbit, Orbit Loss]
      wiki: ["A", "A"]
    }
  };
  function orbitLength() {
    let orbit = global.city.calendar.orbit;
    if (global.city.ptrait.includes("kamikaze")) {
      orbit -= global.city.calendar.year;
      if ((!global.race["truepath"] || global.race["lone_survivor"] || global.tech["titan_ai_core"] || global.race["tidal_decay"]) && orbit < 100) {
        orbit = 100;
      }
    }
    return orbit;
  }
  function shellColor() {
    if (global.race.hasOwnProperty("shell_color")) {
      return loc(`color_${global.race.shell_color}`);
    }
    return loc(`color_green`);
  }
  function foxColor() {
    if (global.race.hasOwnProperty("fox_color")) {
      return loc(`color_${global.race.fox_color}`);
    }
    return loc(`color_red`);
  }
  function basicRace(skip) {
    skip = skip || [];
    let basicList = Object.keys(races).filter(function(r) {
      return !["custom", "hybrid"].includes(r) && !skip.includes(r) && races[r].basic();
    });
    let key = randomKey(basicList);
    return basicList[key];
  }
  function renderSupernatural() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 7)) {
      return;
    }
    let parent = $(`#supernatural`);
    clearElement(parent);
    if (global.race["wish"] && global.tech["wish"] && global.race["wishStats"]) {
      minorWish(parent);
      if (global.tech.wish >= 2) {
        majorWish(parent);
      }
    }
    if (global.race["ocular_power"]) {
      ocularPower(parent);
    }
  }
  function minorWish(parent) {
    let container = $(`<div id="minorWish" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header"><span class="has-text-warning">${loc("tech_minor_wish")}</span> - <span v-html="$options.filters.wish(minor)"></span></div>`));
    let spells = $(`<div class="flexWrap"></div>`);
    container.append(spells);
    spells.append(`<div><b-button id="wishMoney" v-html="$options.filters.money()" @click="money()"></b-button></div>`);
    spells.append(`<div><b-button id="wishRes" v-html="$options.filters.label('resources')" @click="res()"></b-button></div>`);
    spells.append(`<div><b-button id="wishKnow" v-html="$options.filters.know()" @click="know()"></b-button></div>`);
    spells.append(`<div><b-button id="wishFame" v-html="$options.filters.label('fame')" @click="famous()"></b-button></div>`);
    spells.append(`<div><b-button id="wishStrength" v-html="$options.filters.label('strength')" @click="strength()"></b-button></div>`);
    spells.append(`<div><b-button id="wishInfluence" v-html="$options.filters.label('influence')" @click="influence()"></b-button></div>`);
    spells.append(`<div><b-button id="wishExcite" v-html="$options.filters.label('event')" @click="excite()"></b-button></div>`);
    spells.append(`<div><b-button id="wishLove" v-html="$options.filters.label('love')" @click="love()"></b-button></div>`);
    vBind({
      el: `#minorWish`,
      data: global.race.wishStats,
      methods: {
        know() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["inspire"];
            if (!global.race["lone_survivor"] && !global.race["cataclysm"] && !global.race["orbit_decay"]) {
              options.push("know");
            }
            if (global.tech["science"]) {
              if (global.tech.science >= 1 && global.tech.science <= 3) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 3 && global.tech.science >= 4 && global.tech.science <= 6) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 4 && global.tech.science === 7) {
                options.push("science");
              } else if (global.tech["space"] && global.tech.space >= 3 && global.tech.science === 8 && global.tech["luna"]) {
                options.push("science");
              } else if (global.tech["alpha"] && global.tech.alpha >= 2 && global.tech.science === 11) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 12 && global.tech.science === 12) {
                options.push("science");
              } else if (global.tech["infernite"] && global.tech.infernite >= 2 && global.tech.science === 13) {
                options.push("science");
              } else if (global.tech["neutron"] && global.tech.science === 14) {
                options.push("science");
              } else if (global.tech["xeno"] && global.tech.xeno >= 4 && global.tech.science === 15) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 16 && global.tech.science === 16) {
                options.push("science");
              } else if (global.tech["conflict"] && global.tech.conflict >= 5 && global.tech.science === 17) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 17 && global.tech.science === 18) {
                options.push("science");
              } else if (global.tech["high_tech"] && global.tech.high_tech >= 18 && global.tech.science === 19) {
                options.push("science");
              } else if (global.tech["asphodel"] && global.tech.asphodel >= 3 && global.tech.science === 21) {
                options.push("science");
              } else if (global.tech["asphodel"] && global.tech.asphodel >= 8 && global.tech.science === 22) {
                options.push("science");
              }
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "inspire": {
                global.race["inspired"] = Math.floor(seededRandom(300, 600));
                let msg = loc("event_inspiration");
                messageQueue(msg, false, false, ["events", "major_events"]);
                break;
              }
              case "know": {
                let gain = Math.floor(seededRandom(global.resource.Knowledge.max / 5, global.resource.Knowledge.max / 2));
                global.resource.Knowledge.amount += gain;
                if (global.resource.Knowledge.amount > global.resource.Knowledge.max) {
                  global.resource.Knowledge.amount = global.resource.Knowledge.max;
                }
                messageQueue(loc("wish_know", [global.resource.Knowledge.name, sizeApproximation(gain)]), "warning", false, ["events"]);
                break;
              }
              case "science": {
                global.tech.science++;
                switch (global.tech.science) {
                  case 2:
                    global.city["library"] = { count: 0 };
                    break;
                  case 8:
                    if (global.race["toxic"] && global.race.species === "troll") {
                      unlockAchieve("godwin");
                    }
                    break;
                  case 9:
                    global.space["observatory"] = { count: 0, on: 0 };
                    break;
                  case 12:
                    global.interstellar["laboratory"] = { count: 0, on: 0 };
                    break;
                }
                drawCity();
                drawTech();
                let techs2 = {
                  2: "library",
                  3: "thesis",
                  4: "research_grant",
                  5: "scientific_journal",
                  6: "adjunct_professor",
                  7: "tesla_coil",
                  8: "internet",
                  9: "observatory",
                  12: "laboratory",
                  13: "virtual_assistant",
                  14: "dimensional_readings",
                  15: "quantum_entanglement",
                  16: "expedition",
                  17: "subspace_sensors",
                  18: "alien_database",
                  19: "orichalcum_capacitor",
                  20: "advanced_biotech"
                };
                let tech = typeof actions.tech[techs2[global.tech.science]].title === "function" ? actions.tech[techs2[global.tech.science]].title() : actions.tech[techs2[global.tech.science]].title;
                messageQueue(loc("wish_tech", [tech]), "warning", false, ["progress"]);
                break;
              }
            }
          }
        },
        money() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["money", "robbery"];
            if (global.race.wishStats.tax === 0) {
              options.push("taxes");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "money": {
                let cash = Math.floor(seededRandom(1, Math.round(global.resource.Money.max / 8)));
                global.resource.Money.amount += cash;
                if (global.resource.Money.amount > global.resource.Money.max) {
                  global.resource.Money.amount = global.resource.Money.max;
                }
                messageQueue(loc("wish_cash", [sizeApproximation(cash)]), "warning", false, ["events"]);
                break;
              }
              case "taxes": {
                global.race.wishStats.tax = 5;
                global.civic.taxes.rax_rate = govCivics("tax_cap");
                messageQueue(loc("wish_taxes"), "warning", false, ["events"]);
                break;
              }
              case "robbery": {
                let cash = Math.floor(seededRandom(1, Math.round(global.resource.Money.max / 8)));
                global.resource.Money.amount += cash;
                if (global.resource.Money.amount > global.resource.Money.max) {
                  global.resource.Money.amount = global.resource.Money.max;
                }
                let victim = Math.floor(seededRandom(0, 10));
                global.race.wishStats.bad += Math.floor(seededRandom(50, 100));
                messageQueue(loc("wish_robbery", [loc(`wish_robbery${victim}`), sizeApproximation(cash)]), "warning", false, ["events"]);
                break;
              }
            }
          }
        },
        res() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["useless", "common", "rare", "stolen", "2xcommon", "2xrare"];
            let spell = options[Math.floor(seededRandom(0, options.length))];
            let resList = [];
            [
              "Lumber",
              "Stone",
              "Furs",
              "Copper",
              "Iron",
              "Aluminium",
              "Cement",
              "Coal",
              "Oil",
              "Uranium",
              "Steel",
              "Titanium",
              "Alloy",
              "Polymer",
              "Iridium",
              "Helium_3",
              "Crystal",
              "Chrysotile"
            ].forEach(function(res) {
              if (global.resource[res].display && global.resource[res].amount * 1.05 < global.resource[res].max) {
                resList.push(res);
              }
            });
            if (spell === "rare" || spell === "stolen" || spell === "2xrare") {
              [
                "Deuterium",
                "Neutronium",
                "Adamantite",
                "Nano_Tube",
                "Graphene",
                "Stanene",
                "Bolognium",
                "Vitreloy",
                "Orichalcum",
                "Infernite",
                "Elerium",
                "Soul_Gem"
              ].forEach(function(res) {
                if (global.resource[res].display && (res === "Soul_Gem" || global.resource[res].amount * 1.05 < global.resource[res].max)) {
                  resList.push(res);
                }
              });
            }
            if (spell === "useless" || resList.length === 0) {
              global.resource.Useless.display = true;
              let gain = Math.floor(seededRandom(1, global.stats.know));
              global.resource.Useless.amount += gain;
              messageQueue(loc("wish_gain_res", [sizeApproximation(gain), global.resource.Useless.name]), "warning", false, ["events"]);
            } else {
              let picked = [resList[Math.floor(seededRandom(0, resList.length))]];
              if (spell === "2xcommon" || spell === "2xrare") {
                picked.push(resList[Math.floor(seededRandom(0, resList.length))]);
              }
              let gains = [];
              picked.forEach(function(res) {
                let gain = 0;
                if (res === "Soul_Gem") {
                  gain = Math.floor(seededRandom(1, global.tech["science"] || 2));
                  global.resource[res].amount += gain;
                } else {
                  gain = Math.floor(seededRandom(1, Math.floor(global.resource[res].max * 0.25)));
                  global.resource[res].amount += gain;
                  if (global.resource[res].amount > global.resource[res].max) {
                    global.resource[res].amount = global.resource[res].max;
                  }
                }
                gains.push(gain);
              });
              if (["2xcommon", "2xrare"].includes(spell)) {
                messageQueue(loc("wish_gain_double", [sizeApproximation(gains[0]), global.resource[picked[0]].name, sizeApproximation(gains[1]), global.resource[picked[1]].name]), "warning", false, ["events"]);
              } else if (["common", "rare"].includes(spell)) {
                messageQueue(loc("wish_gain_res", [sizeApproximation(gains[0]), global.resource[picked[0]].name]), "warning", false, ["events"]);
              } else if (spell === "stolen") {
                global.race.wishStats.bad += Math.floor(seededRandom(50, 100));
                messageQueue(loc("wish_steal_res", [sizeApproximation(gains[0]), global.resource[picked[0]].name]), "warning", false, ["events"]);
              }
            }
          }
        },
        love() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["pet"];
            let rivals = ["gov0", "gov1", "gov2"];
            if (global.race["truepath"] && !global.tech["isolation"] && global.tech["rival"]) {
              rivals.push("gov3");
            }
            rivals.forEach(function(gov) {
              if (global.civic.foreign[gov].hstl > 0 && !global.civic.foreign[gov].anx && !global.civic.foreign[gov].buy && !global.civic.foreign[gov].occ) {
                options.push(gov);
              }
            });
            let spell = options[Math.floor(seededRandom(0, options.length))];
            if (spell === "pet") {
              let msg = events.pet.effect();
              messageQueue(msg, false, false, ["events", "minor_events"]);
            } else {
              global.civic.foreign[spell].hstl = 0;
              messageQueue(loc("wish_love_gov", [govTitle(spell.substring(3))]), false, false, ["minor_events"]);
            }
          }
        },
        excite() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 4;
            let event_pool = eventList("minor");
            if (event_pool.length > 0) {
              let event = event_pool[Math.floor(seededRandom(0, event_pool.length))];
              let msg = events[event].effect();
              messageQueue(msg, false, false, ["events", "minor_events"]);
              global.m_event.l = event;
            }
          }
        },
        famous() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["notorious", "reputable"];
            let event = Math.floor(seededRandom(0, 10));
            let cheeseList = swissKnife(false, true);
            let cheese = cheeseList[Math.floor(seededRandom(0, cheeseList.length))];
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "notorious": {
                global.race.wishStats.fame = -10;
                let args = event === 8 ? [cheese] : [];
                messageQueue(loc("wish_famous", [loc(`wish_notorious${event}`, args)]), "warning", false, ["events"]);
                break;
              }
              case "reputable": {
                global.race.wishStats.fame = 10;
                let args = event === 4 ? [cheese] : [];
                messageQueue(loc("wish_famous", [loc(`wish_reputable${event}`, args)]), "warning", false, ["events"]);
                break;
              }
            }
          }
        },
        strength() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["troops"];
            if (!global.race["strong"]) {
              options.push("trait");
            }
            if (global.tech["military"]) {
              if (global.tech.military === 1) {
                options.push("military");
              } else if (global.tech.military === 2 && global.tech["explosives"]) {
                options.push("military");
              } else if (global.tech.military === 3 && global.tech["oil"]) {
                options.push("military");
              } else if (global.tech.military === 4 && global.tech["high_tech"] && global.tech.high_tech >= 4) {
                options.push("military");
              } else if (global.tech.military === 5 && global.tech["mass"]) {
                options.push("military");
              } else if (global.tech.military === 6 && global.tech["high_tech"] && global.tech.high_tech >= 9 && global.tech["elerium"]) {
                options.push("military");
              } else if (global.tech.military === 7 && global.tech["high_tech"] && global.tech.high_tech >= 13) {
                options.push("military");
              } else if (global.tech.military === 8 && global.tech["high_tech"] && global.tech.high_tech >= 14 && global.tech["science"] && global.tech.science >= 15 && global.tech["infernite"]) {
                options.push("military");
              } else if (global.tech.military === 9 && global.tech["science"] && global.tech.science >= 18) {
                options.push("military");
              } else if (global.tech.military === 10 && global.tech["high_tech"] && global.tech.high_tech >= 18) {
                options.push("military");
              } else if (global.tech.military === 11 && global.tech["asphodel"] && global.tech.asphodel >= 5) {
                options.push("military");
              }
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "troops": {
                if (global.race.wishStats.troop < 25) {
                  global.race.wishStats.troop++;
                  messageQueue(loc("wish_troop"), "warning", false, ["events"]);
                }
                break;
              }
              case "trait": {
                global.race.wishStats.strong = true;
                setTraitRank("strong", { set: 0.25, force: true });
                messageQueue(loc("wish_muscle"), "warning", false, ["events"]);
                break;
              }
              case "military": {
                global.tech.military++;
                switch (global.tech.military) {
                  case 7:
                    if (global.race.species === "sharkin") {
                      unlockAchieve("laser_shark");
                    }
                    break;
                }
                drawCity();
                drawTech();
                let techs2 = {
                  2: "bows",
                  3: "flintlock_rifle",
                  4: "machine_gun",
                  5: "bunk_beds",
                  6: "rail_guns",
                  7: "laser_rifles",
                  8: "plasma_rifles",
                  9: "disruptor_rifles",
                  10: "gauss_rifles",
                  11: "cyborg_soldiers",
                  12: "ethereal_weapons"
                };
                let tech = typeof actions.tech[techs2[global.tech.military]].title === "function" ? actions.tech[techs2[global.tech.military]].title() : actions.tech[techs2[global.tech.military]].title;
                messageQueue(loc("wish_tech", [tech]), "warning", false, ["progress"]);
                break;
              }
            }
          }
        },
        influence() {
          if (global.race.wishStats.minor === 0) {
            global.race.wishStats.minor = traits.wish.vars()[0] / 3;
            let options = ["magazine"];
            if (!global.race.wishStats.astro) {
              options.push("astro");
            }
            if (global.race.wishStats.prof < 25 && global.civic.professor.display) {
              options.push("professor");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "magazine": {
                messageQueue(loc("wish_magazine", [races[global.race.species].name]), "warning", false, ["events"]);
                break;
              }
              case "astro": {
                global.race.wishStats.astro = true;
                messageQueue(loc("wish_astro"), "warning", false, ["events"]);
                break;
              }
              case "professor": {
                global.race.wishStats.prof++;
                messageQueue(loc("wish_prof"), "warning", false, ["events"]);
                break;
              }
            }
          }
        }
      },
      filters: {
        wish(v) {
          return v === 0 ? `<span class="has-text-success">${loc(`power_available`)}</span>` : `<span class="has-text-danger">${v}</span>`;
        },
        label(v) {
          return loc(`wish_${v}`);
        },
        know() {
          return global.resource.Knowledge.name;
        },
        money() {
          return loc("resource_Money_name");
        }
      }
    });
    ["Know", "Money", "Res", "Love", "Excite", "Fame", "Strength", "Influence"].forEach(function(wish) {
      popover(
        `wish${wish}`,
        function() {
          switch (wish) {
            case "Know":
              return loc(`wish_for`, [global.resource.Knowledge.name]);
            case "Money":
              return loc(`wish_for`, [loc("resource_Money_name")]);
            case "Res":
              return loc(`wish_for`, [loc("wish_resources")]);
            case "Love":
              return loc(`wish_for`, [loc("wish_love")]);
            case "Excite":
              return loc(`wish_for`, [loc("wish_event")]);
            case "Fame":
              return loc(`wish_for`, [loc("wish_fame")]);
            case "Strength":
              return loc(`wish_for`, [loc("wish_strength")]);
            case "Influence":
              return loc(`wish_for`, [loc("wish_influence")]);
          }
        },
        {
          elm: `#wish${wish}`
        }
      );
    });
  }
  function majorWish(parent) {
    let container = $(`<div id="majorWish" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header"><span class="has-text-warning">${loc("tech_major_wish")}</span> - <span v-html="$options.filters.wish(major)"></span></div>`));
    let spells = $(`<div class="flexWrap"></div>`);
    container.append(spells);
    spells.append(`<div><b-button id="wishBigMoney" v-html="$options.filters.money()" @click="money()"></b-button></div>`);
    spells.append(`<div><b-button id="wishBigRes" v-html="$options.filters.label('resources')" @click="res()"></b-button></div>`);
    spells.append(`<div><b-button id="wishPlasmid" v-html="$options.filters.label('plasmid')" @click="plasmid()"></b-button></div>`);
    spells.append(`<div><b-button id="wishPower" v-html="$options.filters.label('power')" @click="power()"></b-button></div>`);
    spells.append(`<div><b-button id="wishAdoration" v-html="$options.filters.label('adoration')" @click="adoration()"></b-button></div>`);
    spells.append(`<div><b-button id="wishThrill" v-html="$options.filters.label('thrill')" @click="thrill()"></b-button></div>`);
    spells.append(`<div><b-button id="wishPeace" v-html="$options.filters.label('peace')" @click="peace()"></b-button></div>`);
    spells.append(`<div><b-button id="wishGreatness" v-html="$options.filters.label('greatness')" @click="greatness()"></b-button></div>`);
    vBind({
      el: `#majorWish`,
      data: global.race.wishStats,
      methods: {
        money() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["money", "robbery"];
            if (!global.race.wishStats.casino) {
              options.push("casino");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "money": {
                let cash = Math.floor(seededRandom(Math.round(global.resource.Money.max / 12), Math.round(global.resource.Money.max / 4)));
                global.resource.Money.amount += cash;
                if (global.resource.Money.amount > global.resource.Money.max) {
                  global.resource.Money.amount = global.resource.Money.max;
                }
                messageQueue(loc("wish_cash", [sizeApproximation(cash)]), "warning", false, ["events"]);
                break;
              }
              case "robbery": {
                let cash = Math.floor(seededRandom(Math.round(global.resource.Money.max / 12), Math.round(global.resource.Money.max / 4)));
                global.resource.Money.amount += cash;
                if (global.resource.Money.amount > global.resource.Money.max) {
                  global.resource.Money.amount = global.resource.Money.max;
                }
                let victim = Math.floor(seededRandom(0, 10));
                global.race.wishStats.bad += Math.floor(seededRandom(100, 200));
                messageQueue(loc("wish_robbery", [loc(`wish_robbery${victim}`), sizeApproximation(cash)]), "warning", false, ["events"]);
                break;
              }
              case "casino": {
                global.race.wishStats.casino = true;
                let game = Math.floor(seededRandom(0, 10));
                messageQueue(loc("wish_casino", [loc(`wish_casino${game}`), structName("casino")]), "warning", false, ["events"]);
              }
            }
          }
        },
        res() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["useless", "common", "rare", "stolen", "2xcommon", "2xrare"];
            let spell = options[Math.floor(seededRandom(0, options.length))];
            let resList = [];
            [
              "Lumber",
              "Stone",
              "Furs",
              "Copper",
              "Iron",
              "Aluminium",
              "Cement",
              "Coal",
              "Oil",
              "Uranium",
              "Steel",
              "Titanium",
              "Alloy",
              "Polymer",
              "Iridium",
              "Helium_3",
              "Crystal",
              "Chrysotile"
            ].forEach(function(res) {
              if (global.resource[res].display && global.resource[res].amount * 1.05 < global.resource[res].max) {
                resList.push(res);
              }
            });
            if (spell === "rare" || spell === "stolen" || spell === "2xrare") {
              [
                "Deuterium",
                "Neutronium",
                "Adamantite",
                "Nano_Tube",
                "Graphene",
                "Stanene",
                "Bolognium",
                "Vitreloy",
                "Orichalcum",
                "Infernite",
                "Elerium",
                "Soul_Gem"
              ].forEach(function(res) {
                if (global.resource[res].display && (res === "Soul_Gem" || global.resource[res].amount * 1.05 < global.resource[res].max)) {
                  resList.push(res);
                }
              });
            }
            if (spell === "useless" || resList.length === 0) {
              global.resource.Useless.display = true;
              let gain = Math.floor(seededRandom(100, global.stats.know * 4));
              global.resource.Useless.amount += gain;
              messageQueue(loc("wish_gain_res", [sizeApproximation(gain), global.resource.Useless.name]), "warning", false, ["events"]);
            } else {
              let picked = [resList[Math.floor(seededRandom(0, resList.length))]];
              if (spell === "2xcommon" || spell === "2xrare") {
                picked.push(resList[Math.floor(seededRandom(0, resList.length))]);
              }
              let gains = [];
              picked.forEach(function(res) {
                let gain = 0;
                if (res === "Soul_Gem") {
                  gain = Math.floor(seededRandom(1, global.tech["science"] + global.tech["high_tech"] || 2));
                  global.resource[res].amount += gain;
                } else {
                  gain = Math.floor(seededRandom(1e4, Math.floor(global.resource[res].max * 0.5)));
                  global.resource[res].amount += gain;
                  if (global.resource[res].amount > global.resource[res].max) {
                    global.resource[res].amount = global.resource[res].max;
                  }
                }
                gains.push(gain);
              });
              if (["2xcommon", "2xrare"].includes(spell)) {
                messageQueue(loc("wish_gain_double", [sizeApproximation(gains[0]), global.resource[picked[0]].name, sizeApproximation(gains[1]), global.resource[picked[1]].name]), "warning", false, ["events"]);
              } else if (["common", "rare"].includes(spell)) {
                messageQueue(loc("wish_gain_res", [sizeApproximation(gains[0]), global.resource[picked[0]].name]), "warning", false, ["events"]);
              } else if (spell === "stolen") {
                global.race.wishStats.bad += Math.floor(seededRandom(100, 200));
                messageQueue(loc("wish_steal_res", [sizeApproximation(gains[0]), global.resource[picked[0]].name]), "warning", false, ["events"]);
              }
            }
          }
        },
        plasmid() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["fake", "future"];
            if (!global.race["warlord"]) {
              if (global.tech["blackhole"] && global.tech.blackhole >= 5 && global.interstellar["mass_ejector"] && global.interstellar.mass_ejector.count >= 1) {
                options.push("blackhole");
              } else if (!global.race["cataclysm"] && !global.race["lone_survivor"] && global.race.species !== "sludge") {
                options.push("mad");
              }
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "fake": {
                let gain = Math.floor(seededRandom(100, 5e4));
                global.resource.Knockoff.amount = gain;
                global.resource.Knockoff.display = true;
                messageQueue(loc("wish_plasmid_gain", [gain, loc(`resource_Knockoff_plural_name`)]), "warning", false, ["events"]);
                break;
              }
              case "future": {
                let gain = Math.floor(seededRandom(2, global.tech.science + 2));
                global.stats.pdebt += gain;
                global.race.wishStats.plas += gain;
                if (global.race.universe === "antimatter") {
                  global.prestige.AntiPlasmid.count += gain;
                  global.stats.antiplasmid += gain;
                } else {
                  global.prestige.Plasmid.count += gain;
                  global.stats.plasmid += gain;
                }
                messageQueue(loc("wish_plasmid_gain", [gain, loc(global.race.universe === "antimatter" ? `resource_AntiPlasmid_plural_name` : `resource_Plasmid_plural_name`)]), "warning", false, ["events"]);
                break;
              }
              case "mad": {
                $("body").addClass("nuke");
                let nuke = $('<div class="nuke"></div>');
                $("body").append(nuke);
                setTimeout(function() {
                  nuke.addClass("burn");
                }, 500);
                setTimeout(function() {
                  nuke.addClass("b");
                }, 600);
                setTimeout(function() {
                  global.civic.mad.armed = false;
                  warhead();
                }, 4e3);
                break;
              }
              case "blackhole": {
                let bang = $('<div class="bigbang"></div>');
                $("body").append(bang);
                setTimeout(function() {
                  bang.addClass("burn");
                }, 125);
                setTimeout(function() {
                  bang.addClass("b");
                }, 150);
                setTimeout(function() {
                  bang.addClass("c");
                }, 2e3);
                setTimeout(function() {
                  big_bang();
                }, 4e3);
              }
            }
          }
        },
        power() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["potato"];
            if (!global.race["warlord"] && !global.race.wishStats.ship && (global.tech["shipyard"] || global.tech["science"] && global.tech.science >= 16)) {
              options.push("ship");
            }
            if (!global.race.wishStats.gov) {
              options.push("government");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "potato": {
                global.race.wishStats.potato++;
                messageQueue(loc("wish_energized"), "warning", false, ["events"]);
                break;
              }
              case "ship": {
                global.race.wishStats.ship = true;
                messageQueue(loc("wish_ship"), "warning", false, ["events"]);
                break;
              }
              case "government": {
                global.race.wishStats.gov = true;
                global.civic.govern.type = "dictator";
                messageQueue(loc("wish_gov"), "warning", false, ["events"]);
              }
            }
          }
        },
        adoration() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["priest"];
            if (!global.race.wishStats.temple && !global.race["cataclysm"] && !global.race["lone_survivor"] && !global.race["warlord"]) {
              options.push("temple");
            }
            if (!global.race.wishStats.zigg && !global.race["lone_survivor"] && !global.race["warlord"]) {
              options.push("zigg");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "priest": {
                if (global.civic.priest.display && global.race.wishStats.priest < 25) {
                  global.race.wishStats.priest++;
                  messageQueue(loc("wish_priest"), "warning", false, ["events"]);
                } else {
                  messageQueue(loc("wish_priest_fail"), "warning", false, ["events"]);
                }
                break;
              }
              case "temple": {
                global.race.wishStats.temple = true;
                messageQueue(loc("wish_temple", [structName("temple")]), "warning", false, ["events"]);
                break;
              }
              case "zigg": {
                global.race.wishStats.zigg = true;
                messageQueue(loc("wish_temple", [loc("space_red_ziggurat_title")]), "warning", false, ["events"]);
              }
            }
          }
        },
        thrill() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let event_pool = eventList("major");
            if (event_pool.length > 0) {
              let event = event_pool[Math.floor(seededRandom(0, event_pool.length))];
              let msg = events[event].effect();
              messageQueue(msg, "caution", false, ["events", "major_events"]);
              global.m_event.l = event;
            }
          }
        },
        peace() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["flower"];
            let rivals = ["gov0", "gov1", "gov2"];
            rivals.forEach(function(gov) {
              if (!global.civic.foreign[gov].anx && !global.civic.foreign[gov].buy && !global.civic.foreign[gov].occ && !global.tech["world_control"]) {
                options.push(gov);
              }
            });
            if (global.race["truepath"] && !global.tech["isolation"] && global.tech["rival"] && global.civic.foreign.gov3.hstl > 0) {
              options.push("gov3");
            }
            if (!global.race["truepath"] && global.tech.piracy > 1) {
              options.push("piracy");
            }
            if (global.race["truepath"] && global.space["syndicate"]) {
              options.push("syndicate");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            if (["gov0", "gov1", "gov2"].includes(spell)) {
              global.civic.foreign[spell].hstl = 0;
              global.civic.foreign[spell].anx = true;
              messageQueue(loc("wish_peace_join", [govTitle(spell.substring(3))]), "warning", false, ["events"]);
            } else {
              switch (spell) {
                case "flower":
                  messageQueue(loc("wish_peace_flower"), "warning", false, ["events"]);
                  break;
                case "gov3":
                  global.civic.foreign[spell].hstl = 0;
                  break;
                case "piracy":
                  global.tech.piracy = Math.floor(seededRandom(1, global.tech.piracy));
                  messageQueue(loc("wish_piracy"), "warning", false, ["events"]);
                  break;
                case "syndicate":
                  Object.keys(global.space.syndicate).forEach(function(synd) {
                    if (global.space.syndicate[synd] > 10) {
                      global.space.syndicate[synd] = Math.floor(seededRandom(10, global.space.syndicate[synd]));
                    }
                  });
                  messageQueue(loc("wish_piracy"), "warning", false, ["events"]);
                  break;
              }
            }
          }
        },
        greatness() {
          if (global.race.wishStats.major === 0) {
            global.race.wishStats.major = traits.wish.vars()[0];
            let options = ["wonder"];
            let a_level = alevel();
            if (!global.race["lone_survivor"] && !global.race["warlord"] && !global.stats.feat["wish"] || global.stats.feat["wish"] && global.stats.feat["wish"] < a_level) {
              options.push("feat");
            }
            let spell = options[Math.floor(seededRandom(0, options.length))];
            switch (spell) {
              case "wonder": {
                let wonders = [];
                if (!global.race["lone_survivor"]) {
                  let hasCity = global.race["cataclysm"] || global.race["orbit_decay"] || global.race["warlord"] ? false : true;
                  let hasMars = global.tech["mars"] && !global.race["warlord"] ? true : false;
                  if (!global.city.hasOwnProperty("wonder_lighthouse") && hasCity) {
                    wonders.push("lighthouse");
                  }
                  if (!global.city.hasOwnProperty("wonder_pyramid") && hasCity) {
                    wonders.push("pyramid");
                  }
                  if (!global.space.hasOwnProperty("wonder_statue") && hasMars) {
                    wonders.push("statue");
                  }
                  if (global.race["warlord"]) {
                    if (!global.portal.hasOwnProperty("wonder_gardens")) {
                      wonders.push("gardens");
                    }
                  } else if (global.race["truepath"]) {
                    if (!global.space.hasOwnProperty("wonder_gardens") && global.tech["titan"] && global.tech.titan >= 2) {
                      wonders.push("gardens");
                    }
                  } else {
                    if (!global.interstellar.hasOwnProperty("wonder_gardens") && global.tech["alpha"] && global.tech.alpha >= 2) {
                      wonders.push("gardens");
                    }
                  }
                }
                if (wonders.length > 0) {
                  let monument = wonders[Math.floor(seededRandom(0, wonders.length))];
                  switch (monument) {
                    case "lighthouse":
                      global.city["wonder_lighthouse"] = { count: 1 };
                      break;
                    case "pyramid":
                      global.city["wonder_pyramid"] = { count: 1 };
                      break;
                    case "statue":
                      global.space["wonder_statue"] = { count: 1 };
                      break;
                    case "gardens":
                      global[global.race["warlord"] ? "portal" : global.race["truepath"] ? "space" : "interstellar"]["wonder_gardens"] = { count: 1 };
                      break;
                  }
                  messageQueue(loc("wish_wonder"), "warning", false, ["events"]);
                } else {
                  messageQueue(loc("wish_no_wonder"), "warning", false, ["events"]);
                }
                break;
              }
              case "feat": {
                unlockFeat("wish", global.race.universe === "micro" ? true : false);
                break;
              }
            }
          }
        }
      },
      filters: {
        wish(v) {
          return v === 0 ? `<span class="has-text-success">${loc(`power_available`)}</span>` : `<span class="has-text-danger">${v}</span>`;
        },
        label(v) {
          return loc(`wish_${v}`);
        },
        money() {
          return loc("resource_Money_name");
        }
      }
    });
    ["BigMoney", "BigRes", "Plasmid", "Power", "Adoration", "Thrill", "Peace", "Greatness"].forEach(function(wish) {
      popover(
        `wish${wish}`,
        function() {
          switch (wish) {
            case "BigMoney":
              return loc(`wish_for`, [loc("wish_big_money")]);
            case "BigRes":
              return loc(`wish_for`, [loc("wish_big_resources")]);
            case "Plasmid":
              return loc(`wish_for`, [loc("wish_plasmid")]);
            case "Power":
              return loc(`wish_for`, [loc("wish_power")]);
            case "Adoration":
              return loc(`wish_for`, [loc("wish_adoration")]);
            case "Thrill":
              return loc(`wish_for`, [loc("wish_thrill")]);
            case "Peace":
              return loc(`wish_for`, [loc("wish_peace")]);
            case "Greatness":
              return loc(`wish_for`, [loc("wish_greatness")]);
          }
        },
        {
          elm: `#wish${wish}`
        }
      );
    });
  }
  function ocularPower(parent) {
    let container = $(`<div id="ocularPower" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header"><span class="has-text-warning">${loc("trait_ocular_power_name")}</span> - <span v-html="$options.filters.max()"></span></div>`));
    let powers = $(`<div class="flexWrap"></div>`);
    container.append(powers);
    powers.append(`<div id="oculardisintegration" class="chk"><b-checkbox v-model="d" @input="pow('d')">${loc(`ocular_disintegration`)}</b-checkbox></div>`);
    powers.append(`<div id="ocularpetrification" class="chk"><b-checkbox v-model="p" @input="pow('p')">${loc(`ocular_petrification`)}</b-checkbox></div>`);
    powers.append(`<div id="ocularwound" class="chk"><b-checkbox v-model="w" @input="pow('w')">${loc(`ocular_wound`)}</b-checkbox></div>`);
    powers.append(`<div id="oculartelekinesis" class="chk"><b-checkbox v-model="t" @input="pow('t')">${loc(`ocular_telekinesis`)}</b-checkbox></div>`);
    powers.append(`<div id="ocularfear" class="chk"><b-checkbox v-model="f" @input="pow('f')">${loc(`ocular_fear`)}</b-checkbox></div>`);
    powers.append(`<div id="ocularcharm" class="chk"><b-checkbox v-model="c" @input="pow('c')">${loc(`ocular_charm`)}</b-checkbox></div>`);
    vBind({
      el: `#ocularPower`,
      data: global.race.ocularPowerConfig,
      methods: {
        pow(v) {
          let active = 0;
          ["d", "p", "w", "t", "f", "c"].forEach(function(p) {
            if (global.race.ocularPowerConfig[p]) {
              active++;
            }
            if (active > traits.ocular_power.vars()[0] && p !== v) {
              global.race.ocularPowerConfig[p] = false;
            }
          });
          if (active > traits.ocular_power.vars()[0]) {
            active = 0;
            ["d", "p", "w", "t", "f", "c"].reverse().forEach(function(p) {
              if (global.race.ocularPowerConfig[p]) {
                active++;
              }
              if (active > traits.ocular_power.vars()[0] && p !== v) {
                global.race.ocularPowerConfig[p] = false;
              }
            });
            renderSupernatural();
          }
        }
      },
      filters: {
        max() {
          let active = 0;
          ["d", "p", "w", "t", "f", "c"].forEach(function(p) {
            if (global.race.ocularPowerConfig[p]) {
              active++;
            }
          });
          return loc("ocular_max", [active, traits.ocular_power.vars()[0]]);
        }
      }
    });
    ["disintegration", "petrification", "wound", "telekinesis", "fear", "charm"].forEach(function(power) {
      popover(
        `ocular${power}`,
        function() {
          switch (power) {
            case "disintegration":
              let attack = 50 * (traits.ocular_power.vars()[1] / 100);
              return loc(`ocular_${power}_desc`, [attack]);
            case "petrification":
              return loc(`ocular_${power}_desc`, [global.resource.Stone.name]);
            case "wound":
              let hunt = 60 * (traits.ocular_power.vars()[1] / 100);
              return loc(`ocular_${power}_desc`, [hunt]);
            case "telekinesis":
              let labor = 20 * (traits.ocular_power.vars()[1] / 100);
              return loc(`ocular_${power}_desc`, [labor]);
            case "fear":
              return loc(`ocular_${power}_desc`);
            case "charm":
              let trade = 70 * (traits.ocular_power.vars()[1] / 100);
              return loc(`ocular_${power}_desc`, [trade]);
          }
        },
        {
          elm: `#ocular${power}`
        }
      );
    });
  }
  function renderPsychicPowers() {
    if (!global.settings.tabLoad && (global.settings.civTabs !== 2 || global.settings.govTabs !== 6)) {
      return;
    }
    let parent = $(`#psychicPowers`);
    clearElement(parent);
    if (global.race["psychic"] && global.tech["psychic"]) {
      psychicBoost(parent);
      psychicKill(parent);
      if (global.tech.psychic >= 2) {
        psychicAssault(parent);
      }
      if (global.tech.psychic >= 3) {
        if (!global.race.psychicPowers["cash"]) {
          global.race.psychicPowers["cash"] = 0;
        }
        ;
        psychicFinance(parent);
      }
      if (global.tech["psychicthrall"] && global.tech["unfathomable"] && global.race["unfathomable"]) {
        if (global.tech.psychicthrall >= 2) {
          psychicCapture(parent);
        }
        psychicMindBreak(parent);
      }
    }
  }
  function psychicBoost(parent) {
    let container = $(`<div id="psychicBoost" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_boost_title")} <span v-html="$options.filters.boostTime()"></span></div>`));
    let content = $(`<div></div>`);
    container.append(content);
    let scrollMenu = ``;
    Object.keys(atomic_mass).forEach(function(res) {
      if (global.resource[res].display) {
        scrollMenu += `<b-radio-button v-model="b.r" native-value="${res}">${global.resource[res].name}</b-radio-button>`;
      }
    });
    content.append(`<div id="psyhscrolltarget" class="left hscroll"><b-field class="buttonList">${scrollMenu}</b-field></div>`);
    container.append(`<div><b-button v-html="$options.filters.boost(b.r)" @click="boostVal()"></b-button></div>`);
    if (global.tech.psychic >= 4) {
      let channel = $(`<div class="gap">${loc("psychic_channel")}</div>`);
      let psy = $(`<span class="current">{{ c.boost }}</span>`);
      let sub = $(`<span role="button" class="sub" @click="sub" aria-label="Decresae Energy reserved for ${loc(`psychic_attack`)}"><span>&laquo;</span></span>`);
      let add = $(`<span role="button" class="add" @click="add" aria-label="Increase Energy reserved for ${loc(`psychic_attack`)}"><span>&raquo;</span></span>`);
      channel.append(sub);
      channel.append(psy);
      channel.append(add);
      container.append(channel);
    }
    let cost = global.tech.psychic >= 5 ? 60 : 75;
    let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
    vBind({
      el: `#psychicBoost`,
      data: {
        b: global.race.psychicPowers.boost,
        c: global.tech.psychic >= 4 ? global.race.psychicPowers.channel : {}
      },
      methods: {
        boostVal() {
          if (global.resource.Energy.amount >= cost) {
            global.resource.Energy.amount -= cost;
            global.race.psychicPowers.boostTime = 72 * rank;
          }
        },
        add() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.boost + global.race.psychicPowers.channel.assault + global.race.psychicPowers.channel.cash < 100) {
              global.race.psychicPowers.channel.boost++;
            } else {
              break;
            }
          }
        },
        sub() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.boost > 0) {
              global.race.psychicPowers.channel.boost--;
            } else {
              break;
            }
          }
        }
      },
      filters: {
        boost(r) {
          return loc(`psychic_boost_button`, [global.resource[r] ? global.resource[r].name : "N/A", cost]);
        },
        boostTime() {
          return global.race.psychicPowers.boostTime > 0 ? loc(`psychic_boost_time`, [global.race.psychicPowers.boostTime]) : "";
        }
      }
    });
    const scrollContainer = document.getElementById("psyhscrolltarget");
    scrollContainer.addEventListener("wheel", (evt) => {
      evt.preventDefault();
      scrollContainer.scrollLeft += evt.deltaY;
    });
    popover(
      "psychicBoost",
      function() {
        return loc(`psychic_boost_desc`, [traits.psychic.vars()[3]]);
      },
      {
        elm: "#psychicBoost > div > button"
      }
    );
  }
  function psychicKill(parent) {
    let container = $(`<div id="psychicKill" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_murder_title")}</div>`));
    container.append(`<div><b-button v-html="$options.filters.kill()" @click="murder()"></b-button></div>`);
    let cost = global.tech.psychic >= 5 ? 8 : 10;
    vBind({
      el: `#psychicKill`,
      data: {},
      methods: {
        murder() {
          if (global.resource.Energy.amount >= cost && global.resource[global.race.species].amount >= 1) {
            global.resource.Energy.amount -= cost;
            global.resource[global.race.species].amount--;
            global.stats.psykill++;
            blubberFill(1);
            if (global.race["anthropophagite"]) {
              modRes("Food", 1e4 * traits.anthropophagite.vars()[0], true);
            }
            if (global.stats.psykill === 10) {
              renderPsychicPowers();
            }
          }
        }
      },
      filters: {
        kill() {
          return loc(`psychic_murder_button`, [cost]);
        }
      }
    });
    popover(
      "psychicKill",
      function() {
        return loc(`psychic_murder_desc`);
      },
      {
        elm: "#psychicKill > div > button"
      }
    );
  }
  function psychicAssault(parent) {
    let container = $(`<div id="psychicAssault" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_assault_title")} <span v-html="$options.filters.boostTime()"></span></div>`));
    container.append(`<div><b-button v-html="$options.filters.boost()" @click="boostVal()"></b-button></div>`);
    if (global.tech.psychic >= 4) {
      let channel = $(`<div class="gap">${loc("psychic_channel")}</div>`);
      let psy = $(`<span class="current">{{ assault }}</span>`);
      let sub = $(`<span role="button" class="sub" @click="sub" aria-label="Decresae Energy reserved for ${loc(`psychic_attack`)}"><span>&laquo;</span></span>`);
      let add = $(`<span role="button" class="add" @click="add" aria-label="Increase Energy reserved for ${loc(`psychic_attack`)}"><span>&raquo;</span></span>`);
      channel.append(sub);
      channel.append(psy);
      channel.append(add);
      container.append(channel);
    }
    let cost = global.tech.psychic >= 5 ? 36 : 45;
    let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
    vBind({
      el: `#psychicAssault`,
      data: global.tech.psychic >= 4 ? global.race.psychicPowers.channel : {},
      methods: {
        boostVal() {
          if (global.resource.Energy.amount >= cost) {
            global.resource.Energy.amount -= cost;
            global.race.psychicPowers.assaultTime = 72 * rank;
          }
        },
        add() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.boost + global.race.psychicPowers.channel.assault + global.race.psychicPowers.channel.cash < 100) {
              global.race.psychicPowers.channel.assault++;
            } else {
              break;
            }
          }
        },
        sub() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.assault > 0) {
              global.race.psychicPowers.channel.assault--;
            } else {
              break;
            }
          }
        }
      },
      filters: {
        boost() {
          return loc(`psychic_boost_button`, [loc(`psychic_attack`), cost]);
        },
        boostTime() {
          return global.race.psychicPowers.assaultTime > 0 ? loc(`psychic_boost_time`, [global.race.psychicPowers.assaultTime]) : "";
        }
      }
    });
    popover(
      "psychicAssault",
      function() {
        return loc(`psychic_assault_desc`, [traits.psychic.vars()[3]]);
      },
      {
        elm: "#psychicAssault > div > button"
      }
    );
  }
  function psychicFinance(parent) {
    let container = $(`<div id="psychicFinance" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_profit_title")} <span v-html="$options.filters.boostTime()"></span></div>`));
    container.append(`<div><b-button v-html="$options.filters.boost()" @click="boostVal()"></b-button></div>`);
    if (global.tech.psychic >= 4) {
      let channel = $(`<div class="gap">${loc("psychic_channel")}</div>`);
      let psy = $(`<span class="current">{{ cash }}</span>`);
      let sub = $(`<span role="button" class="sub" @click="sub" aria-label="Decresae Energy reserved for ${loc(`psychic_profit`)}"><span>&laquo;</span></span>`);
      let add = $(`<span role="button" class="add" @click="add" aria-label="Increase Energy reserved for ${loc(`psychic_profit`)}"><span>&raquo;</span></span>`);
      channel.append(sub);
      channel.append(psy);
      channel.append(add);
      container.append(channel);
    }
    let cost = global.tech.psychic >= 5 ? 52 : 65;
    let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
    vBind({
      el: `#psychicFinance`,
      data: global.tech.psychic >= 4 ? global.race.psychicPowers.channel : {},
      methods: {
        boostVal() {
          if (global.resource.Energy.amount >= cost) {
            global.resource.Energy.amount -= cost;
            global.race.psychicPowers.cash = 72 * rank;
          }
        },
        add() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.boost + global.race.psychicPowers.channel.assault + global.race.psychicPowers.channel.cash < 100) {
              global.race.psychicPowers.channel.cash++;
            } else {
              break;
            }
          }
        },
        sub() {
          let keyMult = keyMultiplier();
          for (let i = 0; i < keyMult; i++) {
            if (global.race.psychicPowers.channel.cash > 0) {
              global.race.psychicPowers.channel.cash--;
            } else {
              break;
            }
          }
        }
      },
      filters: {
        boost() {
          return loc(`psychic_boost_button`, [loc(`psychic_profit`), cost]);
        },
        boostTime() {
          return global.race.psychicPowers.cash > 0 ? loc(`psychic_boost_time`, [global.race.psychicPowers.cash]) : "";
        }
      }
    });
    popover(
      "psychicFinance",
      function() {
        return loc(`psychic_profit_desc`, [traits.psychic.vars()[3]]);
      },
      {
        elm: "#psychicFinance > div > button"
      }
    );
  }
  function psychicMindBreak(parent) {
    let container = $(`<div id="psychicMindBreak" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_mind_break_title")}</div>`));
    container.append(`<div><b-button v-html="$options.filters.break()" @click="breakMind()"></b-button></div>`);
    let cost = global.tech.psychic >= 5 ? 64 : 80;
    vBind({
      el: `#psychicMindBreak`,
      data: {},
      methods: {
        breakMind() {
          if (global.resource.Energy.amount >= cost && global.tech["unfathomable"]) {
            let imprisoned = [];
            if (global.city.hasOwnProperty("surfaceDwellers")) {
              for (let i = 0; i < global.city.surfaceDwellers.length; i++) {
                let jailed = global.city.captive_housing[`jailrace${i}`];
                if (jailed > 0) {
                  imprisoned.push(i);
                }
              }
            }
            if (imprisoned.length > 0) {
              let k = imprisoned[Math.rand(0, imprisoned.length)];
              global.city.captive_housing[`jailrace${k}`]--;
              global.city.captive_housing[`race${k}`]++;
              global.resource.Energy.amount -= cost;
            }
          }
        }
      },
      filters: {
        break() {
          return loc(`psychic_mind_break_button`, [cost]);
        }
      }
    });
    popover(
      "psychicMindBreak",
      function() {
        return loc(`psychic_mind_break_desc`);
      },
      {
        elm: "#psychicMindBreak > div > button"
      }
    );
  }
  function psychicCapture(parent) {
    let container = $(`<div id="psychicCapture" class="industry"></div>`);
    parent.append(container);
    container.append($(`<div class="header">${loc("psychic_stun_title")}</div>`));
    container.append(`<div><b-button v-html="$options.filters.break()" @click="stun()"></b-button></div>`);
    let cost = global.tech.psychic >= 5 ? 80 : 100;
    vBind({
      el: `#psychicCapture`,
      data: {},
      methods: {
        stun() {
          if (global.resource.Energy.amount >= cost && global.tech["unfathomable"]) {
            let usedCap = 0;
            if (global.city.hasOwnProperty("surfaceDwellers")) {
              for (let i = 0; i < global.city.surfaceDwellers.length; i++) {
                let mindbreak = global.city.captive_housing[`race${i}`];
                let jailed = global.city.captive_housing[`jailrace${i}`];
                usedCap += mindbreak + jailed;
              }
            }
            if (usedCap < global.city.captive_housing.raceCap) {
              let k = Math.rand(0, global.city.surfaceDwellers.length);
              global.city.captive_housing[`jailrace${k}`]++;
              global.resource.Energy.amount -= cost;
            }
          }
        }
      },
      filters: {
        break() {
          return loc(`psychic_stun_button`, [cost]);
        }
      }
    });
    popover(
      "psychicCapture",
      function() {
        return loc(`psychic_stun_desc`);
      },
      {
        elm: "#psychicCapture > div > button"
      }
    );
  }
  function blubberFill(v) {
    if (global.race["blubber"] && global.city.hasOwnProperty("oil_well")) {
      let cap = (global.city.oil_well.count + (global.space["oil_extractor"] ? global.space.oil_extractor.count : 0)) * 50;
      global.city.oil_well.dead += v;
      if (global.city.oil_well.dead > cap) {
        global.city.oil_well.dead = cap;
      }
    }
  }

  // src/functions.js
  var popperRef = false;
  function popover(id, content, opts) {
    if (!opts) {
      opts = {};
    }
    if (!opts.hasOwnProperty("elm")) {
      opts["elm"] = "#" + id;
    }
    if (!opts.hasOwnProperty("bind")) {
      opts["bind"] = true;
    }
    if (!opts.hasOwnProperty("unbind")) {
      opts["unbind"] = true;
    }
    if (!opts.hasOwnProperty("placement")) {
      opts["placement"] = "bottom";
    }
    if (opts["bind"]) {
      $(opts.elm).on(opts["bind_mouse_enter"] ? "mouseenter" : "mouseover", function() {
        if (popperRef || $(`#popper`).length > 0) {
          clearPopper();
        }
        let wide = opts["wide"] ? " wide" : "";
        let classes = opts["classes"] ? opts["classes"] : `has-background-light has-text-dark pop-desc`;
        var popper = $(`<div id="popper" class="popper${wide} ${classes}" data-id="${id}"></div>`);
        if (opts["attach"]) {
          $(opts["attach"]).append(popper);
        } else {
          $(`#main`).append(popper);
        }
        if (content) {
          popper.append(typeof content === "function" ? content({ this: this, popper }) : content);
        }
        popperRef = Popper.createPopper(
          opts["self"] ? this : $(opts.elm)[0],
          document.querySelector(`#popper`),
          {
            placement: opts["placement"],
            modifiers: [
              {
                name: "flip",
                enabled: true
              },
              {
                name: "offset",
                options: {
                  offset: opts["offset"] ? opts["offset"] : [0, 0]
                }
              }
            ]
          }
        );
        popper.show();
        if (opts.hasOwnProperty("in") && typeof opts["in"] === "function") {
          opts["in"]({ this: this, popper, id: `popper` });
        }
        if (eventActive("firework") && global[global.race["cataclysm"] || global.race["orbit_decayed"] ? "space" : "city"].firework.on > 0) {
          $(popper).append(`<span class="pyro"><span class="before"></span><span class="after"></span></span>`);
        }
      });
    }
    if (opts["unbind"]) {
      if ("ontouchstart" in document.documentElement && navigator.userAgent.match(global.settings.touch) ? true : false) {
        $(opts.elm).on("touchend", function(e) {
          clearPopper();
          if (opts.hasOwnProperty("out") && typeof opts["out"] === "function") {
            opts["out"]({ this: this, popper: $(`#popper`), id: `popper` });
          }
        });
      } else {
        $(opts.elm).on(opts["bind_mouse_enter"] ? "mouseleave" : "mouseout", function() {
          clearPopper();
          if (opts.hasOwnProperty("out") && typeof opts["out"] === "function") {
            opts["out"]({ this: this, popper: $(`#popper`), id: `popper` });
          }
        });
      }
    }
  }
  if ("ontouchstart" in document.documentElement && navigator.userAgent.match(global.settings.touch) ? true : false) {
    $(document).on("touchend", function(e) {
      if ($(`.popper`).length === 1) {
        clearPopper();
        return;
      }
    });
  }
  function clearPopper(id) {
    if (id && $(`#popper`).data("id") !== id) {
      return;
    }
    $(`#popper`).hide();
    if (popperRef) {
      popperRef.destroy();
      popperRef = false;
    }
    clearElement($(`#popper`), true);
  }
  function gameLoop(act) {
    switch (act) {
      case "stop":
        {
          if (webWorker.w) {
            webWorker.w.postMessage({ loop: "clear" });
          }
          if (global.settings.at > 0) {
            global.settings.at = atrack.t;
          }
          webWorker.s = false;
        }
        break;
      case "start": {
        addATime(Date.now());
        const timers = loopTimers();
        webWorker.mt = timers.webWorkerMainTimer;
        if (webWorker.w) {
          webWorker.w.postMessage({ loop: "start", period: timers.mainTimer });
        }
        webWorker.s = true;
      }
    }
  }
  function loopTimers() {
    let modifier = 1;
    if (global.race["slow"]) {
      modifier *= 1 + traits.slow.vars()[0] / 100;
    }
    if (global.race["hyper"]) {
      modifier *= 1 - traits.hyper.vars()[0] / 100;
    }
    const webWorkerMainTimer = Math.floor(250 * modifier);
    const baseMidTimer = webWorker.midRatio * webWorkerMainTimer;
    const baseLongTimer = webWorker.longRatio * webWorkerMainTimer;
    const timeAccelerationFactor = 2;
    const aTimeMultiplier = atrack.t > 0 ? 1 / timeAccelerationFactor : 1;
    return {
      webWorkerMainTimer,
      mainTimer: Math.ceil(webWorkerMainTimer * aTimeMultiplier),
      longTimer: Math.ceil(baseLongTimer * aTimeMultiplier),
      baseLongTimer,
      timeAccelerationFactor
    };
  }
  function addATime(currentTimestamp) {
    if (exceededATimeThreshold(currentTimestamp) || global.stats.hasOwnProperty("current") && global.settings.at > 0) {
      let timeDiff = currentTimestamp - global.stats.current;
      if (global.settings.at > 11520) {
        global.settings.at = 0;
      }
      if (timeDiff >= 12e4) {
        const timers = loopTimers();
        const gameDayDuration = timers.baseLongTimer;
        global.settings.at += Math.floor(2 / 3 * timeDiff * timers.timeAccelerationFactor / gameDayDuration);
      }
      if (global.settings.at > 11520) {
        global.settings.at = 11520;
      }
      atrack.t = global.settings.at;
      global.stats.current = currentTimestamp;
    }
  }
  function exceededATimeThreshold(currentTimestamp) {
    return global.stats.hasOwnProperty("current") && currentTimestamp - global.stats.current >= 12e4;
  }
  window.exportGame = function exportGame() {
    if (global.race["noexport"]) {
      return `Export is not available during ${global.race["noexport"]} Creation`;
    }
    addATime(Date.now());
    return LZString.compressToBase64(JSON.stringify(global));
  };
  window.importGame = function importGame2(data, utf16) {
    let saveState = JSON.parse(utf16 ? LZString.decompressFromUTF16(data) : LZString.decompressFromBase64(data));
    if (saveState && "evolution" in saveState && "settings" in saveState && "stats" in saveState && "plasmid" in saveState.stats) {
      if (webWorker.w) {
        webWorker.w.terminate();
      }
      if (saveState.hasOwnProperty("tech") && utf16) {
        if (saveState.tech.hasOwnProperty("whitehole") && saveState.tech.whitehole >= 4) {
          saveState.tech.whitehole = 3;
          saveState.resource.Soul_Gem.amount += 10;
          saveState.resource.Knowledge.amount += 15e5;
          saveState.stats.know -= 15e5;
        }
        if (saveState.tech.hasOwnProperty("quaked") && saveState.tech.quaked === 2) {
          saveState.tech.quaked = 1;
          saveState.resource.Knowledge.amount += 5e5;
          saveState.stats.know -= 5e5;
        }
        if (saveState.tech.hasOwnProperty("corrupted_ai") && saveState.tech.corrupted_ai === 3) {
          saveState.tech.corrupted_ai = 1;
          saveState.resource.Knowledge.amount += 5e6;
          saveState.stats.know -= 5e6;
        }
      }
      if (Array.isArray(saveState.lastMsg)) {
        for (let i = 0; i < saveState.lastMsg.length; i++) {
          saveState.lastMsg[i].c = saveState.lastMsg[i].c.replaceAll('"', "");
        }
      } else {
        for (const msgQueue in saveState.lastMsg) {
          for (const msg of saveState.lastMsg[msgQueue]) {
            msg.c = msg.c.replaceAll('"', "");
          }
        }
      }
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(saveState)));
      window.location.reload();
    }
  };
  function powerGrid(type, reset3) {
    let grids = gridDefs();
    let power_structs = [];
    switch (type) {
      case "power":
        power_structs = [
          "city:transmitter",
          "prtl_ruins:arcology",
          "city:apartment",
          "eden_asphodel:rectory",
          "eden_asphodel:corruptor",
          "int_alpha:habitat",
          "int_alpha:luxury_condo",
          "spc_red:spaceport",
          "spc_titan:titan_spaceport",
          "spc_titan:electrolysis",
          "int_alpha:starport",
          "eden_asphodel:encampment",
          "spc_dwarf:shipyard",
          "spc_titan:ai_core2",
          "spc_eris:drone_control",
          "spc_titan:ai_colonist",
          "int_blackhole:s_gate",
          "gxy_gateway:starbase",
          "spc_triton:fob",
          "prtl_wasteland:demon_forge",
          "prtl_wasteland:twisted_lab",
          "spc_enceladus:operating_base",
          "spc_enceladus:zero_g_lab",
          "spc_titan:sam",
          "gxy_gateway:ship_dock",
          "prtl_ruins:hell_forge",
          "int_neutron:stellar_forge",
          "int_neutron:citadel",
          "prtl_badlands:mortuary",
          "tau_home:orbital_station",
          "tau_red:orbital_platform",
          "tau_gas:refueling_station",
          "tau_home:tau_farm",
          "tau_gas:ore_refinery",
          "tau_gas:whaling_station",
          "city:coal_mine",
          "spc_moon:moon_base",
          "spc_red:red_tower",
          "spc_home:nav_beacon",
          "int_proxima:xfer_station",
          "gxy_stargate:telemetry_beacon",
          "int_nebula:nexus",
          "gxy_stargate:gateway_depot",
          "spc_dwarf:elerium_contain",
          "spc_gas:gas_mining",
          "spc_belt:space_station",
          "spc_gas_moon:outpost",
          "gxy_gorddon:embassy",
          "gxy_gorddon:dormitory",
          "gxy_alien1:resort",
          "spc_gas_moon:oil_extractor",
          "prtl_wasteland:hell_factory",
          "int_alpha:int_factory",
          "city:factory",
          "spc_red:red_factory",
          "spc_dwarf:world_controller",
          "prtl_fortress:turret",
          "prtl_badlands:war_drone",
          "city:wardenclyffe",
          "city:biolab",
          "city:mine",
          "city:rock_quarry",
          "city:cement_plant",
          "city:sawmill",
          "city:mass_driver",
          "int_neutron:neutron_miner",
          "prtl_fortress:war_droid",
          "prtl_pit:soul_forge",
          "gxy_chthonian:excavator",
          "prtl_pit:shadow_mine",
          "prtl_pit:tavern",
          "int_blackhole:far_reach",
          "prtl_badlands:sensor_drone",
          "prtl_badlands:attractor",
          "city:metal_refinery",
          "gxy_stargate:gateway_station",
          "gxy_alien1:vitreloy_plant",
          "gxy_alien2:foothold",
          "gxy_gorddon:symposium",
          "int_blackhole:mass_ejector",
          "city:casino",
          "spc_hell:spc_casino",
          "tau_home:tauceti_casino",
          "prtl_wasteland:hell_casino",
          "prtl_fortress:repair_droid",
          "gxy_stargate:defense_platform",
          "prtl_ruins:guard_post",
          "prtl_lake:cooling_tower",
          "prtl_lake:harbor",
          "prtl_spire:purifier",
          "prtl_ruins:archaeology",
          "prtl_pit:gun_emplacement",
          "prtl_gate:gate_turret",
          "prtl_pit:soul_attractor",
          "prtl_gate:infernite_mine",
          "int_sirius:ascension_trigger",
          "spc_kuiper:orichalcum_mine",
          "spc_kuiper:elerium_mine",
          "spc_kuiper:uranium_mine",
          "spc_kuiper:neutronium_mine",
          "spc_dwarf:m_relay",
          "tau_home:tau_factory",
          "tau_home:infectious_disease_lab",
          "tau_home:alien_outpost",
          "tau_gas:womling_station",
          "spc_red:atmo_terraformer",
          "tau_star:matrix",
          "tau_home:tau_cultural_center",
          "eden_elysium:sacred_smelter",
          "prtl_pit:soul_capacitor",
          "prtl_lake:oven_complete",
          "eden_elysium:elysanite_mine",
          "eden_elysium:elerium_containment",
          "eden_elysium:pillbox",
          "eden_elysium:archive",
          "eden_elysium:restaurant",
          "eden_elysium:eden_cement",
          "eden_isle:spirit_battery",
          "eden_isle:spirit_vacuum",
          "city:replicator"
        ];
        break;
      case "moon":
        power_structs = ["spc_moon:helium_mine", "spc_moon:iridium_mine", "spc_moon:observatory"];
        break;
      case "red":
        power_structs = ["spc_red:living_quarters", "spc_red:exotic_lab", "spc_red:red_mine", "spc_red:fabrication", "spc_red:biodome", "spc_red:vr_center"];
        break;
      case "belt":
        power_structs = ["spc_belt:elerium_ship", "spc_belt:iridium_ship", "spc_belt:iron_ship"];
        break;
      case "alpha":
        power_structs = ["int_alpha:fusion", "int_alpha:mining_droid", "int_alpha:processing", "int_alpha:laboratory", "int_alpha:g_factory", "int_alpha:exchange", "int_alpha:zoo"];
        break;
      case "nebula":
        power_structs = ["int_nebula:harvester", "int_nebula:elerium_prospector"];
        break;
      case "gateway":
        power_structs = ["gxy_gateway:bolognium_ship", "gxy_gateway:dreadnought", "gxy_gateway:cruiser_ship", "gxy_gateway:frigate_ship", "gxy_gateway:corvette_ship", "gxy_gateway:scout_ship"];
        break;
      case "alien2":
        power_structs = ["gxy_alien2:armed_miner", "gxy_alien2:ore_processor", "gxy_alien2:scavenger"];
        break;
      case "lake":
        power_structs = ["prtl_lake:bireme", "prtl_lake:transport"];
        break;
      case "spire":
        power_structs = ["prtl_spire:port", "prtl_spire:base_camp", "prtl_spire:mechbay"];
        break;
      case "titan":
        power_structs = ["spc_titan:titan_quarters", "spc_titan:titan_mine", "spc_titan:g_factory", "spc_titan:decoder"];
        break;
      case "enceladus":
        power_structs = ["spc_enceladus:water_freighter", "spc_enceladus:operating_base", "spc_enceladus:zero_g_lab"];
        break;
      case "eris":
        power_structs = ["spc_eris:shock_trooper", "spc_eris:tank"];
        break;
      case "tau_home":
        power_structs = ["tau_home:colony", "tau_home:tau_factory", "tau_home:mining_pit", "tau_home:infectious_disease_lab"];
        break;
      case "tau_red":
        power_structs = ["tau_red:womling_village", "tau_red:womling_farm", "tau_red:overseer", "tau_red:womling_mine", "tau_red:womling_fun", "tau_red:womling_lab"];
        break;
      case "tau_roid":
        power_structs = ["tau_roid:mining_ship", "tau_roid:whaling_ship"];
        break;
      case "asphodel":
        power_structs = ["eden_asphodel:soul_engine", "eden_asphodel:bunker", "eden_asphodel:asphodel_harvester", "eden_asphodel:ectoplasm_processor", "eden_asphodel:research_station", "eden_asphodel:bliss_den"];
        break;
    }
    if (reset3) {
      grids[type].l.length = 0;
    }
    power_structs.forEach(function(struct) {
      if (!grids[type].l.includes(struct)) {
        grids[type].l.push(struct);
      }
    });
    if (grids[type].l.length > power_structs.length) {
      grids[type].l.forEach(function(struct) {
        if (!power_structs.includes(struct)) {
          grids[type].l.splice(grids[type].l.indexOf(struct), 1);
        }
      });
    }
  }
  function initMessageQueue(filters) {
    filters = filters || message_filters;
    filters.forEach(function(filter) {
      message_logs[filter] = [];
      if (!global.settings.msgFilters[message_logs.view].vis) {
        $(`#msgQueueFilter-${message_logs.view}`).removeClass("is-active").attr("aria-disabled", "false");
        $(`#msgQueueFilter-${filter}`).addClass("is-active").attr("aria-disabled", "true");
        message_logs.view = filter;
      }
    });
  }
  function messageQueue(msg, color, dnr, tags, reload) {
    tags = tags || [];
    if (!reload && !tags.includes("all")) {
      tags.push("all");
    }
    color = color || "warning";
    if (tags.includes(message_logs.view)) {
      let new_message = $('<p class="has-text-' + color + '"></p>').text(msg);
      $("#msgQueueLog").prepend(new_message);
      if ($("#msgQueueLog").children().length > global.settings.msgFilters[message_logs.view].max) {
        $("#msgQueueLog").children().last().remove();
      }
    }
    tags.forEach(function(tag) {
      message_logs[tag].unshift({ msg, color });
      if (message_logs[tag].length > global.settings.msgFilters[tag].max) {
        message_logs[tag].pop();
      }
    });
    if (!dnr) {
      tags.forEach(function(tag) {
        if (global.lastMsg[tag]) {
          global.lastMsg[tag].unshift({ m: msg, c: color });
          if (global.lastMsg[tag].length > global.settings.msgFilters[tag].save) {
            global.lastMsg[tag].splice(global.settings.msgFilters[tag].save);
          }
        }
      });
    }
  }
  function removeFromQueue(build_ids) {
    for (let i = global.queue.queue.length - 1; i >= 0; i--) {
      if (build_ids.includes(global.queue.queue[i].id)) {
        global.queue.queue.splice(i, 1);
      }
    }
  }
  function removeFromRQueue(tech_trees) {
    for (let i = global.r_queue.queue.length - 1; i >= 0; i--) {
      if (tech_trees.includes(actions.tech[global.r_queue.queue[i].type].grant[0])) {
        global.r_queue.queue.splice(i, 1);
      }
    }
  }
  function calcQueueMax() {
    let max_queue = global.tech["queue"] >= 2 ? global.tech["queue"] >= 3 ? 8 : 5 : 3;
    if (global.stats.feat["journeyman"] && global.stats.feat["journeyman"] >= 2 && global.stats.achieve["seeder"] && global.stats.achieve.seeder.l >= 2) {
      let rank = Math.min(global.stats.achieve.seeder.l, global.stats.feat["journeyman"]);
      max_queue += rank >= 4 ? 2 : 1;
    }
    if (global.genes["queue"] && global.genes["queue"] >= 2) {
      max_queue *= 2;
    }
    let pragVal = govActive("pragmatist", 0);
    if (pragVal) {
      max_queue = Math.round(max_queue * (1 + pragVal / 100));
    }
    global.queue.max = max_queue;
  }
  function calcRQueueMax() {
    let max_queue = 3;
    if (global.stats.feat["journeyman"] && global.stats.achieve["seeder"] && global.stats.achieve.seeder.l > 0) {
      let rank = Math.min(global.stats.achieve.seeder.l, global.stats.feat["journeyman"]);
      max_queue += rank >= 3 ? rank >= 5 ? 3 : 2 : 1;
    }
    if (global.genes["queue"] && global.genes["queue"] >= 2) {
      max_queue *= 2;
    }
    let theoryVal = govActive("theorist", 0);
    if (theoryVal) {
      max_queue = Math.round(max_queue * (1 + theoryVal / 100));
    }
    global.r_queue.max = max_queue;
  }
  function buildQueue() {
    clearDragQueue();
    clearElement($("#buildQueue"));
    $("#buildQueue").append($(`
        <h2 class="has-text-success">${loc("building_queue")} ({{ | used_q }}/{{ max }})</h2>
        <span id="pausequeue" class="${global.queue.pause ? "pause" : "play"}" role="button" @click="pauseQueue()" :aria-label="pausedesc()"></span>
    `));
    if (global.settings.queuestyle) {
      $("#buildQueue").addClass(global.settings.queuestyle);
    }
    let queue = $(`<ul class="buildList"></ul>`);
    $("#buildQueue").append(queue);
    queue.append($(`<li v-for="(item, index) in queue"><a v-bind:id="setID(index)" class="has-text-warning queued" v-bind:class="{ 'qany': item.qa }" @click="remove(index)" role="link"><span v-bind:class="setData(index,'res')" v-bind="setData(index,'data')">{{ item.label }}{{ item.q | count }}</span> [<span v-bind:class="{ 'has-text-danger': item.cna, 'has-text-success': !item.cna }">{{ item.time | time }}{{ item.t_max | max_t(item.time) }}</span>]</a></li>`));
    try {
      vBind({
        el: "#buildQueue",
        data: global.queue,
        methods: {
          remove(index2) {
            let keyMult = keyMultiplier();
            for (let i = 0; i < keyMult; i++) {
              if (global.queue.queue[index2].q > 0) {
                global.queue.queue[index2].q -= global.queue.queue[index2].qs;
              }
              if (global.queue.queue[index2].q <= 0) {
                clearPopper(`q${global.queue.queue[index2].id}${index2}`);
                global.queue.queue.splice(index2, 1);
                buildQueue();
                break;
              }
            }
          },
          setID(index2) {
            return `q${global.queue.queue[index2].id}${index2}`;
          },
          setData(index2, prefix) {
            let c_action;
            let segments = global.queue.queue[index2].id.split("-");
            if (segments[0].substring(0, 4) === "arpa") {
              c_action = segments[0].substring(4);
            } else if (segments[0] === "tp" && segments[1].substring(0, 4) === "ship") {
              let raw = shipCosts(global.queue.queue[index2].type);
              let costs = {};
              Object.keys(raw).forEach(function(res) {
                costs[res] = function() {
                  return raw[res];
                };
              });
              c_action = { cost: costs };
            } else if (segments[0] === "hell" && segments[1].substring(0, 4) === "mech") {
              let costs = mechCost(global.queue.queue[index2].type.size, global.queue.queue[index2].type.infernal, true);
              c_action = { cost: costs };
            } else if (segments[0] === "city" || segments[0] === "evolution" || segments[0] === "starDock") {
              c_action = actions[segments[0]][segments[1]];
            } else {
              Object.keys(actions[segments[0]]).forEach(function(region) {
                if (actions[segments[0]][region].hasOwnProperty(segments[1])) {
                  c_action = actions[segments[0]][region][segments[1]];
                }
              });
            }
            let final_costs = {};
            if (c_action["cost"]) {
              let costs = adjustCosts(c_action);
              Object.keys(costs).forEach(function(res) {
                let cost = costs[res]();
                if (cost > 0) {
                  final_costs[`${prefix}-${res}`] = cost;
                }
              });
            }
            return final_costs;
          },
          pauseQueue() {
            $(`#pausequeue`).removeClass("play");
            $(`#pausequeue`).removeClass("pause");
            if (global.queue.pause) {
              global.queue.pause = false;
              $(`#pausequeue`).addClass("play");
            } else {
              global.queue.pause = true;
              $(`#pausequeue`).addClass("pause");
            }
          },
          pausedesc() {
            return global.queue.pause ? loc("queue_play") : loc("queue_pause");
          }
        },
        filters: {
          time(time) {
            return timeFormat(time);
          },
          count(q) {
            return q > 1 ? ` (${q})` : "";
          },
          max_t(max, time) {
            return time === max || time < 0 ? "" : ` / ${timeFormat(max)}`;
          },
          used_q() {
            let used = 0;
            for (let i = 0; i < global.queue.queue.length; i++) {
              used += Math.ceil(global.queue.queue[i].q / global.queue.queue[i].qs);
            }
            return used;
          }
        }
      });
      dragQueue();
    } catch {
      global.queue.queue = [];
    }
  }
  function clearDragQueue() {
    let el = $("#buildQueue .buildList")[0];
    if (el) {
      let sort = Sortable.get(el);
      if (sort) {
        sort.destroy();
      }
    }
  }
  function dragQueue() {
    let el = $("#buildQueue .buildList")[0];
    Sortable.create(el, {
      onEnd(e) {
        let order = global.queue.queue;
        order.splice(e.newDraggableIndex, 0, order.splice(e.oldDraggableIndex, 1)[0]);
        global.queue.queue = order;
        buildQueue();
        resizeGame();
      }
    });
    resizeGame();
    attachQueuePopovers2();
  }
  function attachQueuePopovers2() {
    for (let i = 0; i < global.queue.queue.length; i++) {
      let id = `q${global.queue.queue[i].id}${i}`;
      let struct = decodeStructId(global.queue.queue[i].id);
      let isWide = struct.s[0].substring(0, 4) !== "arpa" && struct.a["wide"] ? true : false;
      popover(
        id,
        function(obj) {
          let b_res = global.queue.queue[i].hasOwnProperty("bres") ? global.queue.queue[i].bres : false;
          if (struct.s[0].substring(0, 4) === "arpa") {
            obj.popper.append(arpaProjectCosts(100, struct.a));
          } else if (struct.s[0].substring(0, 2) === "tp" && struct.s[1].substring(0, 4) === "ship") {
            TPShipDesc(obj.popper, deepClone(global.queue.queue[i]));
          } else if (struct.s[0].substring(0, 4) === "hell" && struct.s[1].substring(0, 4) === "mech") {
            mechDesc(obj.popper, deepClone(global.queue.queue[i]));
          } else {
            actionDesc(obj.popper, struct.a, global[struct.s[0]][struct.s[1]], false, false, false, b_res);
          }
        },
        {
          wide: isWide,
          prop: {
            modifiers: {
              preventOverflow: { enabled: false },
              hide: { enabled: false }
            }
          }
        }
      );
    }
  }
  function decodeStructId(id) {
    let c_action;
    let segments = id.split("-");
    if (segments[0].substring(0, 4) === "arpa") {
      c_action = segments[0].substring(4);
    } else if (segments[0] === "tp" && segments[1].substring(0, 4) === "ship") {
      c_action = "ship";
    } else if (segments[0] === "hell" && segments[1].substring(0, 4) === "mech") {
      c_action = "mech";
    } else if (segments[0] === "city" || segments[0] === "evolution" || segments[0] === "starDock") {
      c_action = actions[segments[0]][segments[1]];
    } else {
      Object.keys(actions[segments[0]]).forEach(function(region) {
        if (actions[segments[0]][region].hasOwnProperty(segments[1])) {
          c_action = actions[segments[0]][region][segments[1]];
        }
      });
    }
    return { s: segments, a: c_action };
  }
  var tagDebug = false;
  function tagEvent(event, data) {
    try {
      data["debug_mode"] = tagDebug;
      gtag("event", event, data);
    } catch (err) {
    }
  }
  function resetResBuffer() {
    Object.keys(tmp_vars.resource).forEach(function(res) {
      let temp_max = global.resource[res].max;
      if (temp_max > 0) {
        temp_max += global.resource[res].amount;
      }
      tmp_vars.resource[res].temp_max = temp_max;
    });
  }
  var resCache = {};
  function cacheRes(res, recover = false) {
    resCache[res] ??= {};
    if (!recover) {
      resCache[res].amount = global.resource[res].amount;
      resCache[res].delta = global.resource[res].delta;
      if (res === "Mana") {
        resCache[res].gen_d = global.resource[res].gen.d;
      }
      resCache[res].temp_max = tmp_vars.resource[res].temp_max;
    } else {
      if (!resCache[res]) {
        return;
      }
      global.resource[res].amount = resCache[res].amount;
      global.resource[res].delta = resCache[res].delta;
      if (res === "Mana") {
        global.resource[res].gen.d = resCache[res].gen_d;
      }
      tmp_vars.resource[res].temp_max = resCache[res].temp_max;
    }
  }
  function modRes(res, val, notrack) {
    if (res === "Food" && global.race["fasting"]) {
      global.resource[res].amount = 0;
      return false;
    }
    let count = global.resource[res].amount + val;
    let success = true;
    let max = notrack ? global.resource[res].max : tmp_vars.resource[res].temp_max;
    if (count > max && max >= 0) {
      count = max;
    } else if (count < 0) {
      success = false;
      count = 0;
    }
    if (!Number.isNaN(count)) {
      global.resource[res].amount = count;
      if (!notrack) {
        global.resource[res].delta += val;
        if (res === "Mana" && val > 0) {
          global.resource[res].gen_d += val;
        } else if (val < 0 && max >= 0) {
          tmp_vars.resource[res].temp_max = Math.max(0, tmp_vars.resource[res].temp_max + val);
        }
      }
    }
    return success;
  }
  function genCivName(alt) {
    let genus = global.race.maintype || races[global.race.species].type;
    switch (genus) {
      case "animal":
        genus = "animalism";
        break;
      case "small":
        genus = "dwarfism";
        break;
      case "giant":
        genus = "gigantism";
        break;
      case "avian":
      case "reptilian":
        genus = "eggshell";
        break;
      case "fungi":
        genus = "chitin";
        break;
      case "insectoid":
        genus = "athropods";
        break;
      case "angelic":
        genus = "celestial";
        break;
      case "organism":
        genus = "sentience";
        break;
    }
    const filler = alt ? [
      loc(`civics_gov_tp_name0`),
      loc(`civics_gov_tp_name1`),
      loc(`civics_gov_tp_name2`),
      loc(`civics_gov_tp_name3`),
      loc(`civics_gov_tp_name4`),
      loc(`civics_gov_tp_name5`),
      loc(`civics_gov_tp_name6`),
      loc(`civics_gov_tp_name7`),
      loc(`civics_gov_tp_name8`),
      loc(`civics_gov_tp_name9`)
    ] : [
      races[global.race.species].name,
      races[global.race.species].home,
      loc(`biome_${global.city.biome}_name`),
      loc(`evo_${genus}_title`),
      loc(`civics_gov_name0`),
      loc(`civics_gov_name1`),
      loc(`civics_gov_name2`),
      loc(`civics_gov_name3`),
      loc(`civics_gov_name4`),
      loc(`civics_gov_name5`),
      loc(`civics_gov_name6`),
      loc(`civics_gov_name7`),
      loc(`civics_gov_name8`),
      loc(`civics_gov_name9`),
      loc(`civics_gov_name10`),
      loc(`civics_gov_name11`)
    ];
    return {
      s0: Math.rand(0, 14),
      s1: filler[Math.rand(0, filler.length)]
    };
  }
  function costMultiplier2(structure, offset, base, multiplier, cat) {
    if (!cat) {
      cat = "city";
    }
    if (global.race.universe === "micro") {
      multiplier -= darkEffect("micro", false);
    }
    if (global.race["small"]) {
      multiplier -= traits.small.vars()[0];
    }
    if (global.race["large"]) {
      multiplier += traits.large.vars()[0];
    }
    if (global.race["compact"]) {
      multiplier -= traits.compact.vars()[0];
    }
    if (global.race["tunneler"] && (structure === "mine" || structure === "coal_mine")) {
      multiplier -= traits.tunneler.vars()[0];
    }
    if (global.tech["housing_reduction"] && (structure === "basic_housing" || structure === "cottage")) {
      multiplier -= global.tech["housing_reduction"] * 0.02;
    }
    if (global.tech["housing_reduction"] && structure === "captive_housing") {
      multiplier -= global.tech["housing_reduction"] * 0.01;
    }
    if (structure === "basic_housing") {
      if (global.race["solitary"]) {
        multiplier -= traits.solitary.vars()[0];
      }
      if (global.race["pack_mentality"]) {
        multiplier += traits.pack_mentality.vars()[0];
      }
    }
    if (structure === "cottage") {
      if (global.race["solitary"]) {
        multiplier += traits.solitary.vars()[1];
      }
      if (global.race["pack_mentality"]) {
        multiplier -= traits.pack_mentality.vars()[1];
      }
    }
    if (structure === "apartment") {
      if (global.race["pack_mentality"]) {
        multiplier -= traits.pack_mentality.vars()[1];
      }
    }
    if (global.genes["creep"] && !global.race["no_crispr"]) {
      multiplier -= global.genes["creep"] * 0.01;
    } else if (global.genes["creep"] && global.race["no_crispr"]) {
      multiplier -= global.genes["creep"] * 2e-3;
    }
    let nqVal = govActive("noquestions", 0);
    if (nqVal) {
      multiplier -= nqVal;
    }
    if (multiplier < 1.005) {
      multiplier = 1.005;
    }
    var count = structure === "citizen" ? highPopAdjust(global["resource"][global.race.species].amount) : global[cat][structure] ? global[cat][structure].count : 0;
    if (offset) {
      count += offset;
    }
    return Math.round(multiplier ** count * base);
  }
  function spaceCostMultiplier(action, offset, base, multiplier, sector, c_min) {
    if (!sector) {
      sector = "space";
    }
    c_min = c_min || 1.005;
    if (global.race.universe === "micro") {
      multiplier -= darkEffect("micro", true);
    }
    if (global.genes["creep"] && !global.race["no_crispr"]) {
      multiplier -= global.genes["creep"] * 0.01;
    } else if (global.genes["creep"] && global.race["no_crispr"]) {
      multiplier -= global.genes["creep"] * 2e-3;
    }
    if (global.race["small"]) {
      multiplier -= traits.small.vars()[1];
    }
    if (global.race["compact"]) {
      multiplier -= traits.compact.vars()[1];
    }
    if (global.prestige.Harmony.count > 0 && global.stats.achieve[`ascended`]) {
      multiplier -= harmonyEffect();
    }
    let nqVal = govActive("noquestions", 0);
    if (nqVal) {
      multiplier -= nqVal;
    }
    if (multiplier < c_min) {
      multiplier = c_min;
    }
    var count = action === "citizen" ? global["resource"][global.race.species].amount : global[sector][action] ? global[sector][action].count : 0;
    if (offset && typeof offset === "number") {
      count += offset;
    }
    return Math.round(multiplier ** count * base);
  }
  function harmonyEffect() {
    if (global.prestige.Harmony.count > 0 && global.stats.achieve[`ascended`]) {
      let boost = 0;
      switch (global.race.universe) {
        case "heavy":
          if (global.stats.achieve.ascended.hasOwnProperty("h")) {
            boost = global.stats.achieve.ascended.h * global.prestige.Harmony.count;
          }
          break;
        case "antimatter":
          if (global.stats.achieve.ascended.hasOwnProperty("a")) {
            boost = global.stats.achieve.ascended.a * global.prestige.Harmony.count;
          }
          break;
        case "evil":
          if (global.stats.achieve.ascended.hasOwnProperty("e")) {
            boost = global.stats.achieve.ascended.e * global.prestige.Harmony.count;
          }
          break;
        case "micro":
          if (global.stats.achieve.ascended.hasOwnProperty("m")) {
            boost = global.stats.achieve.ascended.m * global.prestige.Harmony.count;
          }
          break;
        case "magic":
          if (global.stats.achieve.ascended.hasOwnProperty("mg")) {
            boost = global.stats.achieve.ascended.mg * global.prestige.Harmony.count;
          }
          break;
        default:
          if (global.stats.achieve.ascended.hasOwnProperty("l")) {
            boost = global.stats.achieve.ascended.l * global.prestige.Harmony.count;
          }
          break;
      }
      if (boost > 0) {
        boost = (Math.log(50 + boost) - 3.912023005428146) * 0.01;
        return +boost.toFixed(5);
      }
    }
    return 0;
  }
  function timeCheck(c_action, track, detailed, reqMet) {
    reqMet = typeof reqMet === "undefined" ? true : reqMet;
    if (c_action.cost) {
      let time = 0;
      let bottleneck = false;
      let offset = track && track.id[c_action.id] ? track.id[c_action.id] : false;
      let costs = c_action["doNotAdjustCost"] ? c_action.cost : adjustCosts(c_action, offset);
      let og_track_r = track ? {} : false;
      let og_track_rr = track ? {} : false;
      if (track) {
        Object.keys(track.r).forEach(function(res) {
          og_track_r[res] = track.r[res];
        });
        Object.keys(track.rr).forEach(function(res) {
          og_track_rr[res] = track.rr[res];
        });
      }
      let hasTrash = false;
      if (global.interstellar.hasOwnProperty("mass_ejector") && global.genes["governor"] && global.tech["governor"] && global.race["governor"] && global.race.governor["g"] && global.race.governor["tasks"]) {
        Object.keys(global.race.governor.tasks).forEach(function(t) {
          if (global.race.governor.tasks[t] === "trash") {
            hasTrash = true;
          }
        });
      }
      let shorted = {};
      Object.keys(costs).forEach(function(res) {
        if (time >= 0 && !global.prestige.hasOwnProperty(res) && !["Morale", "HellArmy", "Structs", "Bool", "Army", "Troops"].includes(res)) {
          var testCost = offset ? Number(costs[res](offset)) : Number(costs[res]());
          if (testCost > 0) {
            let f_res = res === "Species" ? global.race.species : res;
            let res_have = res === "Supply" ? global.portal.purifier.supply : Number(global.resource[f_res].amount);
            let res_max = res === "Supply" ? global.portal.purifier.sup_max : global.resource[f_res].max;
            let res_diff = res === "Supply" ? global.portal.purifier.diff : global.resource[f_res].diff;
            if (hasTrash && global.interstellar.mass_ejector[res]) {
              res_diff += global.interstellar.mass_ejector[res];
              if (global.race.governor.config.trash.hasOwnProperty(res)) {
                res_diff -= Math.min(global.race.governor.config.trash[res].v, global.interstellar.mass_ejector[res]);
              }
            }
            if (track) {
              res_have += res_diff * (reqMet ? track.t.t : track.t.rt);
              if (!track.r.hasOwnProperty(f_res)) {
                track.r[f_res] = 0;
              }
              if (!track.rr.hasOwnProperty(f_res)) {
                track.rr[f_res] = 0;
              }
              if (reqMet) {
                res_have -= Number(track.r[f_res]);
                track.r[f_res] += testCost;
                track.rr[f_res] += testCost;
              } else {
                res_have -= Number(track.rr[f_res]);
                track.rr[f_res] += testCost;
              }
              if (res_max >= 0 && res_have > res_max) {
                res_have = res_max;
              }
            }
            if (testCost > res_have) {
              if (res_diff > 0) {
                let r_time = (testCost - res_have) / res_diff;
                if (r_time > time) {
                  bottleneck = f_res;
                  time = r_time;
                }
                shorted[f_res] = r_time;
              } else {
                if (track) {
                  track.r = og_track_r;
                  track.rr = og_track_rr;
                }
                time = -9999999;
                shorted[f_res] = 99999999 - res_diff;
                if (shorted[bottleneck] && shorted[f_res] > shorted[bottleneck] || !shorted[bottleneck]) {
                  bottleneck = f_res;
                }
              }
            }
          }
        }
      });
      if (track && time >= 0) {
        if (typeof track.id[c_action.id] === "undefined") {
          track.id[c_action.id] = 1;
        } else {
          track.id[c_action.id]++;
        }
        if (reqMet) {
          track.t.t += time;
        }
        track.t.rt += time;
      }
      return detailed ? { t: time, r: bottleneck, s: shorted } : time;
    } else {
      return 0;
    }
  }
  function arpaTimeCheck(project, remain, track, detailed) {
    let offset = track && track.id[project.id] ? track.id[project.id] : false;
    let costs = arpaAdjustCosts(project.cost, offset);
    let allRemainingSegmentsTime = 0;
    let og_track_r = track ? {} : false;
    let og_track_rr = track ? {} : false;
    let bottleneck = false;
    if (track) {
      Object.keys(track.r).forEach(function(res) {
        og_track_r[res] = track.r[res];
      });
      Object.keys(track.rr).forEach(function(res) {
        og_track_rr[res] = track.rr[res];
      });
    }
    let hasTrash = false;
    if (global.interstellar.hasOwnProperty("mass_ejector") && global.genes["governor"] && global.tech["governor"] && global.race["governor"] && global.race.governor["g"] && global.race.governor["tasks"]) {
      Object.keys(global.race.governor.tasks).forEach(function(t) {
        if (global.race.governor.tasks[t] === "trash") {
          hasTrash = true;
        }
      });
    }
    let shorted = {};
    Object.keys(costs).forEach(function(res) {
      if (allRemainingSegmentsTime >= 0) {
        let allRemainingSegmentsCost = Number(costs[res](offset)) * remain;
        if (allRemainingSegmentsCost > 0) {
          let res_have = Number(global.resource[res].amount);
          let res_diff = global.resource[res].diff;
          if (track) {
            if (hasTrash && global.interstellar.mass_ejector[res]) {
              res_diff += global.interstellar.mass_ejector[res];
              if (global.race.governor.config.trash.hasOwnProperty(res)) {
                res_diff -= Math.min(global.race.governor.config.trash[res].v, global.interstellar.mass_ejector[res]);
              }
            }
            res_have += res_diff * track.t.t;
            if (track.r[res]) {
              res_have -= Number(track.r[res]);
              track.r[res] += allRemainingSegmentsCost;
            } else {
              track.r[res] = allRemainingSegmentsCost;
            }
            if (track.rr[res]) {
              track.rr[res] += allRemainingSegmentsCost;
            } else {
              track.rr[res] = allRemainingSegmentsCost;
            }
            if (global.resource[res].max >= 0 && res_have > global.resource[res].max) {
              res_have = global.resource[res].max;
            }
          }
          if (allRemainingSegmentsCost > res_have) {
            if (res_diff > 0) {
              let r_time = (allRemainingSegmentsCost - res_have) / res_diff;
              if (r_time > allRemainingSegmentsTime) {
                allRemainingSegmentsTime = r_time;
                bottleneck = res;
              }
              shorted[res] = r_time;
            } else {
              if (track) {
                track.r = og_track_r;
                track.rr = og_track_rr;
              }
              allRemainingSegmentsTime = -9999999;
              shorted[res] = 99999999 - res_diff;
              if (shorted[bottleneck] && shorted[res] > shorted[bottleneck] || !shorted[bottleneck]) {
                bottleneck = res;
              }
            }
          }
        }
      }
    });
    if (track && allRemainingSegmentsTime >= 0) {
      if (typeof track.id[project.id] === "undefined") {
        track.id[project.id] = 1;
      } else {
        track.id[project.id]++;
      }
      track.t.t += allRemainingSegmentsTime;
      track.t.rt += allRemainingSegmentsTime;
    }
    return detailed ? { t: allRemainingSegmentsTime, r: bottleneck, s: shorted } : allRemainingSegmentsTime;
  }
  function clearElement(elm, remove) {
    elm.find(".vb").each(function() {
      try {
        $(this)[0].__vue__.$destroy();
      } catch (e) {
      }
    });
    if (remove) {
      try {
        elm[0].__vue__.$destroy();
      } catch (e) {
      }
      elm.remove();
    } else {
      elm.empty();
    }
  }
  function vBind(bind, action) {
    action = action || "create";
    if ($(bind.el).length > 0 && typeof $(bind.el)[0].__vue__ !== "undefined") {
      try {
        if (action === "update") {
          $(bind.el)[0].__vue__.$forceUpdate();
        } else {
          $(bind.el)[0].__vue__.$destroy();
        }
      } catch (e) {
      }
    }
    if (action === "create") {
      new Vue(bind);
      $(bind.el).addClass("vb");
    }
  }
  function timeFormat(time) {
    let formatted;
    if (time < 0) {
      formatted = loc("time_never");
    } else {
      time = +time.toFixed(0);
      const secs_per_min = 60;
      if (time < secs_per_min) {
        formatted = `${time}s`;
      } else {
        const mins_per_hour = 60;
        const secs_per_hour = secs_per_min * mins_per_hour;
        const secs = time % secs_per_min;
        const mins = Math.floor(time / secs_per_min) % mins_per_hour;
        if (time < secs_per_hour) {
          if (secs > 0) {
            formatted = `${mins}m ${secs}s`;
          } else {
            formatted = `${mins}m`;
          }
        } else {
          const hours_per_day = 24;
          const secs_per_day = secs_per_hour * hours_per_day;
          const hours = Math.floor(time / secs_per_hour) % hours_per_day;
          if (time < secs_per_day) {
            if (mins > 0) {
              formatted = `${hours}h ${mins}m`;
            } else if (secs > 0) {
              formatted = `${hours}h ${secs}s`;
            } else {
              formatted = `${hours}h`;
            }
          } else {
            const days = Math.floor(time / secs_per_day);
            if (hours > 0) {
              formatted = `${days}d ${hours}h`;
            } else if (mins > 0) {
              formatted = `${days}d ${mins}m`;
            } else if (secs > 0) {
              formatted = `${days}d ${secs}s`;
            } else {
              formatted = `${days}d`;
            }
          }
        }
      }
    }
    return formatted;
  }
  function powerModifier(energy) {
    if (global.race.universe === "antimatter") {
      energy *= darkEffect("antimatter");
      energy = +energy.toFixed(2);
    }
    if (astrologySign() === "leo") {
      energy *= 1 + astroVal2("leo")[0] / 100;
      energy = +energy.toFixed(2);
    }
    return energy;
  }
  function powerCostMod(energy) {
    if (global.race["emfield"]) {
      return +(energy * 1.5).toFixed(2);
    }
    return energy;
  }
  function calcQuantumLevel(load) {
    if (global.tech["high_tech"] && global.tech["high_tech"] >= 11) {
      let k_base = global.resource.Knowledge.max;
      let k_inc = 25e4;
      let qbits = 0;
      while (k_base > k_inc) {
        k_base -= k_inc;
        k_inc *= 1.1;
        qbits++;
      }
      qbits += +(k_base / k_inc).toFixed(2);
      if (global.interstellar["citadel"]) {
        let citadel = load ? global.interstellar.citadel.on : p_on["citadel"];
        if (global.tech["high_tech"] && global.tech["high_tech"] >= 15 && citadel > 0) {
          qbits *= 1 + citadel * 0.05;
        }
      }
      if (global.space["ai_core2"]) {
        let core = load ? global.space.ai_core2.on : p_on["ai_core2"];
        if (global.tech["titan_ai_core"] && core > 0) {
          qbits *= 1.25;
        }
      }
      if (global.stats.achieve["obsolete"] && global.stats.achieve[`obsolete`].l >= 5 && global.prestige.AICore.count > 0) {
        qbits *= 2 - 0.99 ** global.prestige.AICore.count;
      }
      if (global.race["linked"]) {
        let factor = traits.linked.vars()[0] / 100 * global.resource[global.race.species].amount;
        if (factor > traits.linked.vars()[1] / 100) {
          factor -= traits.linked.vars()[1] / 100;
          factor = factor / (factor + 200 - traits.linked.vars()[1]);
          factor += traits.linked.vars()[1] / 100;
        }
        qbits *= 1 + factor;
      }
      return +qbits.toFixed(3);
    }
    return 0;
  }
  function get_qlevel(wiki) {
    return wiki ? calcQuantumLevel(wiki) : quantum_level;
  }
  function darkEffect(universe, flag, info, inputs) {
    if (!inputs) {
      inputs = {};
    }
    let dark = inputs.dark !== void 0 ? inputs.dark : global.prestige.Dark.count;
    let harmony = inputs.harmony !== void 0 ? inputs.harmony : global.prestige.Harmony.count;
    let sludge = inputs.sludge !== void 0 ? inputs.sludge : global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge[universeAffix(universe)] ? global.stats.achieve.extinct_sludge[universeAffix(universe)] : 0;
    switch (universe) {
      case "standard":
        if (global.race.universe === "standard" || info) {
          if (harmony > 0) {
            dark *= 1 + harmony * 1e-3;
          }
          if (sludge) {
            dark *= 1 + sludge * 0.03;
          }
          return 1 + dark / 200;
        }
        return 0;
      case "evil":
        if (global.race.universe === "evil" || info) {
          if (harmony > 0) {
            dark *= 1 + harmony * 0.01;
          }
          if (sludge) {
            dark *= 1 + sludge * 0.03;
          }
          return 1 + (Math.log2(10 + dark) - 3.321928094887362) / (flag ? 10 : 5);
        }
        return 1;
      case "micro":
        if (global.race.universe === "micro" || info) {
          if (flag) {
            if (harmony > 0) {
              dark *= 1 + harmony * 0.01;
            }
            dark = 0.01 + (Math.log(100 + dark) - 4.605170185988092) / 35;
            if (sludge) {
              dark *= 1 + sludge * 0.03;
            }
            if (dark > 0.04) {
              dark = 0.04;
            }
            return +dark.toFixed(5);
          } else {
            if (harmony > 0) {
              dark *= 1 + harmony * 0.01;
            }
            dark = 0.02 + (Math.log(100 + dark) - 4.605170185988092) / 20;
            if (sludge) {
              dark *= 1 + sludge * 0.03;
            }
            if (dark > 0.06) {
              dark = 0.06;
            }
            return +dark.toFixed(5);
          }
        }
        return 0;
      case "heavy":
        if (global.race.universe === "heavy" || info) {
          if (harmony > 0) {
            dark *= 1 + harmony * 0.01;
          }
          if (sludge) {
            dark *= 1 + sludge * 0.03;
          }
          return 0.995 ** dark;
        }
        return 1;
      case "antimatter":
        if (global.race.universe === "antimatter" || info) {
          if (harmony > 0) {
            dark *= 1 + harmony * 0.01;
          }
          if (sludge) {
            dark *= 1 + sludge * 0.03;
          }
          return 1 + (Math.log(50 + dark) - 3.912023005428146) / 5;
        }
        return 0;
      case "magic":
        if (global.race.universe === "magic" || info) {
          if (harmony > 0) {
            dark *= 1 + harmony * 0.01;
          }
          if (sludge) {
            dark *= 1 + sludge * 0.03;
          }
          return 1 + (Math.log(50 + dark) - 3.912023005428146) / 3;
        }
        return 0;
    }
    return 0;
  }
  var calc_mastery = /* @__PURE__ */ function() {
    var mastery;
    return function(recalc) {
      if (mastery && !recalc) {
        return mastery;
      } else if (global.genes["challenge"] && global.genes.challenge >= 2) {
        mastery = masteryType(global.race.universe);
        return mastery;
      }
      return 0;
    };
  }();
  function masteryType(universe, detailed, unmodified) {
    if (global.genes["challenge"] && global.genes.challenge >= 2) {
      universe = universe || global.race.universe;
      let ua_level = universeLevel(universe);
      let m_rate = universe === "standard" ? 0.25 : 0.15;
      let u_rate = global.genes.challenge >= 3 ? 0.15 : 0.1;
      if (global.genes.challenge >= 4 && universe !== "standard") {
        m_rate += 0.05;
        u_rate -= 0.05;
      }
      let perk_rank = global.stats.feat["grandmaster"] && global.stats.achieve["corrupted"] && global.stats.achieve.corrupted.l > 0 ? Math.min(global.stats.achieve.corrupted.l, global.stats.feat["grandmaster"]) : 0;
      if (perk_rank > 0) {
        m_rate *= 1 + perk_rank / 100;
        u_rate *= 1 + perk_rank / 100;
      }
      if (!unmodified) {
        if (global.race["weak_mastery"] && universe === "antimatter") {
          m_rate /= 10;
          u_rate /= 10;
        }
        if (global.race["nerfed"]) {
          m_rate /= universe === "antimatter" ? 5 : 2;
          u_rate /= universe === "antimatter" ? 5 : 2;
        }
        if (global.race["ooze"]) {
          m_rate *= 1 - traits.ooze.vars()[2] / 100;
          u_rate *= 1 - traits.ooze.vars()[2] / 100;
        }
        if (global.genes.challenge >= 5 && global.race.hasOwnProperty("mastery")) {
          m_rate *= 1 + traits.mastery.vars()[0] * global.race.mastery / 100;
          u_rate *= 1 + traits.mastery.vars()[0] * global.race.mastery / 100;
        }
      }
      let m_mastery = ua_level.aLvl * m_rate;
      let u_mastery = 0;
      if (universe !== "standard") {
        u_mastery = ua_level.uLvl * u_rate;
      }
      return detailed ? { g: m_mastery, u: u_mastery, m: m_mastery + u_mastery } : m_mastery + u_mastery;
    }
    return detailed ? { g: 0, u: 0, m: 0 } : 0;
  }
  var calcPillar = /* @__PURE__ */ function() {
    var bonus;
    return function(recalc) {
      if (!bonus || recalc) {
        let active = 0;
        Object.keys(global.pillars).forEach(function(race) {
          if (races[race] && global.race.species === race) {
            active += 4;
          } else if (races[race]) {
            active++;
          }
        });
        bonus = [
          1 + active / 100,
          // Production
          1 + active * 2 / 100
          // Storage
        ];
      }
      return bonus;
    };
  }();
  function challenge_multiplier(value, type, decimals, inputs) {
    decimals = decimals || 0;
    inputs = inputs || {};
    let challenge_level = inputs.genes;
    if (challenge_level === void 0) {
      challenge_level = alevel() - 1;
      if (challenge_level > 4) {
        challenge_level = 4;
      }
    }
    let universe = inputs.uni || global.race.universe;
    if (universe === "micro") {
      value = value * 0.25;
    }
    if (universe === "antimatter") {
      value = value * 1.1;
    }
    if (universe === "heavy" && type !== "mad") {
      switch (challenge_level) {
        case 1:
          value = value * 1.1;
          break;
        case 2:
          value = value * 1.15;
          break;
        case 3:
          value = value * 1.2;
          break;
        case 4:
          value = value * 1.25;
          break;
        default:
          value = value * 1.05;
          break;
      }
    }
    if (inputs.tp !== void 0 ? inputs.tp : global.race["truepath"]) {
      value = value * 1.1;
    }
    switch (challenge_level) {
      case 1:
        return +(value * 1.05).toFixed(decimals);
      case 2:
        return +(value * 1.12).toFixed(decimals);
      case 3:
        return +(value * 1.25).toFixed(decimals);
      case 4:
        return +(value * 1.45).toFixed(decimals);
      default:
        return +value.toFixed(decimals);
    }
  }
  function getResetConstants(type, inputs) {
    if (!inputs) {
      inputs = {};
    }
    let rc = {
      pop_divisor: 999,
      k_inc: 1e6,
      k_mult: 100,
      phage_mult: 0,
      plasmid_cap: 150
    };
    switch (type) {
      case "mad":
        rc.pop_divisor = 3;
        rc.k_inc = 1e5;
        rc.k_mult = 1.1;
        rc.plasmid_cap = 150;
        if (inputs.synth === true || inputs.synth.val === true) {
          rc.pop_divisor = 5;
          rc.k_inc = 125e3;
          rc.plasmid_cap = 100;
        }
        break;
      case "cataclysm":
      case "bioseed":
        rc.pop_divisor = 3;
        rc.k_inc = 5e4;
        rc.k_mult = 1.015;
        rc.phage_mult = 1;
        rc.plasmid_cap = 400;
        break;
      case "ai":
        rc.pop_divisor = 2.5;
        rc.k_inc = 45e3;
        rc.k_mult = 1.014;
        rc.phage_mult = 2;
        rc.plasmid_cap = 600;
        break;
      case "vacuum":
      case "bigbang":
        rc.pop_divisor = 2.2;
        rc.k_inc = 4e4;
        rc.k_mult = 1.012;
        rc.phage_mult = 2.5;
        rc.plasmid_cap = 800;
        break;
      case "ascend":
      case "terraform":
        rc.pop_divisor = 1.15;
        rc.k_inc = 3e4;
        rc.k_mult = 1.008;
        rc.phage_mult = 4;
        rc.plasmid_cap = 2e3;
        break;
      case "matrix":
        rc.pop_divisor = 1.5;
        rc.k_inc = 32e3;
        rc.k_mult = 1.01;
        rc.phage_mult = 3.2;
        rc.plasmid_cap = 1800;
        break;
      case "retired":
        rc.pop_divisor = 1.15;
        rc.k_inc = 32e3;
        rc.k_mult = 1.006;
        rc.phage_mult = 3.2;
        rc.plasmid_cap = 1800;
        break;
      case "eden":
        rc.pop_divisor = 1;
        rc.k_inc = 18e3;
        rc.k_mult = 1.004;
        rc.phage_mult = 2.5;
        rc.plasmid_cap = 1800;
        break;
      default:
        rc.unknown = true;
        break;
    }
    return rc;
  }
  function calcPrestige(type, inputs) {
    let gains = {
      plasmid: 0,
      phage: 0,
      dark: 0,
      harmony: 0,
      artifact: 0,
      cores: 0,
      supercoiled: 0,
      pdebt: 0
    };
    if (!inputs) {
      inputs = {};
    }
    if (inputs.synth === void 0) inputs.synth = races[global.race.species].type === "synthetic";
    let challenge = inputs.genes;
    let universe = inputs.uni;
    universe = universe || global.race.universe;
    let pop = 0;
    if (inputs.cit === void 0) {
      let garrisoned = global.civic.hasOwnProperty("garrison") ? global.civic.garrison.workers : 0;
      for (let i = 0; i < 3; i++) {
        if (global.civic.foreign[`gov${i}`].occ) {
          garrisoned += jobScale(global.civic.govern.type === "federation" ? 15 : 20);
        }
      }
      if (global.race["high_pop"]) {
        pop = Math.round(global.resource[global.race.species].amount / traits.high_pop.vars()[0]) + Math.round(garrisoned / traits.high_pop.vars()[0]);
      } else {
        pop = global.resource[global.race.species].amount + garrisoned;
      }
    } else {
      if (inputs.high_pop) {
        pop = Math.round(inputs.cit / traits.high_pop.vars(inputs.high_pop)[0]) + Math.round(inputs.sol / traits.high_pop.vars(inputs.high_pop)[0]);
      } else {
        pop = inputs.cit + inputs.sol;
      }
    }
    let rc = getResetConstants(type, inputs);
    let pop_divisor = rc.pop_divisor;
    let k_inc = rc.k_inc;
    let k_mult = rc.k_mult;
    let phage_mult = rc.phage_mult;
    let plasmid_cap = rc.plasmid_cap;
    if (challenge !== void 0) {
      plasmid_cap = Math.floor(plasmid_cap * (1 + (challenge + (inputs.tp ? 1 : 0)) / 8));
    } else {
      plasmid_cap = Math.floor(plasmid_cap * (1 + (alevel() - (global.race["truepath"] ? 0 : 1)) / 8));
    }
    if (inputs.plas === void 0) {
      let k_base = inputs.know !== void 0 ? inputs.know : global.stats.know;
      let new_plasmid = Math.round(pop / pop_divisor);
      while (k_base > k_inc) {
        new_plasmid++;
        k_base -= k_inc;
        k_inc *= k_mult;
      }
      if (global.race["cataclysm"]) {
        new_plasmid += 300;
      } else if (global.race["lone_survivor"]) {
        new_plasmid += 800;
      }
      gains.plasmid = challenge_multiplier(new_plasmid, type, false, inputs);
      if (!inputs.rawPlasmids && gains.plasmid > plasmid_cap) {
        let overflow = gains.plasmid - plasmid_cap;
        gains.plasmid = plasmid_cap;
        overflow = Math.floor(overflow / (overflow + plasmid_cap) * plasmid_cap);
        gains.plasmid += overflow;
      }
    } else {
      gains.plasmid = inputs.plas;
    }
    gains.phage = gains.plasmid > 0 ? challenge_multiplier(Math.floor(Math.log2(gains.plasmid) * Math.E * phage_mult), type, false, inputs) : 0;
    if (type === "bigbang") {
      let exotic = inputs.exotic;
      let mass = inputs.mass;
      if (exotic === void 0 && global["interstellar"] && global.interstellar["stellar_engine"]) {
        exotic = global.interstellar.stellar_engine.exotic;
        mass = global.interstellar.stellar_engine.mass;
      }
      let new_dark = +Math.log(1 + exotic * 40).toFixed(3);
      new_dark += +(Math.log2(mass - 7) / 2.5).toFixed(3);
      new_dark = challenge_multiplier(new_dark, "bigbang", 3, inputs);
      gains.dark = new_dark;
    } else if (type === "vacuum") {
      let mana = inputs.mana !== void 0 ? inputs.mana : global.resource.Mana.gen;
      let new_dark = +(Math.log2(mana) / 5).toFixed(3);
      new_dark = challenge_multiplier(new_dark, "vacuum", 3, inputs);
      gains.dark = new_dark;
    }
    if (["ascend", "descend", "terraform", "apotheosis"].includes(type)) {
      let pr_gain = 1;
      if (challenge === void 0) {
        pr_gain = alevel();
        if (pr_gain > 5) {
          pr_gain = 5;
        }
      } else {
        pr_gain = challenge + 1;
      }
      if (type === "ascend" || type === "terraform") {
        switch (universe) {
          case "micro":
            pr_gain *= 0.25;
            break;
          case "heavy":
            pr_gain *= 1.2;
            break;
          case "antimatter":
            pr_gain *= 1.1;
            break;
          default:
            break;
        }
        gains.harmony = parseFloat(pr_gain.toFixed(2));
      } else if (type === "descend") {
        let artifact = universe === "micro" ? 1 : pr_gain;
        let spire = inputs.floor;
        if (spire !== void 0) {
          spire++;
        } else {
          spire = global.portal.hasOwnProperty("spire") ? global.portal.spire.count : 0;
        }
        [50, 100].forEach(function(x) {
          if (spire > x) {
            artifact++;
          }
        });
        gains.artifact = artifact;
      } else if (type === "apotheosis") {
        gains.plasmid = (256 >> 4) ** 4 - 65535;
        if (universe === "micro") {
          gains.supercoiled = pr_gain ** 2;
        } else {
          gains.supercoiled = pr_gain ** 3;
        }
        if (global.race["warlord"]) {
          gains.artifact = 5;
          gains.supercoiled = 64;
        }
      }
    }
    if (type === "ai") {
      gains.cores = universe === "micro" ? 2 : 5;
    }
    if (global.stats.pdebt > 0) {
      gains.plasmid -= global.stats.pdebt;
      if (gains.plasmid < 0) {
        gains.pdebt = Math.abs(gains.plasmid);
        gains.plasmid = 0;
      } else {
        gains.pdebt = 0;
      }
    }
    return gains;
  }
  function adjustCosts(c_action, offset, wiki) {
    let costs = c_action.cost || {};
    if ((costs["RNA"] || costs["DNA"]) && global.genes["evolve"]) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "RNA" || res === "DNA") {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.8);
          };
        }
      });
      return newCosts;
    }
    costs = bloatAdjust(costs, offset, wiki);
    costs = truthAdjust(costs, c_action, offset, wiki);
    costs = loneAdjust(costs, offset, wiki);
    costs = inflationAdjust(costs, offset, wiki);
    costs = technoAdjust(costs, offset, wiki);
    costs = flierAdjust(costs, offset, wiki);
    costs = kindlingAdjust(costs, offset, wiki);
    costs = smolderAdjust(costs, offset, wiki);
    costs = scienceAdjust(costs, offset, wiki);
    costs = rebarAdjust(costs, offset, wiki);
    costs = extraAdjust(costs, offset, wiki);
    costs = heavyAdjust(costs, offset, wiki);
    costs = dictatorAdjust(costs, offset, wiki);
    costs = lMatAdjust(costs, c_action, offset, wiki);
    costs = nexusAdjust(costs, c_action, offset, wiki);
    return craftAdjust(costs, offset, wiki);
  }
  function bloatAdjust(costs, offset, wiki) {
    if (global.race["bloated"]) {
      let adjustRate = 1 + traits.bloated.vars()[0] / 100;
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (["Food", "Lumber", "Stone", "Furs", "Copper", "Iron", "Aluminium", "Cement", "Coal", "Steel", "Titanium", "Alloy", "Polymer", "Iridium"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki) * adjustRate;
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function loneAdjust(costs, offset, wiki) {
    if (global.race["lone_survivor"]) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (["Structs", "Custom", "Soul_Gem", "Plasmid", "Phage", "Dark", "Harmony", "Blood_Stone", "Artifact", "Supercoiled", "Corrupt_Gem", "Codex", "Demonic_Essence", "Horseshoe"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        } else if (["Knowledge"].includes(res)) {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.5);
          };
        } else if (["Money"].includes(res)) {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.22);
          };
        } else if (["Plywood", "Brick", "Wrought_Iron", "Sheet_Metal", "Mythril", "Quantium"].includes(res)) {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.14);
          };
        } else {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.28);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function truthAdjust(costs, c_action, offset, wiki) {
    if ((wiki ? wiki.truepath : global.race["truepath"]) && (!c_action.hasOwnProperty("path") || !c_action.path.includes("truepath"))) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Money") {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 3);
          };
        } else if (["Structs", "Knowledge", "Custom", "Soul_Gem", "Plasmid", "Phage", "Dark", "Harmony", "Blood_Stone", "Artifact", "Supercoiled", "Corrupt_Gem", "Codex", "Demonic_Essence", "Horseshoe"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        } else {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 2);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function inflationAdjust(costs, offset, wiki) {
    if (global.race["inflation"]) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Money") {
          let rate = 1 + global.race.inflation / 75;
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * rate);
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function extraAdjust(costs, offset, wiki) {
    let extraVal = govActive("extravagant", 0);
    if (extraVal) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Money") {
          let waste = 1 + extraVal / 100;
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * waste);
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function technoAdjust(costs, offset, wiki) {
    if (global.civic.govern.type === "technocracy") {
      let adjust = 1 + govEffect.technocracy()[1] / 100;
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Knowledge") {
          let kAdjust = 1 - govEffect.technocracy()[0] / 100;
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * kAdjust);
          };
        } else if (res === "Money" || res === "Structs" || res === "Custom") {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        } else {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * adjust);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function scienceAdjust(costs, offset, wiki) {
    let pragVal = govActive("pragmatist", 1);
    let fathom = fathomCheck("gnome");
    if ((global.race["smart"] || global.race["dumb"] || pragVal || fathom > 0) && costs["Knowledge"]) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Knowledge") {
          newCosts[res] = function() {
            let cost = costs[res](offset, wiki);
            if (global.race["smart"]) {
              cost *= 1 - traits.smart.vars()[0] / 100;
            }
            if (fathom > 0) {
              cost *= 1 - traits.smart.vars(1)[0] / 100 * fathom;
            }
            if (global.race["dumb"]) {
              cost *= 1 + traits.dumb.vars()[0] / 100;
            }
            if (pragVal) {
              cost *= 1 + pragVal / 100;
            }
            return Math.round(cost);
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function smolderAdjust(costs, offset, wiki) {
    if (global.race["smoldering"]) {
      let newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Lumber" || res === "Plywood") {
          let adjustRate = res === "Plywood" ? 2 : 1;
          newCosts["Chrysotile"] = function() {
            return Math.round(costs[res](offset, wiki) * adjustRate) || 0;
          };
        } else if (["HellArmy", "Army", "Troops", "Structs", "Chrysotile", "Knowledge", "Custom", "Soul_Gem", "Plasmid", "Phage", "Dark", "Harmony", "Blood_Stone", "Artifact", "Supercoiled", "Corrupt_Gem", "Codex", "Demonic_Essence", "Horseshoe", "Mana", "Energy"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        } else {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * 0.9);
          };
        }
      });
      if (!newCosts.hasOwnProperty("Chrysotile") && costs.hasOwnProperty("Money") && global.tech["primitive"] && global.tech.primitive >= 3) {
        newCosts["Chrysotile"] = function() {
          let money = costs["Money"](offset, wiki) || 0;
          return money > 0 ? Math.round(money / 50) : 0;
        };
      }
      return newCosts;
    }
    return costs;
  }
  function kindlingAdjust(costs, offset, wiki) {
    if ((global.race["kindling_kindred"] || global.race["iron_wood"]) && (costs["Lumber"] || costs["Plywood"])) {
      var newCosts = {};
      let adjustRate = 1 + traits.kindling_kindred.vars()[0] / 100;
      Object.keys(costs).forEach(function(res) {
        if (global.race["kindling_kindred"] && res !== "Lumber" && res !== "Plywood" && res !== "Structs") {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * adjustRate) || 0;
          };
        } else if (global.race["iron_wood"] && res !== "Plywood") {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        } else if (res === "Structs") {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    } else if (global.race["unfathomable"] && global.city["captive_housing"]) {
      let fathom = fathomCheck("entish");
      if (fathom > 0) {
        var newCosts = {};
        let adjustRate = 1 - 0.4 * fathom;
        Object.keys(costs).forEach(function(res) {
          if (res === "Lumber" && res === "Plywood") {
            newCosts[res] = function() {
              return Math.round(costs[res](offset, wiki) * adjustRate) || 0;
            };
          } else {
            newCosts[res] = function() {
              return costs[res](offset, wiki);
            };
          }
        });
        return newCosts;
      }
    }
    return costs;
  }
  function flierAdjust(costs, offset, wiki) {
    if (global.race["flier"] && (costs["Stone"] || costs["Cement"])) {
      var newCosts = {};
      let adjustRate = 1 - traits.flier.vars()[0] / 100;
      Object.keys(costs).forEach(function(res) {
        if (res === "Stone" && !costs["Cement"]) {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * adjustRate) || 0;
          };
        } else if (res === "Cement") {
          if (costs["Stone"]) {
            newCosts["Stone"] = function() {
              return Math.round(costs["Stone"](offset, wiki) * adjustRate + costs[res](offset, wiki) * 1.8 * adjustRate) || 0;
            };
          } else {
            newCosts["Stone"] = function() {
              return Math.round(costs[res](offset, wiki) * 1.75 * adjustRate);
            };
          }
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function craftAdjust(costs, offset, wiki) {
    let fathom = fathomCheck("pterodacti");
    if ((global.race["hollow_bones"] || fathom > 0) && (costs["Plywood"] || costs["Brick"] || costs["Wrought_Iron"] || costs["Sheet_Metal"] || costs["Mythril"] || costs["Aerogel"] || costs["Nanoweave"] || costs["Scarletite"] || costs["Quantium"])) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Plywood" || res === "Brick" || res === "Wrought_Iron" || res === "Sheet_Metal" || res === "Mythril" || res === "Aerogel" || res === "Nanoweave" || res === "Scarletite" || res === "Quantium") {
          newCosts[res] = function() {
            let cost = costs[res](offset, wiki);
            if (global.race["hollow_bones"]) {
              cost *= 1 - traits.hollow_bones.vars()[0] / 100;
            }
            if (fathom > 0) {
              cost *= 1 - traits.hollow_bones.vars(3)[0] / 100 * fathom;
            }
            return Math.round(cost);
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function dictatorAdjust(costs, offset, wiki) {
    if (global.civic.govern.type === "dictator") {
      let adjustRate = 1 - govEffect.dictator()[2] / 100;
      let newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (["Lumber", "Stone", "Furs", "Copper", "Iron", "Aluminium", "Cement", "Coal"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki) * adjustRate;
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function lMatAdjust(costs, c_action, offset, wiki) {
    if (global.race["living_materials"]) {
      let newCosts = {};
      let path = c_action.hasOwnProperty("struct") ? c_action.struct().p : false;
      Object.keys(costs).forEach(function(res) {
        if (path && global[path[1]].hasOwnProperty(path[0]) && global[path[1]][path[0]].hasOwnProperty("l_m") && (["Lumber", "Furs", "Plywood"].includes(res) || res === "Stone" && global.race["sappy"])) {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * traits.living_materials.vars()[0] ** (global[path[1]][path[0]].l_m / 25));
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function nexusAdjust(costs, c_action, offset, wiki) {
    if (global.tech["nexus"] && global.race["witch_hunter"] && global.tech["roguemagic"] && global.tech.roguemagic >= 7) {
      let newCosts = {};
      let adjustRate = 0.96 ** global.tech["nexus"];
      Object.keys(costs).forEach(function(res) {
        if (["Mana"].includes(res)) {
          newCosts[res] = function() {
            return costs[res](offset, wiki) * adjustRate;
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function popCost(p) {
    if (global.race["high_pop"]) {
      p *= traits.high_pop.vars()[0];
    }
    return p;
  }
  function heavyAdjust(costs, offset, wiki) {
    if (global.race["heavy"]) {
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Stone" || res === "Cement" || res === "Wrought_Iron") {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * (1 + traits.heavy.vars()[1] / 100));
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function rebarAdjust(costs, offset, wiki) {
    if (costs["Cement"] && global.tech["cement"] && global.tech["cement"] >= 2) {
      let discount = global.tech["cement"] >= 3 ? 0.8 : 0.9;
      var newCosts = {};
      Object.keys(costs).forEach(function(res) {
        if (res === "Cement") {
          newCosts[res] = function() {
            return Math.round(costs[res](offset, wiki) * discount) || 0;
          };
        } else {
          newCosts[res] = function() {
            return costs[res](offset, wiki);
          };
        }
      });
      return newCosts;
    }
    return costs;
  }
  function svgIcons(icon) {
    switch (icon) {
      case "star":
        return `<path class="bolden" d="M320.012 15.662l88.076 215.246L640 248.153 462.525 398.438l55.265 225.9-197.778-122.363-197.778 122.363 55.264-225.9L0 248.153l231.936-17.245z"/>`;
      case "atom":
        return `<path d="m100 44.189c0-6.796-10.63-11.822-24.783-14.529 1.155-3.322 2.105-6.538 2.764-9.541 2.193-10.025 1.133-16.856-2.981-19.231-1.019-0.588-2.193-0.888-3.49-0.888-5.62 0-13.46 5.665-21.509 15-8.046-9.335-15.886-15-21.511-15-1.294 0-2.47 0.3-3.491 0.888-5.891 3.4-4.918 15.141-0.175 28.767-14.173 2.701-24.824 7.731-24.824 14.534 0 6.799 10.634 11.822 24.79 14.531-1.161 3.323-2.11 6.536-2.767 9.539-2.194 10.027-1.136 16.857 2.976 19.231 1.021 0.589 2.197 0.886 3.491 0.886 5.625 0 13.464-5.667 21.511-14.998 8.047 9.331 15.886 15 21.509 15 1.297 0 2.472-0.299 3.49-0.888 4.114-2.374 5.174-9.204 2.98-19.231-0.658-3.003-1.608-6.216-2.766-9.539 14.156-2.708 24.786-7.732 24.786-14.531zm-28.49-41.605c0.838 0 1.579 0.187 2.199 0.543 3.016 1.741 3.651 7.733 1.747 16.44-0.661 3.022-1.628 6.264-2.814 9.63-4.166-0.695-8.585-1.194-13.096-1.49-2.572-3.887-5.206-7.464-7.834-10.67 7.581-8.861 14.934-14.453 19.798-14.453zm-9.198 48.71c-1.375 2.379-2.794 4.684-4.242 6.9-2.597 0.132-5.287 0.206-8.069 0.206s-5.474-0.074-8.067-0.206c-1.452-2.217-2.87-4.521-4.242-6.9-1.388-2.406-2.669-4.771-3.849-7.081 1.204-2.369 2.477-4.753 3.851-7.13 1.37-2.377 2.79-4.68 4.24-6.901 2.593-0.131 5.285-0.205 8.067-0.205s5.473 0.074 8.069 0.205c1.448 2.222 2.866 4.524 4.239 6.901 1.37 2.37 2.64 4.747 3.842 7.106-1.202 2.362-2.471 4.739-3.839 7.105zm5.259-4.225c1.587 3.303 3 6.558 4.2 9.72-3.25 0.521-6.758 0.926-10.488 1.203 1.104-1.75 2.194-3.554 3.265-5.404 1.062-1.837 2.059-3.681 3.023-5.519zm-11.277 13.78c-2.068 3.019-4.182 5.854-6.293 8.444-2.109-2.591-4.22-5.426-6.294-8.444 2.095 0.088 4.196 0.138 6.294 0.138 2.099-0.001 4.201-0.05 6.293-0.138zm-17.573-2.857c-3.733-0.277-7.241-0.683-10.49-1.203 1.202-3.157 2.611-6.414 4.197-9.72 0.97 1.858 1.979 3.701 3.026 5.519 1.071 1.85 2.161 3.654 3.267 5.404zm-6.304-16.654c-1.636-3.389-3.046-6.653-4.226-9.741 3.26-0.52 6.781-0.931 10.53-1.212-1.107 1.751-2.197 3.553-3.268 5.407-1.067 1.847-2.065 3.701-3.036 5.546zm11.294-13.805c2.07-3.019 4.181-5.855 6.29-8.449 2.111 2.594 4.225 5.43 6.293 8.449-2.093-0.091-4.194-0.14-6.293-0.14-2.098 0.001-4.199 0.049-6.29 0.14zm20.837 8.259c-1.07-1.859-2.16-3.656-3.265-5.407 3.73 0.281 7.238 0.687 10.488 1.205-1.2 3.157-2.613 6.419-4.2 9.722-0.964-1.838-1.961-3.683-3.023-5.52zm-38.254-32.665c0.619-0.359 1.36-0.543 2.196-0.543 4.864 0 12.217 5.592 19.8 14.453-2.626 3.206-5.262 6.783-7.834 10.67-4.526 0.296-8.962 0.802-13.144 1.5-4.886-13.794-5.036-23.762-1.018-26.08zm-23.709 41.062c0-4.637 8.707-9.493 23.096-12.159 1.487 3.974 3.268 8.069 5.277 12.14-2.061 4.14-3.843 8.229-5.323 12.167-14.364-2.664-23.05-7.516-23.05-12.148zm25.905 41.605c-0.848 0-1.564-0.178-2.196-0.538-3.015-1.742-3.652-7.734-1.746-16.442 0.662-3.023 1.626-6.269 2.814-9.633 4.166 0.696 8.586 1.195 13.092 1.491 2.574 3.885 5.207 7.462 7.834 10.671-7.58 8.86-14.934 14.451-19.798 14.451zm46.962-16.981c1.907 8.708 1.272 14.7-1.743 16.442-0.623 0.355-1.361 0.539-2.199 0.539-4.864 0-12.217-5.592-19.798-14.452 2.628-3.209 5.262-6.786 7.837-10.671 4.508-0.296 8.927-0.795 13.093-1.491 1.186 3.365 2.153 6.61 2.81 9.633zm-1.086-12.475c-1.476-3.933-3.254-8.014-5.31-12.148 2.056-4.135 3.834-8.217 5.312-12.148 14.361 2.665 23.049 7.519 23.049 12.148 0 4.631-8.688 9.483-23.051 12.148z"/><circle cy="44.189" cx="50.001" r="5.492"/>`;
      case "heavy":
        return `<path d="M20.57 14.86L22 13.43 20.57 12 17 15.57 8.43 7 12 3.43 10.57 2 9.14 3.43 7.71 2 5.57 4.14 4.14 2.71 2.71 4.14l1.43 1.43L2 7.71l1.43 1.43L2 10.57 3.43 12 7 8.43 15.57 17 12 20.57 13.43 22l1.43-1.43L16.29 22l2.14-2.14 1.43 1.43 1.43-1.43-1.43-1.43L22 16.29z"/>`;
      case "evil":
        return `<path d="m105.63 236.87c-17.275-2.22-34.678-8.73-49.291-18.44-54.583-36.26-69.355-108.23-33.382-162.64 11.964-18.101 31.389-34.423 51.05-42.899 36.303-15.652 78.013-12.004 110.65 9.678 54.58 36.259 69.36 108.23 33.38 162.65-24.44 36.97-68.62 57.27-112.41 51.65zm9.37-7.17c0-1.12-15.871-50.86-20.804-65.2l-1.719-5-36.926-0.26c-20.309-0.15-37.284 0.09-37.721 0.53-1.104 1.1 4.147 11.87 10.535 21.59 16.439 25.04 41.149 41.59 71.135 47.65 11.07 2.24 15.5 2.44 15.5 0.69zm25.71-0.61c30.52-5.95 55.28-22.38 71.92-47.73 6.39-9.72 11.64-20.49 10.54-21.59-0.44-0.44-17.41-0.68-37.72-0.53l-36.93 0.26-1.72 5c-4.93 14.34-20.8 64.08-20.8 65.2 0 1.77 3.2 1.64 14.71-0.61zm-9.32-38.99c5.25-16.18 9.3-29.79 9.01-30.25-0.28-0.47-9.24-0.85-19.9-0.85s-19.62 0.38-19.9 0.85c-0.46 0.74 17.66 58.14 19.08 60.43 0.3 0.49 0.91 0.52 1.36 0.06s5.11-14.07 10.35-30.24zm-42.19-38.63c0.629-0.63-10.723-36.39-11.936-37.61-0.817-0.81-51.452 35.32-52.097 37.18-0.349 1 63.032 1.43 64.033 0.43zm61.27-20.06c3.65-11.32 6.51-21.41 6.34-22.42-0.32-1.86-34.12-26.99-36.31-26.99s-35.993 25.13-36.308 26.99c-0.169 1.01 2.683 11.1 6.339 22.42l6.647 20.59h46.642l6.65-20.59zm65.36 19.63c-0.64-1.86-51.28-37.99-52.09-37.18-1.22 1.22-12.57 36.98-11.94 37.61 1 1 64.38 0.57 64.03-0.43zm-169.97-24.02c16.09-11.7 29.071-21.78 28.847-22.4-0.397-1.09-12.185-37.499-18.958-58.555-1.846-5.739-3.951-10.632-4.678-10.875-0.727-0.242-4.903 3.259-9.28 7.78-22 22.72-32.81 50.641-31.513 81.39 0.678 16.09 2.371 24.97 4.646 24.37 0.925-0.24 14.846-10.01 30.936-21.71zm183.14 15.73c0.66-3.44 1.44-11.71 1.72-18.39 1.3-30.749-9.51-58.67-31.51-81.39-4.38-4.521-8.55-8.022-9.28-7.78-0.73 0.243-2.83 5.136-4.68 10.875-1.84 5.739-6.93 21.448-11.29 34.908-6.26 19.297-7.68 24.717-6.7 25.627 3.41 3.18 58.29 42.4 59.32 42.4 0.68 0 1.73-2.72 2.42-6.25zm-129.27-54.808c7.573-5.522 13.773-10.467 13.773-10.987 0-1.007-50.318-37.955-51.689-37.955-0.446 0-0.811 0.317-0.811 0.704 0 0.388 3.825 12.484 8.5 26.882s8.5 26.401 8.5 26.674 0.697 2.163 1.548 4.201c1.832 4.389-0.216 5.349 20.179-9.519zm66.613-5.442c3.03-9.35 7.35-22.629 9.59-29.508 4.36-13.403 4.5-13.992 3.26-13.992-1.39 0-51.69 36.953-51.69 37.971 0 1.477 31.75 24.189 32.58 23.309 0.4-0.431 3.22-8.43 6.26-17.78zm-14.4-32.538l29.32-21.329-2.37-1.927c-10.93-8.844-38.4-16.706-58.39-16.706s-47.464 7.862-58.388 16.708l-2.382 1.929 29.885 21.728c16.845 12.25 30.565 21.552 31.435 21.326 0.86-0.22 14.75-9.999 30.89-21.729z"/>`;
      case "micro":
        return `<path d="m150.18 114.71c-11.276-6.0279-15.771-19.766-9.9989-30.563 6.0279-11.276 19.766-15.771 30.563-9.9989 11.276 6.0279 15.771 19.766 9.9989 30.563-6.0279 11.276-19.766 15.771-30.563 9.9989z"/><path d="m47.263 265.24c-0.41891-0.4189-0.76165-5.194-0.76165-10.611 0-11.606 2.7184-18.417 9.0231-22.606 3.8412-2.5527 4.2946-2.5798 43.128-2.5798h39.246v-13.71-13.71h10.905c10.055 0 11.124-0.2186 13.71-2.8043 2.5824-2.5824 2.8043-3.66 2.8043-13.619v-10.815l3.3639-0.73883c1.8501-0.40636 5.1713-2.7395 7.3804-5.1847 8.0637-8.9255 9.8103-25.642 3.9223-37.54l-2.9588-5.9787 5.9675-5.9676c9.887-9.887 12.537-24.129 6.6886-35.949-1.3037-2.635-2.1165-4.7908-1.8062-4.7908 0.31024 0 3.5239 1.798 7.1414 3.9955 14.491 8.8026 26.675 25.759 31.636 44.025 2.7168 10.004 2.7314 30.947 0.0286 41.093-4.445 16.685-15.856 33.364-29.027 42.425l-4.9176 3.3834v7.9424 7.9424h10.966c12.713 0 17.226 1.5998 21.944 7.7794 2.828 3.7038 3.1086 5.033 3.464 16.405l0.4 12.38h-90.737c-49.906 0-91.08-0.34274-91.499-0.76165zm17.518-81.497v-9.1398h45.699 45.699v9.1398 9.1398h-45.699-45.699v-9.1398zm32.227-32.318-4.8078-4.8988v-13.72-13.72l-4.5699-4.4624-4.5699-4.4624v-27.527-27.527l4.5699-4.4624c4.5593-4.452 4.5699-4.4831 4.5699-13.37 0-8.6703-0.07402-8.9079-2.7746-8.9079-4.4514 0-6.3652-2.8757-6.3652-9.5641 0-3.2854 0.61694-6.5904 1.371-7.3445 1.9422-1.9422 50.155-1.9422 52.097 0 0.75403 0.75403 1.371 4.3347 1.371 7.9571 0 6.9911-1.4848 8.9515-6.7797 8.9515-2.1833 0-2.3601 0.66715-2.3601 8.9079 0 8.8872 0.0103 8.9183 4.5699 13.37l4.5699 4.4624v9.5554c0 8.412-0.33908 10-2.8338 13.271-6.443 8.4472-7.9966 20.22-4.0419 30.628 2.2572 5.9405 2.2572 5.9661 0 8.3688-1.997 2.1258-2.2642 4.0244-2.2642 16.094v13.684l-4.8988 4.8078c-4.877 4.7864-4.9369 4.8078-13.472 4.8078h-8.5731l-4.8078-4.8988z"/>`;
      case "magic":
        return `<path class="bolden" d="m2077.0957,2355.0556 c -24.8548,-6.6306 -43.8442,-12.4931 -65.1438,-20.1115 -171.2303,-61.2458 -332.546,-186.5828 -484.656,-376.562 -106.9479,-133.5736 -211.9033,-304.0752 -307.5304,-499.5874 -70.9505,-145.0603 -137.2376,-301.6744 -201.0755,-475.07329 -4.0445,-10.9859 -7.4891,-20.1129 -7.6546,-20.2824 -0.1656,-0.1694 -2.0374,1.7618 -4.1597,4.2917 -41.97221,50.03289 -102.85691,112.12769 -165.25321,168.53769 -153.4012,138.6841 -322.8342,254.6704 -451.2868,308.9308 -4.8375,2.0435 -9.6944,4.102 -10.793,4.5744 l -1.9977,0.8591 14.4133,7.0194 c 72.3515,35.2357 143.3639,78.5554 206.1228,125.7414 218.7562,164.4739 368.1707,393.9487 437.81411,672.4065 3.7109,14.8375 9.1943,38.7303 9.0117,39.2665 -0.069,0.2024 -1.3235,-3.0502 -2.788,-7.228 -74.09121,-211.3582 -207.71511,-385.1177 -394.71211,-513.2685 -102.107,-69.9749 -219.4845,-126.1019 -348.488,-166.6383 -76.1077,-23.9151 -155.9429,-42.2005 -232.883496,-53.3396 -6.991,-1.0121 -12.8528,-1.8883 -13.0261,-1.947 -0.1733,-0.059 2.0738,-1.6288 4.9936,-3.4891 2.9198,-1.8603 15.625,-10.0516 28.2339,-18.2031 204.092496,-131.9427 358.291896,-247.07 478.472596,-357.2338 37.0992,-34.0071 77.0506,-73.8638 107.6314,-107.3762 86.2451,-94.51319 148.9362,-188.57859 189.3356,-284.08999 30.7863,-72.7845 49.1302,-147.8337 55.0585,-225.2576 0.8677,-11.3324 1.6179,-24.3907 1.6179,-28.1635 l 0,-2.8677 -2.3833,-0.2589 c -5.6397,-0.6126 -53.3922,-2.328 -84.3238,-3.0291 -26.1322,-0.5923 -105.9829,-0.2965 -125.748,0.4658 -35.3648,1.3639 -61.1426,2.7941 -86.7072,4.8105 -195.6367,15.431 -343.0035,61.1297 -446.9275,138.593 -2.4968,1.8611 -4.029,2.8664 -3.4048,2.2341 0.9758,-0.9885 397.2225,-336.9788 399.0477,-338.3654 0.4983,-0.3785 8.2687,0.05 30.6293,1.691 273.5285,20.0676 411.83311,27.9616 556.33281,31.7538 29.6737,0.7788 110.952,1.0595 138.2321,0.4775 83.5286,-1.7821 143.7695,-6.6707 194.0695,-15.7487 47.0041,-8.4831 83.1621,-21.2812 103.3974,-36.5973 1.6154,-1.2226 2.9812,-2.1619 3.0353,-2.0872 0.054,0.075 -0.079,2.1785 -0.2952,4.6753 -0.578,6.6693 -0.5481,29.498 0.048,36.3171 3.3368,38.2002 14.0507,70.8483 33.8884,103.2667 18.8519,30.8073 47.6861,61.0826 82.1419,86.2473 37.3245,27.2597 81.564,49.9843 131.8765,67.7412 4.8688,1.7184 8.2555,3.0024 7.5259,2.8535 -0.7295,-0.1489 -6.3473,-1.3924 -12.484,-2.7634 -39.6642,-8.861 -104.6887,-20.5993 -168.0021,-30.328 -137.3768,-21.1093 -273.1583,-35.4146 -362.8049,-38.2235 l -9.8479,-0.3086 -0.224,1.0898 c -0.1233,0.5995 -0.335,2.5199 -0.4706,4.2677 -1.3397,17.2691 -1.7023,22.4205 -2.2846,32.4584 -2.3935,41.2643 -2.3955,89.1364 -0.01,134.8273 11.3803,217.5701 77.3475,473.27869 189.8401,735.87559 89.2575,208.3584 210.5193,422.3508 332.3606,586.5215 22.7139,30.605 33.0709,42.8702 44.5166,52.7187 25.6187,22.0437 46.811,23.8716 65.2335,5.6265 19.5207,-19.3327 34.7161,-60.9422 45.5423,-124.7077 19.3386,-113.9042 23.2932,-297.6572 10.9059,-506.7671 -4.6678,-78.7985 -10.1013,-140.5522 -20.8699,-237.1961 -5.9357,-53.2693 -7.4546,-65.7004 -8.6502,-70.7914 -4.7369,-20.171 -27.3114,-47.5028 -65.7926,-79.6576 -11.906,-9.9486 -20.1748,-16.4224 -39.1544,-30.6551 -8.4267,-6.3191 -15.3189,-11.6171 -15.3159,-11.7734 0,-0.1563 1.2797,-0.9816 2.8373,-1.8339 14.6036,-7.9917 42.9197,-26.1494 64.2088,-41.17369 35.0761,-24.7546 77.4208,-59.2093 108.4143,-88.2139 58.9609,-55.1774 106.4613,-109.4316 139.8321,-159.7139 2.693,-4.0578 4.9524,-7.3218 5.0209,-7.2532 0.069,0.068 -0.9793,4.6953 -2.3284,10.2819 -52.0714,215.624 -73.4586,458.30359 -63.0753,715.71049 8.1008,200.8217 36.667,415.9599 82.2909,619.7502 l 2.6625,11.8924 -4.124,2.8336 c -25.7438,17.6888 -44.4201,32.0283 -57.3292,44.017 -19.4405,18.0544 -30.6873,35.3946 -36.0405,55.5665 -3.2336,12.1849 -4.2393,21.7435 -4.2035,39.9489 0.043,21.9591 1.571,38.7035 9.4024,103.0498 1.3371,10.9859 2.4091,19.9949 2.3823,20.0199 -0.027,0.025 -1.8874,-0.445 -4.1345,-1.0444 z m 326.7144,-985.6489 c -17.4427,-32.7693 -52.6734,-76.4714 -96.8446,-120.1314 -30.3662,-30.0148 -57.7931,-52.8046 -81.5396,-67.7535 -6.8082,-4.2859 -19.6404,-11.0063 -22.8544,-11.9693 -0.9739,-0.2918 -1.7706,-0.6524 -1.7706,-0.8014 0,-0.149 1.2767,-0.754 2.8373,-1.3444 8.1023,-3.0654 22.7254,-11.5869 35.2957,-20.5684 21.4993,-15.3612 43.2465,-34.1516 68.6986,-59.358 42.609,-42.1976 76.3979,-83.8447 94.6619,-116.67699 2.2626,-4.0672 4.2245,-7.6252 4.36,-7.9065 0.1826,-0.3795 0.3097,-0.3795 0.4923,0 0.1354,0.2813 2.0845,3.8162 4.3314,7.8552 18.2956,32.88899 52.1844,74.66389 94.6871,116.72119 25.6446,25.3759 47.2008,44.0026 68.702,59.3651 12.5703,8.9815 27.1934,17.503 35.2957,20.5684 1.5605,0.5904 2.8373,1.1777 2.8373,1.3051 0,0.1274 -1.2768,0.7145 -2.8373,1.305 -1.5605,0.5904 -5.6973,2.5407 -9.1928,4.334 -24.7032,12.6736 -57.8306,39.0407 -94.1346,74.9245 -44.1711,43.66 -79.4018,87.3621 -96.8445,120.1314 -1.5749,2.9588 -2.9656,5.3796 -3.0904,5.3796 -0.1249,0 -1.5156,-2.4208 -3.0905,-5.3796 z M 166.36129,670.71331 c 0.452,-0.4994 0.9239,-0.9079 1.0487,-0.9079 0.1248,0 -0.1428,0.4085 -0.5947,0.9079 -0.4519,0.4993 -0.9238,0.9079 -1.0487,0.9079 -0.1248,0 0.1428,-0.4086 0.5947,-0.9079 z"/>`;
      case "rocket":
        return `<g transform="translate(0.000000,173.000000) scale(0.100000,-0.100000)" stroke="none"><path class="bolden" d="M1385 1576 c-151 -47 -334 -192 -525 -414 l-85 -99 -65 -6 c-36 -4 -103 -7 -150 -7 -130 -1 -154 -9 -227 -81 -60 -60 -73 -82 -55 -93 4 -2 68 -19 142 -36 74 -17 137 -34 139 -36 3 -3 -3 -18 -13 -34 -17 -29 -17 -31 3 -59 23 -32 129 -131 140 -131 4 0 16 7 27 15 10 8 24 15 30 15 6 0 25 -64 44 -142 18 -79 37 -147 42 -153 8 -10 130 103 150 140 6 10 15 98 19 193 l9 175 42 36 c266 226 420 413 468 570 26 83 26 137 1 151 -26 13 -86 12 -136 -4z m-121 -262 c25 -24 20 -69 -10 -93 -15 -12 -33 -21 -41 -21 -21 0 -63 46 -63 70 0 49 79 80 114 44z m-147 -146 c28 -27 29 -57 3 -86 -40 -43 -110 -18 -110 40 0 33 31 68 62 68 12 0 32 -10 45 -22z m-143 -144 c23 -22 20 -70 -6 -94 -29 -27 -54 -25 -83 5 -30 29 -32 54 -5 83 24 26 72 29 94 6z"/><path class="bolden" d="M438 677 c-21 -12 -38 -27 -38 -32 0 -14 182 -195 196 -195 6 0 22 20 35 45 l24 45 -80 80 c-44 44 -84 80 -90 80 -5 -1 -27 -11 -47 -23z"/><path d="M278 566 c-55 -15 -121 -58 -149 -97 -26 -37 -24 -42 9 -25 35 18 92 30 92 19 0 -4 -19 -20 -43 -35 -58 -37 -83 -66 -92 -107 l-7 -35 32 27 c40 34 50 34 50 -2 0 -49 -18 -84 -70 -133 -30 -28 -50 -55 -50 -68 l0 -21 26 20 c15 12 33 21 40 21 30 0 128 44 160 72 19 17 37 28 41 24 3 -3 -8 -28 -25 -56 -17 -27 -28 -50 -25 -50 3 0 26 11 50 26 30 17 53 42 74 80 17 29 33 54 36 54 6 0 -2 -66 -12 -95 -5 -15 1 -12 20 10 71 81 96 152 80 232 -4 21 -9 34 -11 28 -1 -5 -10 -36 -19 -67 -16 -58 -35 -77 -35 -35 0 12 -4 29 -10 37 -7 11 -11 8 -20 -15 -24 -66 -33 -85 -46 -95 -10 -9 -13 -6 -11 16 3 41 -21 41 -80 1 l-50 -34 7 33 c4 19 17 50 29 69 27 47 27 48 -11 40 l-33 -6 39 35 c21 19 54 40 72 46 45 15 43 28 -6 36 -37 6 -39 8 -22 20 10 7 34 17 53 22 23 7 27 10 12 11 -12 1 -27 3 -35 5 -7 3 -34 -1 -60 -8z"/></g>`;
      case "heart":
        return `<g transform="translate(-607.63544,-698.58531)"><path stroke-linejoin="bevel" d="m617.13,701.11c-1.4819-1.5161-3.8406-2.4136-5.9091-1.5906-3.1802,1.2712-3.8517,4.1218-2.2123,6.797,1.8712,2.8746,4.5334,5.1378,7.2328,7.2307,0.50882,0.48806,1.0416,0.83797,1.5551,0.16685,2.744-2.1002,5.4398-4.3792,7.3689-7.2612,1.8138-3.0332,1.0747-5.4453-1.935-6.8574-2.1226-0.94739-4.5563-0.0556-6.1004,1.5147z" stroke="#333" stroke-linecap="square" stroke-miterlimit="4" stroke-dasharray="none" stroke-width="1"/></g>`;
      case "clover":
        return `<g transform="translate(-126.4 -67.282)"><path style="stroke:#000000;stroke-width:.25pt" d="m452.02 434.8c-34.94 243.11-14.78 319.53 160.84 411.18 15.36 3.36 40.79 0.96 33.11-20.15-199.14-114.69-188.7-141.27-175.23-393.91-43.63 768.78 702.86-132.4 10.47-30.23 711.79-66.28-46.43-703.13-22.24-23.18 11.94-684.77-733.52 34.13-25.81 24.02-675.4-13.74-31.72 748.27 18.86 32.27z"/><path style="fill-rule:evenodd;fill:url(#radialGradient2313)" d="m445.85 337.53c-16.28-66.5-8.14-216.47-116.04-242.26-151.33-4.074-200.87 130.29-185.26 195.44 38 96.36 177.79 86.86 278.91 93.65"/><path style="fill-rule:evenodd;fill:url(#radialGradient2317)" d="m464.84 325.36c18.32-95 22.39-222.58 130.29-248.37 151.34-4.072 204.95 126.22 179.16 191.37-54.29 96.36-173.73 111.29-274.84 118.08"/><path style="fill-rule:evenodd;fill:url(#radialGradient2319)" d="m443.15 455.24c-15.85 66.04-26.25 249.56-131.26 275.17-124.88 30.51-195.49-129.38-180.3-194.07 36.99-95.68 199.51-120.86 297.91-127.6"/><path style="fill-rule:evenodd;fill:url(#radialGradient2321)" d="m477.05 465.75c16.29 66.5-12.21 244.98 95.69 270.77 151.33 4.07 211.05-181.19 195.44-246.34-38-96.37-163.55-84.83-262.62-81.44"/></g>`;
      case "candy":
        return `<g transform="translate(-278 -354.36)"><circle cx="378" cy="453" r="95" stroke="#fff" stroke-width="10" fill-opacity="0" stroke-opacity="1"/><path d="m378 453.77s-13.75 8.52-12.33 23.79c1.42 15.25 26.72 39.51 35.33 50.73 5.08 6.62 7.41 13.49 8.51 18.06 12.92-4.43 24.6-11.54 34.42-20.62-4.16-3.98-11.17-10.44-16.67-14.06-8.18-5.39-33.61-11.74-47.78-25.13-13.78-13.02-1.48-32.77-1.48-32.77z" fill-rule="evenodd"/><path id="strip" d="m378 453.46s-13.75 8.83-12.33 24.1c1.42 15.25 26.72 39.51 35.33 50.73 5.08 6.62 7.41 13.49 8.51 18.06 12.92-4.43 24.6-11.54 34.42-20.62-4.16-3.98-11.17-10.44-16.67-14.06-8.18-5.39-33.61-11.74-47.78-25.13-13.78-13.02-1.48-33.08-1.48-33.08z" fill-rule="evenodd"/><path opacity="0" d="m93.178 199.59c-1.111-0.11-4.52-0.56-7.576-0.99-39.596-5.64-72.571-35.43-82.276-74.35-4.0224-16.12-3.8672-34.85 0.4165-50.241 4.7836-17.188 13.568-32.263 25.888-44.426 6.008-5.93 9.008-8.397 15.42-12.677 26.251-17.523 59.78-21.405 89.54-10.367 23.87 8.851 43.44 26.544 54.93 49.658 11.78 23.69 13.35 52.673 4.21 77.653-5.15 14.06-12.74 25.97-23.29 36.52-15.08 15.08-33.67 24.6-54.79 28.06-5.62 0.92-18.348 1.58-22.472 1.16zm20.692-6.07c4.73-0.69 11.02-2.09 14.83-3.3 2.06-0.66 1.99-1.17-1.13-7.75-2.57-5.43-4.84-8.5-15.09-20.33-9.65-11.14-13.822-16.34-17.533-21.85-6.003-8.92-7.809-13.91-7.485-20.69 0.275-5.75 2.422-10.47 6.968-15.33 1.736-1.86 3.012-3.37 2.835-3.37-1.034 0-7.474 3.36-9.806 5.13-3.841 2.9-5.401 4.72-7.29 8.5-1.565 3.14-1.638 3.55-1.628 9.09 0.017 9.16 2.405 17.81 9.991 36.17 5.884 14.25 6.508 16.71 7.219 28.48 0.197 3.26 0.596 5.99 0.909 6.21 0.738 0.53 10.88-0.03 17.21-0.96zm-54.161-13.01c2.969-7.02 3.307-9.2 5.199-33.65 1.222-15.78 2.313-22.89 4.616-30.05 1.861-5.8 2.946-7.68 6.425-11.14 4.668-4.64 10.067-6.755 17.461-6.836l3.809-0.042-2.627-1.243c-6.412-3.033-15.238-3.469-20.595-1.016-5.703 2.61-12.182 10.537-17.818 21.787-1.391 2.78-4.578 9.94-7.083 15.92-2.504 5.98-5.073 11.77-5.709 12.88-1.56 2.71-6.967 9.67-10.377 13.36l-2.779 3 1.072 1.45c1.339 1.81 7.283 7.18 11.617 10.49 4.387 3.35 13.659 8.88 14.58 8.7 0.406-0.07 1.4-1.7 2.209-3.61zm109.08-15.6c2.16-2.29 5.44-6.24 7.29-8.77 3.77-5.16 8.87-13.78 8.61-14.57-0.26-0.77-7.8-3.68-11.76-4.54-1.92-0.42-10.76-1.33-19.65-2.03-19.82-1.56-26.79-2.49-34.6-4.65-12.36-3.41-19.093-11.95-19.231-24.38l-0.042-3.81-1.242 2.62c-3.037 6.42-3.49 15.2-1.057 20.51 3.712 8.11 15.982 16.2 38.472 25.36 12.42 5.05 16.94 7.84 25.28 15.57 1.66 1.55 3.25 2.83 3.52 2.84s2.26-1.85 4.41-4.15zm-152.35-37.73c5.873-2.72 8.004-4.29 21.029-15.47 17.167-14.747 24.567-20.096 32.298-23.352 2.824-1.189 3.878-1.352 8.766-1.352 5.341 0 5.703 0.071 9.378 1.826 2.443 1.167 5.041 2.965 7.198 4.983 1.856 1.736 3.374 3.002 3.374 2.813s-0.763-1.977-1.696-3.973c-3.17-6.78-7.614-11.448-12.951-13.603-2.317-0.936-3.7-1.115-8.334-1.08-9.035 0.068-16.363 2.083-35.102 9.657-6.529 2.638-12.893 5.094-14.143 5.457-3.258 0.948-8.49 1.666-15.026 2.062l-5.6818 0.344v6.308c0 8.1 1.6093 18.39 4.1094 26.26 0.6204 1.96 0.6824 1.95 6.7814-0.88zm119.42-7.77c6.68-1.61 13.27-3.91 24.63-8.6 13.92-5.75 16.43-6.37 28.78-7.18l5.18-0.34-0.01-5.868c-0.02-7.727-2.24-21.047-4.53-27.067l-0.49-1.274-2.54 1c-7.5 2.959-10.66 5.159-24.12 16.815-11.14 9.647-16.35 13.824-21.86 17.534-8.91 6-13.9 7.81-20.68 7.48-5.78-0.27-10.47-2.41-15.41-7.03-3.8-3.55-3.94-3.26-1.15 2.33 3.47 6.93 8.97 11.87 14.89 13.37 3.12 0.79 11.5 0.23 17.31-1.17zm-9.96-17.13c8.05-3.707 15.33-14.551 24.43-36.392 6.26-15.032 7.56-17.237 15.54-26.307l3.51-3.989-4.02-3.867c-6.88-6.625-21.24-16.497-23.39-16.073-0.92 0.183-3.38 6.421-4.35 11.025-0.42 2.008-1 6.403-1.28 9.767s-0.95 11.457-1.49 17.985c-1.84 22.463-4.4 32.049-10.15 38.137-4.61 4.869-8.86 6.7-16.87 7.257l-5.06 0.347 2.02 0.91c7.05 3.17 15.76 3.66 21.11 1.2zm-18.07-6.566c5.82-2.912 9.87-6.851 12.31-11.991 1.19-2.501 1.32-3.355 1.31-8.586-0.01-9.158-2.4-17.805-9.99-36.168-5.83-14.107-6.46-16.585-7.22-28.355l-0.33-5.1773h-5.224c-6.618 0-15.005 1.1448-22.376 3.0544-3.166 0.8202-5.837 1.4912-5.935 1.4912-1.03 0 2.546 8.1867 5.477 12.539 0.973 1.444 6.292 7.893 11.82 14.331 14.738 17.167 20.088 24.566 23.348 32.298 1.19 2.823 1.35 3.878 1.35 8.765 0 5.341-0.07 5.704-1.82 9.379-1.18 2.468-2.97 5.044-5.06 7.271-3.55 3.799-3.26 3.943 2.34 1.149zm-5-4.162c1.18-3.415 1.4-4.901 1.43-9.596 0.03-5.022-0.1-5.837-1.34-8.476-3.812-8.139-15.541-15.915-37.521-24.878-13.412-5.469-15.445-6.66-23.946-14.03l-5.257-4.558-4.102 4.253c-2.256 2.339-5.564 6.178-7.352 8.532-3.552 4.677-9.093 13.5-9.093 14.478 0 0.724 6.725 3.406 11.235 4.482 1.738 0.414 10.433 1.321 19.322 2.015 17.822 1.392 25.111 2.27 31.567 3.804 9.351 2.222 14.232 4.987 18.304 10.367 2.671 3.529 3.963 7.598 4.293 13.513 0.15 2.726 0.45 4.771 0.67 4.546 0.22-0.226 1.03-2.23 1.79-4.452z" stroke-width="4" transform="translate(278 354.36)"/><path opacity="0" d="m93.178 199.59c-1.111-0.11-4.52-0.56-7.576-0.99-39.596-5.64-72.571-35.43-82.276-74.35-4.0224-16.12-3.8672-34.85 0.4165-50.241 4.7836-17.188 13.568-32.263 25.888-44.426 6.008-5.93 9.008-8.397 15.42-12.677 26.251-17.523 59.78-21.405 89.54-10.367 23.87 8.851 43.44 26.544 54.93 49.658 11.78 23.69 13.35 52.673 4.21 77.653-5.15 14.06-12.74 25.97-23.29 36.52-15.08 15.08-33.67 24.6-54.79 28.06-5.62 0.92-18.348 1.58-22.472 1.16zm20.692-6.07c4.73-0.69 11.02-2.09 14.83-3.3 2.06-0.66 1.99-1.17-1.13-7.75-2.57-5.43-4.84-8.5-15.09-20.33-9.65-11.14-13.822-16.34-17.533-21.85-6.003-8.92-7.809-13.91-7.485-20.69 0.275-5.75 2.422-10.47 6.968-15.33 1.736-1.86 3.012-3.37 2.835-3.37-1.034 0-7.474 3.36-9.806 5.13-3.841 2.9-5.401 4.72-7.29 8.5-1.565 3.14-1.638 3.55-1.628 9.09 0.017 9.16 2.405 17.81 9.991 36.17 5.884 14.25 6.508 16.71 7.219 28.48 0.197 3.26 0.596 5.99 0.909 6.21 0.738 0.53 10.88-0.03 17.21-0.96zm-54.161-13.01c2.969-7.02 3.307-9.2 5.199-33.65 1.222-15.78 2.313-22.89 4.616-30.05 1.861-5.8 2.946-7.68 6.425-11.14 4.668-4.64 10.067-6.755 17.461-6.836l3.809-0.042-2.627-1.243c-6.412-3.033-15.238-3.469-20.595-1.016-5.703 2.61-12.182 10.537-17.818 21.787-1.391 2.78-4.578 9.94-7.083 15.92-2.504 5.98-5.073 11.77-5.709 12.88-1.56 2.71-6.967 9.67-10.377 13.36l-2.779 3 1.072 1.45c1.339 1.81 7.283 7.18 11.617 10.49 4.387 3.35 13.659 8.88 14.58 8.7 0.406-0.07 1.4-1.7 2.209-3.61zm109.08-15.6c2.16-2.29 5.44-6.24 7.29-8.77 3.77-5.16 8.87-13.78 8.61-14.57-0.26-0.77-7.8-3.68-11.76-4.54-1.92-0.42-10.76-1.33-19.65-2.03-19.82-1.56-26.79-2.49-34.6-4.65-12.36-3.41-19.093-11.95-19.231-24.38l-0.042-3.81-1.242 2.62c-3.037 6.42-3.49 15.2-1.057 20.51 3.712 8.11 15.982 16.2 38.472 25.36 12.42 5.05 16.94 7.84 25.28 15.57 1.66 1.55 3.25 2.83 3.52 2.84s2.26-1.85 4.41-4.15zm-152.35-37.73c5.873-2.72 8.004-4.29 21.029-15.47 17.167-14.747 24.567-20.096 32.298-23.352 2.824-1.189 3.878-1.352 8.766-1.352 5.341 0 5.703 0.071 9.378 1.826 2.443 1.167 5.041 2.965 7.198 4.983 1.856 1.736 3.374 3.002 3.374 2.813s-0.763-1.977-1.696-3.973c-3.17-6.78-7.614-11.448-12.951-13.603-2.317-0.936-3.7-1.115-8.334-1.08-9.035 0.068-16.363 2.083-35.102 9.657-6.529 2.638-12.893 5.094-14.143 5.457-3.258 0.948-8.49 1.666-15.026 2.062l-5.6818 0.344v6.308c0 8.1 1.6093 18.39 4.1094 26.26 0.6204 1.96 0.6824 1.95 6.7814-0.88zm119.42-7.77c6.68-1.61 13.27-3.91 24.63-8.6 13.92-5.75 16.43-6.37 28.78-7.18l5.18-0.34-0.01-5.868c-0.02-7.727-2.24-21.047-4.53-27.067l-0.49-1.274-2.54 1c-7.5 2.959-10.66 5.159-24.12 16.815-11.14 9.647-16.35 13.824-21.86 17.534-8.91 6-13.9 7.81-20.68 7.48-5.78-0.27-10.47-2.41-15.41-7.03-3.8-3.55-3.94-3.26-1.15 2.33 3.47 6.93 8.97 11.87 14.89 13.37 3.12 0.79 11.5 0.23 17.31-1.17zm-9.96-17.13c8.05-3.707 15.33-14.551 24.43-36.392 6.26-15.032 7.56-17.237 15.54-26.307l3.51-3.989-4.02-3.867c-6.88-6.625-21.24-16.497-23.39-16.073-0.92 0.183-3.38 6.421-4.35 11.025-0.42 2.008-1 6.403-1.28 9.767s-0.95 11.457-1.49 17.985c-1.84 22.463-4.4 32.049-10.15 38.137-4.61 4.869-8.86 6.7-16.87 7.257l-5.06 0.347 2.02 0.91c7.05 3.17 15.76 3.66 21.11 1.2zm-18.07-6.566c5.82-2.912 9.87-6.851 12.31-11.991 1.19-2.501 1.32-3.355 1.31-8.586-0.01-9.158-2.4-17.805-9.99-36.168-5.83-14.107-6.46-16.585-7.22-28.355l-0.33-5.1773h-5.224c-6.618 0-15.005 1.1448-22.376 3.0544-3.166 0.8202-5.837 1.4912-5.935 1.4912-1.03 0 2.546 8.1867 5.477 12.539 0.973 1.444 6.292 7.893 11.82 14.331 14.738 17.167 20.088 24.566 23.348 32.298 1.19 2.823 1.35 3.878 1.35 8.765 0 5.341-0.07 5.704-1.82 9.379-1.18 2.468-2.97 5.044-5.06 7.271-3.55 3.799-3.26 3.943 2.34 1.149zm-5-4.162c1.18-3.415 1.4-4.901 1.43-9.596 0.03-5.022-0.1-5.837-1.34-8.476-3.812-8.139-15.541-15.915-37.521-24.878-13.412-5.469-15.445-6.66-23.946-14.03l-5.257-4.558-4.102 4.253c-2.256 2.339-5.564 6.178-7.352 8.532-3.552 4.677-9.093 13.5-9.093 14.478 0 0.724 6.725 3.406 11.235 4.482 1.738 0.414 10.433 1.321 19.322 2.015 17.822 1.392 25.111 2.27 31.567 3.804 9.351 2.222 14.232 4.987 18.304 10.367 2.671 3.529 3.963 7.598 4.293 13.513 0.15 2.726 0.45 4.771 0.67 4.546 0.22-0.226 1.03-2.23 1.79-4.452z" stroke-width="4" transform="translate(278 354.36)"/><path opacity="0" d="m93.178 199.59c-1.111-0.11-4.52-0.56-7.576-0.99-39.596-5.64-72.571-35.43-82.276-74.35-4.0224-16.12-3.8672-34.85 0.4165-50.241 4.7836-17.188 13.568-32.263 25.888-44.426 6.008-5.93 9.008-8.397 15.42-12.677 26.251-17.523 59.78-21.405 89.54-10.367 23.87 8.851 43.44 26.544 54.93 49.658 11.78 23.69 13.35 52.673 4.21 77.653-5.15 14.06-12.74 25.97-23.29 36.52-15.08 15.08-33.67 24.6-54.79 28.06-5.62 0.92-18.348 1.58-22.472 1.16zm20.692-6.07c4.73-0.69 11.02-2.09 14.83-3.3 2.06-0.66 1.99-1.17-1.13-7.75-2.57-5.43-4.84-8.5-15.09-20.33-9.65-11.14-13.822-16.34-17.533-21.85-6.003-8.92-7.809-13.91-7.485-20.69 0.275-5.75 2.422-10.47 6.968-15.33 1.736-1.86 3.012-3.37 2.835-3.37-1.034 0-7.474 3.36-9.806 5.13-3.841 2.9-5.401 4.72-7.29 8.5-1.565 3.14-1.638 3.55-1.628 9.09 0.017 9.16 2.405 17.81 9.991 36.17 5.884 14.25 6.508 16.71 7.219 28.48 0.197 3.26 0.596 5.99 0.909 6.21 0.738 0.53 10.88-0.03 17.21-0.96zm-54.161-13.01c2.969-7.02 3.307-9.2 5.199-33.65 1.222-15.78 2.313-22.89 4.616-30.05 1.861-5.8 2.946-7.68 6.425-11.14 4.668-4.64 10.067-6.755 17.461-6.836l3.809-0.042-2.627-1.243c-6.412-3.033-15.238-3.469-20.595-1.016-5.703 2.61-12.182 10.537-17.818 21.787-1.391 2.78-4.578 9.94-7.083 15.92-2.504 5.98-5.073 11.77-5.709 12.88-1.56 2.71-6.967 9.67-10.377 13.36l-2.779 3 1.072 1.45c1.339 1.81 7.283 7.18 11.617 10.49 4.387 3.35 13.659 8.88 14.58 8.7 0.406-0.07 1.4-1.7 2.209-3.61zm109.08-15.6c2.16-2.29 5.44-6.24 7.29-8.77 3.77-5.16 8.87-13.78 8.61-14.57-0.26-0.77-7.8-3.68-11.76-4.54-1.92-0.42-10.76-1.33-19.65-2.03-19.82-1.56-26.79-2.49-34.6-4.65-12.36-3.41-19.093-11.95-19.231-24.38l-0.042-3.81-1.242 2.62c-3.037 6.42-3.49 15.2-1.057 20.51 3.712 8.11 15.982 16.2 38.472 25.36 12.42 5.05 16.94 7.84 25.28 15.57 1.66 1.55 3.25 2.83 3.52 2.84s2.26-1.85 4.41-4.15zm-152.35-37.73c5.873-2.72 8.004-4.29 21.029-15.47 17.167-14.747 24.567-20.096 32.298-23.352 2.824-1.189 3.878-1.352 8.766-1.352 5.341 0 5.703 0.071 9.378 1.826 2.443 1.167 5.041 2.965 7.198 4.983 1.856 1.736 3.374 3.002 3.374 2.813s-0.763-1.977-1.696-3.973c-3.17-6.78-7.614-11.448-12.951-13.603-2.317-0.936-3.7-1.115-8.334-1.08-9.035 0.068-16.363 2.083-35.102 9.657-6.529 2.638-12.893 5.094-14.143 5.457-3.258 0.948-8.49 1.666-15.026 2.062l-5.6818 0.344v6.308c0 8.1 1.6093 18.39 4.1094 26.26 0.6204 1.96 0.6824 1.95 6.7814-0.88zm119.42-7.77c6.68-1.61 13.27-3.91 24.63-8.6 13.92-5.75 16.43-6.37 28.78-7.18l5.18-0.34-0.01-5.868c-0.02-7.727-2.24-21.047-4.53-27.067l-0.49-1.274-2.54 1c-7.5 2.959-10.66 5.159-24.12 16.815-11.14 9.647-16.35 13.824-21.86 17.534-8.91 6-13.9 7.81-20.68 7.48-5.78-0.27-10.47-2.41-15.41-7.03-3.8-3.55-3.94-3.26-1.15 2.33 3.47 6.93 8.97 11.87 14.89 13.37 3.12 0.79 11.5 0.23 17.31-1.17zm-9.96-17.13c8.05-3.707 15.33-14.551 24.43-36.392 6.26-15.032 7.56-17.237 15.54-26.307l3.51-3.989-4.02-3.867c-6.88-6.625-21.24-16.497-23.39-16.073-0.92 0.183-3.38 6.421-4.35 11.025-0.42 2.008-1 6.403-1.28 9.767s-0.95 11.457-1.49 17.985c-1.84 22.463-4.4 32.049-10.15 38.137-4.61 4.869-8.86 6.7-16.87 7.257l-5.06 0.347 2.02 0.91c7.05 3.17 15.76 3.66 21.11 1.2zm-18.07-6.566c5.82-2.912 9.87-6.851 12.31-11.991 1.19-2.501 1.32-3.355 1.31-8.586-0.01-9.158-2.4-17.805-9.99-36.168-5.83-14.107-6.46-16.585-7.22-28.355l-0.33-5.1773h-5.224c-6.618 0-15.005 1.1448-22.376 3.0544-3.166 0.8202-5.837 1.4912-5.935 1.4912-1.03 0 2.546 8.1867 5.477 12.539 0.973 1.444 6.292 7.893 11.82 14.331 14.738 17.167 20.088 24.566 23.348 32.298 1.19 2.823 1.35 3.878 1.35 8.765 0 5.341-0.07 5.704-1.82 9.379-1.18 2.468-2.97 5.044-5.06 7.271-3.55 3.799-3.26 3.943 2.34 1.149zm-5-4.162c1.18-3.415 1.4-4.901 1.43-9.596 0.03-5.022-0.1-5.837-1.34-8.476-3.812-8.139-15.541-15.915-37.521-24.878-13.412-5.469-15.445-6.66-23.946-14.03l-5.257-4.558-4.102 4.253c-2.256 2.339-5.564 6.178-7.352 8.532-3.552 4.677-9.093 13.5-9.093 14.478 0 0.724 6.725 3.406 11.235 4.482 1.738 0.414 10.433 1.321 19.322 2.015 17.822 1.392 25.111 2.27 31.567 3.804 9.351 2.222 14.232 4.987 18.304 10.367 2.671 3.529 3.963 7.598 4.293 13.513 0.15 2.726 0.45 4.771 0.67 4.546 0.22-0.226 1.03-2.23 1.79-4.452z" stroke-width="4" transform="translate(278 354.36)"/><path opacity="0" d="m93.178 199.59c-1.111-0.11-4.52-0.56-7.576-0.99-39.596-5.64-72.571-35.43-82.276-74.35-4.0224-16.12-3.8672-34.85 0.4165-50.241 4.7836-17.188 13.568-32.263 25.888-44.426 6.008-5.93 9.008-8.397 15.42-12.677 26.251-17.523 59.78-21.405 89.54-10.367 23.87 8.851 43.44 26.544 54.93 49.658 11.78 23.69 13.35 52.673 4.21 77.653-5.15 14.06-12.74 25.97-23.29 36.52-15.08 15.08-33.67 24.6-54.79 28.06-5.62 0.92-18.348 1.58-22.472 1.16zm20.692-6.07c4.73-0.69 11.02-2.09 14.83-3.3 2.06-0.66 1.99-1.17-1.13-7.75-2.57-5.43-4.84-8.5-15.09-20.33-9.65-11.14-13.822-16.34-17.533-21.85-6.003-8.92-7.809-13.91-7.485-20.69 0.275-5.75 2.422-10.47 6.968-15.33 1.736-1.86 3.012-3.37 2.835-3.37-1.034 0-7.474 3.36-9.806 5.13-3.841 2.9-5.401 4.72-7.29 8.5-1.565 3.14-1.638 3.55-1.628 9.09 0.017 9.16 2.405 17.81 9.991 36.17 5.884 14.25 6.508 16.71 7.219 28.48 0.197 3.26 0.596 5.99 0.909 6.21 0.738 0.53 10.88-0.03 17.21-0.96zm-54.161-13.01c2.969-7.02 3.307-9.2 5.199-33.65 1.222-15.78 2.313-22.89 4.616-30.05 1.861-5.8 2.946-7.68 6.425-11.14 4.668-4.64 10.067-6.755 17.461-6.836l3.809-0.042-2.627-1.243c-6.412-3.033-15.238-3.469-20.595-1.016-5.703 2.61-12.182 10.537-17.818 21.787-1.391 2.78-4.578 9.94-7.083 15.92-2.504 5.98-5.073 11.77-5.709 12.88-1.56 2.71-6.967 9.67-10.377 13.36l-2.779 3 1.072 1.45c1.339 1.81 7.283 7.18 11.617 10.49 4.387 3.35 13.659 8.88 14.58 8.7 0.406-0.07 1.4-1.7 2.209-3.61zm109.08-15.6c2.16-2.29 5.44-6.24 7.29-8.77 3.77-5.16 8.87-13.78 8.61-14.57-0.26-0.77-7.8-3.68-11.76-4.54-1.92-0.42-10.76-1.33-19.65-2.03-19.82-1.56-26.79-2.49-34.6-4.65-12.36-3.41-19.093-11.95-19.231-24.38l-0.042-3.81-1.242 2.62c-3.037 6.42-3.49 15.2-1.057 20.51 3.712 8.11 15.982 16.2 38.472 25.36 12.42 5.05 16.94 7.84 25.28 15.57 1.66 1.55 3.25 2.83 3.52 2.84s2.26-1.85 4.41-4.15zm-152.35-37.73c5.873-2.72 8.004-4.29 21.029-15.47 17.167-14.747 24.567-20.096 32.298-23.352 2.824-1.189 3.878-1.352 8.766-1.352 5.341 0 5.703 0.071 9.378 1.826 2.443 1.167 5.041 2.965 7.198 4.983 1.856 1.736 3.374 3.002 3.374 2.813s-0.763-1.977-1.696-3.973c-3.17-6.78-7.614-11.448-12.951-13.603-2.317-0.936-3.7-1.115-8.334-1.08-9.035 0.068-16.363 2.083-35.102 9.657-6.529 2.638-12.893 5.094-14.143 5.457-3.258 0.948-8.49 1.666-15.026 2.062l-5.6818 0.344v6.308c0 8.1 1.6093 18.39 4.1094 26.26 0.6204 1.96 0.6824 1.95 6.7814-0.88zm119.42-7.77c6.68-1.61 13.27-3.91 24.63-8.6 13.92-5.75 16.43-6.37 28.78-7.18l5.18-0.34-0.01-5.868c-0.02-7.727-2.24-21.047-4.53-27.067l-0.49-1.274-2.54 1c-7.5 2.959-10.66 5.159-24.12 16.815-11.14 9.647-16.35 13.824-21.86 17.534-8.91 6-13.9 7.81-20.68 7.48-5.78-0.27-10.47-2.41-15.41-7.03-3.8-3.55-3.94-3.26-1.15 2.33 3.47 6.93 8.97 11.87 14.89 13.37 3.12 0.79 11.5 0.23 17.31-1.17zm-9.96-17.13c8.05-3.707 15.33-14.551 24.43-36.392 6.26-15.032 7.56-17.237 15.54-26.307l3.51-3.989-4.02-3.867c-6.88-6.625-21.24-16.497-23.39-16.073-0.92 0.183-3.38 6.421-4.35 11.025-0.42 2.008-1 6.403-1.28 9.767s-0.95 11.457-1.49 17.985c-1.84 22.463-4.4 32.049-10.15 38.137-4.61 4.869-8.86 6.7-16.87 7.257l-5.06 0.347 2.02 0.91c7.05 3.17 15.76 3.66 21.11 1.2zm-18.07-6.566c5.82-2.912 9.87-6.851 12.31-11.991 1.19-2.501 1.32-3.355 1.31-8.586-0.01-9.158-2.4-17.805-9.99-36.168-5.83-14.107-6.46-16.585-7.22-28.355l-0.33-5.1773h-5.224c-6.618 0-15.005 1.1448-22.376 3.0544-3.166 0.8202-5.837 1.4912-5.935 1.4912-1.03 0 2.546 8.1867 5.477 12.539 0.973 1.444 6.292 7.893 11.82 14.331 14.738 17.167 20.088 24.566 23.348 32.298 1.19 2.823 1.35 3.878 1.35 8.765 0 5.341-0.07 5.704-1.82 9.379-1.18 2.468-2.97 5.044-5.06 7.271-3.55 3.799-3.26 3.943 2.34 1.149zm-5-4.162c1.18-3.415 1.4-4.901 1.43-9.596 0.03-5.022-0.1-5.837-1.34-8.476-3.812-8.139-15.541-15.915-37.521-24.878-13.412-5.469-15.445-6.66-23.946-14.03l-5.257-4.558-4.102 4.253c-2.256 2.339-5.564 6.178-7.352 8.532-3.552 4.677-9.093 13.5-9.093 14.478 0 0.724 6.725 3.406 11.235 4.482 1.738 0.414 10.433 1.321 19.322 2.015 17.822 1.392 25.111 2.27 31.567 3.804 9.351 2.222 14.232 4.987 18.304 10.367 2.671 3.529 3.963 7.598 4.293 13.513 0.15 2.726 0.45 4.771 0.67 4.546 0.22-0.226 1.03-2.23 1.79-4.452z" stroke-width="4" transform="translate(278 354.36)"/><use xlink:href="#strip" transform="matrix(.70711 .70711 -.70711 .70711 431.36 -134.47)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(0 1 -1 0 831.46 75.459)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(-.70711 .70711 -.70711 -.70711 965.93 506.82)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(-1 0 0 -1 756 906.92)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(-.70711 -.70711 .70711 -.70711 324.64 1041.4)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(0 -1 1 0 -75.459 831.46)" height="200" width="200" y="0" x="0"/><use xlink:href="#strip" transform="matrix(.70711 -.70711 .70711 .70711 -209.93 400.1)" height="200" width="200" y="0" x="0"/></g>`;
      case "ghost":
        return `<g transform="translate(-155.47 -349.08)"><path style="fill-rule:evenodd;fill-opacity:.23529" d="m173.41 714.4c14.34 14.61 41.61 3.99 64.07 11.77 18.22 6.31 26.89 47.49 48.08 40.02 21.2-7.48 57.12-26.89 80.97-20.3 23.84 6.59 53.55 51.28 72.75 29.46 16.3-18.54 24.1-64.75 64.89-60.09 40.9 4.67 49.73 1.54 44.24-48.91-3.18-29.27 22.2-53.58-12.14-76.31-53.56-35.44-138.73-13.39-190.34 21.28-59.09 39.69-194.07 81.13-172.52 103.08z"/><path style="fill-opacity:.62745" d="m497.32 591.87c0 75.86 35.79 95.42 35.79 130.6 0 19.52-35.4-24.07-55.26-14.2-18.42 9.15-41.11 17.79-64.14 4.16-13.72-8.12 5.41-21.33-21.11-21.33-21.15 0-53.39 13.1-73.56 15.92-18.34 2.56-37.91-14.19-70.27-4.64-20.11 5.94-91.3 48.27-91.3 28.76 0-24.85 33.28-51.93 33.28-139.27 0-84.62 68.67-153.29 153.28-153.29 84.62 0 153.29 68.67 153.29 153.29z" transform="matrix(1 0 0 1.1622 0 -158.65)"/><path style="stroke-linejoin:round;fill-opacity:.62745;stroke:#000000;stroke-linecap:round;stroke-width:3.7104" d="m497.32 591.87c0 75.86 35.79 95.42 35.79 130.6 0 19.52-48.88 5.28-68.74 15.15-18.42 9.15-10.87 22.93-37.4 31.77-19.05 6.36-44.46-22.61-70.98-22.61-21.15 0-60.19 24.42-78.53 16.66s-16.6-33.62-44.95-36.12c-21.16-1.86-75.04 23.33-75.04 3.82 0-24.85 33.28-51.93 33.28-139.27 0-84.62 68.67-153.29 153.28-153.29 84.62 0 153.29 68.67 153.29 153.29z" transform="matrix(1 0 0 1.1622 0 -158.65)"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:4;fill:#ffffff" d="m293.5 439.04c-20.56 0-37.25 19.18-37.25 42.8 0 23.63 16.69 42.81 37.25 42.81 15.89 0 29.46-11.47 34.81-27.57 5.35 16.1 18.93 27.57 34.81 27.57 20.57 0 37.26-19.18 37.25-42.81 0-23.62-16.68-42.8-37.25-42.8-15.88 0-29.45 11.43-34.81 27.53-5.35-16.1-18.92-27.53-34.81-27.53z"/><path style="fill:#000000" d="m497.32 591.87a153.29 153.29 0 1 1 -306.57 0 153.29 153.29 0 1 1 306.57 0z" transform="matrix(.10522 0 0 .10565 318.09 426.67)"/><path style="fill:#000000" d="m497.32 591.87a153.29 153.29 0 1 1 -306.57 0 153.29 153.29 0 1 1 306.57 0z" transform="matrix(.10522 0 0 .10565 266.9 426.67)"/><path style="fill-rule:evenodd;fill:#000000;fill-opacity:.11765" d="m444.06 411.72c5.91-2.08 35.6 37.21 41.02 78.49 3.68 28.08 2.12 71.42 6.36 96.17s40.91 88.99 26.16 88.39c-34.65-1.42-56.75-57.15-48.84-136.87 8.92-89.9-38.62-121.27-24.7-126.18z"/><path style="fill-rule:evenodd;fill:#000000;fill-opacity:.11765" d="m458.21 691.03c-8.02 7.86-22.63 45.26-30.41 28.28-7.78-16.97-1.29-47.19-7.07-91.92-4.4-34.02-20.59-74.62-8.68-68.44 11.87 6.17 20.49 24.75 31.31 57.13 9.45 28.3 24.45 65.54 14.85 74.95z"/><path style="fill-rule:evenodd;fill:#000000;fill-opacity:.11765" d="m342.94 700.42c-7.67 8.19-26.44 17.95-35.94 16.1-12.51-2.43-14.44-44.39-9.41-71.66 4.95-26.87 14.48-66.04 22.45-71.92 9.69-7.14 0.7 26.78 9.79 73.41 6.96 35.68 20.6 46.07 13.11 54.07z"/><path style="fill-rule:evenodd;fill:#000000;fill-opacity:.11765" d="m240.42 677.6c-11.11-1.62-21.62 1.14-30.41 3.53-12.3 3.35-0.78-15.15 15.56-47.38 12.35-24.36 15.25-49.48 22.42-56.31 8.53-8.14-2.39 23.7-4.42 54.62-1.88 28.69 5.04 46.73-3.15 45.54z"/><path style="fill-rule:evenodd;fill:#ffffff;fill-opacity:.62745" d="m217.08 459.1c27.34-73.67 79.96-89.14 93.34-88.39 20.33 1.14 14.72 30.62-24.75 41.01-40.23 10.59-82.97 86.14-68.59 47.38z"/></g>`;
      case "turkey":
        return `<g transform="matrix(.85837 0 0 .89859 166.58 25.737)"><path style="fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:2.9179;fill:#ff7400" d="m-115.23 203.63c-6.07 0.61-5.19 8.12-4.92 12.56-0.08 11.77 0.03 23.55 0.17 35.32-9.58-1.26-19.14-3.86-28.69-4.66-5.35 0.65-6.45 9.22-0.66 10.16 3.72 1.31 16.89 1.53 14.3 3.45-8.19 3.73-17.28 6.05-25.11 10.27-4.21 4.12 1.64 11.5 6.72 8.26 10.03-3.82 19.97-7.88 29.97-11.8-0.95 5.45-5.76 10.54-4.75 16.13 2.18 5.65 11.6 4.44 11.78-2.09 2.52-6.53 4.8-13.15 7.25-19.69 8.97-3.99 18.702-6.75 27.406-11.06 4.357-3.37 0.731-10.9-4.687-9.07-7.419 2.66-14.729 5.77-22.029 8.63-0.21-13.77-0.2-27.58-0.16-41.28-0.43-3.17-3.45-5.4-6.59-5.13z"/><g transform="matrix(.85527 .51818 -.51818 .85527 -158.14 -127.38)"><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:4.1369" d="m280.85 64.552c-2.42-10.609-7.01-14.965-9.67-15.061-6.36-0.916-11.61 2.495-17.19 4.549-2.93 1.933-6.85 3.234-6.06 14.207 1.37 10.236 5.1 21.739 8.52 31.843 7.11 20.52 17.16 36.95 23.6 36.1 8.37-0.54 9.47-24.17 5.16-50.362-1.11-6.905-2.58-14.089-4.36-21.276z"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:4.1369" d="m304.51 66.941c0.44-10.872-2.85-16.275-5.4-17.061-5.9-2.544-11.86-0.624-17.78-0.097-3.34 1.101-7.45 1.335-9.56 12.133-1.35 10.239-0.75 22.317-0.08 32.961 1.51 21.673 6.92 40.153 13.36 41.013 8.22 1.66 15.45-20.86 18.12-47.273 0.73-6.956 1.19-14.274 1.34-21.676z"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:4.1369" d="m326.79 71.713c2.69-10.543 0.6-16.513-1.73-17.813-5.24-3.717-11.47-3.082-17.37-3.8-3.49 0.382-7.57-0.248-11.88 9.875-3.45 9.733-5.38 21.67-6.95 32.22-3.03 21.505-1.59 40.715 4.53 42.895 7.69 3.34 19.45-17.19 27.57-42.458 2.16-6.651 4.13-13.713 5.83-20.919z"/></g><path style="fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:2.9179;fill:#ff7400" d="m-25.67 202.94c-6.844 0.91-5.714 9.17-5.187 14.13-0.449 10.71-0.051 21.53-0.344 32.28-8.15-2.59-15.95-7.69-24.469-8.72-6.459 0.78-4.689 10.7 1.219 10.72 7.897 3.67 17.359 5.81 24.287 10.44 3.419 7.63 4.815 16.52 9.463 23.44 4.258 3.57 12.111-1.79 8.781-6.91-1.199-4.86-8.106-15.57 1.211-9.63 9.2192 3.21 18.062 8.01 27.508 10.29 6.172 0.06 6.808-10.02 0.562-10.47-7.958-3.16-15.916-6.32-23.875-9.47 6.1011-1.92 13.779-0.49 19.032-4.41 3.664-4.12-2.189-10.5-6.8442-8.12-8.4583 1.43-16.917 2.87-25.375 4.31-0.081-14.9 0.804-30.01-0.281-44.78-0.99-2.09-3.411-3.33-5.688-3.1z"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:4" d="m39.3 136.42c0.018 60.5-49.028 109.57-109.54 109.57-60.5 0-109.55-49.07-109.53-109.57-0.02-60.513 49.03-109.57 109.53-109.57 60.512-0.004 109.56 49.057 109.54 109.57z"/><path style="fill:#000000;fill-opacity:.31373" d="m32.678 98.835c0.077 1.685 0.125 3.395 0.125 5.095 0 60.46-49.067 109.53-109.53 109.53-47.263 0-87.593-30-102.94-71.97 2.66 58.11 50.68 104.47 109.44 104.47 60.466 0 109.53-49.07 109.53-109.53 0.003-13.2-2.335-25.87-6.622-37.595z"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:2.7157" d="m2.1311 68.361c0.0122 41.079-33.287 74.389-74.367 74.389-41.084 0-74.384-33.31-74.364-74.389-0.02-41.081 33.28-74.39 74.364-74.39 41.08 0.0001 74.379 33.309 74.367 74.39z"/><g transform="matrix(1.387 0 0 1.387 -219.24 -22.138)"><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:2.7096;fill:#ffffff" d="m142.82 56.167c0 8.48-6.87 15.356-15.35 15.356s-15.36-6.876-15.35-15.356c-0.01-8.481 6.87-15.357 15.35-15.357s15.35 6.876 15.35 15.357z"/><path style="fill:#000000" d="m129.17 58.876c0 2.827-2.29 5.119-5.11 5.119-2.83 0-5.12-2.292-5.12-5.119 0-2.826 2.29-5.118 5.12-5.118 2.82 0 5.11 2.292 5.11 5.118z"/></g><g transform="matrix(1.387 0 0 1.387 -227.88 -22.138)"><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:2.7096;fill:#ffffff" d="m107.1 56.167c0 8.48-6.87 15.356-15.353 15.356-8.481 0-15.354-6.876-15.352-15.356-0.002-8.481 6.871-15.357 15.352-15.357 8.483 0 15.353 6.876 15.353 15.357z"/><path style="fill:#000000" d="m100.7 58.876c0 2.827-2.289 5.119-5.115 5.119-2.827 0-5.118-2.292-5.118-5.119 0-2.826 2.291-5.118 5.118-5.118 2.826 0 5.115 2.292 5.115 5.118z"/></g><path sodipodi:nodetypes="ccsscssc" style="fill:#000000;fill-opacity:.31373" d="m0.50242 43.147l-1.7453 2.656c0.2317 3.075 0.31998 6.203 0.31998 9.375 0 45.172-45.049 82.662-76.183 77.752-25.924-4.09-56.874-19.66-70.804-52.502 7.09 40.242 53.222 70.072 75.284 69.842 48.913-0.51 76.183-35.14 76.183-80.311-0.0003-9.391-1.0013-18.41-3.0546-26.812z"/><path sodipodi:nodetypes="cccc" style="stroke-linejoin:round;fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:2.7;fill:#ff0000" d="m-93.201 104.64l18.432 43.42 20.265-38.98c-7.019-17.715-28.292-19.955-38.697-4.44z"/><path sodipodi:nodetypes="cccc" style="stroke-linejoin:round;fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:3.099;fill:#ffce00" d="m-97.88 91.921l12.711 50.429 32.59-36.35c-4.587-20.458-29.533-27.986-45.301-14.079z"/><path sodipodi:nodetypes="ccss" style="stroke-linejoin:round;fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:2.5523;fill:#ff0000" d="m-40.768 135.49c-0.683-18.63-11.906-30.13-18.566-44.713 3.331 17.753 5.632 30.963-1.018 44.733-17.46 36.14 21.121 41.97 19.584-0.02z"/></g>`;
      case "present":
        return `<g transform="matrix(1.7177 0 0 1.5227 -1580.9 -1049.2)"><g><g transform="translate(-1.0533 .010322)"><g transform="translate(-18.177)"><path d="m954.95 811.38v168.01h227.13v-168.01h-227.15z"/></g><path style="filter:url(#filter6051);fill:#000000" d="m960.99 800.74c-22.932 0-28.833-0.52068-28.833 2.0315v12.32h237.59v-12.32c0-3.0663-6.2043-2.0315-28.833-2.0315h-179.92z" transform="matrix(.96746 0 0 1 33.31 0)"/><path d="m960.38 754.36c-22.932 0-28.833-2.0792-28.833 8.1124v49.197h237.59v-49.197c0-12.245-6.2043-8.1124-28.833-8.1124h-179.92z"/></g><g transform="matrix(1.2153,0,0,1,-504.94,-4.2133)"><path style="fill:#eeeeee" d="m1261.8 758.58v57.353h34.251v-57.353zm3.4393 60.452v164.58h27.42v-164.76z"/></g></g><path d="m990.84 693.88c-0.28961 0.00015-0.56153 0.0106-0.84859 0.0291-1.3779 0.0873-2.7096 0.39681-3.9601 0.98768-4.5128 2.1323-8.4746 6.6852-10.34 11.823-3.8774 10.679-3.8866 23.981 0 34.656 1.8664 5.1257 4.6015 11.765 10.34 11.765h37.558c5.7388 0 10.372-5.2365 10.372-11.765 0 0 1.6597-16.387-1.9485-22.833-7.3103-13.059-22.011-19.557-35.138-23.646-1.9045-0.59321-4.0071-1.0178-6.0344-1.0167zm116.35 0.0291c-1.856 0.0613-3.7589 0.44531-5.5001 0.98768-13.127 4.0886-27.828 10.587-35.138 23.646-3.6081 6.4459-1.9485 22.833-1.9485 22.833 0 6.5284 4.6328 11.765 10.372 11.765h37.558c5.7386 0 8.4739-6.6392 10.34-11.765 3.8866-10.674 3.8774-23.977 0-34.656-1.8656-5.1379-5.8275-9.6907-10.34-11.823-1.6674-0.78781-3.4871-1.049-5.343-0.98768zm-106.33 16.616c1.3918-0.00072 2.8097 0.27875 4.1172 0.66814 9.0121 2.6838 19.119 6.9401 24.138 15.512 2.4772 4.2311 1.32 14.989 1.32 14.989 0 4.2853-3.163 7.7271-7.103 7.7271h-25.772c-3.9399 0-5.8216-4.3626-7.103-7.7271-2.6684-7.0066-2.6621-15.736 0-22.746 1.2808-3.3725 4.0048-6.3565 7.103-7.7561 0.85851-0.38784 1.757-0.58183 2.703-0.63909 0.197-0.0122 0.3982-0.029 0.5971-0.0291zm96.834 0c0.1989 0.00011 0.4001 0.0168 0.5972 0.0291 0.946 0.0572 1.8444 0.25125 2.7029 0.63909 3.0982 1.3997 5.8222 4.3836 7.103 7.7561 2.6621 7.0095 2.6684 15.739 0 22.746-1.2813 3.3646-3.163 7.7271-7.103 7.7271h-25.772c-3.94 0-7.103-3.4418-7.103-7.7271 0 0-1.1572-10.758 1.32-14.989 5.0189-8.5722 15.094-12.829 24.106-15.512 1.3077-0.38938 2.7569-0.66885 4.1487-0.66814zm-61.601 10.487c3.6081 5.9898 1.98 21.206 1.98 21.206 0 3.2228-1.2836 6.1081-3.3629 8.1047 1.3129 1.7278 3.2939 2.8178 5.5629 2.8178h17.978c2.2783 0 4.3133-1.0778 5.6258-2.8178-2.0792-1.9967-3.3943-4.8819-3.3943-8.1047 0 0-1.6596-15.216 1.9486-21.206-4.9184-8.6546-20.95-8.9634-26.338 0z"/></g>`;
      case "nuclear":
        return `<g transform="translate(-143.68 -113.18)"><path d="m-288-768c0 132.55-107.45 240-240 240s-240-107.45-240-240 107.45-240 240-240 240 107.45 240 240z" transform="matrix(.20937 0 0 .20937 304.83 324.58)"/><path style="block-progression:tb;text-indent:0;color:#000000;text-transform:none;fill:#000000" d="m72 15.344c-1.714 0.764-2.105 3.307-3.344 4.656-3.561 6.051-7.251 12.36-10.5 18.281 0.007 0.139 0.038 0.277 0.063 0.407 0.002 0.009-0.002 0.021 0 0.031 3.647 2.336 6.165 6.276 6.5 10.843 8.395 0.758 16.865 0.084 25.25 0.344 1.69-0.177 2.404-1.7 1.781-3.25-1.056-12.593-8.403-24.831-19.25-31.218-0.155-0.065-0.341-0.121-0.5-0.094zm-43.031 0.031c-4.427 2.218-8.066 6.016-11.157 9.906-4.957 6.546-8.1344 14.688-8.4058 22.907 0.2273 2.214 2.5768 1.849 4.1878 1.687 7.615-0.103 15.36 0.321 22.906-0.25 0.317-4.598 2.829-8.592 6.5-10.937 0.06-0.996-0.576-2.065-1.281-2.876-3.889-6.71-7.632-13.661-11.75-20.156-0.28-0.194-0.658-0.324-1-0.281zm28.312 47.687c-1.989 1.068-4.24 1.688-6.656 1.688-2.375 0-4.628-0.59-6.594-1.625-1.851 2.121-3.05 4.972-4.593 7.344-2.593 4.824-5.532 9.414-8.094 14.219-0.457 1.013-0.458 2.233 0.906 2.468 10.345 5.569 23.536 5.813 34.25 1.219 1.17-0.792 3.29-1.152 3.844-2.469-3.28-7.268-8.056-13.839-11.688-20.937-0.413-0.514-0.839-1.343-1.375-1.907z" transform="translate(143.68 113.18)"/><path style="color:#000000;fill:#000000" d="m55.18 37.958a17.551 17.551 0 1 1 -35.103 0 17.551 17.551 0 1 1 35.103 0z" transform="matrix(.53237 0 0 .53237 174.25 143.58)"/></g>`;
      case "zombie":
        return `<g transform="translate(0 -748.36)"><g transform="matrix(-.31182 .16752 .16752 .31182 280.12 -25.35)"/><path inkscape:connector-curvature="0" d="m22.438 748.89c-2.3783 0.004-4.7738 0.2243-7.0938 0.625-3.0414 0.52531-6.2955 1.2682-8.6875 3.2188-2.4578 2.0042-3.8751 5.0974-5 8.0625-1.1438 3.01-1.562 6.31-1.657 9.53-0.0039925 1.79 1.5955 2.93 2.375 4.4 1.0516 1.5482 2.1069 3.1065 3.1562 4.6562 1.8952 0.19936 2.6991 3.1092 4.9375 1.9375 0.43807-0.22931 1.1434 0.53008 1.5938 0.84375 1.8722 1.3039 2.8028 3.8144 3.7188 6.625l-1.2188 7.875h-0.0937s-5.0247 2.9375-6.3437 5.375c-3.1225 5.7702-3.248 13.021-2.4375 19.531 0.8854 7.112 7.8125 20.031 7.8125 20.031l12.219 20.031c0 3.6446 1.1456 7.8849-1.4688 10.75l-12.219 33.719 14.719 4 0.0937 5.5938-1.4688 7.5938c0.5384 1.2127 1.0985 2.4166 1.6562 3.625l0.28125 14.875c-0.67541 1.1028-1.3714 2.2107-1.9375 3.3438v3.5l2.0312-0.875 0.0313 1.3438-1.625 2.6875c0.53438 2.532 1.1526 5.0528 1.7812 7.5625l0.0937 4.9062v3.4062 3.4375l2.9062 0.46875-6.3438 0.5 5.875 1.9375-6.8438 53.75 2.375-0.2813-1.1562 10.125c-0.45026 1.769-0.94883 3.5958-1.5 5.5313 0.39072 0.7122 0.34432 1.3681 0.625 2.125l-0.3437 2.9062s1.3255 0.046 3.5 0.125c0.50942 0.3054 1.065 0.6215 1.75 0.9688 1.1737-0.324 2.3435-0.567 3.5312-0.75 5.3213 0.2312 12.082 0.5737 19.156 1.125 3.2652 0.6275 6.5457 1.3567 9.8125 2 0 0 3.9511 1.4688 5.75 0.2187 0.12424-0.086 0.23511-0.1786 0.34375-0.2812 1.4512 0.083 1.6202-0.5318 0.8125-2.5625-0.0403-0.1736-0.1089-0.3256-0.1875-0.5-0.0525-0.1227-0.111-0.2754-0.1875-0.4063-0.0194-0.031-0.0418-0.063-0.0625-0.094-2.0116-3.2477-10.862-8.7942-17.156-12.469l-6.5938-5.8125-0.125-4.4063 4.0938-0.5 6.8125 1.9688-8.2812-6.3438 7.25-16.844 1.9688-5.875v-2.4688l1.5312-4.1562 1.4062-2.2188 1.625-2.5938v-3.5l0.71875-1.9375 2.5625-1.7812v-4.25l-0.15625-0.59375 1.1562-3.125-0.6875-8.375-1.5-2.3125 1.875-3.5 3.0938-11.656 19.688 17.531 3.0938 9.1875 0.21875 3.5938 4.9688 14.594 1.4062 1.25 3.625 10.687-0.0937 1.125 1.125 8.3125 2.375 0.6563 1.5938 4.6562-0.8125 2.125 1.5625 0.094 2.9375 8.6875 4.8438-2 3.9688 6.7813 0.90625 2.25s1.7959 2.6535 3.4688 5.2812l2.5 4.25 0.125 0.1875c0.0448 0.082 0.0724 0.1747 0.125 0.25l1.7188 2.9375s1.1195-0.817 2.125-1.5625c1.3638-0.1458 2.7538-0.7693 3.625-1.8125 0.38776-0.4643 1.4373-1.6265 2.5-2.7812 6.1256-4.6108 14.384-10.902 21.188-16.469 5.367-4.3911 5.4676-5.1506 3.0938-6.0937h-0.0313c-0.43435-1.6187-2.0748-2.1884-3.75-1.3125-3.4142-0.8451-9.2201 0.932-12.969 2.3437l-4.0625 0.8438-3.0625-3.8438 5.9375-2.4375-24.156-55.406c-1.1354-1.4368-2.1484-3.0929-3.125-4.8438l-0.40625-1.625-1.0312-1.0312c-1.1655-2.2508-2.2977-4.5402-3.5-6.6562v-2.2812l-4.0625-2.25-2.4375-4.8438-5.2813-7.2188v-3.3125l-2.7188-4.0938-8.5312-8.125-0.53125-0.59375 5.4375-5.6875-5.8438-6.8438c-19.737-27.85-15.325-29.484-15.325-59.056l33.388 6.7747 4.9062-5.875 1.4688 10.281 6.3438-6.8438v3.9062l-8.8125 9.2812 14.656-6.8438-9.75 12.219 12.219-12.219 4.75-11.906h9.75s1.0387 0.20462 1.4688 0.5c0.599 0.4114 0.76027 1.3547 1.4062 1.6875 1.2644 0.65144 4.25 0.28125 4.25 0.28125l1.5-0.59375 2.0625 2 1.7812 1.4688s-0.0725 1.9435 0.59375 2.4688c0.33686 0.26558 0.96617 0.29109 1.2812 0 0.75369-0.69631 0.25-3.0625 0.25-3.0625l-1.5312-2.375-2.1875-2.0938c1.0124-0.84362 1.3669-1.0725 1.1875-2.4688l1.1875 0.90625 3.2812 3.1562 1.9375 3.8438c0.34629 0.69046 0.99009-0.34336 1.125-0.78125 0.38211-1.2401-1.375-3.6562-1.375-3.6562l-3.0625-2.9688-2.0938-1.5938v-0.875l2.7812 1.7812 2.9688 3.1562s1.1529 3.9376 2.2812 3.2812l0.65625-0.40625c1.2374-0.71971-1.5625-3.8438-1.5625-3.8438l-2.875-3.4688-3.1562-2 0.0937-0.46875 4.4688 2.75 2.4688 3.4688s1.1984 3.5019 2.125 2.7188l0.75-0.625c0.83773-0.70804-1.1875-3.0938-1.1875-3.0938l-2.0938-2.8438-5.625-3.875-4.5625-1.7812h-3.2812l-7.125 0.59375-10.812 0.46875-49.313-9.0625-4.8125-2.6875 1.875 0.71875 13.688-2.4375 18.063 1.2997 8.3125 2.1378 4.8438-2 13.056 4.9453-7.4623-7.0078 17.906 5.5-10.406-7.0312 13.812 8.0312-3.5032-12.694 3.0657-6.5876 0.5-0.125 4.8438 1.4375c2.4808-0.15739 4.9274-0.73245 7.375-1.1875l3.75 2.0625c1.5082 0.5036 1.7066 2.0194 2.875 3.2812s1.8982 0.36488 1.7812-0.5c-0.11696-0.86489-1.0215-1.8779-1.5312-2.8125-1.47-0.73498-2.03-2.2025-3.5-2.9375-1.3294-0.65477-0.20295-1.0557-0.15625-2.1562 2.1595 0.94461 3.1315 1.371 5.2188 2.4688 1.8657 0.53384 2.6786 3.0545 3.5312 3.9062 0.8527 0.85175 1.0594-0.75484 1.0312-1.5312-0.0282-0.77641-0.76679-1.7057-1.1562-2.5625-2.6783-2.1108-5.7609-3.7471-8.7812-5.3438l1.5312-1 4.25 1.25c0.41544 0.53897 0.63053 1.3091 0.96875 1.9375 0.25018 1.4532 1.919 2.7247 2.9375 2.4062 1.0185-0.31842 0-1.7128 0-2.5625-1.172-1.5069-2.4842-2.7431-3.6562-4.25-0.51541-0.15805-1.0232-0.2671-1.5938-0.3125-0.94107 0.2233-1.5898-0.3646-1.9375-1.2188 0.86347-0.30645 3.1926 0.8365 4.5625 1.1562 3.1891 0.76746 1.7252 3.6547 2.875 4.9062 1.1498 1.2516 1.6571-1.5971 1.5312-2.0625-0.14318-2.7076-1.8774-3.5601-2.8125-5.3438l-7.5625-2.2812c-0.8088 0.0749-1.6259 0.35332-2.4375 0.5-3.8176 0.68508-7.4139 2.2147-11.031 3.5625-1.8186 0.77989-3.6858 1.3283-5.5938 1.8125l-0.3125-1.0625c-18.279 2.4044-38.6 0.77829-55.688 4.375l-7.3438 0.5-46.502-8.8125 9.3142 3.0625-1.4062-1.5938-1.5938 0.1875-3.1562-4.4688c2.7959-2.5746 7.3129-1.0481 8.6562-4.75 0.4184-1.153-0.34665-3.9986-2.5312-4.8125 0.011-0.0429 0.0245-0.0626 0.0313-0.125-0.0591 0.0134-0.12668 0.047-0.1875 0.0625-0.0333-0.0105-0.06-0.0216-0.0937-0.0313-0.12218-0.19424-0.21251-0.28696-0.25-0.3125 0.002 0.0653 0.0615 0.26277 0.15625 0.40625-1.6462 0.45675-3.7379 1.4511-3.75 0.78125-1.601-0.39753-0.37503-4.9533 3.3125-5.2812-1.2882-1.8078-0.7991-2.9788-0.9375-3.5 4.6649-2.9875 0.434-5.3923-2.1562-7.6875-0.33641-3.6503-1.7997-6.9651-4.375-9.5 1.129 0.10301 2.4049-0.0297 1-0.96875-2.2276-1.6228-4.6284-3.3395-7.4688-3.5625-2.2916-0.55638-4.6529-0.78498-7.0312-0.78125z"/></g>`;
      case "fire":
        return `<g transform="translate(-61.49 -74.609)"><path class="bolden" d="m350.88 74.865c-87.8 90.915 15.13 225.76-28.77 236.36 0 0.01-54.49-86.36-116.56-77.27 96.74 129.11 40.63 210.03 40.88 209.12-60.55-75.76-138.48-77.39-121.1-65.16 72.64 51.08 49.95 187.9 49.95 187.9s-77.204-66.68-113.53-31.82c98.68 50.12 56.02 107.57 54.5 177.28-3.33 138.42 83.3 200.53 98.97 210.62h-41.46v31.82h392.07v-31.82h-48.49c31.18-13.44 149.79-74.12 158.99-222.74 0 0 2.98-86.51-25.73-121.23-7.57 31.82-27.26 34.85-27.26 34.85-12.11 1.51 16.66-71.42 16.66-103.02 0-72.75-51.47-100.02-51.47-100.02s12.12 80.3-33.29 106.06c-9.12-18.87 26.27-225.59-102.94-266.68 33.3 68.18 25.73 93.95 25.73 93.95s-3.25 34.5-4.54 25.76c-9.89-67.04-69.64-131.83-69.64-131.83s-33.18-28.78-52.97-162.12zm89.3 501.56c18.17 25.76 0 154.54 0 154.54 30.28-9.09 66.23-68.5 74.18-77.28 9.97-11 4.54 74.26-31.79 110.63 39.2-8.93 59.03-40.92 59.03-40.92s-14.37 141.96-181.64 186.37c-30.28 18.18-189.95-81.17-102.94-234.86 28.76 134.86 78.72 134.86 78.72 134.86s-37.84-121.22-4.54-157.58c0 0 17.82 64.56 52.98 69.69 21.19-103.03 56-145.45 56-145.45z"/></g>`;
      case "mask":
        return `<path d="M20.84374,12h-2V10h2A3.27787,3.27787,0,0,1,20.84374,12Z"/><path d="M5.15629,12h-2a3.27809,3.27809,0,0,1,0-2h2Z"/><path d="M12,2C7.58173,2,4,5.47711,4,11s2,11,8,11,8-5.47717,8-11S16.41827,2,12,2Zm2.75,1.5a.75.75,0,1,1-.75.75A.75.75,0,0,1,14.75,3.5Zm0,2.75A.75.75,0,1,1,14,7,.75.75,0,0,1,14.75,6.25ZM12,8c1.10455,0,2,.22382,2,.5s-.89545.5-2,.5-2-.22388-2-.5S10.89545,8,12,8ZM9.25,3.5a.75.75,0,1,1-.75.75A.75.75,0,0,1,9.25,3.5Zm0,2.75A.75.75,0,1,1,8.5,7,.75.75,0,0,1,9.25,6.25ZM5.5,7.75a.75.75,0,1,1,.75.75A.75.75,0,0,1,5.5,7.75Zm.62769,9.20612c-.19525-.19525.2796-.98669,1.06067-1.76776s1.57251-1.25592,1.76776-1.06067-.2796.98669-1.06067,1.76776S6.32294,17.15137,6.12769,16.95612ZM9,18.75A.75.75,0,1,1,9.75,18,.75.75,0,0,1,9,18.75ZM10.95465,11c-1,2.91949-3.45026,1.66388-3.67859,1.1795-.55939-.66034-.47235-3.69159,2.21887-2.56122C10.71344,10.13007,11.0484,10.625,10.95465,11ZM12,17.75a.75.75,0,1,1,.75-.75A.75.75,0,0,1,12,17.75Zm0-3a.75.75,0,1,1,.75-.75A.75.75,0,0,1,12,14.75ZM13.01483,11c-.09375-.375.24121-.86993,1.45972-1.38171,2.69122-1.13037,2.77826,1.90088,2.21887,2.56122C16.46509,12.66388,14.01483,13.91949,13.01483,11ZM15,18.75a.75.75,0,1,1,.75-.75A.75.75,0,0,1,15,18.75Zm2.87231-1.79388c-.19525.19525-.98676-.2796-1.76776-1.06067s-1.25592-1.57251-1.06067-1.76776.98669.2796,1.76776,1.06067S18.06757,16.76086,17.87231,16.95612ZM17.75,8.5a.75.75,0,1,1,.75-.75A.75.75,0,0,1,17.75,8.5Z"/>`;
      case "skull":
        return `<path d="m30.362 300.67c-9.562-4 4.674-22.67-11.704-18.5-13.434 0.19-21.11-18.33-10.678-27.2 10.248-10.25 24.784-0.19 34.855 5.2 4.056 3.09 8.181 5.29 12.757 1.75 46.946-18.76 93.976-37.39 140.09-58.12 16.22-4.86 12.14-22.05 16.05-34.42 7.66-11.48 28.09-5.95 33.45 5.38 6.89 10.91-19.13 21.04-6.91 27.85 7.08-21.34 27.15 5.55 13.16 15.37-8.8 9.66-25.09 6.32-31.32-4.52-7.96-10.26-21.18 6.19-31.51 7.72-36.39 15.87-75.15 25.84-110.58 44.01-13.621 3.29-25.112 12.5-23.962 27.21-5.639 6.48-15.352 9.21-23.694 8.27zm155.06-2.8c-14.94-4.23-1.67-29.35-16.05-33.68-9.9-3.31-29.06-10.8-31.81-17.13 6.06-0.53 12.56-8.18 18.19-2.98 11.6 6.04 24.96 15.21 38.18 8.24 11.68-7.97 28.7-2.35 32.87 11.2 1.55 15.59-22.09-5.85-23.58 3.39 18.4-0.32 22.89 28.04 3.69 30.84-6.97 1.5-14.57 2.12-21.49 0.12zm-92.45-63.84c-19.632-4.67-36.938-16.19-56.756-20.1-11.642 9.38-33.324 9.81-35.177-9.01-5.281-15.5 10.709-19.7 22.441-16.41 8.181-0.93-6.805-15.5 6.788-14.86 14.56-8.06 32.046 6.73 19.835 21.2-5.874 14.39 17.304 16.98 26.449 21.52 11.243 5.47 30.78 7.44 36.9 14.94-5.62 6.03-13.34 4.91-20.48 2.72zm52.31-27.09c-6.06-7.92-15.78-6.19-17.32 3.9-6.12-6.1-13.69-16.12-18.15-3.18-11.87 14.92-20.769-28.31-26.358-6.79 1.848 7.62-14.392 6.84-12.795-0.92 2.01-12.73-13.028-31.47 0.495-39.96 6.023 1.5 17.422 4.2 9.805-5.61-9.276-16-31.097 7.69-39.754-12.72-10.715-11.21-7.579-28.52 4.509-37.18 3.021-3.76 8.65-6.51 6.941-12.103 0.196-5.278-0.964-10.999 0.075-16.001 4.209-6.198 14.011-14.079 6.665-21.445-7.404-6.959 2.858 11.572-7.041 13.802-9.992 5.343-1.944 29.337-12.044 27.747-6.102-12.634-8.115-27.436-1.494-40.387 10.133-28.248 36.182-49.248 65.776-53.734 25.61-3.8486 52.95-3.7081 77.35 5.81 21.9 9.634 35.63 31.871 42.04 54.093 1.12 7.296 0.96 14.706 1.35 22.062-10.21 7.197-6.61 19.666-2.77 29.556 5.01 14.06-3.59 28.79-13.14 38.62-11.13 4.38-29.15-0.71-33.49 14.48 8.43 1.59 21.94 1.77 14.11 15.35-5.85 11.16-15.02 28.24-30.23 23.06-3.84 7.87-6.74 7.98-14.53 1.55zm-21.74-60.41c4-7.36 5.71-19.56 4.3-27.04-9.97 2.06-18.69 35.14-4.3 27.04zm29.29 0.95c2.02-9.15-5.67-30.54-15.78-26.02 4.37 7.62 0.98 33.83 15.78 26.02zm-30.72-33.63c8.97-8.29 2.46-27.466-5.81-35.067-13.06-10.201-35.244-14.651-46.574 0.532-9.412 8.725-6.792 23.545 2.988 30.825 11.709 8.83 27.606 5.45 41.296 5.67 2.78-0.19 5.63-0.56 8.1-1.96zm70.91-1.1c11-5.02 21.48-19.639 12.33-30.956-8.5-13.779-26.85-16.801-40.69-9.682-15.1 4.068-21.28 19.249-21.73 33.568 4.42 14.74 25.96 7.89 37.82 9.2 4.14-0.24 8.44-0.34 12.27-2.13z"/>`;
      case "taijitu":
        return `<path d="M 139.55,2.35 C 139.29,2.33 127.25,0.67 127.00,0.66 122.14,0.40 118.79,0.41 118.23,0.42 53.21,1.34 0.88,54.51 0.40,120.01 0.40,185.52 53.37,238.73 118.68,239.56 116.51,236.96 114.91,237.91 111.76,235.89 98.53,235.29 83.95,231.73 76.72,228.56 59.85,221.96 52.97,215.57 38.92,204.01 23.47,189.14 3.91,158.83 4.11,120.68 4.05,106.23 7.80,76.73 28.95,47.92 41.59,33.20 60.81,14.93 92.86,6.89 106.17,3.56 121.17,2.64 141.20,4.21 141.20,4.21 139.55,2.35 139.55,2.35 Z M 120.00,40.27 C 131.00,40.27 139.93,49.20 139.93,60.20 139.93,71.21 131.00,80.14 120.00,80.14 109.00,80.14 100.07,71.21 100.07,60.20 100.07,49.20 109.00,40.27 120.00,40.27 Z M 120.00,239.60 C 120.59,239.60 121.18,239.59 121.77,239.57 186.97,238.62 239.60,185.42 239.60,119.98 239.60,54.48 186.85,1.23 121.54,0.40 153.84,1.22 179.80,27.68 179.80,60.18 179.80,93.19 153.01,119.98 120.00,119.98 86.99,119.98 60.20,146.78 60.20,179.79 60.20,212.80 86.99,239.60 120.00,239.60 120.00,239.60 120.00,239.60 120.00,239.60 Z M 120.00,199.73 C 109.00,199.73 100.07,190.80 100.07,179.79 100.07,168.79 109.00,159.86 120.00,159.86 131.00,159.86 139.93,168.79 139.93,179.79 139.93,190.80 131.00,199.73 120.00,199.73 Z"/>`;
      //case 'pizza':
      //    return `<path d="m129.15 0.019c-2.412 0.612-4.428 1.836-5.904 3.816-1.475 1.98-2.555 4.536-3.096 7.956-9.973 8.028-18.216 15.48-25.272 22.5-7.128 6.948-9.612 12.816-16.632 19.404-7.164 6.516-12.168 6.912-25.272 20.052-13.248 13.212-30.528 32.4-52.956 58.536l7.956 12.096c10.188-0.359 25.02-1.332 45.324-2.771 20.34-1.512 49.068-3.78 75.492-6.229 26.387-2.592 52.992-5.544 81.359-9 1.08-1.008 2.232-2.34 3.457-4.14 1.188-1.908 2.412-3.924 3.814-6.588-1.08-6.588-2.627-12.708-4.5-19.044-2.051-6.372-4.355-12.96-6.912-18.36-2.592-5.436-5.363-8.604-8.314-13.824-3.096-5.328-4.176-10.62-10.045-17.676-6.084-7.236-15.875-17.064-25.631-24.912-9.91-7.883-20.63-15.011-32.88-21.815z" i:knockout="Off" fill="#000000" /> <path d="m3.119 132.61c6.768 0.72 16.344 0.611 29.412-0.324 13.104-1.116 34.38-4.68 48.132-5.544 13.536-0.864 19.368 0.936 32.904 0.684 13.572-0.396 33.084-1.296 47.412-2.411 14.148-1.08 26.064-2.521 36.721-4.177 1.404-4.176 3.492-6.66 6.551-7.596 2.988-0.972 6.805-0.288 11.449 2.052l-6.229 10.044c-5.473 0.685-15.443 1.836-30.492 3.456-15.156 1.512-38.447 4.032-59.184 5.904-20.772 1.764-45.756 3.384-64.404 4.86-18.684 1.331-33.984 2.483-46.728 3.456-1.841-3.45-3.677-6.91-5.549-10.4z" i:knockout="Off" /> <path d="m2.794 130.88c5.112-4.859 10.764-10.8 17.64-18.359 6.84-7.668 15.012-18.54 22.86-26.641 7.668-8.172 16.884-16.56 23.184-21.816 6.12-5.292 9.972-5.832 14.184-9.684 4.068-3.996 7.812-9.468 11.088-13.5 3.348-4.068 3.888-5.724 9-10.404 5.148-4.716 11.916-10.548 21.132-17.64 2.375 2.556 5.904 5.688 10.729 9.684 4.859 3.888 12.527 8.784 18 13.86 5.363 5.148 9.719 11.592 14.184 16.272 4.355 4.428 9.467 6.012 12.131 10.728 2.592 4.788 1.152 12.708 3.457 17.64 2.305 4.823 7.92 7.271 10.043 11.088 2.018 3.744 0.9 6.516 2.053 11.088 1.008 4.536 2.447 9.504 4.176 15.588-12.023 1.8-24.875 3.348-39.131 4.5-14.438 1.152-33.156 2.088-46.045 2.412-12.888 0.107-19.152-1.584-30.456-1.044-11.52 0.576-24.264 3.42-37.404 4.5-13.141 1.04-26.605 1.61-40.826 1.72z" i:knockout="Off" /> <path d="m130.88 2.431c-2.484-0.288-4.5 0.504-5.904 2.088-1.439 1.656-2.412 4.104-2.771 7.632 3.059 2.196 6.588 4.896 10.727 7.956 4.068 3.06 9.758 6.84 13.861 10.368 3.924 3.456 7.199 6.876 10.404 10.404 3.131 3.42 5.436 6.876 9 10.368 3.6 3.312 9.791 5.544 12.455 10.044 2.52 4.5 1.729 12.78 2.771 16.632 0.9 3.673 1.189 3.204 3.098 5.544 1.943 2.305 6.658 5.112 8.314 8.28 1.512 2.988-0.252 5.868 0.686 10.044 0.898 4.141 2.268 9.108 4.5 14.904 0.143-3.78 1.691-5.977 4.5-6.588 2.844-0.612 6.91 0.216 12.49 2.771-1.188-9.288-3.275-17.496-6.264-24.912-3.096-7.451-8.135-13.176-11.771-19.404-3.564-6.3-5.832-11.844-10.008-18-4.355-6.264-7.957-11.916-15.947-19.044-8.209-7.38-25.813-18.9-32.545-23.868-6.77-4.887-9.25-6.579-7.6-5.211z" i:knockout="Off" /> <path d="m92.435 90.02c-1.8-2.628-2.376-5.364-1.728-8.641 0.648-3.384 2.268-8.207 5.544-10.728 3.24-2.592 8.712-4.536 13.5-4.176 4.679 0.396 11.521 2.808 14.544 6.264 2.916 3.384 3.959 7.848 3.131 13.824-3.924-1.296-7.164-1.872-9.719-1.729-2.629 0.108-4.861 0.973-5.869 2.448-1.043 1.404-1.404 3.313-0.684 5.868-4.068-2.196-7.056-3.168-9.36-2.772s-3.636 1.872-4.14 4.86c-1.724-1.726-3.451-3.455-5.215-5.218z" i:knockout="Off" fill="#000000" /> <path d="m93.119 87.967c-1.116-2.447-1.44-4.896-0.684-7.632 0.684-2.808 1.8-6.66 4.86-8.64 2.952-2.052 8.424-3.96 12.817-3.492 4.355 0.396 10.26 3.06 13.139 5.904 2.736 2.808 3.889 6.336 3.457 10.728-1.836-1.296-4.068-2.124-6.553-2.088-2.699-0.144-6.84 0.396-8.676 1.765-1.908 1.403-2.412 3.491-2.052 6.552-2.736-2.124-5.22-3.097-7.308-2.772-2.232 0.252-3.924 1.8-5.508 4.5-1.154-1.585-2.305-3.205-3.493-4.825z" i:knockout="Off" /> <path d="m137.11 88.291c0.215 2.844 1.223 7.344 4.139 10.729 2.809 3.312 7.273 7.56 12.816 9 5.58 1.332 16.344 1.691 20.088-1.008 3.457-2.952 3.527-10.837 1.045-15.589-2.629-4.823-10.369-10.872-16.273-12.456-5.939-1.584-15.479 1.44-19.043 3.097-3.72 1.513-3.07 3.313-2.78 6.229z" i:knockout="Off" fill="#000000" /> <path d="m138.3 88.363c0.18 2.808 1.152 6.768 3.889 10.08 2.699 3.06 6.768 7.128 12.059 8.46 5.184 1.224 15.408 1.548 18.865-0.972 3.348-2.809 3.311-10.152 1.008-14.652-2.557-4.572-9.756-10.152-15.336-11.736-5.652-1.476-14.438 1.404-17.893 2.952-3.39 1.333-2.96 3.241-2.6 5.869z" i:knockout="Off" /> <path d="m37.066 90.379c3.6 2.305 7.884 3.276 13.14 2.772 5.22-0.612 14.508-2.196 18-5.868 3.276-3.708 2.628-11.988 2.088-15.948-0.612-4.068-2.196-6.624-5.184-7.956-8.316 7.92-14.688 14.148-19.404 18.684-4.68 4.464-7.56 7.236-8.64 8.316z" i:knockout="Off" fill="#000000" /> <path d="m40.522 90.379c2.124-2.844 5.184-6.264 9.324-10.403 4.104-4.212 9.144-9 15.264-14.508 1.944 0.684 3.204 2.34 3.78 5.508 0.576 3.06 1.116 9.504-0.324 12.816-1.656 3.132-5.148 4.788-8.676 6.229-3.564 1.332-8.892 1.979-12.096 2.088-3.239 0.035-5.615-0.542-7.272-1.73z" i:knockout="Off" /> <path d="m115.98 55.423c-2.305 0.036 0.936 6.768 4.176 10.044 3.205 3.312 8.1 8.316 14.545 9.324 6.227 0.828 19.619-2.772 22.824-4.14 2.986-1.476-0.145-3.24-4.141-4.176-4.104-1.044-13.068 0-19.404-1.728-6.3-1.872-15.73-9.468-18-9.324z" i:knockout="Off" fill="#000000" /> <path d="m157.2 68.923c-2.592 1.296-5.76 2.376-9.361 3.096-3.779 0.72-8.387 2.161-12.455 1.404-4.068-0.899-8.785-3.528-11.771-6.228-3.098-2.664-5.293-5.904-6.588-9.72 2.41 2.952 5.039 5.544 8.314 7.632 3.133 2.124 5.365 4.068 10.729 4.86 5.37 0.648 12.28 0.252 21.14-1.044z" i:knockout="Off" /> <path d="m119.11 57.835c2.986 2.484 6.047 4.392 9.322 5.868 3.168 1.404 5.869 2.052 10.045 2.772 4.141 0.648 9.107 1.116 14.904 1.404-4.033 0.648-7.775 1.044-11.088 1.044-3.348-0.036-5.652 0.216-9-1.044-3.564-1.476-9.432-5.22-11.771-6.912-2.34-1.728-3.24-2.772-2.41-3.132z" i:knockout="Off" /> <path d="m89.663 98.695c-2.304 2.771-4.428 4.428-6.228 4.824-1.908 0.359-4.032-0.396-4.824-2.412-0.936-2.124-1.584-5.725 0-9.685 1.656-4.031 4.752-8.712 9.684-14.184l-0.684-5.22c-7.632 3.672-12.528 7.812-15.264 12.816-2.664 4.933-1.872 12.564-0.684 16.632 1.044 3.925 4.572 5.797 7.272 7.272 2.664 1.476 6.804 2.952 8.676 1.368 1.835-1.66 2.375-5.51 2.052-11.415z" i:knockout="Off" fill="#000000" /> <path d="m87.935 103.52c0.36 2.628 0.18 4.607-0.684 5.544-0.936 0.792-2.628 1.044-4.5 0.359-2.052-0.756-4.752-2.304-6.588-3.815-1.764-1.548-2.988-2.664-3.816-4.86s-1.116-5.004-1.008-8.28c0.216 3.744 1.116 6.805 3.096 9.324 1.836 2.412 6.048 5.185 8.316 5.544 2.231 0.34 3.959-1.03 5.184-3.8z" i:knockout="Off" /> <path d="m87.935 101.43l-0.108 1.619c-0.756 1.44-1.548 2.521-2.52 3.097-1.044 0.611-1.8 0.899-3.384 0.324-1.728-0.828-4.824-2.7-6.372-4.5-1.512-1.944-2.556-4.032-2.988-6.265-0.648-2.268-1.296-4.607-0.54-7.02 0.612-2.592 2.016-5.544 4.5-8.028 2.484-2.52 5.76-4.86 10.224-7.02l0.648 3.708c-2.448 2.376-4.536 4.896-6.264 7.703-1.944 2.7-3.744 5.904-4.284 8.784-0.54 2.809 0.432 6.696 1.548 8.46 1.08 1.656 3.276 2.124 4.932 1.98 1.619-0.1 3.06-1.15 4.608-2.84z" i:knockout="Off" /> <path d="m31.522 104.92c6.876 3.276 12.564 6.624 17.64 10.044 5.04 3.385 8.892 6.841 12.132 10.368l6.552-8.315c-5.436-6.156-10.8-10.656-16.236-13.5-5.508-2.916-10.8-4.177-16.308-3.78-1.26 1.73-2.519 3.46-3.78 5.18z" i:knockout="Off" fill="#000000" /> <path d="m32.999 104.82c2.988 1.584 5.796 2.987 8.568 4.607 2.7 1.513 4.284 2.089 7.668 4.645 3.24 2.448 7.308 5.832 12.06 10.151l1.008-1.367c-3.708-3.816-7.452-6.984-11.376-9.792-4.032-2.845-9.252-5.364-12.168-6.876-2.916-1.62-4.68-2.448-5.292-2.484-0.144 0.35-0.288 0.71-0.468 1.11z" i:knockout="Off" /> <path d="m34.115 102.44l1.908-2.017c5.148 0.504 9.612 1.513 13.536 3.168 3.888 1.656 7.02 4.284 9.936 6.624 2.844 2.269 5.076 4.465 6.984 6.876l-3.96 5.185c-3.312-3.96-6.876-7.164-10.692-10.008-4.032-2.916-9.36-5.221-12.384-6.769-2.988-1.548-4.716-2.304-5.328-2.268v-0.79z" i:knockout="Off" /> <path d="m132.93 121.59c1.189 1.044 2.988-3.743 3.313-6.983 0.145-3.313 0.432-8.424-2.051-12.132-2.629-3.816-10.945-9.108-13.141-10.044-2.305-1.009-1.584 1.584-0.18 4.176 1.26 2.52 6.371 6.804 8.387 11.052 2.02 4.14 2.41 12.67 3.67 13.93z" i:knockout="Off" fill="#000000" /> <path d="m120.33 93.439c1.98 0.684 3.889 1.872 6.121 3.42 2.16 1.512 5.039 3.384 6.695 5.904 1.477 2.483 2.305 6.191 2.34 9.18 0.037 2.844-0.611 5.544-1.943 8.1 0.359-2.735 0.504-5.363 0.035-8.027-0.504-2.772-0.395-4.824-2.592-7.956-2.27-3.12-5.72-6.614-10.66-10.611z" i:knockout="Off" /> <path d="m132.72 118.78c-0.217-2.771-0.541-5.4-1.369-7.74-0.826-2.447-1.764-4.14-3.348-6.588-1.656-2.592-3.744-5.292-6.408-8.496 2.305 1.8 4.213 3.528 5.869 5.328 1.512 1.764 2.809 2.664 3.744 5.22 0.863 2.448 1.764 7.381 2.016 9.505 0.26 2.1 0.04 2.93-0.5 2.78z" i:knockout="Off" /> <path d="m138.3 88.363c0.18 2.808 1.152 6.768 3.889 10.08 2.699 3.06 6.768 7.128 12.059 8.46 5.184 1.224 15.408 1.548 18.865-0.972 3.348-2.809 3.311-10.152 1.008-14.652-2.557-4.572-9.756-10.152-15.336-11.736-5.652-1.476-14.438 1.404-17.893 2.952-3.39 1.333-2.96 3.241-2.6 5.869z" i:knockout="Off" /> <path d="m106.15 33.499c0.18 2.376 1.044 6.3 3.564 9.144 2.485 2.844 6.12 6.372 10.909 7.668 4.824 1.152 13.859 1.368 17.1-0.9 2.916-2.484 3.023-9.216 0.9-13.248-2.197-4.032-8.893-9.324-13.861-10.62-5.039-1.368-13.176 1.26-16.235 2.628-3.12 1.224-2.62 2.952-2.37 5.328z" i:knockout="Off" fill="#000000" /> <path d="m107.16 33.535c0.108 2.304 1.08 5.868 3.347 8.604 2.305 2.664 5.725 6.084 10.26 7.2 4.32 1.008 13.248 1.332 16.094-0.828 2.807-2.304 2.807-8.784 0.828-12.492-2.197-3.816-8.209-8.712-13.033-9.972-4.824-1.188-12.313 1.08-15.264 2.484-3 1.224-2.49 2.664-2.24 5.004z" i:knockout="Off" /> <path d="m125.16 31.735c-6.156 2.52-11.557 4.176-16.632 5.508-5.112 1.224-9.612 1.764-13.644 1.764l1.512 9c7.02-0.036 13.032-0.72 18.035-2.592 5.004-1.836 8.857-4.536 11.846-8.244-0.37-1.8-0.72-3.6-1.12-5.436z" i:knockout="Off" fill="#000000" /> <path d="m124.37 32.743c-2.773 0.972-5.365 2.052-7.92 2.844-2.629 0.792-3.924 1.584-7.381 2.232-3.528 0.648-7.92 1.26-13.464 1.836l0.252 1.44c4.536-0.18 8.784-0.72 12.888-1.62 3.996-1.08 8.675-2.772 11.412-3.816 2.664-1.008 4.213-1.656 4.645-1.944-0.15-0.324-0.29-0.648-0.43-0.972z" i:knockout="Off" /> <path d="m125.23 34.867l0.18 2.376c-3.348 3.024-6.48 5.256-9.828 6.84-3.42 1.548-6.948 1.908-10.007 2.484-3.096 0.54-5.904 0.576-8.424 0.504l-1.044-5.508c4.392 0.18 8.496-0.216 12.6-1.044 4.032-0.936 8.749-3.024 11.52-4.032 2.629-0.972 4.176-1.8 4.5-2.088 0.15 0.144 0.33 0.288 0.51 0.468z" i:knockout="Off" /> <path d="m89.734 62.371c-1.764 0.972-3.312 1.152-5.04 0.54-1.728-0.72-5.184-1.944-5.076-4.248-0.072-2.34 1.476-8.496 5.328-9.576 3.852-1.224 14.508 0.72 17.82 2.916 3.168 2.16 2.772 8.496 1.584 10.116-1.224 1.548-4.14 1.224-8.748-0.828-0.828 1.08-0.972 2.196-0.288 3.744 0.612 1.512 1.944 3.06 3.996 5.04-1.008 1.764-2.34 2.916-4.536 3.456-2.16 0.504-4.86 0.288-8.244-0.504 0.18-2.196 0.54-4.104 1.08-5.868 0.469-1.836 1.224-3.384 2.124-4.788z" i:knockout="Off" fill="#000000" /> <path d="m98.411 70.183c-1.548 0.9-2.988 1.332-4.86 1.44-1.8 0.036-3.852-0.252-6.012-1.008l-0.36 2.088c1.404 0.359 2.628 0.54 3.96 0.685 1.26 0.035 2.484 0.071 3.672-0.181 1.008-0.36 2.304-1.044 2.916-1.512 0.54-0.54 0.863-1.044 0.684-1.512z" i:knockout="Off" /> <path d="m80.482 57.115c-0.36 0.864-0.288 1.692-0.18 2.34 0.072 0.612 0.576 0.9 1.116 1.44 0.576 0.396 1.296 0.864 2.304 1.26 0.9 0.324 1.944 0.648 3.132 0.684 0.972-0.108 2.016-0.468 2.988-1.08l0.18-0.792c-1.368 0.432-2.664 0.684-3.744 0.756-1.152 0.072-2.088-0.252-2.952-0.576-0.9-0.504-1.656-1.152-2.268-2.088-0.18-0.648-0.359-1.296-0.576-1.944z" i:knockout="Off" /> <path d="m95.818 60.895c1.188 0.54 2.232 1.08 3.276 1.332 0.936 0.216 2.088 0.432 2.916 0.36 0.828-0.18 1.368-0.504 1.908-1.116-1.692 0.216-3.096 0.036-4.356-0.144-1.332-0.216-2.232-0.828-3.096-1.44-0.218 0.324-0.433 0.648-0.65 1.008z" i:knockout="Off" /> <path d="m98.086 69.931c-1.08-1.116-1.98-2.16-2.556-3.276-0.72-1.152-1.332-2.34-1.152-3.564 0.072-1.26 0.9-2.556 2.088-3.888 0.396 0.54 1.188 1.044 2.52 1.368s3.024 0.468 5.364 0.576c0.36-0.9 0.576-1.692 0.504-2.916-0.18-1.296 0.18-2.772-1.008-4.032-1.26-1.332-3.168-2.52-6.12-3.276-3.06-0.756-8.568-1.872-11.376-1.26-2.844 0.54-4.068 2.844-4.932 4.392-0.9 1.404-0.396 2.916 0 4.104 0.324 1.116 1.044 1.872 2.16 2.412 1.044 0.432 2.664 0.432 4.032 0.432 1.296-0.144 2.448-0.432 3.6-1.008-0.216 0.288-0.684 1.116-1.26 2.916-0.576 1.692-1.404 4.068-2.34 7.272 1.908 0.648 3.744 1.08 5.508 1.008 1.735-0.108 3.39-0.432 4.974-1.26z" i:knockout="Off" /> <path d="m103.52 116.48c0.18 2.34-0.54 4.032-2.016 5.616-1.656 1.403-4.68 4.355-7.128 3.168-2.52-1.332-8.172-5.868-7.38-10.549 0.864-4.752 8.136-15.084 12.24-17.388 3.888-2.304 10.476 1.368 11.556 3.528 1.043 2.124-0.793 4.896-5.364 8.855 0.648 1.44 1.908 2.053 3.78 2.232 1.909 0.072 4.284-0.468 7.417-1.62 1.404 1.908 1.943 3.96 1.332 6.552-0.648 2.521-2.197 5.292-4.789 8.46-2.23-1.332-4.067-2.664-5.651-4.14-1.62-1.55-2.95-2.99-4-4.72z" i:knockout="Off" fill="#000000" /> <path d="m116.27 111.3c0.182 2.017-0.143 3.853-0.971 5.904-0.9 1.908-2.232 3.852-4.141 5.832l2.016 1.476c1.08-1.26 2.053-2.592 2.773-3.852 0.646-1.476 1.439-2.628 1.691-3.996 0.252-1.404 0.072-2.916-0.107-3.852-0.22-0.9-0.69-1.41-1.26-1.51z" i:knockout="Off" /> <path d="m93.19 123.57c0.828 0.756 1.62 1.224 2.376 1.404 0.684 0.107 1.296-0.181 2.124-0.469 0.72-0.432 1.656-0.972 2.52-1.764 0.828-0.864 1.8-1.908 2.34-2.988 0.504-1.151 0.504-2.376 0.396-3.672l-0.756-0.647c-0.216 1.691-0.54 3.096-1.116 4.355-0.576 1.188-1.296 2.088-2.16 2.844-0.936 0.685-2.052 1.08-3.348 1.332-0.788-0.09-1.58-0.23-2.372-0.38z" i:knockout="Off" /> <path d="m105.11 109.28c1.296-0.972 2.196-1.908 3.096-2.808 0.864-0.973 1.44-1.98 1.872-2.881 0.217-0.936 0.145-1.8-0.215-2.592-0.72 1.8-1.512 3.313-2.376 4.536-0.972 1.188-2.016 1.98-3.132 2.521 0.25 0.39 0.5 0.79 0.76 1.22z" i:knockout="Off" /> <path d="m115.83 111.51c-1.691 0.647-3.348 0.899-4.824 1.044-1.619 0.035-3.059 0.107-4.319-0.612-1.188-0.828-2.34-2.196-3.06-4.248 0.792-0.072 1.764-0.72 2.772-1.944 0.972-1.224 2.088-3.023 3.348-5.399-0.648-0.9-1.584-1.477-2.808-2.017-1.296-0.576-2.952-1.655-4.824-1.008-2.016 0.54-4.32 2.088-6.624 4.788-2.412 2.7-6.336 8.172-7.2 11.412-0.864 3.168 0.972 5.796 2.16 7.488 1.152 1.548 2.88 1.871 4.356 2.088 1.296 0.144 2.556-0.145 3.636-1.008 0.936-0.937 2.016-2.664 2.556-4.068 0.576-1.404 0.792-2.844 0.792-4.32 0.144 0.324 0.9 1.26 2.412 2.809 1.512 1.476 3.636 3.6 6.516 6.228 1.691-1.728 2.988-3.456 3.889-5.328 0.87-1.94 1.22-3.77 1.22-5.9z" i:knockout="Off" /> <path d="m177.25 99.596c2.305 0.792 3.961 2.016 4.824 4.212 0.828 2.088 2.592 6.228 0.432 8.243-2.303 1.944-8.928 5.832-13.355 3.349-4.428-2.628-11.771-14.04-12.6-18.828-0.756-4.932 5.291-9.937 7.883-10.152 2.412-0.18 4.682 2.557 6.805 8.748 1.584-0.18 2.844-1.116 3.637-2.952 0.828-1.943 1.188-4.428 1.223-7.991 2.449-0.757 4.752-0.36 7.057 1.188 2.34 1.512 4.355 4.176 6.588 7.992-2.16 1.728-4.211 2.952-6.299 4.068-2.11 1.078-4.13 1.654-6.18 2.123z" i:knockout="Off" fill="#000000" /> <path d="m176.96 84.943c2.088 0.504 3.779 1.584 5.471 3.24 1.621 1.548 2.988 3.672 4.248 6.372l2.232-1.44c-0.863-1.656-1.799-3.024-2.807-4.248-1.01-1.26-2.16-2.52-3.313-3.204-1.26-0.792-2.916-1.296-3.852-1.368-1.01-0.144-1.62 0.072-1.98 0.648z" i:knockout="Off" /> <path d="m180.35 112.63c1.01-0.576 1.908-1.188 2.305-1.836 0.359-0.72 0.432-1.439 0.359-2.304-0.107-0.972-0.322-2.124-0.791-3.168-0.432-1.188-1.26-2.628-2.088-3.492-0.936-0.9-2.16-1.548-3.527-1.8l-0.9 0.54c1.584 0.792 2.879 1.764 3.887 2.771 0.938 1.009 1.656 1.944 2.018 3.204 0.252 1.152 0.395 2.448 0.035 3.889-0.45 0.72-0.88 1.44-1.31 2.2z" i:knockout="Off" /> <path d="m170.66 95.312c-0.467-1.584-1.008-3.024-1.619-4.177-0.613-1.296-1.369-2.34-2.125-2.987-0.791-0.648-1.727-0.9-2.664-0.756 1.512 1.332 2.809 2.699 3.602 4.104 0.756 1.332 1.295 2.7 1.332 4.104 0.46-0.073 0.97-0.181 1.47-0.288z" i:knockout="Off" /> <path d="m177 85.483c-0.072 1.979-0.287 3.528-0.791 5.184-0.576 1.513-1.008 3.061-2.268 4.068-1.297 0.828-3.098 1.439-5.4 1.439 0.215-0.899-0.072-2.016-0.865-3.491-0.863-1.513-2.23-3.313-4.104-5.4-1.152 0.216-2.088 0.936-3.096 2.016-1.115 1.009-2.664 2.196-2.844 4.393-0.18 2.231 0.432 4.896 2.232 8.424 1.871 3.348 5.615 9.324 8.604 11.52 2.844 2.017 6.156 1.152 8.279 0.721 1.945-0.54 3.025-2.269 3.781-3.528 0.684-1.368 0.756-2.664 0.359-4.032-0.504-1.439-1.943-2.987-3.061-4.067-1.152-1.152-2.592-1.872-4.031-2.448 0.359-0.036 1.656-0.432 3.744-1.332 2.051-1.008 4.895-2.232 8.676-4.104-1.008-2.411-2.268-4.319-3.781-5.867-1.55-1.622-3.32-2.738-5.44-3.494z" i:knockout="Off"/>`;
      case "trash":
        return `<path d="M12.41,5.58l-1.34,8c-0.0433,0.2368-0.2493,0.4091-0.49,0.41H4.42c-0.2407-0.0009-0.4467-0.1732-0.49-0.41l-1.34-8 C2.5458,5.3074,2.731,5.0506,3.0035,5.0064C3.0288,5.0023,3.0544,5.0002,3.08,5h8.83c0.2761-0.0036,0.5028,0.2174,0.5064,0.4935 C12.4168,5.5225,12.4146,5.5514,12.41,5.58z M13,3.5C13,3.7761,12.7761,4,12.5,4h-10C2.2239,4,2,3.7761,2,3.5S2.2239,3,2.5,3H5V1.5 C5,1.2239,5.2239,1,5.5,1h4C9.7761,1,10,1.2239,10,1.5V3h2.5C12.7761,3,13,3.2239,13,3.5z M9,3V2H6v1H9z"/>`;
      //case 'party':
      //    return `<path style="stroke:#3e3e3e;stroke-width:11.759;fill:#ffffff" d="m348.09 109.89c-85.21-11.765-133.86-61.49-150.45-144.52l52.461-31.674c8.8349 68.313 24.711 132.98 108.88 162.33z"/><path d="m353.56 91.864c-61.98-62.164-70.82-132.61-33.05-210.32l62.186 6.6459c-35 60.969-62.02 123.32-11.73 199.13z" style="stroke:#3e3e3e;stroke-width:12"/><path d="m392.11 86.165c52.8-63.262 117.89-77.562 193.76-48.91l-0.88537 58.696c-59.98-27.485-120.58-47.403-187.14 6.089z" style="stroke:#3e3e3e;stroke-width:11.264"/><path d="m400.56 103.66c70.409-8.8186 119.79 20.415 150.74 83.029l-35.039 36.44c-21.63-52.55-48.08-100.69-121.42-106.11z" style="stroke:#3e3e3e;stroke-width:9.7;fill:#ffffff"/><path style="stroke:#3e3e3e;stroke-width:10.038" d="m359.07 126.89c-60.038 42.278-119.37 39.574-178.07-2.5897l14.3-50.321c45.296 37.496 92.867 68.618 162.5 37.92z"/><path style="stroke:#3e3e3e;stroke-width:12;fill:#ffffff" d="m125.26 755.38 248.5-719.23 266.68 711.15c-107.4 137.09-420.62 139.89-515.18 8.08z"/><path style="stroke-linejoin:round;stroke:#3e3e3e;stroke-width:8.9074" d="m420.09 159.69c-47.61 62.416-98.161 122.79-151.62 181.16l-49.688 143.88c81.848-80.243 157.06-166.67 226.12-258.78l-24.812-66.25zm58.29 155.4c-90.42 120.29-193.6 232.5-315.94 332.63l-34.91 101.03c153.16-104.45 278.75-224.33 379.06-358.37l-28.21-75.29zm58.188 155.19c-100.47 122.36-214.26 236.88-348.91 339.13 20.15 11.4 42.82 20.53 67.09 27.37 122.94-86.67 221.84-187.56 308.31-295.78l-26.5-70.719zm49.75 132.66c-75.124 86.484-154.65 170.39-244.41 248.34 32.775 2.0765 66.335 0.70943 98.969-4.0938 0.006-0.005 0.0255 0.005 0.0312 0 61.02-55.53 117.11-115.25 170.56-177.19l-25.16-67.06z"/><path style="fill:#00b02d;fill-opacity:.11947" d="m484.59 333.63c9.5858 273.53-172.12 419.02-355.12 427.33 99.306 126.12 405.11 121.44 510.97-13.688z"/><path d="m125.26 755.38 248.5-719.23 266.68 711.15c-107.4 137.09-420.62 139.89-515.18 8.08z" style="stroke:#3e3e3e;stroke-width:12;fill:none"/><path style="stroke:#3e3e3e;stroke-width:12;fill:#ffffff" d="m363.57 78.567c-5.57-87.607 42.03-144.26 121.69-177.74l42.351 46.018c-66.518 22.736-127.96 51.772-140.18 141.92z"/>`;
      case "martini":
        return `<path d="M7.5,1c-2,0-7,0.25-6.5,0.75L7,8v4 c0,1-3,0.5-3,2h7c0-1.5-3-1-3-2V8l6-6.25C14.5,1.25,9.5,1,7.5,1z M7.5,2c2.5,0,4.75,0.25,4.75,0.25L11.5,3h-8L2.75,2.25 C2.75,2.25,5,2,7.5,2z"/>`;
      case "lightbulb":
        return `<path d="m0 48c0-27 23-48 50-48s50 21 50 48c0 19-22 37-22 54 0 5-1 9-6 14v4c0 2-4 2-4 4s4 2 4 4-4 2-4 4 4 2 4 4-4 2-4 4 3 2 3 4-7 6-10 12h-22c-3-6-10-10-10-12s3-2 3-4-4-2-4-4 4-2 4-4-4-2-4-4 4-2 4-4-4-2-4-4v-4c-5-5-6-9-6-14 0-17-22-35-22-54zm5 0c0 17 21 36 21 54 0 4 1 8 4 10h40c3-2 4-6 4-10 0-18 21-37 21-54 0-23-20-41-45-41s-45 18-45 41zm17-4 2.4-1.2 17.6 33.2 1.4 32h-4.4l-1-30zm5 0 2-8h2l3 8.4 3-8.4h2l3 8.4 3-8.4h2l3 8.4 3-8.4h2l3 8.4 3-8.4h2l3 8.4 3-8.4h2l2 8-3-4.4-3 8.4h-2l-3-8.4-3 8.4h-2l-3-8.4-3 8.4h-2l-3-8.4-3 8.4h-2l-3-8.4-3 8.4h-2l-3-8.4zm29.6 64 1.4-32 17.6-33.2 2.4 1.2-16 34-1 30h-4.4z"/>`;
      case "bunny":
        return `<path style="stroke-linejoin:round;fill-rule:evenodd;stroke:#000000;stroke-linecap:round;stroke-width:6" d="m64.188 5.3125c-5.397 0.0813-10.898 1.0389-16.594 3.5313-9.817 4.2952-13.554 9.5252-16.282 14.968-6.538-0.307-13.468 2.455-18.218 7.938-7.3948 8.534-6.7113 20.389 1.531 26.438 2.24 1.644 4.798 2.641 7.5 3.124-1.063 4.28-0.91 8.757 0.187 13.219-0.158 0.044-0.31 0.076-0.468 0.125-6.958 2.178-10.97 9.256-8.938 15.75 0.747 2.386 2.204 4.346 4.094 5.782 1.73 1.79 4.454 2.466 7.125 1.5 3.388-1.226 5.531-4.662 5.25-8.063 4.838 7.044 11.348 13.245 17.969 17.565-3.132 2.04-5.007 4.69-4.938 7.56 0.045 1.87 0.5 4.28 2.406 5.16 5.356 2.46 12.173 2.75 18.907 2.68 6.644-0.07 13.36-0.49 18.562-3.03 1.833-0.89 2.139-3.3 2.094-5.15-0.013-0.55-0.101-1.1-0.25-1.63 3.256-0.79 6.06-1.98 8.344-3.53 4.213 3.86 10.941 4.27 16.151 0.66 6-4.15 7.72-12.064 3.85-17.66-3.11-4.492-8.87-6.111-14.126-4.438-1.317-4.594-3.729-9.761-7.406-15.5-8.605-13.428-28.229-23.563-43.969-25.531 0.719-2.053 1.093-4.161 1.093-6.219 10.581 1.08 21.879 1.693 38.594-0.906 5.763-0.896 7.759-2.691 2-7.031-7.125-5.37-15.153-9.126-25.437-8.906 5.516-2.421 10.784-5.283 15.25-8.375 5.825-4.034 7.757-7.3146-1.844-8.9378-4.128-0.6978-8.24-1.157-12.437-1.0937z"/><path d="m64.188 5.3125c-5.397 0.0813-10.898 1.0389-16.594 3.5313-9.817 4.2952-13.554 9.5252-16.282 14.968-6.538-0.307-13.468 2.455-18.218 7.938-7.3948 8.534-6.7113 20.389 1.531 26.438 2.24 1.644 4.798 2.641 7.5 3.124-1.063 4.28-0.91 8.757 0.187 13.219-0.158 0.044-0.31 0.076-0.468 0.125-6.958 2.178-10.97 9.256-8.938 15.75 0.747 2.386 2.204 4.346 4.094 5.782 1.73 1.79 4.454 2.466 7.125 1.5 3.388-1.226 5.531-4.662 5.25-8.063 4.838 7.044 11.348 13.245 17.969 17.565-3.132 2.04-5.007 4.69-4.938 7.56 0.045 1.87 0.5 4.28 2.406 5.16 5.356 2.46 12.173 2.75 18.907 2.68 6.644-0.07 13.36-0.49 18.562-3.03 1.833-0.89 2.139-3.3 2.094-5.15-0.013-0.55-0.101-1.1-0.25-1.63 3.256-0.79 6.06-1.98 8.344-3.53 4.213 3.86 10.941 4.27 16.151 0.66 6-4.15 7.72-12.064 3.85-17.66-3.11-4.492-8.87-6.111-14.126-4.438-1.317-4.594-3.729-9.761-7.406-15.5-8.605-13.428-28.229-23.563-43.969-25.531 0.719-2.053 1.093-4.161 1.093-6.219 10.581 1.08 21.879 1.693 38.594-0.906 5.763-0.896 7.759-2.691 2-7.031-7.125-5.37-15.153-9.126-25.437-8.906 5.516-2.421 10.784-5.283 15.25-8.375 5.825-4.034 7.757-7.3146-1.844-8.9378-4.128-0.6978-8.24-1.157-12.437-1.0937z"/><path style="fill-rule:evenodd;fill:#000000" d="m27.875 37.154a1.6792 1.5113 0 1 1 -3.358 0 1.6792 1.5113 0 1 1 3.358 0z" transform="matrix(2 0 0 2 -28.211 -37.658)"/><path style="stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:3;fill:none" d="m41.309 112.22c2.741-8.74 11.136-8.26 19.479-7.06-2.847-3.98-4.653-7.182-4.366-14.439 0.397-10.047 12.123-15.813 19.478-11.418"/>`;
      case "egg":
        return `<g transform="translate(-23.4 -39.669)"><g fill-rule="evenodd"><path d="m209.88 233.69c-59.35 13.38-111.11 50.07-104.08 76.11 7.24 26.79 68.03 33.82 140.43 11.87 72.59-22.02 136.8-67.49 117.21-88.66-19.96-21.57-94.36-12.67-153.56 0.68z" fill="#555753" fill-opacity=".25098"/><path stroke-linejoin="round" d="m237.39 219.85c0.63 59.72-38.42 111.12-103.87 111.12-65.458 0-109.14-33.88-108.71-115.95 0.425-82.26 54.548-172.74 103.87-173.93 52.62-1.302 107.77 87.89 108.71 178.76z" stroke="#000" stroke-linecap="round" stroke-width="2.8183"/><path d="m200.27 107.27c-4.58 4.32 2.48 11.42 2.87 16.88 11.18 34.97 15.59 72.86 7.97 109.05-8.88 35.66-36.04 67.41-71.85 77.78-14 4.35-28.78 5.33-43.361 5.3-4.701 6.19 8.951 5.84 12.621 7.35 31.12 6.05 66.19 0.87 90.45-20.77 22.64-20.08 33.83-50.84 33.2-80.74 0.18-35.03-8.95-69.68-23.29-101.47-2.63-4.42-4.34-10.71-8.61-13.38z" fill="#c6c6ba" fill-opacity=".25098"/><path stroke-linejoin="round" d="m110.75 105.79c-3.2 12.98-4.72 17.62-14.901 19.36-7.019 1.2-14.096-5.45-11.68-18.55 1.937-10.513 9.93-21.123 18.931-22.584 9.92-1.61 10.24 11.283 7.65 21.774z" stroke-opacity=".2809" fill-opacity=".9382" stroke="#000" stroke-linecap="round" stroke-width="1.1273" fill="#fff"/></g></g>`;
      //case 'ant':
      //    return `<path d="m17.177 23.931c-1.026 0.841 7.226 11.285 7.735 11.893 7.05 8.436 14.029 8.726 14.892 9.985 0.87 1.251 5.028 5.437 12.424 6.668 0.028 1.923 0.134 3.74 0.332 5.466-4.546-1.252-9.666-2.327-12.53-2.32-3.019-0.007-13.244 2.85-15.075 3.706-0.644 0.304-12.325 0.007-12.325 1.279 0 1.287 11.632 1.761 12.113 1.111 4.221 0.671 16.178-1.514 17.451-1.287 1.273 0.24 11.066 3.09 11.137 3.104 0.735 3.38 1.803 5.225 3.069 7.481-4.865-0.141-13.598 4.674-18.47 9.546-4.044 4.045-10.783 10.585-11.801 12.028-3.805 5.374-2.101 22.179 0.007 22.179 1.654 0-2.306-15.044 1.499-20.418 1.096-1.549 13.35-9.914 14.778-11.555 1.429-1.64 9.023-3.988 12.205-6.364-3.203 2.072-5.395 5.311-5.395 9.766 0 16.541 8.633 23.211 15.118 23.291 0 0 0.007 0.02 0.021 0.02h0.127c6.477-0.08 15.069-6.77 15.069-23.283 0.007-4.151-1.91-7.269-4.752-9.348 3.458 2.213 10.239 4.384 11.582 5.926 1.436 1.633 13.632 9.998 14.732 11.554 3.82 5.367-0.14 20.431 1.53 20.431 2.09 0 3.81-16.811 0-22.185-1.02-1.435-7.755-7.969-11.8-12.014-4.879-4.879-13.598-9.694-18.47-9.546 1.266-2.255 2.327-4.15 3.069-7.537 0.064-0.008 9.857-2.815 11.137-3.048s13.23 1.959 17.454 1.28c0.48 0.657 12.12 0.177 12.11-1.103 0.01-1.28-11.71-1.004-12.35-1.308-1.83-0.863-12.002-3.713-15.029-3.713-2.864 0.007-8.025 1.082-12.572 2.32 0.198-1.712 0.346-3.529 0.375-5.452 7.396-1.245 11.561-5.424 12.416-6.675 0.87-1.252 7.849-1.542 14.9-9.992 0.5-0.601 8.76-11.052 7.73-11.886-1.21-0.983-8.78 8.761-9.08 9.616-2.05 1.019-11.796 7.51-12.97 7.977-1.181 0.459-7.12 2.581-13.435 6.364-0.969-3.699-3.408-6.209-6.392-7.538 4.122-0.007 7.121-0.813 7.121-5.353 0-4.964-0.955-9.539-2.56-13.209 4.391-2.284 7.573-4.73 8.527-5.077 0.955-0.36 1.323-1.676-0.487-4.999-2.984-5.4589-6.216-10.189-6.916-9.9278-0.7 0.2758 2.567 10.911 5.367 13.202-3.316 0.587-5.494 1.662-8.259 3.578-2.178-3.295-4.978-5.275-8.068-5.325-0.007-0.007-0.014-0.028-0.021-0.021-0.029 0-0.064-0.007-0.092-0.007-3.097 0.042-5.954 2.051-8.125 5.353-2.772-1.909-4.935-3.012-8.245-3.606 2.8-2.277 6.088-12.905 5.388-13.167-0.7-0.2614-3.952 4.4338-6.936 9.893-1.818 3.33-1.422 4.674-0.467 5.02 0.962 0.354 4.144 2.8 8.535 5.084-1.612 3.663-2.567 8.252-2.567 13.216 0 4.526 2.998 5.346 7.113 5.346-2.976 1.336-5.416 3.846-6.385 7.531-6.314-3.784-12.282-5.877-13.456-6.343-1.181-0.46-10.918-7.001-12.968-8.019-0.297-0.848-7.849-10.578-9.065-9.588z"/>`;
      case "turtle":
        return `<path d="m116.14,18.675268 c5.28,-0.32 10.73,-1.18 16,-0.09 1.71,0.51 3.5,0.69 5.3,0.64 0.66,0.08 1.99,0.24 2.65,0.32 0.98,0.67 2.07,0.89 3.26,0.67 l 0.84,0.14 c 0.53,0.21 1.6,0.63 2.13,0.84 l 0.82,-0.07 0.82,0.24 c 0.57,0.2 1.7,0.6 2.27,0.8 l 0.82,0.3 c 0.57,0.22 1.69,0.67 2.26,0.89 0.55,0.24 1.64,0.73 2.19,0.98 l 0.74,0.33 c 0.34,0.16 1.02,0.49 1.36,0.65 l 0.68,0.34 c 0.31,0.17 0.95,0.51 1.26,0.68 l 0.64,0.35 c 0.29,0.18 0.87,0.53 1.17,0.71 0.26,0.19 0.78,0.58 1.04,0.78 l 0.63,0.28 c 0.28,0.2 0.85,0.6 1.13,0.8 0.29,0.21 0.88,0.63 1.17,0.84 l 0.62,0.45 c 0.29,0.22 0.87,0.66 1.16,0.88 0.27,0.21 0.83,0.65 1.11,0.87 0.27,0.22 0.82,0.65 1.09,0.87 0.25,0.23 0.74,0.7 0.99,0.93 l 0.62,0.36 c 0.26,0.24 0.79,0.71 1.06,0.95 0.26,0.24 0.77,0.74 1.03,0.99 0.24,0.25 0.74,0.77 0.99,1.02 0.24,0.27 0.72,0.8 0.96,1.07 l 0.38,0.61 c 0.24,0.25 0.72,0.74 0.96,0.99 0.23,0.26 0.69,0.8 0.92,1.06 0.23,0.27 0.71,0.8 0.94,1.06 0.24,0.26 0.72,0.79 0.96,1.05 0.24,0.27 0.72,0.8 0.96,1.06 0.24,0.27 0.71,0.8 0.95,1.07 0.24,0.27 0.7,0.81 0.94,1.08 l 0.37,0.62 c 0.23,0.24 0.71,0.73 0.94,0.98 0.23,0.26 0.68,0.79 0.91,1.05 0.23,0.26 0.69,0.78 0.92,1.04 0.23,0.26 0.7,0.78 0.94,1.04 0.23,0.26 0.7,0.79 0.93,1.05 0.24,0.27 0.71,0.8 0.95,1.07 0.23,0.28 0.71,0.84 0.95,1.13 l 0.49,0.6 c 0.23,0.28 0.71,0.84 0.94,1.13 0.24,0.26 0.72,0.8 0.96,1.07 0.24,0.25 0.72,0.77 0.97,1.02 0.24,0.25 0.74,0.75 0.98,1 0.26,0.24 0.77,0.72 1.02,0.96 0.26,0.23 0.78,0.69 1.04,0.92 0.27,0.22 0.8,0.66 1.07,0.88 0.25,0.21 0.77,0.64 1.02,0.86 l 0.63,0.32 c 0.28,0.19 0.86,0.56 1.14,0.75 0.28,0.19 0.83,0.56 1.1,0.75 l 0.65,0.25 c 0.29,0.18 0.88,0.54 1.17,0.72 l 0.72,0.21 0.72,0.32 c 0.36,0.15 1.07,0.47 1.43,0.62 l 0.79,0.32 c 0.57,0.23 1.72,0.69 2.29,0.92 l 0.82,0.3 c 0.53,0.28 1.58,0.86 2.1,1.15 l 0.62,0.55 c 0,0.39 0.01,1.16 0.01,1.54 l -0.01,0.7 c -0.14,0.27 -0.42,0.81 -0.56,1.09 -0.13,0.24 -0.38,0.72 -0.5,0.96 l -0.19,0.5 c -0.1,0.23 -0.28,0.69 -0.38,0.92 -0.08,0.22 -0.24,0.66 -0.32,0.89 l -0.14,0.47 -0.16,0.48 c 0.2,-0.11 0.61,-0.34 0.81,-0.45 l 0.55,-0.03 c 0.3,-0.03 0.92,-0.1 1.22,-0.14 l 0.72,-0.12 c 0.52,-0.22 1.56,-0.66 2.09,-0.88 l 0.73,-0.2 c 0.31,-0.18 0.91,-0.55 1.21,-0.73 l 0.69,-0.21 c 0.3,-0.18 0.9,-0.54 1.2,-0.72 l 0.69,-0.22 c 0.3,-0.18 0.9,-0.55 1.2,-0.73 l 0.71,-0.22 c 0.3,-0.19 0.9,-0.55 1.21,-0.73 l 0.7,-0.23 c 0.3,-0.18 0.9,-0.54 1.2,-0.72 l 0.69,-0.23 c 0.3,-0.17 0.89,-0.53 1.19,-0.71 l 0.68,-0.2 c 0.29,-0.18 0.87,-0.53 1.16,-0.7 l 0.7,-0.18 c 0.29,-0.19 0.88,-0.55 1.18,-0.74 0.54,-0.23 1.61,-0.71 2.14,-0.94 l 0.76,-0.34 c 0.35,-0.15 1.07,-0.47 1.42,-0.62 l 0.77,-0.32 c 0.56,-0.2 1.69,-0.62 2.25,-0.83 l 0.82,-0.27 c 0.58,-0.18 1.74,-0.55 2.32,-0.74 0.44,-0.1 1.31,-0.3 1.75,-0.4 0.61,-0.15 1.84,-0.45 2.45,-0.61 0.73,-0.09 2.18,-0.27 2.91,-0.36 1.62,0.07 3.26,0.15 4.9,0.19 l 0.93,0.11 0.89,0.32 c 0.63,0.18 1.88,0.55 2.5,0.74 0.2,0.22 0.61,0.66 0.81,0.87 l 0.61,0.29 c 0.29,0.18 0.85,0.55 1.14,0.73 0.28,0.2 0.85,0.6 1.13,0.8 l 0.59,0.44 c 0.27,0.22 0.8,0.67 1.07,0.89 0.24,0.24 0.74,0.7 0.98,0.94 0.23,0.25 0.68,0.75 0.9,1 0.21,0.27 0.62,0.82 0.83,1.09 l 0.2,0.68 c 0.19,0.3 0.58,0.9 0.77,1.2 l 0.13,0.81 c 0.04,1.24 0.12,2.49 0.22,3.75 l -0.09,0.96 -0.27,0.95 c -0.2,0.66 -0.6,1.99 -0.8,2.65 -0.22,0.21 -0.66,0.62 -0.88,0.83 l -0.3,0.59 c -0.19,0.26 -0.57,0.78 -0.77,1.04 -0.21,0.24 -0.62,0.73 -0.83,0.97 -0.22,0.22 -0.67,0.67 -0.89,0.9 -0.24,0.21 -0.72,0.64 -0.95,0.85 -0.27,0.2 -0.8,0.61 -1.06,0.82 l -0.59,0.4 c -0.31,0.2 -0.92,0.59 -1.23,0.78 -0.53,0.24 -1.61,0.73 -2.15,0.97 -0.42,0.14 -1.26,0.41 -1.68,0.55 -0.59,0.18 -1.76,0.54 -2.34,0.73 l -0.83,0.25 c -0.57,0.19 -1.7,0.57 -2.27,0.76 l -0.81,0.25 c -0.57,0.17 -1.7,0.53 -2.27,0.7 -0.42,0.1 -1.26,0.29 -1.68,0.39 -0.56,0.17 -1.69,0.51 -2.26,0.69 l -0.82,0.23 c -0.57,0.17 -1.71,0.53 -2.27,0.7 -0.43,0.1 -1.27,0.29 -1.7,0.39 -0.57,0.18 -1.71,0.53 -2.29,0.71 l -0.82,0.24 c -0.56,0.19 -1.69,0.57 -2.25,0.76 l -0.81,0.23 -0.83,-0.05 c -0.53,0.21 -1.59,0.65 -2.12,0.87 l -0.83,0.19 c -0.57,0.18 -1.72,0.54 -2.29,0.73 l -0.82,0.250002 c -0.57,0.19 -1.7,0.58 -2.27,0.77 l -0.81,0.23 -0.83,-0.05 c -0.53,0.21 -1.58,0.65 -2.11,0.87 l -0.83,0.18 c -0.57,0.18 -1.69,0.54 -2.26,0.72 l -0.81,0.24 c -0.56,0.19 -1.67,0.57 -2.22,0.76 l -0.81,0.25 c -0.52,0.23 -1.58,0.67 -2.1,0.9 -0.53,0.2 -1.59,0.59 -2.12,0.79 l -0.77,0.25 c -0.54,0.13 -1.6,0.4 -2.14,0.53 l -0.62,0.4 0.17,0.54 c 0.23,0.76 0.46,1.52 0.7,2.29 l 0.19,0.61 c 0.42,-0.01 1.26,-0.03 1.68,-0.04 l 0.85,0 c 0.55,0.17 1.65,0.52 2.21,0.7 l 0.8,0.25 c 0.55,0.19 1.65,0.56 2.21,0.75 l 0.8,0.25 c 0.57,0.18 1.7,0.54 2.26,0.71 l 0.83,0.2 c 0.53,0.21 1.61,0.63 2.14,0.84 l 0.83,-0.07 0.83,0.2 c 0.96,0.75 2.04,1.01 3.25,0.79 l 0.88,-0.04 c 0.68,0.11 2.03,0.32 2.71,0.43 0.6,0.15 1.81,0.45 2.42,0.59 0.42,0.1 1.27,0.3 1.69,0.4 0.54,0.2 1.61,0.59 2.15,0.79 l 0.68,0.32 c 0.33,0.09 0.99,0.25 1.31,0.34 l 0.71,-0.02 c -0.2,0.55 -0.58,1.64 -0.78,2.19 -0.45,1.29 -1.09,2.52 -1.69,3.76 -1.54,0 -2.88,0.8 -4.06,1.7 -0.25,0.2 -0.75,0.61 -1,0.82 l -0.48,0.43 c -0.25,0.21 -0.75,0.61 -1,0.81 -1.23,0.36 -2.39,0.94 -3.3,1.85 -0.36,0.4 -1.1,1.21 -1.47,1.62 l -0.5,0.5 c -0.28,0.18 -0.83,0.52 -1.1,0.69 l -0.63,0.02 -0.63,-0.04 c -0.27,-0.14 -0.81,-0.41 -1.08,-0.55 -0.26,-0.16 -0.78,-0.49 -1.04,-0.66 -0.28,-0.18 -0.83,-0.54 -1.1,-0.72 l -0.59,-0.4 c -0.29,-0.2 -0.87,-0.6 -1.16,-0.79 -0.3,-0.2 -0.89,-0.59 -1.19,-0.79 l -0.63,-0.4 c -0.3,-0.19 -0.9,-0.57 -1.2,-0.76 -0.28,-0.21 -0.82,-0.61 -1.09,-0.82 l -0.67,-0.27 c -0.31,-0.19 -0.93,-0.58 -1.24,-0.77 l -0.65,-0.41 c -0.31,-0.2 -0.93,-0.6 -1.23,-0.8 -0.31,-0.21 -0.93,-0.61 -1.24,-0.81 l -0.64,-0.42 c -0.31,-0.21 -0.91,-0.62 -1.22,-0.83 -0.3,-0.21 -0.9,-0.62 -1.2,-0.82 l -0.63,-0.43 c -0.29,-0.2 -0.87,-0.62 -1.16,-0.82 -0.28,-0.2 -0.83,-0.6 -1.11,-0.8 -0.26,-0.21 -0.77,-0.63 -1.03,-0.84 l -0.62,-0.31 c -0.29,-0.2 -0.86,-0.6 -1.14,-0.81 -0.3,-0.2 -0.89,-0.6 -1.18,-0.81 l -0.63,-0.41 c -0.3,-0.2 -0.9,-0.6 -1.2,-0.8 -0.31,-0.19 -0.92,-0.56 -1.22,-0.75 l -0.64,-0.36 c -0.31,-0.17 -0.92,-0.51 -1.23,-0.68 -0.29,-0.15 -0.88,-0.46 -1.18,-0.62 l -0.72,-0.14 -0.74,-0.2 c -0.58,-1.39 -1.32,-1.5 -2.22,-0.32 -0.66,0.02 -1.99,0.07 -2.66,0.09 -1.79,-0.26 -3.55,0.52 -4.44,2.13 l -0.54,0.65 c -0.15,0.57 -0.44,1.71 -0.58,2.27 l -0.2,0.84 c -0.18,0.57 -0.55,1.72 -0.73,2.3 l -0.24,0.85 c -0.15,0.63 -0.46,1.89 -0.61,2.52 0.08,0.49 0.22,1.49 0.3,1.98 l -0.52,-0.35 c 0.08,0.3 0.24,0.91 0.32,1.21 0.15,0.32 0.45,0.96 0.6,1.28 0.17,0.29 0.5,0.86 0.67,1.15 0.21,0.25 0.63,0.75 0.84,1 0.24,0.22 0.72,0.67 0.97,0.89 l 0.52,0.44 c 0.24,0.21 0.73,0.64 0.98,0.85 0.22,0.22 0.65,0.67 0.86,0.89 l 0.53,0.38 c 0.2,0.26 0.59,0.8 0.78,1.07 0.09,0.34 0.25,1.02 0.34,1.36 0,0.31 0.01,0.94 0.02,1.25 l 0.39,-0.45 c -0.2,0.56 -0.61,1.66 -0.81,2.22 -0.07,0.32 -0.2,0.96 -0.27,1.28 l 0.49,-0.42 -0.67,0.52 c -0.32,0.48 -0.97,1.43 -1.3,1.91 l -0.17,0.79 c -0.03,0.4 -0.09,1.2 -0.11,1.61 -0.46,0.06 -1.37,0.18 -1.83,0.25 -1.52,0.03 -3,0.37 -4.37,0.98 -0.7,0.1 -2.11,0.28 -2.81,0.38 l -0.94,0.04 c -1.75,-0.01 -5.24,-0.03 -6.98,-0.04 -0.73,-0.11 -2.19,-0.33 -2.91,-0.44 -1,-0.7 -2.09,-0.99 -3.29,-0.87 l -0.73,-0.27 c -0.31,-0.14 -0.95,-0.43 -1.27,-0.58 l -0.61,-0.31 c -0.28,-0.18 -0.83,-0.53 -1.11,-0.71 l -0.53,-0.41 c -0.23,-0.25 -0.69,-0.74 -0.92,-0.99 l -0.39,-0.6 c -0.16,-0.34 -0.49,-1.01 -0.65,-1.35 l -0.24,-0.81 c -0.06,-0.69 -0.18,-2.07 -0.25,-2.75 0.07,-0.71 0.19,-2.13 0.25,-2.83 0.17,-0.36 0.5,-1.08 0.67,-1.43 -0.01,-0.43 -0.01,-1.28 -0.02,-1.71 l 0.18,-0.82 c 0.18,-0.34 0.54,-1 0.73,-1.34 0.02,-0.42 0.07,-1.27 0.09,-1.7 l 0.23,-0.85 c 0.17,-0.58 0.53,-1.75 0.7,-2.33 l 0.19,-0.8 c 0.2,-0.31 0.61,-0.91 0.82,-1.21 0.05,-0.41 0.15,-1.23 0.2,-1.65 l 0.36,-0.77 c 0.14,-0.4 0.42,-1.21 0.56,-1.61 l -0.78,-0.26 c -2.71,-0.95 -5.39,-1.57 -8.1,-2.36 -0.38,0.05 -1.15,0.14 -1.53,0.19 -3.58,-0.27 -7.09,-0.38 -10.65,-0.39 -6.39,-0.14 -12.77,0.3 -19.13,-0.1 -0.54,0.18 -1.61,0.52 -2.15,0.69 -0.36,0.09 -1.08,0.27 -1.44,0.36 -0.3,0.1 -0.89,0.3 -1.19,0.4 l 0.71,0.26 c -1.46,-0.04 -1.69,0.56 -0.71,1.8 l 0.07,0.82 c 0,0.4 0,1.21 0,1.61 0.16,0.33 0.47,0.98 0.63,1.31 l 0.14,0.79 c 0.06,0.61 0.17,1.82 0.22,2.43 0.17,0.32 0.5,0.97 0.67,1.29 l 0.24,0.77 c 0.27,0.51 0.8,1.53 1.07,2.04 0.49,0.31 1.48,0.93 1.98,1.23 0.42,0.11 1.25,0.32 1.67,0.42 1.31,0.63 2.73,1 4.19,1.09 0.45,0.07 1.34,0.21 1.79,0.29 0.02,0.43 0.05,1.29 0.07,1.71 l 0.11,0.87 c 0.05,0.43 0.14,1.31 0.19,1.75 l -0.19,0.89 c -0.04,0.44 -0.12,1.33 -0.16,1.77 -1.16,-0.14 -2.02,0.34 -2.57,1.45 -0.43,0.36 -1.3,1.07 -1.73,1.42 -0.12,0.39 -0.35,1.16 -0.47,1.55 l -0.87,-0.12 c -1.23,-0.3 -2.33,-0.04 -3.3,0.79 -1.69,-0.03 -5.06,-0.09 -6.74,-0.13 -1.78,-0.4 -3.59,-0.63 -5.4,-0.61 l -0.87,-0.04 c -0.42,-0.08 -1.28,-0.25 -1.71,-0.34 -0.56,-0.17 -1.67,-0.51 -2.23,-0.68 l -0.7,-0.26 c -0.26,-0.18 -0.79,-0.55 -1.05,-0.73 l -0.63,-0.19 c -0.25,-0.23 -0.74,-0.68 -0.99,-0.9 -0.31,-0.44 -0.94,-1.33 -1.25,-1.77 -0.22,-0.55 -0.65,-1.63 -0.87,-2.17 -0.11,-0.42 -0.34,-1.26 -0.46,-1.67 -0.15,-0.59 -0.47,-1.76 -0.62,-2.35 -0.08,-0.43 -0.24,-1.29 -0.32,-1.72 0.24,-1.21 0,-2.31 -0.7,-3.29 -0.07,-0.43 -0.23,-1.3 -0.3,-1.73 0.24,-1.21 0.01,-2.32 -0.68,-3.31 -0.09,-0.67 -0.27,-1.99 -0.36,-2.65 0.28,-1.2 0.08,-2.3 -0.6,-3.29 -0.12,-0.42 -0.36,-1.25 -0.47,-1.66 -0.4,-0.41 -1.19,-1.21 -1.58,-1.62 -1.12,-0.22 -2.23,-0.48 -3.31,-0.79 -1.11,-0.93 -2.62,-0.28 -2.98,1.03 -0.23,0.22 -0.69,0.65 -0.92,0.86 l -0.33,0.58 c -0.19,0.29 -0.57,0.85 -0.76,1.13 l -0.39,0.59 c -0.19,0.29 -0.57,0.86 -0.75,1.15 -0.2,0.26 -0.6,0.79 -0.8,1.06 l -0.28,0.63 c -0.19,0.28 -0.58,0.86 -0.77,1.14 -0.21,0.27 -0.63,0.8 -0.84,1.06 l -0.32,0.65 c -0.21,0.3 -0.63,0.88 -0.85,1.17 -0.22,0.3 -0.66,0.9 -0.88,1.2 l -0.47,0.62 c -0.23,0.29 -0.7,0.87 -0.93,1.16 -0.24,0.27 -0.71,0.81 -0.95,1.08 -0.24,0.25 -0.72,0.77 -0.96,1.02 -0.25,0.25 -0.75,0.75 -1,0.99 -0.25,0.24 -0.76,0.71 -1.02,0.95 -0.26,0.23 -0.79,0.68 -1.06,0.91 -0.28,0.21 -0.84,0.64 -1.11,0.85 l -0.65,0.28 c -0.28,0.2 -0.82,0.59 -1.1,0.79 l -0.67,0.19 c -0.3,0.16 -0.89,0.49 -1.19,0.65 l -0.67,0.25 c -0.34,0.09 -1.01,0.29 -1.34,0.38 l -0.7,0.06 c -0.32,-0.08 -0.97,-0.23 -1.29,-0.31 l -0.73,0.01 c -0.36,-0.13 -1.07,-0.37 -1.43,-0.5 -0.32,-0.17 -0.95,-0.53 -1.26,-0.71 l -0.6,-0.43 c -0.24,-0.26 -0.73,-0.77 -0.97,-1.03 -0.36,-0.12 -1.1,-0.36 -1.47,-0.49 -0.04,-1.19 -0.55,-2.15 -1.52,-2.86 -0.17,-0.37 -0.49,-1.11 -0.65,-1.47 l -0.35,-0.82 c -0.02,-3.04 -0.02,-5.92 0.08,-8.89 l 0.13,-0.88 0.25,-0.81 c 0.17,-0.3 0.51,-0.91 0.68,-1.21 l 0.13,-0.68 c 0.19,-0.25 0.57,-0.76 0.76,-1.01 l 0.26,-0.59 c 0.22,-0.24 0.65,-0.72 0.86,-0.96 0.26,-0.21 0.78,-0.65 1.03,-0.86 l 0.61,-0.41 c 0.32,-0.19 0.97,-0.57 1.29,-0.75 l 0.74,-0.36 c 0.57,-0.25 1.71,-0.73 2.28,-0.98 l 0.81,-0.34 c 0.52,-0.29 1.57,-0.86 2.09,-1.14 l 0.6,-0.46 c 0.23,-0.21 0.69,-0.65 0.92,-0.86 l 0.29,-0.54 c 0.12,-0.25 0.37,-0.76 0.49,-1.01 l 0.15,-0.55 c 0.09,-0.25 0.25,-0.74 0.33,-0.99 -0.16,-0.21 -0.49,-0.62 -0.66,-0.83 -0.4,-0.33 -1.2,-1.000002 -1.6,-1.330002 l -0.66,-0.34 c -0.28,-0.17 -0.85,-0.51 -1.14,-0.68 l -0.7,-0.15 -0.67,-0.29 c -0.33,-0.14 -0.98,-0.43 -1.31,-0.57 l -0.67,-0.3 c -0.34,-0.15 -1,-0.44 -1.34,-0.59 l -0.71,-0.3 c -0.36,-0.14 -1.09,-0.42 -1.45,-0.56 -0.42,-0.14 -1.25,-0.41 -1.67,-0.54 -1.07,-0.7 -2.23,-0.98 -3.48,-0.83 -0.44,-0.08 -1.33,-0.23 -1.77,-0.31 -0.36,-0.16 -1.07,-0.48 -1.43,-0.64 -0.65,-0.04 -1.94,-0.11 -2.59,-0.15 l -0.84,-0.16 c -0.34,-0.17 -1.03,-0.51 -1.38,-0.68 -0.42,-0.02 -1.27,-0.05 -1.7,-0.06 l -0.83,-0.19 c -0.34,-0.18 -1.03,-0.55 -1.37,-0.74 -0.44,-0.03 -1.33,-0.09 -1.77,-0.11 l -0.88,-0.26 c -0.6,-0.19 -1.82,-0.58 -2.43,-0.78 l -0.8,-0.26 c -0.32,-0.17 -0.97,-0.51 -1.29,-0.68 l -0.76,-0.1 -0.7,-0.3 c -0.33,-0.16 -0.99,-0.47 -1.31,-0.63 l -0.65,-0.32 c -0.29,-0.16 -0.88,-0.49 -1.18,-0.66 l -0.57,-0.32 c -0.24,-0.18 -0.73,-0.52 -0.98,-0.69 -0.21,-0.18 -0.64,-0.54 -0.85,-0.72 -0.2,-0.21 -0.6,-0.63 -0.8,-0.83 l -0.01,-0.64 0.39,-0.57 0.69,0.24 c 0.55,0.12 1.65,0.37 2.19,0.5 l 0.82,0.18 c 0.54,0.2 1.62,0.61 2.16,0.82 l 0.83,-0.06 0.83,0.18 c 0.55,0.22 1.65,0.65 2.2,0.87 l 0.85,-0.05 0.85,0.23 c 1.03,0.7 2.18,0.97 3.43,0.8 0.69,0.12 2.06,0.35 2.75,0.47 1.27,0.5 2.68,1.04 4.06,0.59 l 0.74,-0.14 c 0.91,-0.41 2.71,-0.11 2.88,-1.4 -0.06,-0.25 -0.19,-0.76 -0.26,-1.01 -0.22,-0.18 -0.68,-0.55 -0.91,-0.73 l -0.49,-0.32 c -0.23,-0.16 -0.69,-0.49 -0.92,-0.65 -0.21,-0.16 -0.63,-0.5 -0.84,-0.67 l -0.45,-0.32 c -0.17,-0.21 -0.53,-0.62 -0.7,-0.82 -0.12,-0.25 -0.35,-0.74 -0.46,-0.99 l 0.01,-0.56 0.33,-0.46 c 0.16,-0.23 0.46,-0.7 0.61,-0.93 l 0.45,-0.38 c 0.2,-0.23 0.58,-0.7 0.78,-0.93 0.21,-0.27 0.64,-0.82 0.85,-1.09 l 0.47,-0.63 c 0.31,-0.49 0.94,-1.47 1.25,-1.96 0.22,-0.27 0.67,-0.82 0.89,-1.09 l 0.28,-0.66 c 0.21,-0.28 0.63,-0.82 0.84,-1.1 0.22,-0.26 0.64,-0.79 0.86,-1.05 0.22,-0.26 0.65,-0.78 0.87,-1.04 0.22,-0.27 0.66,-0.81 0.88,-1.08 0.22,-0.29 0.65,-0.86 0.87,-1.15 l 0.45,-0.63 c 0.22,-0.3 0.65,-0.9 0.86,-1.21 0.21,-0.31 0.63,-0.93 0.84,-1.24 l 0.42,-0.65 c 0.2,-0.31 0.6,-0.92 0.8,-1.23 0.22,-0.27 0.64,-0.82 0.85,-1.09 l 0.29,-0.67 c 0.19,-0.29 0.59,-0.89 0.78,-1.18 0.21,-0.27 0.64,-0.82 0.85,-1.09 l 0.3,-0.66 c 0.2,-0.3 0.6,-0.9 0.8,-1.2 0.22,-0.27 0.65,-0.82 0.87,-1.1 l 0.31,-0.67 c 0.2,-0.3 0.61,-0.9 0.81,-1.2 0.22,-0.28 0.66,-0.83 0.87,-1.1 l 0.32,-0.67 c 0.2,-0.3 0.62,-0.9 0.82,-1.19 0.23,-0.27 0.67,-0.81 0.9,-1.08 l 0.32,-0.66 c 0.22,-0.29 0.65,-0.87 0.87,-1.16 0.21,-0.29 0.64,-0.86 0.86,-1.14 0.22,-0.26 0.68,-0.77 0.91,-1.03 l 0.35,-0.63 c 0.22,-0.28 0.67,-0.84 0.89,-1.11 0.23,-0.28 0.69,-0.83 0.91,-1.1 0.23,-0.28 0.69,-0.83 0.92,-1.11 0.23,-0.29 0.7,-0.86 0.93,-1.14 l 0.48,-0.61 c 0.24,-0.27 0.71,-0.83 0.94,-1.11 0.24,-0.26 0.71,-0.79 0.94,-1.05 0.24,-0.25 0.71,-0.75 0.95,-1 0.24,-0.25 0.73,-0.73 0.97,-0.97 0.25,-0.24 0.75,-0.71 1,-0.94 0.25,-0.24 0.77,-0.7 1.03,-0.93 0.28,-0.23 0.82,-0.69 1.1,-0.92 l 0.58,-0.47 c 0.28,-0.22 0.84,-0.67 1.12,-0.89 0.27,-0.22 0.81,-0.65 1.08,-0.87 0.27,-0.22 0.82,-0.65 1.09,-0.87 0.28,-0.21 0.85,-0.64 1.13,-0.85 l 0.61,-0.43 c 0.29,-0.2 0.88,-0.61 1.18,-0.82 0.3,-0.19 0.9,-0.58 1.2,-0.77 l 0.63,-0.38 c 0.3,-0.17 0.91,-0.51 1.22,-0.68 l 0.63,-0.26 c 0.21,-0.22 0.63,-0.66 0.84,-0.87 0.61,-0.19 1.82,-0.56 2.42,-0.75 l 0.84,-0.37 c 0.57,-0.24 1.73,-0.71 2.31,-0.94 0.41,-0.04 1.24,-0.11 1.66,-0.15 0.31,-0.2 0.93,-0.6 1.24,-0.8 l 0.81,-0.2 c 0.6,-0.16 1.8,-0.48 2.4,-0.64 0.45,-0.08 1.36,-0.25 1.81,-0.34 1.19,0 2.39,-0.04 3.59,-0.11 l 0.82,0.17 0.38,-0.76 c 1.2,-0.18 2.41,-0.29 3.64,-0.33 2.49,-0.05 4.98,-0.21 7.47,-0.48 z"/>`;
      case "candycorn":
        return `<g stroke-linejoin="round" fill-rule="evenodd" stroke-linecap="round" transform="translate(212.29 -.79375)"><g stroke-width="1.977" transform="translate(-212.29 .79083)"><path d="m8.7744 299.92h305.67c-11.7-40.924-32.198-82.979-45.323-120.19-6.8504-19.422-12.687-43.17-19.199-66.934h-169.63c-6.616 20.75-12.729 41.19-19.492 58.14-15.931 39.94-40.082 85.16-52.024 128.98z" stroke="#f37100" fill="#f37100"/><path d="m8.7744 299.92c-9.7509 35.777-11.392 70.622 6.4747 100.85 25.785 43.628 94.283 44.105 144.96 46.178 50.196 2.0538 118.85 7.808 146.86-33.853 21.965-32.667 19.047-72.359 7.3767-113.18h-305.67z" stroke="#f3f320" fill="#f3f320"/><path d="m80.286 112.83h169.63c-15.09-55.073-34.36-110.14-82.11-111.25-48.56-1.125-69.945 56.085-87.524 111.25z" stroke="#e3e3e3" fill="#e3e3e3"/></g><path opacity=".5" d="m-44.468 2.3473c68.363 1.5855 78.576 113.78 101.3 178.21 26.217 74.328 81.944 167.94 37.957 233.36-28.012 41.661-96.66 35.903-146.86 33.849-50.674-2.0733-119.18-2.5401-144.96-46.168-39.748-67.252 16.617-157.28 45.556-229.84 24.742-62.03 40.181-170.96 107-169.41z" stroke="#aaa" stroke-width="3.0908"/></g>`;
      case "banana":
        return `<g transform="translate(3.5433049,2.7589847)"><path style="fill:#ffefbf;fill-opacity:1;fill-rule:evenodd;stroke:#55d400;stroke-width:0.30419779;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 61.568952,46.624412 -3.860694,3.533517 c -2.378505,2.61742 -2.539718,6.478114 -2.879162,9.095534 L 52.342547,51.204897 C 50.902966,49.032587 49.463385,48.219016 48.023804,47.409638 45.747322,46.887275 43.898991,47.0785 41.153076,45.77375 40.98653,40.229571 41.494154,34.348305 42.723528,28.106165 c 1.653217,-6.067677 2.737737,-12.160081 8.244873,-18.060197 3.396444,-4.8764001 7.894016,-6.0089654 12.105567,-8.1140013 3.010366,-0.7427123 5.553372,0.072443 8.048567,1.046968 0.686118,1.1167813 1.778683,1.9174371 0.981532,4.1878715 L 68.701421,15.54255 c -2.852466,5.333372 -4.491122,9.857538 -6.347243,14.52668 -1.554931,5.882661 -1.464845,7.770282 -1.897629,10.927729 -0.05095,1.365552 0.02655,2.313627 0.171332,3.043062"/><path style="fill-opacity:1;fill-rule:evenodd;stroke:#ff00ff;stroke-width:0.30419779;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 60.391113,43.876121 c 0,-0.654355 0.130871,-3.795259 0.130871,-3.795259 l 4.187872,-3.533517 c 1.163507,-0.522858 2.685829,0.03073 4.187872,0.523484 1.868971,0.83687 2.226154,1.913483 1.30871,3.795259 l 7.328776,-0.523484 c 3.018859,0.418584 5.697567,1.51747 8.375744,2.61742 l 8.244873,6.543551 8.768359,10.46968 c 0.8417,2.099003 2.20306,2.639024 2.09393,7.590517 l -3.1409,1.046968 -2.74829,-7.328775 -10.077068,-6.805292 c -6.549893,-4.210871 -11.068928,-5.713931 -15.573649,-7.197905 3.562767,6.457057 7.714611,10.853605 9.291841,13.0871 L 79.62915,62.328933 74.525181,57.486706 C 70.753971,56.752653 67.52675,55.202619 64.448114,53.429705 l 0.523484,6.674421 6.020066,25.650715 c 0.857623,3.627958 0.930449,7.059716 0.392613,10.338809 -0.194841,2.142646 -1.026864,4.44459 -2.61742,6.93617 l -5.496582,-0.13087 c -2.181183,0.64056 -4.362367,-1.44844 -6.54355,-2.7483 -2.748291,-3.254359 -5.496582,-5.547922 -8.244873,-12.432744 -1.963065,-4.919057 -3.92613,-8.858952 -5.889195,-17.405843 l -2.224807,-9.946195 -0.785226,7.852259 -0.392613,10.338809 c -0.438297,5.300619 -0.81344,8.78033 0.785226,13.741455 0.166928,3.717538 -1.639627,3.093416 -3.140904,3.140904 l -3.795259,-7.459647 c -2.181183,-3.53918 -4.362367,-7.133287 -6.54355,-12.040132 -2.104861,-6.315909 -2.246346,-10.423023 -1.570451,-13.610583 -0.567159,-4.464189 1.023035,-7.490143 2.486548,-10.600551 2.933765,-4.678125 6.290761,-6.393639 9.553583,-8.768358 -0.496304,-2.029574 -2.428983,-3.771873 -6.412679,-5.103969 -2.237616,0.188778 -2.778518,-0.9878 -8.768356,2.355678 -2.926665,3.230092 -4.52952,5.798277 -5.365711,7.983132 l -4.187872,10.600551 -6.0200656,8.114002 c -0.5671079,1.340794 -1.1342155,2.314656 -1.7013232,4.973097 l -0.261742,5.23484 -3.66438788,-1.701323 1.04696788,-8.899227 5.6274532,-8.899228 c 1.177839,-3.457958 2.355678,-6.559147 3.5335166,-10.993164 1.570452,-4.685292 3.140904,-6.826057 4.711356,-8.768358 3.627668,-4.148953 6.897465,-4.614964 10.207938,-6.54355 l 7.721388,0.130871 c 3.941945,1.361993 6.482888,3.524557 7.983131,6.281808 l -0.130871,7.72139 c 1.831572,1.089347 3.354338,1.561082 4.842227,1.963065 l 4.187872,1.177839 c 2.985553,4.080225 3.280836,5.918557 4.318743,8.375744 0.607057,-2.104191 0.571035,-3.458123 3.140904,-7.85226 l 4.057001,-2.61742"/><path style="opacity:1;fill:url(#radialGradient6865);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 45.75,47.79921 c 0,0 2.812216,0.023 5.439929,1.74753 -3.524164,5.42308 -4.593521,19.0875 -3.939929,25.12747 0.490624,4.53396 4.287143,11.09705 6.919963,16.22352 3.349975,6.52287 7.809924,11.5115 6.830038,11.65148 0,0 -4.581764,-2.43554 -8.125,-7 -3.543237,-4.56446 -7.524392,-14.70129 -9.250001,-21 -1.725609,-6.2987 -2.651035,-11.87254 -2.625,-15.75 0.02604,-3.87745 1.132451,-6.14437 2.125,-8 0.992549,-1.85562 2.625,-3 2.625,-3 z"/>
                    <path style="opacity:1;fill:#ffe087;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 43.531734,46.706886 c 0,0 -2.697149,3.393429 -3.5,5.375 -1.960779,4.839519 -1.889603,9.24467 -2.4375,14.4375 -0.249242,2.362249 0.523972,6.02359 0.1875,8.375 -0.841013,5.87737 -1.6875,14.1875 -0.375,16.5625 l 2.625,2.125 c -0.471336,-1.945331 -1.66309,-3.170241 -1.375,-5.875 l -0.5,-3.625 1.1875,-8.625 -0.0625,-10.625 c 0.376119,-3.542231 0.546909,-6.981791 1.875,-11 0.733372,-2.23796 1.897938,-4.42801 4.125,-6.5 z"/><path style="opacity:0.18999999;fill:url(#pattern5902);fill-opacity:1;fill-rule:evenodd;stroke:#ff00ff;stroke-width:0.30419779;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 60.372835,43.757715 c 0,-0.654355 0.130871,-3.795259 0.130871,-3.795259 l 4.187872,-3.533517 c 1.163506,-0.522858 2.685829,0.03073 4.187872,0.523484 1.868974,0.83687 2.226157,1.913483 1.30871,3.795259 l 7.328776,-0.523484 c 3.018859,0.418584 5.697568,1.51747 8.375744,2.61742 l 8.244873,6.543551 8.768357,10.46968 c 0.8417,2.099007 2.20306,2.639023 2.09393,7.590522 l -3.1409,1.046968 -2.74829,-7.32878 -10.077066,-6.805292 c -6.549895,-4.210871 -11.068933,-5.713931 -15.573649,-7.197905 3.562769,6.457057 7.714615,10.853605 9.291841,13.0871 L 79.610872,62.210531 74.506903,57.3683 c -3.77121,-0.734052 -6.998437,-2.284086 -10.077067,-4.057001 l 0.523484,6.674421 6.020066,25.65072 c 0.857624,3.627953 0.930451,7.059715 0.392613,10.338808 -0.194841,2.142641 -1.026866,4.444572 -2.61742,6.936172 l -5.496582,-0.13088 c -2.18118,0.64057 -4.36237,-1.44843 -6.54355,-2.74829 -2.748291,-3.254364 -5.496582,-5.547926 -8.244873,-12.432745 -1.963065,-4.919064 -3.92613,-8.858962 -5.889195,-17.405843 l -2.224807,-9.9462 -0.785226,7.852264 -0.392613,10.338809 c -0.438302,5.30061 -0.813441,8.780323 0.785226,13.741455 0.166929,3.717532 -1.639625,3.093413 -3.140904,3.140903 L 33.020796,87.861247 C 30.839617,84.322066 28.658426,80.72795 26.477247,75.821115 24.37238,69.505197 24.230903,65.398088 24.906795,62.210531 c -0.567164,-4.464193 1.023034,-7.490147 2.486549,-10.600555 2.933761,-4.678125 6.290759,-6.393639 9.553582,-8.768358 -0.496304,-2.029574 -2.428986,-3.771873 -6.412679,-5.103969 -2.237621,0.188778 -2.778516,-0.9878 -8.768356,2.355678 -2.926663,3.230092 -4.529519,5.798277 -5.365711,7.983132 L 12.212308,58.67701 6.1922414,66.791016 c -0.567111,1.340789 -1.1342116,2.314647 -1.7013228,4.973098 l -0.261742,5.23484 -3.66438788,-1.701323 1.04696788,-8.899228 5.6274538,-8.899232 c 1.177839,-3.457957 2.355678,-6.559147 3.5335166,-10.993164 1.570452,-4.685292 3.140904,-6.826056 4.711356,-8.768358 3.62767,-4.148953 6.897467,-4.614964 10.207938,-6.54355 l 7.721388,0.130871 c 3.94194,1.361993 6.482889,3.524557 7.983131,6.281808 l -0.130871,7.72139 c 1.831577,1.089347 3.354339,1.561083 4.842227,1.963065 l 4.187872,1.177839 c 2.985555,4.080225 3.280831,5.918557 4.318743,8.375744 0.607053,-2.104191 0.571037,-3.458123 3.140904,-7.85226 l 4.057001,-2.61742"/><path style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#dbb911;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" d="m 38.331171,44.953363 c 0,0 -1.603792,2.030437 -3.380153,4.666369 -1.776361,2.635932 -4.160365,5.926758 -4.888834,8.465305 -1.636188,5.701745 -1.083835,11.648827 -0.245794,17.417303 0.305447,2.102488 1.664431,5.614306 2.730697,8.152018 1.066267,2.537711 3.553501,9.913282 3.553501,9.913282 1.385361,-0.133229 2.616421,-0.729366 3.622576,-2.000219 0,0 -1.679605,-3.422505 -2.930476,-5.757109 -0.540178,-1.008181 -0.733846,-1.092281 -0.79232,-1.71148 -0.248544,-2.631905 -1.152981,-6.195081 -1.063664,-8.102459 0.180681,-3.858498 -0.08153,-7.186778 0.100195,-10.968626 0.141791,-2.950719 0.634481,-6.010882 1.488657,-8.829703 0.296317,-0.977859 1.111885,-2.462327 1.850598,-3.660297 0.738713,-1.197972 2.250116,-3.99478 2.250116,-3.99478 0,0 -2.382301,2.216554 -3.13963,3.444712 -0.757328,1.228158 -1.601751,2.713329 -1.963064,3.905682 -0.882759,2.913138 -1.385917,6.051537 -1.531601,9.083265 -0.18542,3.858643 0.07692,7.188234 -0.100194,10.97067 -0.109813,2.345061 0.195567,5.827095 0.470318,8.518884 -0.311027,-0.689314 -0.340741,-0.701605 -0.707522,-1.574542 -1.053846,-2.50815 -2.530344,-5.532241 -2.801444,-7.398301 -0.830858,-5.719047 -1.279403,-11.804193 0.286281,-17.260246 0.653638,-2.277779 2.572382,-5.641488 4.324877,-8.242005 1.752495,-2.600517 3.404279,-4.745294 3.404279,-4.745294 z"/><path style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#c7a387;fill-opacity:0.35686275;fill-rule:evenodd;stroke:none;stroke-width:1.0629921;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" d="M 71.316797,3.4774811 C 67.047325,4.6244747 62.593159,5.9428696 59.35181,9.1528228 54.329152,14.12683 50.640422,20.398713 48.498467,27.09255 c -1.819145,5.685018 -3.173623,13.413582 -3.614641,19.332464 0.359814,0.247789 0.785229,0.469736 1.453432,0.440217 -0.05902,-4.193435 0.81212,-8.331946 1.505733,-12.448774 1.414105,-8.393188 4.992296,-16.508153 10.706798,-22.869079 2.123105,-2.3632687 4.650959,-4.4810703 7.751861,-5.3655841 1.054471,-0.3007814 3.734878,-1.5973613 3.905922,-0.9758281 -2.559554,4.5767485 -5.587062,8.8728612 -8.162222,13.4359262 -3.407746,6.03837 -5.476854,12.804594 -6.562281,19.636282 -0.932424,5.868687 -1.305062,11.811989 -1.598699,17.744013 1.664835,0.580691 1.069836,-1.310954 1.24209,-2.379933 0.569126,-8.428146 1.202344,-16.956386 3.874114,-25.042128 C 60.72296,23.387563 63.252266,18.510225 66.262478,13.937128 68.32143,10.809181 70.150327,7.5357797 72.030453,4.2974698 71.6526,4.0938687 71.31453,3.9731361 71.316797,3.4774811 Z"/><path style="opacity:0.38699999;fill:url(#pattern6043);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 43.875,47.04921 c 0,0 -2.697149,3.393432 -3.5,5.375 -1.960779,4.839522 -1.889603,9.244675 -2.4375,14.4375 -0.249242,2.362253 0.523972,6.023586 0.1875,8.375 -0.841013,5.877366 -1.6875,14.1875 -0.375,16.5625 l 2.625,2.125 C 39.903664,91.978879 38.71191,90.753967 39,88.04921 l -0.5,-3.625 1.1875,-8.625 -0.0625,-10.625 c 0.376119,-3.542226 0.546909,-6.981788 1.875,-11 0.733372,-2.237959 1.897938,-4.428007 4.125,-6.5 z"/><path style="opacity:1;fill:#ffe087;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 54.500001,52.299208 c 0,0 3.500855,-5.287585 6.030331,-7.021445 2.176322,-1.491787 4.457736,-2.570163 7.094669,-2.478553 4.728287,0.164267 9.40195,2.028614 13.640168,4.131283 6.335779,3.143316 18.63388,12.066945 18.63388,12.066945 l 4.475951,4.05177 0.5,5.25 -3.125,0.375 -1.750001,-4.75 -2,-3.375 c 0,0 -6.96766,-5.17101 -11.37239,-7.64644 -3.70375,-2.08149 -8.87427,-4.681009 -12.877607,-6.103557 -2.210188,-0.785369 -4.530817,-1.580882 -6.875,-1.500001 -2.082094,0.07184 -4.312285,0.52857 -6,1.750001 -2.74325,1.985344 -4.866117,4.397527 -5.75,8.374997 -0.53033,-1.41421 -0.625,-3.125 -0.625,-3.125 z"/><path style="opacity:0.29600004;fill:url(#pattern6317);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 54.5,52.29921 c 0,0 3.500855,-5.287588 6.03033,-7.021448 2.176322,-1.491787 4.457737,-2.570163 7.09467,-2.478553 4.728287,0.164267 9.40195,2.028614 13.640165,4.131283 6.335782,3.143316 18.633884,12.066941 18.633884,12.066941 l 4.475951,4.051777 0.5,5.25 -3.125,0.375 -1.75,-4.75 -2,-3.375 c 0,0 -6.96766,-5.171009 -11.372398,-7.646447 C 82.923852,50.821277 77.753337,48.221758 73.75,46.79921 c -2.210188,-0.785369 -4.530817,-1.580882 -6.875,-1.500001 -2.082094,0.07184 -4.312285,0.528569 -6,1.750001 -2.74325,1.985344 -4.866117,4.397524 -5.75,8.375 -0.53033,-1.414214 -0.625,-3.125 -0.625,-3.125 z"/><path style="opacity:0.23500001;fill:url(#pattern6501);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 45.75,47.79921 c 0,0 2.812216,0.02299 5.439928,1.747524 -3.524163,5.42308 -4.59352,19.087505 -3.939928,25.127476 0.490624,4.533951 4.287142,11.097042 6.919962,16.223515 3.349975,6.522874 7.809924,11.511505 6.830038,11.651485 0,0 -4.581764,-2.43554 -8.125,-7 -3.543236,-4.564462 -7.524391,-14.701297 -9.25,-21 -1.725609,-6.298703 -2.651035,-11.872546 -2.625,-15.75 0.02604,-3.877454 1.132451,-6.144374 2.125,-8 0.992549,-1.855626 2.625,-3 2.625,-3 z"/><path style="opacity:0.32000002;fill:url(#pattern6685);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 41.625,37.174209 -0.5,8.125 c 0,0 -2.875,-0.875 -3.25,-1.75 -0.375,-0.875 -4.5,-4.625 -4.5,-4.625 0.691155,-2.206156 6.142113,1.001498 6.5,-2.75 z"/><path style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#ad9000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.77165353;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" d="M 29.000477,30.445086 C 20.876,30.598055 13.759447,36.646431 11.03565,44.358219 9.5359084,48.604383 8.4882494,52.939299 6.6767474,57.028257 5.158888,60.454401 1.8823878,63.148701 0.74106742,66.618268 c -0.5961304,3.59706 -0.8007937,6.646065 -0.7264711,9.30449 1.39247768,2.05745 3.66944518,2.123434 5.59294238,1.791297 0.2046117,-2.490116 0.00988,-4.675018 0.5673122,-7.081402 1.2102949,-2.48079 2.3753389,-4.349618 4.3027471,-6.45673 4.222004,-4.615647 5.071886,-11.018973 7.983631,-16.487769 2.083431,-3.913072 5.276246,-8.43674 9.867868,-8.506465 2.52621,-0.03836 7.982503,1.290202 7.56423,3.829863 -4.72158,2.439767 -8.775026,6.217912 -10.506038,11.447176 -3.177132,9.597889 -1.763101,20.312712 3.715841,28.741486 2.78377,4.282536 5.559401,8.643837 7.076848,13.576019 3.495874,0.635608 6.756199,-2.871873 3.989145,-5.893726 -1.729125,-4.738285 -0.292296,-9.780605 0.18109,-14.61697 0.241789,-2.470246 0.329184,-10.146749 0.356954,-13.288481 1.987937,11.68344 6.230782,27.425258 13.99796,36.480202 1.23882,1.444212 2.32948,2.880462 4.812582,3.644112 2.615186,0.80427 4.151681,2.51437 5.078292,2.40886 1.754337,-2.03212 2.308276,-1.0897 4.248752,-0.68612 1.978299,-3.65627 4.183807,-8.978941 3.889985,-13.387361 -0.706177,-10.595283 -4.902434,-19.737328 -6.310492,-30.687715 -0.279254,-2.171749 -2.944499,-7.846471 0.989994,-4.903762 2.479902,1.854784 6.126146,1.196235 8.413155,3.549991 l 3.593179,3.698047 c 1.955704,0.142937 3.87387,0.154495 5.30232,-1.547959 -3.319875,-4.260968 -7.292194,-8.138284 -9.747844,-12.972587 8.607084,3.207289 16.766138,7.758964 23.76321,13.717959 1.47706,1.933899 1.59746,4.644375 2.48809,6.913954 0.1118,2.267727 5.01428,0.10627 5.07286,-0.987984 -0.87384,-3.979319 -1.81382,-8.053161 -4.49059,-11.357601 C 97.38589,51.399286 92.748569,45.99904 86.445066,42.654776 82.256972,40.432823 76.590418,38.801137 71.789332,40.258932 c -0.216438,-6.470757 -10.23734,-5.686258 -11.439247,0.0977 -0.704606,2.781538 2.839055,1.178943 2.633756,-1.149205 1.249082,-3.37385 8.67858,-1.528609 6.953573,0.247842 -3.350946,-1.354464 -3.01398,1.934305 -2.932987,3.120419 2.831777,-1.17979 6.42991,-1.419567 9.919052,-1.473438 5.73277,-0.08851 10.795295,4.004404 15.136371,7.517542 4.1943,3.394351 7.22955,8.066623 10.34909,12.455668 0.8304,1.168323 1.73726,2.410366 1.65834,4.035473 -0.0822,1.691517 -1.42677,1.095296 -2.71561,0.233526 -0.70986,-2.21413 -1.00491,-2.990615 -2.36222,-5.376263 C 91.433869,54.0052 80.915984,48.717918 73.879005,45.703321 c -7.03698,-3.014597 -11.268224,-1.38356 -15.770273,2.435525 -2.200719,1.866869 -3.464687,7.364689 -3.810016,7.294307 -0.670545,-4.398046 -3.258964,-9.168365 -8.320632,-9.050438 -2.361843,0.05503 -5.980655,-1.468726 -5.985859,-3.10078 -0.870584,-0.842706 -1.644491,-1.278319 -2.326949,-2.38802 -1.87099,-3.042297 -6.59147,-4.198696 -10.252615,-3.787392 -5.670562,0.637048 -9.028961,5.406553 -11.426349,10.303247 -2.876514,5.875318 -4.277975,13.02155 -9.4337996,17.492932 -0.9533652,2.59411 -2.818346,3.704467 -2.5093961,6.59826 0.4276106,1.601322 -1.4409925,3.211885 -2.3791122,1.010396 l 0.9496085,-6.027672 c 3.4901198,-4.756104 6.5091928,-9.814818 8.0309784,-15.670051 1.552047,-5.971661 3.86057,-12.716749 9.608182,-16.116881 4.544676,-2.688507 9.793405,-3.494474 14.830315,-1.769735 3.469838,1.188141 4.224443,5.507124 6.543777,6.201419 0.01727,-3.042094 -2.086042,-5.11619 -4.22603,-6.361606 -2.523957,-1.468875 -5.472507,-2.376872 -8.400358,-2.321746 z m 8.171259,13.95412 c 1.584112,2.05726 6.525713,1.413758 6.913232,3.961315 -4.038843,3.841503 -4.055657,9.58503 -4.75922,14.715051 -0.687722,5.014507 -0.113079,9.997866 -0.71446,15.032415 -0.588738,4.928719 -1.747015,8.413387 0.689205,13.112272 -0.433615,1.626392 -2.40233,1.969038 -2.944783,1.426719 -1.121234,-1.120956 -1.427095,-3.616808 -2.449898,-4.822119 -4.34672,-6.659775 -8.63449,-14.002538 -8.491768,-22.24801 0.122037,-7.050398 1.89523,-15.283712 8.472863,-19.155711 1.108336,-0.652435 2.163848,-1.391643 3.284829,-2.021932 z m 28.092277,1.924213 c -2.432411,2.799611 -5.886362,9.916656 -5.429076,13.150048 1.071928,-1.744588 1.761969,-4.00852 3.143987,-6.50987 0.862478,8.362844 3.174389,19.176848 5.513926,27.253982 1.689449,5.832741 3.13903,12.326704 1.256274,18.266497 -0.768984,2.426024 -1.215926,2.278674 -3.025876,1.067858 -1.085154,3.548856 -6.74367,1.942096 -9.060677,0.0091 C 51.54892,94.460706 49.538481,88.86995 46.66325,81.676472 43.706004,74.277801 41.7394,66.310921 41.620398,58.367977 c -0.05634,-3.759982 2.648492,-11.155018 7.112971,-9.513022 4.135054,1.520836 4.367717,7.204245 5.260186,11.088719 2.169067,9.44086 3.285166,17.07881 5.874996,26.145602 1.401446,4.906346 2.318596,8.609666 3.922095,13.517632 0.452092,-0.330709 -1.054134,-6.877249 -1.603188,-9.102646 -2.687639,-10.893388 -4.744596,-18.663004 -6.342866,-29.734515 -0.687352,-4.761409 0.08532,-8.963721 4.467606,-12.086405 1.490982,-1.062428 3.115683,-2.09387 4.951815,-2.359923 z m 2.868937,-0.09655 c 1.967652,-0.179259 4.147166,0.580439 5.131518,1.700774 0.892668,2.428483 2.685325,4.045682 4.00297,6.235143 1.292379,2.147478 1.902028,2.883099 3.478008,4.830987 -0.798044,2.379098 -1.413919,1.559286 -2.194885,1.072703 -0.740469,-0.710735 -0.976462,-0.959494 -2.37556,-2.055581 -1.417567,-1.110555 -2.894103,-1.406438 -4.066636,-1.874897 -2.716784,-1.085431 -6.520631,-2.498267 -8.500805,-4.094493 0.869625,-2.430106 2.809157,-5.127579 4.52539,-5.814636 z"/><path style="opacity:0.32000002;fill:url(#radialGradient7026);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.29055119;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="m 41.625,37.174209 -0.5,8.125 c 0,0 -2.875,-0.875 -3.25,-1.75 -0.375,-0.875 -4.5,-4.625 -4.5,-4.625 0.691155,-2.20616 6.142113,1.00149 6.5,-2.75 z"/><path style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#c6a287;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.77165353;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" d="M 64.767113,0.87233039 C 60.765898,1.1214747 56.656598,3.3982205 53.711609,5.9487044 48.524785,10.440711 44.793771,17.383001 42.972595,23.889647 c -1.391883,4.972877 -1.773919,9.451223 -2.559538,14.570343 -0.368099,2.398555 -0.282185,3.095702 0.05071,5.686569 0.300281,0.551848 1.119069,1.201981 1.710353,1.216718 -0.163634,-6.174203 0.294767,-13.249047 1.862914,-19.043196 1.873619,-6.922834 5.488258,-13.238957 10.922262,-18.2103535 2.69096,-2.4618736 5.841242,-4.9950919 9.578102,-5.3435807 2.266616,-0.2113781 4.394955,-0.00152 5.949634,2.0719597 1.077347,1.4368566 0.380142,3.313059 -0.177267,4.7336438 -2.524451,6.4336947 -5.592478,11.8841527 -7.842774,18.4179687 -1.289877,3.745206 -2.156438,7.870978 -2.576244,11.83392 -0.25195,2.378402 -0.577253,3.530409 0.192554,5.737206 0.51182,-0.397532 2.010028,-0.11286 1.41805,-1.023063 -1.678314,-1.481649 -0.434942,-3.841164 -0.08168,-6.363293 1.139577,-8.135983 4.845286,-15.814655 8.046119,-23.094828 C 70.84017,11.953707 72.466748,9.2184216 73.422018,5.9296355 73.975038,4.0256553 72.217515,2.2382669 70.627641,1.4810001 68.818842,0.61945779 66.708786,0.75142789 64.767113,0.87233039 Z"/></g>`;
      case "sun":
        return `<path d="m24 2.5l-2.375 6.6875c0.774-0.1234 1.566-0.1875 2.375-0.1875s1.601 0.0641 2.375 0.1875l-2.375-6.6875zm-15.188 6.2812l3.0315 6.4378c0.935-1.29 2.085-2.44 3.375-3.375l-6.4065-3.0628zm30.406 0l-6.438 3.0628c1.29 0.935 2.44 2.085 3.375 3.375l3.063-6.4378zm-30.032 12.813l-6.6875 2.375 6.6875 2.375c-0.1202-0.764-0.1875-1.546-0.1875-2.344 0-0.819 0.0609-1.622 0.1875-2.406zm29.624 0.031c0.124 0.774 0.188 1.566 0.188 2.375s-0.064 1.601-0.188 2.375l6.688-2.375-6.688-2.375zm-26.968 11.156l-3.0315 6.407 6.4065-3.032c-1.29-0.935-2.44-2.085-3.375-3.375zm24.312 0c-0.926 1.278-2.068 2.414-3.344 3.344l6.407 3.063-3.063-6.407zm-14.531 6.031l2.375 6.688 2.375-6.688c-0.774 0.124-1.566 0.188-2.375 0.188s-1.601-0.064-2.375-0.188z"/><path d="m24 5.25l-1.344 3.8125c0.443-0.0394 0.891-0.0625 1.344-0.0625s0.901 0.0231 1.344 0.0625l-1.344-3.8125zm-13.219 5.5l1.719 3.625c0.572-0.681 1.224-1.336 1.906-1.906l-3.625-1.719zm26.469 0l-3.625 1.719c0.68 0.569 1.337 1.226 1.906 1.906l1.719-3.625zm-28.188 11.875l-3.7813 1.344 3.7813 1.343c-0.0375-0.432-0.0625-0.87-0.0625-1.312 0-0.464 0.0213-0.922 0.0625-1.375zm29.876 0.031c0.039 0.443 0.062 0.891 0.062 1.344s-0.023 0.901-0.062 1.344l3.781-1.344-3.781-1.344zm-3.407 10.938c-0.573 0.686-1.221 1.363-1.906 1.937l3.625 1.719-1.719-3.656zm-23.031 0.031l-1.719 3.594 3.594-1.719c-0.672-0.564-1.311-1.203-1.875-1.875zm10.156 5.313l1.344 3.781 1.344-3.781c-0.443 0.039-0.891 0.062-1.344 0.062s-0.901-0.023-1.344-0.062z"/><path d="m-22.5-17.5a9.5 9.5 0 1 1 -19 0 9.5 9.5 0 1 1 19 0z" transform="matrix(.77806 -1.0613 1.0613 .77806 67.48 3.6413)"/><path d="m-22.5-17.5a9.5 9.5 0 1 1 -19 0 9.5 9.5 0 1 1 19 0z" transform="matrix(1.2443 -.16771 .21664 1.2518 67.616 40.527)"/><path d="m-22.5-17.5a9.5 9.5 0 1 1 -19 0 9.5 9.5 0 1 1 19 0z" transform="matrix(.71579 -.97635 .97635 .71579 64 5.2695)"/>`;
      case "firework":
        return `<defs><linearGradient id="lg1"><stop style="stop-color:#ffd73b" offset="0"/><stop style="stop-color:#ee8400" offset="1"/></linearGradient><radialGradient id="rg1" xlink:href="#lg1" gradientUnits="userSpaceOnUse" cy="5.4103" cx="6.8633" gradientTransform="matrix(2.9713 .76566 -.43392 1.6839 -11.182 -8.949)" r="7.4938"/><filter id="f1"><feGaussianBlur stdDeviation="0.1874122"/></filter><filter id="f2" height="1.4599" width="1.2095" y="-.22993" x="-.10474"><feGaussianBlur stdDeviation="0.18425117"/></filter></defs><g transform="rotate(25)"><g transform="translate(0 -1004.4)"><g transform="matrix(.96824 .25003 -.25003 .96824 261.98 28.943)"><path d="m4.8515 1021.1c2.2196-2.3727 8.9482-2.5884 12.79 0v18.23c-4.6353-0.054-8.7325 0.073-12.79 0v-18.23z"/><path d="m4.8515 1021.1c3.6818 1.7448 7.7427 2.3524 12.79 0v23.155c-4.6232 2.7464-10.845 2.1081-12.79 0v-23.155z"/><path style="fill:#aa0000" d="m4.8515 1023.8c3.6818 1.7448 7.7427 2.3524 12.79 0v1.3967c-4.3025 2.9151-11.359 1.8495-12.79 0v-1.3967z"/><path style="fill:#aa0000" d="m4.8515 1040.9c3.6818 1.7448 7.7427 2.3524 12.79 0v1.3967c-4.3025 2.9151-10.551 1.6657-12.79 0v-1.3967z"/><path style="fill:#000000;" d="m11.532 1013.7c0.23305 0.9512-0.1845 2.2498-0.59925 2.9502-0.70598 1.468-0.64652 2.4533-0.31604 3.9744 0.6051 0.3974 1.172 0.4004 1.1893-0.182-0.45969-1.2664-0.49139-2.3558-0.35476-3.4927 0.51677-1.9847 0.31739-2.2127 0.31446-3.27l-0.23368 0.02z" /></g><path style="fill-rule:evenodd;fill:url(#rg1)" d="m15.069 7.3507-5.2438 0.5091 2.9058 4.1512-4.3446-2.9806-0.4427 5.0476-1.4119-5.0757-3.5836 3.5817 2.181-4.7953-5.0478 0.4405 4.7534-2.2718-4.15-2.9072 5.1016 1.3151-1.3104-4.8946 3.0628 4.2866 2.1423-4.5917-0.4092 5.2524 4.5931-2.1404-3.69 3.7606 4.894 1.3125z" transform="matrix(.66944 .049369 -.049369 .66944 15.923 1007.3)"/><path style="fill-opacity:.49554;color:#000000;filter:url(#f1);fill:#ffffff" transform="translate(0 1004.4)" d="m6.2481 34.842c0.3675-0.882 5.2189-19.479 5.2189-19.479s-2.8668 19.553-5.219 19.479z"/><path style="fill-opacity:.71429;color:#000000;filter:url(#f2);fill:#ffffff" transform="translate(0 1004.4)" d="m16.319 14.334c-2.9288-0.09923-4.5208 0.2293-2.5727 1.6907 0 0-5.072-2.7198 2.5727-1.6907z"/></g></g>`;
      case "floppy":
        return `<path style="stroke-linejoin:round;fill-rule:evenodd;stroke-linecap:round;stroke-width:1pt" transform="matrix(1.0594 0 0 1.0594 -1.4619 -1.891)" d="m8.375 6.0625c-1.108 0-2 0.892-2 2v44.844c0 1.108 0.892 2 2 2h43.062c1.108 0 2-0.892 2-2v-40.25l-6.625-6.5935h-38.437z"/><path style="fill-rule:evenodd;stroke:#333333;stroke-width:3.125" d="m15.914 4.6592v13.242c0 1.353 1.188 2.442 2.665 2.442h17.908c1.477 0 2.666-1.089 2.666-2.442v-13.242l-23.239 0.0002z"/><rect style="fill-rule:evenodd;stroke:#333333;stroke-width:1.875;fill:#7f7f7f" rx="1.3992" height="9.0411" width="6.5871" y="7.9428" x="19.516"/><path style="stroke-linejoin:round;stroke:#333333;stroke-linecap:round;stroke-width:2.9499;fill:none" transform="matrix(1.0594 0 0 1.0594 -1.4619 -1.891)" d="m8.375 6.0625c-1.108 0-2 0.892-2 2v44.844c0 1.108 0.892 2 2 2h43.063c1.108 0 2-0.892 2-2v-40.25l-6.626-6.5935h-38.437z"/><rect style="stroke-linejoin:round;fill-rule:evenodd;fill-opacity:.75;stroke:#333333;stroke-linecap:round;stroke-width:1.875;fill:#d9d9d9" rx="2.0351" height="28.611" width="41.747" y="24.011" x="9.3572"/>`;
      case "slime":
        return `<path d="m 163.57665,478.9939 c -24.3084,-14.10129 20.22363,-31.85842 11.65433,-4.63671 -2.25318,3.00162 -7.82305,7.72231 -11.65433,4.63671 z m 183.28848,-20.78849 c -13.14775,-2.33976 -17.9053,-20.06385 -30.08968,-21.98687 -22.97473,-4.1326 -43.31948,4.50415 -60.96133,14.07232 -10.51557,-9.2598 -14.59557,-41.08981 -37.2545,-23.17861 -11.85767,5.10112 -26.09006,37.76324 -36.43017,17.92471 12.26335,-16.11595 13.61823,-38.69297 -2.50565,-53.85402 -9.07864,-25.52803 -23.49108,-2.96585 -38.11197,-0.47002 -19.8545,-7.00156 2.24982,-17.9895 4.45519,-28.45906 -19.65784,-4.47223 -49.62704,-12.5375 -40.5684,-40.71986 -1.26199,-17.36206 -23.24425,-4.54888 -33.79057,-10.24131 -16.397164,-2.8794 -10.496155,-27.34616 7.05826,-18.74942 17.51815,3.39812 57.60888,-4.46006 32.23855,-26.61982 -15.76203,-15.19509 -36.4094,-26.72533 -59.007044,-19.4613 -11.307053,7.56151 -45.1768893,3.79939 -35.022881,-13.82 19.669671,-10.71178 41.22779,3.85343 62.546315,-0.41167 22.65923,2.25062 56.7955,2.92211 46.56505,-30.26243 -9.26561,-9.78026 -32.91651,-30.82361 -7.38635,-36.30014 15.55413,-0.21331 30.86842,10.43077 44.60082,1.80665 13.21274,-12.4417 16.76714,-39.42827 -0.38632,-50.47828 -10.80648,-8.45672 -38.40916,-16.85432 -19.84938,-33.902321 19.3853,1.0478 24.20642,27.651681 41.16885,36.150751 18.51916,13.61049 50.95835,7.17401 61.80278,-12.78899 1.96924,-16.748651 -11.63994,-42.923241 12.50617,-47.433179 23.30938,6.353523 -1.66539,45.643539 28.90133,45.889059 25.56358,7.85631 39.61883,-14.011941 60.08396,-22.018981 30.2942,9.28422 -29.51698,37.027991 8.87108,40.322941 23.1761,5.46703 39.02059,-17.52132 48.06887,-35.414291 3.46612,-8.21607 5.50233,-27.606776 17.85058,-22.515508 13.24499,18.081808 1.86915,39.536319 -11.35616,52.268479 -10.16764,16.26152 9.46107,29.60498 13.1601,44.13081 1.34227,15.68577 3.95064,63.23778 25.50577,34.08371 11.20788,-16.92925 39.90908,7.29467 12.92634,13.29565 -21.85133,2.38884 -8.74246,30.90525 8.32053,31.55607 15.1609,9.00237 41.9144,-1.77662 49.85037,17.11456 -3.05446,22.09256 -29.22362,4.29383 -44.75131,8.75457 -26.49789,0.12599 -17.43484,26.88046 -7.77732,42.51035 9.76698,19.89884 31.2054,31.76298 48.60822,44.93826 18.15985,15.69828 -12.65871,32.16282 -20.76404,11.87903 -12.49108,-15.20596 -28.1879,-37.35636 -51.04288,-25.58585 -20.34079,12.10319 -3.81472,46.51527 -27.16948,55.99789 -13.78208,11.17439 14.82012,29.49627 21.31808,39.46489 19.96655,7.40908 3.994,34.09436 -8.11021,13.7541 -12.62478,-14.46055 -23.96764,-30.13593 -42.7521,-37.32729 -23.81689,-5.8173 -31.20602,23.70722 -28.16799,40.3062 -2.51049,4.62673 -8.09576,6.80908 -13.15148,5.77822 z M 87.72089,429.74028 c -13.99202,-18.69723 22.26227,-31.47183 36.51218,-33.31233 -8.19425,13.17742 -16.8232,38.48212 -36.51218,33.31233 z m 395.16287,-237.9861 c 3.08236,-15.41161 26.50512,-16.98533 35.11966,-30.10934 15.44768,-13.89517 30.96141,21.08476 5.35868,18.73778 -12.78887,2.57515 -28.00886,12.6114 -40.47834,11.37156 z M 416.42257,45.68923 c -11.99704,-10.851863 4.40672,-47.6817285 9.83431,-21.44264 1.89744,5.3401 -6.99834,36.270722 -9.83431,21.44264 z"/>`;
      case "lightning":
        return `<g transform="translate(0 -1036.4)">
            <path style="stroke-linejoin:round;stroke:#ffbf00;stroke-width:.25;" d="m3.4724 8.5186 3.0305-7.0711h6.9448l-5.0192 5.0823h4.1353l-8.1128 9.0914 2.0834-7.1342z" transform="translate(0 1036.4)"/>
          </g>`;
      case "meat":
        return `<path d="M0.26,147.54c0.03,9.81,8.69,19.93,16.89,24.05c5.21,2.61,8.18,9.46,12.72,13.81c5.23,5.01,10.4,11.42,16.8,13.59 c17.18,5.81,35.19-14.63,32.08-29.95c-1.06-5.24-0.61-12.9,2.51-16.31c3.18-3.47,10.44-3.48,16.02-4.26 c12.61-1.76,25.38-2.53,37.9-4.76c6.75-1.2,14.1-3.23,19.48-7.22c11.88-8.81,24.21-17.81,33.6-29.08 c14.98-17.96,15.19-45.27,3.06-65.42c-4.04-6.72-7.15-14.9-12.95-19.46c-11.04-8.66-23.71-15.23-35.79-22.5  c-0.41-0.25-2.4,1.08-2.71,2c-0.62,1.82-0.58,3.86-0.82,5.81c-0.56,4.48-1.93,7.93-4.65,12.19c-6.13,9.62-14.8,8.16-22.83,10.88 c-4.74,1.61-8.27,6.55-12.73,9.39c-4.74,3.01-9.7,6.25-15.01,7.52c-2.92,0.7-7.29-1.75-10.06-3.98c-8.91-7.2-11.87-0.5-13.71,6.14  c-3.48,12.54-6.44,25.26-8.8,38.06c-1.1,5.97-0.3,12.29-0.37,18.45c-0.12,10.04-5.06,15.03-15.05,14.97  c-4.4-0.03-8.83-0.87-13.17-0.52C14.13,121.63-2.27,136.46,0.26,147.54z"/>`;
      case "trophy":
        return `<rect width='24' height='24' stroke='none' fill='#000000' opacity='0'/><g transform="matrix(0.42 0 0 0.42 12 12)" ><g style=""><g transform="matrix(1 0 0 1 0 7)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,160,0); fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -31)" d="M 25 34 L 24 36 L 23 34 L 22 26 L 26 26 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 0 16)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(251,192,45); fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -40)" d="M 29 44 C 29 45.105 28.104 46 27 46 L 21 46 C 19.896 46 19 45.105 19 44 L 19 37 C 19 35.895 23 34 23 34 L 25 34 C 25 34 29 35.895 29 37 L 29 44 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 0 -5.5)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -18.5)" d="M 25 34 L 25 35 L 23 35 L 23 34 L 22 26 L 26 26 z M 19.71 24.971 C 19.204 24.842 7.292000000000002 21.735 5.32 12.203 C 4.443 7.958 5.529 5.508 6.596 4.199 C 7.915 2.578 9.713 2 10.955 2 C 12.616 2 13.9 2.457 14.773 3.359 C 15.871 4.496 15.855 5.879 15.850999999999999 6.035 C 15.850999999999999 7.607 14.786 10 11.850999999999999 10 L 11.850999999999999 10 C 11.728 10 11.094999999999999 9.982 10.437 9.635 C 9.48 9.133 8.955 8.195 8.955 7 L 10.955 7 C 10.955 7.574 11.178 7.764 11.37 7.867 C 11.598 7.986 11.85 8 11.852 8 C 13.755 8 13.852 6.333 13.852 6 C 13.852 5.951 13.85 5.268 13.317 4.731 C 12.834 4.246 12.039 4 10.955 4 C 10.353 4 9.086 4.309 8.146 5.461 C 7.01 6.857 6.71 9.047 7.279 11.797 C 8.999 20.115000000000002 20.087 23.002000000000002 20.198999999999998 23.029 L 19.71 24.971 z M 28.09 25 L 27.491 23.092 C 27.591 23.063 37.562 19.83 40.397999999999996 11.714999999999998 C 41.266999999999996 9.234999999999998 41.206999999999994 7.273999999999998 40.217999999999996 5.882999999999998 C 39.263 4.534999999999998 37.644 4.046999999999998 36.79 4.046999999999998 C 33.824 4.046999999999998 33.79 5.964999999999998 33.79 6.046999999999998 C 33.798 6.507999999999998 33.964 8.046999999999997 35.79 8.046999999999997 C 36.24 8.034999999999997 36.79 7.851999999999997 36.79 7.046999999999997 L 38.79 7.046999999999997 C 38.79 9.245999999999997 36.996 10.046999999999997 35.79 10.046999999999997 C 32.854 10.046999999999997 31.79 7.6519999999999975 31.79 6.046999999999997 C 31.79 4.663999999999997 32.835 2.046999999999997 36.79 2.046999999999997 C 38.311 2.046999999999997 40.544 2.882999999999997 41.851 4.722999999999997 C 42.802 6.062999999999997 43.65 8.480999999999998 42.289 12.374999999999996 C 39.115 21.449 28.539 24.859 28.09 25 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 0 -3)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -21)" d="M 29 39 L 19 39 L 19 37 C 19 35.896 23 34 23 34 L 25 34 C 25 34 29 35.896 29 37 L 29 39 z M 34 3 C 34 11 31.916 28 24 28 C 16.084 28 14 11 14 3 L 34 3 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 -1 -10)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,236,179); fill-rule: nonzero; opacity: 1;" transform=" translate(-23, -14)" d="M 25 19 L 23 19 L 23 11.609 L 21 12.275 L 21 10.515 L 24.813 9 L 25 9 L 25 19 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 0 18)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(122,83,75); fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -42)" d="M 17 38 L 31 38 L 31 46 L 17 46 z" stroke-linecap="round" /></g><g transform="matrix(1 0 0 1 0 18)" ><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill-rule: nonzero; opacity: 1;" transform=" translate(-24, -42)" d="M 19 41 L 29 41 L 29 43 L 19 43 z" stroke-linecap="round" /></g></g></g>`;
      case "sludge":
        return `<path d="M269.614 30.044c-41.094.11-65.414 10.652-81.03 26.75-16.656 17.17-24.139 42.145-28.03 71.115-3.893 28.97-4.132 61.396-7.866 92.127-3.734 30.73-10.966 60.248-30.557 82.406-15.817 17.892-42.361 25.805-62.95 35.092-10.296 4.643-19.02 9.523-23.905 14.351-4.885 4.829-6.475 8.28-4.984 15.149 1.096 5.052 1.608 4.95 5.66 5.863.26.059.576.099.865.147.557 5.33.8 11.75-.547 15.793-2.607 7.825-15.762 11.07-15.469 19.314.375 10.517 11.005 24.543 21.44 23.178 9.19-1.203 13.373-15.322 12.992-24.582-.206-4.997-6.993-7.761-8.076-12.643-1.234-5.558.271-14.423 1.748-20.937 2.398-.154 4.955-.365 7.662-.627 17.928-1.738 42.524-4.773 62.908 10.922l.188.144.18.154c8.02 6.876 11.601 15.838 13.708 23.77 2.107 7.931 3.122 15.205 5.084 20.517 1.963 5.313 4.028 8.479 9.606 11.131 5.527 2.63 15.524 4.371 32.275 2.875 6.943-1.197 23.278-9.063 40.928-16.4 17.776-7.39 37.824-14.455 57.451-11.662 22.195 3.158 36.671 21.628 50.092 35.969 6.71 7.17 13.151 13.532 19.105 17.296 5.955 3.765 10.752 5.103 16.756 3.752 3.784-.85 6.019-2.717 8.604-6.716 2.585-4 4.872-10.023 7.088-16.815 4.43-13.584 8.153-30.887 22.523-41.054 15.43-10.919 35.04-9.373 51.36-9.366 2.497.001 4.914-.024 7.236-.088 1.676 6.563 3.632 16.245 2.43 22.186-1.07 5.28-8.3 8.397-8.44 13.781-.322 12.39 5.349 32.649 17.742 32.672 12.318.023 18.463-20.109 17.758-32.406-.326-5.692-7.844-8.637-9.877-13.963-2.372-6.216-3.17-17.085-3.437-24.25 3.643-1.11 5.647-2.575 6.986-4.809 1.073-1.79 1.352-3.25.978-5.77-.373-2.519-1.69-5.98-4.097-9.984-4.815-8.008-13.776-17.92-24.324-28.353-21.097-20.867-48.347-43.68-62.825-67.358-4.863-7.952-8.993-16.588-12.576-25.705-7.318-.474-14.554-.62-21.726-.51-.277 9.449-.298 27.428 3.062 37.31 3.313 9.743 17.026 11.318 17.207 25.634.193 15.237-6.193 39.866-21.422 40.383-15.972.541-25.213-24.753-25.283-40.735-.06-13.684 12.29-14.826 14.397-23.879 1.635-7.029.603-17.906-.751-26.676-1.116-5.49-5.266-11.503-12.227-10.64-33.643 3.153-66.13 10.934-98.915 17.518 3.746-21.205 11.727-47.904 35.3-65.721a73.974 73.974 0 0 1 4.52-3.154c-.304 5.65-.976 11.957-2.492 16.06-1.742 4.717-9.088 7.325-8.68 12.336.611 7.504 8.295 16.512 15.815 16.13 8.506-.434 16.796-11.492 15.943-19.966-.404-4.016-7.606-4.097-9.29-7.765-2.548-5.546-1.784-15.554-.835-22.373 21.352-9.2 44.721-6.84 64.479.29 8.004 2.89 13.774 7.568 18.152 13.231-4.283-18.421-7.608-37.494-11.049-56.047-4.684 11.104-23.122 12.455-42.303 4.672 15.512-9.746 25.996-23.802 35.4-38.783-5.935-25.782-13.52-48.61-24.792-64.387-11.33-15.859-25.448-25.085-48.428-25.775a258.397 258.397 0 0 0-8.445-.12zm-41.33 90.005c.635-.009 1.278.256 1.91.832 17.36 15.839 31.196 35.58 54.338 41.11-10.236 9.53-31.876 14.4-57.028 1.125-10.858-17.297-5.365-42.982.78-43.067zm41.023 318.409c-16.932.1-38.307 8.538-36.385 22.369 3.127 22.496 55.236 28.997 67.424 9.832 6.62-10.41-8.522-27.451-20.367-30.903-3.094-.901-6.764-1.321-10.672-1.298z"/>`;
      case "robot":
        return `<path d="M5,7A1,1,0,0,0,4,8V22a1,1,0,0,0,1,1H19a1,1,0,0,0,1-1V8a1,1,0,0,0-1-1H13V4.723a2,2,0,1,0-2,0V7ZM18,9V21H6V9ZM7,13a1,1,0,0,1,1-1h2a1,1,0,0,1,0,2H8A1,1,0,0,1,7,13Zm6,0a1,1,0,0,1,1-1h2a1,1,0,0,1,0,2H14A1,1,0,0,1,13,13ZM1,14V12a1,1,0,0,1,2,0v2a1,1,0,0,1-2,0Zm22-2v2a1,1,0,0,1-2,0V12a1,1,0,0,1,2,0ZM7,18a1,1,0,0,1,1-1h8a1,1,0,0,1,0,2H8A1,1,0,0,1,7,18Z"/>`;
      case "cat":
        return `<g transform="translate(-.0014746 .00074460)"><path transform="translate(-1.43234e-6,6.02517e-6)" d="m421.35 116.37c6.661-9.874 7.19-19.641-5.553-41.645-4.768-10.077 1.085-14.588-1.666-22.211-10.943-56.08-3.316-77.199 47.17-11.458 9.356-3.0944 12.552-6.6149 36.148-0.5553 80.297-73.641 36.59-34.393 39.098 19.137-2.321 56.725-38.187 78.129-27.466 162.79 2.517 12.053-57.032 55.227-47.891 113.8 4.63 29.661 14.892 52.317 27.902 87.766 19.39-6.734 25.904 15.347 22.211 19.989-19.827 2.078-56.587 0.962-72.427 0.891-28.246 1.04-17.003-99.465-40.292-107.5-37.637 21.833-58.661 48.551-78.847 75.516 53.873-3.785 66.665 2.675 72.39 16.849 10.387 25.711-63.607 12.096-98.276 15.277-98.42 0.949-179.72-1.584-276.42-0.136-13.416 0.509-32.329-20.174 2.0063-23.757 46.559-1.37 129.56-23.365 162.6-7.122-13.05-81.378 61.401-252.64 196.01-250.42 10.73-1.215 31.068-29.052 43.311-47.197z"/><path style="fill:#87825a" transform="matrix(1.1462,0,0,1.1462,446.68,72.202)" d="m17.668 8.3434c0 4.6079-3.9552 8.3434-8.8342 8.3434-4.8786 0-8.8338-3.736-8.8338-8.3438 0-4.6079 3.9552-8.3434 8.8342-8.3434 4.8788 0 8.8338 3.7355 8.8338 8.3434z"/><path style="fill:#87825a" transform="matrix(1.1105,0,0,1.1105,497.17,72.096)" d="m17.668 8.3434c0 4.6079-3.9552 8.3434-8.8342 8.3434-4.8786 0-8.8338-3.736-8.8338-8.3438 0-4.6079 3.9552-8.3434 8.8342-8.3434 4.8788 0 8.8338 3.7355 8.8338 8.3434z"/><path style="fill:#000000" transform="matrix(1.4192 .37457 -.56317 1.2626 454.02 73.155)" d="m7.4758 5.0605c0 2.7948-1.6735 5.0605-3.7379 5.0605s-3.7379-2.2656-3.7379-5.0605c0-2.7948 1.6735-5.0605 3.7379-5.0605 2.0643 0 3.7379 2.2657 3.7379 5.0605z"/><path style="fill-opacity:.93677;fill:#ffffff" transform="translate(452.67,76.1)" d="m2.9301 1.465c0 0.8092-0.6559 1.4651-1.4651 1.4651-0.80907 0-1.465-0.6559-1.465-1.4651 0-0.80907 0.65593-1.465 1.465-1.465 0.8092 0 1.4651 0.65593 1.4651 1.465z"/><path style="fill:#000000" transform="matrix(1.3622 -.7547 .8342 1.2323 497.28 77.555)" d="m7.4758 4.428c0 2.4455-1.6735 4.428-3.7379 4.428-2.0644-0.0001-3.7379-1.9826-3.7379-4.428 0-2.4455 1.6735-4.428 3.7379-4.428s3.7379 1.9825 3.7379 4.428z"/><path style="fill-opacity:.93677;fill:#ffffff" transform="matrix(1.3077,0,0,1.3077,502.03,75.437)" d="m2.9301 1.465c0 0.8092-0.6559 1.4651-1.4651 1.4651-0.80907 0-1.465-0.6559-1.465-1.4651 0-0.80907 0.65593-1.465 1.465-1.465 0.8092 0 1.4651 0.65593 1.4651 1.465z"/></g>`;
      case "dog":
        return `<g transform="translate(404.66 -518.36)"><path style="stroke:#000000;stroke-width:1.2597px" d="m-235.91 791.54c0.27836 10.072 2.2495 30.144 2.2495 30.144 0.79523 10.656 1.6323 21.311 2.6994 31.943 0.64834 6.4596 2.2495 19.346 2.2495 19.346 0.3533 3.0383 0.67076 6.1552 1.7996 8.9981 0.52214 1.3149 2.2495 3.5992 2.2495 3.5992 1.6809 2.6895 1.05 6.2773 1.1248 9.448 0.0745 3.1565-0.67486 9.448-0.67486 9.448-0.12207 1.7088-1.5022 3.0924-2.0246 4.724-1.2871 4.0201-2.5296 8.1546-2.6994 12.372-0.11262 2.7974 1.1248 8.3232 1.1248 8.3232 0.17766 1.3147 1.6981 2.0542 2.6994 2.9244 0.89489 0.7777 1.8186 1.5969 2.9244 2.0246 1.0583 0.40932 2.2446 0.55708 3.3743 0.4499 0.70819-0.0671 1.4411-0.26798 2.0246-0.67485 0.39384-0.27462 0.89981-1.1248 0.89981-1.1248 0.56406-0.70507 1.0985 1.4556 1.7996 2.0246 0.93889 0.76181 3.1493 1.7996 3.1493 1.7996 1.2005 0.68598 2.667 0.8628 4.0491 0.8998 0.9119 0.0244 2.6994-0.4499 2.6994-0.4499 0.53846-0.0897 1.0594-0.26964 1.5747-0.4499 0.92011-0.3219 2.6994-1.1248 2.6994-1.1248 1.029-0.42873 1.3713 1.788 2.2495 2.4745 0.87227 0.68181 2.9244 1.5747 2.9244 1.5747 1.0666 0.57432 2.3915-0.64138 3.3743-1.3497 1.0359-0.74663 2.4745-2.9244 2.4745-2.9244 1.2118-1.4322-0.12869-3.7813 0.22495-5.6238 0.25482-1.3276 1.4172-2.4741 1.3497-3.8242 0 0 0.22185-3.0655-0.22495-4.499-0.55107-1.7681-1.9715-3.1359-2.9244-4.724 0 0-2.953-4.3652-4.0491-6.7486-1.189-2.5851-2.0187-5.3354-2.6994-8.0983-0.78148-3.1719-1.1454-6.4345-1.5747-9.6729-0.77262-5.8284-1.7996-17.546-1.7996-17.546-0.69064-6.7336-1.2557-13.484-1.5747-20.246-0.4241-8.9893-0.4499-26.994-0.4499-26.994-0.0612-3.6745 0.0692-7.351 0.22495-11.023 0.0988-2.3272 0.12132-4.6675 0.44992-6.9735 0.29258-2.0532 1.3497-6.0737 1.3497-6.0737 0.41661-1.8748 2.3344-3.0539 3.5992-4.499 1.5718-1.7959 4.9489-5.1739 4.9489-5.1739 1.6922-1.7692 3.6156-3.3237 5.6238-4.724 1.4877-1.0373 4.724-2.6994 4.724-2.6994 1.0437-0.5964 2.4013-0.12559 3.5992-0.22495 2.1787-0.18069 6.5236-0.67486 6.5236-0.67486 1.945-0.2012 4.3764-0.83683 5.8488 0.44991 0.80839 0.7065 0.67485 3.1493 0.67485 3.1493l0.89981 9.8979c0.32762 3.6038 0.75725 7.1977 1.1248 10.798 0.38264 3.7484 1.1248 11.248 1.1248 11.248 0.43589 4.3589 1.1859 8.6839 1.5747 13.047 0.34662 3.8902 0.67485 11.698 0.67485 11.698 0.12963 2.247 0.18746 4.4981 0.22496 6.7486 0.0237 1.4245 0 4.2741 0 4.2741 0 1.1641 0.47479 2.2906 0.8998 3.3743 0.52662 1.3428 2.0246 3.8242 2.0246 3.8242 0.98486 1.8603 0.20163 4.2084 0.44991 6.2987 0.26901 2.2646-0.0294 4.7816 1.1248 6.7486 0.97189 1.6565 4.499 3.5992 4.499 3.5992 0.98152 0.78521 0.73239 2.4051 1.1248 3.5992 0.71804 2.1852 2.2495 6.5236 2.2495 6.5236 0.65817 1.9087 1.9707 3.5346 3.1493 5.1739 1.0873 1.5123 3.5992 4.2741 3.5992 4.2741 0.84352 1.0017 2.3046 1.3778 3.5992 1.5747 1.3426 0.20411 3.1493-0.22495 4.0491-0.4499 0.89981-0.22495 3.0333-0.81836 3.8242-2.0246 0.53606-0.8176-0.65411-2.4965 0.22495-2.9244 0.72927-0.35499 2.0246 1.3497 2.0246 1.3497 2.271 1.514 4.9643 2.4287 7.6484 2.9244 1.696 0.31317 3.5523 0.58711 5.1739 0 1.1013-0.39875 2.0767-1.2575 2.6994-2.2495 0.32872-0.52372 0.47364-1.1817 0.44991-1.7996-0.0364-0.94779-0.89981-2.6994-0.89981-2.6994-0.1852-0.55559 1.0055-0.65094 1.3497-1.1248 0.47468-0.65338 0.89982-2.2495 0.89982-2.2495 0.30633-0.76583 0.26083-1.692 0-2.4745-0.35569-1.067-2.0246-2.6994-2.0246-2.6994-2.2351-2.9801-5.6089-4.91-8.5482-7.1985-2.3316-1.8154-7.1985-5.1739-7.1985-5.1739-1.6383-1.1775-3.3086-2.4201-4.499-4.0491-1.5049-2.0593-3.1493-6.9735-3.1493-6.9735-1.1925-2.6406-1.3378-5.6605-1.5747-8.5482-0.66202-8.0726 0.44991-24.295 0.44991-24.295 0.0918-4.9572 0.23208-9.934 0.8998-14.847 0.48525-3.5703 1.6234-7.0244 2.2495-10.573 0 0 0.87878-5.1027 1.3497-7.6484 0.43069-2.3281 1.0286-4.6277 1.3497-6.9735 0.37752-2.7578 0.10255-5.5992 0.67487-8.3232 0.42416-2.019 2.0246-5.8487 2.0246-5.8487 1.0223-2.9532 2.9205-5.546 4.724-8.0983 1.4738-2.0857 4.9489-5.8487 4.9489-5.8487 2.0023-2.3664 3.6961-5.0379 4.9489-7.8733 1.1323-2.5626 2.2495-8.0983 2.2495-8.0983 1.1848-4.2651-0.3749-8.8462-0.4499-13.272-0.11306-6.6726 0-20.021 0-20.021 0-4.8693 2.0121-9.5496 2.4745-14.397 0.3561-3.733 0.27241-7.4979 0.22495-11.248 0 0-0.63255-11.861-0.22495-17.771 0.17219-2.4968 0.54907-4.9878 1.1248-7.4234 0 0 2.0342-8.2292 2.9244-12.372 0.49736-2.3148 1.3497-6.9735 1.3497-6.9735s0.29215-2.7003 0.4499-4.0491c0.50022-4.277 1.1404-8.538 1.5747-12.822 0.37928-3.742 0.55794-7.502 0.8998-11.248 0.2672-2.9276-0.007-5.9767 0.89982-8.7731 0.50768-1.566 1.2246-3.2027 2.4745-4.2741 0 0 3.0179-2.8698 4.724-4.0491 2.9537-2.0417 6.2992-3.4483 9.448-5.1739 2.3249-1.274 4.6842-2.4873 6.9735-3.8242 2.2101-1.2906 4.5698-2.3959 6.5236-4.0491 0 0 4.2498-2.9575 5.8488-4.9489 1.008-1.2554 1.6842-2.7666 2.2495-4.2741l2.6994-7.1985c0.49677-1.3247 1.7641-2.2703 2.2495-3.5992 0.36387-0.99605 0.53676-2.0924 0.44991-3.1493-0.12236-1.489-1.2846-2.7815-1.3497-4.2741-0.09041-2.072 1.3497-6.0737 1.3497-6.0737 0.36007-1.6203-0.78145-3.266-1.5747-4.724-0.22945-0.42176-0.89981-1.1248-0.89981-1.1248-1.2647-1.5809 0.43432-4.0963 0-6.0737-0.23031-1.0486-1.3497-2.9244-1.3497-2.9244-0.31107-0.67398-0.90075-1.2635-1.5747-1.5747-1.7073-0.78842-5.6238-0.4499-5.6238-0.4499-3.5257-0.28205-7.0526 0.55451-10.573 0.8998-2.7031 0.26515-8.0983 0.89982-8.0983 0.89982-2.9217 0.32464-5.906 0.25077-8.7731 0.89981-2.1744 0.49221-4.1019 1.869-6.2987 2.2495-0.51718 0.0896-1.2035 0.37116-1.5747 0-0.79532-0.79533 0-3.3743 0-3.3743s-0.14722-2.4985-0.67485-3.5992c-0.89647-1.8702-4.0491-4.724-4.0491-4.724-1.1424-1.3327-3.2098-1.5616-4.9489-1.7996-1.9373-0.26511-5.8488 0.44991-5.8488 0.44991-1.1214 0.0863-2.2762 0.2436-3.3743 0-3.6352-0.80648-10.123-4.724-10.123-4.724-4.7062-2.1962-10.329-1.2918-15.522-1.3497-6.9876-0.078-14.041 0.12131-20.921 1.3497-2.8493 0.50879-8.3232 2.4745-8.3232 2.4745-1.2716 0.37805-1.9602 1.8228-2.6994 2.9244-0.69162 1.0307-0.60496 2.5995-1.5747 3.3743-1.3789 1.1017-3.4794 0.63104-5.1739 1.1248-1.4577 0.42473-4.2741 1.5747-4.2741 1.5747-1.8415 0.67845-2.6396 2.9086-4.0491 4.2741-1.9456 1.8848-6.0737 5.3988-6.0737 5.3988-1.9129 1.7004-2.7786 4.8144-4.0491 6.5236s-2.669 2.2774-3.3743 3.8242c-0.94144 2.0649 0.10557 4.714-0.8998 6.7486-0.42281 0.85562-1.5816 1.1792-2.0246 2.0246-0.77816 1.4852-0.89981 4.9489-0.89981 4.9489-0.48289 2.6559-0.56038 5.4577 0 8.0983 0.30662 1.4448 1.7996 4.0491 1.7996 4.0491 0.58579 1.318 1.2862 2.5852 2.0246 3.8242 0.41524 0.69673 1.2162 1.2245 1.3497 2.0246 0.24247 1.4531-1.1248 4.2741-1.1248 4.2741-1.4583 5.5416-0.77782 11.458-1.7996 17.096-0.7459 4.116-3.1493 12.147-3.1493 12.147-0.74564 2.876-4.0084 4.4921-6.5236 6.0737-1.5678 0.98584-5.1739 2.0246-5.1739 2.0246-1.9664 0.76946-5.1739 0.22495-6.2986 0.67486-1.1248 0.4499-5.2915-0.15268-7.8733-0.67486-2.8588-0.5782-5.5888-1.6846-8.3232-2.6994-2.3632-0.87698-6.9735-2.9244-6.9735-2.9244-3.5449-1.4866-7.0487-3.1999-10.798-4.0491-3.3767-0.76487-6.8855-0.8901-10.348-0.8998l-40.154-0.11249c-7.1692-0.02-14.358 1.1085-21.483 0.78733-1.1438-0.0515-4.724-1.7996-7.6484-2.9244s-4.4658-2.6099-6.7486-3.8242l-10.573-5.6238s-5.9617-2.2121-8.9981-3.1493c-3.0415-0.93883-6.2986-2.2495-9.223-2.4745-2.9244-0.22496-13.817-1.1248-10.348-1.1248 1.1819 0-4.2229-0.18944-6.5236 0.22495-1.7275 0.31114-4.949 1.7996-4.949 1.7996-1.3463 0.48957-2.5767 1.6112-3.1493 2.9244-0.50953 1.1685-0.26986 2.5784 0 3.8242 0.19181 0.8855 0.62256 1.7204 1.1248 2.4745 0.79404 1.1924 1.7199 2.3738 2.9244 3.1493 2.193 1.4121 4.9669 1.5976 7.4234 2.4745 3.174 1.133 6.141 3.7345 9.448 3.5992 3.379-0.13824 4.7509 0.54802 7.1984 2.6994 1.6876 1.4834 5.3988 4.0491 5.3988 4.0491 2.2122 1.6592 4.3364 3.4505 6.2986 5.3988 1.6218 1.6103 4.499 5.1739 4.499 5.1739 2.2537 2.5917 5.3181 4.4107 8.3232 6.0737 2.8264 1.5642 8.9981 3.5992 8.9981 3.5992 1.9936 0.79744 3.8259 1.9792 5.8487 2.6994 1.2764 0.45446 3.9367 1.0123 3.9367 1.0123 5.3073 1.3647-0.94665 10.51-2.137 15.859-1.0044 4.5131-2.0246 13.722-2.0246 13.722-0.66986 4.5402-1.1167 9.1327-1.1248 13.722-0.006 3.8359 0.32093 7.6806 0.89981 11.473 0.40628 2.6613 1.6646 5.1846 1.7996 7.8733 0.0606 1.2076-0.4499 3.5992-0.4499 3.5992-0.35925 2.874-2.9244 7.1985-3.1493 8.0983-0.22495 0.8998-2.8918 5.5225-3.1493 8.5482 0 0-0.74971 7.039-0.89982 10.573-0.30548 7.192 0 21.595 0 21.595 0 2.41-0.4499 6.2986-0.67485 7.1985-0.22495 0.89981-1.5747 7.1985-1.7996 8.0983-0.22495 0.89981-1.7996 8.5482-2.0246 9.8979-0.22495 1.3497-2.7266 7.0382-4.0491 10.573-1.4547 3.888-2.5484 7.9219-4.2741 11.698-0.96276 2.1064-3.3743 6.0737-3.3743 6.0737-1.3028 2.3451-2.3717 4.8131-3.5992 7.1984-0.66 1.2825-1.7846 2.4019-2.0246 3.8242-0.16406 0.97252 0.44991 2.9244 0.44991 2.9244 0.19684 1.2794-0.17072 2.8441 0.67485 3.8242 0.3098 0.35907 1.3497 0.4499 1.3497 0.4499 0.57351 0.19116 1.0518-1.2032 1.5747-0.8998 0.38912 0.22581-0.0669 0.9048 0 1.3497 0.15166 1.0086 0.47222 1.9984 0.89981 2.9244 0.40989 0.88761 0.73017 1.9819 1.5747 2.4745 0 0 1.6938 1.3028 2.6994 1.5747 0.79624 0.21526 2.1056 0.73775 2.4745 0 0 0 0.23415-1.7177 0.8998-1.7996 0.68614-0.0844 0.70002 1.3384 1.3497 1.5747 0 0 1.6556 0.83771 2.4745 0.8998 0.81883 0.0621 2.0246 0.28097 2.2495-0.4499 0 0 0.0183-2.4116 0.89981-2.9244 0.59758-0.34758 1.3332 0.4499 2.0246 0.4499 0 0 0.92127 0.1373 1.3497 0 0.61426-0.19684 1.2795-0.5512 1.5747-1.1248 0.48036-0.93342-0.893-2.5974 0-3.1493 0.5705-0.3526 1.7996 0.8998 1.7996 0.8998 0.91222 0.45611 2.1949-0.18706 2.9244-0.8998 1.1872-1.16 1.2578-3.0947 1.5747-4.724 0.22949-1.18 0.22495-3.5992 0.22495-3.5992s-0.40917-11.85-0.22495-17.771c0.0936-3.0063 0.67485-8.9981 0.67485-8.9981 0.50608-6.7479 2.4732-13.339 4.499-19.796 1.0171-3.2417 3.8242-9.448 3.8242-9.448 1.2911-3.1897 0.65662-6.9653 2.0246-10.123 1.0257-2.3675 4.499-6.2986 4.499-6.2986 2.2605-3.1647 4.2124-6.5451 6.5236-9.6729 1.4893-2.0155 4.724-5.8488 4.724-5.8488 1.0754-1.3315 1.7886-2.9309 2.4745-4.499 0.66512-1.5207 0.92503-3.1966 1.5747-4.724 0.69573-1.6358 1.1388-3.551 2.4745-4.724 1.1408-1.0019 4.2741-1.5747 4.2741-1.5747 2.0598-0.75886 4.4712 0.12131 6.5236 0.8998 1.7695 0.67117 4.724 3.1493 4.724 3.1493 1.5447 1.0298 3.3206 2.2622 3.8242 4.0491 0.39489 1.4014-0.3725 2.917-0.8998 4.2741-0.69397 1.786-2.9244 4.949-2.9244 4.949-1.1271 1.9074-2.2395 3.9064-2.6994 6.0737-0.28019 1.3203 0 4.0491 0 4.0491 0 3.2942 1.0216 6.5352 2.0246 9.6729 0.7974 2.4948 2.2532 4.7375 3.1493 7.1985 0.90931 2.497 2.2495 7.6484 2.2495 7.6484 0.71937 2.4459 0 6.5236 0 7.6484s-0.12421 6.0504 0.4499 8.9981c0.34906 1.7923 0.47254 3.9197 1.7996 5.1739 0.79348 0.74991 3.1493 0.8998 3.1493 0.8998 0.88009 0.25145 1.3367-1.5074 2.2495-1.5747 0.66887-0.0492 1.7996 0.89982 1.7996 0.89982 1.1421 0.57106 1.7254 2.0352 2.9244 2.4745 1.6194 0.59319 3.4492 0 5.1739 0h2.2495c0.87446 0 1.8187-0.58876 2.2495-1.3497 0.18472-0.32626 0-1.1248 0-1.1248 0-1.0199 1.7996 0.8998 2.4745 1.7996 0.67487 0.8998 3.4434 2.1604 4.9489 1.3497l2.9244-1.5747c0.79773-0.42956 0.29044-2.1212 1.1248-2.4745 1.0265-0.43468 2.115 1.5404 3.1493 1.1248 0.46675-0.18754 0.48237-0.885 0.67487-1.3497 0.36296-0.87628 0.8998-2.6994 0.8998-2.6994 0.32251-0.96756-0.56017-1.9627-0.8998-2.9244-0.5379-1.523-1.7996-4.499-1.7996-4.499-0.7601-1.9003-4.499-2.9244-5.3988-2.9244s-4.2683-2.4418-6.2986-3.8242c-1.9463-1.3251-4.1039-2.4758-5.6238-4.2741-1.1475-1.3576-2.4745-4.724-2.4745-4.724-0.82702-1.5789-1.1884-3.3988-1.3497-5.1739-0.18372-2.0218 0.4499-6.0737 0.4499-6.0737 0.13759-1.8575 2.2387-3.002 3.5992-4.2741 1.0188-0.95259 3.3743-2.4745 3.3743-2.4745 0.7256-0.53211 1.8425-0.2746 2.6994 0 1.2285 0.3937 3.1493 2.2495 3.1493 2.2495 2.5634 1.831 5.1548 3.663 7.4234 5.8488 1.4174 1.3656 2.3538 3.1907 3.8242 4.499 0.8079 0.71888 1.6434 1.7485 2.6994 1.7996 4.9122 0.23777 3.2489 16.284 2.4745 24.745z"/></g>`;
    }
  }
  function svgViewBox(icon) {
    switch (icon) {
      case "star":
        return `0 0 640 640`;
      case "atom":
        return `0 0 100 88.379`;
      case "heavy":
        return `0 0 24 24`;
      case "evil":
        return `0 0 240 240`;
      case "micro":
        return `0 0 276 276`;
      case "magic":
        return `0 0 2666 2666`;
      case "rocket":
        return `0 0 165 173`;
      case "sun":
        return `0 0 48 48`;
      case "heart":
        return `0 0 20 16`;
      case "clover":
        return `0 0 660.51 780.1`;
      case "candy":
        return `0 0 200 200`;
      case "ghost":
        return `0 0 399 432.23`;
      case "turkey":
        return "0 0 250 300";
      case "present":
        return `0 0 410.98 434.75`;
      case "nuclear":
        return `0 0 101.22 101.22`;
      case "zombie":
        return `0 0 175 304`;
      case "fire":
        return `0 0 615.18 879.36`;
      case "mask":
        return `0 0 24 24`;
      case "skull":
        return `0 0 256.27 300.86`;
      case "taijitu":
        return `0 -10 256 256 `;
      case "pizza":
        return `0 0 217.444 144.397`;
      case "trash":
        return `0 0 15 15`;
      case "party":
        return `0 0 528.69 983.1`;
      case "martini":
        return `0 0 15 15`;
      case "lightbulb":
        return `0 0 100 156`;
      case "bunny":
        return `0 0 128 128`;
      case "egg":
        return `0 0 273.61 295.02`;
      case "ant":
        return `0 0 128 128`;
      case "turtle":
        return `20 40 270 50`;
      case "candycorn":
        return `0 0 325 449.98`;
      case "banana":
        return `0 0 113.38582 111.81719`;
      case "firework":
        return `0 10 12 35`;
      case "floppy":
        return `0 0 60 60`;
      case "slime":
        return `0 0 552 495`;
      case "lightning":
        return `0 0 16 16`;
      case "meat":
        return `0 0 200 200`;
      case "trophy":
        return `0 0 24 24`;
      case "sludge":
        return `0 0 512 512`;
      case "robot":
        return `0 0 24 24`;
      case "cat":
        return `0 0 546.19 445.84`;
      case "dog":
        return `0 0 349.85 422.66`;
    }
  }
  function getBaseIcon(name, type) {
    if (type === "feat") {
      switch (name) {
        case "steelem":
          return "nuclear";
        case "the_misery":
          return "zombie";
        case "ill_advised":
          return "fire";
        case "garbage_pie":
          return "trash";
        case "demon_slayer":
          return "skull";
        case "equilibrium":
          return "taijitu";
        case "utopia":
          return "martini";
        case "energetic":
          return "lightbulb";
        case "finish_line":
          return "turtle";
        case "banana":
          return "banana";
        case "digital_ascension":
          return "floppy";
        case "slime_lord":
          return "slime";
        case "annihilation":
          return "lightning";
        case "immortal":
          return "meat";
        case "wish":
          return "trophy";
        case "planned_obsolescence":
          return "robot";
        case "friday":
          return "mask";
        case "valentine":
          return "heart";
        case "leprechaun":
          return "clover";
        case "easter":
          return "bunny";
        case "launch_day":
          return "rocket";
        case "solstice":
          return "sun";
        case "firework":
          return "firework";
        case "egghunt":
          return "egg";
        case "halloween":
          return "ghost";
        case "trickortreat":
          return "candy";
        case "thanksgiving":
          return "turkey";
        case "xmas":
          return "present";
        default:
          return "star";
      }
    }
    return global.settings.icon;
  }
  function drawIcon(icon, size, shade, id, inject) {
    let select = "";
    if (id) {
      select = `id="${id}" `;
    }
    inject = inject || "";
    return `<span ${inject}${select}class="flair drawnIcon"><svg class="star${shade}" version="1.1" x="0px" y="0px" width="${size}px" height="${size}px" viewBox="${svgViewBox(icon)}" xml:space="preserve">${svgIcons(icon)}</svg></span>`;
  }
  function drawPet() {
    if ($("#playerPet span.flair")) {
      clearElement($("#playerPet span.flair"), true);
    }
    if ($("#playerPet .flair").length === 0 && global.race["pet"]) {
      let color = "black";
      if (global.race.pet["color"]) {
        color = global.race.pet.color;
      } else {
        if (global.race.pet.type === "cat") {
          switch (global.race.pet.name) {
            case 0:
              color = "gray";
              break;
            case 1:
            case 4:
            case 8:
              color = "orange";
              break;
            case 10:
              color = "black";
              global.race.pet["pattern"] = "solid";
              break;
            default:
              let colors = ["black", "white", "gray", "orange", "cream"];
              color = colors[Math.rand(0, colors.length)];
              break;
          }
        } else {
          let colors = ["black", "white", "gray", "brown"];
          color = colors[Math.rand(0, colors.length)];
        }
        global.race.pet["color"] = color;
      }
      let pattern = "solid";
      if (global.race.pet["pattern"]) {
        pattern = global.race.pet.pattern;
      } else {
        let patterns = ["solid"];
        if (global.race.pet.type === "cat") {
          patterns.push("stripe");
        } else {
          patterns.push("patched");
        }
        pattern = patterns[Math.rand(0, patterns.length)];
        global.race.pet["pattern"] = pattern;
      }
      let coat = ``;
      if (pattern === "patched") {
        coat = `<defs>
            <radialGradient id="PetGradient">
                <stop class="stop1" offset="0%" />
                <stop class="stop2" offset="50%" />
                <stop class="stop1" offset="100%" />
            </radialGradient>
            </defs>`;
      } else if (pattern === "stripe") {
        coat = `<defs>
            <linearGradient id="PetGradient" gradientTransform="rotate(135 0.45 0.5)">
                <stop class="stop1" offset="0%" />
                <stop class="stop2" offset="10%" />
                <stop class="stop1" offset="20%" />
                <stop class="stop2" offset="30%" />
                <stop class="stop1" offset="40%" />
                <stop class="stop2" offset="50%" />
                <stop class="stop1" offset="60%" />
                <stop class="stop2" offset="70%" />
                <stop class="stop1" offset="80%" />
                <stop class="stop2" offset="90%" />
                <stop class="stop1" offset="100%" />
            </linearGradient>
            </defs>`;
      }
      $("#playerPet").append(`<span class="flair" aria-label="${loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)} (${global.race.pet.type})"><svg class="${color} ${pattern}" version="1.1" x="0px" y="0px" width="16px" height="16px" viewBox="${svgViewBox(global.race.pet.type)}" xml:space="preserve">${coat}${svgIcons(global.race.pet.type)}</svg></span>`);
      popover(
        "playerPet",
        function(obj) {
          let popper = $(`<div id="playerPetPop"></div>`);
          obj.popper.append(popper);
          popper.append(`<div>${loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)}</div>`);
          return void 0;
        },
        {
          elm: `#playerPet .flair`,
          classes: `has-background-light has-text-dark`
        }
      );
    }
  }
  function easterEgg(num, size) {
    let easter2 = getEaster();
    const date2 = /* @__PURE__ */ new Date();
    if (easter2.active && !global.special.egg[date2.getFullYear()][`egg${num}`] && $(`#egg${num}`).length === 0) {
      return drawIcon("egg", size ? size : 16, 2, `egg${num}`, `role="button" aria-label="Egg" `);
    }
    return "";
  }
  function easterEggBind(id) {
    $(`#egg${id}`).click(function() {
      const date2 = /* @__PURE__ */ new Date();
      let year = date2.getFullYear();
      if (!global.special.egg[year][`egg${id}`]) {
        global.special.egg[year][`egg${id}`] = true;
        if (id <= 12) {
          if (global.race.universe === "antimatter") {
            global.prestige.AntiPlasmid.count += 9;
            global.stats.antiplasmid += 9;
            messageQueue(loc("city_egg_msg", [9, loc("resource_AntiPlasmid_plural_name")]), "success", false, ["events"]);
          } else {
            global.prestige.Plasmid.count += 9;
            global.stats.plasmid += 9;
            messageQueue(loc("city_egg_msg", [9, loc("resource_Plasmid_plural_name")]), "success", false, ["events"]);
          }
        } else {
          global.prestige.Phage.count += 4;
          global.stats.phage += 4;
          messageQueue(loc("city_egg_msg", [4, loc("resource_Phage_name")]), "success", false, ["events"]);
        }
        $(`#egg${id}`).remove();
        $(".popper").hide();
      }
    });
  }
  function trickOrTreat(num, size, trick) {
    let halloween = getHalloween();
    const date2 = /* @__PURE__ */ new Date();
    const year = date2.getFullYear();
    let tot = trick ? "trick" : "treat";
    if (halloween.active && !global.special.trick[year][`${tot}${num}`] && $(`#${tot}${num}`).length === 0) {
      let label = trick ? `Ghost` : `Candy Corn`;
      return drawIcon(trick ? "ghost" : "candycorn", size ? size : 16, 2, `${tot}${num}`, `role="button" aria-label="${label}" `);
    }
    return "";
  }
  function trickOrTreatBind(id, trick) {
    const date2 = /* @__PURE__ */ new Date();
    const year = date2.getFullYear();
    let tot = trick ? "trick" : "treat";
    $(`#${tot}${id}`).click(function() {
      if (!global.special.trick[year][`${tot}${id}`]) {
        global.special.trick[year][`${tot}${id}`] = true;
        if (trick) {
          global.prestige.Phage.count += 2;
          global.stats.phage += 2;
          messageQueue(loc("city_ghost_msg", [2, loc("resource_Phage_name")]), "success", false, ["events"]);
        } else {
          if (global.race.universe === "antimatter") {
            global.prestige.AntiPlasmid.count += 12;
            global.stats.antiplasmid += 12;
            messageQueue(loc("city_trick_msg", [12, loc("resource_AntiPlasmid_plural_name")]), "success", false, ["events"]);
          } else {
            global.prestige.Plasmid.count += 12;
            global.stats.plasmid += 12;
            messageQueue(loc("city_trick_msg", [12, loc("resource_Plasmid_plural_name")]), "success", false, ["events"]);
          }
        }
        $(`#${tot}${id}`).remove();
        setTimeout(function() {
          if (id === 1 && trick) {
            $(".popper").hide();
          }
        }, 250);
      }
    });
  }
  function single_emblem(achieve, size, icon, iconName, fool, uAffix) {
    return global.stats.achieve[achieve] && (fool ? global.stats.achieve[achieve][uAffix] - 1 : global.stats.achieve[achieve][uAffix]) > 0 ? `<p class="flair" title="${sLevel(global.stats.achieve[achieve][uAffix])} ${iconName}"><svg class="star${fool ? global.stats.achieve[achieve][uAffix] - 1 : global.stats.achieve[achieve][uAffix]}" version="1.1" x="0px" y="0px" width="${size}px" height="${size}px" viewBox="${svgViewBox(icon)}" xml:space="preserve">${svgIcons(icon)}</svg><span class="is-sr-only">${sLevel(global.stats.achieve[achieve][uAffix])} ${iconName}</span></p>` : "";
  }
  function format_emblem(achieve, size, baseIcon, fool, universe) {
    if (!size) {
      size = 10;
    }
    if (!baseIcon) {
      baseIcon = getBaseIcon(achieve, "achievement");
    }
    let emblem = ``;
    if (!universe) {
      emblem = emblem + single_emblem(achieve, size, baseIcon, loc(global.settings.icon), fool, "l");
      emblem = emblem + single_emblem(achieve, size, "atom", loc("universe_antimatter"), fool, "a");
      emblem = emblem + single_emblem(achieve, size, "evil", loc("universe_evil"), fool, "e");
      emblem = emblem + single_emblem(achieve, size, "heavy", loc("universe_heavy"), fool, "h");
      emblem = emblem + single_emblem(achieve, size, "micro", loc("universe_micro"), fool, "m");
      emblem = emblem + single_emblem(achieve, size, "magic", loc("universe_magic"), fool, "mg");
    } else {
      switch (universe) {
        case "standard":
          emblem = emblem + single_emblem(achieve, size, baseIcon, loc(global.settings.icon), fool, "l");
          break;
        case "antimatter":
          emblem = emblem + single_emblem(achieve, size, "atom", loc("universe_antimatter"), fool, "a");
          break;
        case "evil":
          emblem = emblem + single_emblem(achieve, size, "evil", loc("universe_evil"), fool, "e");
          break;
        case "heavy":
          emblem = emblem + single_emblem(achieve, size, "heavy", loc("universe_heavy"), fool, "h");
          break;
        case "micro":
          emblem = emblem + single_emblem(achieve, size, "micro", loc("universe_micro"), fool, "m");
          break;
        case "magic":
          emblem = emblem + single_emblem(achieve, size, "magic", loc("universe_magic"), fool, "mg");
          break;
      }
    }
    return emblem;
  }
  function binary_limit_test(f, start = 1, startIsMin = true) {
    if (start !== Math.floor(start) || start < 1) {
      return 0;
    }
    let num = start;
    while (f(num)) {
      num *= 2;
    }
    let test = Math.floor(num / 2);
    if (num === start) {
      num = 0;
      if (startIsMin) {
        test = 0;
      }
    } else {
      num = test;
    }
    while (test > 1) {
      test = Math.floor(test / 2);
      if (f(num + test)) {
        num += test;
      }
    }
    return num;
  }
  function fibonacci(num, memo) {
    memo = memo || {};
    if (memo[num]) return memo[num];
    if (num <= 1) return 1;
    return memo[num] = fibonacci(num - 1, memo) + fibonacci(num - 2, memo);
  }
  function randomKey(obj) {
    var keys = Object.keys(obj);
    return keys[keys.length * Math.random() << 0];
  }
  function sLevel(level) {
    switch (level) {
      case 1:
        return loc("basic");
      case 2:
        return loc("plain");
      case 3:
        return loc("bronze");
      case 4:
        return loc("silver");
      case 5:
        return loc("gold");
      default:
        return "";
    }
  }
  function calcGenomeScore(genome, wiki, tRanks) {
    if (!tRanks) {
      tRanks = genome.ranks || {};
    }
    let genes = 0;
    if (wiki) {
      Object.keys(wiki.ascended).forEach(function(uni) {
        genes += wiki.ascended[uni];
      });
    } else if (global.stats.achieve[`ascended`]) {
      for (let i = 0; i < universe_affixes.length; i++) {
        if (global.stats.achieve.ascended.hasOwnProperty(universe_affixes[i])) {
          genes += global.stats.achieve.ascended[universe_affixes[i]];
        }
      }
    }
    let active_genus = genome.genus === "hybrid" ? genome.hybrid : [genome.genus];
    let oppose_genus = [];
    active_genus.forEach(function(g) {
      Object.keys(genus_def[g].traits).forEach(function(t) {
        let value = traits[t].val;
        genes -= value;
      });
      oppose_genus = oppose_genus.concat(genus_def[g].oppose);
    });
    if (wiki) {
      genes += wiki.technophobe * 4;
    } else if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 1) {
      genes += global.stats.achieve.technophobe.l * 4;
    }
    let max_complexity = 1;
    let complexity = { utility: 0, resource: 0, production: 0, combat: 0 };
    let neg_complexity = { utility: 0, resource: 0, production: 0, combat: 0 };
    for (let i = 0; i < genome.traitlist.length; i++) {
      let taxonomy = traits[genome.traitlist[i]].taxonomy;
      let gene_cost = traits[genome.traitlist[i]].val;
      if (traits[genome.traitlist[i]].val >= 0) {
        if (complexity[taxonomy] > max_complexity) {
          gene_cost -= max_complexity - complexity[taxonomy];
        }
        complexity[taxonomy]++;
      } else {
        if (neg_complexity[taxonomy] >= max_complexity) {
          gene_cost += neg_complexity[taxonomy];
        }
        neg_complexity[taxonomy]++;
      }
      if (tRanks[genome.traitlist[i]]) {
        if (traits[genome.traitlist[i]].val >= 0) {
          switch (tRanks[genome.traitlist[i]]) {
            case 0.1:
              gene_cost -= 3;
              break;
            case 0.25:
              gene_cost -= 2;
              break;
            case 0.5:
              gene_cost--;
              break;
            case 2:
              gene_cost = Math.max(Math.round(gene_cost * 1.5), gene_cost + 1);
              ;
              break;
            case 3:
              gene_cost = Math.max(Math.round(gene_cost * 2), gene_cost + 2);
              ;
              break;
            case 4:
              gene_cost = Math.max(Math.round(gene_cost * 2.5), gene_cost + 3);
              ;
              break;
          }
          if (gene_cost < 1) {
            gene_cost = 1;
          }
        } else {
          switch (tRanks[genome.traitlist[i]]) {
            case 0.1:
              gene_cost -= 3;
              break;
            case 0.25:
              gene_cost -= 2;
              break;
            case 0.5:
              gene_cost--;
              break;
            case 2:
              gene_cost++;
              break;
            case 3:
              gene_cost += 2;
              break;
            case 4:
              gene_cost += 3;
              break;
          }
        }
      }
      let genus_origin = races[traits[genome.traitlist[i]].origin].type === "hybrid" ? races[traits[genome.traitlist[i]].origin].hybrid : [races[traits[genome.traitlist[i]].origin].type];
      if (active_genus.filter((x) => genus_origin.includes(x)).length > 0) {
        active_genus.filter((x) => genus_origin.includes(x)).length === 1 ? gene_cost-- : gene_cost -= 2;
      }
      if (oppose_genus.filter((x) => genus_origin.includes(x)).length > 0) {
        oppose_genus.filter((x) => genus_origin.includes(x)).length === 1 ? gene_cost++ : gene_cost += 2;
      }
      genes -= gene_cost;
    }
    return genes;
  }
  function updateResetStats() {
    global.stats.reset++;
    global.stats.tdays += global.stats.days;
    global.stats.days = 0;
    global.stats.tknow += global.stats.know;
    global.stats.know = 0;
    global.stats.tstarved += global.stats.starved;
    global.stats.starved = 0;
    global.stats.tdied += global.stats.died;
    global.stats.died = 0;
    global.stats.tsac += global.stats.sac;
    global.stats.sac = 0;
    global.stats.tcattle += global.stats.cattle;
    global.stats.cattle = 0;
    global.stats.tmurders += global.stats.murders;
    global.stats.murders = 0;
    global.stats.tpsykill += global.stats.psykill;
    global.stats.psykill = 0;
  }
  function deepClone(obj) {
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (Array.isArray(obj)) {
      var clonedArr = [];
      obj.forEach(function(element) {
        clonedArr.push(deepClone(element));
      });
      return clonedArr;
    }
    let clonedObj = new obj.constructor();
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        clonedObj[prop] = deepClone(obj[prop]);
      }
    }
    return clonedObj;
  }
  function flib(func, val, val2) {
    switch (func) {
      case "reverse": {
        let str = val.toLowerCase().split("").reverse().join("");
        return str.charAt(0).toUpperCase() + str.slice(1);
      }
      case "name": {
        if (eventActive("fool", 2021)) {
          return flib("reverse", races[global.race.species].name);
        }
        return races[global.race.species].name;
      }
      case "curve": {
        let exp = val2 || 1.5;
        return 1 - (1 - val) ** exp;
      }
    }
    return false;
  }
  function eventActive(event, val) {
    switch (event) {
      case "easter":
        return getEaster();
      case "halloween":
        return getHalloween();
      case "fool": {
        const date2 = /* @__PURE__ */ new Date();
        if (!global.settings.boring && date2.getMonth() === 3 && date2.getDate() === 1) {
          if (val) {
            return date2.getFullYear() === val ? true : false;
          } else {
            return true;
          }
        }
        return false;
      }
      case "launch_day": {
        const date2 = /* @__PURE__ */ new Date();
        if (!global.settings.boring && date2.getMonth() === 4 && date2.getDate() === 6) {
          return true;
        }
        return false;
      }
      case "summer": {
        const date2 = /* @__PURE__ */ new Date();
        if (!global.settings.boring && date2.getMonth() === 5 && [20, 21, 22].includes(date2.getDate())) {
          if (global.city.hasOwnProperty("foundry") && !global.city.foundry.hasOwnProperty("Thermite")) {
            global.city.foundry["Thermite"] = 0;
          }
          if (!global.resource.hasOwnProperty("Thermite")) {
            global.resource["Thermite"] = {
              name: loc(`resource_Thermite_name`),
              display: false,
              value: 0,
              amount: 0,
              crates: 0,
              diff: 0,
              delta: 0,
              max: -1,
              rate: 0
            };
          }
          return true;
        } else if (global.city.hasOwnProperty("foundry") && global.city.foundry.hasOwnProperty("Thermite")) {
          global.city.foundry.crafting -= global.city.foundry["Thermite"];
          global.civic.craftsman.workers -= global.city.foundry["Thermite"];
          global.civic[global.civic.d_job].workers += global.city.foundry["Thermite"];
          delete global.city.foundry["Thermite"];
        }
        return false;
      }
      case "firework": {
        const date2 = /* @__PURE__ */ new Date();
        if (!global.settings.boring && date2.getMonth() === 6 && [1, 2, 3, 4].includes(date2.getDate())) {
          let region = global.race["cataclysm"] || global.race["orbit_decayed"] ? "space" : "city";
          if (!global[region].hasOwnProperty("firework")) {
            global[region]["firework"] = {
              count: 0,
              on: 0
            };
          }
          return true;
        } else if (global.city.hasOwnProperty("firework") || global.space.hasOwnProperty("firework")) {
          delete global.city["firework"];
          delete global.space["firework"];
        }
        return false;
      }
    }
    return false;
  }
  function getEaster() {
    const date2 = /* @__PURE__ */ new Date();
    let year = date2.getFullYear();
    if (!global.special.egg.hasOwnProperty(year)) {
      global.special.egg[year] = {
        egg1: false,
        egg2: false,
        egg3: false,
        egg4: false,
        egg5: false,
        egg6: false,
        egg7: false,
        egg8: false,
        egg9: false,
        egg10: false,
        egg11: false,
        egg12: false
      };
    }
    if (global.special.egg.hasOwnProperty(year) && !global.special.egg[year].hasOwnProperty("egg13")) {
      global.special.egg[year]["egg13"] = false;
      global.special.egg[year]["egg14"] = false;
      global.special.egg[year]["egg15"] = false;
    }
    if (global.special.egg.hasOwnProperty(year) && !global.special.egg[year].hasOwnProperty("egg16")) {
      global.special.egg[year]["egg16"] = false;
      global.special.egg[year]["egg17"] = false;
      global.special.egg[year]["egg18"] = false;
    }
    let f = Math.floor, G = year % 19, C = f(year / 100), H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30, I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11)), J = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7, L = I - J, month = 3 + f((L + 40) / 44), day = L + 28 - 31 * f(month / 4);
    let easter2 = {
      date: [month - 1, day],
      active: false,
      endDate: [month - 1, day],
      hint: false,
      hintDate: [month - 1, day],
      solve: false,
      solveDate: [month - 1, day]
    };
    if (global.settings.boring) {
      return easter2;
    }
    easter2.endDate[1] += 10;
    if (easter2.endDate[0] === 2 && easter2.endDate[1] > 31 || easter2.endDate[0] === 3 && easter2.endDate[1] > 30) {
      easter2.endDate[1] -= easter2.endDate[0] === 2 ? 31 : 30;
      easter2.endDate[0]++;
    }
    easter2.hintDate[1] += 1;
    if (easter2.hintDate[0] === 2 && easter2.hintDate[1] > 31 || easter2.hintDate[0] === 3 && easter2.hintDate[1] > 30) {
      easter2.hintDate[1] -= easter2.hintDate[0] === 2 ? 31 : 30;
      easter2.hintDate[0]++;
    }
    easter2.solveDate[1] += 3;
    if (easter2.solveDate[0] === 2 && easter2.solveDate[1] > 31 || easter2.solveDate[0] === 3 && easter2.solveDate[1] > 30) {
      easter2.solveDate[1] -= easter2.solveDate[0] === 2 ? 31 : 30;
      easter2.solveDate[0]++;
    }
    let cur_day = date2.getDate();
    let cur_month = date2.getMonth();
    const isAfterBeginning = cur_month > easter2.date[0] || cur_month === easter2.date[0] && cur_day >= easter2.date[1];
    const isBeforeEnd = cur_month < easter2.endDate[0] || cur_month === easter2.endDate[0] && cur_day <= easter2.endDate[1];
    if (isAfterBeginning && isBeforeEnd) {
      easter2.active = true;
      if (cur_month >= easter2.hintDate[0] && cur_day >= easter2.hintDate[1] && cur_month <= easter2.endDate[0] && cur_day <= easter2.endDate[1]) {
        easter2.hint = true;
      }
      if (cur_month >= easter2.solveDate[0] && cur_day >= easter2.solveDate[1] && cur_month <= easter2.endDate[0] && cur_day <= easter2.endDate[1]) {
        easter2.solve = true;
      }
    }
    return easter2;
  }
  function getHalloween() {
    const date2 = /* @__PURE__ */ new Date();
    let year = date2.getFullYear();
    if (!global.special.trick.hasOwnProperty(year)) {
      global.special.trick[year] = {
        trick1: false,
        trick2: false,
        trick3: false,
        trick4: false,
        trick5: false,
        trick6: false,
        trick7: false,
        treat1: false,
        treat2: false,
        treat3: false,
        treat4: false,
        treat5: false,
        treat6: false,
        treat7: false
      };
    }
    let halloween = {
      date: [9, 28],
      active: false,
      endDate: [10, 4],
      hint: false,
      hintDate: [9, 29],
      solve: false,
      solveDate: [9, 31]
    };
    if (global.settings.boring) {
      return halloween;
    }
    let start = /* @__PURE__ */ new Date(`${halloween.date[0] + 1}/${halloween.date[1]}/${year}`);
    let end = /* @__PURE__ */ new Date(`${halloween.endDate[0] + 1}/${halloween.endDate[1]}/${year}`);
    if (date2 >= start && date2 <= end) {
      halloween.active = true;
      let hint = /* @__PURE__ */ new Date(`${halloween.hintDate[0] + 1}/${halloween.hintDate[1]}/${year}`);
      if (date2 >= hint && date2 <= end) {
        halloween.hint = true;
      }
      let sol = /* @__PURE__ */ new Date(`${halloween.solveDate[0] + 1}/${halloween.solveDate[1]}/${year}`);
      if (date2 >= sol && date2 <= end) {
        halloween.solve = true;
      }
    }
    return halloween;
  }
  function shrineBonusActive() {
    return global.race["magnificent"] && global.city.hasOwnProperty("shrine") && global.city.shrine.count > 0;
  }
  function getShrineBonus(type) {
    let shrine_bonus = {
      mult: 1,
      add: 0,
      active: false
    };
    if (shrineBonusActive()) {
      switch (type) {
        case "metal":
          let metal = global.city.shrine.metal;
          if (global.city.calendar.moon >= 7 && global.city.calendar.moon < 14 || global.city.calendar.moon === 14) {
            metal += global.city.shrine.cycle;
          }
          shrine_bonus.mult += +(metal / 100 * traits.magnificent.vars()[3]);
          if (metal > 0) {
            shrine_bonus.active = true;
          }
          break;
        case "tax":
          let tax = global.city.shrine.tax;
          if (global.city.calendar.moon >= 21 || global.city.calendar.moon === 14) {
            tax += global.city.shrine.cycle;
          }
          shrine_bonus.mult += +(tax / 100 * traits.magnificent.vars()[2]);
          if (tax > 0) {
            shrine_bonus.active = true;
          }
          break;
        case "know":
          let know = global.city.shrine.know;
          if (global.city.calendar.moon > 14 && global.city.calendar.moon <= 21 || global.city.calendar.moon === 14) {
            know += global.city.shrine.cycle;
          }
          shrine_bonus.add += +(know * traits.magnificent.vars()[0]);
          shrine_bonus.mult += +(know * traits.magnificent.vars()[1] / 100);
          if (know > 0) {
            shrine_bonus.active = true;
          }
          break;
        case "morale":
          let morale = global.city.shrine.morale;
          if (global.city.calendar.moon > 0 && global.city.calendar.moon <= 7 || global.city.calendar.moon === 14) {
            morale += global.city.shrine.cycle;
          }
          shrine_bonus.add += morale * traits.magnificent.vars()[4];
          if (morale > 0) {
            shrine_bonus.active = true;
          }
          break;
        default:
          break;
      }
    }
    return shrine_bonus;
  }
  var valAdjust = {
    promiscuous: false,
    revive: false,
    fast_growth: false,
    spores: false,
    terrifying: false,
    fibroblast: true,
    hivemind: true,
    imitation: true,
    elusive: true,
    chameleon: true,
    blood_thirst: true,
    selenophobia: true,
    hooved: true,
    anthropophagite: true,
    unfathomable: false,
    darkness: false,
    living_tool: false,
    living_materials: true,
    blurry: true,
    playful: true,
    ghostly: true,
    environmentalist: true,
    catnip: true,
    anise: true
  };
  function getTraitVals(trait, rank, species) {
    let vals = traits[trait].hasOwnProperty("vars") ? traits[trait].vars(rank) : [];
    if (valAdjust.hasOwnProperty(trait)) {
      if (trait === "fibroblast") {
        vals = [vals[0] * 5];
      } else if (trait === "hivemind" && global.race["high_pop"]) {
        vals = [vals[0] * traits.high_pop.vars()[0]];
      } else if (trait === "imitation") {
        vals.push(races[global.race["srace"] || "protoplasm"].name);
      } else if (trait === "elusive") {
        vals = [Math.round((1 / 30 / (1 / (30 + vals[0])) - 1) * 100)];
      } else if (trait === "chameleon") {
        vals = [vals[0], Math.round((1 / 30 / (1 / (30 + vals[1])) - 1) * 100)];
      } else if (trait === "blood_thirst") {
        vals = [Math.ceil(Math.log2(vals[0]))];
      } else if (trait === "selenophobia") {
        vals = [14 - vals[0], vals[0]];
      } else if (trait === "hooved") {
        vals.unshift(hoovedRename(false, species));
      } else if (trait === "anthropophagite") {
        vals = [vals[0] * 1e4];
      } else if (trait === "living_materials") {
        vals = [global.resource.Lumber.name, global.resource.Plywood.name, global.resource.Furs.name, loc("resource_Amber_name")];
      } else if (trait === "environmentalist") {
        let coal = -actions.city.coal_power.powered(true);
        let oil = -actions.city.oil_power.powered(true);
        vals = [coal + vals[0], oil + vals[0] - 1, oil + vals[0] + 1, coal, oil, vals[1]];
      } else if (trait === "blurry") {
        if (global.race["warlord"]) {
          vals = [+((100 / (100 - vals[0]) - 1) * 100).toFixed(1)];
        }
      } else if (trait === "playful") {
        if (global.race["warlord"]) {
          vals = [vals[0] * 100, global.resource.Furs.name];
        }
      } else if (trait === "ghostly") {
        if (global.race["warlord"]) {
          vals = [vals[0], +((vals[1] - 1) * 100).toFixed(0), global.resource.Soul_Gem.name];
        }
      } else if (trait === "catnip" || trait === "anise") {
        vals = rank <= 2 ? [] : rank === 3 ? [vals[0]] : [vals[0], vals[1]];
      } else if (!valAdjust[trait]) {
        vals = [];
      }
    } else if (trait === "elemental") {
      switch (traits.elemental.vars(rank)[0]) {
        case "electric":
          vals = [loc(`element_electric`), traits.elemental.vars(rank)[1], traits.elemental.vars(rank)[5]];
          break;
        case "acid":
          vals = [loc(`element_acid`), traits.elemental.vars(rank)[2], traits.elemental.vars(rank)[5]];
          break;
        case "fire":
          vals = [loc(`element_fire`), traits.elemental.vars(rank)[3], traits.elemental.vars(rank)[5]];
          break;
        case "frost":
          vals = [loc(`element_frost`), traits.elemental.vars(rank)[4], traits.elemental.vars(rank)[5], loc("city_biolab")];
          break;
      }
    }
    return vals;
  }
  function hoovedRename(style, species = global.race.species) {
    let type = species === global.race.species ? global.race.maintype || races[species].type : races[species].type;
    if (species === "sludge") {
      return style ? "craft" : loc("resource_Beaker_name");
    } else if (species === "cath") {
      return style ? "craft" : loc("resource_Box_name");
    } else if (species === "wolven") {
      return style ? "craft" : loc("resource_ChewToy_name");
    } else if (species === "dracnid") {
      return style ? "craft" : loc("resource_Hoard_name");
    } else if (species === "seraph") {
      return style ? "forge" : loc("resource_Halo_name");
    } else if (species === "cyclops") {
      return style ? "craft" : loc("resource_Monocle_name");
    } else if (species === "kobold") {
      return style ? "craft" : loc("resource_Candle_name");
    } else if (species === "tuskin") {
      return style ? "craft" : loc("resource_Goggles_name");
    } else if (species === "sharkin") {
      return style ? "craft" : loc("resource_ToothSharpener_name");
    } else if (species === "beholder") {
      return style ? "craft" : loc("resource_ContactLens_name");
    } else if (species === "djinn") {
      return style ? "craft" : loc("resource_Bottle_name");
    } else if (races[species].type === "humanoid") {
      return style ? "craft" : loc("resource_Sandals_name");
    } else if (races[species].type === "avian") {
      return style ? "craft" : loc("resource_Perch_name");
    } else if (races[species].type === "plant") {
      return style ? "craft" : loc("resource_Planter_name");
    } else if (races[species].type === "fungi") {
      return style ? "craft" : loc("resource_DampCloth_name");
    } else if (races[species].type === "reptilian") {
      return style ? "craft" : loc("resource_HeatRock_name");
    } else if (races[species].type === "fey") {
      return style ? "craft" : loc("resource_PixieDust_name");
    } else if (races[species].type === "synthetic") {
      return style ? "craft" : loc("resource_Battery_name");
    } else {
      return style ? "forge" : loc("resource_Horseshoe_name");
    }
  }
  var traitExtra = {
    infiltrator: [
      loc(`wiki_trait_effect_infiltrator_ex1`),
      loc(`wiki_trait_effect_infiltrator_ex2`, [
        [
          `<span class="has-text-warning">${loc("tech_steel")}</span>`,
          `<span class="has-text-warning">${loc("tech_electricity")}</span>`,
          `<span class="has-text-warning">${loc("tech_electronics")}</span>`,
          `<span class="has-text-warning">${loc("tech_fission")}</span>`,
          `<span class="has-text-warning">${loc("tech_rocketry")}</span>`,
          `<span class="has-text-warning">${loc("tech_artificial_intelligence")}</span>`,
          `<span class="has-text-warning">${loc("tech_quantum_computing")}</span>`,
          `<span class="has-text-warning">${loc("tech_virtual_reality")}</span>`,
          `<span class="has-text-warning">${loc("tech_shields")}</span>`,
          `<span class="has-text-warning">${loc("tech_ai_core")}</span>`,
          `<span class="has-text-warning">${loc("tech_graphene_processing")}</span>`,
          `<span class="has-text-warning">${loc("tech_nanoweave")}</span>`,
          `<span class="has-text-warning">${loc("tech_orichalcum_analysis")}</span>`,
          `<span class="has-text-warning">${loc("tech_infernium_fuel")}</span>`
        ].join(", ")
      ])
    ],
    heavy: [
      loc(`wiki_trait_effect_heavy_ex1`, [rName("Stone"), rName("Cement"), rName("Wrought_Iron")])
    ],
    sniper: [
      loc(`wiki_trait_effect_sniper_ex1`)
    ],
    hooved: [
      function(opts) {
        return loc(`wiki_trait_effect_hooved_ex1`, [hoovedRename(false, opts.species)]);
      },
      loc(`wiki_trait_effect_hooved_ex2`, [
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Lumber") ? global.resource.Lumber.name : loc("resource_Lumber_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Copper") ? global.resource.Copper.name : loc("resource_Copper_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Iron") ? global.resource.Iron.name : loc("resource_Iron_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Steel") ? global.resource.Steel.name : loc("resource_Steel_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Adamantite") ? global.resource.Adamantite.name : loc("resource_Adamantite_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Orichalcum") ? global.resource.Orichalcum.name : loc("resource_Orichalcum_name")}</span>`,
        12,
        75,
        150,
        500,
        5e3
      ]),
      loc(`wiki_trait_effect_hooved_ex3`),
      function(opts) {
        return loc(`wiki_trait_effect_hooved_ex4`, [`<span class="has-text-warning">${5}</span>`, hoovedRename(false, opts.species)]);
      },
      loc(`wiki_trait_effect_hooved_ex5`, [
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Lumber") ? global.resource.Lumber.name : loc("resource_Lumber_name")}</span>`,
        `<span class="has-text-warning">${global.resource.hasOwnProperty("Copper") ? global.resource.Copper.name : loc("resource_Copper_name")}</span>`
      ])
    ],
    instinct: [
      loc(`wiki_trait_effect_instinct_ex1`, [6.67, loc("galaxy_chthonian"), 10])
    ],
    logical: [
      loc(`wiki_trait_effect_logical_ex1`, [
        global.tech.hasOwnProperty("science") ? global.tech.science : 0,
        global.tech.hasOwnProperty("high_tech") ? global.tech.high_tech : 0
      ])
    ],
    high_pop: [
      loc(`wiki_trait_effect_high_pop_ex1`)
    ],
    flier: [
      loc(`wiki_trait_effect_flier_ex1`)
    ],
    unfathomable: [
      loc(`wiki_trait_effect_unfathomable_ex1`),
      loc(`wiki_trait_effect_unfathomable_ex2`)
    ]
  };
  function rName(r) {
    let res = global.hasOwnProperty("resource") && global.resource.hasOwnProperty(r) ? global.resource[r].name : loc(`resource_${r}_name`);
    return `<span class="has-text-warning">${res}</span>`;
  }
  var altTraitDesc = {
    befuddle: "warlord",
    blurry: "warlord",
    ghostly: "warlord",
    playful: "warlord"
  };
  function getTraitDesc(info, trait, opts) {
    let fanatic = opts["fanatic"] || false;
    let tpage = opts["tpage"] || false;
    let rpage = opts["rpage"] || false;
    let trank = opts["trank"] || false;
    let wiki = opts["wiki"] || false;
    let species = opts["species"];
    let rank = "";
    let traitName = traitSkin("name", trait, species);
    let traitDesc = traitSkin("desc", trait, species);
    if (tpage && ["genus", "major"].includes(traits[trait].type)) {
      rank = `<span><span role="button" @click="down()">&laquo;</span><span class="has-text-warning">${loc(`wiki_trait_rank`)} {{ rank }}</span><span role="button" @click="up()">&raquo;</span></span>`;
    }
    if (tpage || rpage) {
      info.append(`<div class="type"><h2 class="has-text-warning">${traitName}</h2>${rank}</div>`);
      if (tpage && traits[trait].hasOwnProperty("val")) {
        info.append(`<div class="type has-text-caution">${loc(`wiki_trait_${traits[trait].type}`)}<span>${loc(`wiki_trait_value`, [traits[trait].val])}</span></div>`);
      } else {
        info.append(`<div class="type has-text-caution">${loc(`wiki_trait_${traits[trait].type}`)}</div>`);
      }
      if (fanatic) {
        info.append(`<div class="has-text-danger">${loc(`wiki_trait_fanaticism`, [fanatic])}</div>`);
      }
    }
    info.append(`<div class="desc">${traitDesc}</div>`);
    let color = "warning";
    if (traits[trait].hasOwnProperty("val")) {
      color = traits[trait].val >= 0 ? "success" : "danger";
    }
    if (tpage && ["genus", "major"].includes(traits[trait].type)) {
      info.append(`<div class="has-text-${color} effect" v-html="getTraitDesc(rank)"></div>`);
    } else {
      if (wiki || global.stats.feat["journeyman"] && global.stats.achieve["seeder"] && global.stats.achieve.seeder.l > 0) {
        let trait_desc = "";
        if (trait === "elemental") {
          trait_desc = loc(`wiki_trait_effect_${trait}_${traits.elemental.vars()[0]}`, getTraitVals(trait, trank, species));
        } else if (["catnip", "anise"].includes(trait)) {
          let rank2 = trank;
          trait_desc = loc(`wiki_trait_effect_${trait}${rank2}`, getTraitVals(trait, trank, species));
        } else {
          if (global?.race?.universe === "evil" && global?.civic?.govern?.type != "theocracy" && ["spiritual", "blasphemous"].includes(trait)) {
            let alt_trait = trait === "spiritual" ? "manipulator" : "blasphemous_evil";
            trait_desc = loc(`wiki_trait_effect_${alt_trait}`, getTraitVals(trait, trank, species));
          } else {
            let key = altTraitDesc[trait] && global.race.hasOwnProperty(altTraitDesc[trait]) ? altTraitDesc[trait] : "effect";
            trait_desc = loc(`wiki_trait_${key}_${trait}`, getTraitVals(trait, trank, species));
          }
        }
        info.append(`<div class="has-text-${color} effect">${trait_desc}</div>`);
      }
    }
    if (traitExtra[trait] && (tpage || rpage)) {
      traitExtra[trait].forEach(function(te) {
        if (typeof te !== "string") {
          te = te(opts);
        }
        info.append(`<div class="effect">${te}</div>`);
      });
    }
    if (tpage && ["genus", "major"].includes(traits[trait].type)) {
      let data = { rank: global.race[trait] || 1 };
      vBind({
        el: `#${traits[trait].type}_${trait}`,
        data,
        methods: {
          getTraitDesc(rk) {
            if (trait === "elemental") {
              return loc(`wiki_trait_effect_${trait}_${traits.elemental.vars()[0]}`, getTraitVals(trait, rk, species));
            } else if (["catnip", "anise"].includes(trait)) {
              return loc(`wiki_trait_effect_${trait}${rk}`, getTraitVals(trait, rk, species));
            } else if (global?.race?.universe === "evil" && global?.civic?.govern?.type != "theocracy" && ["spiritual", "blasphemous"].includes(trait)) {
              let alt_trait = trait === "spiritual" ? "manipulator" : "blasphemous_evil";
              return loc(`wiki_trait_effect_${alt_trait}`, getTraitVals(trait, rk, species));
            }
            let key = altTraitDesc[trait] && global.race.hasOwnProperty(altTraitDesc[trait]) ? altTraitDesc[trait] : "effect";
            return loc(`wiki_trait_${key}_${trait}`, getTraitVals(trait, rk, species));
          },
          up() {
            switch (data.rank) {
              case 0.1:
                data.rank = 0.25;
                break;
              case 0.25:
                data.rank = 0.5;
                break;
              case 0.5:
                data.rank = 1;
                break;
              case 1:
                data.rank = 2;
                break;
              case 2:
                data.rank = 3;
                break;
              case 3:
                data.rank = 4;
                break;
              case 4:
                data.rank = 4;
                break;
            }
          },
          down() {
            switch (data.rank) {
              case 0.1:
                data.rank = 0.1;
                break;
              case 0.25:
                data.rank = 0.1;
                break;
              case 0.5:
                data.rank = 0.25;
                break;
              case 1:
                data.rank = 0.5;
                break;
              case 2:
                data.rank = 1;
                break;
              case 3:
                data.rank = 2;
                break;
              case 4:
                data.rank = 3;
                break;
            }
          }
        }
      });
    }
  }

  // src/achieve.js
  var achieve_list = {
    misc: [
      "apocalypse",
      "ascended",
      "dreaded",
      "anarchist",
      "second_evolution",
      "blackhole",
      "warmonger",
      "red_tactics",
      "pacifist",
      "neutralized",
      "paradise",
      "scrooge",
      "madagascar_tree",
      "godwin",
      "laser_shark",
      "infested",
      "mass_starvation",
      "colonist",
      "world_domination",
      "illuminati",
      "syndicate",
      "cult_of_personality",
      "doomed",
      "pandemonium",
      "blood_war",
      "landfill",
      "seeder",
      "miners_dream",
      "shaken",
      "blacken_the_sun",
      "trade",
      "resonance",
      "enlightenment",
      "gladiator",
      "corrupted",
      "red_dead",
      "godslayer",
      "traitor",
      "doppelganger"
    ],
    species: [
      "mass_extinction",
      "extinct_human",
      "extinct_elven",
      "extinct_orc",
      "extinct_cath",
      "extinct_wolven",
      "extinct_vulpine",
      "extinct_centaur",
      "extinct_rhinotaur",
      "extinct_capybara",
      "extinct_kobold",
      "extinct_goblin",
      //'extinct_rhinotaur','extinct_capybara','extinct_bearkin','extinct_porkenari','extinct_hedgeoken','extinct_kobold','extinct_goblin',
      "extinct_gnome",
      "extinct_ogre",
      "extinct_cyclops",
      "extinct_troll",
      "extinct_tortoisan",
      "extinct_gecko",
      "extinct_slitheryn",
      "extinct_arraak",
      "extinct_pterodacti",
      "extinct_dracnid",
      "extinct_entish",
      "extinct_cacti",
      "extinct_pinguicula",
      "extinct_sporgar",
      "extinct_shroomi",
      "extinct_moldling",
      "extinct_mantis",
      "extinct_scorpid",
      "extinct_antid",
      "extinct_sharkin",
      "extinct_octigoran",
      "extinct_dryad",
      "extinct_satyr",
      "extinct_phoenix",
      "extinct_salamander",
      "extinct_yeti",
      "extinct_wendigo",
      "extinct_tuskin",
      "extinct_kamel",
      "extinct_balorg",
      "extinct_imp",
      "extinct_seraph",
      "extinct_unicorn",
      "extinct_synth",
      "extinct_nano",
      "extinct_ghast",
      "extinct_shoggoth",
      "extinct_dwarf",
      "extinct_raccoon",
      "extinct_lichen",
      "extinct_wyvern",
      "extinct_beholder",
      "extinct_djinn",
      "extinct_narwhal",
      "extinct_bombardier",
      "extinct_nephilim",
      "extinct_junker",
      "extinct_sludge",
      "extinct_ultra_sludge",
      "extinct_custom",
      "extinct_hybrid"
    ],
    genus: [
      "creator",
      "genus_humanoid",
      "genus_carnivore",
      "genus_herbivore",
      "genus_small",
      "genus_giant",
      "genus_reptilian",
      "genus_avian",
      //'creator','genus_humanoid','genus_carnivore','genus_omnivore','genus_herbivore','genus_small','genus_giant','genus_reptilian','genus_avian',
      "genus_insectoid",
      "genus_plant",
      "genus_fungi",
      "genus_aquatic",
      "genus_fey",
      "genus_heat",
      "genus_polar",
      "genus_sand",
      "genus_demonic",
      "genus_angelic",
      "genus_synthetic",
      "genus_eldritch"
    ],
    planet: [
      "explorer",
      "biome_grassland",
      "biome_oceanic",
      "biome_forest",
      "biome_desert",
      "biome_volcanic",
      "biome_tundra",
      "biome_savanna",
      "biome_swamp",
      "biome_ashland",
      "biome_taiga",
      "biome_hellscape",
      "biome_eden",
      "atmo_toxic",
      "atmo_mellow",
      "atmo_rage",
      "atmo_stormy",
      "atmo_ozone",
      "atmo_magnetic",
      "atmo_trashed",
      "atmo_elliptical",
      "atmo_flare",
      "atmo_dense",
      "atmo_unstable",
      "atmo_permafrost",
      "atmo_retrograde",
      "atmo_kamikaze"
    ],
    universe: [
      "vigilante",
      "squished",
      "double_density",
      "cross",
      "macro",
      "marble",
      "heavyweight",
      "whitehole",
      "heavy",
      "canceled",
      "eviltwin",
      "microbang",
      "pw_apocalypse",
      "fullmetal",
      "pass",
      "soul_sponge",
      "nightmare",
      "escape_velocity",
      "what_is_best"
    ],
    challenge: [
      "joyless",
      "steelen",
      "dissipated",
      "technophobe",
      "wheelbarrow",
      "iron_will",
      "failed_history",
      "banana",
      "pathfinder",
      "ashanddust",
      "exodus",
      "obsolete",
      "bluepill",
      "retired",
      "gross",
      "lamentis",
      "overlord",
      `adam_eve`,
      "endless_hunger"
    ]
  };
  var flairData = {
    colonist: [flib("name")]
  };
  var descData = {
    trade: [750, 50]
  };
  var achievements = {};
  Object.keys(achieve_list).forEach(function(type) {
    achieve_list[type].forEach((achieve) => achievements[achieve] = {
      name: loc(`achieve_${achieve}_name`),
      desc: descData[achieve] ? loc(`achieve_${achieve}_desc`, descData[achieve]) : loc(`achieve_${achieve}_desc`),
      flair: flairData[achieve] ? loc(`achieve_${achieve}_flair`, flairData[achieve]) : loc(`achieve_${achieve}_flair`),
      type
    });
  });
  var feats = {
    utopia: {
      name: loc("feat_utopia_name"),
      desc: loc("feat_utopia_desc"),
      flair: loc("feat_utopia_flair")
    },
    take_no_advice: {
      name: loc("feat_take_no_advice_name"),
      desc: loc("feat_take_no_advice_desc"),
      flair: loc("feat_take_no_advice_flair")
    },
    ill_advised: {
      name: loc("feat_ill_advised_name"),
      desc: loc("feat_ill_advised_desc"),
      flair: loc("feat_ill_advised_flair")
    },
    organ_harvester: {
      name: loc("feat_organ_harvester_name"),
      desc: loc("feat_organ_harvester_desc"),
      flair: loc("feat_organ_harvester_flair")
    },
    the_misery: {
      name: loc("feat_the_misery_name"),
      desc: loc("feat_the_misery_desc"),
      flair: loc("feat_the_misery_flair")
    },
    energetic: {
      name: loc("feat_energetic_name"),
      desc: loc("feat_energetic_desc"),
      flair: loc("feat_energetic_flair")
    },
    garbage_pie: {
      name: loc("feat_garbage_pie_name"),
      desc: loc("feat_garbage_pie_desc"),
      flair: loc("feat_garbage_pie_flair")
    },
    finish_line: {
      name: loc("feat_finish_line_name"),
      desc: loc("feat_finish_line_desc"),
      flair: loc("feat_finish_line_flair")
    },
    blank_slate: {
      name: loc("feat_blank_slate_name"),
      desc: loc("feat_blank_slate_desc"),
      flair: loc("feat_blank_slate_flair")
    },
    supermassive: {
      name: loc("feat_supermassive_name"),
      desc: loc("feat_supermassive_desc"),
      flair: loc("feat_supermassive_flair")
    },
    steelem: {
      name: loc("feat_steelem_name"),
      desc: loc("feat_steelem_desc"),
      flair: loc("feat_steelem_flair")
    },
    banana: {
      name: loc("feat_banana_name"),
      desc: loc("feat_banana_desc", [500, 500]),
      flair: loc("feat_banana_flair")
    },
    rocky_road: {
      name: loc("feat_rocky_road_name"),
      desc: loc("feat_rocky_road_desc"),
      flair: loc("feat_rocky_road_flair")
    },
    demon_slayer: {
      name: loc("feat_demon_slayer_name"),
      desc: loc("feat_demon_slayer_desc"),
      flair: loc("feat_demon_slayer_flair")
    },
    equilibrium: {
      name: loc("feat_equilibrium_name"),
      desc: loc("feat_equilibrium_desc"),
      flair: loc("feat_equilibrium_flair")
    },
    planned_obsolescence: {
      name: loc("feat_planned_obsolescence_name"),
      desc: loc("feat_planned_obsolescence_desc"),
      flair: loc("feat_planned_obsolescence_flair")
    },
    digital_ascension: {
      name: loc("feat_digital_ascension_name"),
      desc: loc("feat_digital_ascension_desc"),
      flair: loc("feat_digital_ascension_flair")
    },
    grand_death_tour: {
      name: loc("feat_grand_death_tour_name"),
      desc: loc("feat_grand_death_tour_desc", [6]),
      flair: loc("feat_grand_death_tour_flair")
    },
    novice: {
      name: loc("feat_novice_name"),
      desc: loc("feat_achievement_hunter_desc", [10]),
      flair: loc("feat_novice_flair")
    },
    journeyman: {
      name: loc("feat_journeyman_name"),
      desc: loc("feat_achievement_hunter_desc", [25]),
      flair: loc("feat_journeyman_flair")
    },
    adept: {
      name: loc("feat_adept_name"),
      desc: loc("feat_achievement_hunter_desc", [50]),
      flair: loc("feat_adept_flair")
    },
    master: {
      name: loc("feat_master_name"),
      desc: loc("feat_achievement_hunter_desc", [75]),
      flair: loc("feat_master_flair")
    },
    grandmaster: {
      name: loc("feat_grandmaster_name"),
      desc: loc("feat_achievement_hunter_desc", [100]),
      flair: loc("feat_grandmaster_flair")
    },
    god: {
      name: loc("feat_god_name"),
      desc: loc("feat_achievement_hunter_desc", [150]),
      flair: loc("feat_god_flair")
    },
    nephilim: {
      name: loc("feat_nephilim_name"),
      desc: loc("feat_nephilim_desc"),
      flair: loc("feat_nephilim_flair")
    },
    twisted: {
      name: loc("feat_twisted_name"),
      desc: loc("feat_twisted_desc"),
      flair: loc("feat_twisted_flair")
    },
    slime_lord: {
      name: loc("feat_slime_lord_name"),
      desc: loc("feat_slime_lord_desc"),
      flair: loc("feat_slime_lord_flair")
    },
    annihilation: {
      name: loc("feat_annihilation_name"),
      desc: loc("feat_annihilation_desc"),
      flair: loc("feat_annihilation_flair")
    },
    immortal: {
      name: loc("feat_immortal_name"),
      desc: loc("feat_immortal_desc"),
      flair: loc("feat_immortal_flair")
    },
    wish: {
      name: loc("feat_wish_name"),
      desc: loc("feat_wish_desc"),
      flair: loc("feat_wish_flair")
    },
    friday: {
      name: loc("feat_friday_name"),
      desc: loc("feat_friday_desc"),
      flair: loc("feat_friday_flair")
    },
    valentine: {
      name: loc("feat_love_name"),
      desc: loc("feat_love_desc"),
      flair: loc("feat_love_flair")
    },
    leprechaun: {
      name: loc("feat_leprechaun_name"),
      desc: loc("feat_leprechaun_desc"),
      flair: loc("feat_leprechaun_flair")
    },
    easter: {
      name: loc("feat_easter_name"),
      desc: loc("feat_easter_desc"),
      flair: loc("feat_easter_flair")
    },
    egghunt: {
      name: loc("feat_egghunt_name"),
      desc: loc("feat_egghunt_desc"),
      flair: loc("feat_egghunt_flair")
    },
    launch_day: {
      name: loc("feat_launch_day_name"),
      desc: loc("feat_launch_day_desc"),
      flair: loc("feat_launch_day_flair")
    },
    solstice: {
      name: loc("feat_solstice_name"),
      desc: loc("feat_solstice_desc"),
      flair: loc("feat_solstice_flair")
    },
    firework: {
      name: loc("feat_firework_name"),
      desc: loc("feat_firework_desc"),
      flair: loc("feat_firework_flair")
    },
    halloween: {
      name: loc("feat_boo_name"),
      desc: loc("feat_boo_desc"),
      flair: loc("feat_boo_flair")
    },
    trickortreat: {
      name: loc("feat_trickortreat_name"),
      desc: loc("feat_trickortreat_desc"),
      flair: loc("feat_trickortreat_flair")
    },
    thanksgiving: {
      name: loc("feat_gobble_gobble_name"),
      desc: loc("feat_gobble_gobble_desc"),
      flair: loc("feat_gobble_gobble_flair")
    },
    xmas: {
      name: loc("feat_xmas_name"),
      desc: loc("feat_xmas_desc"),
      flair: loc("feat_xmas_flair")
    },
    fool: {
      name: loc("feat_fool_name"),
      desc: loc("feat_fool_desc"),
      flair: loc("feat_fool_flair")
    }
  };
  {
    let al = universeLevel();
    set_alevel(al.aLvl);
    set_ulevel(al.uLvl);
  }
  function universeLevel(universe) {
    universe = universe || global.race.universe;
    let affix = universeAffix(universe);
    let lvl = 0;
    let ulvl = 0;
    Object.keys(achievements).forEach(function(achievement) {
      if (global.stats.achieve[achievement]) {
        lvl += global.stats.achieve[achievement].l > 5 ? 5 : global.stats.achieve[achievement].l;
        if (global.stats.achieve[achievement][affix]) {
          ulvl += global.stats.achieve[achievement][affix] > 5 ? 5 : global.stats.achieve[achievement][affix];
        }
      }
    });
    return { aLvl: lvl, uLvl: ulvl };
  }
  function universeAffix(universe) {
    universe = universe || global.race.universe;
    switch (universe) {
      case "evil":
        return "e";
      case "antimatter":
        return "a";
      case "heavy":
        return "h";
      case "micro":
        return "m";
      case "magic":
        return "mg";
      default:
        return "l";
    }
  }
  function unlockAchieve(achievement, small, rank, universe) {
    if (global.race.universe !== "micro" && small === true) {
      return false;
    }
    if (!global.settings.msgFilters.achievements.unlocked) {
      global.settings.msgFilters.achievements.unlocked = true;
      global.settings.msgFilters.achievements.vis = true;
    }
    let a_level = alevel();
    let unlock = false;
    let redraw = false;
    if (typeof rank === "undefined" || rank > a_level) {
      rank = a_level;
    }
    let upgrade = true;
    if (typeof global.stats.achieve[achievement] === "undefined") {
      global.stats.achieve[achievement] = { l: 0 };
      upgrade = false;
    }
    if (global.race.universe === "micro" && small === true || global.race.universe !== "micro" && small !== true) {
      if (global.stats.achieve[achievement] && global.stats.achieve[achievement].l < rank) {
        global.settings.showAchieve = true;
        global.stats.achieve[achievement].l = rank;
        messageQueue(loc(upgrade ? "achieve_unlock_achieve_upgrade" : "achieve_unlock_achieve", [achievements[achievement].name]), "special", false, ["achievements"]);
        redraw = true;
        unlock = true;
      }
    }
    if (global.stats.achieve[achievement] && universe !== "l") {
      let u_affix = universe || universeAffix();
      if (!global.stats.achieve[achievement][u_affix] || global.stats.achieve[achievement][u_affix] && global.stats.achieve[achievement][u_affix] < rank) {
        let i_upgrade = global.stats.achieve[achievement][u_affix] ? true : false;
        global.stats.achieve[achievement][u_affix] = rank;
        redraw = true;
        if (!unlock) {
          messageQueue(loc(i_upgrade ? "achieve_unlock_achieve_icon_upgrade" : "achieve_unlock_achieve_icon", [achievements[achievement].name]), "special", false, ["achievements"]);
        }
      }
    }
    if (redraw) {
      calc_mastery(true);
      drawPerks();
      drawAchieve();
    }
    return unlock;
  }
  function unlockFeat(feat, small, rank) {
    if (global.race.universe === "micro" && small !== true || global.race.universe !== "micro" && small === true) {
      return false;
    }
    if (!global.settings.msgFilters.achievements.unlocked) {
      global.settings.msgFilters.achievements.unlocked = true;
      global.settings.msgFilters.achievements.vis = true;
    }
    let a_level = alevel();
    if (typeof rank === "undefined" || rank > a_level) {
      rank = a_level;
    }
    if (!global.stats.feat[feat] || global.stats.feat[feat] && global.stats.feat[feat] < rank) {
      let upgrade = global.stats.feat[feat] ? true : false;
      global.settings.showAchieve = true;
      global.stats.feat[feat] = rank;
      messageQueue(loc(upgrade ? "feat_upgraded" : "feat_unlocked", [feats[feat].name]), "special", false, ["achievements"]);
      drawPerks();
      drawAchieve();
      return true;
    }
    return false;
  }
  function setupStats2() {
    clearElement($("#achieve"));
    clearElement($("#stats"));
    let stats = $('<div id="statsPanel"></div>');
    $("#stats").append(stats);
    let perks = $('<div id="perksPanel"></div>');
    $("#perks").append(perks);
    let achieve = $('<div id="achievePanel"></div>');
    $("#achieve").append(achieve);
    drawStats();
    drawPerks();
    if ($(`body`).hasClass("fool")) {
      drawAchieve({ fool: true });
    } else {
      drawAchieve();
    }
  }
  function drawAchieve(args) {
    clearElement($("#achievePanel"));
    let achieve = $("#achievePanel");
    let earned = 0;
    let total = 0;
    let level = 0;
    let ulevel = 0;
    let affix = universeAffix();
    let fool = typeof args === "object" && args["fool"] ? args.fool : false;
    Object.keys(achievements).forEach(function(achievement) {
      let baseIcon = getBaseIcon(achievement, "achievement");
      total++;
      if (global.stats.achieve[achievement]) {
        earned++;
        level += global.stats.achieve[achievement].l > 5 ? 5 : global.stats.achieve[achievement].l;
        if (global.stats.achieve[achievement][affix]) {
          ulevel += global.stats.achieve[achievement][affix] > 5 ? 5 : global.stats.achieve[achievement][affix];
        }
        let emblem = format_emblem(achievement, 16, baseIcon, fool);
        if (fool && global.stats.achieve[achievement].l > 1 || !fool) {
          achieve.append($(`<b-tooltip :label="flair('${achievement}')" position="is-bottom" size="is-small" animated><div class="achievement"><span class="has-text-warning">${achievements[achievement].name}</span><span>${achievements[achievement].desc}</span>${emblem}</div></b-tooltip>`));
        } else if (fool && global.stats.achieve[achievement].l === 1) {
          earned--;
        }
      }
    });
    set_alevel(level);
    set_ulevel(ulevel);
    if (fool && !global.stats.feat["fool"]) {
      let thefool = $(`<b-tooltip :label="feat('fool')" position="is-bottom" size="is-small" animated><div id="thefool" class="achievement"><span class="has-text-danger">${feats.fool.name}</span><span>${loc("feat_fool_spoof")}</span></div></b-tooltip>`);
      achieve.append(thefool);
    } else {
      Object.keys(feats).forEach(function(feat) {
        let baseIcon = getBaseIcon(feat, "feat");
        if (global.stats.feat[feat]) {
          let star = global.stats.feat[feat] > 1 ? `<p class="flair" title="${sLevel(global.stats.feat[feat])} ${loc(baseIcon)}"><svg class="star${global.stats.feat[feat]}" version="1.1" x="0px" y="0px" width="16px" height="16px" viewBox="${svgViewBox(baseIcon)}" xml:space="preserve">${svgIcons(baseIcon)}</svg></p>` : "";
          if (feat === "easter") {
            let egg = easterEgg(4, 14);
            if (egg.length > 0) {
              star = egg;
            }
          }
          achieve.append($(`<b-tooltip :label="feat('${feat}')" position="is-bottom" size="is-small" animated><div class="achievement"><span class="has-text-danger">${feats[feat].name}</span><span>${feats[feat].desc}</span>${star}</div></b-tooltip>`));
        }
      });
    }
    let trick = trickOrTreat(5, 12, false);
    achieve.prepend(`<div class="has-text-warning">${loc("achieve_draw_achieve_earned", [earned, total])}${trick}</div>`);
    vBind({
      el: "#achievePanel",
      methods: {
        flair(flair) {
          return achievements[flair].flair;
        },
        feat(flair) {
          return feats[flair].flair;
        }
      }
    });
    if (fool && !global.stats.feat["fool"]) {
      $(`#thefool`).on("mouseover", function() {
        if (global.race.universe === "micro") {
          unlockFeat("fool", true);
        } else {
          unlockFeat("fool");
        }
        drawAchieve();
      });
    }
  }
  function challengeIcon() {
    let a_level = alevel();
    if ($("#topBar span.flair")) {
      clearElement($("#topBar span.flair"), true);
    }
    let egg = easterEgg(1, 14);
    if (egg.length > 0) {
      $("#topBar .planet").after($(egg));
    }
    if (a_level > 1 && $("#topBar .planet .flair").length === 0) {
      if (egg.length === 0) {
        let bIcon = getBaseIcon("topbar", "challenge");
        $("#topBar .planet").after(`<span class="flair"><svg class="star${a_level}" version="1.1" x="0px" y="0px" width="16px" height="16px" viewBox="${svgViewBox(bIcon)}" xml:space="preserve">${svgIcons(bIcon)}</svg></span>`);
      }
      let desc = "";
      if (global.race["no_plasmid"]) {
        desc += `<div>${loc("evo_challenge_plasmid")}</div>`;
      }
      if (global.race["weak_mastery"]) {
        desc += `<div>${loc("evo_challenge_mastery")}</div>`;
      }
      if (global.race["no_trade"]) {
        desc += `<div>${loc("evo_challenge_trade")}</div>`;
      }
      if (global.race["no_craft"]) {
        desc += `<div>${loc("evo_challenge_craft")}</div>`;
      }
      if (global.race["no_crispr"]) {
        desc += `<div>${loc("evo_challenge_crispr")}</div>`;
      }
      if (global.race["nerfed"]) {
        desc += `<div>${loc("evo_challenge_nerfed")}</div>`;
      }
      if (global.race["badgenes"]) {
        desc += `<div>${loc("evo_challenge_badgenes")}</div>`;
      }
      if (desc.length > 0) {
        $("#topBar .planetWrap .flair").append($(`<div class="is-sr-only"><div>Active Challenge Genes</div>${desc}</div>`));
      }
      popover(
        "topbarPlanet",
        function(obj) {
          let popper = $(`<div id="topbarPlanet"></div>`);
          obj.popper.append(popper);
          popper.append($(desc));
          return void 0;
        },
        {
          elm: `#topBar .planetWrap .flair`,
          classes: `has-background-light has-text-dark`
        }
      );
    }
  }
  function alevel() {
    let a_level = 1;
    if (global.race["no_plasmid"]) {
      a_level++;
    }
    if (global.race["no_trade"]) {
      a_level++;
    }
    if (global.race["no_craft"]) {
      a_level++;
    }
    if (global.race["no_crispr"]) {
      a_level++;
    }
    if (global.race["weak_mastery"]) {
      a_level++;
    }
    if (global.race["nerfed"]) {
      a_level++;
    }
    if (global.race["badgenes"]) {
      a_level++;
    }
    if (a_level > 5) {
      a_level = 5;
    }
    return a_level;
  }
  function checkAchievements() {
    let a_level = alevel();
    for (let t_level = a_level; t_level >= 0; t_level--) {
      checkBigAchievement("extinct_", "mass_extinction", 25, t_level);
      if (global.race.universe === "evil") {
        checkBigAchievementUniverse("extinct_", "vigilante", 12, t_level);
      }
      checkBigAchievement("genus_", "creator", 9, t_level);
      checkBigAchievement("biome_", "explorer", 6, t_level);
      if (global.race.universe === "heavy") {
        checkBigAchievementUniverse("genus_", "heavyweight", 8, t_level);
      }
    }
    if (global.tech["supercollider"] && global.tech["supercollider"] >= 99) {
      unlockAchieve("blackhole");
    }
    if (global.stats.starved >= 100) {
      unlockAchieve("mass_starvation");
    }
    if (Math.round(Math.log2(global.civic.garrison.protest + global.civic.garrison.fatigue)) >= 8) {
      unlockAchieve("warmonger");
    }
    if (global.stats.died >= 250) {
      unlockAchieve("red_tactics");
    }
    if (global.interstellar["stellar_engine"] && global.interstellar["stellar_engine"].mass >= 12) {
      unlockAchieve("landfill");
    }
    if (global.interstellar["stellar_engine"] && global.interstellar["stellar_engine"].mass >= 100) {
      unlockFeat("supermassive");
    }
    if (global.tech["piracy"] && global.tech["chthonian"] && global.tech["chthonian"] >= 2 && global.galaxy) {
      let chthonian = piracy("gxy_chthonian");
      let stargate = piracy("gxy_stargate");
      if (stargate === 1 && piracy("gxy_gateway") === 1 && piracy("gxy_gorddon") === 1 && piracy("gxy_alien1") === 1 && piracy("gxy_alien2") === 1 && chthonian === 1) {
        unlockAchieve("neutralized");
      }
      if (global.race["fasting"] && chthonian - stargate === 0) {
        let affix = universeAffix();
        global.stats.endless_hunger.b2[affix] = true;
        if (affix !== "m" && affix !== "l") {
          global.stats.endless_hunger.b2.l = true;
        }
      }
    }
    if (eventActive("summer") && global.resource.hasOwnProperty("Thermite")) {
      let thermite = 1e5 + global.stats.reset * 9e3;
      if (thermite > 1e6) {
        thermite = 1e6;
      }
      if (global.resource.Thermite.amount > thermite) {
        unlockFeat("solstice", global.race.universe === "micro" ? true : false);
      }
    }
    if (eventActive("firework") && global[global.race["cataclysm"] || global.race["orbit_decayed"] ? "space" : "city"].firework.on > 0) {
      unlockFeat("firework", global.race.universe === "micro" ? true : false);
    }
    if (global.city.morale.current >= 200) {
      unlockAchieve("paradise");
      if (global.city.morale.current >= 500) {
        unlockFeat("utopia");
      }
    }
    if (global.resource.hasOwnProperty("Money") && global.resource.Money.amount >= 1e9) {
      unlockAchieve("scrooge");
    }
    if (global.resource.hasOwnProperty("Money") && global.race["inflation"] && global.resource.Money.amount >= 25e10) {
      unlockAchieve("wheelbarrow");
    }
    if (global.civic.hasOwnProperty("govern") && global.galaxy.hasOwnProperty("trade") && global.city.hasOwnProperty("market") && global.galaxy.trade.cur >= 50 && global.city.market.trade >= 750 && global.civic.govern.type === "federation") {
      unlockAchieve("trade");
    }
    if (global.tech["pillars"]) {
      let genus = {};
      let rCnt = 0;
      let equilProgress = Array(5 + 1).fill(0);
      Object.keys(global.pillars).forEach(function(race) {
        if (races[race]) {
          const type = races[race].type;
          if (type !== "hybrid" && (!genus[type] || global.pillars[race] > genus[type])) {
            genus[type] = global.pillars[race];
          }
          rCnt++;
          equilProgress[global.pillars[race]]++;
        }
      });
      if (Object.keys(genus).length >= Object.keys(genus_def).length - 2) {
        let rank = 5;
        Object.keys(genus).forEach(function(g) {
          if (genus[g] < rank && g !== "hybrid") {
            rank = genus[g];
          }
        });
        unlockAchieve("enlightenment", false, rank);
      }
      if (rCnt >= Object.keys(races).length - 1) {
        unlockAchieve("resonance");
      }
      if (rCnt >= 50) {
        let eligPillars = 0;
        for (let equilRank = 5; equilRank > 0; equilRank--) {
          eligPillars += equilProgress[equilRank];
          if (eligPillars >= 50) {
            unlockFeat("equilibrium", false, equilRank);
            break;
          }
        }
      }
    }
    if (global.stats["synth"] && Object.keys(global.stats.synth).length >= 32) {
      unlockFeat("planned_obsolescence", false, 5);
    }
    if (global.portal.hasOwnProperty("mechbay") && global.tech.hasOwnProperty("hell_spire") && global.tech.hell_spire >= 9) {
      let mobs = Object.keys(monsters).length;
      let highest = {};
      Object.keys(global.stats.spire).forEach(function(universe) {
        let current = {};
        Object.keys(global.stats.spire[universe]).forEach(function(boss) {
          if (monsters[boss]) {
            if (universe !== "m" && (!highest.hasOwnProperty(boss) || highest[boss] < global.stats.spire[universe][boss])) {
              highest[boss] = global.stats.spire[universe][boss];
            }
            if (global.stats.spire[universe][boss] > 0) {
              current[boss] = global.stats.spire[universe][boss];
            }
          }
        });
        if (Object.keys(current).length === mobs) {
          unlockAchieve("gladiator", false, Math.min(...Object.values(current)), universe);
        }
      });
      if (Object.keys(highest).length === mobs) {
        unlockAchieve("gladiator", false, Math.min(...Object.values(highest)), "l");
      }
    }
    if (global.race["banana"]) {
      let affix = universeAffix();
      if (global.tech.hasOwnProperty("monuments") && global.tech.monuments >= 50) {
        global.stats.banana.b5[affix] = true;
        if (affix !== "m" && affix !== "l") {
          global.stats.banana.b5.l = true;
        }
      }
      let slist = 0;
      let ulist = 0;
      ["b1", "b2", "b3", "b4", "b5"].forEach(function(b) {
        if (global.stats.banana[b].l) {
          slist++;
        }
        if (affix !== "l" && global.stats.banana[b][affix]) {
          ulist++;
        }
      });
      if (slist > 0) {
        unlockAchieve("banana", false, slist, "l");
      }
      if (ulist > 0 && affix !== "l") {
        unlockAchieve("banana", false, ulist, affix);
      }
      if (global.interstellar.hasOwnProperty("stellar_engine") && global.interstellar.stellar_engine.mass >= 12 && global.interstellar.stellar_engine.exotic === 0) {
        global.stats.banana.b3[affix] = true;
        if (affix !== "m" && affix !== "l") {
          global.stats.banana.b3.l = true;
        }
      }
    }
    {
      let uAffix = universeAffix();
      ["l", uAffix].forEach(function(affix) {
        let rank = 0;
        ["ashanddust", "exodus", "obsolete", "bluepill", "retired"].forEach(function(achieve) {
          if (global.stats.achieve[achieve] && global.stats.achieve[achieve][affix] && global.stats.achieve[achieve][affix] >= 5) {
            rank++;
          }
        });
        if (rank > 0) {
          unlockAchieve("pathfinder", false, rank, affix);
        }
      });
    }
    if (global.race["fasting"]) {
      let affix = universeAffix();
      if (global.tech.hasOwnProperty("stock_exchange") && global.tech.stock_exchange >= 80) {
        global.stats.endless_hunger.b3[affix] = true;
        if (affix !== "m" && affix !== "l") {
          global.stats.endless_hunger.b3.l = true;
        }
      }
      if (global.resource[global.race.species].amount >= 1200) {
        global.stats.endless_hunger.b4[affix] = true;
        if (affix !== "m" && affix !== "l") {
          global.stats.endless_hunger.b4.l = true;
        }
      }
      let slist = 0;
      let ulist = 0;
      ["b1", "b2", "b3", "b4", "b5"].forEach(function(b) {
        if (global.stats.endless_hunger[b].l) {
          slist++;
        }
        if (affix !== "l" && global.stats.endless_hunger[b][affix]) {
          ulist++;
        }
      });
      if (slist > 0) {
        unlockAchieve("endless_hunger", false, slist, "l");
      }
      if (ulist > 0 && affix !== "l") {
        unlockAchieve("endless_hunger", false, ulist, affix);
      }
    }
    const date2 = /* @__PURE__ */ new Date();
    let easter2 = eventActive("easter");
    let halloween = eventActive("halloween");
    let year = date2.getFullYear();
    if (!global.settings.boring && date2.getDate() === 13 && date2.getDay() === 5 && global.resource[global.race.species].amount >= 1) {
      let murder = false;
      murder = unlockFeat("friday", global.race.universe === "micro" ? true : false);
      if (murder) {
        global.resource[global.race.species].amount--;
      }
    } else if (!global.settings.boring && date2.getMonth() === 1 && date2.getDate() === 14) {
      unlockFeat("valentine", global.race.universe === "micro" ? true : false);
    } else if (!global.settings.boring && date2.getMonth() === 2 && date2.getDate() === 17) {
      unlockFeat("leprechaun", global.race.universe === "micro" ? true : false);
    } else if (easter2.active) {
      unlockFeat("easter", global.race.universe === "micro" ? true : false);
      let eggs = 0;
      for (let i = 1; i <= 18; i++) {
        if (global.special.egg[year][`egg${i}`]) {
          eggs++;
        }
      }
      if (eggs >= 12) {
        unlockFeat("egghunt", global.race.universe === "micro" ? true : false);
      }
    } else if (eventActive("launch_day")) {
      unlockFeat("launch_day", global.race.universe === "micro" ? true : false);
    } else if (halloween.active) {
      let total = 0;
      for (let i = 1; i <= 7; i++) {
        if (global.special.trick[year][`trick${i}`]) {
          total++;
        }
      }
      for (let i = 1; i <= 7; i++) {
        if (global.special.trick[year][`treat${i}`]) {
          total++;
        }
      }
      if (total >= 12) {
        unlockFeat("trickortreat", global.race.universe === "micro" ? true : false);
      }
      if (date2.getMonth() === 9 && date2.getDate() === 31) {
        unlockFeat("halloween", global.race.universe === "micro" ? true : false);
      }
    } else if (!global.settings.boring && date2.getMonth() === 10 && date2.getDate() >= 22 && date2.getDate() <= 28) {
      unlockFeat("thanksgiving", global.race.universe === "micro" ? true : false);
    } else if (!global.settings.boring && date2.getMonth() === 11 && date2.getDate() == 25) {
      unlockFeat("xmas", global.race.universe === "micro" ? true : false);
    }
    if (!global.settings.boring && date2.getMonth() === 3 && date2.getDate() >= 1 && date2.getDate() <= 3 && global.stats.feat.hasOwnProperty("fool") && global.stats.feat.fool > 0) {
      unlockFeat("fool", global.race.universe === "micro" ? true : false);
    }
    if (global.stats.dkills >= 666e6) {
      unlockFeat("demon_slayer");
    }
    {
      for (let t_level = a_level; t_level >= 1; t_level--) {
        let total = 0;
        const keys = Object.keys(achievements);
        for (const key of keys) {
          if (global.stats.achieve[key] && global.stats.achieve[key].l >= t_level) {
            total++;
          }
        }
        let progress = [
          { c: 10, f: "novice" },
          { c: 25, f: "journeyman" },
          { c: 50, f: "adept" },
          { c: 75, f: "master" },
          { c: 100, f: "grandmaster" },
          { c: 150, f: "god" }
        ];
        for (let i = 0; i < 6; i++) {
          if (total >= progress[i].c && (!global.stats.feat[progress[i].f] || global.stats.feat[progress[i].f] < t_level)) {
            if (global.race.universe === "micro") {
              unlockFeat(progress[i].f, true, t_level);
            } else {
              unlockFeat(progress[i].f, false, t_level);
            }
            calcQueueMax();
            calcRQueueMax();
          }
        }
      }
    }
  }
  function checkAdept() {
    let rank = 0;
    ["whitehole", "eviltwin", "canceled", "heavy", "pw_apocalypse"].forEach(function(x) {
      if (global.stats.achieve[x]) {
        rank = Math.max(global.stats.achieve[x].l, rank);
      }
    });
    rank = global.stats.feat["adept"] ? Math.min(rank, global.stats.feat["adept"]) : 0;
    return rank;
  }
  function checkBigAchievement(frag, name, num, level) {
    if (!global.stats.achieve[name] || global.stats.achieve[name].l < level) {
      let total = 0;
      const keys = Object.keys(achievements);
      for (const key of keys) {
        if (key.includes(frag)) {
          if (global.stats.achieve[key] && global.stats.achieve[key].l >= level) {
            total++;
          }
        }
      }
      if (total >= num) {
        unlockAchieve(name, false, level);
        if (global.race.universe !== "standard") {
          switch (global.race.universe) {
            case "evil":
              global.stats.achieve[name].e = void 0;
              break;
            case "antimatter":
              global.stats.achieve[name].a = void 0;
              break;
            case "heavy":
              global.stats.achieve[name].h = void 0;
              break;
            case "micro":
              global.stats.achieve[name].m = void 0;
              break;
            case "magic":
              global.stats.achieve[name].mg = void 0;
              break;
            default:
              break;
          }
        }
      }
    }
    if (global.race.universe !== "standard") {
      checkBigAchievementUniverse(frag, name, num, level);
    }
  }
  function checkBigAchievementUniverse(frag, name, num, level) {
    let proceed = false;
    switch (global.race.universe) {
      case "evil":
        if (typeof global.stats.achieve[name] === "undefined" || typeof global.stats.achieve[name].e === "undefined" || global.stats.achieve[name].e < level) {
          proceed = true;
        }
        break;
      case "antimatter":
        if (typeof global.stats.achieve[name] === "undefined" || typeof global.stats.achieve[name].a === "undefined" || global.stats.achieve[name].a < level) {
          proceed = true;
        }
        break;
      case "heavy":
        if (typeof global.stats.achieve[name] === "undefined" || typeof global.stats.achieve[name].h === "undefined" || global.stats.achieve[name].h < level) {
          proceed = true;
        }
        break;
      case "micro":
        if (typeof global.stats.achieve[name] === "undefined" || typeof global.stats.achieve[name].m === "undefined" || global.stats.achieve[name].m < level) {
          proceed = true;
        }
        break;
      case "magic":
        if (typeof global.stats.achieve[name] === "undefined" || typeof global.stats.achieve[name].mg === "undefined" || global.stats.achieve[name].mg < level) {
          proceed = true;
        }
        break;
      default:
        break;
    }
    if (proceed) {
      let total = 0;
      const keys = Object.keys(achievements);
      for (const key of keys) {
        if (key.includes(frag)) {
          switch (global.race.universe) {
            case "evil":
              if (global.stats.achieve[key] && global.stats.achieve[key]["e"] && global.stats.achieve[key].e >= level) {
                total++;
              }
              break;
            case "antimatter":
              if (global.stats.achieve[key] && global.stats.achieve[key]["a"] && global.stats.achieve[key].a >= level) {
                total++;
              }
              break;
            case "heavy":
              if (global.stats.achieve[key] && global.stats.achieve[key]["h"] && global.stats.achieve[key].h >= level) {
                total++;
              }
              break;
            case "micro":
              if (global.stats.achieve[key] && global.stats.achieve[key]["m"] && global.stats.achieve[key].m >= level) {
                total++;
              }
              break;
            case "magic":
              if (global.stats.achieve[key] && global.stats.achieve[key]["mg"] && global.stats.achieve[key].mg >= level) {
                total++;
              }
              break;
            default:
              break;
          }
        }
      }
      if (total >= num) {
        unlockAchieve(name, false, level);
      }
    }
  }
  var perkList = {
    mastery: {
      name: loc(`mastery`),
      desc() {
        let desc = "";
        Object.keys(universe_types).forEach(function(universe) {
          let mastery = masteryType(universe, true, true);
          if (universe === "standard") {
            desc += `
                    <span class="row">
                        <span class="has-text-caution">${universe_types[universe].name}</span>:
                        <span>${loc("perks_mastery_general", [`<span class="has-text-advanced">${+mastery.g.toFixed(2)}%</span>`])}
                        </span>
                    </span>`;
          } else if (global.stats.achieve["whitehole"]) {
            desc += `
                    <span class="row">
                        <span class="has-text-caution">${universe_types[universe].name}</span>:
                        <span>
                            ${loc("perks_mastery_general", [`<span class="has-text-advanced">${+mastery.g.toFixed(2)}%</span>`])},
                            ${loc("perks_mastery_universe", [`<span class="has-text-advanced">${+mastery.u.toFixed(2)}%</span>`])},
                            ${loc("perks_mastery_total", [`<span class="has-text-advanced">${+(mastery.g + mastery.u).toFixed(2)}%</span>`])}
                        </span>
                    </span>`;
          }
        });
        return desc;
      },
      active() {
        return global.genes["challenge"] && global.genes["challenge"] >= 2 ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_unlocked_title`)}</span>`])
      ]
    },
    blackhole: {
      name: loc(`achieve_blackhole_name`),
      desc(wiki) {
        let bonus = wiki ? "5/10/15/20/25" : global.stats.achieve["blackhole"] ? global.stats.achieve.blackhole.l * 5 : 5;
        return loc("achieve_perks_blackhole", [bonus]);
      },
      active() {
        return global.stats.achieve["blackhole"] && global.stats.achieve.blackhole.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_blackhole_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_blackhole_name`)}</span>`])
      ]
    },
    trade: {
      name: loc(`achieve_trade_name`),
      desc(wiki) {
        let bonus1 = wiki ? "2/4/6/8/10" : global.stats.achieve["trade"] ? global.stats.achieve.trade.l * 2 : 2;
        let bonus2 = wiki ? "1/2/3/4/5" : global.stats.achieve["trade"] ? global.stats.achieve.trade.l : 1;
        return loc("achieve_perks_trade", [bonus1, bonus2]);
      },
      active() {
        return global.stats.achieve["trade"] && global.stats.achieve.trade.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_trade_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_trade_name`)}</span>`])
      ]
    },
    creator: {
      name: loc(`achieve_creator_name`),
      desc(wiki) {
        let bonus = wiki ? "1.5/2/2.5/3/3.5" : 1 + (global.stats.achieve["creator"] ? global.stats.achieve["creator"].l * 0.5 : 0.5);
        return loc("achieve_perks_creator", [bonus]);
      },
      active() {
        return global.stats.achieve["creator"] && global.stats.achieve.creator.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_creator_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_creator_name`)}</span>`])
      ]
    },
    mass_extinction: {
      name: loc(`achieve_mass_extinction_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_mass_extinction");
          },
          active() {
            return global.stats.achieve["mass_extinction"] && global.stats.achieve["mass_extinction"].l >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let rank = global.stats.achieve["mass_extinction"] ? global.stats.achieve.mass_extinction.l : 1;
            let bonus = wiki ? "0/50/100/150/200" : (rank - 1) * 50;
            return loc("achieve_perks_mass_extinction2", [bonus]);
          },
          active() {
            return global.stats.achieve["mass_extinction"] && global.stats.achieve.mass_extinction.l > 1 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_mass_extinction_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_mass_extinction_name`)}</span>`])
      ]
    },
    doomed: {
      name: loc(`achieve_doomed_name`),
      desc(wiki) {
        return loc("achieve_perks_doomed");
      },
      active() {
        return global.stats.portals >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_doomed_name`)}</span>`])
      ]
    },
    explorer: {
      name: loc(`achieve_explorer_name`),
      desc(wiki) {
        let bonus = wiki ? "1/2/3/4/5" : global.stats.achieve["explorer"] ? global.stats.achieve["explorer"].l : 1;
        return loc("achieve_perks_explorer", [bonus]);
      },
      active() {
        return global.stats.achieve["explorer"] && global.stats.achieve.explorer.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_explorer_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_explorer_name`)}</span>`])
      ]
    },
    miners_dream: {
      name: loc(`achieve_miners_dream_name`),
      desc(wiki) {
        let numGeo = wiki ? "1/2/3/5/7" : global.stats.achieve["miners_dream"] ? global.stats.achieve["miners_dream"].l >= 4 ? global.stats.achieve["miners_dream"].l * 2 - 3 : global.stats.achieve["miners_dream"].l : 0;
        return loc("achieve_perks_miners_dream", [numGeo]);
      },
      active() {
        return global.stats.achieve["miners_dream"] && global.stats.achieve.miners_dream.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_miners_dream_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_miners_dream_name`)}</span>`])
      ]
    },
    extinct_junker: {
      name: loc(`achieve_extinct_junker_name`),
      desc() {
        return loc("achieve_perks_enlightened");
      },
      active() {
        return global.stats.achieve["extinct_junker"] && global.stats.achieve.extinct_junker.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_extinct_junker_name`)}</span>`])
      ]
    },
    joyless: {
      name: loc(`achieve_joyless_name`),
      desc(wiki) {
        let bonus = wiki ? "2/4/6/8/10" : global.stats.achieve["joyless"] ? global.stats.achieve["joyless"].l * 2 : 2;
        return loc("achieve_perks_joyless", [bonus]);
      },
      active() {
        return global.stats.achieve["joyless"] && global.stats.achieve.joyless.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_joyless_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_joyless_name`)}</span>`])
      ]
    },
    steelen: {
      name: loc(`achieve_steelen_name`),
      desc(wiki) {
        let bonus = wiki ? "2/4/6/8/10" : global.stats.achieve["steelen"] ? global.stats.achieve["steelen"].l * 2 : 2;
        return loc("achieve_perks_steelen", [bonus]);
      },
      active() {
        return global.stats.achieve["steelen"] && global.stats.achieve.steelen.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_steelen_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_steelen_name`)}</span>`])
      ]
    },
    wheelbarrow: {
      name: loc(`achieve_wheelbarrow_name`),
      desc(wiki) {
        let bonus = wiki ? "2/4/6/8/10" : global.stats.achieve["wheelbarrow"] ? global.stats.achieve["wheelbarrow"].l * 2 : 2;
        return loc("achieve_perks_wheelbarrow", [bonus]);
      },
      active() {
        return global.stats.achieve["wheelbarrow"] && global.stats.achieve.wheelbarrow.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_wheelbarrow_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_wheelbarrow_name`)}</span>`])
      ]
    },
    extinct_sludge: {
      name: loc(`achieve_extinct_sludge_name`),
      group: [
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].l * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_standard`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.l >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].h * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_heavy`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.h >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].a * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_antimatter`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.a >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].e * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_evil`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.e >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].m * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_micro`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.m >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "3/6/9/12/15" : global.stats.achieve["extinct_sludge"] ? global.stats.achieve["extinct_sludge"].mg * 3 : 3;
            return loc("achieve_perks_extinct_sludge", [bonus, loc(`universe_magic`)]);
          },
          active() {
            return global.stats.achieve["extinct_sludge"] && global.stats.achieve.extinct_sludge.mg >= 1 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_extinct_sludge_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_universe_scale`, [`<span class="has-text-caution">${loc(`achieve_extinct_sludge_name`)}</span>`])
      ]
    },
    whitehole: {
      name: loc(`achieve_whitehole_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_whitehole");
          },
          active() {
            return global.stats.achieve["whitehole"] ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "5/10/15/20/25" : global.stats.achieve["whitehole"] ? global.stats.achieve["whitehole"].l * 5 : 5;
            return loc("achieve_perks_whitehole2", [bonus]);
          },
          active() {
            return global.stats.achieve["whitehole"] ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "1/2/3/4/5" : global.stats.achieve["whitehole"] ? global.stats.achieve["whitehole"].l : 1;
            return loc("achieve_perks_whitehole3", [bonus]);
          },
          active() {
            return global.stats.achieve["whitehole"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_whitehole_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_whitehole_name`)}</span>`])
      ]
    },
    heavyweight: {
      name: loc(`achieve_heavyweight_name`),
      desc(wiki) {
        let bonus = wiki ? "4/8/12/16/20" : global.stats.achieve["heavyweight"] ? global.stats.achieve["heavyweight"].l * 4 : 4;
        return loc("achieve_perks_heavyweight", [bonus]);
      },
      active() {
        return global.stats.achieve["heavyweight"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_heavyweight_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_heavyweight_name`)}</span>`])
      ]
    },
    dissipated: {
      name: loc(`achieve_dissipated_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_dissipated1", [1]);
          },
          active() {
            return global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "1/2" : global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 5 ? 2 : 1;
            return loc("achieve_perks_dissipated2", [bonus]);
          },
          active() {
            return global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_dissipated3", [1]);
          },
          active() {
            return global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_dissipated4", [1]);
          },
          active() {
            return global.stats.achieve["dissipated"] && global.stats.achieve["dissipated"].l >= 4 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_dissipated_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_dissipated_name`)}</span>`])
      ]
    },
    banana: {
      name: loc(`achieve_banana_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_banana1", [50]);
          },
          active() {
            return global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_banana2", [1]);
          },
          active() {
            return global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_banana3", [10]);
          },
          active() {
            return global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_banana4", [3]);
          },
          active() {
            return global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_banana5", [0.01]);
          },
          active() {
            return global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_banana_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task`, [`<span class="has-text-caution">${loc(`achieve_banana_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [1, `<span class="has-text-${global.stats.banana.b1.l ? `success` : `danger`}">${loc(`wiki_achieve_banana1`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [2, `<span class="has-text-${global.stats.banana.b2.l ? `success` : `danger`}">${loc(`wiki_achieve_banana2`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [3, `<span class="has-text-${global.stats.banana.b3.l ? `success` : `danger`}">${loc(`wiki_achieve_banana3`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [4, `<span class="has-text-${global.stats.banana.b4.l ? `success` : `danger`}">${loc(`wiki_achieve_banana4`, [500])}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [5, `<span class="has-text-${global.stats.banana.b5.l ? `success` : `danger`}">${loc(`wiki_achieve_banana5`, [50])}</span>`])
      ]
    },
    anarchist: {
      name: loc(`achieve_anarchist_name`),
      desc(wiki) {
        let bonus = wiki ? "10/20/30/40/50" : global.stats.achieve["anarchist"] ? global.stats.achieve["anarchist"].l * 10 : 10;
        return loc("achieve_perks_anarchist", [bonus]);
      },
      active() {
        return global.stats.achieve["anarchist"] && global.stats.achieve["anarchist"].l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_anarchist_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_anarchist_name`)}</span>`])
      ]
    },
    ascended: {
      name: loc(`achieve_ascended_name`),
      group: [
        {
          desc(wiki) {
            let genes;
            if (wiki) {
              genes = "1-30";
            } else {
              genes = 0;
              if (global.stats.achieve["ascended"]) {
                for (let i = 0; i < universe_affixes.length; i++) {
                  if (global.stats.achieve.ascended.hasOwnProperty(universe_affixes[i])) {
                    genes += global.stats.achieve.ascended[universe_affixes[i]];
                  }
                }
              }
            }
            return loc("achieve_perks_ascended1", [genes]);
          },
          active() {
            return global.stats.achieve["ascended"] && global.stats.achieve["ascended"].l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_ascended2", [harmonyEffect()]);
          },
          active() {
            return global.stats.achieve["ascended"] && global.stats.achieve["ascended"][universeAffix()] >= 1 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_ascended_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_ascended_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_universe`, [`<span class="has-text-caution">${loc(`achieve_ascended_name`)}</span>`])
      ]
    },
    technophobe: {
      name: loc(`achieve_technophobe_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_technophobe1", [25]);
          },
          active() {
            return global.stats.achieve["technophobe"] && global.stats.achieve["technophobe"].l >= 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus;
            if (wiki) {
              bonus = "10/25/30/35/40/45/50";
            } else {
              bonus = global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 4 ? 25 : 10;
              for (let i = 1; i < universe_affixes.length; i++) {
                if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe[universe_affixes[i]] && global.stats.achieve.technophobe[universe_affixes[i]] >= 5) {
                  bonus += 5;
                }
              }
            }
            return loc("achieve_perks_technophobe2", [bonus]);
          },
          active() {
            return global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 2 ? true : false;
          }
        },
        {
          desc(wiki) {
            let gems;
            if (wiki) {
              gems = "1/2/3/4/5/6";
            } else {
              gems = 1;
              for (let i = 1; i < universe_affixes.length; i++) {
                if (global.stats.achieve["technophobe"] && global.stats.achieve.technophobe[universe_affixes[i]] && global.stats.achieve.technophobe[universe_affixes[i]] >= 5) {
                  gems += 1;
                }
              }
            }
            return wiki || gems > 1 ? loc("achieve_perks_technophobe3a", [gems]) : loc("achieve_perks_technophobe3", [gems]);
          },
          active() {
            return global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_technophobe4", [10]);
          },
          active() {
            return global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 5 ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "4/8/12/16/20" : global.stats.achieve["technophobe"] ? global.stats.achieve.technophobe.l : 0;
            return loc("achieve_perks_technophobe5", [bonus]);
          },
          active() {
            return global.stats.achieve["technophobe"] && global.stats.achieve.technophobe.l >= 1 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_technophobe_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_technophobe_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_universe`, [`<span class="has-text-caution">${loc(`achieve_technophobe_name`)}</span>`])
      ]
    },
    iron_will: {
      name: loc(`achieve_iron_will_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_iron_will1", [0.15]);
          },
          active() {
            return global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_iron_will2", [10]);
          },
          active() {
            return global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_iron_will3", [6]);
          },
          active() {
            return global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_iron_will4", [1]);
          },
          active() {
            return global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_iron_will5");
          },
          active() {
            return global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_iron_will_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill`, [`<span class="has-text-caution">${loc(`evo_challenge_cataclysm`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill2`, [1, `<span class="has-text-caution">${loc(`space_red_ziggurat_title`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill3`, [2, `<span class="has-text-caution">${loc(`tech_elerium_mining`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill3`, [3, `<span class="has-text-caution">${loc(`tech_lasers`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill3`, [4, `<span class="has-text-caution">${loc(`tech_generational_ship`)}</span>`]),
        loc(`wiki_perks_achievement_note_ironwill4`, [5, `<span class="has-text-caution">${loc(`wiki_resets_bioseed`)}</span>`])
      ]
    },
    failed_history: {
      name: loc(`achieve_failed_history_name`),
      desc() {
        return loc("achieve_perks_failed_history", [2]);
      },
      active() {
        return global.stats.achieve["failed_history"] && global.stats.achieve.failed_history.l >= 5 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_failed_history_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_failed_history`, [`<span class="has-text-caution">${loc(`evo_challenge_cataclysm`)}</span>`])
      ]
    },
    lamentis: {
      name: loc(`achieve_lamentis_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_lamentis1", [`10%`]);
          },
          active() {
            return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_lamentis2", [`10%`]);
          },
          active() {
            return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_lamentis3", [`10%`]);
          },
          active() {
            return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_lamentis4");
          },
          active() {
            return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_lamentis5");
          },
          active() {
            return global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_lamentis_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_lamentis_name`)}</span>`])
      ]
    },
    soul_sponge: {
      name: loc(`achieve_soul_sponge_name`),
      desc(wiki) {
        let soul = wiki ? "100/200/300/400/500" : global.stats.achieve["soul_sponge"] ? global.stats.achieve.soul_sponge.mg * 100 : 100;
        return loc("achieve_perks_soul_sponge", [soul]);
      },
      active() {
        return global.stats.achieve["soul_sponge"] && global.stats.achieve.soul_sponge.mg >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_soul_sponge_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_soul_sponge_name`)}</span>`])
      ]
    },
    nightmare: {
      name: loc(`achieve_nightmare_name`),
      desc() {
        return loc("achieve_perks_nightmare");
      },
      active() {
        return global.stats.achieve["nightmare"] && global.stats.achieve.nightmare.mg >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_nightmare_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_nightmare_name`)}</span>`])
      ]
    },
    escape_velocity: {
      name: loc(`achieve_escape_velocity_name`),
      desc(wiki) {
        let ev = wiki ? "2/4/6/8/10" : global.stats.achieve["escape_velocity"] ? global.stats.achieve.escape_velocity.h * 2 : 2;
        return loc("achieve_perks_escape_velocity", [ev]);
      },
      active() {
        return global.stats.achieve["escape_velocity"] && global.stats.achieve.escape_velocity.h >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_escape_velocity_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_escape_velocity_name`)}</span>`])
      ]
    },
    endless_hunger: {
      name: loc(`achieve_endless_hunger_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_endless_hunger1");
          },
          active() {
            return global.stats.achieve["endless_hunger"] && global.stats.achieve.endless_hunger.l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_endless_hunger2");
          },
          active() {
            return global.stats.achieve["endless_hunger"] && global.stats.achieve.endless_hunger.l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_endless_hunger3");
          },
          active() {
            return global.stats.achieve["endless_hunger"] && global.stats.achieve.endless_hunger.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_endless_hunger4");
          },
          active() {
            return global.stats.achieve["endless_hunger"] && global.stats.achieve.endless_hunger.l >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_endless_hunger5");
          },
          active() {
            return global.stats.achieve["endless_hunger"] && global.stats.achieve.endless_hunger.l >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_endless_hunger_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task`, [`<span class="has-text-caution">${loc(`achieve_endless_hunger_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [1, `<span class="has-text-${global.stats.endless_hunger.b1.l ? `success` : `danger`}">${loc(`wiki_achieve_endless_hunger1`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [2, `<span class="has-text-${global.stats.endless_hunger.b2.l ? `success` : `danger`}">${loc(`wiki_achieve_endless_hunger2`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [3, `<span class="has-text-${global.stats.endless_hunger.b3.l ? `success` : `danger`}">${loc(`wiki_achieve_endless_hunger3`, [80])}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [4, `<span class="has-text-${global.stats.endless_hunger.b4.l ? `success` : `danger`}">${loc(`wiki_achieve_endless_hunger4`, [1200])}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [5, `<span class="has-text-${global.stats.endless_hunger.b5.l ? `success` : `danger`}">${loc(`wiki_achieve_endless_hunger5`)}</span>`])
      ]
    },
    gladiator: {
      name: loc(`achieve_gladiator_name`),
      desc(wiki) {
        let mech = wiki ? "20/40/60/80/100" : global.stats.achieve["gladiator"] ? global.stats.achieve.gladiator.l * 20 : 20;
        return loc("achieve_perks_gladiator", [mech]);
      },
      active() {
        return global.stats.achieve["gladiator"] && global.stats.achieve.gladiator.l >= 1 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_gladiator_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_scale`, [`<span class="has-text-caution">${loc(`achieve_gladiator_name`)}</span>`])
      ]
    },
    what_is_best: {
      name: loc(`achieve_what_is_best_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_what_is_best1", [actions.portal.prtl_ruins.hell_forge.title(), "20%"]);
          },
          active() {
            return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_what_is_best2", [actions.portal.prtl_spire.purifier.title(), "25 MW"]);
          },
          active() {
            return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_what_is_best3", [actions.portal.prtl_pit.soul_forge.title(), actions.portal.prtl_pit.soul_attractor.title(), "1%"]);
          },
          active() {
            return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_what_is_best4", [actions.portal.prtl_lake.transport.title(), 3]);
          },
          active() {
            return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_what_is_best5");
          },
          active() {
            return global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_what_is_best_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task`, [`<span class="has-text-caution">${loc(`achieve_what_is_best_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [1, `<span class="has-text-${global.stats.warlord.k ? `success` : `danger`}">${loc(`wiki_achieve_what_is_best_k`, [50])}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [2, `<span class="has-text-${global.stats.warlord.p ? `success` : `danger`}">${loc(`wiki_achieve_what_is_best_p`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [3, `<span class="has-text-${global.stats.warlord.a ? `success` : `danger`}">${loc(`wiki_achieve_what_is_best_a`, [250])}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [4, `<span class="has-text-${global.stats.warlord.r ? `success` : `danger`}">${loc(`wiki_achieve_what_is_best_r`)}</span>`]),
        loc(`wiki_perks_achievement_note_task_num`, [5, `<span class="has-text-${global.stats.warlord.g ? `success` : `danger`}">${loc(`wiki_achieve_what_is_best_g`)}</span>`])
      ]
    },
    pathfinder: {
      name: loc(`achieve_pathfinder_name`),
      group: [
        {
          desc() {
            return loc("achieve_perks_pathfinder1", [10]);
          },
          active() {
            return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 1 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_pathfinder2", [10]);
          },
          active() {
            return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_pathfinder3");
          },
          active() {
            return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_pathfinder4");
          },
          active() {
            return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("achieve_perks_pathfinder5");
          },
          active() {
            return global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_pathfinder_name`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder`, [`<span class="has-text-caution">${loc(`evo_challenge_truepath`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder_reset`, [`<span class="has-text-${global.stats.achieve["ashanddust"] ? "success" : "danger"}">${loc(`wiki_resets_mad`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder_reset`, [`<span class="has-text-${global.stats.achieve["exodus"] ? "success" : "danger"}">${loc(`wiki_resets_bioseed`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder_reset`, [`<span class="has-text-${global.stats.achieve["obsolete"] ? "success" : "danger"}">${loc(`wiki_resets_ai`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder_reset`, [`<span class="has-text-${global.stats.achieve["bluepill"] ? "success" : "danger"}">${loc(`wiki_resets_matrix`)}</span>`]),
        loc(`wiki_perks_achievement_note_pathfinder_reset`, [`<span class="has-text-${global.stats.achieve["retired"] ? "success" : "danger"}">${loc(`wiki_resets_retired`)}</span>`])
      ]
    },
    overlord: {
      name: loc(`achieve_overlord_name`),
      desc() {
        let desc = `<div>${loc("achieve_perks_overlord1", [10])}</div>`;
        desc += `<div>${loc("achieve_perks_overlord2")}</div>`;
        desc += `<div>${loc("achieve_perks_overlord3")}</div>`;
        desc += `<div>${loc("achieve_perks_overlord4")}</div>`;
        return desc;
      },
      active() {
        return global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? true : false;
      },
      notes: [
        loc(`wiki_perks_achievement_note`, [`<span class="has-text-caution">${loc(`achieve_overlord_name`)}</span>`])
      ]
    },
    adam_eve: {
      name: loc(`achieve_adam_eve_name`),
      desc() {
        return loc(`achieve_perks_adam_eve`);
      },
      active() {
        return global.stats.achieve["adam_eve"] && global.stats.achieve.adam_eve.l >= 5 ? true : false;
      },
      notes: []
    },
    creep: {
      name: loc(`wiki_arpa_crispr_creep`),
      desc(wiki) {
        let bonus = wiki ? "0.01/0.02/0.03/0.04/0.05" : global.genes["creep"] ? global.genes.creep * 0.01 : 0;
        return loc("arpa_perks_creep", [bonus]);
      },
      active() {
        return global.genes["creep"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_genetic_memory_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_animus_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_divine_remembrance_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_divine_proportion_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_genetic_repository_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    store: {
      name: loc(`wiki_arpa_crispr_store`),
      desc(wiki) {
        let psb = wiki ? "0.04/0.06/0.08" : global.genes["store"] && global.genes.store > 1 ? global.genes.store === 2 ? 0.06 : 0.08 : 0.04;
        return loc(global.genes["store"] && global.genes.store >= 4 ? "arpa_perks_store2" : "arpa_perks_store1", [psb]);
      },
      active() {
        return global.genes["store"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_spatial_reasoning_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_spatial_superiority_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_spatial_supremacy_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_dimensional_warping_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    evolve: {
      name: loc(`wiki_arpa_crispr_evolve`),
      group: [
        {
          desc() {
            return loc("arpa_perks_evolve");
          },
          active() {
            return global.genes["evolve"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_recombination_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_homologous_recombination_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_genetic_reshuffling_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 4 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_recombinant_dna_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 5 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_chimeric_dna_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 6 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_molecular_cloning_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 7 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_transgenes_desc");
          },
          active() {
            return global.genes["evolve"] && global.genes.evolve >= 8 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_morphogenesis_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_recombination_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_homologous_recombination_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_genetic_reshuffling_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_recombinant_dna_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_chimeric_dna_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_molecular_cloning_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_transgenes_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    birth: {
      name: loc(`wiki_arpa_crispr_birth`),
      desc() {
        return loc("arpa_perks_birth");
      },
      active() {
        return global.genes["birth"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_replication_title`)}</span>`])
      ]
    },
    enhance: {
      name: loc(`wiki_arpa_crispr_enhance`),
      desc() {
        return loc("arpa_perks_enhance");
      },
      active() {
        return global.genes["enhance"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_enhanced_muscle_fiber_title`)}</span>`])
      ]
    },
    crafty: {
      name: loc(`wiki_arpa_crispr_crafty`),
      group: [
        {
          desc() {
            return loc("arpa_genepool_artificer_desc");
          },
          active() {
            return global.genes["crafty"] ? true : false;
          }
        },
        {
          desc(wiki) {
            let bonus = wiki ? "50/100" : global.genes["crafty"] && global.genes.crafty >= 3 ? 100 : 50;
            return loc("arpa_genepool_crafting_desc", [bonus]);
          },
          active() {
            return global.genes["crafty"] && global.genes.crafty >= 2 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_artificer_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_detail_oriented_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_rigorous_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    governor: {
      name: loc(`wiki_arpa_crispr_governor`),
      desc() {
        return loc("arpa_perks_governor");
      },
      active() {
        return global.genes["governor"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_governance_title`)}</span>`])
      ]
    },
    synthesis: {
      name: loc(`wiki_arpa_crispr_synthesis`),
      desc(wiki) {
        let base = wiki ? "2/3/4" : global.genes["synthesis"] && global.genes["synthesis"] >= 2 ? global.genes["synthesis"] >= 3 ? 4 : 3 : 2;
        let auto = wiki ? "10/25/50" : global.genes["synthesis"] && global.genes["synthesis"] >= 2 ? global.genes["synthesis"] >= 3 ? 50 : 25 : 10;
        return loc("arpa_genepool_synthesis_desc", [base, auto]);
      },
      active() {
        return global.genes["synthesis"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_synthesis_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_karyokinesis_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_cytokinesis_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    challenge: {
      name: loc(`wiki_arpa_crispr_challenge`),
      group: [
        {
          desc() {
            return loc("arpa_perks_challenge");
          },
          active() {
            return global.genes["challenge"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_unlocked_desc");
          },
          active() {
            return global.genes["challenge"] && global.genes.challenge >= 2 ? true : false;
          }
        },
        {
          desc(wiki) {
            return loc("arpa_perks_challenge2", [
              wiki ? "60/80" : global.genes["challenge"] && global.genes.challenge >= 4 ? 80 : 60,
              wiki ? "60/40" : global.genes["challenge"] && global.genes.challenge >= 4 ? 40 : 60
            ]);
          },
          active() {
            return global.genes["challenge"] && global.genes.challenge >= 3 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_perks_challenge3");
          },
          active() {
            return global.genes["challenge"] && global.genes.challenge >= 5 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_hardened_genes_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_unlocked_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_universal_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_standard_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_mastered_title`)}</span>`
          ].join(", ")
        ]),
        loc(`wiki_perks_crispr_note_challenge`, [loc(`arpa_genepool_universal_title`), loc(`arpa_genepool_standard_title`)])
      ]
    },
    ancients: {
      name: loc(`wiki_arpa_crispr_ancients`),
      group: [
        {
          desc() {
            return loc("arpa_perks_ancients");
          },
          active() {
            return global.genes["ancients"] ? true : false;
          }
        },
        {
          desc() {
            return global.genes["ancients"] && global.genes.ancients >= 4 ? loc("arpa_perks_ancients3") : loc("arpa_perks_ancients2");
          },
          active() {
            return global.genes["ancients"] && global.genes.ancients >= 2 ? true : false;
          }
        },
        {
          desc(wiki) {
            return loc("arpa_perks_ancients4", [wiki ? "25/50" : global.genes["ancients"] && global.genes.ancients >= 5 ? 50 : 25]);
          },
          active() {
            return global.genes["ancients"] && global.genes.ancients >= 3 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_ancients_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_faith_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_devotion_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_acolyte_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_conviction_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    trader: {
      name: loc(`wiki_arpa_crispr_trader`),
      desc() {
        return loc("arpa_genepool_negotiator_desc");
      },
      active() {
        return global.genes["trader"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_negotiator_title`)}</span>`])
      ]
    },
    transcendence: {
      name: loc(`wiki_arpa_crispr_transcendence`),
      desc() {
        return loc("arpa_genepool_transcendence_desc");
      },
      active() {
        return global.genes["transcendence"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_transcendence_title`)}</span>`])
      ]
    },
    queue: {
      name: loc(`wiki_arpa_crispr_queue`),
      group: [
        {
          desc() {
            return loc("arpa_genepool_geographer_desc");
          },
          active() {
            return global.genes["queue"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_architect_desc");
          },
          active() {
            return global.genes["queue"] && global.genes.queue >= 2 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_geographer_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_architect_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    plasma: {
      name: loc(`wiki_arpa_crispr_plasma`),
      desc(wiki) {
        let plasmid_cap = wiki ? "3/5" : global.genes["plasma"] >= 2 ? 5 : 3;
        return loc("arpa_genepool_mitosis_desc", [plasmid_cap]);
      },
      active() {
        return global.genes["plasma"] ? true : false;
      },
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_mitosis_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_metaphase_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    mutation: {
      name: loc(`wiki_arpa_crispr_mutation`),
      group: [
        {
          desc() {
            return global.genes["mutation"] && global.genes.mutation > 1 ? loc("arpa_perks_mutation2") : loc("arpa_perks_mutation1");
          },
          active() {
            return global.genes["mutation"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_perks_mutation3");
          },
          active() {
            return global.genes["mutation"] && global.genes.mutation >= 3 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_mutation_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_transformation_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_metamorphosis_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    bleed: {
      name: loc(`wiki_arpa_crispr_bleed`),
      group: [
        {
          desc() {
            return loc("arpa_genepool_bleeding_effect_desc", [2.5]);
          },
          active() {
            return global.genes["bleed"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_synchronicity_desc", [25]);
          },
          active() {
            return global.genes["bleed"] && global.genes.bleed >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_astral_awareness_desc");
          },
          active() {
            return global.genes["bleed"] && global.genes.bleed >= 3 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_bleeding_effect_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_synchronicity_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_astral_awareness_title`)}</span>`
          ].join(", ")
        ]),
        loc(`wiki_perks_crispr_note_bleed`, [`<span class="has-text-caution">${loc(`arpa_genepool_bleeding_effect_title`)}</span>`])
      ]
    },
    blood: {
      name: loc(`wiki_arpa_crispr_blood`),
      group: [
        {
          desc() {
            return loc("arpa_genepool_blood_remembrance_desc");
          },
          active() {
            return global.genes["blood"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_blood_sacrifice_desc");
          },
          active() {
            return global.genes["blood"] && global.genes.blood >= 2 ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_genepool_essence_absorber_desc");
          },
          active() {
            return global.genes["blood"] && global.genes.blood >= 3 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_crispr_note`, [`<span class="has-text-caution">${loc(`arpa_genepool_blood_remembrance_title`)}</span>`]),
        loc(`wiki_perks_crispr_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_genepool_blood_sacrifice_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_genepool_essence_absorber_title`)}</span>`
          ].join(", ")
        ]),
        loc(`wiki_perks_crispr_note_blood`, [loc(`arpa_genepool_blood_remembrance_title`)])
      ]
    },
    spire: {
      name: loc(`wiki_arpa_blood_spire`),
      group: [
        {
          desc() {
            return loc("arpa_blood_purify_desc");
          },
          active() {
            return global.blood["spire"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_blood_chum_desc");
          },
          active() {
            return global.blood["spire"] && global.blood.spire >= 2 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_purify_title`)}</span>`]),
        loc(`wiki_perks_blood_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_blood_chum_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    lust: {
      name: loc(`wiki_arpa_blood_lust`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_lust", [wiki ? 0.2 : 0.2 * (global.blood["lust"] ? global.blood["lust"] : 1)]);
          },
          active() {
            return global.blood["lust"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_lust_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_lust_title`)])
      ]
    },
    illuminate: {
      name: loc(`wiki_arpa_blood_illuminate`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_illuminate", [wiki ? 0.01 : 0.01 * (global.blood["illuminate"] ? global.blood["illuminate"] : 1)]);
          },
          active() {
            return global.blood["illuminate"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_illuminate_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_illuminate_title`)])
      ]
    },
    greed: {
      name: loc(`wiki_arpa_blood_greed`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_greed", [wiki ? 1 : 1 * (global.blood["greed"] ? global.blood["greed"] : 1)]);
          },
          active() {
            return global.blood["greed"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_greed_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_greed_title`)])
      ]
    },
    hoarder: {
      name: loc(`wiki_arpa_blood_hoarder`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_hoarder", [wiki ? 1 : 1 * (global.blood["hoarder"] ? global.blood["hoarder"] : 1)]);
          },
          active() {
            return global.blood["hoarder"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_hoarder_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_hoarder_title`)])
      ]
    },
    artisan: {
      name: loc(`wiki_arpa_blood_artisan`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_artisan", [wiki ? 1 : 1 * (global.blood["artisan"] ? global.blood["artisan"] : 1)]);
          },
          active() {
            return global.blood["artisan"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_artisan_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_artisan_title`)])
      ]
    },
    attract: {
      name: loc(`wiki_arpa_blood_attract`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_attract", [wiki ? 5 : 5 * (global.blood["attract"] ? global.blood["attract"] : 1)]);
          },
          active() {
            return global.blood["attract"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_attract_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_attract_title`)])
      ]
    },
    wrath: {
      name: loc(`wiki_arpa_blood_wrath`),
      group: [
        {
          desc(wiki) {
            return loc("arpa_perks_wrath", [wiki ? 5 : 5 * (global.blood["wrath"] ? global.blood["wrath"] : 1)]);
          },
          active() {
            return global.blood["wrath"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_wrath_title`)}</span>`]),
        loc(`wiki_perks_blood_note_repeat`, [loc(`arpa_blood_wrath_title`)])
      ]
    },
    prepared: {
      name: loc(`wiki_arpa_blood_prepared`),
      group: [
        {
          desc() {
            return loc("arpa_blood_prepared_desc");
          },
          active() {
            return global.blood["prepared"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_blood_compact_desc");
          },
          active() {
            return global.blood["prepared"] && global.blood.prepared >= 2 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_prepared_title`)}</span>`]),
        loc(`wiki_perks_blood_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_blood_compact_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    unbound: {
      name: loc(`wiki_arpa_blood_unbound`),
      group: [
        {
          desc() {
            return loc("arpa_blood_unbound_desc");
          },
          active() {
            return global.blood["unbound"] ? true : false;
          }
        },
        {
          desc() {
            return loc("arpa_blood_shadow_war_desc");
          },
          active() {
            return global.blood["unbound"] && global.blood.unbound >= 3 ? true : false;
          }
        },
        {
          desc(wiki) {
            return loc("arpa_perks_unbound_resist", [wiki ? "10/5" : global.blood["unbound"] && global.blood.unbound >= 4 ? 5 : 10]);
          },
          active() {
            return global.blood["unbound"] && global.blood.unbound >= 2 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_unbound_title`)}</span>`]),
        loc(`wiki_perks_blood_note_upgrade`, [
          [
            `<span class="has-text-caution">${loc(`arpa_blood_unbound_resistance_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_blood_shadow_war_title`)}</span>`,
            `<span class="has-text-caution">${loc(`arpa_blood_unbound_immunity_title`)}</span>`
          ].join(", ")
        ])
      ]
    },
    aware: {
      name: loc(`wiki_arpa_blood_aware`),
      group: [
        {
          desc() {
            return loc("arpa_blood_blood_aware_desc");
          },
          active() {
            return global.blood["aware"] ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_blood_note`, [`<span class="has-text-caution">${loc(`arpa_blood_blood_aware_title`)}</span>`])
      ]
    },
    harmonic: {
      name: loc(`harmonic`),
      group: [
        {
          desc(wiki) {
            let harmonic = calcPillar();
            return loc("perks_harmonic", [wiki ? `1-${Object.keys(races).length + 2}` : +((harmonic[0] - 1) * 100).toFixed(0), wiki ? `2-${(Object.keys(races).length + 2) * 2}` : +((harmonic[1] - 1) * 100).toFixed(0)]);
          },
          active() {
            let harmonic = calcPillar();
            return global["pillars"] && harmonic[0] > 1 ? true : false;
          }
        },
        {
          desc(wiki) {
            let harmonic = calcPillar();
            return loc("perks_harmonic2", [loc("portal_west_tower"), loc("portal_east_tower"), wiki ? `12-${(Object.keys(races).length - 1) * 12}` : +(Object.keys(global.pillars).length * 12)]);
          },
          active() {
            let harmonic = calcPillar();
            return global["pillars"] && harmonic[0] > 1 ? true : false;
          }
        }
      ],
      notes: [
        loc(`wiki_perks_harmonic_note1`),
        loc(`wiki_perks_harmonic_note2`)
      ]
    },
    novice: {
      name: loc(`perk_novice`),
      desc(wiki) {
        let rank = global.stats.feat["novice"] && global.stats.achieve["apocalypse"] && global.stats.achieve.apocalypse.l > 0 ? Math.min(global.stats.achieve.apocalypse.l, global.stats.feat["novice"]) : 1;
        let rna = wiki ? "0.5/1/1.5/2/2.5" : rank / 2;
        let dna = wiki ? "0.25/0.5/0.75/1/1.25" : rank / 4;
        return `<div>${loc("achieve_perks_novice", [rna, dna])}</div><div>${loc("achieve_perks_novice2")}</div>`;
      },
      active() {
        return global.stats.feat["novice"] && global.stats.mad > 0 ? true : false;
      },
      notes: [
        loc(`wiki_perks_progress_note1`, [10, loc(`wiki_resets_mad`)]),
        loc(`wiki_perks_progress_note2`)
      ]
    },
    journeyman: {
      name: loc(`perk_journeyman`),
      desc(wiki) {
        let rank = global.stats.feat["journeyman"] && global.stats.achieve["seeder"] && global.stats.achieve.seeder.l > 0 ? Math.min(global.stats.achieve.seeder.l, global.stats.feat["journeyman"]) : 1;
        if (wiki || rank > 1) {
          let rqueue = wiki ? "1/2/3" : rank >= 3 ? rank >= 5 ? 3 : 2 : 1;
          let queue = wiki ? "1/2" : rank >= 4 ? 2 : 1;
          return `<div>${loc("achieve_perks_journeyman2", [rqueue, queue])}</div><div>${loc("achieve_perks_journeyman3")}</div>`;
        } else {
          return `<div>${loc("achieve_perks_journeyman1", [1])}</div><div>${loc("achieve_perks_journeyman3")}</div>`;
        }
      },
      active() {
        return global.stats.feat["journeyman"] && global.stats.bioseed > 0 ? true : false;
      },
      notes: [
        loc(`wiki_perks_progress_note1`, [25, loc(`wiki_resets_bioseed`)]),
        loc(`wiki_perks_progress_note2`)
      ]
    },
    adept: {
      name: loc(`perk_adept`),
      desc(wiki) {
        let rank = checkAdept() || 1;
        let res = wiki ? "100/200/300/400/500" : rank * 100;
        let cap = wiki ? "60/120/180/240/300" : rank * 60;
        return loc("achieve_perks_adept", [res, cap]);
      },
      active() {
        return checkAdept() > 0;
      },
      notes: [
        loc(`wiki_perks_progress_note1`, [50, loc(`wiki_resets_blackhole`)]),
        loc(`wiki_perks_progress_note2`)
      ]
    },
    master: {
      name: loc(`perk_master`),
      desc(wiki) {
        let rank = global.stats.feat["master"] && global.stats.achieve["ascended"] && global.stats.achieve.ascended.l > 0 ? Math.min(global.stats.achieve.ascended.l, global.stats.feat["master"]) : 1;
        let boost1 = wiki ? "1/2/3/4/5" : rank;
        let boost2 = wiki ? "2/4/6/8/10" : rank * 2;
        return loc("achieve_perks_master", [boost1, boost2, loc("evo_mitochondria_title"), loc("evo_eukaryotic_title"), loc("evo_membrane_title"), loc("evo_organelles_title"), loc("evo_nucleus_title")]);
      },
      active() {
        return global.stats.feat["master"] && global.stats.achieve["ascended"] && global.stats.achieve.ascended.l > 0 ? true : false;
      },
      notes: [
        loc(`wiki_perks_progress_note1`, [75, loc(`wiki_resets_ascension`)]),
        loc(`wiki_perks_progress_note2`)
      ]
    },
    grandmaster: {
      name: loc(`perk_grandmaster`),
      desc(wiki) {
        let rank = global.stats.feat["grandmaster"] && global.stats.achieve["corrupted"] && global.stats.achieve.corrupted.l > 0 ? Math.min(global.stats.achieve.corrupted.l, global.stats.feat["grandmaster"]) : 1;
        let boost = wiki ? "1/2/3/4/5" : rank;
        return loc("achieve_perks_grandmaster", [boost]);
      },
      active() {
        return global.stats.feat["grandmaster"] && global.stats.achieve["corrupted"] && global.stats.achieve.corrupted.l > 0 ? true : false;
      },
      notes: [
        loc(`wiki_perks_progress_note1`, [100, loc(`wiki_resets_infusion`)]),
        loc(`wiki_perks_progress_note2`)
      ]
    }
  };
  function drawPerks() {
    clearElement($("#perksPanel"));
    let perks = $("#perksPanel");
    let hasPerk = false;
    Object.keys(perkList).forEach(function(perk) {
      if (perkList[perk].hasOwnProperty("group")) {
        let isactive = false;
        let gperk = $(`<div class="achievement"><span class="has-text-warning">${perkList[perk].name}</span></div>`);
        perkList[perk].group.forEach(function(subperk) {
          if (subperk.active()) {
            isactive = true;
            gperk.append($(`<div class="perk">${subperk.desc()}</div>`));
          }
        });
        if (isactive) {
          hasPerk = true;
          perks.append(gperk);
        }
      } else {
        if (perkList[perk].active()) {
          hasPerk = true;
          perks.append($(`<div class="achievement"><span class="has-text-warning">${perkList[perk].name}</span><span>${perkList[perk].desc()}</span></div>`));
        }
      }
    });
    if (!hasPerk) {
      perks.append($(`<div class="has-text-caution">${loc(`perks_none`)}</div>`));
    }
  }
  function drawStats() {
    clearElement($("#statsPanel"));
    let stats = $("#statsPanel");
    stats.append(`<div><span class="has-text-success">${loc("achieve_stats_overall")}</span></div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_plasmid_earned")}</span> {{ s.plasmid | format }}</div>`);
    if (global.stats.antiplasmid > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_antiplasmid_earned")}</span> {{ s.antiplasmid | format }}</div>`);
    }
    if (global.stats.phage > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_phage_earned")}</span> {{ s.phage | format }}</div>`);
    }
    if (global.stats.dark > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_dark_earned")}</span> {{ s.dark | format }}</div>`);
    }
    if (global.stats.harmony > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_harmony_earned")}</span> {{ s.harmony | format }}</div>`);
    }
    if (global.stats.blood > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_blood_earned")}</span> {{ s.blood | format }}</div>`);
    }
    if (global.stats.artifact > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_artifact_earned")}</span> {{ s.artifact | format }}</div>`);
    }
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_knowledge_spent")}</span> {{ s.know | t_know | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_starved_to_death")}</span> {{ s.starved | t_starved | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_died_in_combat")}</span> {{ s.died | t_died | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_game_days_played")}</span> {{ s.days | played | format }}</div>`);
    if (global.stats.portals > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_portals")}</span> {{ s.portals | format }}</div>`);
    }
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_total_resets")}</span> {{ s.reset | format }}</div>`);
    if (global.stats.mad > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_mad_resets")}</span> {{ s.mad | format }}</div>`);
    }
    if (global.stats.bioseed > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_bioseed_resets")}</span> {{ s.bioseed | format }}</div>`);
    }
    if (global.stats.cataclysm > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_cataclysm_resets")}</span> {{ s.cataclysm | format }}</div>`);
    }
    if (global.stats.blackhole > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_blackhole_resets")}</span> {{ s.blackhole | format }}</div>`);
    }
    if (global.stats.ascend > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_ascension_resets")}</span> {{ s.ascend | format }}</div>`);
    }
    if (global.stats.descend > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_descension_resets")}</span> {{ s.descend | format }}</div>`);
    }
    if (global.stats.apotheosis > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_apotheosis_resets")}</span> {{ s.apotheosis | format }}</div>`);
    }
    if (global.stats.aiappoc > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_aiappoc_resets")}</span> {{ s.aiappoc | format }}</div>`);
    }
    if (global.stats.matrix > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_matrix_resets")}</span> {{ s.matrix | format }}</div>`);
    }
    if (global.stats.retire > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_retire_resets")}</span> {{ s.retire | format }}</div>`);
    }
    if (global.stats.eden > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_eden_resets")}</span> {{ s.eden | format }}</div>`);
    }
    if (global.stats.terraform > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_terraform_resets")}</span> {{ s.terraform | format }}</div>`);
    }
    if (global.stats.geck > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_gecks")}</span> {{ s.geck | format }}</div>`);
    }
    stats.append(`<div class="cstat"><span class="has-text-success">${loc("achieve_stats_current_game")}</span></div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_knowledge_spent")}</span> {{ s.know | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_starved_to_death")}</span> {{ s.starved | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_died_in_combat")}</span> {{ s.died | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_attacks_made")}</span> {{ s.attacks | format }}</div>`);
    stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_game_days_played")}</span> {{ s.days | format }}</div>`);
    if (global.stats.dkills > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_demons_kills")}</span> {{ s.dkills | format }}</div>`);
    }
    if (global.stats.sac > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_sacrificed")}</span> {{ s.sac | format }}</div>`);
    }
    if (global.stats.murders > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_murders")}</span> {{ s.murders | format }}</div>`);
    }
    if (global.stats.psykill > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_psymurders")}</span> {{ s.psykill | format }}</div>`);
    }
    if (global.stats.uDead > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_unstable")}</span> {{ s.uDead | format }}</div>`);
    }
    if (global.resource.hasOwnProperty("Thermite") && global.resource.Thermite.amount > 0) {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_thermite")}</span> {{ r.Thermite.amount | res }}</div>`);
    }
    let hallowed2 = getHalloween();
    if (hallowed2.active) {
      let trick = "";
      if (global.stats.cfood >= 13 || global.race["cataclysm"] || global.race["orbit_decayed"] || global.race["warlord"]) {
        trick = `<span>${trickOrTreat(7, 12, true)}</span>`;
      }
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_trickortreat")}</span> {{ s.cfood | format }} ${trick}</div>`);
    }
    if (global.race.hasOwnProperty("gods") && global.race.gods != "none") {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_gods")}</span> {{ g.gods | species }}</div>`);
    }
    if (global.race.hasOwnProperty("old_gods") && global.race.old_gods != "none") {
      stats.append(`<div><span class="has-text-warning">${loc("achieve_stats_old_gods")}</span> {{ g.old_gods | species }}</div>`);
    }
    vBind({
      el: "#statsPanel",
      data: {
        s: global.stats,
        r: global.resource,
        g: global.race
      },
      filters: {
        played(d) {
          return d + global.stats.tdays;
        },
        t_know(k) {
          return k + global.stats.tknow;
        },
        t_starved(s) {
          return s + global.stats.tstarved;
        },
        t_died(d) {
          return d + global.stats.tdied;
        },
        format(s) {
          return s.toLocaleString();
        },
        res(r) {
          return (+r.toFixed(2)).toLocaleString();
        },
        species(s) {
          switch (s) {
            case "custom":
              return global.custom.race0.name;
            case "hybrid":
              return global.custom.race1.name;
            default:
              return loc(`race_${s}`);
          }
        }
      }
    });
  }

  // src/wiki/change.js
  var changeList = [
    {
      version: `1.4.9`,
      date: `9/21/2025`,
      changes: [
        `Bluecollar Governor: Raised production effect from 10/12% to 14/18%, now also affects factories.`,
        `Educator Governor: Raises professor effect by +30%.`,
        `Noble Governor: Mansion gives +7 citizens when upgraded.`,
        `Media Governor: 30/35% of overcapped morale can go past the morale cap.`,
        `Sports Governor: No longer has a soldier healing bonus, now raises surveyor infernite by 10/12%`,
        `Soldier Governor: Added 40%/50% healing bonus.`,
        `Added Japanese language.`,
        `Added an "All" tab to the custom race lab.`,
        `Added filled rate animation for resources, click resource name to disable.`,
        `Untrustworthy now affects Titan banks.`,
        `Soul capacitors now lose stored energy if you turn off all capacitors.`,
        `Discharge now affects the processing factory bonus instead of adamantite directly.`,
        `Servant hunters no longer produce 4x more furs with high pop.`,
        `Hunter job stress is now affected by high pop.`,
        `Synth assembly scales slower with high population.`,
        `Eldritch cattle slaughtering gives more food.`,
        `Tusked no longer penalized by hivemind`,
        `Adv. Spy operator is no longer free to use in Truepath without unlocking.`,
        `Many misc bug fixes, can't be bothered to document them.`
      ]
    },
    {
      version: `1.4.8`,
      date: `5/16/2025`,
      changes: [
        `Psychic now works with Elysanite.`,
        `Parasite Assembly now works on a delay timer rather than a wind restriction.`,
        `Fixed bugs with trait mutation costs.`
      ]
    },
    {
      version: `1.4.7`,
      date: `5/15/2025`,
      changes: [
        `Pit Miners now produce Chrysotile outside of Isolation.`,
        `Fixed issue with "Hybrid" and Enlightenment.`,
        `Fixed some problems with entering Isolation and ending Quarantine.`,
        `Fixed some broken wiki trait displays.`
      ]
    },
    {
      version: `1.4.6`,
      date: `5/13/2025`,
      changes: [
        `Added Catnip and Anise traits to Ent/Pinguicula.`,
        `Fixed issue with saving trait ranks to custom export.`,
        `Performance Optimizations.`
      ]
    },
    {
      version: `1.4.5`,
      revision: `b`,
      date: `5/12/2025`,
      changes: [
        `Fixed issues with loading custom race data into custom lab.`,
        `Crates now correctly cost Bones instead of Boneweave with Iron Wood trait.`
      ]
    },
    {
      version: `1.4.5`,
      revision: `a`,
      date: `5/12/2025`,
      changes: [
        `Parasite now scales with rank.`,
        `Synthetic parasites can now only assemble new citizens when it's windy.`
      ]
    },
    {
      version: `1.4.5`,
      date: `5/11/2025`,
      changes: [
        `New Custom/Hybrid Lab mechanics.`,
        `Added New Theme GrubBox (RedGreen CB) for Red/Green color blind players.`,
        `Technophobe perk race complexity changed to flat gene point bonus.`,
        `Overtapped has been removed, Negative traits instead pay a complexity tax.`,
        `Enviromentalist now scales with trait rank.`,
        `Thalassophobia replaced with Unfavored.`,
        `Optimistic cost lowered from 5 points to 3.`,
        `Fixed bug that could cause archfiends to queue with extra weapons.`
      ]
    },
    {
      version: `1.4.4`,
      date: `5/7/2025`,
      changes: [
        `The native rank of Empowered for Nephilim is now 2.`,
        `Build queue will no longer spend Warlord skill points.`,
        `Dreaded will no longer unlock from Apotheosis.`,
        `Custom Hybrids will no longer unlock Gross.`
      ]
    },
    {
      version: `1.4.3`,
      date: `5/4/2025`,
      changes: [
        `Evil Universe Scenario: Warlord.`,
        `Added Planned Obsolescence Feat.`,
        `You can now queue Spire Mechs.`,
        `You can now pet your cat or dog once every 5 minutes.`,
        `Symposium now gain Knowledge for all crew in Andromeda.`,
        `Evil Authority adjustments for Cataclysm, Lone Survivor, and Orbit Decay.`,
        `Soldiers assigned to Fortress guard duty now contribute Authority.`,
        `Updated Empowered trait mechanics.`,
        `Adjusted values for Master Artisan.`,
        `Evil Wendigo can now use Shovels.`,
        `Racconar can now recruit quarry workers.`,
        `You can no longer get more then 100 servants from each TP T4 reset.`,
        `You are now capped at 100 skilled servants from TP resets.`,
        `Empowered Concealment Wards changed to Empowered Nexus in Witch Hunter.`,
        `Breakdown improvements for some resources.`,
        `Uranium geology bonus now applies to Uranium Ash.`,
        `Spire boss resists now have a random element.`,
        `Slitheryn once again have slow digestion.`,
        `Fixed bug with Rogue trait that set crafted resources to 0.`,
        `Fixed bug that caused Hybrid species to throw an error when triggering greatness resets.`,
        `Fixed bug that caused Hybrid species to throw an error when triggering a Cataclysm reset.`,
        `Fixed issue with Iridium Smelters miscalculating result.`,
        `Fixed a variety of Joyless edge cases.`,
        `Fixed Space Casino appearing improperly in power grid.`,
        `Fixed Potato Battery in antimatter universe not benefiting from dark energy.`,
        `Fixed issue with Resonance not unlocking if you pillared without unlocking the gate towers.`,
        `Fixed divide by zero error with Soul Forge when you have 0 Authority.`,
        `Deprecated trait Frail will no longer show up in the Custom Lab.`,
        `Accessibility improvements.`,
        `Minor misc bug fixes.`
      ]
    },
    {
      version: `1.4.2`,
      date: `3/23/2025`,
      changes: [
        `New Evil Universe Mechanics.`,
        `You now must maintain your Evil Authority.`,
        `Evil Hell now spawns 10% more demons than other universes.`,
        `Evil Dark Energy effects changed.`,
        `Evil Biodome produces less food but boosts marine garrison.`,
        `Various Evil flavor updates.`,
        `Various bug fixes.`
      ]
    },
    {
      version: `1.4.1`,
      revision: `a`,
      date: `12/2/2024`,
      changes: [
        `Fixed Ore Processor.`
      ]
    },
    {
      version: `1.4.1`,
      date: `12/1/2024`,
      changes: [
        `Racconar now use the special Forager trait in place of Herbivore and Carnivore.`,
        `Genetics Lab now shows rank adjustments with Empowered.`,
        `Fixed wiki display of the Grand Death Tour progress.`,
        `Normalized Mimic and Imitate ranks.`,
        `Fliers will no longer be offered a new cement production method in Edenic realm.`,
        `Fixed issues with powered down Stargate.`,
        `Fixed various minor bugs.`
      ]
    },
    {
      version: `1.4.0`,
      date: `11/28/2024`,
      changes: [
        `Push past the Spire and invade the Edenic Realms.`,
        `Added new planet trait: Kamikaze.`,
        `Added new CRISPR upgrade Bureaucratic Efficiency.`,
        `The Grand Death Tour is available after completing Apotheosis.`,
        `Custom Race lab now allows player to set a desired fanaticism trait.`,
        `You can no longer have more than 10 negative traits on a custom.`,
        `Invalid legacy customs will take a penalty called Overtapped in future game versions.`,
        `Truepath Ships can now be queued for construction.`,
        `Exotic Materials are now harder to replicate.`,
        `Progenitor races are now shown on stats page.`,
        `Symposium is now affected by piracy.`,
        `Gate Turrets will now kill demons when the Soul Forge is turned off.`,
        `Stellar Engine now has diminishing returns when pushed to extreme levels.`,
        `The number of spies available when starting a spy op now affects mission time.`,
        `Fluidized Bed Reactor no longer incorrectly applies to Nano Tubes.`,
        `Shrines now cycle their effect with moon phase if purchased during a full, new, or quarter moon.`,
        `Slitheryn Slow Digestion replaced with Astrologer.`,
        `Slow trait value changed from -5 to -6.`
      ]
    },
    {
      version: `1.3.17`,
      revision: `c`,
      date: `11/1/2024`,
      changes: [
        `Non-Evil Wendigo can now Trick or Treat!`
      ]
    },
    {
      version: `1.3.17`,
      revision: `b`,
      date: `10/29/2024`,
      changes: [
        `Fixed Ghost #3 with Forge Trait.`,
        `Fixed Emocorn gloomy trait.`
      ]
    },
    {
      version: `1.3.17`,
      revision: `a`,
      date: `10/27/2024`,
      changes: [
        `Fixed Trick or Treat! Feat tracker.`
      ]
    },
    {
      version: `1.3.17`,
      date: `10/13/2024`,
      changes: [
        `Cruisers now grant the correct number of soldiers in Fasting scenario.`,
        `Mass Ejector will now show a timer until destabilization if T3 previously completed.`,
        `Fixed Coal income in Cataclysm.`,
        `Adjusted High Pop growth rates.`,
        `Craftsmen have been renamed to Crafters.`,
        `Fixed some issues with the Wiki.`,
        `Fixed display error with Cultural Center.`
      ]
    },
    {
      version: `1.3.16`,
      revision: `a`,
      date: `9/30/2024`,
      changes: [
        `Fixed an issue with with Gravity Well challenge and having too many Railways.`
      ]
    },
    {
      version: `1.3.16`,
      revision: `a`,
      date: `9/30/2024`,
      changes: [
        `Fixed an issue with with Gravity Well challenge and having too many Railways.`
      ]
    },
    {
      version: `1.3.16`,
      date: `9/29/2024`,
      changes: [
        `Pickaxes once again affect Coal Mines.`,
        `Changed Scientific Notation to Engineering Notation.`,
        `Added Scientific Notation option.`
      ]
    },
    {
      version: `1.3.15`,
      revision: `a`,
      date: `9/21/2024`,
      changes: [
        `Fixed Secret to Immortality feat not being awarded.`
      ]
    },
    {
      version: `1.3.15`,
      date: `9/19/2024`,
      changes: [
        `Fasting scenario Demonic Infusion goal updated with new tastier experience.`,
        `Starvation risk tooltips added for Fasting scenario.`,
        `Mastery listed under stats tab now displays unmodified value.`,
        `Dark Bomb will no longer appear as an option after the demon lord is defeated.`
      ]
    },
    {
      version: `1.3.14`,
      revision: `a`,
      date: `9/2/2024`,
      changes: [
        `Fixed incorrect scientist label.`
      ]
    },
    {
      version: `1.3.14`,
      date: `9/2/2024`,
      changes: [
        `Fixed various bugs with Fasting scenario.`,
        `Difficulty tweaks to Fasting scenario.`,
        `Added feat Icon for Fasting.`,
        `Ships in route to the Dwarf planet now check their fuel consumption.`,
        `Manual crafting is no longer affected by High Population trait.`,
        `Misc bug fixes.`
      ]
    },
    {
      version: `1.3.13`,
      revision: `b`,
      date: `8/6/2024`,
      changes: [
        `Fixed issue with starting Cataclysm Scenerio.`,
        `Fixed some issues with Fasting Scenario.`,
        `Fixed an issue with Replicator scheduler and supplies.`
      ]
    },
    {
      version: `1.3.13`,
      revision: `a`,
      date: `8/6/2024`,
      changes: [
        `Fix a bug that prevented crafting in Cataclysm and Lone Survivor modes.`
      ]
    },
    {
      version: `1.3.13`,
      date: `8/6/2024`,
      changes: [
        `New Scenario by CondoSlime: Fasting.`,
        `More queue config options.`,
        `Wiki Search feature by sm3232`,
        `Language Updates.`,
        `Random bug fixes.`
      ]
    },
    {
      version: `1.3.12`,
      date: `3/30/2024`,
      changes: [
        `Fixed Easter Event.`
      ]
    },
    {
      version: `1.3.11`,
      date: `2/19/2024`,
      changes: [
        `Community fixes:`,
        `New Power settings.`,
        `Fixed loot bug with Gravity Well and Dark Energy.`,
        `Fixed pet names in pet events.`,
        `Fixed issue with Aquarius sign and Tourist Centers.`,
        `Fixed bugs with Arraak and Human thralls.`,
        `Many bug fixes related to High Population trait.`,
        `Many language updates.`
      ]
    },
    {
      version: `1.3.10`,
      date: `1/23/2024`,
      changes: [
        `Added Gravity Well challenge mode.`,
        `Prepping the Bioseed ship for launch now has a Helium-3 cost.`,
        `Added new pet minor event`,
        `Polish language translation by Wied\u017Amin.`,
        `German language translation by FutterSillo.`,
        `Various UI improvements and language updates.`
      ]
    },
    {
      version: `1.3.9`,
      date: `8/20/2023`,
      changes: [
        `Pressing the same tab key multiple times will now cycle the subtabs.`,
        `Reduced Mana costs of Improved Concealment, Study Corrupt Gem, & Outerplane Summon in Witch Hunter for non-gold star players.`,
        `Fixed Bilateral Symmetry DNA bonus.`,
        `Updated Korean and Chinese langs.`,
        `Screen Reader improvement for achievements display.`
      ]
    },
    {
      version: `1.3.8`,
      revision: `a`,
      date: `6/1/2023`,
      changes: [
        `Fixed high pop scaling.`
      ]
    },
    {
      version: `1.3.8`,
      date: `6/1/2023`,
      changes: [
        `Unfathomable bug fixes.`,
        `Psychic powers up time now scale with rank of Ancient Nightmare.`,
        `Additional Psychic power upgrades.`,
        `Intergalactic Raider renamed to Corsair.`
      ]
    },
    {
      version: `1.3.7`,
      revision: `a`,
      date: `5/30/2023`,
      changes: [
        `Fixed issue with drawing the same alien species twice in intergalactic content.`,
        `Adjusted Mana costs for some research techs in Witch Hunter.`
      ]
    },
    {
      version: `1.3.7`,
      date: `5/29/2023`,
      changes: [
        `Added Magic universe exclusive challenge: Witch Hunter.`,
        `Reduced Encrypted Data cost of Data Analysis, Advanced Medkits, Automated Warehousing, Elerium Extraction, and Drone Warfare techs.`,
        `Star Forge smelting bonus rebalanced.`,
        `Antimatter Dark Energy effect now applies to Truepath Ship power generation.`,
        `Fixed Magocracy Crystal bonus.`,
        `Reduced Crystal cost of Alchemy.`,
        `Fixed Humpback trait rank scaling.`,
        `Infiltrator can now steal Alien Biotech on Truepath.`,
        `Fixed brownout issue with using Replicator Gov task when constructing a new powered building.`,
        `Fixed rejuvenated trashed planet bonus.`,
        `Fixed orbit period on reterraformed planets.`
      ]
    },
    {
      version: `1.3.6`,
      date: `4/22/2023`,
      changes: [
        `Added Astrological signs.`,
        `Added Motivated Event.`,
        `Operating Bases now function as Hospitals in Orbit Decay scenario.`,
        `Stellar Forge is now locked to using Star Fuel for smelting.`,
        `Species with the Forge trait can now use Inferno Fuel and Star Fuel.`,
        `Reduced Wireless Signal needed to Contact womlings in Lone Survivor.`
      ]
    },
    {
      version: `1.3.5`,
      revision: `c`,
      date: `4/16/2023`,
      changes: [
        `Made Egg #17 easier to get in Cataclysm mode.`
      ]
    },
    {
      version: `1.3.5`,
      revision: `b`,
      date: `4/9/2023`,
      changes: [
        `Increased egg accessibility with certain traits or challenge modes.`
      ]
    },
    {
      version: `1.3.5`,
      revision: `a`,
      date: `4/8/2023`,
      changes: [
        `Fixed a bug that caused eggs 16-18 not to count for unlocking the egg hunt feat.`
      ]
    },
    {
      version: `1.3.5`,
      date: `4/7/2023`,
      changes: [
        `Avian species now have the Flier trait.`,
        `Avian Rigid trait replaced with Sky Lover.`,
        `Added Wireless storage to High-Tech farm in isolation`,
        `Fixed truepath dreadnought power costs.`,
        `Fixed a bug that could assign extra challenge genes.`,
        `Fixed a bug with changing languages with active Tau Ceti content.`,
        `Fixed many issues with preload tab content in the early game.`
      ]
    },
    {
      version: `1.3.4`,
      revision: `b`,
      date: `3/30/2023`,
      changes: [
        `Prevented some bugs caused by distributed power mode from occurring.`,
        `You can now unlock World Domination, Illuminati, Syndicate, and Pacifist in Truepath.`
      ]
    },
    {
      version: `1.3.4`,
      revision: `a`,
      date: `3/25/2023`,
      changes: [
        `A restore point is now made if you select isolation protocol.`
      ]
    },
    {
      version: `1.3.4`,
      date: `3/24/2023`,
      changes: [
        `Evolving Synth can now choose imitation race from any species killed by an AI Apocalypse.`,
        `Fixed issue with miscalculating low fuel usage for various power generating structures.`,
        `Extractor Ship Isolation output boosted by 20%.`,
        `Added additional Hooved reskins.`,
        `Fixed various issues with Preload Tab Content.`,
        `Explorer Ship config is now locked down for Engine, Sensor, and Weapon components.`,
        `Skilled Servants assigned to craft inactive resources will now be refunded.`
      ]
    },
    {
      version: `1.3.3`,
      revision: `a`,
      date: `3/20/2023`,
      changes: [
        `Fixed a bug that could cause the Test Launch to be unavailable.`
      ]
    },
    {
      version: `1.3.3`,
      date: `3/15/2023`,
      changes: [
        `Rebalanced Soul Gem drop mechanics.`,
        `Added Annihilation Feat.`,
        `Added additional Mass Ejector Optimizer config mode.`,
        `Servants are no longer affected by most racial traits.`,
        `The Lone Survivor can no longer benefit from Hivemind.`,
        `Fixed High Pop issue with Pit Miners.`,
        `Fixed bug with unlocking Replicator without a Governor.`
      ]
    },
    {
      version: `1.3.2`,
      revision: `c`,
      date: `3/8/2023`,
      changes: [
        `Fixed cataclysm reset while having preload tab content enabled.`
      ]
    },
    {
      version: `1.3.2`,
      revision: `b`,
      date: `3/5/2023`,
      changes: [
        `Fixed Rock Quarry under industry tab for Smoldering players.`
      ]
    },
    {
      version: `1.3.2`,
      revision: `a`,
      date: `3/5/2023`,
      changes: [
        `Adjusted hell calculation.`
      ]
    },
    {
      version: `1.3.2`,
      date: `3/4/2023`,
      changes: [
        `High-Tech Factory changed back to tool modifier, however value is increased from original 25% to 90%.`,
        `Advanced Material Synthesis increased from 50% to 65%.`,
        `Added new interaction between Hell Surveyors and Drone victims.`,
        `Fixed bug that would cause Replicator Governor task to swap resources when focusing a resource without a cap.`,
        `Fixed inability to produce Chrysotile in Isolation.`
      ]
    },
    {
      version: `1.3.1`,
      date: `3/3/2023`,
      changes: [
        `Added Advanced Material Synthesis tech to Isolation path.`,
        `High-Tech Factory crafting bonus changed from a Tool modifier to a direct multiplier.`,
        `Updated Mass Ejector Optimizer logic.`,
        `Fixed a bug that broke Cataclysm reset.`,
        `Fixed fuel calculation bug with Moon Bases and Spaceports.`,
        `Fixed issue with self replicating Synth and Nano.`,
        `Fixed bugs with purchasing CRISPR techs in Antimatter universe.`
      ]
    },
    {
      version: `1.3.0`,
      revision: `b`,
      date: `3/1/2023`,
      changes: [
        `Fixed issue with Mass Ejector Optimizer gov task breaking the governor subtab.`
      ]
    },
    {
      version: `1.3.0`,
      revision: `a`,
      date: `3/1/2023`,
      changes: [
        `Fixed Antimatter universe.`
      ]
    },
    {
      version: `1.3.0`,
      date: `3/1/2023`,
      changes: [
        `The True Path has been extended, explore Tau Ceti and expand your civilization.`,
        `Added Perks: Evolve Master and Evolve Grandmaster.`,
        `Added Distributed Low Power mode setting.`,
        `Added Precognition CRISPR upgrade.`,
        `Strong trait now buffs basic jobs but has a weaker effect on manual resource collection.`,
        `Ships in Truepath can now only be scrapped at the Shipyard.`,
        `Truepath Sensor Range and Costs adjusted. Range now depends partly on base ship class.`,
        `Queue stacks now indicate first block vs last blocking resource with a gradient indicator.`,
        `Added screen reader improvements for blocking resources.`,
        `You can no longer unlock Anarchist by Cataclysm.`,
        `Syndicate will now also steal food from Biodomes.`,
        `Reinforced Shed upgrade now requires unlocking Iron Mining.`,
        `You must now construct a Titan Habitat before a Titan Mine.`,
        `Removed dark background effect from modal popups.`,
        `Increased Entrepreneur Governor trade bonus from 75% to 125% and Bank capacity boost from 10% to 12%.`,
        `Increased Media Governor morale bonuses and Library bonus.`,
        `Increased Soldier Governor combat bonus from 5% to 25%.`,
        `Increased Educator Governor knowledge bonus from 5% to 6%.`,
        `Increased Spiritualist Governor worker bonus from 10% to 20% and tourism bonus from $2 to $5 per Temple.`,
        `Increased Noble Governor tax cap bonus from 10% to 20%.`,
        `Bluecollar Governor now increases output of Coal and Oil power plants and boosts Miners, Smelter, and Oil Derrick.`,
        `Bureaucrat Governor now provides a slight boost to government effects.`
      ]
    },
    {
      version: `1.2.21`,
      date: `1/10/2023`,
      changes: [
        `New Achievement filtering options in Wiki.`,
        `Updated Chinese lang file.`,
        `Updated Korean lang file.`
      ]
    },
    {
      version: `1.2.20`,
      date: `9/16/2022`,
      changes: [
        `New homelessness system.`,
        `Factory, Mining Droids, and Graphene Plants will remember resource assignment after a low power shutdown.`,
        `Terraforming and Ascension can no longer be queued or multi-clicked.`,
        `AI Cores show correct bonus in tooltip.`,
        `Stealing Rocketry will now unlock rival in Truepath.`,
        `Playful will no longer remove unemployed stress with no hunters.`,
        `Andromeda Citizens will no longer stick around if abandoned by a stargate shutdown.`,
        `Fixed various bugs with mutating in or out some traits.`,
        `Made some improvements for screen readers to determine active state of challenges.`
      ]
    },
    {
      version: `1.2.19`,
      revision: `a`,
      date: `8/21/2022`,
      changes: [
        `Home Planet Orbital structures are now merged with the Moon instead of Red Planet in Cataclysm.`
      ]
    },
    {
      version: `1.2.19`,
      date: `8/20/2022`,
      changes: [
        `Added rank scaling effects to traits: Carnivore, Hooved, Leathery, Unified, & Magnificent.`,
        `Structures orbiting the home planet are now moved to the Red planet after Orbit Decay or during Cataclysm.`,
        `Fixed a bug with deactivating fuel consuming structures when fuel runs dry.`,
        `Already active Governor tasks will no longer display for assignment in other task slots.`,
        `Constructing a Stellar or Infernal Forge will now assign Iron as a default resource instead of nothing.`,
        `Buffed effects of Star Forge fueled smelting.`,
        `Fixed an incorrect source label for money storage in Orbit Decay.`
      ]
    },
    {
      version: `1.2.18`,
      revision: `a`,
      date: `8/14/2022`,
      changes: [
        `Fixed ARPA queueing.`
      ]
    },
    {
      version: `1.2.18`,
      date: `8/14/2022`,
      changes: [
        `More accurate timers when using Governor Trash Management task.`,
        `Optimistic Min Morale effect now scales with trait rank.`,
        `Fixed TP loot table when Assaulting or Sieging rival.`
      ]
    },
    {
      version: `1.2.17`,
      revision: `a`,
      date: `8/10/2022`,
      changes: [
        `Cheese Event power is now scaled with your cheese level.`,
        `Fixed Soft Reset bug with Rejuvenated.`
      ]
    },
    {
      version: `1.2.17`,
      date: `8/10/2022`,
      changes: [
        `New Hell stats tracking and analytics.`,
        `Fixed Genetics not unlocking in Cataclysm.`,
        `Fixed many High Pop scaling interactions.`,
        `Fixed some loading bugs with wiki when no save data is present.`,
        `Updated various wiki entries and calculators.`,
        `Updated Pig Latin.`
      ]
    },
    {
      version: `1.2.16`,
      revision: `a`,
      date: `8/8/2022`,
      changes: [
        `Fixed OD bugs with Ziggurat, Garage, and Fabrication.`,
        `Fixed Launch Facility sometimes getting stuck in queue.`
      ]
    },
    {
      version: `1.2.16`,
      date: `8/4/2022`,
      changes: [
        `Added Orbit Decay Challenge.`,
        `Added Retrograde planetary trait.`,
        `New achievement: Better dead than red.`,
        `New CRISPR upgrade: Civil Service.`,
        `Other stuff the dev was too lazy to document.`
      ]
    },
    {
      version: `1.2.15`,
      revision: `a`,
      date: `7/1/2022`,
      changes: [
        `Fixed bug that prevented games without save data from loading.`
      ]
    },
    {
      version: `1.2.15`,
      date: `7/1/2022`,
      changes: [
        `Firework Festival now starts on July 1st and ends July 4th.`,
        `Added Dracula theme by azzzertyy.`,
        `Fixed bug with Horseshoe governor and multiplier keys.`,
        `Fixed issues with starting Cataclysm as Synth.`,
        `Fixed bugs with wrong path techs being displayed.`,
        `Evil Synth now start with a Graveyard instead of a Lumberyard.`,
        `Deify and study can no longer be queued at same time.`,
        `Restore backup no longer requires double clicking to trigger confirmation box.`
      ]
    },
    {
      version: `1.2.14`,
      revision: `a`,
      date: `4/19/2022`,
      changes: [
        `Fixed some minor bugs.`,
        `Updated some translations.`
      ]
    },
    {
      version: `1.2.14`,
      date: `4/1/2022`,
      changes: [
        `Added Titan Mine slider to Industry tab.`,
        `Added additional popup confirmation to Restore Backup.`,
        `Nanite Factory interface now has tooltips for each resource`,
        `The Vault Discovery event can no longer occur if there are 0 Archaeologists and/or if Suppression is at 0%`,
        `Fixed bugs related to unlocking the Fool feat.`,
        `Fixed bugs with Mass Ejector optimizor governor task.`
      ]
    },
    {
      version: `1.2.13`,
      date: `3/31/2022`,
      changes: [
        `Restore Backup must now be clicked twice to trigger.`
      ]
    },
    {
      version: `1.2.12`,
      revision: `c`,
      date: `3/7/2022`,
      changes: [
        `Fixed Double Density achievement.`
      ]
    },
    {
      version: `1.2.12`,
      revision: `b`,
      date: `3/2/2022`,
      changes: [
        `Fixed logic fault with mech constructor inferno upgrades.`
      ]
    },
    {
      version: `1.2.12`,
      revision: `a`,
      date: `3/1/2022`,
      changes: [
        `Fixed some bugs with planet traits.`,
        `Fixed bug with attacking on Swamp planets.`
      ]
    },
    {
      version: `1.2.12`,
      date: `2/28/2022`,
      changes: [
        `Planets can now have upto two traits.`,
        `Advanced Biomes: Savanna, Swamp, Ashland, and Taiga can now appear.`,
        `Added Permafrost planetary trait.`,
        `Forest Biome lumber bonus changed from 15% to 20%.`,
        `Exotic materials are now ranked higher by the Mass Optimizer governor task.`,
        `Repair droid effect on Carport repairs buffed from 5% to 8%.`,
        `You must now discover the Hell Vault through Archaeology.`,
        `Water now has Mass.`
      ]
    },
    {
      version: `1.2.11`,
      date: `2/16/2022`,
      changes: [
        `Added Doomed achievement to the perks lists.`,
        `Added Governor CRISPR tree to perks list.`,
        `Updated prestige gain/bonus calculators.`,
        `Fixed Ritual Casting not showing up in Industry in Cataclysm.`,
        `Detritivores no longer see the Farming ritual.`,
        `Fixed Entertainer tooltip showing twice the effect of Musical.`,
        `Fixed Gauss Rifles showing the effect for Disruptor Rifles.`,
        `Fixed Water Freighter tooltip showing half the Helium-3 cost.`,
        `Fixed some affordability checks.`
      ]
    },
    {
      version: `1.2.10`,
      date: `2/7/2022`,
      changes: [
        `Bioseed probes now have significantly less cost creep inside True Path scenario.`,
        `You can no longer manually buy or sell resources while the game is paused.`,
        `Fixed bug with High Pop trait and Savings Bonds granting too much money.`,
        `Minor bug fixes`
      ]
    },
    {
      version: `1.2.9`,
      date: `1/29/2022`,
      changes: [
        `Spies may now sell you out when caught or escape when failing a mission.`,
        `Infiltrator can now steal Quantium tech inside True Path.`,
        `Genetics Lab UI updated.`
      ]
    },
    {
      version: `1.2.8`,
      revision: `a`,
      date: `1/19/2022`,
      changes: [
        `Fixed Farmer per Farm scaling with High Pop trait.`,
        `Adjusted low end scaling of High Pop Hivemind trait.`,
        `Wireless Signal cost for Symposium lowered.`,
        `Added Anarchy scaling with High Pop`
      ]
    },
    {
      version: `1.2.8`,
      date: `1/19/2022`,
      changes: [
        `Insectoid genus redesigned with High Population trait.`,
        `Fixed bug that caused incorrect timer calculations when using Slow or Hyper trait at any rank other than 1.`
      ]
    },
    {
      version: `1.2.7`,
      revision: `a`,
      date: `1/11/2022`,
      changes: [
        `Fixed storage bug with standard universe.`
      ]
    },
    {
      version: `1.2.7`,
      date: `1/11/2022`,
      changes: [
        `Failed Experiment Challenge mode.`,
        `Ziggurat bonus separated from base production of buildings.`,
        `Fixed bug that prevented smoldering races from being able to loot Chrysotile`,
        `Fixed bug that would cause Intergalactic Tech page in wiki not to load if you were playing in Antimatter universe.`
      ]
    },
    {
      version: `1.2.6`,
      date: `12/24/2021`,
      changes: [
        `Fixed bug that prevented custom Synthetic race from showing if you refreshed the page.`,
        `Fixed bugs with Synthetic evolution and traits: Calm, Cannibalize, and Magnificent.`,
        `Fixed bugs with using the quick tab keys when preload tabs is enabled.`
      ]
    },
    {
      version: `1.2.5`,
      date: `12/21/2021`,
      changes: [
        `Fixed bug that caused a planet to lose its geology traits after an AI reset.`,
        `Fixed bug with scavenger job description.`
      ]
    },
    {
      version: `1.2.4`,
      date: `12/19/2021`,
      changes: [
        `Solar system now has elliptical orbits.`,
        `Fixed Evolve Adept Food bonus.`,
        `Rank of each aquired trait is now listed in genetics tab.`,
        `Crate/Container sources are now listed in resource popup.`,
        `Manual buying/selling will auto scale down to prevent "waste".`
      ]
    },
    {
      version: `1.2.3`,
      date: `12/16/2021`,
      changes: [
        `Expanded Festive Season to include additional species.`
      ]
    },
    {
      version: `1.2.2`,
      date: `12/15/2021`,
      changes: [
        `Graphene Plants now show on industry tab for True Path.`,
        `Added entry for Festive Season into wiki.`,
        `The game wiki will now load without any game data.`
      ]
    },
    {
      version: `1.2.1`,
      date: `12/14/2021`,
      changes: [
        `Smelter metals can now be reallocated without unassigning.`,
        `Increased accuracy of syndicate intel data`,
        `Fixed bug with removing Weak & Bad genes when toggling True Path.`,
        `Fixed bug with adding or removing Professors not updating indoctrination value.`,
        `Fixed bug with Planet Wiki entry that prevented some data from loading.`,
        `Added trait rankings to wiki.`
      ]
    },
    {
      version: `1.2.0`,
      revision: `a`,
      date: `12/12/2021`,
      changes: [
        `Fixed bug with Plasmid Storage.`,
        `Fixed bug with Befuddle trait and Espionage.`,
        `Fixed bug with Composting.`,
        `Updated Solar Map.`,
        `Added setting to enable mobile device support.`,
        `Minor buff to TP Frigate power.`
      ]
    },
    {
      version: `1.2.0`,
      date: `12/12/2021`,
      changes: [
        `Unlock the True Path (Requires completion of Ascension or Demonic Infusion).`,
        `Using Fanaticism to gain an unempowered trait you already possess will now empower that trait.`,
        `Added option to Hell Fortress to prevent using ship crew as reinforcements.`,
        `Shrine Metal bonus now applies to Mining Droid Aluminium production.`,
        `Armored trait now prevents 50% of deaths.`,
        `Cannibalize healing now applies a percent based bonus instead of being equivalent to 3 5% Hospitals.`,
        `GruvBox Dark is now the default theme.`,
        `Added Evolve Adept Perk.`,
        `Themed several additional weapon techs in magic universe for immersion.`,
        `Smoldering and Chilled effects now display as Smoldering or Chilled in production breakdowns instead of Hot/Cold.`,
        `Improved touch device support.`
      ]
    },
    {
      version: `1.1.17`,
      date: `11/28/2021`,
      changes: [
        `Job stress from Civilian Ship Crew is now calculated correctly.`,
        `Things will now show as unaffordable if they require a locked resource.`,
        `Added new entries to Mechanics section of Wiki: Job Stress, Cost Creep, and Warmonger.`,
        `Evolve Novice and Evolve Journeyman perk conditions updated.`
      ]
    },
    {
      version: `1.1.16`,
      date: `10/30/2021`,
      changes: [
        `Ghost #3 can now be captured with Smoldering.`,
        `Ghost #7 can now be captured in Cataclysm mode.`,
        `Updated description of Trick or Treat feat.`,
        `Llamas will no longer harass carnivores, detritivores, and soul eaters by grazing their fields.`
      ]
    },
    {
      version: `1.1.15`,
      date: `10/20/2021`,
      changes: [
        `Added buttons to pause queues.`,
        `Cracked Pylons now correctly add to Mana cap.`,
        `Pillar of Bones will no longer be rolled with the Smoldering trait.`,
        `Fixed bugs with removing Terrifying trait.`,
        `Fixed bug with items in queue blocking the next item when it couldn't be completed due to negative production of a resource.`,
        `The Tax-Morale governor task is now slightly smarter.`
      ]
    },
    {
      version: `1.1.14`,
      revision: `a`,
      date: `9/30/2021`,
      changes: [
        `Fixed Pylon bug with upgraded save games in Magic Cataclysm runs.`,
        `Fixed a Message Log filtering problem where some players might not unlock some options.`
      ]
    },
    {
      version: `1.1.14`,
      date: `9/29/2021`,
      changes: [
        `New settings options for message log filters.`,
        `Added Cracked Pylons for Magic Cataclysm mode.`,
        `Conjuring is no longer researchable in Cataclysm mode.`,
        `Challenges section added to Wiki under Gameplay.`,
        `Smoldering Gnawer will now consume Stone instead of nothing.`
      ]
    },
    {
      version: `1.1.13`,
      date: `9/5/2021`,
      changes: [
        `Expanded Mechanics entries in wiki.`,
        `Fixed some errors in wiki prestige calculators.`,
        `Added a Custom Lab calculator to wiki under species.`
      ]
    },
    {
      version: `1.1.12`,
      date: `8/19/2021`,
      changes: [
        `Training Timer for Military tab.`,
        `Draggable config options for Spy Operator.`,
        `Bug fixes for log and queue windows.`
      ]
    },
    {
      version: `1.1.11`,
      date: `8/12/2021`,
      changes: [
        `ARPA projects now contribute to inflation.`,
        `Mercenaries costs are now affected by inflation.`,
        `Trade is now affected by inflation.`,
        `Casino income is now affected by inflation.`,
        `Luxury Goods income is now affected by inflation.`,
        `Rescaled inflation levels.`,
        `Wheelbarrow achievement now requires $250 billion.`,
        `Inflation bug fixes.`,
        `New message log filters.`,
        `Fixed Luxury Goods tooltip money value.`
      ]
    },
    {
      version: `1.1.10`,
      date: `8/8/2021`,
      changes: [
        `Added Inflation Challenge Mode. Requires Scrooge achievement to unlock.`,
        `Import/Export race feature added to Ascension lab.`,
        `Added merge options for queue.`,
        `Available space in queue is now shown.`,
        `Added Blackhole + Mass Ejector mechanic entry to wiki.`,
        `Fixed some display bugs with Alchemy.`,
        `Fixed bug where Protoplasm could be required by some structures late in hell phase.`
      ]
    },
    {
      version: `1.1.9`,
      date: `7/7/2021`,
      changes: [
        `Firework festival bug fix for cataclysm mode.`
      ]
    },
    {
      version: `1.1.8`,
      date: `7/3/2021`,
      changes: [
        `Added firework festival event (July 4th - July 8th).`,
        `Added Copper and Iron settings to Mass Ejector Optimizer task.`,
        `Current Quantum Level now shown on Citadel Stations.`,
        `Updated wiki prestige calculators.`,
        `Added a Quantum Level section to wiki.`
      ]
    },
    {
      version: `1.1.7`,
      date: `6/29/2021`,
      changes: [
        `Added a Mass Ejector Optimizer governor task.`,
        `Fixed precision error with Tech Scavengers.`,
        `Prestige calculators added to wiki.`,
        `Progress related event section added to wiki.`,
        `Anti-plasmids gained from MAD in antimatter universe are now correctly calculated.`
      ]
    },
    {
      version: `1.1.6`,
      date: `6/19/2021`,
      changes: [
        `Solstice event is now easier for less seasoned players.`,
        `Wharves are no longer affected by the Nomadic trait.`,
        `Decreased cost of Iron Horseshoes.`
      ]
    },
    {
      version: `1.1.5`,
      date: `6/16/2021`,
      changes: [
        `Support for String Packs.`,
        `Separate research queue behavior option.`,
        `Balorg can now use the governor tax task.`
      ]
    },
    {
      version: `1.1.4`,
      date: `6/11/2021`,
      changes: [
        `Fixed a bug that would sometimes cause mechs to be constructed without weapons.`,
        `Fixed a bug that would cause an open tooltip to change descriptions when a queue item completes.`
      ]
    },
    {
      version: `1.1.3`,
      date: `6/7/2021`,
      changes: [
        `Improvements to tooltip reliability.`,
        `The first Horseshoes can now be constructed out of Lumber if available as a resource.`,
        `Horseshoe pacing updated, see Hooved entry in wiki for expanded information.`
      ]
    },
    {
      version: `1.1.2`,
      date: `6/6/2021`,
      changes: [
        `Added Money Reserve % config value to Slave replacement task.`,
        `Various special buildings are now dropped from the queue if you remove their required trait.`,
        `Spy Operator will no longer attempt espionage against controlled cities.`,
        `Fixed many issues with labels not updating`
      ]
    },
    {
      version: `1.1.1`,
      date: `6/5/2021`,
      changes: [
        `Unifying during banana republic now triggers an automatic backup save.`,
        `Holding a key multiplier with the queue key will now queue mulitple of a building.`,
        `Dealmaker import bonus buffed from 40% to 75%.`,
        `Nerfed Beast trait to 8% hunting / 15% windy hunting / 10% soldier training.`,
        `Restored Cautious trait to Carnivore genus.`,
        `Added Money Reserve % config values to Merc and Spy recruiter tasks.`,
        `Horseshoes can now be queued.`,
        `Adamantite Horseshoes are now much cheaper.`,
        `Changed progression system for Horseshoe costs, will not change to next resource unless it's unlocked.`
      ]
    },
    {
      version: `1.1.0`,
      date: `6/4/2021`,
      changes: [
        `Appoint a Governor to help run the everyday tasks, unlock in the CRISPR lab.`,
        `Animal genus split into 2 new beast genus: Carnivore & Herbivore.`,
        `Carnivore Species: Cath, Wolven, Vulpine.`,
        `Herbivore Species: Centaur, Rhinotaur, Capybara.`,
        //`Omnivore Species: Bearkin, Porkenari, Hedgeoken.`,
        `Cath, Wolven, and Centaur redesigned.`,
        `Spire Mech Combat rebalanced.`,
        `Titan mechs now have 4 weapon slots and an extra equipment slot.`,
        `New Equipment: Jump Jet (All but Heavy & Titan), Battery (Heavy Only), and Targeting Computer (Titan Only).`,
        `New Scavenger mech type`,
        `Reweighted Angelic genus trait costs.`,
        `Major event messages are now shown in a different color from minor ones.`,
        `Decreased frequency of minor events.`,
        `Smoldering no longer applies to a variety of special resources.`,
        `Frenzy renamed to Blood Thirst.`,
        `Madagascar Tree achievement now requires inheriting Blood Thirst instead of Carnivore.`,
        `Expanded Hell section of Wiki`
      ]
    },
    {
      version: `1.0.43`,
      date: `5/18/2021`,
      changes: [
        `Banana Smoothie will no longer unlock for free in alternate universes.`,
        `Added a Spire Floor clear timer for previously beaten monsters.`,
        `Gate Turrets now correctly contribute to demon kills.`
      ]
    },
    {
      version: `1.0.42`,
      date: `5/4/2021`,
      changes: [
        `Minor bug fixes with new events.`
      ]
    },
    {
      version: `1.0.41`,
      date: `5/3/2021`,
      changes: [
        `Added launch day event for May 6th.`,
        `New minor event system.`,
        `The same event can no longer trigger twice in a row.`
      ]
    },
    {
      version: `1.0.40`,
      date: `4/11/2021`,
      changes: [
        `Special event race reskins will now persist after event ends until reset.`,
        `Added a warning to Unification tech if playing Banana Republic scenario.`
      ]
    },
    {
      version: `1.0.39`,
      date: `4/9/2021`,
      changes: [
        `Added challenge win conditions to planet description popover.`
      ]
    },
    {
      version: `1.0.38`,
      date: `4/4/2021`,
      changes: [
        `Fixed a bug that prevented some races from acquiring Egg #3.`
      ]
    },
    {
      version: `1.0.37`,
      date: `4/3/2021`,
      changes: [
        `Fixed a bug with unlocking the Egg Hunt feat.`
      ]
    },
    {
      version: `1.0.36`,
      date: `4/1/2021`,
      changes: [
        `Fool Feat will automatically upgrade to current challenge level for eligible players.`
      ]
    },
    {
      version: `1.0.35`,
      date: `3/31/2021`,
      changes: [
        `Changed Blackhole objective of Banana Republic scenerio from stabilize a blackhole to Expand a blackhole to 12 solar mass without exotic matter.`,
        `Fixed Terrifying trade exploit in Banana Republic scenerio.`
      ]
    },
    {
      version: `1.0.34`,
      date: `3/28/2021`,
      changes: [
        `Added the Banana Republic challenge.`,
        `Tax Riots will no longer cause loss of Artifacts, Blood Stones, and other key resources.`,
        `Cancel all routes option for trade screen.`,
        `Protests no longer apply their penalty twice.`,
        `Minor genetic traits can now be reordered by dragging.`,
        `Max trade routes per resource type are now governed by Large Trade and Massive Trade upgrades.`,
        `Misc minor bug fixes.`
      ]
    },
    {
      version: `1.0.33`,
      date: `3/20/2021`,
      changes: [
        `Enhanced threat assessment for Spire.`,
        `Added a Save as File option for exporting game state.`
      ]
    },
    {
      version: `1.0.32`,
      date: `3/19/2021`,
      changes: [
        `Unemployment Rework.`,
        `Fixed reactivity of some tooltips.`,
        `Fixed cut off tooltips on settings tab.`,
        `Xeno Tourism now requires 10 Monuments and Tourism.`
      ]
    },
    {
      version: `1.0.31`,
      date: `3/15/2021`,
      changes: [
        `Alien 1 system is now named after their homeworld.`,
        `Alien 2 system is now named after their red planet.`,
        `Fixed various cut off tooltips.`
      ]
    },
    {
      version: `1.0.30`,
      date: `3/4/2021`,
      changes: [
        `Wharves once again now grant the correct number of trade routes.`,
        `Fixed errors with Casino vault size.`,
        `Sacrificed Citizens stat for Mantis players.`,
        `Factory production can be assigned without first removing it from Alloy production.`
      ]
    },
    {
      version: `1.0.29`,
      date: `2/25/2021`,
      changes: [
        `Evolved species will no longer be stuck in the queue after evolution.`,
        `Fixed potential viewport scrolling issues with Settings and Evolution tabs.`,
        `Added a warning for users running Evolve in multiple tabs.`,
        `The game will now remind players to backup their game data once every 100,000 game days.`
      ]
    },
    {
      version: `1.0.28`,
      date: `2/21/2021`,
      changes: [
        `Queue can now be used during evolution stage if unlocked with CRISPR tech.`,
        `Fixed incorrect Scarletite costs with Wasteful trait.`,
        `Graphene Plants now default to Oil with Smoldering.`,
        `Fixed many string errors.`
      ]
    },
    {
      version: `1.0.27`,
      date: `2/11/2021`,
      changes: [
        `Added Trade Federation achievement.`,
        `Added Mastery section to perks page.`,
        `Fixed aria label of jobs.`,
        `Squished achievement will now unlock from Blackhole or Demonic Infusion.`
      ]
    },
    {
      version: `1.0.26`,
      date: `1/30/2021`,
      changes: [
        `Enhanced crafted material popovers.`,
        `Universe filters for wiki achievements page.`,
        `Cheese Guide.`
      ]
    },
    {
      version: `1.0.25`,
      date: `1/23/2021`,
      changes: [
        `Added Piracy section to Wiki under Gameplay-Mechanics.`,
        `Numerous minor bug fixes.`
      ]
    },
    {
      version: `1.0.24`,
      date: `1/17/2021`,
      changes: [
        `Evil Smoldering races can now research bone tools.`
      ]
    },
    {
      version: `1.0.23`,
      date: `1/16/2021`,
      changes: [
        `Redesigned Heat based Genus mechanics.`,
        `Untapped Potential formula changed: now has diminishing returns for stacking unspent genes.`,
        `Faith now has an effect on auto crafting (Craftsmen Only).`,
        `Added new topics to Mechanics section of Wiki.`,
        `Minor bug fixes.`
      ]
    },
    {
      version: `1.0.22`,
      date: `1/15/2021`,
      changes: [
        `Fixed Cataclysm mode game start.`
      ]
    },
    {
      version: `1.0.21`,
      date: `1/10/2021`,
      changes: [
        `Gain upto 8 hours of accelerated time when game is stopped/closed.`,
        `Optimized tab content loading for performance.`,
        `Pause game feature.`
      ]
    },
    {
      version: `1.0.20`,
      date: `12/29/2020`,
      changes: [
        `Fixed issue with keyup event not releasing multiplier keys.`
      ]
    },
    {
      version: `1.0.19`,
      date: `12/28/2020`,
      changes: [
        `Studious now improves library knowledge by 10%.`,
        `Merchant now increases the amount of resources gained from trading by 10%.`,
        `Tracker raised from 10% to 20%.`,
        `Resourceful raised from 10% to 12%.`,
        `Claws raised from 20% to 25%.`,
        `Apex Predator combat bonus raised from 25% to 30%.`,
        `Forge Geothermal power boost raised from +1MW to +2MW.`,
        `Beast trait now boosts Hunting by 10% or 20% when windy and improves soldier training time by 20%.`,
        `Beast gene point cost changed from 2 to 3 points.`,
        `Top level tab quick selection key bindings (default 1-7).`
      ]
    },
    {
      version: `1.0.18`,
      date: `12/24/2020`,
      changes: [
        `Fixed issue with species costs on some techs requiring protoplasm without a reload.`
      ]
    },
    {
      version: `1.0.17`,
      date: `12/19/2020`,
      changes: [
        `Larger font size modes.`,
        `Added descriptions for city sectors.`,
        `Last 3 event messages will now be preserved on reload.`,
        `Fixed Evolution bugs with Unbound Infusion active.`,
        `Improved timer accuracy of stacked queue items when No Queue Order is used.`
      ]
    },
    {
      version: `1.0.16`,
      date: `12/16/2020`,
      changes: [
        `Dark Bomb: Kill and Reset the Demon Lord's accumulated strength using the new Dark Bomb.`,
        `Bonus Artifacts can now be earned during Demonic Infusion if Spire floor 50 or 100 are cleared.`,
        `Renamed the tech upgrade Purify to Enhanced Air Filters in order to prevent confusion with the Blood Infusion Purify.`
      ]
    },
    {
      version: `1.0.15`,
      date: `12/12/2020`,
      changes: [
        `Redesigned Inferno Reactor, output is now tied to Infernal Forge.`,
        `Steel can once again be discovered by Ambush attacks.`,
        `Power Grid is now shown in Cataclysm.`,
        `Cataclysm reset no longer incorrectly grants Rapid Mutation or Ancient Ruins.`,
        `Many minor bug fixes.`
      ]
    },
    {
      version: `1.0.14`,
      date: `12/8/2020`,
      changes: [
        `Vacuum Collapse no longer removes all charges of Corrupted bonus.`,
        `Vacuum Collapse now correctly increases Dark Energy earned on the stats page.`,
        `Lumber Ritual is no longer displayed to Evil races.`,
        `Multiplier keys now work when hiring mercenaries.`
      ]
    },
    {
      version: `1.0.13`,
      date: `12/4/2020`,
      changes: [
        `Power Grid now correctly unlocks when gaining Electricity from Infiltrator trait.`,
        `Feats Garbage Pie and Finish Line can now be unlocked by Demonic Infusion.`
      ]
    },
    {
      version: `1.0.12`,
      date: `12/4/2020`,
      changes: [
        `MechBay tab improvements.`,
        `Mechlist can now be reordered by dragging.`,
        `Power Grid can now control On/Off state.`,
        `Support type structures can now be controlled by the power grid.`
      ]
    },
    {
      version: `1.0.11`,
      date: `12/2/2020`,
      changes: [
        `Fixed a memory leak.`,
        `Minor adjustments to GruvBox Dark theme.`,
        `Cheesy Goodness.`
      ]
    },
    {
      version: `1.0.10`,
      date: `12/1/2020`,
      changes: [
        `Ascended buff now persists after Demonic Infusion.`,
        `New Themes: GruvBox Light, GruvBox Dark, and Orange Soda.`
      ]
    },
    {
      version: `1.0.9`,
      date: `11/29/2020`,
      changes: [
        `Perks separated on to a separate tab under Stats.`,
        `Added Perks section to Wiki.`
      ]
    },
    {
      version: `1.0.8`,
      date: `11/28/2020`,
      changes: [
        `Base Neutronium cost of Inferno Reactor lowered to 3,750,000.`,
        `Fixed Valdi genus traits after evolution.`,
        `Prepared rank 2 now correctly applies when building mechs.`,
        `Power Grid is now more strict in checking what is available.`,
        `Fixed bug that sometimes caused crafting to use a wrong Mastery value.`
      ]
    },
    {
      version: `1.0.7`,
      date: `11/25/2020`,
      changes: [
        `Fixed a bug where Technocracy prevented Alien 2 & Chthonian invasions from working.`
      ]
    },
    {
      version: `1.0.6`,
      date: `11/24/2020`,
      changes: [
        `Fixed Mechlab quick switch button.`,
        `Titan class mech power increased by 12.5%.`
      ]
    },
    {
      version: `1.0.5`,
      date: `11/22/2020`,
      changes: [
        `Adjustable Power Grid`,
        `Light Theme bug fixes.`
      ]
    },
    {
      version: `1.0.4`,
      date: `11/21/2020`,
      changes: [
        `Gains from Alchemy are now higher.`,
        `Any mixed fleet can now invade the Alien 2 and Chthonian systems as long as the invasion force is strong enough.`,
        `Alien 2 Invasion requires minimum of 400 fleet rating and at least 650 to take no losses.`,
        `Chthonian Invasion requires a minimum 1250 fleet rating, 2500 for average losses, and 4500 for minimum losses.`
      ]
    },
    {
      version: `1.0.3`,
      date: `11/15/2020`,
      changes: [
        `Fixed compost heap values.`,
        `Added combat section to the wiki under gameplay.`,
        `Added Equilibrium feat for pillaring every species.`,
        `The Misery feat can now be earned from Demonic Infusion.`
      ]
    },
    {
      version: `1.0.2`,
      date: `11/10/2020`,
      changes: [
        `Valdi now take your chosen Genus instead of humanoid.`,
        `Wrath Blood Infusion now properly applies to all Mech fights.`,
        `Artifacts can now be spent properly on the CRISPR tab.`,
        `Crystal trade prices adjusted.`,
        `Megalith base price reduced from 100k to 55k.`,
        `Many minor bug fixes.`
      ]
    },
    {
      version: `1.0.1`,
      date: `11/08/2020`,
      changes: [
        `Fixed display bug with CRISPR costs and Technocracy.`,
        `Fixed issue with some Windmills not producing power.`,
        `The Resort now properly formats its vault size.`
      ]
    },
    {
      version: `1.0.0`,
      date: `11/07/2020`,
      changes: [
        `Expanded Interdimensional content, delve deep into the hell dimension.`,
        `New Magic Universe.`,
        `Fling asteroids into the blackhole with the Asteroid Redirect ARPA project.`,
        `The same monument type will no longer be chosen twice in a row.`,
        `Evil races can now construct a Pillar of Bones monument type.`,
        `Democracy now only affects Entertainers.`,
        `Some government bonuses now scale with tech era.`,
        `Races with Detritivore can now build Windmills.`,
        `Base Aluminium income for plant based species is now roughly 10% higher.`,
        `Beast of Burden now grants an extra loot roll instead of a 10% boost.`,
        `Revamped combat loot formulas.`,
        `Build queue resource highlighting.`,
        `Low Contrast Dark Night Theme.`,
        `Ewnay igpay atinlay anguagelay.`
      ]
    },
    {
      version: `0.9.24`,
      date: `11/1/2020`,
      changes: [
        `Holiday icons from feats earned with no stars can now be accessed.`,
        `Challenge feat icons still require at least 1 star.`
      ]
    },
    {
      version: `0.9.23`,
      date: `10/30/2020`,
      changes: [
        `New settings option for people who hate fun.`,
        `Added ability for an obscure combination of settings and racial traits to get Ghost #3`
      ]
    },
    {
      version: `0.9.22`,
      date: `10/28/2020`,
      changes: [
        `Halloween cosmetic effects will now run for the duration of the Trick or Treat event instead of just on Halloween.`,
        `Ents, Dryads, and Salamanders can now find all the Ghosts.`,
        `A certain Ghost is now easier to obtain in Cataclysm.`,
        `Accessibility improvements for the event.`
      ]
    },
    {
      version: `0.9.21`,
      date: `10/27/2020`,
      changes: [
        `Trick or Treat Event, runs from 10/28 - 11/4.`
      ]
    },
    {
      version: `0.9.20`,
      date: `10/16/2020`,
      changes: [
        `Fixed bug with the holy trait that improperly applied its bonus.`
      ]
    },
    {
      version: `0.9.19`,
      date: `9/1/2020`,
      changes: [
        `Swarm Control AI now provides a base increase of +2 before unlocking Quantum Computing.`,
        `Fixed bugs with manual crafting popover.`,
        `Fixed bug that stopped DNA & RNA generation during evolution if the Cataclysm scenario was toggled on.`
      ]
    },
    {
      version: `0.9.18`,
      date: `8/28/2020`,
      changes: [
        `ARPA Queue timer fixes.`,
        `Swarm Control AI upgrade now make Control Stations scale with Quantum level.`
      ]
    },
    {
      version: `0.9.17`,
      date: `8/22/2020`,
      changes: [
        `Fixed bug that prevented Cataclysm Ascension from completing.`,
        `Rank 1 sacrifice is slightly less effective`,
        `Rank 3 sacrifice is significantly more effective`,
        `New Research is now shown by Era.`
      ]
    },
    {
      version: `0.9.16`,
      date: `8/12/2020`,
      changes: [
        `Bug Fixes by Beorseder:`,
        `Fixed issue where Exotic Materials Lab and Fortifications would clear current queue.`,
        `Fixed Scavengers not working during Cataclysm.`,
        `Fixed display bug with Galactic Exchange during Cataclysm.`,
        `Genomic Mutations no longer give the wrong number of Genes without Synthesis upgrades.`,
        `Genomic Mutations now tell how many Plasmids/Antiplasmids are gained from them.`,
        `Techs now display their requirements on the wiki.`
      ]
    },
    {
      version: `0.9.15`,
      date: `8/10/2020`,
      changes: [
        `Tax revolts can no longer destroy Soul Gems.`,
        `If you lose your sample of Elerium before researching Elerium Mining it will now be replaced.`
      ]
    },
    {
      version: `0.9.14`,
      date: `8/9/2020`,
      changes: [
        `Angelic races now have an innate bonus vs demonic creatures.`,
        `Enhanced Muscle Fibers added to perks page.`,
        `Genome sequencing will now be off by default in Cataclysm.`,
        `Reorganized achievements page in Wiki.`
      ]
    },
    {
      version: `0.9.13`,
      date: `8/6/2020`,
      changes: [
        `Special resource descriptions now update.`
      ]
    },
    {
      version: `0.9.12`,
      date: `8/3/2020`,
      changes: [
        `Added Crossed the Finish Line feat for Ascending with Cataclysm.`,
        `Adjusted many post World Collider Cataclysm things that referenced none existent planetary structures.`,
        `Added a fix for Stabilize Blackhole being stuck in an untriggerable state.`,
        `Upgrading achievements will now send a notification.`
      ]
    },
    {
      version: `0.9.11`,
      date: `8/1/2020`,
      changes: [
        `Fixed a bug that caused Factories to charge the wrong amount of Polymer for producing Synthetic Furs.`
      ]
    },
    {
      version: `0.9.10`,
      date: `7/30/2020`,
      changes: [
        `Expanded list of potential enemy city names.`,
        `Added Synthetic Fur option to Factories.`,
        `Restoring a backup after a Cataclysm will now allow you to Cataclysm again.`,
        `Fixed Lumber penalty on Desert worlds.`,
        `Many minor bug fixes.`
      ]
    },
    {
      version: `0.9.9`,
      date: `7/21/2020`,
      changes: [
        `Added Devotion upgrade to ancients CRISPR line between Faith and Acolyte. The total cost is the same, it's just spread out more.`,
        `Players with Ancients 4 are granted Ancients 5 automatically, those with Ancients 3 are refunded 300 Plasmids.`,
        `Added Enhanced Muscle Fiber CRISPR upgrade.`,
        `High tax morale penalty under Oligarchy is now reduced.`,
        `Fixed bugs with Blackhole reset and restoring backups.`,
        `Fixed bug with adjusting taxes as a Noble race that would set it to the max.`
      ]
    },
    {
      version: `0.9.8`,
      date: `7/18/2020`,
      changes: [
        `Czech translation by Mousesama`,
        `The slaves have staged a successful hunger strike to demand better living conditions, as a result slave pens can now only hold 4 slaves each.`,
        `Autocracy and Frenzy no longer block Immoral races from gaining a Warmonger bonus.`,
        `Geology traits now display under planet information.`,
        `Popovers added to building and research queues.`
      ]
    },
    {
      version: `0.9.7`,
      date: `7/13/2020`,
      changes: [
        `Seasons no longer exist in Cataclysm mode.`,
        `It is no longer Sunny in Cataclysm mode.`,
        `Parasites are no longer unable to grow population in Cataclysm mode, but they do take a growth penalty.`,
        `Base Sawmill effect is now separated from lumberjack in production breakdown.`
      ]
    },
    {
      version: `0.9.6`,
      date: `7/10/2020`,
      changes: [
        `Fixed bug with Infiltrator not unlocking Nanoweave.`,
        `Fixed bug with Railways not adding traderoutes correctly in Cataclysm mode.`
      ]
    },
    {
      version: `0.9.5`,
      date: `7/6/2020`,
      changes: [
        `Fixed a bug that occurred when combining the Terrifying trait with the gold star Iron Will perk.`
      ]
    },
    {
      version: `0.9.4`,
      date: `7/3/2020`,
      changes: [
        `Failed History perk raised from +1 Geothermal to +2 Geothermal energy.`,
        `Fixed Oligarchy tax riot immunity between 36%-45%.`,
        `Infiltrator can now steal Graphene Processing, Nanoweave, and Orichalcum Analysis techs.`
      ]
    },
    {
      version: `0.9.3`,
      date: `7/1/2020`,
      changes: [
        `Increased base number of Plasmids earned in Cataclysm mode.`
      ]
    },
    {
      version: `0.9.2`,
      date: `6/30/2020`,
      changes: [
        `Added Restore Backup option, restores game to just before your last prestige reset.`,
        `Extended Recombination CRISPR line.`,
        `When gaining a random minor trait from Fanaticism, you will now gain 5 ranks of it.`
      ]
    },
    {
      version: `0.9.1`,
      date: `6/21/2020`,
      changes: [
        `Fixed Dyson Net.`
      ]
    },
    {
      version: `0.9.0`,
      date: `6/21/2020`,
      changes: [
        `Added Scenarios Section to Evolution Challenges.`,
        `Added Cataclysm Scenario for those who value science over caution.`,
        `Genetic Dead End is now classified as a Scenario.`,
        `Plant genus redesign. Photosynth trait replaced with Sappy.`,
        `Added 3rd race option for Plant genus: Pinguicula.`,
        `Dyson Net now provides partial power as it is constructed.`,
        `Added Orichalcum upgrade for Dyson Sphere.`,
        `Added Xeno Tourism upgrade.`,
        `Added Fertility Clinic upgrade for Hospitals.`,
        `Added OTB, Online Gambling, & Bolognium Vault upgrade for Casinos.`,
        `Added Scrooge achievement.`,
        `Added Soul Link upgrade for Soul Forge/Soul Attractors.`,
        `Reduced Bolognium cost of Freighters & Corvette Ships.`,
        `Increased rating of Corvette Ships to 30.`,
        `Piracy will no longer start until after you construct the Embassy.`,
        `Reduced power requirement of Soul Forge and Soul Attractor.`,
        `Gun Emplacements and Soul Attractors are now more potent.`,
        `Reduced requirement of Demon Slayer feat to 666 Million demon kills.`
      ]
    },
    {
      version: `0.8.17`,
      date: `5/30/2020`,
      changes: [
        `Added 3rd race option for Fungus genus: Moldling.`,
        `Fungi genus Spore trait replaced with Detritivore.`,
        `Casinos now start powered and generated money immediately.`,
        `Extreme Dazzle upgrade now boosts Casino income by 50%.`,
        `Reduced power requirement of Casino by 1.`,
        `Casino Max Morale boost no longer works unless casino is powered.`,
        `Occupation will now unlock Federation research.`,
        `Added Double Density achievement in heavyverse.`,
        `Stoned penalty on mellow planets raised to 10%.`,
        `Unemployed citizens on mellow planets no longer generate any stress (note: hunters are NOT unemployed).`,
        `Life on mellow planets is now overall less stressful.`,
        `Slaver trait rating raised to 12.`,
        `Barracks can now be switched off.`,
        `Space Stations will now automatically staff Space Miners from the default job when constructed.`,
        `Factories now default to producing Alloy instead of Nothing.`
      ]
    },
    {
      version: `0.8.16`,
      date: `5/8/2020`,
      changes: [
        `Oceanic biome now applies a 6% bonus to Titanium from Steel smelting.`,
        `Oceanic biome now applies a 12% bonus to Titanium from Iron smelting.`,
        `Oceanic biome now applies a 5% penalty to Fur generation.`,
        `Tundra biome now applies a 25% bonus to Fur generation.`,
        `Tundra biome now applies a 10% penalty to Oil generation.`,
        `New planetary modifiers: Elliptical, Flare, Dense, and Unstable.`,
        `Oligarchy tax riot immunity raised from 35% to 45%.`
      ]
    },
    {
      version: `0.8.15`,
      date: `5/2/2020`,
      changes: [
        `Grassland biome Food bonus raised to 20%.`,
        `Forest biome Lumber bonus raised to 15%.`,
        `Desert biome now applies a 25% Lumber penalty.`,
        `Desert biome now gives a 20% stone bonus and a 10% Oil bonus.`,
        `Volcanic biome now applies a 10% Food penalty.`,
        `Volcanic biome now gives an 8% Iron and 12% Copper bonus.`,
        `Added partial Korean translation.`,
        `Achievements in the wiki are now sorted Alphabetically.`,
        `Some achievements now show completion progress in the wiki.`
      ]
    },
    {
      version: `0.8.14`,
      date: `4/30/2020`,
      changes: [
        `Post unification Federation now gives a 32% bonus (raised from 30%).`,
        `Federation now increases morale by 10%.`,
        `Socialist factory bonus is now 10% (raised from 5%).`,
        `Socialist crafting bonus is now 35% (raised from 25%).`,
        `Corpocracy factory bonus is now 30% (raised from 20%).`,
        `Corpocracy factory bonus now applies to Cement, Graphene, and Vitreloy.`,
        `Republic now increases morale by 20%.`,
        `Oligarchy tax revenue penalty is now 5% (lowered from 10%).`,
        `Oligarchy can now set taxes 20% higher than other governments (raised from 10%).`,
        `Technocracy now adds a 10% Knowledge gain bonus.`,
        `Autocracy governments are now immune to the warmonger penalty.`,
        `Priests now apply a bonus to Ziggurats under Theocracy.`,
        `Fixed display of Theocracy effect on temples. This gives a 12% bonus but was only displaying as a 5% increase.`,
        `Noble Oligarchy can now set their taxes as high as 40%.`
      ]
    },
    {
      version: `0.8.13`,
      date: `4/29/2020`,
      changes: [
        `New research is now sorted by knowledge cost.`,
        `Added popover descriptions for prestige resources.`,
        `Harmony Crystals now boost standard Dark Energy by 0.1% instead of 0.01%.`,
        `Lots of minor bug fixes.`
      ]
    },
    {
      version: `0.8.12`,
      date: `4/24/2020`,
      changes: [
        `Farming has been redesigned. Farms no longer directly generate food, Farmers now generate food in combination with Farms.`,
        `Added Energizer Feat for ascending without building any Thermal Collectors.`,
        `Bad traits no longer count for Ascension Species Creator complexity.`,
        `Dreaded Achievement will now unlock if you never researched dreadnoughts.`,
        `Fixed issue with some feats spamming the log due to micro achievements.`,
        `Fixed base training rate of soldiers.`,
        `Fixed bug with diverse trait that made it do the opposite of what it was suppose to do.`,
        `Adjusted color of "purple" text on Night theme.`,
        `Kilowatts are now Megawatts.`
      ]
    },
    {
      version: `0.8.11`,
      date: `4/16/2020`,
      changes: [
        `Ascension reset no longer offers planet choices, instead your next race is created on the old planet with bonuses added to that planet.`,
        `Ascended planets now gain +2% to all geology deposits, +5% production, +10% storage, and +2 Sundial base Knowledge gain.`,
        `Unspent gene points in the Ascension Lab will be converted into Untapped Potential.`,
        `Ascension lab now has a complexity gene tax for adding more than 4 traits.`,
        `Technophobe perk now applies an additional bonus to custom race complexity.`,
        `Paranoid and Hoarder can now be combined.`,
        `Over capped slaves will now be released.`
      ]
    },
    {
      version: `0.8.10`,
      date: `4/13/2020`,
      changes: [
        `Added EM (Electromagnetic) Field Challenge.`
      ]
    },
    {
      version: `0.8.9`,
      date: `4/12/2020`,
      changes: [
        `Added a Feat for finding all the Eggs.`,
        `Current egg count can now be checked in the Wiki.`
      ]
    },
    {
      version: `0.8.8`,
      date: `4/12/2020`,
      changes: [
        `Easter Event Activated`,
        `Event ends 10 days after the start of Easter.`
      ]
    },
    {
      version: `0.8.7`,
      date: `4/11/2020`,
      changes: [
        `Fixed Pathetic trait.`
      ]
    },
    {
      version: `0.8.6`,
      date: `4/11/2020`,
      changes: [
        `Fixed Brute trait.`,
        `Added section for Achievements and Feats to Wiki.`
      ]
    },
    {
      version: `0.8.5`,
      date: `4/11/2020`,
      changes: [
        `Added New Work in Progress Game Wiki`,
        `Sentience is now more likely to grant a species where the extinction achievement has not yet been earned.`,
        `Sentience can now include custom races.`,
        `Incorporeal Existence research now costs Phage instead of Plasmids.`,
        `Ascension research now Plasmids instead of Phage.`,
        `The change log is now part of the Wiki.`
      ]
    },
    {
      version: `0.8.4`,
      date: `4/4/2020`,
      changes: [
        `Fixed breaking bug with Rigid trait.`
      ]
    },
    {
      version: `0.8.3`,
      date: `4/3/2020`,
      changes: [
        `Federation now reduces the soldier requirement of occupied cities by 5.`,
        `Fixed incorrect Industrious string.`
      ]
    },
    {
      version: `0.8.2`,
      date: `3/30/2020`,
      changes: [
        `Piracy in the Gateway and Stargate regions ramp up more slowly as you explore Andromeda.`,
        `Fixed formatting of multiline Crafting Tooltip cost display.`,
        `Fixed incorrect string used by completed Dyson Sphere.`
      ]
    },
    {
      version: `0.8.1`,
      date: `3/29/2020`,
      changes: [
        `Piracy now slowly takes effect in the Gateway System and Stargate region over 1000 days after piracy begins.`,
        `Purchasing Negotiator and levels of Persuasive will now update the regular Market as well as the Galactic Market.`,
        `Added new CRISPR upgrade effects from the Challenge, Ancients, and Trader trees to the perks list.`,
        `Queued Monuments will update their name in the queue when a Monument is constructed.`,
        `Fixed bug where ARPA projects at the end of the Queue while No Queue Order was active would cause No Queue Order to not work as intended.`,
        `The name of the trait gained from a Mutation in the message is now localized.`,
        `Adding Apex Predator will remove currently obtained Armor techs.`,
        `Annexed/Purchased powers will now have a respective " - Annexed"/" - Purchased" tag next to their name, like Occupied powers do.`,
        `Blackhole reset gives its proper reward again.`,
        `The amount of Gene/Phage levels of Minor Traits purchased is now affected by Multiplier Keys.`,
        `The amount of Ships moved from one area to another is now affected by Multiplier Keys.`,
        `Manual Crafting button tooltips are more informational.`,
        `Constructing the first Foundry of a game will log a message briefly explaining what Crafted Resources are and the ways to make them.`,
        `Informative messages (mission results, messages that explain newly unlocked mechanics, the Launch Facility message that informs the player of the space tab, etc.) are now displayed in blue, to separate them from less important messages.`,
        `Added the missing Wormhole Mission result string.`
      ]
    },
    {
      version: `0.8.0`,
      date: `3/27/2020`,
      changes: [
        `Intergalactic Content.`,
        `Universe Mastery Rework.`,
        `-Each Universe now tracks its own mastery level responsible for 40% of the mastery bonus, the remaining 60% comes from the general mastery level.`,
        `-Standard Universe mastery rules remains unchanged.`,
        `Micro icons can now be earned for none Micro achievements. These will not count for standard mastery, only Micro mastery.`,
        `Unification 3.0, the unification system has been reworked.`,
        `Federation Government type.`,
        `New Faith CRISPR line of upgrades, unlocks priest job.`,
        `Universal, Standard and Mastered CRISPR Upgrades, for masters of the universes.`,
        `Added Negotiator CRISPR upgrade.`,
        `Added Persuasive Minor Gene.`,
        `Extended the Deify and Study Ancients tech trees.`,
        `Enhanced Droids upgrade for War Droids.`,
        `Repair Droids for Fortress.`,
        `Smoldering and Chilled now have reduced effectiveness after 100 stacks.`,
        `Removed Heavy Genus Feats, these were redundant with Universe Icons.`,
        `Blackhole reset now also grants species level extinction achievement.`,
        `Power cost of Mass Ejector increased to 3kW.`,
        `Genetics lab custom mutation costs rescaled to static values depending on the genetic trait.`,
        `Colonists will now be automatically assigned when a Living Quarter is completed if the default job has any available citizens.`,
        `Biodome redesigned, produces less food but increases living quarter capacity for Citizens.`,
        `More robust research categories.`,
        `Various racial traits now apply to ARPA projects.`,
        `Human Creative trait rescaled.`,
        `Large cost creep penalty reduced to 0.005 from 0.01.`,
        `Strong gathering bonus increased from 2 to 5.`,
        `Compact lowered from -0.02 to -0.015.`
      ]
    },
    {
      version: `0.7.28`,
      date: `3/16/2020`,
      changes: [
        `Antimatter Universe now gives a 10% prestige bonus post MAD.`,
        `St. Patrick's Day event.`,
        `Blood War can no longer be earned by none demonic evil races.`,
        `Build Crate/Container buttons now update create/container values when upgraded by research.`
      ]
    },
    {
      version: `0.7.27`,
      date: `3/10/2020`,
      changes: [
        `Memory leak fixes.`
      ]
    },
    {
      version: `0.7.26`,
      date: `3/5/2020`,
      changes: [
        `Any race where the associated extinction achievement has been unlocked is now always available during evolution.`,
        `Joyless perk changed to +2% Max Morale per star level.`,
        `The effects of the Mass Extinction and Creator perks have been swapped.`,
        `Creator perk (old mass extinction) changed to 1.5x / 2x / 2.5x / 3x / 3.5x genes gained on mutation.`,
        `Minor traits bought with Phage now count twice when you complete evolution.`
      ]
    },
    {
      version: `0.7.25`,
      date: `2/26/2020`,
      changes: [
        `Unicorn Shrine bonus is now determined by the moon phase when constructed.`,
        `Shrine Knowledge bonus now applies an additional affect to universities.`,
        `Smelters in Evil universe when using Kindling Kindred default to Flesh instead of Coal.`,
        `Evil Wendigo Smelters correctly display that they use 1 Flesh/s instead of 3 Souls/s. Also fixed the bug where they end up using 3 Flesh/s instead of 1.`,
        `Fixed bug where the Evil Wendigo Reclaimer description would show the Lumberjack description.`,
        `If Containers have not yet been unlocked as a resource, getting a Wharf will unlock it.`,
        `Fixed bug where, if Freight Trains was gotten after ARPA, the Railway project would need a refresh to appear.`
      ]
    },
    {
      version: `0.7.24`,
      date: `2/12/2020`,
      changes: [
        `Special Prestige icons awarded to players from certain feats can now be set to replace the standard Star icon.`
      ]
    },
    {
      version: `0.7.23`,
      date: `2/11/2020`,
      changes: [
        `Steelen Challenge now requires Bioseed as its win condition.`,
        `Added Feat for Blackhole reset with Steelen Challenge.`,
        `Added V-Day Event stuff.`
      ]
    },
    {
      version: `0.7.22`,
      date: `2/9/2020`,
      changes: [
        `Steelen Challenge.`,
        `Graveyards are now removed upon gaining Kindling Kindred.`,
        `If Default job is set to Farmer/Lumberjack for Carnivore/Kindling Kindred, it will be changed to Unemployed upon adding those traits.`,
        `Fixed bug where gaining Carnivore and having no Grain Mills would make Smokehouses unpurchasable until refresh.`,
        `Cargo Yard now requires the construction of a Transfer Station to be unlocked.`,
        `Mitosis/Metaphase effect now appears on perks list.`
      ]
    },
    {
      version: `0.7.21`,
      date: `1/28/2020`,
      changes: [
        `More bug fixes.`
      ]
    },
    {
      version: `0.7.20`,
      date: `1/20/2020`,
      changes: [
        `Bug Fixes by Beorseder.`,
        `Fixed bug where purchasing Multicellular would double DNA generation from Nuclei instead of Bilateral Symmetry/Poikilohydric/Spores.`,
        `New population from the Infectious trait now go into the set Default job, instead of always Unemployed.`,
        `Controlled Mutation will no longer offer conflicting traits.`
      ]
    },
    {
      version: `0.7.19`,
      date: `1/14/2020`,
      changes: [
        `Bug Fixes.`
      ]
    },
    {
      version: `0.7.18`,
      date: `1/12/2020`,
      changes: [
        `Theocracy temple bonus raised from 5% to 12%.`,
        `Technocracy knowledge discount raised from 5% to 8%.`,
        `Corpocracy Casino Bonus raised from +100% to +200%.`,
        `Corpocracy Luxury Good Bonus raised from +50% to +150%.`,
        `Corpocracy Tourism Bonus raised from +50% to +100%.`,
        `Corpocracy morale penalty lowered from -15% to -10%.`,
        `Corpocracy Manufacturing Bonus raised from +15% to +20%.`,
        `Miner's Dream now scales the information that is revealed depending on the star level of the achievement.`,
        `Slaves now appear as a resource.`,
        `Alternate universes now award icons for complex achievements.`
      ]
    },
    {
      version: `0.7.17`,
      date: `1/9/2020`,
      changes: [
        `Fixed an issue with displaying foreign powers in civics tab on unlock.`
      ]
    },
    {
      version: `0.7.16`,
      date: `1/8/2020`,
      changes: [
        `Exploration Missions can be queued again.`,
        `The game will now notify the user if the current version is out of date.`,
        `Changes by Beorseder.`,
        `Geology deposit aesthetic changes on planet selection.`,
        `Miner's Dream Achievement & Perk.`
      ]
    },
    {
      version: `0.7.15`,
      date: `1/7/2020`,
      changes: [
        `Queueing the World Collider will no longer lag the game.`,
        `Multi-segment projects will now have extra segments cleared from the queue on completion.`,
        `Spy and Government related popovers that would sometimes get stuck open will now clear.`,
        `Queued projects that will not complete due to lack of production will now display a green [Never] instead of -1 second timer.`,
        `Multi-segment projects no longer block queueing ARPA projects unless they consumed the entire queue space.`
      ]
    },
    {
      version: `0.7.14`,
      date: `12/31/2019`,
      changes: [
        `Research Categorization option by Naryl.`
      ]
    },
    {
      version: `0.7.13`,
      date: `12/30/2019`,
      changes: [
        `Gene decay will no longer result in a negative plasmid count.`,
        `Gene fortification is slightly more effective.`
      ]
    },
    {
      version: `0.7.12`,
      date: `12/19/2019`,
      changes: [
        `Gene Fortification.`,
        `Fixed Cultural Supremacy popover.`
      ]
    },
    {
      version: `0.7.11`,
      date: `12/15/2019`,
      changes: [
        `Decaying resources will now use a warning color if you are losing that resource but at a slower rate than the decay rate.`,
        `The most bottlenecked resource will now display in red while other trouble resources will be marked with an alert color.`,
        `CRISPR upgrades are now darkened when unaffordable.`,
        `Transfer Station now lists its uranium storage.`,
        `Wendigo bug fixes.`
      ]
    },
    {
      version: `0.7.10`,
      date: `12/12/2019`,
      changes: [
        `Craftsman now continuously output product instead of once/twice a month.`,
        `Cumulative achievements now check for lower tier unlocks.`
      ]
    },
    {
      version: `0.7.9`,
      date: `12/7/2019`,
      changes: [
        `Many bug fixes.`
      ]
    },
    {
      version: `0.7.8`,
      date: `12/6/2019`,
      changes: [
        `The default job can now be set to: Unemployed, Farmer, Lumberjack, Quarry Worker, or Scavenger.`,
        `New line of feats for achievement hunting.`,
        `Novice Perk.`,
        `Journeyman Perk.`
      ]
    },
    {
      version: `0.7.7`,
      date: `12/5/2019`,
      changes: [
        `Super projects now queue in larger batches.`,
        `Super projects now only report completion by the queue if actually complete instead of for each segment constructed.`
      ]
    },
    {
      version: `0.7.6`,
      date: `12/2/2019`,
      changes: [
        `Adjacent queue items of the same type will now combine.`,
        `Architect now doubles queue sizes instead of adding a flat +2.`,
        `Misc minor bug fixes.`
      ]
    },
    {
      version: `0.7.5`,
      date: `11/28/2019`,
      changes: [
        `Queueing 2x or more of the same building in a row will now stack them in the queue.`,
        `Queue timer now adjusts for cost creep.`,
        `ARPA Projects can now be queued.`,
        `Fixed a bug that could break the game when Yeti or Wendigo unlocked the genetics lab.`
      ]
    },
    {
      version: `0.7.4`,
      date: `11/27/2019`,
      changes: [
        `Wendigo can now build hunting lodges.`,
        `Trade route prices are now tracked to 1 decimal.`,
        `Elusive spies will no longer be killed when they fail a mission.`,
        `Disruptor Rifles now require researching Quantum Entanglement.`
      ]
    },
    {
      version: `0.7.3`,
      date: `11/26/2019`,
      changes: [
        `Night Theme trade volume control made more night theme friendly.`,
        `Contrast improvements for Night and R/G Theme.`
      ]
    },
    {
      version: `0.7.2`,
      date: `11/24/2019`,
      changes: [
        `New market buy/sell volume control.`,
        `Large Trade upgrade now raises the buy/sell cap to 5,000.`,
        `Massive Trades upgrade now raises the buy/sell cap to 1,000,000.`,
        `Various bug fixes by Beorseder.`
      ]
    },
    {
      version: `0.7.1`,
      date: `11/23/2019`,
      changes: [
        `Garrison controls reintegrated into government section.`,
        `Mutation plasmids now track correctly in no plasmid challenge runs.`,
        `Fixed many issues with foreign power name generation.`,
        `Feat star icon is no longer tiny.`
      ]
    },
    {
      version: `0.7.0`,
      date: `11/21/2019`,
      changes: [
        `Establish a Government.`,
        `Battle rival cities.`,
        `Biome races added for Forest, Desert, Tundra, and Volcanic.`,
        `New ARPA Project: Railway.`,
        `New CRISPR upgrades: Mitosis & Metaphase.`,
        `Construct advanced AI stations in deep space.`,
        `Rapid Gene Sequencing upgrade.`,
        `Civics tab split into Government, Industry, and Military sections.`,
        `Inspiration no longer adds an upfront knowledge bonus.`,
        `Vigilante requirement lowered to 12.`,
        `Xenophobic replaced with Wasteful.`,
        `Added Rocky Road Feat.`,
        `Configurable number notations.`
      ]
    },
    {
      version: `0.6.27`,
      date: `11/12/2019`,
      changes: [
        `Tundra planets are now always cold in winter.`,
        `Volcanic planets are now always hot in summer.`,
        `Stormy planets are now more likely to be windy.`,
        `Fixed issue with last rites not showing up as affordable.`,
        `2-4x Challenge Multipliers changed:.`,
        `2 Challenges: +12% Prestige.`,
        `3 Challenges: +25% Prestige.`,
        `4 Challenges: +45% Prestige.`,
        `Heavy Universe prestige bonus now scales with challenge level:.`,
        `0 Challenges: +5% Prestige.`,
        `1 Challenge: +10% Prestige.`,
        `2 Challenges: +15% Prestige.`,
        `3 Challenges: +20% Prestige.`,
        `4 Challenges: +25% Prestige.`
      ]
    },
    {
      version: `0.6.26`,
      date: `11/7/2019`,
      changes: [
        `ARPA costs now update without mousing off and back on the buttons.`,
        `Fixed issues with incorrectly powering on newly built structures.`,
        `None-demonic evil smelters now correctly state they burn 1 flesh/s.`,
        `Added whitehole perk to stats page.`
      ]
    },
    {
      version: `0.6.25`,
      date: `11/2/2019`,
      changes: [
        `Geology bonus is now preserved on MAD reset.`,
        `Key Mappings are now configurable for multiplier and queue keys.`
      ]
    },
    {
      version: `0.6.24`,
      date: `10/31/2019`,
      changes: [
        `The Halloween feat will now unlock inside a micro universe.`
      ]
    },
    {
      version: `0.6.23`,
      date: `10/28/2019`,
      changes: [
        `Exotic mass now counts towards Galactic Landfill and Supermassive.`,
        `Fixed issues with queue timers and kindling kindred trait.`,
        `Dark Energy now applies to windmills in antimatter universe.`
      ]
    },
    {
      version: `0.6.22`,
      date: `10/26/2019`,
      changes: [
        `Game optimizations.`,
        `Bug fixes for queues.`,
        `Fixed bug with war droids.`
      ]
    },
    {
      version: `0.6.21`,
      date: `10/24/2019`,
      changes: [
        `Freight Train upgrade now adds a trade route to freight yards instead of trade posts.`,
        `Toxic troll achievement.`,
        `Spatial reasoning rounding fix.`
      ]
    },
    {
      version: `0.6.20`,
      date: `10/21/2019`,
      changes: [
        `Fixed application of plasmids with antiplasmids.`,
        `Updated description of bleeding effect.`,
        `Added achievement for synthesizing an anti-plasmid.`,
        `More readable achievement page.`
      ]
    },
    {
      version: `0.6.19`,
      date: `10/20/2019`,
      changes: [
        `Fixed power errors with hell dimension turrets.`,
        `Crate/Container rounding is now applied after spatial reasoning.`,
        `Added extra text to the asteroid belt description to call out the necessity of assigning space miners.`,
        `Evil Ents can now burn flesh in the smelter.`
      ]
    },
    {
      version: `0.6.18`,
      date: `10/16/2019`,
      changes: [
        `Swarm Satellite redesign.`,
        `Swarm Satellites cost and output decreased.`,
        `Control Stations can now control 10/18 swarm satellites.`,
        `Iron mining ship swarm plant discount now applies to all swarm plant costs.`,
        `New upgrades to increase output of swarm satellites.`
      ]
    },
    {
      version: `0.6.17`,
      date: `10/14/2019`,
      changes: [
        `"Q" key now works with research queue.`,
        `Added settings option to not enforce queue order.`,
        `Decay challenge no longer shows the star level for Joyless.`,
        `All universe types can now be seen on achievements.`,
        `Genus completion is now marked on sentience.`,
        `Challenges can now be toggled during evolution.`,
        `Inspiration event now gives a temporary buff to all science production.`,
        `Added Slave Market for slaver races to buy slaves as an alternative to catching them.`,
        `Added Crate/Container storage amount to the build crate/container tooltip.`,
        `Added a button to cancel all trade routes for each resource.`
      ]
    },
    {
      version: `0.6.16`,
      date: `10/13/2019`,
      changes: [
        `Employment is now color coded depending on staffing levels.`,
        `GPS satellites now add additional trade routes.`,
        `Added stats tracking on reset mechanics used.`,
        `Added a message when completing the launch facility.`,
        `Added icons to challenges and races in evolution stage to indicate level of challenge completion.`
      ]
    },
    {
      version: `0.6.15`,
      date: `10/11/2019`,
      changes: [
        `Added a settings option to disable the queue hot key.`,
        `The queue hot key is now disabled by default because it breaks the game for some users.`
      ]
    },
    {
      version: `0.6.14`,
      date: `10/9/2019`,
      changes: [
        `Fixed several bugs with celestial races.`,
        `Only one demonic invasion event is now required to reach a hellscape planet.`,
        `New city categorization can now be switched off in the settings tab.`,
        `Holding Q while clicking a building will now queue it instead of constructing it.`
      ]
    },
    {
      version: `0.6.13`,
      date: `10/7/2019`,
      changes: [
        `Fixed bioseed reset bug when seeding from a planet without a special property.`
      ]
    },
    {
      version: `0.6.12`,
      date: `10/6/2019`,
      changes: [
        `Added a hire merc option to fortress, mercs hired here go directly to the fortress.`,
        `Default patrol size is now 10 instead of 4.`,
        `Adjusted margins in city tab/space tabs to slightly reduce vertical scrolling.`,
        `New Tower of Babel flair.`
      ]
    },
    {
      version: `0.6.11`,
      date: `10/5/2019`,
      changes: [
        `New planetary modifiers: Toxic, Mellow, Rage, Stormy, Ozone, Magnetic, and Trashed.`,
        `City Categorization by NotOats.`,
        `Chinese Translation.`
      ]
    },
    {
      version: `0.6.10`,
      date: `10/1/2019`,
      changes: [
        `Fixed issue with gene editing costing the wrong type of Plasmid.`,
        `Fixed Bone label in Graphene plant.`,
        `Fixed issue with Plywood not unlocking when removing Kindling Kindred trait.`
      ]
    },
    {
      version: `0.6.9`,
      date: `9/30/2019`,
      changes: [
        `Antimatter Universe.`,
        `Bleeding Effect line of CRISPR upgrades, requires Anti-Plasmids to unlock.`,
        `Balorg can now unlock queues.`,
        `Fixed aria labels in mass ejector.`
      ]
    },
    {
      version: `0.6.8`,
      date: `9/24/2019`,
      changes: [
        `Queue reordering no longer swaps the dragged item with the one in the target spot.`,
        `Added timers to research queue.`,
        `Cost adjustments are now applied to queue timers increasing their accuracy.`
      ]
    },
    {
      version: `0.6.7`,
      date: `9/24/2019`,
      changes: [
        `Cath windmills now generate power instead of just looking pretty.`,
        `Fixed Spanish strings file, language now loads again.`
      ]
    },
    {
      version: `0.6.6`,
      date: `9/23/2019`,
      changes: [
        `Added special tech tree to sacrificial altar to boost its effectiveness per sacrifice.`,
        `Restored windmills to cath.`,
        `Challenge Multiplier Dark Energy rounding calculation fixed.`,
        `Added extra information to blackhole description when it reaches destabilization point.`,
        `Added a warning to stabilize option that it will reset your exotic matter.`
      ]
    },
    {
      version: `0.6.5`,
      date: `9/21/2019`,
      changes: [
        `Fixed display issue with frenzy appearing to never drop below 1%.`,
        `Updated the tooltip values on farms and farmers to include the hellscape penalty.`,
        `Fixed Evil Ents so they start with Gather Stone option.`
      ]
    },
    {
      version: `0.6.4`,
      date: `9/19/2019`,
      changes: [
        `Fixed double windmill issue with evil universe races.`,
        `Spanish language updates.`,
        `Added warnings to challenge modes in micro universe that you will not receive credit.`
      ]
    },
    {
      version: `0.6.3`,
      date: `9/17/2019`,
      changes: [
        `Restored broken perks.`
      ]
    },
    {
      version: `0.6.2`,
      date: `9/17/2019`,
      changes: [
        `Bug Fixes.`
      ]
    },
    {
      version: `0.6.1`,
      date: `9/17/2019`,
      changes: [
        `Universe Update, explore ~~ 4 ~~ 3 new universe types:.`,
        `Heavy Gravity Universe.`,
        `Micro Universe.`,
        `Evil Universe.`,
        `New Decay Challenge.`,
        `Antimatter universe is still forming, coming soon.`,
        `Dark Energy effects added, unique per universe type.`,
        `New Plasmid scaling formula.`,
        `Blackhole mass added to Stellar Engine.`,
        `Stuff I probably forgot about.`
      ]
    },
    {
      version: `0.5.18`,
      date: `9/11/2019`,
      changes: [
        `Spanish translation provided by RanaPeluda.`,
        `Fixed Ent fanaticism.`,
        `Modals are no longer unnecessarily wide.`,
        `Smelter modal now shows the fuel production for each type.`
      ]
    },
    {
      version: `0.5.17`,
      date: `9/5/2019`,
      changes: [
        `Mantis Frail trait replaced with new Cannibalize trait, eat your own citizens for buffs.`,
        `The Fortress will now remember the number of troops assigned to it and attempt to keep it at that level.`
      ]
    },
    {
      version: `0.5.16`,
      date: `9/3/2019`,
      changes: [
        `Made some adjustments to Soul Gem drop odds.`,
        `Added a message when you discover your first Soul Gem.`
      ]
    },
    {
      version: `0.5.15`,
      date: `9/1/2019`,
      changes: [
        `Portuguese translations updated by Rodrigodd.`
      ]
    },
    {
      version: `0.5.14`,
      date: `9/1/2019`,
      changes: [
        `Buildings will no longer be added to the queue if holding down a multiplier key.`,
        `Fixed a problem with smelters that could cause their production to become stuck in a high state.`,
        `Fixed initial display state of containers in storage management tab.`
      ]
    },
    {
      version: `0.5.13`,
      date: `8/30/2019`,
      changes: [
        `New layout for selecting challenge genes/modes during end of evolution stage.`,
        `Fixed bug with low support elerium miners that caused them to miscalculate miner outputs.`,
        `Added a threat level warning to fortress.`
      ]
    },
    {
      version: `0.5.12`,
      date: `8/30/2019`,
      changes: [
        `Pacifist Achievement is now unlocked by unifying without ever initiating an attack.`
      ]
    },
    {
      version: `0.5.11`,
      date: `8/28/2019`,
      changes: [
        `Fixed issue with nucleus DNA bonus not applying from correct cell stage evolutions.`,
        `Building timers now count down without refreshing the popover.`,
        `Long action titles will now wrap instead of overflowing the button.`,
        `Fixed a bug that could cause the research queue to clear items from the building queue.`
      ]
    },
    {
      version: `0.5.10`,
      date: `8/28/2019`,
      changes: [
        `Fixed bug with some construction projects not refreshing the page after being built with the queue.`,
        `Space exploration missions can no longer be queued more than once at a time.`,
        `One off projects are now removed from the queue if completed manually.`,
        `Queue timers now track crafted resources.`,
        `Demonic attractor soul gem drop rate increase buffed from 5% to 8%.`,
        `Updated some fortress related tooltips.`,
        `Mousing over the star rating in the top left corner now lists which challenges are active.`,
        `Time until ready added to unaffordable actions.`
      ]
    },
    {
      version: `0.5.9`,
      date: `8/27/2019`,
      changes: [
        `Active build queues wiped due do internal game breaking format change.`
      ]
    },
    {
      version: `0.5.8`,
      date: `8/27/2019`,
      changes: [
        `Construction timers added to build queue.`,
        `Construction and research completed by queues are now logged to the message list.`,
        `Improved drag and drop support for queues.`
      ]
    },
    {
      version: `0.5.7`,
      date: `8/25/2019`,
      changes: [
        `Drag support for queue sorting.`,
        `Fixed resource display bug that occurred when buying a mass ejector.`,
        `Minor traits now show the number of ranks from phage or genes spent.`
      ]
    },
    {
      version: `0.5.6`,
      date: `8/23/2019`,
      changes: [
        `Building queue now works in space.`,
        `Added a separate research queue.`,
        `Fixed rock quarry awarding 4% stone bonus instead of the stated 2%.`,
        `Fixed rendering bugs with the blackhole and mass ejector.`
      ]
    },
    {
      version: `0.5.5`,
      date: `8/22/2019`,
      changes: [
        `Bug Fixes for queueing system.`
      ]
    },
    {
      version: `0.5.4`,
      date: `8/22/2019`,
      changes: [
        `Building Queue system v1.0.`,
        `Urban Planning, Zoning Permits, and Urbanization queue related techs.`,
        `New CRISPR upgrades for enhanced queueing.`
      ]
    },
    {
      version: `0.5.3`,
      date: `8/20/2019`,
      changes: [
        `Stats and Achievements separated into separate sub tabs.`,
        `Disruptor rifle upgrade for soldiers.`,
        `Mass Ejector can no longer be unlocked before completing the Stellar Engine.`
      ]
    },
    {
      version: `0.5.2`,
      date: `8/20/2019`,
      changes: [
        `Fixed misnamed mantis trait key.`,
        `Fixed Iron smelter paying out 10x intended amount.`
      ]
    },
    {
      version: `0.5.1`,
      date: `8/20/2019`,
      changes: [
        `Disappearing craftsman fix.`
      ]
    },
    {
      version: `0.5.0`,
      date: `8/19/2019`,
      changes: [
        `Interstellar space is now unlockable.`,
        `Interdimensional travel is now unlockable.`,
        `New management tab for Crates & Containers.`,
        `Power generation breakdown.`,
        `Improved resource breakdown layout.`,
        `Leathery trait buffed.`,
        `Chameleon trait now adds a combat rating bonus.`,
        `Optimistic now also applies to the minimum morale rating.`,
        `Smarter Smelter fuel switching.`,
        `New CRISPR unlocks.`
      ]
    },
    {
      version: `0.4.42`,
      date: `8/16/2019`,
      changes: [
        `Fixed some screen reader issues with the crate modal launch button.`,
        `Added a warning to the Genetic Dead End challenge if you are on a hellscape planet.`
      ]
    },
    {
      version: `0.4.41`,
      date: `8/15/2019`,
      changes: [
        `Joyless Challenge.`,
        `??? - Nothing to see here, move along.`
      ]
    },
    {
      version: `0.4.40`,
      date: `8/9/2019`,
      changes: [
        `Changed No Crispr gene into the Weak Crispr gene.`
      ]
    },
    {
      version: `0.4.39`,
      date: `8/6/2019`,
      changes: [
        `Genetic Disaster Challenge.`
      ]
    },
    {
      version: `0.4.38`,
      date: `8/5/2019`,
      changes: [
        `Special action icon is now properly flagged as a button.`
      ]
    },
    {
      version: `0.4.37`,
      date: `7/31/2019`,
      changes: [
        `ARIA Improvements for Factory and A.R.P.A.`
      ]
    },
    {
      version: `0.4.36`,
      date: `7/27/2019`,
      changes: [
        `Slow and Hyper traits can now combine.`,
        `Added new achievements: Creator & Explorer.`,
        `Added perks for Mass Extinction, Creator, and Explorer.`
      ]
    },
    {
      version: `0.4.35`,
      date: `7/25/2019`,
      changes: [
        `Centaur can now pick Fanaticism.`,
        `Challenge multiplier is now applied to phage gain.`
      ]
    },
    {
      version: `0.4.34`,
      date: `7/23/2019`,
      changes: [
        `Fixed SR descriptions of buildings that lack affordability.`,
        `Fixed resource highlighting of buildings that have zero costs.`
      ]
    },
    {
      version: `0.4.33`,
      date: `7/23/2019`,
      changes: [
        `Fixes for Ent Fanaticism not releasing some resources.`,
        `Aria improvements for the smelter modal.`,
        `Improved screen reader resource affordability description of buildings/research.`,
        `Resource highlighting on structures.`
      ]
    },
    {
      version: `0.4.32`,
      date: `7/21/2019`,
      changes: [
        `Balorg slaver trait added.`,
        `Ziggurat bonus now applies to the oil extractor.`,
        `Geology Oil rich/poor no longer applies to oil extractor.`,
        `Added resource alternate row coloring.`,
        `Added an affordability hint for screen readers.`,
        `Fixed some bugs with awarding a random minor trait from fanaticism.`,
        `Dimensional Compression now charges the correct cost.`
      ]
    },
    {
      version: `0.4.31`,
      date: `7/20/2019`,
      changes: [
        `Extreme Dazzle casino upgrade.`,
        `Metallurgist minor trait, buffs alloy.`,
        `Gambler minor trait, buffs casinos.`,
        `A.R.P.A. projects now use resource approximations for large numbers.`,
        `Cement Factory renamed to Cement Plant to reduce confusion with the regular Factory.`,
        `Key multipliers now work inside the factory modal.`,
        `Imps and Balorg now have access to advanced crafting tech.`,
        `Imps and Balorg now have access to windmills.`,
        `Balorg can now set their taxes below 10% and above 30%.`
      ]
    },
    {
      version: `0.4.30`,
      date: `7/19/2019`,
      changes: [
        `Portuguese translation by Rodrigodd.`,
        `DNA Sequencer upgrade.`,
        `Gene Assembly cost increase to 200k.`,
        `Synthesis now applies a bonus to auto crafted genes.`,
        `Ambidextrous buffed.`,
        `Ambidextrous now has a greater effect on auto crafting.`
      ]
    },
    {
      version: `0.4.29`,
      date: `7/18/2019`,
      changes: [
        `Genetic modification system, customize your race with minor traits.`,
        `Shotgun Sequencing upgrade for genome research.`,
        `Randomly gained minor traits will no longer stack unless they have all been unlocked.`,
        `Genes are now gained from random mutations.`,
        `Synthesis line of CRISPR upgrades.`,
        `Satellite and Observatory cost reductions.`,
        `Fibroblast minor trait.`,
        `Iridium is now unlocked by constructing an iridium mine instead of the moon base.`,
        `Helium-3 is now unlocked by constructing a helium-3 mine instead of the moon base.`,
        `Genome sequencing now defaults to on when first unlocked.`
      ]
    },
    {
      version: `0.4.28`,
      date: `7/16/2019`,
      changes: [
        `Added missing hellscape achievement.`,
        `Fixed spatial reasoning and phage interaction.`,
        `Fixed warmonger unlocking requirement.`
      ]
    },
    {
      version: `0.4.27`,
      date: `7/13/2019`,
      changes: [
        `Added special action description buttons for screen readers.`
      ]
    },
    {
      version: `0.4.26`,
      date: `7/12/2019`,
      changes: [
        `Unlocked CRISPR upgrades are now listed as perks.`,
        `Control/Shift/Alt click now works with power on and off buttons.`
      ]
    },
    {
      version: `0.4.25`,
      date: `7/11/2019`,
      changes: [
        `Quantum Manufacturing upgrade.`,
        `Quantum Swarm cost lowered from 465k to 450k.`
      ]
    },
    {
      version: `0.4.24`,
      date: `7/10/2019`,
      changes: [
        `Thermomechanics upgrade for alloy production.`,
        `Ziggurats unlockable via ancients upgrade.`,
        `Cement factory has a more clear label in breakdown lists.`
      ]
    },
    {
      version: `0.4.23`,
      date: `7/7/2019`,
      changes: [
        `Resources at the millions breakpoint and above are now shown with 2 significant decimal points.`,
        `Reduced the creep cost of Observatory.`,
        `Reduced the base knowledge cost of Observatory.`,
        `Reduced the Brick cost of Boot Camps.`,
        `Evil has been unleashed.`
      ]
    },
    {
      version: `0.4.22`,
      date: `7/6/2019`,
      changes: [
        `Fixed issue with having exactly 251 Plasmids that would break your resources.`,
        `Fixed issue with planet generation that caused it to always use the same seed.`
      ]
    },
    {
      version: `0.4.21`,
      date: `7/6/2019`,
      changes: [
        `Fixed unlocking of mass extinction achievement.`,
        `Fixed potential fuel consumption bug with power plants.`
      ]
    },
    {
      version: `0.4.20`,
      date: `7/4/2019`,
      changes: [
        `Phage can now be earned from space resets, phage extends the plasmid diminishing return breakpoint.`,
        `Dimensional Warping crispr upgrade, applies phages to spatial reasoning.`,
        `Added special windmill tech for carnivore path to equalize power grid.`,
        `Space Stations now give 5 Elerium storage instead of 4.`
      ]
    },
    {
      version: `0.4.19`,
      date: `7/2/2019`,
      changes: [
        `Fixed bugs with the hell planet and gas planet survey mission.`,
        `Fixed bug that prevented the planet description tooltip from triggering.`,
        `Aluminium now properly requires you to build a metal refinery.`
      ]
    },
    {
      version: `0.4.18`,
      date: `7/1/2019`,
      changes: [
        `Planets choice now has more depth to it, each planet can be poor or rich in various resource types.`,
        `A mineral poor planet suffers anywhere from 1 to 10% penalty for that resource.`,
        `A mineral rich planet gains anywhere from 1 to 20% bonus for that resource.`,
        `The fire event no longer triggers for aquatic races.`,
        `The first interstellar probe now contributes to the number of potential target worlds.`,
        `All interstellar space probe costs are now cheaper.`
      ]
    },
    {
      version: `0.4.17`,
      date: `6/29/2019`,
      changes: [
        `Added indication of current challenge level to top bar.`,
        `Added H tags for accessibility.`
      ]
    },
    {
      version: `0.4.16`,
      date: `6/28/2019`,
      changes: [
        `New Hospital, heals wounded soldiers faster.`,
        `New Boot Camp, train new soldiers quicker.`,
        `Lowered research cost of Mass Driver from 170k to 160k.`,
        `Lowered Iridium cost of Mass Drivers.`,
        `Updated Mass Extinction unlock requirement.`
      ]
    },
    {
      version: `0.4.15`,
      date: `6/28/2019`,
      changes: [
        `Global bonuses are now multiplicative instead of additive.`,
        `Decreased base Elerium cost of Exotic Lab by 4.`,
        `Creative trait decreases cost creep instead of providing a flat discount.`,
        `ARPA 100% button replaced with remaining percentage value.`,
        `New experimental military advice.`
      ]
    },
    {
      version: `0.4.14`,
      date: `6/27/2019`,
      changes: [
        `Statues now cost Aluminium instead of Wrought Iron.`,
        `Nav Beacon now costs Aluminium instead of Iron.`,
        `Helium-3 Mine now costs Aluminium instead of Copper.`,
        `Elerium Mining Ship now costs Titanium instead of Iridium.`,
        `Iron Mining Ship now costs Aluminium instead of Titanium.`,
        `Dimension Compression upgrade now works correctly.`,
        `Aluminium can now be looted from battle.`
      ]
    },
    {
      version: `0.4.13`,
      date: `6/26/2019`,
      changes: [
        `Aluminium resource added to the game, research Bayer Process to unlock Metal Refinery which in turn unlocks Aluminum.`,
        `New Metal Refinery structure for producing Aluminium.`,
        `Alloy is now made out of Aluminium and Copper.`,
        `Sheet Metal is now made out of Aluminium.`,
        `Oil Powerplant and Propellant Depot now cost Aluminium instead of Steel.`,
        `Some minor accessibility improvements.`
      ]
    },
    {
      version: `0.4.12`,
      date: `6/24/2019`,
      changes: [
        `Blackhole achievement now gives a permanent perk for completing it, the perk strength depends on the achievement level.`,
        `Fixed issue with event timer being frozen after changing planets.`,
        `Fixed the unlocking of upgraded versions of some achievements.`,
        `Cost descriptions now show approximations above 10,000.`
      ]
    },
    {
      version: `0.4.11`,
      date: `6/24/2019`,
      changes: [
        `Re-evaluated starvation breakpoint.`,
        `Added Infested Terran achievement.`,
        `Titanium price is now reset after unlocking Hunter Process.`,
        `Resources now have a 25% chance of their market price changing per day, up from 10%.`
      ]
    },
    {
      version: `0.4.10`,
      date: `6/23/2019`,
      changes: [
        `Fixed stats tracking on demonic invasions so it actually tracks new invasions.`
      ]
    },
    {
      version: `0.4.9`,
      date: `6/23/2019`,
      changes: [
        `Fabrication facilities now increase craftsman cap.`,
        `Added stats tracking on demonic invasions.`,
        `Detail Oriented buffed to 50% from 33%.`,
        `Rigorous buffed to 100% from 66%.`,
        `Crafting bonus now shown for each resource.`,
        `Temple Faith bonus now applies to crafting in no plasmid challenge mode.`,
        `Mastery bonus now applies to crafting.`
      ]
    },
    {
      version: `0.4.8`,
      date: `6/22/2019`,
      changes: [
        `Fixed a bug that removed MAD when achieving unification.`,
        `Fixed missing options in evolution stage with picking avians after space reset.`
      ]
    },
    {
      version: `0.4.7`,
      date: `6/21/2019`,
      changes: [
        `Activating challenge genes now provide a bonus to the number of plasmids earned.`
      ]
    },
    {
      version: `0.4.6`,
      date: `6/21/2019`,
      changes: [
        `Reduced Nano Tube and Neutronium costs of bioseeder ship.`,
        `Reduced Mythril cost of Space Probes.`
      ]
    },
    {
      version: `0.4.5`,
      date: `6/19/2019`,
      changes: [
        `Mastery Bonus now unlockable in CRISPR.`,
        `Fixed bug with elerium mining that could cause negative mining when you lacked asteroid miners.`,
        `Fixed low power warning not clearing when you have no buildings active.`,
        `Fixed Sporgar label of Cottages in Steel & Mythril Beams research.`,
        `Gene Mutation research will no longer turn off when you run out of knowledge, instead it will pause.`,
        `Human creative trait buffed from 2% to 5%.`,
        `Troll regenerative trait buffed to heal 4 wounded per day instead of 2.`,
        `Ogre tough trait buffed to 25% from 10%.`,
        `Gecko optimistic trait buffed to 10% from 2%.`,
        `Arraak resourceful trait buffed from 5% to 10%.`,
        `Dracnid hoarder trait buffed from 10% to 20%.`,
        `Shroomi toxic trait buffed from 10% to 25%.`,
        `Wolven pack mentality trait now applies to apartments.`,
        `Reduced Nano Tube cost of Mining Drones.`
      ]
    },
    {
      version: `0.4.4`,
      date: `6/18/2019`,
      changes: [
        `Matter compression now applies to Wharves.`,
        `Xenophobia now applies to Wharves.`,
        `Plasmids earned by mutation now apply to no plasmid challenge run.`,
        `Reduced Nano Tube cost of Mining Drones.`
      ]
    },
    {
      version: `0.4.3`,
      date: `6/17/2019`,
      changes: [
        `Challenge mode achievement tracking.`,
        `Vocational Training for craftsman.`,
        `Spelling and grammar fixes.`,
        `Fixed incorrect reject unity reward text.`
      ]
    },
    {
      version: `0.4.2`,
      date: `6/16/2019`,
      changes: [
        `Added some clarification to breakdown of stress.`
      ]
    },
    {
      version: `0.4.1`,
      date: `6/16/2019`,
      changes: [
        `Fixed a bug with factories converted from some pre 0.4.0 save files.`
      ]
    },
    {
      version: `0.4.0`,
      date: `6/16/2019`,
      changes: [
        `Space reset option, control the destiny of your next race.`,
        `Challenge Modes.`,
        `New Stuff to discover.`,
        `New Achievements to unlock.`,
        `Added missing Cyclops racial trait.`,
        `World Domination, maybe.`,
        `Added soft reset option.`
      ]
    },
    {
      version: `0.3.12`,
      date: `6/11/2019`,
      changes: [
        `Fixed bug with riot event that caused it to trigger on high morale instead of low morale.`
      ]
    },
    {
      version: `0.3.11`,
      date: `6/10/2019`,
      changes: [
        `The Gas Moon and the Dwarf planets are now accessible.`,
        `New technologies based on new discoveries made in deep space.`,
        `Wharves can now be unlocked after discovering oil.`,
        `There is now an alternative method of unlocking steel.`,
        `Night Theme updated, popovers are no longer bright.`,
        `Trade route tooltips now include money being imported or exported.`,
        `New crispr upgrades for crafting.`,
        `Warmonger achievement requirement lowered from 10% to 8%.`
      ]
    },
    {
      version: `0.3.10`,
      date: `6/9/2019`,
      changes: [
        `Added code to fix peculiar failed space launch game state.`
      ]
    },
    {
      version: `0.3.9`,
      date: `6/8/2019`,
      changes: [
        `New official Evolve [Discord](https://discordapp.com/invite/dcwdQEr).`
      ]
    },
    {
      version: `0.3.8`,
      date: `6/7/2019`,
      changes: [
        `Fixed a problem with negative craftsman counts that could result from craftsman dying.`
      ]
    },
    {
      version: `0.3.7`,
      date: `6/6/2019`,
      changes: [
        `Warmongering is now tracked and high casualties may impact morale.`,
        `Depleting the mercenary pool will temporarily increase their cost.`,
        `Three new achievements related to war.`
      ]
    },
    {
      version: `0.3.6`,
      date: `6/5/2019`,
      changes: [
        `Fixed issue with production breakdowns not showing when income was only produced by trade.`,
        `Fixed issue that prevented affordability check from refreshing on space missions.`
      ]
    },
    {
      version: `0.3.5`,
      date: `6/5/2019`,
      changes: [
        `Mythril Craftsman now unlock correctly.`,
        `Fixed a bug that could pause the game if you ran out of Titanium.`
      ]
    },
    {
      version: `0.3.4`,
      date: `6/4/2019`,
      changes: [
        `The Asteroid Belt is now open for business.`,
        `Robotics Upgrades.`,
        `Automation renamed to Machinery.`,
        `Assembly Line upgrade for factory.`
      ]
    },
    {
      version: `0.3.3`,
      date: `6/3/2019`,
      changes: [
        `New Orbit Structure: Navigation Beacon.`,
        `New Red Planet Structures: Space Control Tower and Space Factory.`,
        `Reduced number of monuments required to unlock tourism from 4 to 2.`,
        `Cement plant workers now round their contribution to 2 decimal places.`,
        `Red planet mining now correctly attributes to the red planet in breakdowns.`
      ]
    },
    {
      version: `0.3.2`,
      date: `6/3/2019`,
      changes: [
        `Fixed bug that would let you launch the space missions without the proper resources, this would corrupt your game file and break the game.`,
        `Added code to detect games corrupted by the previous bug and fix them.`,
        `Fixed Fanaticism bug that wouldn't release lumberjacks when you have ent gods.`
      ]
    },
    {
      version: `0.3.1`,
      date: `6/3/2019`,
      changes: [
        `Added building check redundancy to auto correct game states that shouldn't occur anyway.`
      ]
    },
    {
      version: `0.3.0`,
      date: `6/2/2019`,
      changes: [
        `Space V1 Update.`,
        `This opens the first steps into space exploration, more to come... this is not the end.`,
        `Rebalanced storage caps to help the game feel more idle friendly.`
      ]
    },
    {
      version: `0.2.70`,
      date: `6/2/2019`,
      changes: [
        `Fixed bug when picking Fanaticism with cath gods that wouldn't release your farmers.`,
        `Fixed bug when upgrading weapon technology that wouldn't immediately show the increase in army rating.`
      ]
    },
    {
      version: `0.2.69`,
      date: `5/26/2019`,
      changes: [
        `Fixed bug which could let you get free barn or warehouse upgrade by essentially skipping over the tech.`,
        `Added aria button roles to many button like elements that were not technically buttons.`
      ]
    },
    {
      version: `0.2.68`,
      date: `5/26/2019`,
      changes: [
        `Fixed bug with Rock Quarry that prevented the 2% bonus from working unless you had electricity unlocked.`
      ]
    },
    {
      version: `0.2.67`,
      date: `5/24/2019`,
      changes: [
        `Revamp of farmer, lumberjack, and quarry worker jobs. These govern the most basic materials produced and can now assign as many workers as you like to these positions.`,
        `Farms now directly produce food instead of determining farmer cap.`,
        `Lumber Yards now increase lumber production instead of governing lumberjack cap.`,
        `Rock Quarry now increase stone production instead of governing quarry worker cap.`,
        `Sawmill powered on bonus reduced from 5% to 4%.`,
        `Rock Quarry powered on bonus reduced from 5% to 4%.`,
        `Stock Exchanges no longer cost Knowledge.`,
        `Fixed a display bug that could cause farmers to falsely show they produced more food than they actual did.`
      ]
    },
    {
      version: `0.2.66`,
      date: `5/22/2019`,
      changes: [
        `Added alternate row coloring to the market to help distinguish rows.`
      ]
    },
    {
      version: `0.2.65`,
      date: `5/21/2019`,
      changes: [
        `Sporgar race redesigned into a parasitic race that spreads through infecting victims.`
      ]
    },
    {
      version: `0.2.64`,
      date: `5/20/2019`,
      changes: [
        `Currency is now required before unlocking Basic Storage.`,
        `Primitive Axes are no longer gated behind Basic Storage.`,
        `Foundry now requires Metal Working to unlock and no longer requires Cement.`,
        `Research tab now defaults back to new when resetting.`,
        `Fixed issue with not being able to buy something if you had consumption on a resource and the cost was the same as your max capacity.`,
        `Fixed issue with max affordability check not refreshing on evolution stage.`,
        `Experimental Red-Green color blind theme.`
      ]
    },
    {
      version: `0.2.63`,
      date: `5/20/2019`,
      changes: [
        `Fixed an issue that accidentally set the default tax rate to 2% instead of 20% for new games.`
      ]
    },
    {
      version: `0.2.62`,
      date: `5/19/2019`,
      changes: [
        `Tax system revamped. Taxes can now be adjusted more granularly and effect morale instead of production.`,
        `Cement is now a requirement for theology since cement is needed for temples.`
      ]
    },
    {
      version: `0.2.61`,
      date: `5/19/2019`,
      changes: [
        `Every genus type now has its own evolution path.`
      ]
    },
    {
      version: `0.2.60`,
      date: `5/18/2019`,
      changes: [
        `Rescaled crate/container volumes. There are now substantially less crates/containers but they do a lot more per crate/container.`,
        `Spatial Reasoning now correctly applies to crates & containers.`,
        `Increased base value of several major storage facilities.`,
        `Added storage timers.`,
        `A.R.P.A. costs in popover now update their affordability check.`,
        `Buildings and Research that can not be afforded due to low capacity are now marked in red text.`
      ]
    },
    {
      version: `0.2.59`,
      date: `5/17/2019`,
      changes: [
        `Added additional validation to ensure save strings belong to evolve before importing.`,
        `Fixed army rating display when rating doesn't calculate to a whole number.`,
        `Fixed listing order of some resources.`,
        `Smelter Iron bonus breakdown fixed.`,
        `Added Selenophobia to breakdown lists.`
      ]
    },
    {
      version: `0.2.58`,
      date: `5/15/2019`,
      changes: [
        `Settings option to disable multiplier keys.`
      ]
    },
    {
      version: `0.2.57`,
      date: `5/15/2019`,
      changes: [
        `Added labor validation to coal miners.`,
        `Key Multipliers now work with job and trade route assignment.`
      ]
    },
    {
      version: `0.2.56`,
      date: `5/15/2019`,
      changes: [
        `Added +- symbols to trade route to distinguish import vs export.`
      ]
    },
    {
      version: `0.2.55`,
      date: `5/14/2019`,
      changes: [
        `Manually crafting resources now gets all the same bonuses as auto crafting.`,
        `Fixed Recombination crispr upgrade.`,
        `Death limits added to each war campaign level.`,
        `War assessment added for each war campaign level.`
      ]
    },
    {
      version: `0.2.54`,
      date: `5/13/2019`,
      changes: [
        `Uranium Breakdown Fixes.`
      ]
    },
    {
      version: `0.2.53`,
      date: `5/13/2019`,
      changes: [
        `Breakdown Accuracy Enhancements.`,
        `Some Kindling Kindred costs reduced.`,
        `Fixed bug related to Fanaticism and Ent gods with foundry workers assigned to make plywood.`,
        `Plasmid bonus now applies to the sundial.`,
        `Fixed some spelling errors.`
      ]
    },
    {
      version: `0.2.52`,
      date: `5/11/2019`,
      changes: [
        `Completed research can now be viewed on a separate tab under research.`,
        `Removed Plywood requirement from Stock Exchange for players with Kindling Kindred trait.`,
        `Fixed a CSS issue in the A.R.P.A. projects tab.`
      ]
    },
    {
      version: `0.2.51`,
      date: `5/11/2019`,
      changes: [
        `University starts slightly cheaper.`,
        `Added Spatial Superiority crispr upgrade.`,
        `Added Spatial Supremacy crispr upgrade.`,
        `Exporting a save string now automatically selects the text and copies it to the clipboard.`
      ]
    },
    {
      version: `0.2.50`,
      date: `5/10/2019`,
      changes: [
        `Added new capacity breakdowns for various resources.`
      ]
    },
    {
      version: `0.2.49`,
      date: `5/10/2019`,
      changes: [
        `Added changelog link to version listing.`,
        `Added protection against loading a corrupt save string.`,
        `Greedy trait is now less greedy.`,
        `Spelling error fixes.`
      ]
    },
    {
      version: `0.2.48`,
      date: `5/8/2019`,
      changes: [
        `Resources that are at greater than 99% capacity now change color to indicate they are at cap.`,
        `Attacks from rival cities should no longer cause more wounded soldiers than you have.`,
        `Assigning craftsman when no citizens are free will no longer take the labor from another job.`
      ]
    },
    {
      version: `0.2.47`,
      date: `5/8/2019`,
      changes: [
        `Gluttony trait lowered to 10% from 25% .`,
        `High Metabolism trait lowered to 5% from 10% .`,
        `Fixed Sheet Metal not being added to craftsman list when unlocked.`
      ]
    },
    {
      version: `0.2.46`,
      date: `5/8/2019`,
      changes: [
        `The 5% library bonus was only applying to scientists which was not intended. This now applies to the sundial and professors as well.`
      ]
    },
    {
      version: `0.2.45`,
      date: `5/8/2019`,
      changes: [
        `Fixed an issue that allowed you to get extra benefits from under-powered wardenclyffe towers and biolabs.`
      ]
    },
    {
      version: `0.2.44`,
      date: `5/8/2019`,
      changes: [
        `Fixed Key Multipliers getting stuck down.`
      ]
    },
    {
      version: `0.2.43`,
      date: `5/7/2019`,
      changes: [
        `Fixed bug that could cause player to get free extra crafted resources when using the +5 option.`,
        `Reordered buildings in Village tab to group them more logically.`
      ]
    },
    {
      version: `0.2.42`,
      date: `5/7/2019`,
      changes: [
        `Fixed a bug that was causing soldiers to become immortal.`,
        `Fixed some bugs with morale that caused some weather patterns to apply a different value than was reported.`,
        `Added weather to Food breakdown.`
      ]
    },
    {
      version: `0.2.41`,
      date: `5/7/2019`,
      changes: [
        `Added a 5% bonus to global knowledge production on libraries.`
      ]
    },
    {
      version: `0.2.40`,
      date: `5/7/2019`,
      changes: [
        `The Hivemind trait no longer applies to farmers as this was especially punishing.`
      ]
    },
    {
      version: `0.2.39`,
      date: `5/7/2019`,
      changes: [
        `Evolution 2.0: Redid the evolution stage of the game to make it feel less tedious and like it matters more to the next phase of the game.`,
        `Fixed a bug that has the intended effects of Pessimism and Optimism traits swapped.`
      ]
    },
    {
      version: `0.2.38`,
      date: `5/6/2019`,
      changes: [
        `First public release.`
      ]
    }
  ];
  function getTopChange(elm) {
    let index2 = 0;
    for (index2 = 0; index2 < changeList.length; index2++) {
      if (!changeList[index2].hasOwnProperty("revision")) {
        break;
      }
    }
    for (let idx = index2; idx >= 0; idx--) {
      elm.append(`<div class="type"><h2 class="has-text-warning">v${changeList[idx].version}${changeList[idx].hasOwnProperty("revision") ? changeList[idx].revision : ""}</h2><span class="has-text-caution">${changeList[idx].date}</span></div>`);
      for (let i = 0; i < changeList[idx].changes.length; i++) {
        elm.append(`<div class="desc condense">${changeList[idx].changes[i]}</div>`);
      }
    }
    return elm;
  }

  // src/debug.js
  function enableDebug() {
    if (global.settings.expose) {
      window.evolve = {
        actions: deepClone(actions),
        races: deepClone(races),
        traits: deepClone(traits),
        tradeRatio: deepClone(tradeRatio),
        craftCost: deepClone(craftCost(true)),
        atomic_mass: deepClone(atomic_mass),
        f_rate: deepClone(f_rate),
        checkAffordable: deepClone(checkAffordable),
        adjustCosts: deepClone(adjustCosts),
        armyRating: deepClone(armyRating),
        tradeBuyPrice: deepClone(tradeBuyPrice),
        tradeSellPrice: deepClone(tradeSellPrice),
        fuel_adjust: deepClone(fuel_adjust),
        int_fuel_adjust: deepClone(int_fuel_adjust),
        alevel: deepClone(alevel),
        messageQueue: deepClone(messageQueue),
        loc: deepClone(loc),
        shipCosts: deepClone(shipCosts),
        updateDebugData: deepClone(updateDebugData),
        global: {},
        breakdown: {}
      };
    }
  }
  function updateDebugData() {
    if (global.settings.expose) {
      window.evolve.global = deepClone(global);
      window.evolve.craftCost = deepClone(craftCost(true)), window.evolve.breakdown = deepClone(breakdown);
    }
  }

  // src/main.js
  var turboSpeed = 10;
  Object.defineProperty(window, "turboSpeed", {
    get() {
      return turboSpeed;
    },
    set(v) {
      turboSpeed = v;
      console.log("\u5168\u5C40\u901F\u5EA6\u6539\u4E3A", v);
    }
  });
  window.global = global;
  {
    $(document).ready(function() {
      if (!window.matchMedia)
        return;
      var current = $('head > link[rel="icon"][media]');
      $.each(current, function(i, icon) {
        var match = window.matchMedia(icon.media);
        function swap() {
          if (match.matches) {
            current.remove();
            current = $(icon).appendTo("head");
          }
        }
        match.addListener(swap);
        swap();
      });
    });
  }
  var multitab = false;
  window.addEventListener("storage", (e) => {
    if (multitab === false) {
      messageQueue(loc(`multitab_warning`), "danger", true);
    }
    multitab = true;
  });
  if (global.settings.expose) {
    enableDebug();
  }
  var quickMap = {
    showCiv: 1,
    showCivic: 2,
    showResearch: 3,
    showResources: 4,
    showGenetics: 5,
    showAchieve: 6,
    settings: 7
  };
  $(document).keydown(function(e) {
    e = e || window.event;
    let key = e.key || e.keyCode;
    Object.keys(keyMap).forEach(function(k) {
      if (key === global.settings.keyMap[k]) {
        keyMap[k] = true;
      }
    });
    if (!$(`input`).is(":focus") && !$(`textarea`).is(":focus")) {
      Object.keys(quickMap).forEach(function(k) {
        if (key === global.settings.keyMap[k] && global.settings.civTabs !== 0 && (k === "settings" || global.settings[k])) {
          if (global.settings.civTabs !== quickMap[k]) {
            global.settings.civTabs = quickMap[k];
          } else {
            let s = global.settings;
            let tabName = null;
            let tabList = null;
            switch (quickMap[k]) {
              // Some sub tabs are always visible, and JavaScript strings
              // are truthy, so the sub tab name is used for clarity.
              case quickMap.showCiv:
                tabName = "spaceTabs";
                tabList = [s.showCity, s.showSpace, s.showDeep, s.showGalactic, s.showPortal, s.showOuter, s.showTau, s.showEden];
                break;
              case quickMap.showCivic:
                tabName = "govTabs";
                tabList = ["Government", s.showIndustry, s.showPowerGrid, s.showMil, s.showMechLab, s.showShipYard, s.showPsychic, s.showWish];
                break;
              case quickMap.showResearch:
                tabName = "resTabs";
                tabList = ["New", "Completed"];
                break;
              case quickMap.showResources:
                tabName = "marketTabs";
                tabList = [s.showMarket, s.showStorage, s.showEjector, s.showCargo, s.showAlchemy];
                break;
              case quickMap.showGenetics:
                s = global.settings.arpa;
                tabName = "arpaTabs";
                tabList = [s.physics, s.genetics, s.crispr, s.blood];
                break;
              case quickMap.showAchieve:
                tabName = "statsTabs";
                tabList = ["Stats", "Achievements", "Perks"];
                break;
              case quickMap.settings:
              default:
                tabName = "";
                tabList = [];
                break;
            }
            for (let i = 1; i < tabList.length; i += 1) {
              let next = (s[tabName] + i) % tabList.length;
              if (tabList[next]) {
                s[tabName] = next;
                break;
              }
            }
          }
          if (!global.settings.tabLoad) {
            loadTab(global.settings.civTabs);
          }
        }
      });
    }
  });
  $(document).keyup(function(e) {
    e = e || window.event;
    let key = e.key || e.keyCode;
    Object.keys(keyMap).forEach(function(k) {
      if (key === global.settings.keyMap[k]) {
        keyMap[k] = false;
      }
    });
  });
  $(document).mousemove(function(e) {
    e = e || window.event;
    Object.keys(global.settings.keyMap).forEach(function(k) {
      switch (global.settings.keyMap[k]) {
        case "Shift":
        case 16:
          keyMap[k] = e.shiftKey ? true : false;
          break;
        case "Control":
        case 17:
          keyMap[k] = e.ctrlKey ? true : false;
          break;
        case "Alt":
        case 18:
          keyMap[k] = e.altKey ? true : false;
          break;
        case "Meta":
        case 91:
          keyMap[k] = e.metaKey ? true : false;
          break;
      }
    });
  });
  index();
  var revision = global["revision"] ? global["revision"] : "";
  if (global["beta"]) {
    $("#topBar .version > a").html(`v${global.version} Beta ${global.beta}${revision}`);
  } else {
    $("#topBar .version > a").html("v" + global.version + revision);
  }
  initMessageQueue();
  if (global.lastMsg) {
    Object.keys(global.lastMsg).forEach(function(tag) {
      global.lastMsg[tag].reverse().forEach(function(msg) {
        messageQueue(msg.m, msg.c, true, [tag], true);
      });
      global.lastMsg[tag].reverse();
    });
  }
  $(`#msgQueue`).height(global.settings.msgQueueHeight);
  $(`#buildQueue`).height(global.settings.buildQueueHeight);
  if (global.queue.rename === true) {
    updateQueueNames(true);
    global.queue.rename = false;
  }
  global.settings.sPackMsg = save.getItem("string_pack_name") ? loc(`string_pack_using`, [save.getItem("string_pack_name")]) : loc(`string_pack_none`);
  if (global.queue.display) {
    calcQueueMax();
  }
  if (global.r_queue.display) {
    calcRQueueMax();
  }
  mainVue();
  if (global["new"]) {
    messageQueue(loc("new"), "warning", false, ["progress"]);
    global["new"] = false;
  }
  if (global.city["mass_driver"]) {
    p_on["mass_driver"] = global.city["mass_driver"].on;
  }
  if (global.portal["turret"]) {
    p_on["turret"] = global.portal.turret.on;
  }
  if (global.interstellar["starport"]) {
    p_on["starport"] = global.interstellar.starport.on;
  }
  if (global.interstellar["fusion"]) {
    int_on["fusion"] = global.interstellar.fusion.on;
  }
  if (global.interstellar["s_gate"]) {
    p_on["s_gate"] = global.interstellar.s_gate.on;
  }
  if (global.portal["hell_forge"]) {
    p_on["hell_forge"] = global.portal.hell_forge.on;
  }
  if (global.portal["demon_forge"]) {
    p_on["demon_forge"] = global.portal.demon_forge.on;
  }
  if (global.space["sam"]) {
    p_on["sam"] = global.space.sam.on;
  }
  if (global.space["operating_base"]) {
    p_on["operating_base"] = global.space.operating_base.on;
    support_on["operating_base"] = global.space.operating_base.on;
  }
  if (global.space["fob"]) {
    p_on["fob"] = global.space.fob.on;
  }
  if (global.tauceti["fusion_generator"]) {
    p_on["fusion_generator"] = global.tauceti.fusion_generator.on;
  }
  if (global.eden["encampment"]) {
    p_on["encampment"] = global.eden.encampment.on;
  }
  if (global.eden["soul_engine"]) {
    p_on["soul_engine"] = global.eden.soul_engine.on;
    support_on["soul_engine"] = global.eden.soul_engine.on;
  }
  if (global.eden["corruptor"]) {
    p_on["corruptor"] = global.eden.corruptor.on;
  }
  if (global.eden["ectoplasm_processor"]) {
    p_on["ectoplasm_processor"] = global.eden.ectoplasm_processor.on;
    support_on["ectoplasm_processor"] = global.eden.ectoplasm_processor.on;
  }
  if (global.eden["research_station"]) {
    p_on["research_station"] = global.eden.research_station.on;
    support_on["research_station"] = global.eden.research_station.on;
  }
  if (global.eden["bunker"]) {
    p_on["bunker"] = global.eden.bunker.on;
    support_on["bunker"] = global.eden.bunker.on;
  }
  if (global.eden["spirit_vacuum"]) {
    p_on["spirit_vacuum"] = global.eden.spirit_vacuum.on;
  }
  if (global.eden["spirit_battery"]) {
    p_on["spirit_battery"] = global.eden.spirit_battery.on;
  }
  if (global.city["replicator"] && global.race?.replicator?.pow && global.race?.governor?.config?.replicate?.pow?.on) {
    if (Object.values(global.race.governor.tasks || {}).includes("replicate")) {
      global.city.replicator.on = 0;
      global.city.replicator.count = 0;
      global.race.replicator.pow = 0;
    }
  }
  defineJobs(true);
  defineResources();
  initTabs();
  buildQueue();
  if (global.race["shapeshifter"]) {
    shapeShift(false, true);
  }
  setupRituals();
  Object.keys(gridDefs()).forEach(function(gridtype) {
    powerGrid(gridtype);
  });
  resizeGame();
  vBind({
    el: "#race",
    data: {
      race: global.race,
      city: global.city
    },
    methods: {
      name() {
        return flib("name");
      }
    },
    filters: {
      replicate(kw) {
        if (global.race.hasOwnProperty("governor") && global.race.governor.hasOwnProperty("tasks") && global.race.hasOwnProperty("replicator") && Object.values(global.race.governor.tasks).includes("replicate") && global.race.governor.config.replicate.pow.on && global.race.replicator.pow > 0) {
          return kw + global.race.replicator.pow;
        }
        return kw;
      },
      approx(kw) {
        return +kw.toFixed(2);
      },
      mRound(m) {
        return +m.toFixed(1);
      }
    }
  });
  popover(
    "race",
    function() {
      return typeof races[global.race.species].desc === "string" ? races[global.race.species].desc : races[global.race.species].desc();
    },
    {
      elm: "#race > .name"
    }
  );
  var moraleCap = 125;
  popover(
    "morale",
    function(obj) {
      if (global.city.morale.unemployed !== 0) {
        let type = global.city.morale.unemployed > 0 ? "success" : "danger";
        obj.popper.append(`<p class="modal_bd"><span>${loc(global.race["playful"] ? "morale_hunter" : "morale_unemployed")}</span> <span class="has-text-${type}"> ${+global.city.morale.unemployed.toFixed(1)}%</span></p>`);
      }
      if (global.city.morale.stress !== 0) {
        let type = global.city.morale.stress > 0 ? "success" : "danger";
        obj.popper.append(`<p class="modal_bd"><span>${loc("morale_stress")}</span> <span class="has-text-${type}"> ${+global.city.morale.stress.toFixed(1)}%</span></p>`);
      }
      let total = 100 + global.city.morale.unemployed + global.city.morale.stress;
      Object.keys(global.city.morale).forEach(function(morale) {
        if (!["current", "unemployed", "stress", "season", "cap", "potential"].includes(morale) && global.city.morale[morale] !== 0) {
          total += global.city.morale[morale];
          let type = global.city.morale[morale] > 0 ? "success" : "danger";
          let value = global.city.morale[morale];
          if (morale === "entertain" && global.civic.govern.type === "democracy") {
            let democracy = 1 + govEffect.democracy()[0] / 100;
            value /= democracy;
          }
          let label = {};
          obj.popper.append(`<p class="modal_bd"><span>${loc(`morale_${morale}`)}</span> <span class="has-text-${type}"> ${+value.toFixed(1)}%</span></p>`);
          if (morale === "entertain" && global.civic.govern.type === "democracy") {
            let democracy = govEffect.democracy()[0];
            obj.popper.append(`<p class="modal_bd"><span>\u1102${loc("govern_democracy")}</span> <span class="has-text-success"> +${democracy}%</span></p>`);
          }
        }
      });
      if (global.city.morale.season !== 0) {
        total += global.city.morale.season;
        let season = global.city.calendar.season === 0 ? loc("morale_spring") : global.city.calendar.season === 1 ? loc("morale_summer") : loc("morale_winter");
        let type = global.city.morale.season > 0 ? "success" : "danger";
        obj.popper.append(`<p class="modal_bd"><span>${season}</span> <span class="has-text-${type}"> ${+global.city.morale.season.toFixed(1)}%</span></p>`);
      }
      if (global.civic.govern.type === "corpocracy") {
        let penalty = govEffect.corpocracy()[3];
        total -= penalty;
        obj.popper.append(`<p class="modal_bd"><span>${loc("govern_corpocracy")}</span> <span class="has-text-danger"> -${penalty}%</span></p>`);
      }
      if (global.civic.govern.type === "republic") {
        let repub = govEffect.republic()[1];
        total += repub;
        obj.popper.append(`<p class="modal_bd"><span>${loc("govern_republic")}</span> <span class="has-text-success"> ${repub}%</span></p>`);
      }
      if (global.civic.govern.type === "federation") {
        let fed = govEffect.federation()[1];
        total += fed;
        obj.popper.append(`<p class="modal_bd"><span>${loc("govern_federation")}</span> <span class="has-text-success"> ${fed}%</span></p>`);
      }
      let milVal = govActive("militant", 1);
      if (milVal) {
        total -= milVal;
        obj.popper.append(`<p class="modal_bd"><span>${loc("gov_trait_militant")}</span> <span class="has-text-danger"> -${milVal}%</span></p>`);
      }
      if (global.race["cheese"]) {
        let raw_cheese = global.stats.hasOwnProperty("reset") ? global.stats.reset + 1 : 1;
        let cheese = +(raw_cheese / (raw_cheese + 10) * 11).toFixed(2);
        total += cheese;
        obj.popper.append(`<p class="modal_bd"><span>${swissKnife(true, false)}</span> <span class="has-text-success"> ${cheese}%</span></p>`);
      }
      if (global.race["motivated"]) {
        let boost = Math.ceil(global.race["motivated"] ** 0.4);
        total += boost;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`event_motivation_bd`)}</span> <span class="has-text-success"> ${boost}%</span></p>`);
      }
      if (global.race["artisan"] && global.civic.craftsman.workers > 0) {
        let boost = +(traits.artisan.vars()[2] * global.civic.craftsman.workers).toFixed(2);
        total += boost;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`trait_artisan_name`)}</span> <span class="has-text-success"> ${boost}%</span></p>`);
      }
      if (global.race["pet"]) {
        let change = 1;
        if (global.race["catnip"]) {
          change = traits.catnip.vars()[0];
        } else if (global.race["anise"]) {
          change = traits.anise.vars()[0];
        }
        if (global.race["pet"]) {
          if (global.race.pet.event > 0) {
            if (global.race["catnip"]) {
              change += traits.catnip.vars()[0];
            } else if (global.race["anise"]) {
              change += traits.anise.vars()[0];
            } else {
              change++;
            }
          }
          if (global.race.pet.pet > 0) {
            change += global.race.pet.type === "cat" ? global.race["catnip"] ? traits.catnip.vars()[1] : 2 : global.race["anise"] ? traits.anise.vars()[1] : 1;
          } else if (global.race.pet.pet < 0) {
            change -= global.race.pet.type === "cat" ? global.race["catnip"] ? traits.catnip.vars()[1] : 2 : global.race["anise"] ? traits.anise.vars()[1] : 1;
          }
        }
        if (change !== 0) {
          total += change;
          let style = change > 0 ? "success" : "danger";
          obj.popper.append(`<p class="modal_bd"><span>${loc(`event_pet_${global.race.pet.type}_owner`)}</span> <span class="has-text-${style}"> ${change}%</span></p>`);
        }
      }
      if (global.race["wishStats"] && global.race.wishStats.fame !== 0) {
        total += global.race.wishStats.fame;
        if (global.race.wishStats.fame > 0) {
          obj.popper.append(`<p class="modal_bd"><span>${loc(`wish_reputable`)}</span> <span class="has-text-success"> ${global.race.wishStats.fame}%</span></p>`);
        } else {
          obj.popper.append(`<p class="modal_bd"><span>${loc(`wish_notorious`)}</span> <span class="has-text-danger"> ${global.race.wishStats.fame}%</span></p>`);
        }
      }
      if (global.civic["homeless"]) {
        let homeless = global.civic.homeless / 2;
        total -= homeless;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`homeless`)}</span> <span class="has-text-danger"> -${homeless}%</span></p>`);
      }
      if (global.tech["vax_c"] || global.tech["vax_f"]) {
        let drop = global.tech["vax_c"] ? 10 : 50;
        total -= drop;
        obj.popper.append(`<p class="modal_bd"><span>${loc(global.tech["vax_c"] ? `tech_vax_strat4_bd` : `tech_vax_strat2_bd`)}</span> <span class="has-text-danger"> -${drop}%</span></p>`);
      } else if (global.tech["vax_s"]) {
        let gain = 20;
        total += gain;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`tech_vax_strat3_bd`)}</span> <span class="has-text-success"> ${gain}%</span></p>`);
      }
      if (global.city["tormented"]) {
        total -= global.city.tormented;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`trait_tormented_name`)}</span> <span class="has-text-danger"> -${global.city.tormented}%</span></p>`);
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.bad > 0) {
        let badPress = Math.floor(global.race.wishStats.bad / 75) + 1;
        total -= badPress * 5;
        obj.popper.append(`<p class="modal_bd"><span>${loc(`wish_bad`)}</span> <span class="has-text-danger"> -${badPress * 5}%</span></p>`);
      }
      total = +total.toFixed(1);
      let container = $(`<div></div>`);
      obj.popper.append(container);
      container.append(`<div class="modal_bd sum"><span>${loc("morale_total")}</span> <span class="has-text-warning"> ${+total.toFixed(1)}%</span></div>`);
      container.append(`<div class="modal_bd"><span>${loc("morale_max")}</span> <span class="has-text-${total > moraleCap ? "caution" : "warning"}"> ${+moraleCap.toFixed(1)}%</span></div>`);
      container.append(`<div class="modal_bd"><span>${loc("morale_current")}</span> <span class="has-text-warning"> ${+global.city.morale.current.toFixed(1)}%</span></div>`);
      return void 0;
    },
    {
      classes: `has-background-light has-text-dark`
    }
  );
  popover(
    "powerStatus",
    function(obj) {
      let drain = +(global.city.power_total - global.city.power).toFixed(2);
      Object.keys(power_generated).forEach(function(k) {
        if (power_generated[k]) {
          let gen = +power_generated[k];
          obj.popper.append(`<p class="modal_bd"><span>${k}</span> <span class="has-text-success">+${+gen.toFixed(2)}</span></p>`);
        }
      });
      obj.popper.append(`<p class="modal_bd"><span>${loc("power_consumed")}</span> <span class="has-text-danger"> -${drain}</span></p>`);
      let avail = +global.city.power.toFixed(2);
      if (global.city.power > 0) {
        obj.popper.append(`<p class="modal_bd sum"><span>${loc("power_available")}</span> <span class="has-text-success">${avail}</span></p>`);
      } else {
        obj.popper.append(`<p class="modal_bd sum"><span>${loc("power_available")}</span> <span class="has-text-danger">${avail}</span></p>`);
      }
    },
    {
      classes: `has-background-light has-text-dark`
    }
  );
  if (global.settings.pause) {
    $(`#pausegame`).addClass("pause");
  } else {
    $(`#pausegame`).addClass("play");
  }
  vBind({
    el: "#topBar",
    data: {
      city: global.city,
      race: global.race,
      s: global.settings
    },
    methods: {
      sign() {
        return seasonDesc("sign");
      },
      getAstroSign() {
        return seasonDesc("astrology");
      },
      weather() {
        return seasonDesc("weather");
      },
      temp() {
        return seasonDesc("temp");
      },
      moon() {
        return seasonDesc("moon");
      },
      season() {
        return seasonDesc("season");
      },
      showUniverse() {
        return global.race.universe === "standard" || global.race.universe === "bigbang" ? false : true;
      },
      showSim() {
        return global["sim"] ? true : false;
      },
      atRemain() {
        return loc(`accelerated_time`);
      },
      pause() {
        $(`#pausegame`).removeClass("play");
        $(`#pausegame`).removeClass("pause");
        if (global.settings.pause) {
          global.settings.pause = false;
          $(`#pausegame`).addClass("play");
        } else {
          global.settings.pause = true;
          $(`#pausegame`).addClass("pause");
        }
        if (!global.settings.pause && !webWorker.s) {
          gameLoop("start");
        }
      },
      pausedesc() {
        return global.settings.pause ? loc("game_play") : loc("game_pause");
      },
      showPet() {
        return global.race["pet"] ? true : false;
      },
      petPet() {
        if (global.race["pet"] && global.race.pet.pet === 0) {
          let outcome = global.race.pet.type === "cat" ? Math.rand(0, 3) : Math.rand(0, 10);
          if (outcome === 0) {
            global.race.pet.pet = -60;
            messageQueue(loc(`event_${global.race.pet.type}_pet_failure`, [loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)]), false, false, ["events", "minor_events"]);
          } else {
            global.race.pet.pet = 60;
            messageQueue(loc(`event_${global.race.pet.type}_pet_success`, [loc(`event_${global.race.pet.type}_name${global.race.pet.name}`)]), false, false, ["events", "minor_events"]);
          }
        }
      }
    },
    filters: {
      planet(species) {
        return races[species].home;
      },
      universe(universe) {
        return universe === "standard" || universe === "bigbang" ? "" : universe_types[universe].name;
      },
      remain(at) {
        let minutes = Math.ceil(at * loopTimers().longTimer / 6e4);
        if (minutes > 0) {
          let hours = Math.floor(minutes / 60);
          minutes -= hours * 60;
          return `${hours}:${minutes.toString().padStart(2, "0")}`;
        }
        return;
      }
    }
  });
  ["astroSign"].forEach(function(topId) {
    popover(`${topId}`, function() {
      return seasonDesc("sign");
    }, {
      elm: $(`#${topId}`)
    });
  });
  popover(
    "topBarPlanet",
    function(obj) {
      if (global.race.species === "protoplasm") {
        obj.popper.append($(`<span>${loc("infant")}</span>`));
      } else {
        let planet = races[global.race.species].home;
        let race = flib("name");
        let planet_label = biomes[global.city.biome].label;
        let trait = global.city.ptrait;
        if (trait.length > 0) {
          let traits2 = "";
          trait.forEach(function(t) {
            if (planetTraits.hasOwnProperty(t)) {
              if (t === "mellow" && global.race.species === "entish") {
                traits2 += `${loc("planet_mellow_eg")} `;
              } else {
                traits2 += `${planetTraits[t].label} `;
              }
            }
          });
          planet_label = `${traits2}${planet_label}`;
        }
        let orbit = orbitLength();
        let geo_traits = planetGeology(global.city.geology);
        let challenges = "";
        if (global.race["truepath"]) {
          challenges = challenges + `<div>${loc("evo_challenge_truepath_recap")}</div>`;
        }
        if (global.race["junker"]) {
          challenges = challenges + `<div>${loc("evo_challenge_junker_desc")} ${loc("evo_challenge_junker_conditions")}</div>`;
        }
        if (global.race["joyless"]) {
          challenges = challenges + `<div>${loc("evo_challenge_joyless_desc")} ${loc("evo_challenge_joyless_conditions")}</div>`;
        }
        if (global.race["steelen"]) {
          challenges = challenges + `<div>${loc("evo_challenge_steelen_desc")} ${loc("evo_challenge_steelen_conditions")}</div>`;
        }
        if (global.race["decay"]) {
          challenges = challenges + `<div>${loc("evo_challenge_decay_desc")} ${loc("evo_challenge_decay_conditions")}</div>`;
        }
        if (global.race["emfield"]) {
          challenges = challenges + `<div>${loc("evo_challenge_emfield_desc")} ${loc("evo_challenge_emfield_conditions")}</div>`;
        }
        if (global.race["inflation"]) {
          challenges = challenges + `<div>${loc("evo_challenge_inflation_desc")} ${loc("evo_challenge_inflation_conditions")}</div>`;
        }
        if (global.race["banana"]) {
          challenges = challenges + `<div>${loc("evo_challenge_banana_desc")} ${loc("wiki_achieve_banana1")}. ${loc("wiki_achieve_banana2")}. ${loc("wiki_achieve_banana3")}. ${loc("wiki_achieve_banana4", [500])}. ${loc("wiki_achieve_banana5", [50])}.</div>`;
        }
        if (global.race["witch_hunter"]) {
          challenges = challenges + `<div>${loc("evo_challenge_witch_hunter_desc")}</div>`;
        }
        if (global.race["nonstandard"]) {
          challenges = challenges + `<div>${loc("evo_challenge_nonstandard_desc")}</div>`;
        }
        if (global.race["gravity_well"]) {
          challenges = challenges + `<div>${loc("evo_challenge_gravity_well_desc")}</div>`;
        }
        if (global.race["warlord"]) {
          challenges = challenges + `<div>${loc("evo_challenge_warlord_desc")}</div>`;
        }
        if (global.race["fasting"]) {
          challenges = challenges + `<div>${loc("evo_challenge_fasting_desc")}</div>`;
        }
        if (global.race["lone_survivor"]) {
          challenges = challenges + `<div>${loc("evo_challenge_lone_survivor_desc")}</div>`;
        }
        if (global.race["sludge"]) {
          challenges = challenges + `<div>${loc("evo_challenge_sludge_desc")} ${loc("evo_challenge_sludge_conditions")}</div>`;
        }
        if (global.race["ultra_sludge"]) {
          challenges = challenges + `<div>${loc("evo_challenge_ultra_sludge_desc")} ${loc("evo_challenge_ultra_sludge_conditions")}</div>`;
        }
        if (global.race["orbit_decay"]) {
          let impact = global.race["orbit_decayed"] ? "" : loc("evo_challenge_orbit_decay_impact", [global.race["orbit_decay"] - global.stats.days]);
          let state = global.race["orbit_decayed"] ? global.race["tidal_decay"] ? loc(`planet_kamikaze_msg`) : loc("evo_challenge_orbit_decay_impacted", [races[global.race.species].home]) : loc("evo_challenge_orbit_decay_desc");
          challenges = challenges + `<div>${state} ${loc("evo_challenge_orbit_decay_conditions")} ${impact}</div>`;
          if (calc_mastery() >= 100 && global.race.universe !== "antimatter") {
            challenges = challenges + `<div class="has-text-caution">${loc("evo_challenge_cataclysm_warn")}</div>`;
          } else {
            challenges = challenges + `<div class="has-text-danger">${loc("evo_challenge_scenario_warn")}</div>`;
          }
        }
        if (global.race["cataclysm"]) {
          if (calc_mastery() >= 50 && global.race.universe !== "antimatter") {
            challenges = challenges + `<div>${loc("evo_challenge_cataclysm_desc")}</div><div class="has-text-caution">${loc("evo_challenge_cataclysm_warn")}</div>`;
          } else {
            challenges = challenges + `<div>${loc("evo_challenge_cataclysm_desc")}</div><div class="has-text-danger">${loc("evo_challenge_scenario_warn")}</div>`;
          }
        }
        obj.popper.append($(`<div>${loc(global.race["cataclysm"] ? "no_home" : "home", [planet, race, planet_label, orbit])}</div>${geo_traits}${challenges}`));
      }
      return void 0;
    },
    {
      elm: `#topBar .planetWrap .planet`,
      classes: `has-background-light has-text-dark`
    }
  );
  popover(
    "topBarUniverse",
    function(obj) {
      obj.popper.append($(`<div>${universe_types[global.race.universe].desc}</div>`));
      obj.popper.append($(`<div>${universe_types[global.race.universe].effect}</div>`));
      return void 0;
    },
    {
      elm: `#topBar .planetWrap .universe`,
      classes: `has-background-light has-text-dark`
    }
  );
  popover(
    "topBarSimulation",
    function(obj) {
      obj.popper.append($(`<div>${loc(`evo_challenge_simulation_topbar`)}</div>`));
      return void 0;
    },
    {
      elm: `#topBar .planetWrap .simulation`,
      classes: `has-background-light has-text-dark`
    }
  );
  if (global.race["orbit_decay"] && !global.race["orbit_decayed"]) {
    popover(
      `infoTimer`,
      function() {
        return global.race["orbit_decayed"] ? "" : loc("evo_challenge_orbit_decay_impact", [global.race["orbit_decay"] - global.stats.days]);
      },
      {
        elm: `#infoTimer`,
        classes: `has-background-light has-text-dark`
      }
    );
  }
  challengeIcon();
  drawPet();
  if (global.race.species === "protoplasm") {
    global.resource.RNA.display = true;
    let perk_rank = global.stats.feat["master"] && global.stats.achieve["ascended"] && global.stats.achieve.ascended.l > 0 ? Math.min(global.stats.achieve.ascended.l, global.stats.feat["master"]) : 0;
    if (global["sim"]) {
      perk_rank = 5;
    }
    if (perk_rank > 0 && !global.evolution["mloaded"]) {
      let evolve_actions = ["dna", "membrane", "organelles", "nucleus", "eukaryotic_cell", "mitochondria"];
      for (let i = 0; i < evolve_actions.length; i++) {
        if (!global.evolution[evolve_actions[i]]) {
          global.evolution[evolve_actions[i]] = { count: 0 };
        }
      }
      global.evolution["dna"] = 1;
      global.resource.DNA.display = true;
      global.evolution.membrane.count = perk_rank * 2;
      global.evolution.eukaryotic_cell.count = perk_rank;
      global.evolution.mitochondria.count = perk_rank;
      global.evolution.organelles.count = perk_rank * 2;
      global.evolution.nucleus.count = perk_rank * 2;
      global.tech["evo"] = 2;
      global.evolution["mloaded"] = 1;
    }
    let grand_rank = global.stats.feat["grandmaster"] && global.stats.achieve["corrupted"] && global.stats.achieve.corrupted.l > 0 ? Math.min(global.stats.achieve.corrupted.l, global.stats.feat["grandmaster"]) : 0;
    if (global["sim"]) {
      grand_rank = 5;
    }
    if (grand_rank >= 5 && !global.evolution["gmloaded"]) {
      global.tech["evo"] = 6;
      global.evolution["gselect"] = true;
      global.evolution["gmloaded"] = 1;
      global.evolution["final"] = 80;
      global.tech["evo_humanoid"] = 1;
      global.tech["evo_giant"] = 1;
      global.tech["evo_small"] = 1;
      global.tech["evo_animalism"] = 2;
      global.tech["evo_demonic"] = 1;
      global.tech["evo_angelic"] = 1;
      global.tech["evo_insectoid"] = 1;
      global.tech["evo_eggshell"] = 2;
      global.tech["evo_eldritch"] = 1;
      global.tech["evo_sand"] = 1;
      global.tech["evo_polar"] = 1;
      global.tech["evo_heat"] = 1;
      global.tech["evo_fey"] = 1;
      global.tech["evo_aquatic"] = 1;
    }
    if (global.race.universe === "bigbang") {
      global.seed = global.race.seed;
      setUniverse();
    } else if (global.race.seeded && !global.race["chose"]) {
      global.seed = global.race.seed;
      genPlanets();
    } else {
      drawEvolution();
    }
  } else {
    if (global.portal.hasOwnProperty("soul_forge") && global.portal.soul_forge.on) {
      p_on["soul_forge"] = 1;
    }
    setWeather();
  }
  set_qlevel(calcQuantumLevel(true));
  $("#lbl_city").html("Village");
  var loopTick = 0;
  function execGameLoops(periods = 1) {
    const maxCatchUp = webWorker.longRatio * 12;
    periods = Math.min(periods, maxCatchUp);
    while (webWorker.s && periods--) {
      ++loopTick;
      const doMid = loopTick % webWorker.midRatio === 0;
      const doLong = loopTick % webWorker.longRatio === 0;
      fastLoop();
      if (doMid) {
        midLoop();
      }
      doCallbacks();
      if (doLong) {
        longLoop();
      }
      if (doMid && doLong) {
        loopTick = 0;
      }
    }
  }
  if (window.Worker) {
    webWorker.w = new Worker("evolve/evolve.js");
    webWorker.w.addEventListener("message", function(e) {
      const data = e.data;
      switch (data.loop) {
        case "main":
          execGameLoops(data.periods);
          break;
      }
    }, false);
  }
  gameLoop("start");
  resourceAlt();
  var firstRun = true;
  var gene_sequence = global.arpa["sequence"] && global.arpa["sequence"]["on"] ? global.arpa.sequence.on : 0;
  function fastLoop() {
    cacheRes("Food", false);
    if (!global.race["no_craft"]) {
      $(".craft").each(function(e) {
        if (typeof $(this).data("val") === "number") {
          $(this).html(sizeApproximation($(this).data("val") * keyMultiplier(), 1));
        }
      });
    }
    const date2 = /* @__PURE__ */ new Date();
    const astroSign2 = astrologySign();
    breakdown.p["Global"] = {};
    var global_multiplier = 1;
    let applyPlasmid = false;
    let pBonus = plasmidBonus("raw");
    if (global.prestige.Plasmid.count > 0 && (global.race.universe !== "antimatter" || global.genes["bleed"] && global.race.universe === "antimatter")) {
      breakdown.p["Global"][loc("resource_Plasmid_name")] = pBonus[1] * 100 + "%";
      applyPlasmid = true;
    }
    if (global.prestige.AntiPlasmid.count > 0 && (global.race.universe === "antimatter" || global.genes["bleed"] && global.genes["bleed"] >= 2 && global.race.universe !== "antimatter")) {
      breakdown.p["Global"][loc("resource_AntiPlasmid_name")] = pBonus[2] * 100 + "%";
      applyPlasmid = true;
    }
    if (applyPlasmid) {
      global_multiplier += pBonus[0];
    }
    if (global.prestige.Supercoiled.count > 0) {
      let bonus = global.prestige.Supercoiled.count / (global.prestige.Supercoiled.count + 5e3);
      breakdown.p["Global"][loc("resource_Supercoiled_short")] = +(bonus * 100).toFixed(2) + "%";
      global_multiplier *= 1 + bonus;
    }
    if (global.race["no_plasmid"] || global.race.universe === "antimatter") {
      if (faithTempleCount()) {
        let faith = faithBonus();
        breakdown.p["Global"][loc("faith")] = faith * 100 + "%";
        global_multiplier *= 1 + faith;
      }
    }
    if (global.race.universe === "evil" && global.resource.Authority.display) {
      if (global.resource.Authority.amount < 100) {
        let malus = (100 - global.resource.Authority.amount) * 35e-4;
        breakdown.p["Global"][global.resource.Authority.name] = -(malus * 100).toFixed(2) + "%";
        global_multiplier *= 1 - malus;
      } else if (global.resource.Authority.amount > 100) {
        let bonus = (global.resource.Authority.amount - 100) * 15e-4;
        breakdown.p["Global"][global.resource.Authority.name] = +(bonus * 100).toFixed(2) + "%";
        global_multiplier *= 1 + bonus;
      }
    }
    if (global.race["untapped"]) {
      if (global.race["untapped"] > 0) {
        let untapped = +(global.race.untapped / (global.race.untapped + 20) / 10 + 24e-5).toFixed(4);
        breakdown.p["Global"][loc("trait_untapped_bd")] = `${untapped * 100}%`;
        global_multiplier *= 1 + untapped;
      }
    }
    if (global.race["rainbow_active"] && global.race["rainbow_active"] > 1) {
      breakdown.p["Global"][loc("trait_rainbow_bd")] = `${traits.rainbow.vars()[0]}%`;
      global_multiplier *= 1 + traits.rainbow.vars()[0] / 100;
    }
    if (global.race["gloomy"] && global.city.calendar.weather <= 1) {
      breakdown.p["Global"][loc("trait_gloomy_name")] = `${traits.gloomy.vars()[0]}%`;
      global_multiplier *= 1 + traits.gloomy.vars()[0] / 100;
    }
    if (global.race["floating"] && global.city.calendar.wind === 1) {
      breakdown.p["Global"][loc("trait_floating_name")] = `-${traits.floating.vars()[0]}%`;
      global_multiplier *= 1 - traits.floating.vars()[0] / 100;
    }
    if (global.tech["world_control"]) {
      let bonus = 25;
      if (global.civic.govern.type === "federation") {
        bonus = govEffect.federation()[2];
      }
      if (global.race["unified"]) {
        bonus += traits.unified.vars()[0];
      }
      if (astroSign2 === "taurus") {
        bonus += astroVal2("taurus")[0];
      }
      breakdown.p["Global"][loc("tech_unification")] = `${bonus}%`;
      global_multiplier *= 1 + bonus / 100;
    } else {
      let occupy = 0;
      for (let i2 = 0; i2 < 3; i2++) {
        if (global.civic.foreign[`gov${i2}`].occ || global.civic.foreign[`gov${i2}`].anx || global.civic.foreign[`gov${i2}`].buy) {
          occupy += global.civic.govern.type === "federation" ? 5 + govEffect.federation()[0] : 5;
        }
      }
      if (occupy > 0) {
        breakdown.p["Global"][loc("civics_garrison_occupy")] = `${occupy}%`;
        global_multiplier *= 1 + occupy / 100;
      }
    }
    if (global.genes["challenge"] && global.genes.challenge >= 2) {
      let mastery = calc_mastery();
      breakdown.p["Global"][loc("mastery")] = mastery + "%";
      global_multiplier *= 1 + mastery / 100;
    }
    if (global["pillars"]) {
      let harmonic = calcPillar();
      breakdown.p["Global"][loc("harmonic")] = `${(harmonic[0] - 1) * 100}%`;
      global_multiplier *= harmonic[0];
    }
    if (global.race["ascended"]) {
      breakdown.p["Global"][loc("achieve_ascended_name")] = `5%`;
      global_multiplier *= 1.05;
    }
    if (global.race["corruption"]) {
      let corruption = global.race["corruption"] * 2;
      breakdown.p["Global"][loc("achieve_corrupted_name")] = `${corruption}%`;
      global_multiplier *= 1 + corruption / 100;
    }
    if (global.race["rejuvenated"]) {
      let decay = global.stats.days < 996 ? (1e3 - global.stats.days) / 2e3 : 0.02;
      breakdown.p["Global"][loc("rejuvenated")] = `${decay * 100}%`;
      global_multiplier *= 1 + decay;
    }
    let octFathom = fathomCheck("octigoran");
    if (global.race["suction_grip"] || octFathom > 0) {
      let bonus = 0;
      if (global.race["suction_grip"]) {
        bonus += traits.suction_grip.vars()[0];
      }
      if (octFathom > 0) {
        bonus += +(traits.suction_grip.vars(1)[0] * octFathom).toFixed(2);
      }
      breakdown.p["Global"][loc("trait_suction_grip_bd")] = bonus + "%";
      global_multiplier *= 1 + bonus / 100;
    }
    let cyclopsFathom = fathomCheck("cyclops");
    if (global.race["intelligent"] || cyclopsFathom > 0) {
      let bonus = 0;
      if (global.race["intelligent"]) {
        bonus += workerScale(global.civic.scientist.workers, "scientist") * traits.intelligent.vars()[1] + workerScale(global.civic.professor.workers, "professor") * traits.intelligent.vars()[0];
      }
      if (cyclopsFathom > 0) {
        bonus += workerScale(global.civic.scientist.workers, "scientist") * traits.intelligent.vars(1)[1] * cyclopsFathom + workerScale(global.civic.professor.workers, "professor") * traits.intelligent.vars(1)[0] * cyclopsFathom;
      }
      if (global.race["high_pop"]) {
        bonus = highPopAdjust(bonus);
      }
      breakdown.p["Global"][loc("trait_intelligent_bd")] = bonus + "%";
      global_multiplier *= 1 + bonus / 100;
    }
    if (global.race["slaver"] && global.city["slave_pen"] && global.city["slave_pen"]) {
      let bonus = global.resource.Slave.amount * traits.slaver.vars()[0];
      breakdown.p["Global"][loc("trait_slaver_bd")] = bonus + "%";
      global_multiplier *= 1 + bonus / 100;
    }
    if ((global.city.ptrait.includes("trashed") || global.race["scavenger"] || global.race["servants"] && global.race.servants["force_scavenger"]) && global.civic["scavenger"]) {
      let scavenger = global.city.ptrait.includes("trashed") || global.race["scavenger"] ? workerScale(global.civic.scavenger.workers, "scavenger") : 0;
      if (global.race["servants"]) {
        scavenger += jobScale(global.race.servants.jobs.scavenger);
      }
      if (scavenger > 0) {
        let bonus = scavenger * traits.scavenger.vars()[0];
        if (global.city.ptrait.includes("trashed") && global.race["scavenger"]) {
          bonus *= 1 + traits.scavenger.vars()[1] / 100;
        }
        if (global.city.ptrait.includes("trashed")) {
          bonus *= planetTraits.trashed.vars()[1];
        }
        if (global.race["high_pop"]) {
          bonus = highPopAdjust(bonus);
        }
        breakdown.p["Global"][jobName("scavenger")] = bonus + "%";
        global_multiplier *= 1 + bonus / 100;
      }
    }
    if (global.race["unfathomable"] && global.city["surfaceDwellers"] && global.city["captive_housing"]) {
      let thralls = 0;
      let rank = global.stats.achieve["nightmare"] && global.stats.achieve.nightmare["mg"] ? global.stats.achieve.nightmare.mg : 0;
      if (global.city.hasOwnProperty("surfaceDwellers")) {
        for (let i2 = 0; i2 < global.city.surfaceDwellers.length; i2++) {
          thralls += global.city.captive_housing[`race${i2}`];
        }
        if (thralls > global.civic.torturer.workers * rank / 2) {
          let unsupervised = thralls - global.civic.torturer.workers * rank / 2;
          thralls -= Math.ceil(unsupervised / 3);
        }
      }
      if (thralls > 0) {
        let bonus = thralls * traits.unfathomable.vars()[2] * rank / 5;
        if (global.race["psychic"]) {
          bonus *= 1 + traits.psychic.vars()[1] / 100;
        }
        breakdown.p["Global"][loc("trait_unfathomable_bd")] = bonus + "%";
        global_multiplier *= 1 + bonus / 100;
      }
    }
    if (global.city.ptrait.includes("mellow")) {
      breakdown.p["Global"][loc("planet_mellow_bd")] = "-" + (100 - planetTraits.mellow.vars()[2] * 100) + "%";
      global_multiplier *= planetTraits.mellow.vars()[2];
    }
    if (global.city.ptrait.includes("ozone") && global.city["sun"]) {
      let uv = global.city["sun"] * planetTraits.ozone.vars()[0];
      breakdown.p["Global"][loc("planet_ozone_bd")] = `-${uv}%`;
      global_multiplier *= 1 - uv / 100;
    }
    let phoenixFathom = fathomCheck("phoenix");
    if ((global.race["smoldering"] || phoenixFathom > 0) && global.city["hot"]) {
      let heat = 0;
      if (global.race["smoldering"]) {
        if (global.city["hot"] > 100) {
          heat += 100 * traits.smoldering.vars()[1];
          heat += (global.city["hot"] - 100) * traits.smoldering.vars()[2];
        } else {
          heat += global.city["hot"] * traits.smoldering.vars()[1];
        }
      }
      if (phoenixFathom > 0) {
        if (global.city["hot"] > 100) {
          heat += 100 * traits.smoldering.vars(0.25)[1] * phoenixFathom;
          heat += (global.city["hot"] - 100) * traits.smoldering.vars(0.25)[2] * phoenixFathom;
        } else {
          heat += global.city["hot"] * traits.smoldering.vars(0.25)[1] * phoenixFathom;
        }
      }
      breakdown.p["Global"][loc("trait_smoldering_name")] = `${heat}%`;
      global_multiplier *= 1 + heat / 100;
    }
    if (global.race["heat_intolerance"] && global.city["hot"]) {
      let heat = Math.min(100, global.city["hot"] * traits.heat_intolerance.vars()[0]);
      breakdown.p["Global"][loc("hot")] = `-${heat}%`;
      global_multiplier *= 1 - heat / 100;
    }
    if (global.race["chilled"] && global.city["cold"]) {
      let cold = 0;
      if (global.city["cold"] > 100) {
        cold += 100 * traits.chilled.vars()[1];
        cold += (global.city["cold"] - 100) * traits.chilled.vars()[2];
      } else {
        cold = global.city["cold"] * traits.chilled.vars()[1];
      }
      breakdown.p["Global"][loc("trait_chilled_name")] = `${cold}%`;
      global_multiplier *= 1 + cold / 100;
    }
    if (global.race["cold_intolerance"] && global.city["cold"]) {
      let cold = Math.min(100, global.city["cold"] * traits.cold_intolerance.vars()[0]);
      breakdown.p["Global"][loc("cold")] = `-${cold}%`;
      global_multiplier *= 1 - cold / 100;
    }
    if (global.civic.govern.type === "anarchy" && global.resource[global.race.species].amount > jobScale(10)) {
      let chaos = (global.resource[global.race.species].amount - jobScale(10)) * (global.race["high_pop"] ? 0.25 / traits.high_pop.vars()[0] : 0.25);
      breakdown.p["Global"][loc("govern_anarchy")] = `-${chaos}%`;
      global_multiplier *= 1 - chaos / 100;
    }
    if (global.civic.govern["protest"] && global.civic.govern.protest > 0) {
      breakdown.p["Global"][loc("event_protest")] = `-${30}%`;
      global_multiplier *= 0.7;
    }
    if (global.civic.govern["scandal"] && global.civic.govern.scandal > 0) {
      let muckVal = govActive("muckraker", 0);
      if (muckVal) {
        breakdown.p["Global"][loc("event_scandal")] = `-${muckVal}%`;
        global_multiplier *= 1 - muckVal / 100;
      }
    }
    let capyFathom = fathomCheck("capybara");
    if (capyFathom > 0 || global.race["calm"] && global.city["meditation"] && global.resource.Zen.display) {
      let rawZen = global.resource.Zen.amount;
      if (capyFathom > 0) {
        rawZen += Math.round(capyFathom * 500);
      }
      let zen = rawZen / (rawZen + 5e3);
      breakdown.p["Global"][loc("trait_calm_bd")] = `+${(zen * 100).toFixed(2)}%`;
      global_multiplier *= 1 + zen;
    }
    if (global.city["firestorm"] && global.city.firestorm > 0) {
      global.city.firestorm--;
      breakdown.p["Global"][loc("event_flare_bd")] = `-${20}%`;
      global_multiplier *= 0.8;
    }
    if (races[global.race.species].type === "aquatic" && !["swamp", "oceanic"].includes(global.city.biome) || races[global.race.species].type === "fey" && !["forest", "swamp", "taiga"].includes(global.city.biome) || races[global.race.species].type === "heat" && !["ashland", "volcanic"].includes(global.city.biome) || races[global.race.species].type === "polar" && !["tundra", "taiga"].includes(global.city.biome) || races[global.race.species].type === "sand" && !["ashland", "desert"].includes(global.city.biome) || races[global.race.species].type === "demonic" && global.city.biome !== "hellscape" || races[global.race.species].type === "angelic" && global.city.biome !== "eden") {
      if (!global.race["warlord"]) {
        let unsuited = 1;
        if (global.blood["unbound"] && global.blood.unbound >= 4) {
          unsuited = global.race["rejuvenated"] ? 0.975 : 0.95;
        } else if (global.blood["unbound"] && global.blood.unbound >= 2) {
          unsuited = global.race["rejuvenated"] ? 0.95 : 0.9;
        } else {
          unsuited = global.race["rejuvenated"] ? 0.9 : 0.8;
        }
        breakdown.p["Global"][loc("unsuited")] = `-${Math.round((1 - unsuited) * 100)}%`;
        global_multiplier *= unsuited;
      }
    }
    if (global.race["hibernator"] && global.city.calendar.season === 3) {
      global_multiplier *= 1 - traits.hibernator.vars()[1] / 100;
      breakdown.p["Global"][loc("morale_winter")] = `-${traits.hibernator.vars()[1]}%`;
    }
    if (global.race.universe === "magic" && global.tech["syphon"]) {
      let entropy = global.tech.syphon / 8;
      breakdown.p["Global"][loc("arpa_syphon_damage")] = `-${entropy}%`;
      global_multiplier *= 1 - entropy / 100;
    }
    let resList = [
      "Money",
      "Knowledge",
      "Omniscience",
      "Food",
      "Lumber",
      "Stone",
      "Chrysotile",
      "Crystal",
      "Furs",
      "Copper",
      "Iron",
      "Cement",
      "Coal",
      "Oil",
      "Uranium",
      "Aluminium",
      "Steel",
      "Titanium",
      "Alloy",
      "Polymer",
      "Iridium",
      "Helium_3",
      "Water",
      "Deuterium",
      "Neutronium",
      "Adamantite",
      "Infernite",
      "Elerium",
      "Nano_Tube",
      "Graphene",
      "Stanene",
      "Bolognium",
      "Vitreloy",
      "Orichalcum",
      "Asphodel_Powder",
      "Elysanite",
      "Unobtainium",
      "Quantium",
      "Plywood",
      "Brick",
      "Wrought_Iron",
      "Sheet_Metal",
      "Mythril",
      "Aerogel",
      "Nanoweave",
      "Scarletite",
      "Cipher",
      "Nanite",
      "Mana",
      "Authority"
    ];
    breakdown.p["consume"] = {};
    resList.forEach(function(res) {
      breakdown.p["consume"][res] = {};
      breakdown.p[res] = {};
    });
    if (global.race["fasting"]) {
      breakdown.p["consume"][global.race.species] = {};
      breakdown.p[global.race.species] = {};
    }
    var time_multiplier = 0.25 * turboSpeed;
    resetResBuffer();
    if (global.race.species === "protoplasm") {
      if (global.evolution["nucleus"] && global["resource"]["DNA"].amount < global["resource"]["DNA"].max) {
        var increment = global.evolution["nucleus"].count;
        while (global["resource"]["RNA"].amount < increment * 2) {
          increment--;
          if (increment <= 0) {
            break;
          }
        }
        let rna = increment;
        if (global.tech["evo"] && global.tech.evo >= 5) {
          increment *= 2;
        }
        modRes("DNA", increment * global_multiplier * time_multiplier);
        modRes("RNA", -(rna * 2 * time_multiplier));
      }
      if (global.evolution["organelles"]) {
        let rna_multiplier = global.race["rapid_mutation"] ? 2 : 1;
        if (global.tech["evo"] && global.tech.evo >= 2) {
          rna_multiplier++;
        }
        modRes("RNA", global.evolution["organelles"].count * rna_multiplier * global_multiplier * time_multiplier);
      }
      if ((global.stats.feat["novice"] && global.stats.achieve["apocalypse"] && global.stats.achieve.apocalypse.l > 0 || global["sim"]) && global.race.universe !== "bigbang" && (!global.race.seeded || global.race.seeded && global.race["chose"])) {
        let rank = global["sim"] ? 5 : Math.min(global.stats.achieve.apocalypse.l, global.stats.feat["novice"]);
        modRes("RNA", rank / 2 * time_multiplier * global_multiplier);
        if (global.resource.DNA.display) {
          modRes("DNA", rank / 4 * time_multiplier * global_multiplier);
        }
      }
      if (global["resource"]["RNA"].amount >= 2 && !global.evolution["dna"]) {
        global.evolution["dna"] = 1;
        global.resource.DNA.display = true;
        if (global.stats.achieve["mass_extinction"] && global.stats.achieve["mass_extinction"].l > 1) {
          modRes("RNA", global.resource.RNA.max);
          modRes("DNA", global.resource.RNA.max);
        }
        drawEvolution();
      } else if (global["resource"]["RNA"].amount >= 10 && !global.evolution["membrane"]) {
        global.evolution["membrane"] = { count: 0 };
        drawEvolution();
      } else if (global["resource"]["DNA"].amount >= 4 && !global.evolution["organelles"]) {
        global.evolution["organelles"] = { count: 0 };
        drawEvolution();
      } else if (global.evolution["organelles"] && global.evolution.organelles.count >= 2 && !global.evolution["nucleus"]) {
        global.evolution["nucleus"] = { count: 0 };
        drawEvolution();
      } else if (global.evolution["nucleus"] && global.evolution.nucleus.count >= 1 && !global.evolution["eukaryotic_cell"]) {
        global.evolution["eukaryotic_cell"] = { count: 0 };
        drawEvolution();
      } else if (global.evolution["eukaryotic_cell"] && global.evolution.eukaryotic_cell.count >= 1 && !global.evolution["mitochondria"]) {
        global.evolution["mitochondria"] = { count: 0 };
        drawEvolution();
      } else if (global.evolution["mitochondria"] && !global.tech["evo"]) {
        global.tech["evo"] = 1;
        drawEvolution();
      }
    } else {
      let zigVal = zigguratBonus();
      let morale = 100;
      let q_multiplier = 1;
      let qs_multiplier = 1;
      if (global.race["quarantine"] && global.race["qDays"]) {
        let qDays = 1 - (global.race.qDays <= 1e3 ? global.race.qDays : 1e3) / 1e3;
        switch (global.race.quarantine) {
          case 1:
            q_multiplier = 0.5 + 0.5 * qDays;
            break;
          case 2:
            q_multiplier = 0.25 + 0.25 * qDays;
            qs_multiplier = 0.5 + 0.5 * qDays;
            break;
          case 3:
            q_multiplier = 0.1 + 0.15 * qDays;
            qs_multiplier = 0.25 + 0.25 * qDays;
            break;
          case 4:
            q_multiplier = 0.08 + 0.02 * qDays;
            ;
            qs_multiplier = 0.12 + 0.13 * qDays;
            ;
            break;
        }
        if (global.race["vax"] && global.tech["focus_cure"] && global.tech.focus_cure >= 4) {
          let vax = +global.race.vax.toFixed(2) / 100;
          if (vax > 1) {
            vax = 1;
          }
          q_multiplier = q_multiplier + (1 - q_multiplier) * vax;
          qs_multiplier = qs_multiplier + (1 - qs_multiplier) * vax;
        }
      }
      if (global.city.calendar.season === 0 && global.city.calendar.year > 0) {
        let spring = global.race["chilled"] || global.race["smoldering"] ? 0 : 5;
        morale += spring;
        global.city.morale.season = spring;
      } else if (global.city.calendar.season === 1 && global.race["smoldering"]) {
        morale += traits.smoldering.vars()[0];
        global.city.morale.season = traits.smoldering.vars()[0];
      } else if (global.city.calendar.season === 3) {
        if (global.race["chilled"]) {
          morale += traits.chilled.vars()[0];
          global.city.morale.season = traits.chilled.vars()[0];
        } else {
          morale -= global.race["leathery"] ? traits.leathery.vars()[0] : 5;
          global.city.morale.season = global.race["leathery"] ? -traits.leathery.vars()[0] : -5;
        }
      } else {
        global.city.morale.season = 0;
      }
      if (global.race["cheese"]) {
        let raw_cheese = global.stats.hasOwnProperty("reset") ? global.stats.reset + 1 : 1;
        let cheese = +(raw_cheese / (raw_cheese + 10) * 11).toFixed(2);
        morale += cheese;
      }
      if (global.civic["homeless"]) {
        morale -= global.civic.homeless / 2;
      }
      if (global.tech["vax_c"] || global.tech["vax_f"]) {
        morale -= global.tech["vax_c"] ? 10 : 50;
      } else if (global.tech["vax_s"]) {
        morale += 20;
      }
      if (global.tech["m_boost"]) {
        global.city.morale.leadership = 20;
        morale += 20;
      } else {
        global.city.morale.leadership = 0;
      }
      if (shrineBonusActive()) {
        let shrineMorale = getShrineBonus("morale");
        global.city.morale.shrine = shrineMorale.add;
        morale += shrineMorale.add;
      } else {
        global.city.morale.shrine = 0;
      }
      let milVal = govActive("militant", 1);
      if (milVal) {
        morale -= milVal;
      }
      if (global.civic.govern.type === "corpocracy") {
        morale -= govEffect.corpocracy()[3];
      }
      if (global.civic.govern.type === "republic") {
        morale += govEffect.republic()[1];
      }
      if (global.civic.govern.type === "federation") {
        morale += govEffect.federation()[1];
      }
      if (global.race["blood_thirst"] && global.race.blood_thirst_count >= 1) {
        let blood_thirst = Math.ceil(Math.log2(global.race.blood_thirst_count));
        global.city.morale.blood_thirst = blood_thirst;
        morale += blood_thirst;
      } else {
        global.city.morale.blood_thirst = 0;
      }
      let weather_morale = 0;
      if (global.city.calendar.weather === 0) {
        if (global.city.calendar.temp > 0) {
          if (global.city.calendar.wind === 1) {
            if (global.race["skittish"]) {
              weather_morale = -traits.skittish.vars()[0];
            } else {
              weather_morale = global.race["leathery"] ? -traits.leathery.vars()[0] : -5;
            }
          } else {
            weather_morale = global.race["leathery"] ? 0 : -2;
          }
        }
      } else if (global.city.calendar.weather === 2) {
        if (global.race["nyctophilia"]) {
          weather_morale = -traits.nyctophilia.vars()[0];
        } else if (global.city.calendar.wind === 0 && global.city.calendar.temp < 2 || global.city.calendar.wind === 1 && global.city.calendar.temp === 2) {
          weather_morale = 2;
        }
      } else {
        if (global.race["nyctophilia"]) {
          weather_morale = traits.nyctophilia.vars()[1];
        }
      }
      if (global.race["snowy"] && (global.city.calendar.temp !== 0 || global.city.calendar.weather !== 0)) {
        weather_morale -= global.city.calendar.temp >= 2 ? traits.snowy.vars()[1] : traits.snowy.vars()[0];
      }
      global.city.morale.weather = global.race["submerged"] ? 0 : weather_morale;
      morale += global.race["submerged"] ? 0 : weather_morale;
      if (global.race["motivated"]) {
        let boost = Math.ceil(global.race["motivated"] ** 0.4);
        morale += boost;
      }
      if (global.race["pet"]) {
        morale++;
        if (global.race.pet.event > 0) {
          morale++;
        }
        if (global.race.pet.pet > 0) {
          morale += global.race.pet.type === "cat" ? 2 : 1;
        } else if (global.race.pet.pet < 0) {
          morale -= global.race.pet.type === "cat" ? 2 : 1;
        }
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.fame !== 0) {
        morale += global.race.wishStats.fame;
      }
      if (global.race["artisan"] && !global.race["joyless"]) {
        morale += traits.artisan.vars()[2] * global.civic.craftsman.workers;
      }
      let stress = 0;
      let divisor = 5;
      global.city.morale.unemployed = 0;
      if (!global.city.ptrait.includes("mellow")) {
        let unemployed = global.civic.unemployed.workers / (global.race["high_pop"] ? traits.high_pop.vars()[0] : 1);
        morale -= unemployed;
        global.city.morale.unemployed = -unemployed;
      } else {
        divisor *= planetTraits.mellow.vars()[0];
      }
      let vulFathom = fathomCheck("vulpine");
      if (global.civic.hunter.display && (global.race["playful"] || vulFathom > 0)) {
        let val = 0;
        if (vulFathom > 0) {
          val += traits.playful.vars(1)[0] * vulFathom;
        }
        if (global.race["playful"]) {
          val += traits.playful.vars()[0];
        }
        morale += global.civic.hunter.workers * val;
        global.city.morale.unemployed = global.civic.hunter.workers * val;
      } else {
        stress -= highPopAdjust(global.civic.hunter.workers) / divisor;
      }
      if (global.race["optimistic"]) {
        stress += traits.optimistic.vars()[0];
      }
      let geckoFathom = fathomCheck("gecko");
      if (geckoFathom > 0) {
        stress += traits.optimistic.vars(1)[0] * geckoFathom;
      }
      if (global.race["pessimistic"]) {
        stress -= traits.pessimistic.vars()[0];
      }
      if (global.civic["garrison"]) {
        let divisor2 = 2;
        if (global.city.ptrait.includes("mellow")) {
          divisor2 *= planetTraits.mellow.vars()[0];
        }
        let army_stress = global.civic.garrison.max / divisor2;
        if (global.race["high_pop"]) {
          army_stress /= traits.high_pop.vars()[0];
        }
        stress -= army_stress;
      }
      breakdown.p.consume.Money[loc("trade")] = 0;
      if (global.tech["trade"] || global.race["banana"] && global.tech["primitive"] && global.tech.primitive >= 3) {
        let used_trade = 0;
        let dealVal = govActive("dealmaker", 0);
        if (dealVal) {
          let exporting = 0;
          let importing = 0;
          Object.keys(global.resource).forEach(function(res) {
            if (global.resource[res].hasOwnProperty("trade") && global.resource[res].trade < 0) {
              exporting -= global.resource[res].trade;
            }
            if (global.resource[res].hasOwnProperty("trade") && global.resource[res].trade > 0) {
              importing += global.resource[res].trade;
            }
          });
          if (exporting < importing) {
            Object.keys(global.resource).forEach(function(res) {
              global.resource[res].trade = 0;
            });
          }
        }
        Object.keys(global.resource).forEach(function(res) {
          let routes = global.resource[res].trade;
          if (routes > 0) {
            used_trade += routes;
            let price = tradeBuyPrice(res);
            const affordable_routes = Math.floor(global.resource.Money.amount / (price * time_multiplier));
            routes = Math.min(routes, affordable_routes);
            if (routes > 0) {
              price *= routes;
              let rate = tradeRatio[res];
              if (dealVal) {
                rate *= 1 + dealVal / 100;
              }
              if (global.race["persuasive"]) {
                rate *= 1 + traits.persuasive.vars()[0] * global.race["persuasive"] / 100;
              }
              if (global.race["merchant"]) {
                rate *= 1 + traits.merchant.vars()[1] / 100;
              }
              if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.c) {
                let trade = 70 * (traits.ocular_power.vars()[1] / 100);
                rate *= 1 + trade / 100;
              }
              let fathom = fathomCheck("goblin");
              if (fathom > 0) {
                rate *= 1 + traits.merchant.vars(1)[1] / 100 * fathom;
              }
              if (astroSign2 === "capricorn") {
                rate *= 1 + astroVal2("capricorn")[0] / 100;
              }
              if (global.race["devious"]) {
                rate *= 1 - traits.devious.vars()[0] / 100;
              }
              if (global.genes["trader"]) {
                let mastery = calc_mastery();
                rate *= 1 + mastery / 100;
                if (global.genes.trader >= 2) {
                  let coiled = global.prestige.Supercoiled.count;
                  rate *= 1 + coiled / (coiled + 500);
                }
              }
              if (global.stats.achieve.hasOwnProperty("trade")) {
                let rank = global.stats.achieve.trade.l * 2;
                if (rank > 10) {
                  rank = 10;
                }
                rate *= 1 + rank / 100;
              }
              if (global.race["truepath"]) {
                rate *= 1 - global.civic.foreign.gov3.hstl / 101;
              }
              modRes(res, routes * time_multiplier * rate);
              modRes("Money", -(price * time_multiplier));
              breakdown.p.consume.Money[loc("trade")] -= price;
              breakdown.p.consume[res][loc("trade")] = routes * rate;
            }
            steelCheck();
          } else if (routes < 0) {
            used_trade -= routes;
            let rate = tradeRatio[res];
            if (global.stats.achieve.hasOwnProperty("trade")) {
              let rank = global.stats.achieve.trade.l;
              if (rank > 5) {
                rank = 5;
              }
              rate *= 1 - rank / 100;
            }
            const affordable_routes = Math.floor(global.resource[res].amount / (rate * time_multiplier));
            routes = Math.max(routes, -affordable_routes);
            if (routes < 0) {
              let price = tradeSellPrice(res) * routes;
              modRes(res, routes * time_multiplier * rate);
              modRes("Money", -(price * time_multiplier));
              breakdown.p.consume.Money[loc("trade")] -= price;
              breakdown.p.consume[res][loc("trade")] = routes * rate;
            }
            steelCheck();
          }
        });
        global.city.market.trade = used_trade;
      }
      if (breakdown.p.consume.Money[loc("trade")] === 0) {
        delete breakdown.p.consume.Money[loc("trade")];
      }
      if (global.tech["alchemy"]) {
        let totMana = 0;
        let totCrystal = 0;
        let totTransmute = 0;
        Object.keys(global.race.alchemy).forEach(function(res) {
          if (global.race.alchemy[res] > 0) {
            let trasmute = Number(global.race.alchemy[res]);
            if (global.resource.Mana.amount < trasmute) {
              trasmute = global.resource.Mana.amount;
            }
            if (global.resource.Crystal.amount < trasmute * 0.15) {
              trasmute = Math.floor(global.resource.Crystal.amount * (1 / 0.15));
            }
            totTransmute += trasmute;
            if (trasmute >= time_multiplier) {
              let rate = global.resource[res].basic && global.tech.alchemy >= 2 ? tradeRatio[res] * 8 : tradeRatio[res] * 2;
              if (global.race["witch_hunter"]) {
                rate *= 3;
              }
              if (global.stats.achieve["soul_sponge"] && global.stats.achieve.soul_sponge["mg"]) {
                rate *= global.stats.achieve.soul_sponge.mg + 1;
              }
              modRes(res, trasmute * time_multiplier * rate);
              modRes("Mana", -(trasmute * time_multiplier));
              modRes("Crystal", -(trasmute * 0.15 * time_multiplier));
              totMana -= trasmute;
              totCrystal -= trasmute * 0.15;
              breakdown.p.consume[res][loc("tab_alchemy")] = trasmute * rate;
              if (global.race.universe === "magic" && !global.resource[res].basic && global.tech.alchemy >= 2) {
                unlockAchieve("fullmetal");
              }
            }
          }
        });
        global.race["totTransmute"] = totTransmute;
        breakdown.p.consume.Mana[loc("tab_alchemy")] = totMana;
        breakdown.p.consume.Crystal[loc("tab_alchemy")] = totCrystal;
      }
      if (global.galaxy["trade"] && (gal_on.hasOwnProperty("freighter") || gal_on.hasOwnProperty("super_freighter"))) {
        let cap = 0;
        if (global.galaxy["freighter"]) {
          cap += gal_on["freighter"] * 2;
        }
        if (global.galaxy["super_freighter"]) {
          cap += gal_on["super_freighter"] * 5;
        }
        global.galaxy.trade.max = cap;
        let used = 0;
        let offers = galaxyOffers();
        for (let i2 = 0; i2 < offers.length; i2++) {
          let exprt_res = offers[i2].sell.res;
          let exprt_vol = offers[i2].sell.vol;
          let imprt_res = offers[i2].buy.res;
          let imprt_vol = offers[i2].buy.vol;
          let exp_total = 0;
          let imp_total = 0;
          if (global.race["persuasive"]) {
            imprt_vol *= 1 + global.race["persuasive"] / 100;
          }
          if (global.race["merchant"]) {
            imprt_vol *= 1 + traits.merchant.vars()[1] / 100;
          }
          let fathom = fathomCheck("goblin");
          if (fathom > 0) {
            imprt_vol *= 1 + traits.merchant.vars(1)[1] / 100 * fathom;
          }
          if (astroSign2 === "capricorn") {
            imprt_vol *= 1 + astroVal2("capricorn")[0] / 100;
          }
          if (global.race["devious"]) {
            imprt_vol *= 1 - traits.devious.vars()[0] / 100;
          }
          if (global.genes["trader"]) {
            let mastery = calc_mastery();
            imprt_vol *= 1 + mastery / 100;
          }
          if (global.stats.achieve.hasOwnProperty("trade")) {
            let rank = global.stats.achieve.trade.l;
            if (rank > 5) {
              rank = 5;
            }
            imprt_vol *= 1 + rank / 50;
            exprt_vol *= 1 - rank / 100;
          }
          used += global.galaxy.trade[`f${i2}`];
          if (used > cap) {
            global.galaxy.trade[`f${i2}`] -= used - cap;
            if (global.galaxy.trade[`f${i2}`] < 0) {
              global.galaxy.trade[`f${i2}`] = 0;
            }
          }
          let pirate = piracy("gxy_gorddon");
          for (let j = 0; j < global.galaxy.trade[`f${i2}`]; j++) {
            exp_total += exprt_vol;
            if (modRes(exprt_res, -(exprt_vol * time_multiplier))) {
              modRes(imprt_res, imprt_vol * time_multiplier * pirate);
              imp_total += imprt_vol;
            }
          }
          if (exp_total > 0) {
            if (breakdown.p.consume[exprt_res][loc("trade")]) {
              breakdown.p.consume[exprt_res][loc("trade")] -= exp_total;
            } else {
              breakdown.p.consume[exprt_res][loc("trade")] = -exp_total;
            }
          }
          if (imp_total > 0) {
            if (breakdown.p.consume[imprt_res][loc("trade")]) {
              breakdown.p.consume[imprt_res][loc("trade")] += imp_total;
            } else {
              breakdown.p.consume[imprt_res][loc("trade")] = imp_total;
            }
          }
          if (pirate < 1) {
            if (breakdown.p.consume[imprt_res][loc("galaxy_piracy")]) {
              breakdown.p.consume[imprt_res][loc("galaxy_piracy")] += -((1 - pirate) * imp_total);
            } else {
              breakdown.p.consume[imprt_res][loc("galaxy_piracy")] = -((1 - pirate) * imp_total);
            }
          }
          if (breakdown.p.consume[exprt_res][loc("trade")] === 0) {
            delete breakdown.p.consume[exprt_res][loc("trade")];
          }
          if (breakdown.p.consume[imprt_res][loc("trade")] === 0) {
            delete breakdown.p.consume[imprt_res][loc("trade")];
          }
        }
        global.galaxy.trade.cur = used;
      }
      if (global.race["deconstructor"] && global.city["nanite_factory"]) {
        nf_resources.forEach(function(r) {
          if (global.resource[r].display) {
            let vol = global.city.nanite_factory[r] * time_multiplier;
            if (vol > 0) {
              if (global.resource[r].amount < vol) {
                vol = global.resource[r].amount;
              }
              if (modRes(r, -vol)) {
                breakdown.p.consume[r][loc("city_nanite_factory")] = -(vol / time_multiplier);
                let trait = traits.deconstructor.vars()[0] / 100;
                let nanite_vol = vol * atomic_mass[r] / 100 * trait;
                breakdown.p.consume["Nanite"][global.resource[r].name] = nanite_vol / time_multiplier;
                modRes("Nanite", nanite_vol);
              }
            }
          }
        });
      }
      let power_grid = 0;
      let max_power = 0;
      if (global.tauceti["ringworld"] && global.tauceti.ringworld.count >= 1e3) {
        let output = global.race["lone_survivor"] ? 100 : 1e4;
        max_power -= output;
        power_grid += output;
        power_generated[loc("tau_star_ringworld")] = output;
      }
      if (global.interstellar["elysanite_sphere"] && global.interstellar.elysanite_sphere.count > 0) {
        let output = 0;
        if (global.interstellar.elysanite_sphere.count >= 1e3) {
          output = powerModifier(22500);
        } else {
          output = powerModifier(1750 + global.interstellar.elysanite_sphere.count * 18);
        }
        max_power -= output;
        power_grid += output;
        power_generated[loc("interstellar_dyson_sphere_title")] = output;
        delete power_generated[loc("tech_dyson_net")];
      } else if (global.interstellar["orichalcum_sphere"] && global.interstellar.orichalcum_sphere.count > 0) {
        let output = 0;
        if (global.interstellar.orichalcum_sphere.count >= 100) {
          output = powerModifier(1750);
        } else {
          output = powerModifier(750 + global.interstellar.orichalcum_sphere.count * 8);
        }
        max_power -= output;
        power_grid += output;
        power_generated[loc("interstellar_dyson_sphere_title")] = output;
        delete power_generated[loc("tech_dyson_net")];
      } else if (global.interstellar["dyson_sphere"] && global.interstellar.dyson_sphere.count > 0) {
        let output = 0;
        if (global.interstellar.dyson_sphere.count >= 100) {
          output = powerModifier(750);
        } else {
          output = powerModifier(175 + global.interstellar.dyson_sphere.count * 5);
        }
        max_power -= output;
        power_grid += output;
        power_generated[loc("interstellar_dyson_sphere_title")] = output;
        delete power_generated[loc("tech_dyson_net")];
      } else if (global.interstellar["dyson"] && global.interstellar.dyson.count >= 1) {
        let output = 0;
        if (global.interstellar.dyson.count >= 100) {
          output = powerModifier(175);
        } else {
          output = powerModifier(global.interstellar.dyson.count * 1.25);
        }
        max_power -= output;
        power_grid += output;
        power_generated[loc("tech_dyson_net")] = output;
      }
      if (global.interstellar["stellar_engine"] && global.interstellar.stellar_engine.count >= 100) {
        let output = actions.interstellar.int_blackhole.stellar_engine.powered();
        max_power += output;
        power_grid -= output;
        power_generated[loc("tech_stellar_engine")] = -output;
      }
      [
        { r: "city", s: "coal_power" },
        { r: "city", s: "oil_power" },
        { r: "city", s: "fission_power" },
        { r: "spc_hell", s: "geothermal" },
        { r: "spc_dwarf", s: "e_reactor" },
        { r: "int_alpha", s: "fusion" },
        { r: "tau_home", s: "fusion_generator" },
        { r: "tau_gas2", s: "alien_space_station" }
      ].forEach(function(generator) {
        let space2 = convertSpaceSector(generator.r);
        let region = generator.r === "city" ? generator.r : space2;
        let c_action = generator.r === "city" ? actions.city : actions[space2][generator.r];
        let title = typeof c_action[generator.s].title === "string" ? c_action[generator.s].title : c_action[generator.s].title();
        if (global[region][generator.s] && global[region][generator.s]["on"]) {
          let watts = c_action[generator.s].powered();
          p_on[generator.s] = global[region][generator.s].on;
          if (c_action[generator.s].hasOwnProperty("p_fuel")) {
            let s_fuels = c_action[generator.s].p_fuel();
            if (!Array.isArray(s_fuels)) {
              s_fuels = [s_fuels];
            }
            for (let j = 0; j < s_fuels.length; j++) {
              let fuel = s_fuels[j];
              let fuel_cost = fuel.a;
              if (["Oil", "Helium_3"].includes(fuel.r) && region !== "city") {
                fuel_cost = region === "space" ? +fuel_adjust(fuel_cost, true) : +int_fuel_adjust(fuel_cost);
              }
              let mb_consume = p_on[generator.s] * fuel_cost;
              breakdown.p.consume[fuel.r][title] = -mb_consume;
              for (let k = 0; k < p_on[generator.s]; k++) {
                if (!modRes(fuel.r, -(time_multiplier * fuel_cost))) {
                  mb_consume -= p_on[generator.s] * fuel_cost - k * fuel_cost;
                  p_on[generator.s] = k;
                  break;
                }
              }
            }
          }
          let power = p_on[generator.s] * watts;
          max_power += power;
          power_grid -= power;
          power_generated[title] = -power;
          if (p_on[generator.s] !== global[region][generator.s].on) {
            $(`#${region}-${generator.s} .on`).addClass("warn");
            $(`#${region}-${generator.s} .on`).prop("title", `ON ${p_on[generator.s]}/${global[region][generator.s].on}`);
          } else {
            $(`#${region}-${generator.s} .on`).removeClass("warn");
            $(`#${region}-${generator.s} .on`).prop("title", `ON`);
          }
        } else {
          power_generated[title] = 0;
          p_on[generator.s] = 0;
          $(`#${region}-${generator.s} .on`).removeClass("warn");
          $(`#${region}-${generator.s} .on`).prop("title", `ON`);
        }
      });
      if (global.tech["uranium"] && global.tech["uranium"] >= 3 && p_on["coal_power"]) {
        const fuel = actions.city.coal_power.p_fuel();
        if (fuel.r === "Coal" && fuel.a > 0) {
          let coal = p_on["coal_power"] * fuel.a;
          let ash = coal / 65;
          if (global.city.geology["Uranium"]) {
            ash *= global.city.geology["Uranium"] + 1;
          }
          ash *= production("psychic_boost", "Uranium");
          modRes("Uranium", ash * time_multiplier);
          breakdown.p.consume["Uranium"][loc("city_coal_ash")] = ash;
        }
      }
      if (global.space["hydrogen_plant"]) {
        let output = actions.space.spc_titan.hydrogen_plant.powered();
        if (global.space.hydrogen_plant.on > global.space.electrolysis.on) {
          global.space.hydrogen_plant.on = global.space.electrolysis.on;
        }
        let power = global.space.hydrogen_plant.on * output;
        max_power += power;
        power_grid -= power;
        power_generated[loc("space_hydrogen_plant_title")] = -power;
      }
      if (global.portal["incinerator"]) {
        let output = actions.portal.prtl_wasteland.incinerator.powered();
        let power = global.portal.incinerator.on * output;
        max_power += power;
        power_grid -= power;
        power_generated[loc("portal_incinerator_title")] = -power;
      }
      if (global.portal["inferno_power"]) {
        let fuels = actions.portal.prtl_ruins.inferno_power.fuel;
        let operating = global.portal.inferno_power.on;
        Object.keys(fuels).forEach(function(fuel) {
          let consume = operating * fuels[fuel];
          while (consume * time_multiplier > global.resource[fuel].amount + (global.resource[fuel].diff > 0 ? global.resource[fuel].diff * time_multiplier : 0) && consume > 0) {
            operating--;
            consume -= fuels[fuel];
          }
          breakdown.p.consume[fuel][loc("portal_inferno_power_title")] = -consume;
          modRes(fuel, -(consume * time_multiplier));
        });
        let power = operating * actions.portal.prtl_ruins.inferno_power.powered();
        max_power += power;
        power_grid -= power;
        power_generated[loc("portal_inferno_power_title")] = -power;
      }
      if (global.eden["soul_engine"] && global.tech["asphodel"] && global.tech.asphodel >= 4) {
        let power = (support_on["soul_engine"] || 0) * actions.eden.eden_asphodel.soul_engine.powered();
        max_power += power;
        power_grid -= power;
        power_generated[loc("eden_soul_engine_title")] = -power;
      }
      if (global.space["swarm_satellite"] && global.space["swarm_control"]) {
        let active = global.space.swarm_satellite.count;
        if (active > global.space.swarm_control.s_max) {
          active = global.space.swarm_control.s_max;
        }
        global.space.swarm_control.support = active;
        let solar = 0.35;
        if (global.tech.swarm >= 4) {
          solar += 0.15 * (global.tech.swarm - 3);
        }
        if (global.stats.achieve["iron_will"] && global.stats.achieve.iron_will.l >= 1) {
          solar += 0.15;
        }
        if (global.blood["illuminate"]) {
          solar += 0.01 * global.blood.illuminate;
        }
        solar = +solar.toFixed(2);
        let output = powerModifier(active * solar);
        max_power -= output;
        power_grid += output;
        power_generated[loc("space_sun_swarm_satellite_title")] = output;
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.potato) {
        let power = powerModifier(global.race.wishStats.potato);
        max_power -= power;
        power_grid += power;
        power_generated[loc("wish_potato")] = power;
      }
      if (global.city["mill"] && global.tech["agriculture"] && global.tech["agriculture"] >= 6) {
        let power = powerModifier(global.city.mill.on * actions.city.mill.powered());
        max_power += power;
        power_grid -= power;
        power_generated[loc("city_mill_title2")] = -power;
      }
      if (global.city["windmill"] && global.tech["wind_plant"]) {
        let power = powerModifier(global.city.windmill.count * actions.city.windmill.powered());
        max_power += power;
        power_grid -= power;
        power_generated[loc("city_mill_title2")] = -power;
      }
      if (global.race["elemental"] && traits.elemental.vars()[0] === "electric") {
        let power = powerModifier(highPopAdjust((global.resource[global.race.species].amount * traits.elemental.vars()[1]) ** 1.28));
        max_power -= power;
        power_grid += power;
        power_generated[loc("trait_elemental_name")] = power;
      }
      if (global.race["powered"]) {
        let citizens = traits.powered.vars()[0] * global.resource[global.race.species].amount;
        if (global.race["discharge"] && global.race["discharge"] > 0) {
          citizens = +(citizens * 1.25).toFixed(3);
        }
        power_grid -= citizens;
      }
      if (global.race["replicator"]) {
        global.city["replicator"] = { count: global.race.replicator.pow, on: global.race.replicator.pow };
      }
      let p_structs = global.power;
      let totalPowerDemand = 0;
      let pb_list = [];
      for (let i2 = 0; i2 < p_structs.length; i2++) {
        const parts = p_structs[i2].split(":");
        const struct = parts[1];
        const region = parts[0] === "city" ? parts[0] : convertSpaceSector(parts[0]);
        const c_action = parts[0] === "city" ? actions.city[struct] : actions[region][parts[0]][struct];
        if (global[region][struct]?.on) {
          if (checkPowerRequirements(c_action) && (region !== "galaxy" || p_on["s_gate"])) {
            totalPowerDemand += global[region][struct].on * c_action.powered();
            p_on[struct] = global[region][struct].on;
          } else {
            p_on[struct] = 0;
          }
        }
        if (global.settings.lowPowerBalance && c_action.hasOwnProperty("powerBalancer")) {
          pb_list.push(p_structs[i2]);
        }
      }
      if (global.settings.lowPowerBalance && totalPowerDemand > power_grid) {
        let totalPowerUsage = totalPowerDemand;
        for (let i2 = pb_list.length - 1; i2 >= 0; i2--) {
          const parts = pb_list[i2].split(":");
          const struct = parts[1];
          let on = p_on[struct];
          if (totalPowerUsage > power_grid && on > 0) {
            const region = parts[0] === "city" ? parts[0] : convertSpaceSector(parts[0]);
            const c_action = parts[0] === "city" ? actions.city[struct] : actions[region][parts[0]][struct];
            let balValues = c_action.powerBalancer();
            if (balValues) {
              balValues.forEach(function(v) {
                let off = 0;
                if (v.hasOwnProperty("r") && v.hasOwnProperty("k")) {
                  let val = global[region][struct][v.k] ?? 0;
                  if (global.resource[v.r]["odif"] && global.resource[v.r]["odif"] < 0) {
                    global.resource[v.r]["odif"] = 0;
                  }
                  let diff = global.resource[v.r].diff + (global.resource[v.r]["odif"] ? global.resource[v.r]["odif"] : 0);
                  while (diff - off * val > val && on > 0 && totalPowerUsage > power_grid) {
                    on--;
                    off++;
                    totalPowerUsage -= c_action.powered();
                  }
                  global.resource[v.r]["odif"] = val * off;
                } else if (v.hasOwnProperty("s")) {
                  let sup = c_action.support();
                  if (global[region][struct]["soff"] && global[region][struct]["soff"] < 0) {
                    global[region][struct]["soff"] = 0;
                  }
                  let support = v.s + (global[region][struct]["soff"] ? global[region][struct]["soff"] : 0);
                  while (support - sup * off >= sup && on > 0 && totalPowerUsage > power_grid) {
                    on--;
                    off++;
                    totalPowerUsage -= c_action.powered();
                  }
                  global[region][struct]["soff"] = sup * off;
                }
              });
              p_on[struct] = on;
            }
          }
        }
      }
      let power_grid_temp = power_grid;
      for (let i2 = 0; i2 < p_structs.length; i2++) {
        const parts = p_structs[i2].split(":");
        const struct = parts[1];
        const region = parts[0] === "city" ? parts[0] : convertSpaceSector(parts[0]);
        const c_action = parts[0] === "city" ? actions.city[struct] : actions[region][parts[0]][struct];
        if (global[region][struct]?.on) {
          let power = p_on[struct] * c_action.powered();
          while (power > power_grid_temp && power > 0) {
            p_on[struct]--;
            power = p_on[struct] * c_action.powered();
          }
          if (c_action.hasOwnProperty("p_fuel")) {
            let s_fuels = c_action.p_fuel();
            if (!Array.isArray(s_fuels)) {
              s_fuels = [s_fuels];
            }
            for (let j = 0; j < s_fuels.length; j++) {
              const title = typeof c_action.title === "string" ? c_action.title : c_action.title();
              const fuel = s_fuels[j];
              const fuel_cost = ["Oil", "Helium_3"].includes(fuel.r) && region === "space" ? fuel_adjust(fuel.a, true) : fuel.a;
              let mb_consume = p_on[struct] * fuel_cost;
              for (let k = 0; k < p_on[struct]; k++) {
                if (!modRes(fuel.r, -(time_multiplier * fuel_cost))) {
                  mb_consume = k * fuel_cost;
                  p_on[struct] = k;
                  power = p_on[struct] * c_action.powered();
                  break;
                }
              }
              breakdown.p.consume[fuel.r][title] = -mb_consume;
            }
          }
          power_grid_temp -= power;
          if (p_on[struct] !== global[region][struct].on) {
            $(`#${region}-${struct} .on`).addClass("warn");
            $(`#${region}-${struct} .on`).prop("title", `ON ${p_on[struct]}/${global[region][struct].on}`);
            if (["matrix", "atmo_terraformer", "ascension_trigger"].includes(struct)) {
              callback_queue.set([c_action, "postPower"], [true]);
            }
          } else {
            $(`#${region}-${struct} .on`).removeClass("warn");
            $(`#${region}-${struct} .on`).prop("title", `ON`);
          }
        } else {
          p_on[struct] = 0;
          $(`#${region}-${struct} .on`).removeClass("warn");
          $(`#${region}-${struct} .on`).prop("title", `ON`);
        }
      }
      power_grid -= totalPowerDemand;
      if (global.space["m_relay"]) {
        if (p_on["m_relay"]) {
          if (global.space.m_relay.charged < 1e4) {
            global.space.m_relay.charged++;
          }
        } else {
          global.space.m_relay.charged = 0;
        }
      }
      if (global.space["fob"] && global.space["lander"]) {
        if (p_on["fob"]) {
          let fuel = fuel_adjust(50, true);
          support_on["lander"] = global.space.lander.on;
          let total2 = garrisonSize(false, { nofob: true });
          let troopReq = jobScale(3);
          let deployed = support_on["lander"] * troopReq;
          if (deployed <= total2) {
            global.space.fob.troops = deployed;
          } else {
            support_on["lander"] -= Math.ceil((deployed - total2) / troopReq);
            global.space.fob.troops = support_on["lander"] * troopReq;
          }
          let mb_consume = support_on["lander"] * fuel;
          breakdown.p.consume.Oil[loc("space_lander_title")] = -mb_consume;
          for (let i2 = 0; i2 < support_on["lander"]; i2++) {
            if (!modRes("Oil", -(time_multiplier * fuel))) {
              mb_consume -= support_on["lander"] * fuel - i2 * fuel;
              support_on["lander"] -= i2;
              break;
            }
          }
          if (support_on["lander"] !== global.space.lander.on) {
            $(`#space-lander .on`).addClass("warn");
            $(`#space-lander .on`).prop("title", `ON ${support_on["lander"]}/${global.space.lander.on}`);
          } else {
            $(`#space-lander .on`).removeClass("warn");
            $(`#space-lander .on`).prop("title", `ON`);
          }
        } else {
          global.space.fob.troops = 0;
          $(`#space-lander .on`).addClass("warn");
          $(`#space-lander .on`).prop("title", `ON 0/${global.space.lander.on}`);
        }
      }
      if (p_on["s_gate"] && p_on["foothold"]) {
        let increment2 = 2.5;
        let consume = p_on["foothold"] * increment2;
        while (consume * time_multiplier > global.resource["Elerium"].amount && consume > 0) {
          consume -= increment2;
          p_on["foothold"]--;
        }
        breakdown.p.consume.Elerium[loc("galaxy_foothold")] = -consume;
        let number = consume * time_multiplier;
        modRes("Elerium", -number);
      }
      if (global.race["fasting"]) {
        const foodBuildings = ["city:tourist_center", "space:spaceport", "int_:starport", "gxy_:starbase", "space:space_barracks", "int_:zoo", "eden_:restaurant"];
        for (let i2 = 0; i2 < foodBuildings.length; i2++) {
          let parts = foodBuildings[i2].split(":");
          let space2 = convertSpaceSector(parts[0]);
          let region = parts[0] === "city" ? parts[0] : space2;
          if (global[region][parts[1]] && global[region][parts[1]]["on"]) {
            if (p_on[parts[1]]) {
              p_on[parts[1]] = 0;
            }
            $(`#${region}-${parts[1]} .on`).addClass("warn");
            $(`#${region}-${parts[1]} .on`).prop("title", `ON 0`);
          } else {
            $(`#${region}-${parts[1]} .on`).removeClass("warn");
            $(`#${region}-${parts[1]} .on`).prop("title", `ON`);
          }
        }
        global.civic.meditator.display = true;
      }
      [
        { a: "space", r: "spc_moon", s: "moon_base", g: "moon" },
        { a: "space", r: "spc_red", s: "spaceport", g: "red" },
        { a: "space", r: "spc_titan", s: "electrolysis", g: "titan" },
        { a: "space", r: "spc_titan", r2: "spc_enceladus", s: "titan_spaceport", g: "enceladus" },
        { a: "space", r: "spc_eris", s: "drone_control", g: "eris" },
        { a: "tauceti", r: "tau_home", s: "orbital_station", g: "tau_home" },
        { a: "tauceti", r: "tau_red", s: "orbital_platform", g: "tau_red" },
        { a: "tauceti", r: "tau_roid", s: "patrol_ship", g: "tau_roid", oc: true },
        { a: "eden", r: "eden_asphodel", s: "encampment", g: "asphodel" }
      ].forEach(function(sup) {
        sup["r2"] = sup["r2"] || sup.r;
        if (global[sup.a][sup.s] && global[sup.a][sup.s].count > 0) {
          if (!p_structs.includes(`${sup.r}:${sup.s}`)) {
            p_on[sup.s] = global[sup.a][sup.s].on;
          }
          if (actions[sup.a][sup.r][sup.s].hasOwnProperty("support_fuel")) {
            let s_fuels = actions[sup.a][sup.r][sup.s].support_fuel();
            if (!Array.isArray(s_fuels)) {
              s_fuels = [s_fuels];
            }
            for (let j = 0; j < s_fuels.length; j++) {
              let fuel = s_fuels[j];
              let fuel_cost = ["Oil", "Helium_3"].includes(fuel.r) ? sup.a === "space" ? +fuel_adjust(fuel.a, true) : +int_fuel_adjust(fuel.a) : fuel.a;
              let mb_consume = p_on[sup.s] * fuel_cost;
              breakdown.p.consume[fuel.r][actions[sup.a][sup.r][sup.s].title] = -mb_consume;
              for (let i3 = 0; i3 < p_on[sup.s]; i3++) {
                if (!modRes(fuel.r, -(time_multiplier * fuel_cost))) {
                  mb_consume -= p_on[sup.s] * fuel_cost - i3 * fuel_cost;
                  p_on[sup.s] = i3;
                  break;
                }
              }
              if (p_on[sup.s] < global[sup.a][sup.s].on) {
                $(`#space-${sup.s} .on`).addClass("warn");
                $(`#space-${sup.s} .on`).prop("title", `ON ${p_on[sup.s]}/${global[sup.a][sup.s].on}`);
              } else {
                $(`#space-${sup.s} .on`).removeClass("warn");
                $(`#space-${sup.s} .on`).prop("title", `ON`);
              }
            }
          }
          global[sup.a][sup.s].s_max = p_on[sup.s] * actions[sup.a][sup.r][sup.s].support();
          switch (sup.g) {
            case "moon":
              {
                global[sup.a][sup.s].s_max += global.tech["luna"] && global.tech["luna"] >= 2 ? p_on["nav_beacon"] * actions.space.spc_home.nav_beacon.support() : 0;
              }
              break;
            case "red":
              {
                global[sup.a][sup.s].s_max += global.tech["mars"] && global.tech["mars"] >= 3 ? p_on["red_tower"] * actions.space.spc_red.red_tower.support() : 0;
                global[sup.a][sup.s].s_max += global.tech["luna"] && global.tech["luna"] >= 3 ? p_on["nav_beacon"] * actions.space.spc_home.nav_beacon.support() : 0;
              }
              break;
            case "tau_home":
              {
                global[sup.a][sup.s].s_max += p_on["tau_farm"] ? p_on["tau_farm"] : 0;
              }
              break;
            case "asphodel":
              {
                global[sup.a][sup.s].s_max += (p_on["rectory"] ? p_on["rectory"] : 0) * actions.eden.eden_asphodel.rectory.support();
                global[sup.a][sup.s].s_max += (p_on["corruptor"] ? p_on["corruptor"] : 0) * actions.eden.eden_asphodel.corruptor.support();
              }
              break;
          }
        }
        if (global[sup.a][sup.s] && sup.r === "spc_eris" && !p_on["ai_core2"]) {
          global[sup.a][sup.s].s_max = 0;
        }
        if (global[sup.a][sup.s]) {
          let used_support = 0;
          let area_structs = global.support[sup.g].map((x) => x.split(":")[1]);
          for (var i2 = 0; i2 < area_structs.length; i2++) {
            if (global[sup.a][area_structs[i2]]) {
              let id = actions[sup.a][sup.r2][area_structs[i2]].id;
              let supportSize = actions[sup.a][sup.r2][area_structs[i2]].hasOwnProperty("support") ? actions[sup.a][sup.r2][area_structs[i2]].support() * -1 : 1;
              let operating = global[sup.a][area_structs[i2]].on;
              let remaining_support = global[sup.a][sup.s].s_max - used_support;
              if (operating * supportSize > remaining_support && !sup.oc) {
                operating = Math.floor(remaining_support / supportSize);
                $(`#${id} .on`).addClass("warn");
                $(`#${id} .on`).prop("title", `ON ${operating}/${global[sup.a][area_structs[i2]].on}`);
              } else {
                $(`#${id} .on`).removeClass("warn");
                $(`#${id} .on`).prop("title", `ON`);
              }
              if (actions[sup.a][sup.r2][area_structs[i2]].hasOwnProperty("support_fuel")) {
                let s_fuels = actions[sup.a][sup.r2][area_structs[i2]].support_fuel();
                if (!Array.isArray(s_fuels)) {
                  s_fuels = [s_fuels];
                }
                for (let j = 0; j < s_fuels.length; j++) {
                  let fuel = s_fuels[j];
                  let fuel_cost = ["Oil", "Helium_3"].includes(fuel.r) ? sup.a === "space" ? +fuel_adjust(fuel.a, true) : +int_fuel_adjust(fuel.a) : fuel.a;
                  let mb_consume = operating * fuel_cost;
                  breakdown.p.consume[fuel.r][actions[sup.a][sup.r2][area_structs[i2]].title] = -mb_consume;
                  for (let i3 = 0; i3 < operating; i3++) {
                    if (!modRes(fuel.r, -(time_multiplier * fuel_cost))) {
                      mb_consume -= operating * fuel_cost - i3 * fuel_cost;
                      operating -= i3;
                      break;
                    }
                  }
                }
              }
              used_support += operating * supportSize;
              support_on[area_structs[i2]] = operating;
            } else {
              support_on[area_structs[i2]] = 0;
            }
          }
          global[sup.a][sup.s].support = used_support;
        }
      });
      let womling_technician = 1;
      if (global.tech["womling_technicians"]) {
        womling_technician = 1 + p_on["womling_station"] * (global.tech["isolation"] ? 0.3 : 0.08);
        if (global.tech["womling_gene"]) {
          womling_technician *= 1.25;
        }
      }
      if (global.space["space_barracks"] && !global.race["fasting"]) {
        let oil_cost = +fuel_adjust(2, true);
        let sm_consume = global.space.space_barracks.on * oil_cost;
        breakdown.p.consume.Oil[loc("tech_space_marines_bd")] = -sm_consume;
        for (let i2 = 0; i2 < global.space.space_barracks.on; i2++) {
          if (!modRes("Oil", -(time_multiplier * oil_cost))) {
            sm_consume -= global.space.space_barracks.on * oil_cost - i2 * oil_cost;
            global.space.space_barracks.on -= i2;
            break;
          }
        }
      }
      if (p_on["red_factory"] && p_on["red_factory"] > 0) {
        let h_consume = p_on["red_factory"] * fuel_adjust(1, true);
        modRes("Helium_3", -(h_consume * time_multiplier));
        breakdown.p.consume.Helium_3[structName("factory")] = -h_consume;
      }
      if (p_on["int_factory"] && p_on["int_factory"] > 0) {
        let d_consume = p_on["int_factory"] * int_fuel_adjust(5);
        modRes("Deuterium", -(d_consume * time_multiplier));
        breakdown.p.consume.Deuterium[loc("interstellar_int_factory_title")] = -d_consume;
      }
      if (support_on["water_freighter"] && support_on["water_freighter"] > 0) {
        let h_cost = fuel_adjust(5, true);
        let h_consume = support_on["water_freighter"] * h_cost;
        for (let i2 = 0; i2 < support_on["water_freighter"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * h_cost))) {
            h_consume -= support_on["water_freighter"] * h_cost - i2 * h_cost;
            support_on["water_freighter"] -= i2;
            break;
          }
        }
        breakdown.p.consume.Helium_3[loc("space_water_freighter_title")] = -h_consume;
      }
      if (global.interstellar["starport"] && global.interstellar["starport"].count > 0) {
        let fuel_cost = +int_fuel_adjust(5);
        let mb_consume = p_on["starport"] * fuel_cost;
        breakdown.p.consume.Helium_3[loc("interstellar_alpha_starport_title")] = -mb_consume;
        for (let i2 = 0; i2 < p_on["starport"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            mb_consume -= p_on["starport"] * fuel_cost - i2 * fuel_cost;
            p_on["starport"] -= i2;
            break;
          }
        }
        global.interstellar.starport.s_max = p_on["starport"] * actions.interstellar.int_alpha.starport.support();
        global.interstellar.starport.s_max += p_on["habitat"] * actions.interstellar.int_alpha.habitat.support();
        global.interstellar.starport.s_max += p_on["xfer_station"] * actions.interstellar.int_proxima.xfer_station.support();
      }
      let miner_droids = {
        adam: 0,
        uran: 0,
        coal: 0,
        alum: 0
      };
      if (global.interstellar["starport"]) {
        let used_support = 0;
        let structs = global.support.alpha.map((x) => x.split(":")[1]);
        for (var i = 0; i < structs.length; i++) {
          if (global.interstellar[structs[i]]) {
            let operating = global.interstellar[structs[i]].on;
            let id = actions.interstellar.int_alpha[structs[i]].id;
            if (used_support + operating > global.interstellar.starport.s_max) {
              operating -= used_support + operating - global.interstellar.starport.s_max;
              $(`#${id} .on`).addClass("warn");
              $(`#${id} .on`).prop("title", `ON ${operating}/${global.interstellar[structs[i]].on}`);
            } else {
              $(`#${id} .on`).removeClass("warn");
              $(`#${id} .on`).prop("title", `ON`);
            }
            used_support += operating;
            int_on[structs[i]] = operating;
          } else {
            int_on[structs[i]] = 0;
          }
        }
        global.interstellar.starport.support = used_support;
        if (global.interstellar.hasOwnProperty("mining_droid") && global.interstellar.mining_droid.count > 0) {
          let on_droid = int_on["mining_droid"];
          let max_droid = global.interstellar.mining_droid.on;
          let eff = max_droid > 0 ? on_droid / max_droid : 0;
          let remaining = max_droid;
          ["adam", "uran", "coal", "alum"].forEach(function(res) {
            remaining -= global.interstellar.mining_droid[res];
            if (remaining < 0) {
              global.interstellar.mining_droid[res] += remaining;
              remaining = 0;
            }
            miner_droids[res] = global.interstellar.mining_droid[res] * eff;
          });
        }
      }
      if (global.galaxy["starbase"] && global.galaxy["starbase"].count > 0) {
        let fuel_cost = +int_fuel_adjust(25);
        let mb_consume = p_on["starbase"] * fuel_cost;
        breakdown.p.consume.Helium_3[loc("galaxy_starbase")] = -mb_consume;
        for (let i2 = 0; i2 < p_on["starbase"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            mb_consume -= p_on["starbase"] * fuel_cost - i2 * fuel_cost;
            p_on["starbase"] -= i2;
            break;
          }
        }
        if (p_on["s_gate"]) {
          global.galaxy.starbase.s_max = p_on["starbase"] * actions.galaxy.gxy_gateway.starbase.support();
          if (p_on["gateway_station"]) {
            global.galaxy.starbase.s_max += p_on["gateway_station"] * actions.galaxy.gxy_stargate.gateway_station.support();
          }
          if (p_on["telemetry_beacon"]) {
            global.galaxy.starbase.s_max += p_on["telemetry_beacon"] * actions.galaxy.gxy_stargate.telemetry_beacon.support();
          }
          if (p_on["ship_dock"]) {
            global.galaxy.starbase.s_max += p_on["ship_dock"] * actions.galaxy.gxy_gateway.ship_dock.support();
          }
        } else {
          global.galaxy.starbase.s_max = 0;
        }
      }
      if (global.galaxy["starbase"]) {
        let used_support = 0;
        let gateway_structs = global.support.gateway.map((x) => x.split(":")[1]);
        for (var i = 0; i < gateway_structs.length; i++) {
          if (global.galaxy[gateway_structs[i]]) {
            let operating = global.galaxy[gateway_structs[i]].on;
            let id = actions.galaxy.gxy_gateway[gateway_structs[i]].id;
            let operating_cost = -actions.galaxy.gxy_gateway[gateway_structs[i]].support();
            let max_operating = Math.floor((global.galaxy.starbase.s_max - used_support) / operating_cost);
            if (operating > max_operating) {
              operating = max_operating;
              $(`#${id} .on`).addClass("warn");
              $(`#${id} .on`).prop("title", `ON ${operating}/${global.galaxy[gateway_structs[i]].on}`);
            } else {
              $(`#${id} .on`).removeClass("warn");
              $(`#${id} .on`).prop("title", `ON`);
            }
            used_support += operating * operating_cost;
            gal_on[gateway_structs[i]] = operating;
          } else {
            gal_on[gateway_structs[i]] = 0;
          }
        }
        global.galaxy.starbase.support = used_support;
      }
      if (global.galaxy["foothold"] && global.galaxy.foothold.count > 0) {
        global.galaxy.foothold.s_max = p_on["s_gate"] * p_on["foothold"] * actions.galaxy.gxy_alien2.foothold.support();
      }
      if (global.portal["guard_post"]) {
        global.portal.guard_post.s_max = global.portal.guard_post.count * actions.portal.prtl_ruins.guard_post.support();
        if (global.portal.guard_post.on > 0) {
          let army = global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
          if (p_on["soul_forge"]) {
            let forge = soulForgeSoldiers();
            if (forge <= army) {
              army -= forge;
            }
          }
          if (army < jobScale(global.portal.guard_post.on)) {
            global.portal.guard_post.on = Math.floor(army / jobScale(1));
            p_on["guard_post"] = Math.min(global.portal.guard_post.on, p_on["guard_post"]);
          }
        }
        global.portal.guard_post.support = global.portal.guard_post.on;
      }
      if (global.portal["harbor"]) {
        global.portal.harbor.s_max = p_on["harbor"] * actions.portal.prtl_lake.harbor.support();
      }
      if (global.portal["purifier"]) {
        global.portal.purifier.s_max = +(p_on["purifier"] * actions.portal.prtl_spire.purifier.support()).toFixed(2);
        let used_support = 0;
        let purifier_structs = global.support.spire.map((x) => x.split(":")[1]);
        for (var i = 0; i < purifier_structs.length; i++) {
          if (global.portal[purifier_structs[i]]) {
            let operating = global.portal[purifier_structs[i]].on;
            let id = actions.portal.prtl_spire[purifier_structs[i]].id;
            if (used_support + operating > global.portal.purifier.s_max) {
              operating -= used_support + operating - global.portal.purifier.s_max;
              $(`#${id} .on`).addClass("warn");
              $(`#${id} .on`).prop("title", `ON ${operating}/${global.portal[purifier_structs[i]].on}`);
            } else {
              $(`#${id} .on`).removeClass("warn");
              $(`#${id} .on`).prop("title", `ON`);
            }
            used_support += operating * -actions.portal.prtl_spire[purifier_structs[i]].support();
            spire_on[purifier_structs[i]] = operating;
          } else {
            spire_on[purifier_structs[i]] = 0;
          }
        }
        global.portal.purifier.support = used_support;
      }
      if (global.space["space_station"] && global.space["space_station"].count > 0) {
        let fuel_cost = +fuel_adjust(2.5, true);
        let ss_consume = p_on["space_station"] * fuel_cost;
        breakdown.p.consume.Helium_3[loc("space_belt_station_title")] = -ss_consume;
        for (let i2 = 0; i2 < p_on["space_station"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            ss_consume -= p_on["space_station"] * fuel_cost - i2 * fuel_cost;
            p_on["space_station"] -= i2;
            break;
          }
        }
      }
      if (global.space["space_station"]) {
        let used_support = 0;
        let belt_structs = global.support.belt.map((x) => x.split(":")[1]);
        for (var i = 0; i < belt_structs.length; i++) {
          if (global.space[belt_structs[i]]) {
            let operating = global.space[belt_structs[i]].on;
            let id = actions.space.spc_belt[belt_structs[i]].id;
            if (used_support + operating * -actions.space.spc_belt[belt_structs[i]].support() > global.space.space_station.s_max) {
              let excess = used_support + operating * -actions.space.spc_belt[belt_structs[i]].support() - global.space.space_station.s_max;
              operating -= Math.ceil(excess / -actions.space.spc_belt[belt_structs[i]].support());
              $(`#${id} .on`).addClass("warn");
              $(`#${id} .on`).prop("title", `ON ${operating}/${global.space[belt_structs[i]].on}`);
            } else {
              $(`#${id} .on`).removeClass("warn");
              $(`#${id} .on`).prop("title", `ON`);
            }
            used_support += operating * -actions.space.spc_belt[belt_structs[i]].support();
            support_on[belt_structs[i]] = operating;
          } else {
            support_on[belt_structs[i]] = 0;
          }
        }
        global.space.space_station.support = used_support;
      }
      if (global.interstellar["nexus"] && global.interstellar["nexus"].count > 0) {
        let cash_cost = 350;
        let mb_consume = p_on["nexus"] * cash_cost;
        breakdown.p.consume.Money[loc("interstellar_nexus_bd")] = -mb_consume;
        for (let i2 = 0; i2 < p_on["nexus"]; i2++) {
          if (!modRes("Money", -(time_multiplier * cash_cost))) {
            mb_consume -= p_on["nexus"] * cash_cost - i2 * cash_cost;
            p_on["nexus"] -= i2;
            break;
          }
        }
        global.interstellar.nexus.s_max = p_on["nexus"] * actions.interstellar.int_nebula.nexus.support();
      }
      if (global.interstellar["nexus"]) {
        let used_support = 0;
        let structs = global.support.nebula.map((x) => x.split(":")[1]);
        for (var i = 0; i < structs.length; i++) {
          if (global.interstellar[structs[i]]) {
            let operating = global.interstellar[structs[i]].on;
            let id = actions.interstellar.int_nebula[structs[i]].id;
            if (used_support + operating > global.interstellar.nexus.s_max) {
              operating -= used_support + operating - global.interstellar.nexus.s_max;
              $(`#${id} .on`).addClass("warn");
              $(`#${id} .on`).prop("title", `ON ${operating}/${global.interstellar[structs[i]].on}`);
            } else {
              $(`#${id} .on`).removeClass("warn");
              $(`#${id} .on`).prop("title", `ON`);
            }
            used_support += operating;
            int_on[structs[i]] = operating;
          } else {
            int_on[structs[i]] = 0;
          }
        }
        global.interstellar.nexus.support = used_support;
      }
      if (global.interstellar["xfer_station"] && p_on["xfer_station"]) {
        let fuel_cost = 0.28;
        let xfer_consume = p_on["xfer_station"] * fuel_cost;
        breakdown.p.consume.Uranium[loc("interstellar_xfer_station_title")] = -xfer_consume;
        for (let i2 = 0; i2 < p_on["xfer_station"]; i2++) {
          if (!modRes("Uranium", -(time_multiplier * fuel_cost))) {
            xfer_consume -= p_on["xfer_station"] * fuel_cost - i2 * fuel_cost;
            p_on["xfer_station"] -= i2;
            break;
          }
        }
      }
      if (global.space["fob"] && p_on["fob"]) {
        let fuel_cost = +fuel_adjust(125, true);
        let xfer_consume = p_on["fob"] * fuel_cost;
        breakdown.p.consume.Helium_3[loc("tech_fob")] = -xfer_consume;
        for (let i2 = 0; i2 < p_on["fob"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            xfer_consume -= p_on["fob"] * fuel_cost - i2 * fuel_cost;
            p_on["fob"] -= i2;
            break;
          }
        }
      }
      if (p_on["outpost"] && p_on["outpost"] > 0) {
        let fuel_cost = +fuel_adjust(2, true);
        let out_consume = p_on["outpost"] * fuel_cost;
        breakdown.p.consume.Oil[loc("space_gas_moon_outpost_bd")] = -out_consume;
        for (let i2 = 0; i2 < p_on["outpost"]; i2++) {
          if (!modRes("Oil", -(time_multiplier * fuel_cost))) {
            out_consume -= p_on["outpost"] * fuel_cost - i2 * fuel_cost;
            p_on["outpost"] -= i2;
            break;
          }
        }
      }
      if (p_on["neutron_miner"] && p_on["neutron_miner"] > 0) {
        let fuel_cost = +int_fuel_adjust(3);
        let out_consume = p_on["neutron_miner"] * fuel_cost;
        breakdown.p.consume.Helium_3[loc("interstellar_neutron_miner_title")] = -out_consume;
        for (let i2 = 0; i2 < p_on["neutron_miner"]; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            out_consume -= p_on["neutron_miner"] * fuel_cost - i2 * fuel_cost;
            p_on["neutron_miner"] -= i2;
            break;
          }
        }
      }
      if (global.interstellar["cruiser"]) {
        let fuel_cost = +int_fuel_adjust(6);
        let active = global.interstellar["cruiser"].on;
        let out_consume = active * fuel_cost;
        breakdown.p.consume.Helium_3[loc("interstellar_cruiser_title")] = -out_consume;
        for (let i2 = 0; i2 < global.interstellar["cruiser"].on; i2++) {
          if (!modRes("Helium_3", -(time_multiplier * fuel_cost))) {
            out_consume -= global.interstellar["cruiser"].on * fuel_cost - i2 * fuel_cost;
            active -= i2;
            break;
          }
        }
        int_on["cruiser"] = active;
      }
      if (global.eden["pillbox"]) {
        let pillsize = jobScale(10);
        if (p_on["pillbox"]) {
          var staff = p_on["pillbox"] * pillsize;
          let soldiers = garrisonSize(false, { nopill: true });
          if (soldiers < staff) {
            staff = Math.floor(soldiers / pillsize) * pillsize;
          }
          global.eden.pillbox.staffed = staff;
        } else {
          global.eden.pillbox.staffed = 0;
        }
        if (global.eden.pillbox.staffed < p_on["pillbox"] * pillsize) {
          $(`#eden-pillbox .on`).addClass("warn");
        } else {
          $(`#eden-pillbox .on`).removeClass("warn");
        }
      }
      if (global.tech["isolation"] && global.race["truepath"]) {
        support_on["g_factory"] = p_on["refueling_station"];
        global.space.g_factory.count = global.tauceti.refueling_station.count;
        global.space.g_factory.on = global.tauceti.refueling_station.on;
      }
      if (global.race["replicator"] && p_on["replicator"]) {
        let res = global.race.replicator.res;
        if (!["Asphodel_Powder", "Elysanite"].includes(res)) {
          let vol = replicator(res, p_on["replicator"]);
          breakdown.p.consume[res][loc("tau_replicator_db")] = vol;
          modRes(res, time_multiplier * vol);
        }
      }
      if (p_on["s_gate"]) {
        if (!global.settings.showGalactic) {
          global.settings.showGalactic = true;
          global.settings.space.stargate = true;
          renderSpace();
        }
      } else {
        global.settings.showGalactic = false;
        global.settings.space.stargate = false;
      }
      if (p_on["shipyard"]) {
        global.settings.showShipYard = true;
      } else {
        global.settings.showShipYard = false;
        if (global.settings.govTabs === 5) {
          global.settings.govTabs = 0;
        }
      }
      let crew_civ = 0;
      let crew_mil = 0;
      let total = 0;
      let andromeda_helium = 0;
      let andromeda_deuterium = 0;
      for (let j = 0; j < galaxy_ship_types.length; j++) {
        const area = galaxy_ship_types[j].area;
        const region = galaxy_ship_types[j].region;
        const req = galaxy_ship_types[j].hasOwnProperty("req") ? p_on[galaxy_ship_types[j].req] > 0 : true;
        const support_home = actions[area][region].info?.support;
        let used_support = 0;
        for (let i2 = 0; i2 < galaxy_ship_types[j].ships.length; i2++) {
          const ship = galaxy_ship_types[j].ships[i2];
          if (global[area][ship]) {
            let operating = 0;
            if (global[area][ship].hasOwnProperty("on") && req && (p_on["s_gate"] || area !== "galaxy")) {
              const id = actions[area][region][ship].id;
              const num_on = global[area][ship].on;
              operating = num_on;
              const operating_cost = actions[area][region][ship].hasOwnProperty("support") ? -actions[area][region][ship].support() : 0;
              if (operating_cost > 0) {
                const max_operating = Math.floor((global[area][support_home].s_max - used_support) / operating_cost);
                operating = Math.min(operating, max_operating);
              }
              if (actions[area][region][ship].hasOwnProperty("ship")) {
                if (actions[area][region][ship].ship.civ && global[area][ship].hasOwnProperty("crew")) {
                  let civPerShip = actions[area][region][ship].ship.civ();
                  if (civPerShip > 0) {
                    if (global[area][ship].crew < 0) {
                      global[area][ship].crew = 0;
                    }
                    if (global[area][ship].crew < operating * civPerShip) {
                      if (total < global.resource[global.race.species].amount) {
                        if (global.civic[global.civic.d_job].workers >= civPerShip) {
                          global.civic[global.civic.d_job].workers -= civPerShip;
                          global.civic.crew.workers += civPerShip;
                          global[area][ship].crew += civPerShip;
                        }
                      }
                    } else if (global[area][ship].crew > operating * civPerShip) {
                      global.civic[global.civic.d_job].workers += civPerShip;
                      global.civic.crew.workers -= civPerShip;
                      global[area][ship].crew -= civPerShip;
                    }
                    global.civic.crew.assigned = global.civic.crew.workers;
                    crew_civ += global[area][ship].crew;
                    total += global[area][ship].crew;
                    operating = Math.min(operating, Math.floor(global[area][ship].crew / civPerShip));
                  }
                }
                if (actions[area][region][ship].ship.mil && global[area][ship].hasOwnProperty("mil")) {
                  let milPerShip = actions[area][region][ship].ship.mil();
                  if (milPerShip > 0) {
                    if (global[area][ship].mil !== operating * milPerShip) {
                      global[area][ship].mil = operating * milPerShip;
                    }
                    if (global.civic.garrison.workers - global.portal.fortress.garrison < 0) {
                      let underflow = global.civic.garrison.workers - global.portal.fortress.garrison;
                      global[area][ship].mil -= underflow;
                    }
                    if (crew_mil + global[area][ship].mil > global.civic.garrison.workers - global.portal.fortress.garrison) {
                      global[area][ship].mil = global.civic.garrison.workers - global.portal.fortress.garrison - crew_mil;
                    }
                    if (global[area][ship].mil < 0) {
                      global[area][ship].mil = 0;
                    }
                    crew_mil += global[area][ship].mil;
                    operating = Math.min(operating, Math.floor(global[area][ship].mil / milPerShip));
                  }
                }
                if (actions[area][region][ship].ship.hasOwnProperty("helium")) {
                  let increment2 = +int_fuel_adjust(actions[area][region][ship].ship.helium).toFixed(2);
                  let consume = operating * increment2;
                  while (consume * time_multiplier > global.resource.Helium_3.amount + (global.resource.Helium_3.diff > 0 ? global.resource.Helium_3.diff * time_multiplier : 0) && operating > 0) {
                    consume -= increment2;
                    operating--;
                  }
                  modRes("Helium_3", -(consume * time_multiplier));
                  andromeda_helium += consume;
                }
                if (actions[area][region][ship].ship.hasOwnProperty("deuterium")) {
                  let increment2 = +int_fuel_adjust(actions[area][region][ship].ship.deuterium).toFixed(2);
                  let consume = operating * increment2;
                  while (consume * time_multiplier > global.resource.Deuterium.amount + (global.resource.Deuterium.diff > 0 ? global.resource.Deuterium.diff * time_multiplier : 0) && operating > 0) {
                    consume -= increment2;
                    operating--;
                  }
                  modRes("Deuterium", -(consume * time_multiplier));
                  andromeda_deuterium += consume;
                }
              }
              if (operating < num_on) {
                $(`#${id} .on`).addClass("warn");
                $(`#${id} .on`).prop("title", `ON ${operating}/${num_on}`);
              } else {
                $(`#${id} .on`).removeClass("warn");
                $(`#${id} .on`).prop("title", `ON`);
              }
              used_support += operating * operating_cost;
            }
            gal_on[ship] = operating;
          }
        }
        if (support_home && global?.[area]?.[support_home]?.hasOwnProperty("support")) {
          global[area][support_home].support = used_support;
        }
      }
      breakdown.p.consume.Helium_3[loc("galaxy_fuel_consume")] = -andromeda_helium;
      breakdown.p.consume.Deuterium[loc("galaxy_fuel_consume")] = -andromeda_deuterium;
      global.civic.crew.workers = crew_civ;
      if (global.civic.garrison.hasOwnProperty("crew")) {
        if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
          global.space.shipyard.ships.forEach(function(ship) {
            if (ship.location !== "spc_dwarf" || ship.location === "spc_dwarf" && ship.transit > 0) {
              crew_mil += shipCrewSize(ship);
            }
          });
        }
        global.civic.garrison.crew = crew_mil;
      }
      Object.keys(job_desc).forEach(function(job) {
        if (global.civic[job]) {
          if (job !== "crew") {
            total += global.civic[job].workers;
            if (total > global.resource[global.race.species].amount) {
              global.civic[job].workers -= total - global.resource[global.race.species].amount;
            }
            if (!global.civic[job].display || global.civic[job].workers < 0) {
              global.civic[job].workers = 0;
            }
          }
          if (job !== "unemployed" && job !== "hunter" && job !== "forager") {
            let stress_level = global.civic[job].stress;
            if (global.city.ptrait.includes("mellow")) {
              stress_level += planetTraits.mellow.vars()[1];
            }
            if (global.race["content"]) {
              let effectiveness = job === "hell_surveyor" ? 0.2 : 0.4;
              stress_level += global.race["content"] * effectiveness;
            }
            if (global.city.ptrait.includes("dense") && job === "miner") {
              stress_level -= planetTraits.dense.vars()[1];
            }
            if (global.race["freespirit"] && job !== "farmer" && job !== "lumberjack" && job !== "quarry_worker" && job !== "crystal_miner" && job !== "scavenger") {
              stress_level /= 1 + traits.freespirit.vars()[0] / 100;
            }
            let workers = global.civic[job].workers;
            if (global.race["high_pop"]) {
              workers /= traits.high_pop.vars()[0];
            }
            if (global.race["sky_lover"] && ["miner", "coal_miner", "crystal_miner", "pit_miner"].includes(job)) {
              workers *= 1 + traits.sky_lover.vars()[0] / 100;
            }
            stress -= workers / stress_level;
          }
        }
      });
      global.civic[global.civic.d_job].workers += global.resource[global.race.species].amount - total;
      if (global.civic[global.civic.d_job].workers < 0) {
        global.civic[global.civic.d_job].workers = 0;
      }
      Object.keys(job_desc).forEach(function(job) {
        if (job !== "craftsman" && global.civic[job] && global.civic[job].display && global.civic[job].workers < global.civic[job].assigned && global.civic[global.civic.d_job].workers > 0 && global.civic[job].workers < global.civic[job].max) {
          global.civic[job].workers++;
          global.civic[global.civic.d_job].workers--;
        }
      });
      let entertainment = 0;
      if (global.tech["theatre"] && !global.race["joyless"]) {
        entertainment += workerScale(global.civic.entertainer.workers, "entertainer") * global.tech.theatre;
        if (global.race["musical"]) {
          entertainment += workerScale(global.civic.entertainer.workers, "entertainer") * traits.musical.vars()[0];
        }
        if (astroSign2 === "sagittarius") {
          entertainment *= 1 + astroVal2("sagittarius")[0] / 100;
        }
        if (global.race["emotionless"]) {
          entertainment *= 1 - traits.emotionless.vars()[0] / 100;
        }
        if (global.race["high_pop"]) {
          entertainment *= traits.high_pop.vars()[1] / 100;
        }
      }
      if (global.civic.govern.type === "democracy") {
        let democracy = 1 + govEffect.democracy()[0] / 100;
        entertainment *= democracy;
      }
      global.city.morale.entertain = entertainment;
      morale += entertainment;
      if (global.tech["broadcast"] && !global.race["joyless"]) {
        let gasVal = govActive("gaslighter", 0) || 0;
        let signalVal;
        let mVal = gasVal + global.tech.broadcast;
        if (global.race["orbit_decayed"]) {
          signalVal = p_on["nav_beacon"] || 0;
          mVal /= 2;
        } else if (global.tech["isolation"] && global.race["truepath"]) {
          signalVal = support_on["colony"];
          mVal *= 2;
        } else {
          signalVal = p_on["wardenclyffe"];
        }
        global.city.morale.broadcast = signalVal * mVal;
        morale += signalVal * mVal;
      } else {
        global.city.morale.broadcast = 0;
      }
      if (support_on["vr_center"] && !global.race["joyless"]) {
        let gasVal = govActive("gaslighter", 1) || 0;
        let vr_morale = gasVal + 1;
        if (global.race["orbit_decayed"]) {
          vr_morale += 2;
        }
        global.city.morale.vr = support_on["vr_center"] * vr_morale;
        morale += support_on["vr_center"] * vr_morale;
      } else {
        global.city.morale.vr = 0;
      }
      if (int_on["zoo"] && !global.race["fasting"]) {
        global.city.morale.zoo = int_on["zoo"] * 5;
        morale += int_on["zoo"] * 5;
      } else {
        global.city.morale.zoo = 0;
      }
      if (p_on["tavern"] && !global.race["joyless"]) {
        global.city.morale.tavern = p_on["tavern"] * p_on["shadow_mine"] * 0.35;
        morale += p_on["tavern"] * p_on["shadow_mine"] * 0.35;
      } else {
        global.city.morale.tavern = 0;
      }
      if (support_on["bliss_den"] && !global.race["joyless"]) {
        global.city.morale.bliss_den = support_on["bliss_den"] * 8;
        morale += support_on["bliss_den"] * 8;
      } else {
        global.city.morale.bliss_den = 0;
      }
      if (p_on["restaurant"] && !global.race["fasting"] && !global.race["joyless"]) {
        let val = 0;
        val += global.eden.hasOwnProperty("pillbox") && p_on["pillbox"] ? 0.35 * p_on["pillbox"] : 0;
        val += global.civic.elysium_miner.workers * 0.15;
        val += global.eden.hasOwnProperty("archive") && p_on["archive"] ? 0.4 * p_on["archive"] : 0;
        global.city.morale.restaurant = p_on["restaurant"] * val;
        morale += p_on["restaurant"] * val;
      } else {
        global.city.morale.restaurant = 0;
      }
      if (eventActive("summer")) {
        let boost = global.resource.Thermite.diff * 2.5 / (global.resource.Thermite.diff * 2.5 + 500) * 500;
        global.city.morale["bonfire"] = boost;
        morale += boost;
      } else {
        delete global.city.morale["bonfire"];
      }
      if (global.civic.govern.type === "anarchy") {
        stress /= 2;
      }
      if (global.civic.govern.type === "autocracy") {
        stress *= 1 + govEffect.autocracy()[0] / 100;
      }
      if (global.civic.govern.type === "socialist") {
        stress *= 1 + govEffect.socialist()[2] / 100;
      }
      if (global.race["emotionless"]) {
        stress *= 1 - traits.emotionless.vars()[1] / 100;
      }
      for (let i2 = 0; i2 < 3; i2++) {
        if (global.civic.govern.type !== "federation" && global.civic.foreign[`gov${i2}`].anx) {
          stress *= 1.1;
        }
      }
      if (global.civic.govern.type === "dictator") {
        stress *= 1 + govEffect.dictator()[0] / 100;
      }
      stress = +stress.toFixed(1);
      global.city.morale.stress = stress;
      morale += stress;
      global.city.morale.tax = 20 - global.civic.taxes.tax_rate;
      morale -= global.civic.taxes.tax_rate - 20;
      if (global.civic.taxes.tax_rate > 40) {
        let high_tax = global.civic.taxes.tax_rate - 40;
        global.city.morale.tax -= high_tax * 0.5;
        morale -= high_tax * 0.5;
      }
      if (global.civic.govern.type === "oligarchy" && global.civic.taxes.tax_rate > 20) {
        let high_tax = global.civic.taxes.tax_rate - 20;
        global.city.morale.tax += high_tax * 0.5;
        morale += high_tax * 0.5;
      }
      if ((global.civic.govern.type !== "autocracy" && !global.race["blood_thirst"] || global.race["immoral"]) && global.civic.garrison.protest + global.civic.garrison.fatigue > 2) {
        let immoral = global.race["immoral"] ? 1 + traits.immoral.vars()[0] / 100 : 1;
        let warmonger = Math.round(Math.log2(global.civic.garrison.protest + global.civic.garrison.fatigue) * immoral);
        global.city.morale.warmonger = global.race["immoral"] ? warmonger : -warmonger;
        morale += global.city.morale.warmonger;
      } else {
        global.city.morale.warmonger = 0;
      }
      let mBaseCap = 100;
      mBaseCap += global.city["casino"] ? p_on["casino"] : 0;
      mBaseCap += global.space["spc_casino"] ? p_on["spc_casino"] : 0;
      mBaseCap += global.tauceti["tauceti_casino"] ? p_on["tauceti_casino"] : 0;
      mBaseCap += global.portal["hell_casino"] ? p_on["hell_casino"] : 0;
      if (global.city["amphitheatre"]) {
        let athVal = govActive("athleticism", 0);
        mBaseCap += athVal ? global.city.amphitheatre.count * athVal : global.city.amphitheatre.count;
      }
      if (support_on["vr_center"]) {
        mBaseCap += support_on["vr_center"] * 2;
      }
      if (int_on["zoo"] && !global.race["fasting"]) {
        mBaseCap += int_on["zoo"] * 2;
      }
      if (support_on["bliss_den"]) {
        mBaseCap += support_on["bliss_den"] * 2;
      }
      if (p_on["resort"]) {
        mBaseCap += p_on["resort"] * 2;
      }
      if (global.eden["rushmore"] && global.eden.rushmore.count === 1) {
        mBaseCap += 10;
      }
      if (global.tech["superstar"]) {
        let mcapval = global.race["high_pop"] ? highPopAdjust(1) : 1;
        mBaseCap += workerScale(global.civic.entertainer.workers, "entertainer") * mcapval;
      }
      moraleCap = mBaseCap;
      if (global.tech["monuments"]) {
        let gasVal = govActive("gaslighter", 2);
        let mcap = gasVal ? 2 - gasVal : 2;
        let monuments = global.tech.monuments;
        if (global.race["wish"] && global.race["wishStats"]) {
          if (global.city["wonder_lighthouse"]) {
            monuments += 5;
          }
          if (global.city["wonder_pyramid"]) {
            monuments += 5;
          }
          if (global.space["wonder_statue"]) {
            monuments += 5;
          }
          if (global.interstellar["wonder_gardens"] || global.space["wonder_gardens"] || global.portal["wonder_gardens"]) {
            monuments += 5;
          }
        }
        moraleCap += monuments * mcap;
      }
      if (global.civic.taxes.tax_rate < 20 && !global.race["banana"]) {
        moraleCap += 10 - Math.floor(global.civic.taxes.tax_rate / 2);
      }
      if (global.stats.achieve["joyless"]) {
        moraleCap += global.stats.achieve["joyless"].l * 2;
      }
      if (global.race["motivated"]) {
        let boost = Math.ceil(global.race["motivated"] ** 0.4);
        moraleCap += Math.round(boost / 2);
      }
      let m_min = 50;
      if (global.race["optimistic"]) {
        m_min += traits.optimistic.vars()[1];
      }
      if (geckoFathom > 0) {
        m_min += Math.round(traits.optimistic.vars(1)[1] * geckoFathom);
      }
      if (global.race["truepath"]) {
        m_min -= 25;
      }
      if (global.civic.govern.fr > 0) {
        let rev = morale / 2;
        global.city.morale.rev = rev;
        morale -= rev;
        m_min -= 10;
      } else {
        global.city.morale.rev = 0;
      }
      if (global.race["tormented"]) {
        if (morale > 100) {
          let excess = morale - 100;
          excess = Math.ceil(excess * traits.tormented.vars()[0] / 100);
          morale -= excess;
          global.city["tormented"] = excess;
        } else {
          global.city["tormented"] = 0;
        }
      } else {
        delete global.city["tormented"];
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.bad > 0) {
        let badPress = Math.floor(global.race.wishStats.bad / 75) + 1;
        morale -= badPress * 5;
      }
      global.city.morale.potential = +morale.toFixed(1);
      if (morale < m_min) {
        morale = m_min;
      } else if (morale > moraleCap) {
        let gasVal = govActive("gaslighter", 3) || 0;
        morale = moraleCap + (morale - moraleCap) * gasVal / 100;
      }
      global.city.morale.cap = moraleCap;
      global.city.morale.current = morale;
      if (global.city.morale.current < 100) {
        if (global.race["blissful"]) {
          let mVal = global.city.morale.current - 100;
          let bliss = traits.blissful.vars()[0] / 100;
          global_multiplier *= 1 + mVal * bliss / 100;
          breakdown.p["Global"][loc("morale")] = mVal * bliss + "%";
        } else {
          global_multiplier *= global.city.morale.current / 100;
          breakdown.p["Global"][loc("morale")] = +(global.city.morale.current - 100).toFixed(2) + "%";
        }
      } else {
        global_multiplier *= 1 + (global.city.morale.current - 100) / 200;
        breakdown.p["Global"][loc("morale")] = +((global.city.morale.current - 100) / 2).toFixed(2) + "%";
      }
      if (global.race["lazy"] && global.city.calendar.temp === 2) {
        breakdown.p["Global"][loc("trait_lazy_bd")] = "-" + traits.lazy.vars()[0] + "%";
        global_multiplier *= 1 - traits.lazy.vars()[0] / 100;
      }
      if (global.race["distracted"]) {
        breakdown.p["Global"][loc("event_m_curious3_bd")] = "-5%";
        global_multiplier *= 0.95;
      }
      if (global.race["stimulated"]) {
        breakdown.p["Global"][loc("event_m_curious4_bd")] = "+10%";
        global_multiplier *= 1.1;
      }
      if (global.civic.govern.type === "dictator") {
        breakdown.p["Global"][loc("wish_dictator")] = `+${govEffect.dictator()[1]}%`;
        global_multiplier *= 1 + govEffect.dictator()[1] / 100;
      }
      if (global.race["selenophobia"]) {
        let moon = global.city.calendar.moon > 14 ? 28 - global.city.calendar.moon : global.city.calendar.moon;
        breakdown.p["Global"][loc("moon_phase")] = -moon + traits.selenophobia.vars()[0] + "%";
        moon = 1 + traits.selenophobia.vars()[0] / 100 - moon / 100;
        global_multiplier *= moon;
      }
      if (global.interstellar["mass_ejector"]) {
        let total2 = 0;
        let mass = 0;
        let exotic = 0;
        Object.keys(global.interstellar.mass_ejector).forEach(function(res) {
          if (atomic_mass[res]) {
            let ejected = global.interstellar.mass_ejector[res];
            if (total2 + ejected > p_on["mass_ejector"] * 1e3) {
              ejected = p_on["mass_ejector"] * 1e3 - total2;
            }
            total2 += ejected;
            if (ejected > 0) {
              breakdown.p.consume[res][loc("interstellar_blackhole_name")] = -ejected;
            }
            if (ejected * time_multiplier > global.resource[res].amount) {
              ejected = global.resource[res].amount / time_multiplier;
            }
            if (ejected < 0) {
              ejected = 0;
            }
            modRes(res, -(time_multiplier * ejected));
            mass += ejected * atomic_mass[res];
            if (global.race.universe !== "magic" && (res === "Elerium" || res === "Infernite")) {
              exotic += ejected * atomic_mass[res];
            }
          }
        });
        global.interstellar.mass_ejector.mass = mass;
        global.interstellar.mass_ejector.total = total2;
        global.interstellar.stellar_engine.mass += mass / 1e10 * time_multiplier;
        global.interstellar.stellar_engine.exotic += exotic / 1e10 * time_multiplier;
      }
      if (global.portal["transport"] && global.portal["purifier"]) {
        let total2 = 0;
        let supply = 0;
        let bireme_rating = global.blood["spire"] && global.blood.spire >= 2 ? 0.8 : 0.85;
        let cargoSize = global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 4 ? 8 : 5;
        Object.keys(global.portal.transport.cargo).forEach(function(res) {
          if (supplyValue[res]) {
            let shipped = global.portal.transport.cargo[res];
            if (total2 + shipped > gal_on["transport"] * cargoSize) {
              shipped = gal_on["transport"] * cargoSize - total2;
            }
            total2 += shipped;
            let volume = shipped * supplyValue[res].out;
            while (volume * time_multiplier > global.resource[res].amount && volume > 0) {
              volume -= supplyValue[res].out;
              shipped--;
            }
            if (volume > 0) {
              breakdown.p.consume[res][loc("portal_transport_title")] = -volume;
            }
            let bireme = 1 - bireme_rating ** (gal_on["bireme"] || 0);
            modRes(res, -(time_multiplier * volume));
            supply += Number(shipped * supplyValue[res].in * time_multiplier * bireme);
          }
        });
        if (global.tech["hell_lake"] && global.tech.hell_lake >= 7 && global.tech["railway"]) {
          supply *= 1 + global.tech.railway / 100;
        }
        if (global.portal["mechbay"]) {
          for (let i2 = 0; i2 < global.portal.mechbay.active; i2++) {
            let mech = global.portal.mechbay.mechs[i2];
            if (mech.size === "collector") {
              supply += mechCollect(mech) * time_multiplier;
            } else if (mech.size === "minion" && mech.equip.includes("scavenger")) {
              supply += mechCollect(mech) * time_multiplier;
            }
          }
        }
        global.portal.purifier.supply += supply;
        global.portal.purifier.diff = supply / time_multiplier;
        if (global.portal.purifier.supply > global.portal.purifier.sup_max) {
          global.portal.purifier.supply = global.portal.purifier.sup_max;
        }
      }
      if (global.race["gnawer"]) {
        let res = global.race["kindling_kindred"] || global.race["smoldering"] ? "Stone" : "Lumber";
        if (global.resource[res].display) {
          let pop = global.resource[global.race.species].amount + global.civic.garrison.workers;
          if (global.race["high_pop"]) {
            pop /= traits.high_pop.vars()[0];
          }
          let res_cost = pop * traits.gnawer.vars()[0];
          breakdown.p.consume[res][loc("trait_gnawer_bd")] = -res_cost;
          modRes(res, -(res_cost * time_multiplier));
        }
      }
      var fed = true;
      if (global.resource[global.race.species].amount >= 1 || global.city["farm"] || global.city["soul_well"] || global.city["compost"] || global.city["tourist_center"] || global.city["transmitter"]) {
        let food_base = 0;
        let virgo = astroSign2 === "virgo" ? 1 + astroVal2("virgo")[0] / 100 : 1;
        if (global.race["artifical"]) {
          if (global.city["transmitter"]) {
            food_base = p_on["transmitter"] * production("transmitter") * production("psychic_boost", "Food");
            breakdown.p["Food"][loc("city_transmitter")] = food_base + "v";
            global.city.transmitter["lpmod"] = production("transmitter") * global_multiplier * production("psychic_boost", "Food");
          }
        } else {
          if (global.race["detritivore"]) {
            if (global.city["compost"]) {
              let operating = global.city.compost.on;
              if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
                let lumberIncrement = 0.5;
                let lumber_cost = operating * lumberIncrement;
                while (lumber_cost * time_multiplier > global.resource.Lumber.amount && lumber_cost > 0) {
                  lumber_cost -= lumberIncrement;
                  operating--;
                }
                breakdown.p.consume.Lumber[loc("city_compost_heap")] = -lumber_cost;
                modRes("Lumber", -(lumber_cost * time_multiplier));
              }
              let c_factor = traits.detritivore.vars()[0] / 100;
              let food_compost = operating * (1.2 + global.tech["compost"] * c_factor);
              food_compost *= global.city.biome === "grassland" ? biomes.grassland.vars()[0] : 1;
              food_compost *= global.city.biome === "savanna" ? biomes.savanna.vars()[0] : 1;
              food_compost *= global.city.biome === "ashland" ? biomes.ashland.vars()[0] : 1;
              food_compost *= global.city.biome === "volcanic" ? biomes.volcanic.vars()[0] : 1;
              food_compost *= global.city.biome === "hellscape" ? biomes.hellscape.vars()[0] : 1;
              food_compost *= global.city.ptrait.includes("trashed") ? planetTraits.trashed.vars()[0] : 1;
              food_compost *= production("psychic_boost", "Food");
              breakdown.p["Food"][loc("city_compost_heap")] = food_compost + "v";
              food_base += food_compost;
            }
          } else if (global.race["carnivore"] || global.race["soul_eater"]) {
            let strength = weaponTechModifer();
            let food_hunt = workerScale(global.civic.hunter.workers, "hunter");
            food_hunt *= racialTrait(food_hunt, "hunting");
            if (global.race["servants"]) {
              let serve_hunt = global.race.servants.jobs.hunter;
              serve_hunt *= servantTrait(global.race.servants.jobs.hunter, "hunting");
              food_hunt += serve_hunt;
            }
            food_hunt *= strength * (global.race["carnivore"] ? 2 : 0.5);
            if (global.race["ghostly"]) {
              food_hunt *= 1 + traits.ghostly.vars()[0] / 100;
            }
            food_hunt *= production("psychic_boost", "Food");
            breakdown.p["Food"][jobName("hunter")] = food_hunt + "v";
            if (global.race["carnivore"] && global.city["lodge"] && food_hunt > 0) {
              food_hunt *= 1 + global.city.lodge.count / 20;
              breakdown.p["Food"][`\u1102${loc("city_lodge")}`] = global.city.lodge.count * 5 + "%";
            }
            if (global.city["soul_well"]) {
              let souls = global.city["soul_well"].count * (global.race["ghostly"] ? 2 + traits.ghostly.vars()[1] : 2);
              food_hunt += souls * production("psychic_boost", "Food");
              breakdown.p["Food"][loc("city_soul_well")] = souls + "v";
            }
            food_base += food_hunt;
          } else if (global.race["unfathomable"]) {
            if (global.city["captive_housing"]) {
              let strength = weaponTechModifer();
              let hunt = workerScale(global.civic.hunter.workers, "hunter");
              hunt *= racialTrait(hunt, "hunting") * strength;
              if (global.race["servants"]) {
                let serve_hunt = global.race.servants.jobs.hunter * strength;
                serve_hunt *= servantTrait(global.race.servants.jobs.hunter, "hunting");
                hunt += serve_hunt;
              }
              let minHunt = hunt * 8e-3;
              if (global.city.captive_housing.cattle < global.city.captive_housing.cattleCap && hunt > 0) {
                hunt -= Math.round(global.city.captive_housing.cattle ** 1.25);
                if (hunt < minHunt) {
                  hunt = minHunt;
                }
                global.city.captive_housing.cattleCatch += hunt * time_multiplier;
                if (global.city.captive_housing.cattleCatch >= global.city.captive_housing.cattle ** 2) {
                  global.city.captive_housing.cattle++;
                  global.city.captive_housing.cattleCatch = 0;
                }
              }
              if (global.city.captive_housing.cattle > 0) {
                let food = global.city.captive_housing.cattle / 3 * production("psychic_boost", "Food");
                breakdown.p["Food"][loc("city_captive_housing_cattle_bd")] = food + "v";
                food_base += food;
                if (global.resource.Food.amount < global.resource.Food.max * 0.01) {
                  global.city.captive_housing.cattle--;
                  modRes("Food", 1e3 * production("psychic_boost", "Food") * global_multiplier, true);
                  global.stats.cattle++;
                }
              }
            }
          } else if (global.city["farm"] || global.race["forager"] || global.race["warlord"]) {
            let weather_multiplier = 1;
            if (!global.race["submerged"]) {
              if (global.city.calendar.temp === 0) {
                if (global.city.calendar.weather === 0) {
                  weather_multiplier *= global.race["chilled"] ? 1 + traits.chilled.vars()[3] / 100 : 0.7;
                } else {
                  weather_multiplier *= global.race["chilled"] ? 1 + traits.chilled.vars()[4] / 100 : 0.85;
                }
              }
              if (global.city.calendar.weather === 2) {
                weather_multiplier *= global.race["chilled"] ? 1 - traits.chilled.vars()[5] / 100 : 1.1;
              }
            }
            if (global.race["forager"]) {
              let forage = 1 + (global.tech["foraging"] ? 0.75 * global.tech["foraging"] : 0);
              let foragers = workerScale(global.civic.forager.workers, "forager");
              foragers *= racialTrait(foragers, "forager");
              if (global.race["servants"]) {
                let serve = global.race.servants.jobs.forager;
                serve *= servantTrait(global.race.servants.jobs.forager, "forager");
                foragers += serve;
              }
              let food_forage = foragers * forage * 0.35;
              breakdown.p["Food"][jobName("forager")] = food_forage + "v";
              food_base += food_forage;
            }
            if (global.race["warlord"]) {
              let food = workerScale(global.civic.lumberjack.workers, "farmer") * farmerValue(true);
              breakdown.p["Food"][jobName("lumberjack")] = food + "v";
              food_base += food;
            }
            if (global.city["farm"]) {
              let farmers = workerScale(global.civic.farmer.workers, "farmer");
              let farmhands = 0;
              if (farmers > jobScale(global.city.farm.count)) {
                farmhands = farmers - jobScale(global.city.farm.count);
                farmers = jobScale(global.city.farm.count);
              }
              let food = farmers * farmerValue(true) + farmhands * farmerValue(false);
              if (global.race["servants"]) {
                let servants = global.race.servants.jobs.farmer;
                let servehands = 0;
                let open = global.city.farm.count - farmers / (global.race["high_pop"] ? traits.high_pop.vars()[0] : 1);
                if (servants > open) {
                  servehands = servants - open;
                  servants = open;
                }
                food += servants * farmerValue(true, true) + servehands * farmerValue(false, true);
              }
              let mill_multiplier = 1;
              if (global.city["mill"]) {
                let mill_bonus = global.tech["agriculture"] >= 5 ? 0.05 : 0.03;
                let working = global.city["mill"].count - global.city["mill"].on;
                mill_multiplier += working * mill_bonus;
              }
              breakdown.p["Food"][jobName("farmer")] = food + "v";
              food_base += food * virgo * weather_multiplier * mill_multiplier * q_multiplier * production("psychic_boost", "Food");
              if (food > 0) {
                breakdown.p["Food"][`\u1102${loc("city_mill_title1")}`] = (mill_multiplier - 1) * 100 + "%";
                breakdown.p["Food"][`\u1102${loc("sign_virgo")}+0`] = (virgo - 1) * 100 + "%";
                breakdown.p["Food"][`\u1102${loc("morale_weather")}`] = (weather_multiplier - 1) * 100 + "%";
                breakdown.p["Food"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
              }
            }
          }
        }
        if (global.tauceti["tau_farm"] && p_on["tau_farm"]) {
          let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
          let food_base2 = production("tau_farm", "food") * p_on["tau_farm"] * production("psychic_boost", "Food");
          let delta2 = food_base2 * global_multiplier * colony_val;
          breakdown.p["Food"][loc("tau_home_tau_farm")] = food_base2 + "v";
          if (food_base2 > 0) {
            breakdown.p["Food"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
          }
          modRes("Food", delta2 * time_multiplier);
        }
        let hunting = 0;
        if (global.tech["military"]) {
          hunting = global.race["herbivore"] && !global.race["carnivore"] || global.race["artifical"] ? 0 : armyRating(garrisonSize(), "hunting") / 3;
          hunting *= production("psychic_boost", "Food");
        }
        let biodome = 0;
        let red_synd = syndicate("spc_red");
        if (global.tech["mars"]) {
          biodome = support_on["biodome"] * workerScale(global.civic.colonist.workers, "colonist") * production("biodome", "food") * production("psychic_boost", "Food");
          if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
            biodome += support_on["biodome"] * production("biodome", "cat_food") * production("psychic_boost", "Food");
          }
        }
        breakdown.p["Food"][actions.space.spc_red.biodome.title()] = biodome + "v";
        if (biodome > 0) {
          breakdown.p["Food"][`\u1102${loc("space_syndicate")}+0`] = -((1 - red_synd) * 100) + "%";
          breakdown.p["Food"][`\u1102${loc("space_red_ziggurat_title")}+0`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Food"][`\u1102${loc("sign_virgo")}+0`] = (virgo - 1) * 100 + "%";
        }
        let generated = food_base + hunting * q_multiplier + biodome * red_synd * zigVal * virgo;
        generated *= global_multiplier;
        let soldiers = global.civic.garrison.workers;
        if (global.race["parasite"] && !global.tech["isolation"]) {
          soldiers -= jobScale(traits.parasite.vars()[0]);
          if (soldiers < 0) {
            soldiers = 0;
          }
        }
        let consume = 0;
        let food_consume_mod = 1;
        if (global.race["gluttony"]) {
          food_consume_mod *= 1 + traits.gluttony.vars()[0] / 100;
        }
        if (global.race["high_metabolism"]) {
          food_consume_mod *= 1 + traits.high_metabolism.vars()[0] / 100;
        }
        if (global.race["sticky"]) {
          food_consume_mod *= 1 - traits.sticky.vars()[0] / 100;
        }
        let pingFathom = fathomCheck("pinguicula");
        if (pingFathom > 0) {
          food_consume_mod *= 1 - traits.sticky.vars(1)[0] / 100 * pingFathom;
        }
        if (global.race["photosynth"]) {
          switch (global.city.calendar.weather) {
            case 0:
              food_consume_mod *= global.city.calendar.temp === 0 ? 1 : 1 - traits.photosynth.vars()[2] / 100;
              break;
            case 1:
              food_consume_mod *= 1 - traits.photosynth.vars()[1] / 100;
              break;
            case 2:
              food_consume_mod *= 1 - traits.photosynth.vars()[0] / 100;
              break;
          }
        }
        if (global.race["ravenous"]) {
          food_consume_mod *= 1 + traits.ravenous.vars()[0] / 100;
        }
        if (global.race["hibernator"] && global.city.calendar.season === 3) {
          food_consume_mod *= 1 - traits.hibernator.vars()[0] / 100;
        }
        if (global.race["high_pop"]) {
          food_consume_mod /= traits.high_pop.vars()[0];
        }
        let banquet = 1;
        if (global.city.banquet) {
          if (global.city.banquet.on) {
            banquet *= (global.city.banquet.level >= 5 ? 1.02 : 1.022) ** global.city.banquet.strength;
          } else {
            global.city.banquet.strength = 0;
          }
        }
        let ravenous = 0;
        let tourism = 0;
        let spaceport = 0;
        let starport = 0;
        let starbase = 0;
        let space_station = 0;
        let space_marines = 0;
        let embassy = 0;
        let zoo = 0;
        let restaurant = 0;
        if (!global.race["fasting"]) {
          consume = (global.resource[global.race.species].amount + soldiers - (global.civic.unemployed.workers + workerScale(global.civic.hunter.workers, "hunter")) * 0.5) * food_consume_mod;
          if (global.race["forager"]) {
            consume -= workerScale(global.civic.forager.workers, "forager");
          }
          if (global.race["ravenous"]) {
            ravenous = global.resource.Food.amount / traits.ravenous.vars()[1];
          }
          breakdown.p.consume.Food[flib("name")] = -(consume + ravenous);
          if (global.city.banquet && global.city.banquet.on) {
            consume = Math.max(consume, 100);
          }
          if (consume * banquet + ravenous >= global.resource.Food.amount) {
            if (global.city.banquet && banquet > 1) {
              global.city.banquet.strength = 0;
            }
          } else {
            if (banquet > 1) {
              breakdown.p.consume.Food[`${loc("city_banquet")}`] = -(consume * (banquet - 1));
            }
            consume *= banquet;
          }
          if (global.city["tourist_center"]) {
            tourism = global.city["tourist_center"].on * 50;
            breakdown.p.consume.Food[loc("tech_tourism")] = -tourism;
          }
          if (global.space["spaceport"]) {
            spaceport = p_on["spaceport"] * (global.race["cataclysm"] || global.race["orbit_decayed"] ? 2 : 25);
            breakdown.p.consume.Food[loc("space_red_spaceport_title")] = -spaceport;
          }
          if (global.interstellar["starport"]) {
            starport = p_on["starport"] * 100;
            breakdown.p.consume.Food[loc("interstellar_alpha_starport_title")] = -starport;
          }
          if (global.galaxy["starbase"]) {
            starbase = p_on["s_gate"] * p_on["starbase"] * 250;
            breakdown.p.consume.Food[loc("galaxy_starbase")] = -starbase;
          }
          if (global.space["space_station"]) {
            space_station = p_on["space_station"] * (global.race["cataclysm"] ? 1 : 10);
            breakdown.p.consume.Food[loc("space_belt_station_title")] = -space_station;
          }
          if (global.space["space_barracks"] && !global.race["cataclysm"]) {
            space_marines = global.space.space_barracks.on * 10;
            breakdown.p.consume.Food[loc("tech_space_marines_bd")] = -space_marines;
          }
          if (global.galaxy["embassy"]) {
            embassy = p_on["s_gate"] * p_on["embassy"] * 7500;
            breakdown.p.consume.Food[loc("galaxy_embassy")] = -embassy;
          }
          if (global.interstellar["zoo"]) {
            zoo = int_on["zoo"] * 12e3;
            breakdown.p.consume.Food[loc("tech_zoo")] = -zoo;
          }
          if (global.eden["restaurant"]) {
            restaurant = p_on["restaurant"] * 25e4;
            breakdown.p.consume.Food[loc("eden_restaurant_bd")] = -restaurant;
          }
        }
        breakdown.p["Food"][loc("soldiers")] = hunting + "v";
        if (hunting > 0) {
          breakdown.p["Food"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
        }
        if (global.race["fasting"]) {
          breakdown.p["Food"][`${loc("evo_challenge_fasting")}`] = "-100%";
          generated *= 0;
        }
        let delta = generated - consume - ravenous - tourism - spaceport - starport - starbase - space_station - space_marines - embassy - zoo - restaurant;
        if (!modRes("Food", delta * time_multiplier) || global.race["fasting"]) {
          if (global.race["anthropophagite"] && global.resource[global.race.species].amount > 1 && !global.race["fasting"]) {
            global.resource[global.race.species].amount--;
            modRes("Food", 1e4 * traits.anthropophagite.vars()[0]);
            global.stats.murders++;
            blubberFill(1);
          } else {
            fed = false;
            if (global.resource[global.race.species].amount > 0) {
              let threshold = 1.25;
              let digestion = 0;
              let humpback = 0;
              let meditators = 0;
              let atrophy = 0;
              let infusion = 1;
              if (global.race["slow_digestion"]) {
                digestion += traits.slow_digestion.vars()[0];
              }
              let fathom = fathomCheck("slitheryn");
              if (fathom > 0) {
                digestion += traits.slow_digestion.vars(1)[0] * fathom;
              }
              if (global.race["humpback"]) {
                humpback = traits.humpback.vars()[0];
              }
              if (global.race["fasting"]) {
                meditators = highPopAdjust(global.civic.meditator.workers) * 0.03;
              }
              if (global.race["atrophy"]) {
                atrophy = traits.atrophy.vars()[0];
              }
              if (global.portal["dish_life_infuser"] && global.portal["dish_life_infuser"].on) {
                infusion = 0.95 ** global.portal["dish_life_infuser"].on;
              }
              threshold += digestion + humpback + meditators;
              threshold -= atrophy;
              threshold *= infusion;
              if (global.race["fasting"]) {
                let base = global.resource[global.race.species].amount / 100;
                breakdown.p.consume[global.race.species][global.resource[global.race.species].name] = -base.toFixed(2);
                breakdown.p.consume[global.race.species][loc("genelab_traits")] = (1 - food_consume_mod) * base.toFixed(2);
                breakdown.p.consume[global.race.species][loc("Threshold")] = threshold.toFixed(2);
                global.resource[global.race.species].delta = -(base * food_consume_mod - threshold) * time_multiplier;
              }
              if (Math.rand(0, 10) === 0) {
                if (global.race["fasting"]) {
                  let starved = global.resource[global.race.species].amount / 100 * food_consume_mod - threshold;
                  if (starved < 0) {
                    starved = 0;
                  }
                  if (starved % 1 > Math.random()) {
                    starved = Math.ceil(starved);
                  } else {
                    starved = Math.floor(starved);
                  }
                  if (starved > global.resource[global.race.species].amount) {
                    starved = global.resource[global.race.species].amount;
                  }
                  global.resource[global.race.species].amount -= starved;
                  global.stats.starved += starved;
                  blubberFill(starved);
                } else if (generated < consume / threshold) {
                  global["resource"][global.race.species].amount--;
                  global.stats.starved++;
                  blubberFill(1);
                }
              }
            }
          }
        }
        if (global.race["anthropophagite"] && global.resource[global.race.species].amount > 1 && Math.rand(0, 400) === 0) {
          global.resource[global.race.species].amount--;
          modRes("Food", 1e4 * traits.anthropophagite.vars()[0]);
          global.stats.murders++;
          blubberFill(1);
        }
      }
      if (global.portal["fortress"] && global.portal.fortress.walls < 100) {
        if (modRes("Stone", -(200 * time_multiplier))) {
          global.portal.fortress.repair += turboSpeed;
          breakdown.p.consume.Stone[loc("portal_fortress_name")] = -200 * turboSpeed;
        }
        const need = actions.portal.prtl_fortress.info.repair();
        if (global.portal.fortress.repair >= need) {
          const original = global.portal.fortress.walls;
          const addition = global.portal.fortress.repair / need;
          const fixedAddition = Math.floor(addition);
          global.portal.fortress.walls = Math.min(original + fixedAddition, 100);
          const diff = global.portal.fortress.walls - original;
          global.portal.fortress.repair -= diff * need;
        }
      }
      if (global.race["psychic"] && global.resource.Energy.display) {
        let energy_bd = {};
        let charge = traits.psychic.vars()[2];
        energy_bd[loc("trait_psychic_name")] = charge + "v";
        modRes(`Energy`, charge * time_multiplier);
        breakdown.p["Energy"] = energy_bd;
      }
      if (global.civic.homeless > 0) {
        let missing = Math.min(global.civic.homeless, global.resource[global.race.species].max - global.resource[global.race.species].amount);
        global.civic.homeless -= missing;
        global.resource[global.race.species].amount += missing;
        global.civic[global.civic.d_job].workers += missing;
      } else if ((fed && global["resource"]["Food"].amount > 0 || global.race["fasting"]) && global["resource"][global.race.species].max > global["resource"][global.race.species].amount) {
        if (global.race["artifical"] || global.race["spongy"] && global.city.calendar.weather === 0) {
        } else if (global.race["parasite"] && global.city.calendar.wind === 0 && !global.race["cataclysm"] && !global.race["orbit_decayed"]) {
        } else if (global.race["vax"] && global.race.vax >= 100) {
        } else {
          let lowerBound = global.tech["reproduction"] ? global.tech["reproduction"] : 0;
          let upperBound = global["resource"][global.race.species].amount;
          if (global.tech["reproduction"] && date2.getMonth() === 1 && date2.getDate() === 14) {
            lowerBound += 5;
          }
          if (global.race["fast_growth"]) {
            lowerBound *= traits.fast_growth.vars()[0];
            lowerBound += traits.fast_growth.vars()[1];
          }
          if (global.race["spores"] && global.city.calendar.wind === 1) {
            if (global.race["parasite"]) {
              lowerBound += traits.spores.vars()[2];
            } else {
              lowerBound += traits.spores.vars()[0];
              lowerBound *= traits.spores.vars()[1];
            }
          }
          if (global.tech["reproduction"] && global.tech.reproduction >= 2 && global.city["hospital"]) {
            lowerBound += global.city.hospital.count;
          }
          if (global.genes["birth"]) {
            lowerBound += global.genes["birth"];
          }
          if (global.race["promiscuous"]) {
            lowerBound += traits.promiscuous.vars()[0] * global.race["promiscuous"];
          }
          if (global.race["fasting"]) {
            lowerBound += highPopAdjust(global.civic.meditator.workers) * 0.15;
          }
          if (global.city.banquet && global.city.banquet.on && global.city.banquet.level >= 1) {
            lowerBound *= 1 + global.city.banquet.strength ** 0.75 / 100;
          }
          if (astroSign2 === "libra") {
            lowerBound *= 1 + astroVal2("libra")[0] / 100;
          }
          if (global.race["high_pop"]) {
            lowerBound *= traits.high_pop.vars()[2];
            upperBound /= jobScale(1);
          }
          if (global.city.biome === "taiga") {
            lowerBound *= biomes.taiga.vars()[1];
          }
          if (global.city.ptrait.includes("toxic")) {
            upperBound *= planetTraits.toxic.vars()[1];
          }
          if (global.race["parasite"] && (global.race["cataclysm"] || global.race["orbit_decayed"])) {
            lowerBound = Math.round(lowerBound / 5);
            upperBound *= 3;
          }
          upperBound *= 3 - 2 ** time_multiplier;
          for (let i2 = 0; i2 < time_multiplier; i2++) {
            if (Math.rand(0, upperBound) <= lowerBound) {
              global.resource[global.race.species].amount++;
              global.civic[global.civic.d_job].workers++;
            }
          }
        }
      }
      if (global.space["shipyard"] && global.space.shipyard["ships"]) {
        let fuels = {
          Oil: 0,
          Helium_3: 0,
          Uranium: 0,
          Elerium: 0
        };
        global.space.shipyard.ships.forEach(function(ship) {
          if (ship.location !== "spc_dwarf" || ship.transit !== 0) {
            let fuel = shipFuelUse(ship);
            if (fuel.res && fuel.burn > 0) {
              if (fuel.burn * time_multiplier < global.resource[fuel.res].amount + (global.resource[fuel.res].diff > 0 ? global.resource[fuel.res].diff * time_multiplier : 0)) {
                modRes(fuel.res, -(fuel.burn * time_multiplier));
                ship.fueled = true;
                fuels[fuel.res] += fuel.burn;
              } else {
                ship.fueled = false;
              }
            } else {
              ship.fueled = true;
            }
          }
        });
        breakdown.p.consume.Oil[loc("outer_shipyard_fleet")] = -fuels.Oil;
        breakdown.p.consume.Helium_3[loc("outer_shipyard_fleet")] = -fuels.Helium_3;
        breakdown.p.consume.Uranium[loc("outer_shipyard_fleet")] = -fuels.Uranium;
        breakdown.p.consume.Elerium[loc("outer_shipyard_fleet")] = -fuels.Elerium;
      }
      if (global.race["emfield"]) {
        if (global.race["discharge"] && global.race["discharge"] > 0) {
          global.race.discharge--;
        } else {
          global.race.emfield++;
          if (Math.rand(0, 500) === 0) {
            global.race["discharge"] = global.race.emfield;
            global.race.emfield = 1;
          }
        }
      }
      let hunger = fed ? 1 : 0.5;
      if (global.race["angry"] && fed === false) {
        hunger -= traits.angry.vars()[0] / 100;
      }
      if (global.race["malnutrition"] && fed === false) {
        hunger += traits.malnutrition.vars()[0] / 100;
      }
      if (global.portal["dish_soul_steeper"] && global.portal["dish_soul_steeper"].on) {
        hunger -= (0.03 + (global.race["malnutrition"] ? 0.01 : 0) + (global.race["angry"] ? -0.01 : 0)) * global.portal["dish_soul_steeper"].on;
      }
      hunger = Math.max(hunger, 0);
      if (global.resource.Furs.display) {
        if (global.race["evil"] || global.race["artifical"] || global.race["unfathomable"]) {
          let weapons = weaponTechModifer();
          let hunters = workerScale(global.civic.hunter.workers, "hunter");
          hunters *= racialTrait(hunters, "hunting");
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.hunter;
            serve *= servantTrait(global.race.servants.jobs.hunter, "hunting");
            hunters += serve;
          }
          if (global.city.biome === "oceanic") {
            hunters *= biomes.oceanic.vars()[2];
          } else if (global.city.biome === "tundra") {
            hunters *= biomes.tundra.vars()[0];
          }
          hunters *= weapons / 20;
          hunters *= production("psychic_boost", "Furs");
          breakdown.p["Furs"][jobName("hunter")] = hunters + "v";
          if (hunters > 0) {
            breakdown.p["Furs"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          modRes("Furs", hunters * hunger * global_multiplier * time_multiplier * q_multiplier);
          if (!global.race["soul_eater"] && global.race["evil"]) {
            let reclaimers = workerScale(global.civic.lumberjack.workers, "lumberjack");
            reclaimers *= racialTrait(reclaimers, "lumberjack");
            if (global.race["warlord"] && global.race["playful"]) {
              reclaimers *= 1 + traits.playful.vars()[0];
            }
            if (global.race["servants"]) {
              let serve = global.race.servants.jobs.lumberjack;
              serve *= servantTrait(global.race.servants.jobs.lumberjack, "lumberjack");
              reclaimers += serve;
            }
            reclaimers /= 4;
            reclaimers *= production("psychic_boost", "Furs");
            breakdown.p["Furs"][jobName("lumberjack")] = reclaimers + "v";
            if (reclaimers > 0) {
              breakdown.p["Furs"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes("Furs", reclaimers * hunger * global_multiplier * time_multiplier * q_multiplier);
          }
        }
        let hunting = armyRating(garrisonSize(), "hunting") / 10;
        if (global.city.biome === "oceanic") {
          hunting *= biomes.oceanic.vars()[2];
        } else if (global.city.biome === "tundra") {
          hunting *= biomes.tundra.vars()[0];
        }
        hunting *= production("psychic_boost", "Furs");
        breakdown.p["Furs"][loc("soldiers")] = hunting + "v";
        if (hunting > 0) {
          breakdown.p["Furs"][`\u1102${loc("quarantine")}+2`] = (q_multiplier - 1) * 100 + "%";
        }
        modRes("Furs", hunting * hunger * global_multiplier * q_multiplier * time_multiplier);
        if (global.race["forager"]) {
          let forage = 1 + (global.tech["foraging"] ? 0.5 * global.tech["foraging"] : 0);
          let foragers = workerScale(global.civic.forager.workers, "forager");
          foragers *= racialTrait(foragers, "forager");
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.forager;
            serve *= servantTrait(global.race.servants.jobs.forager, "forager");
            foragers += serve;
          }
          let forage_base = foragers * forage * 0.05 * production("psychic_boost", "Furs");
          breakdown.p["Furs"][jobName("forager")] = forage_base + "v";
          if (forage_base > 0) {
            breakdown.p["Furs"][`\u1102${loc("quarantine")}+3`] = (q_multiplier - 1) * 100 + "%";
          }
          modRes("Furs", forage_base * hunger * q_multiplier * time_multiplier);
        }
      }
      if (global.resource.Furs.display && global.tech["isolation"] && global.tauceti["womling_farm"]) {
        let base = global.tauceti.womling_farm.farmers * production("psychic_boost", "Furs");
        let delta = base * global_multiplier;
        breakdown.p["Furs"][loc("tau_red_womlings")] = base + "v";
        modRes("Furs", delta);
      }
      if (global.race["unfathomable"] && global.civic.hunter.display) {
        let weapons = weaponTechModifer();
        let hunters = workerScale(global.civic.hunter.workers, "hunter");
        hunters *= racialTrait(hunters, "hunting");
        if (global.race["servants"]) {
          let serve = jobScale(global.race.servants.jobs.hunter);
          serve *= servantTrait(global.race.servants.jobs.hunter, "hunting");
          hunters += highPopAdjust(serve);
        }
        hunters *= weapons / 20;
        let stealable = ["Lumber", "Chrysotile", "Stone", "Crystal", "Copper", "Iron", "Aluminium", "Cement", "Coal", "Oil", "Uranium", "Steel", "Titanium", "Alloy", "Polymer", "Iridium"];
        stealable.forEach(function(res) {
          if (global.resource[res].display) {
            let raid = hunters * production("psychic_boost", res) * tradeRatio[res] / 5;
            if (["Crystal", "Uranium"].includes(res)) {
              raid *= 0.2;
            } else if (["Alloy", "Polymer", "Iridium"].includes(res)) {
              raid *= 0.35;
            } else if (["Steel", "Cement"].includes(res)) {
              raid *= 0.85;
            } else if (["Titanium"].includes(res)) {
              raid *= 0.65;
            }
            breakdown.p[res][jobName("hunter")] = raid + "v";
            if (raid > 0) {
              breakdown.p[res][`\u1102${loc("quarantine")}+99`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes(res, raid * hunger * global_multiplier * time_multiplier * q_multiplier);
          }
        });
      }
      {
        let sundial_base = global.tech["primitive"] && global.tech["primitive"] >= 3 ? 1 : 0;
        if (global.race["ancient_ruins"]) {
          sundial_base++;
        }
        if (global.stats.achieve["extinct_junker"] && global.stats.achieve["extinct_junker"].l >= 1) {
          sundial_base++;
        }
        if (global.city.ptrait.includes("magnetic")) {
          sundial_base += planetTraits.magnetic.vars()[0];
        }
        if (global.race["ascended"]) {
          sundial_base += 2;
        }
        let professors_base = workerScale(global.civic.professor.workers, "professor");
        let prof_impact = global.race["studious"] ? global.civic.professor.impact + traits.studious.vars()[0] : global.civic.professor.impact;
        let fathom = fathomCheck("elven");
        if (fathom > 0) {
          prof_impact += traits.studious.vars(1)[0] * fathom;
        }
        professors_base *= prof_impact;
        professors_base *= global.race["pompous"] ? 1 - traits.pompous.vars()[0] / 100 : 1;
        professors_base *= racialTrait(workerScale(global.civic.professor.workers, "professor"), "science");
        if (global.tech["anthropology"] && global.tech["anthropology"] >= 3) {
          professors_base *= 1 + faithTempleCount() * 0.05;
        }
        if (global.civic.govern.type === "theocracy") {
          professors_base *= 1 - govEffect.theocracy()[1] / 100;
        }
        let scientist_base = workerScale(global.civic.scientist.workers, "scientist");
        scientist_base *= global.civic.scientist.impact;
        scientist_base *= racialTrait(workerScale(global.civic.scientist.workers, "scientist"), "science");
        if (global.tech["science"] >= 6 && global.city["wardenclyffe"]) {
          let professor = workerScale(global.civic.professor.workers, "professor");
          if (global.race["high_pop"]) {
            professor = highPopAdjust(professor);
          }
          scientist_base *= 1 + professor * p_on["wardenclyffe"] * 0.01;
        }
        if (global.space["satellite"]) {
          scientist_base *= 1 + global.space.satellite.count * 0.01;
        }
        if (global.civic.govern.type === "theocracy") {
          scientist_base *= 1 - govEffect.theocracy()[2] / 100;
        }
        let gene_consume = 0;
        if (global.arpa["sequence"] && global.arpa.sequence.on && global.arpa.sequence.time > 0 && sequenceLabs() > 0) {
          let gene_cost = 50 + global.race.mutation * 10;
          if (global.arpa.sequence.boost) {
            gene_cost *= 4;
          }
          if (gene_cost * time_multiplier <= global.resource.Knowledge.amount) {
            gene_consume = gene_cost;
            gene_sequence = true;
          } else {
            gene_sequence = false;
          }
        } else {
          if (global.arpa.hasOwnProperty("sequence") && global.arpa.sequence.time === null) {
            global.arpa.sequence.time = global.arpa.sequence.max;
          }
          gene_sequence = false;
        }
        let womling = global.tauceti.hasOwnProperty("womling_lab") ? global.tauceti.womling_lab.scientist * (global.tech["womling_gene"] ? 10 : 8) : 0;
        let delta = professors_base + scientist_base + womling;
        delta *= hunger * global_multiplier;
        delta += sundial_base * global_multiplier;
        breakdown.p["Knowledge"][jobName("professor")] = professors_base + "v";
        if (global.race.universe === "magic") {
          breakdown.p["Knowledge"][jobName("wizard")] = scientist_base + "v";
        } else {
          breakdown.p["Knowledge"][global.civic?.scientist?.name || jobName("scientist")] = scientist_base + "v";
        }
        breakdown.p["Knowledge"][loc("tau_red_womlings")] = womling + "v";
        breakdown.p["Knowledge"][loc("hunger")] = (hunger - 1) * 100 + "%";
        breakdown.p["Knowledge"][global.race["unfathomable"] ? loc("tech_moondial") : loc("tech_sundial")] = sundial_base + "v";
        if (global.race["inspired"]) {
          breakdown.p["Knowledge"][loc("event_inspiration_bd")] = "100%";
          delta *= 2;
        }
        if (global.city["library"] || global.race["warlord"]) {
          let lib_multiplier = 0.05;
          let muckVal = govActive("muckraker", 2);
          if (muckVal) {
            lib_multiplier -= muckVal / 100;
          }
          if (global.race["autoignition"]) {
            lib_multiplier -= traits.autoignition.vars()[0] / 100;
            if (lib_multiplier < 0) {
              lib_multiplier = 0;
            }
          }
          let lib_count = global.race["warlord"] ? (global.race?.absorbed?.length || 1) * 10 : global.city.library.count;
          let library_mult = 1 + lib_count * lib_multiplier;
          breakdown.p["Knowledge"][global.race["warlord"] ? loc("portal_throne_of_evil_title") : loc("city_library")] = (library_mult - 1) * 100 + "%";
          delta *= library_mult;
        }
        if (astroSign2 === "gemini") {
          let astro_mult = 1 + astroVal2("gemini")[0] / 100;
          breakdown.p["Knowledge"][loc(`sign_${astroSign2}`)] = (astro_mult - 1) * 100 + "%";
          delta *= astro_mult;
        }
        if (global.tech["isolation"] && support_on["infectious_disease_lab"]) {
          let lab_mult = 1 + support_on["infectious_disease_lab"] * 0.75;
          breakdown.p["Knowledge"][actions.tauceti.tau_home.infectious_disease_lab.title()] = (lab_mult - 1) * 100 + "%";
          delta *= lab_mult;
        }
        if (global.civic.govern.type === "technocracy") {
          breakdown.p["Knowledge"][loc("govern_technocracy")] = govEffect.technocracy()[2] + "%";
          delta *= 1 + govEffect.technocracy()[2] / 100;
        }
        if (gene_consume > 0) {
          delta -= gene_consume;
          breakdown.p.consume.Knowledge[loc("genome_bd")] = -gene_consume;
        }
        modRes("Knowledge", delta * time_multiplier);
        if (global.tech["tau_gas2"] && global.tech.tau_gas2 >= 6 && (!global.tech["alien_data"] || global.tech.alien_data < 6) && global.tauceti["alien_space_station"] && p_on["alien_space_station"]) {
          let focus = global.tauceti.alien_space_station.focus / 100 * delta;
          breakdown.p.consume.Knowledge[loc("tau_gas2_alien_station")] = -focus;
          modRes("Knowledge", -focus * time_multiplier);
          global.tauceti.alien_space_station.decrypted += +focus.toFixed(3);
          global.stats.know += +focus.toFixed(0);
          if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 1e6 : 25e7) && !global.tech["alien_data"]) {
            global.tech["alien_data"] = 1;
            messageQueue(loc("tau_gas2_alien_station_data1", [loc("tech_dist_womling")]), "success", false, ["progress"]);
            drawTech();
          } else if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 2e6 : 5e8) && global.tech["alien_data"] && global.tech.alien_data === 1) {
            global.tech.alien_data = 2;
            global.race.tau_food_item = Math.rand(0, 10);
            messageQueue(loc("tau_gas2_alien_station_data2", [loc(`tau_gas2_alien_station_data2_r${global.race.tau_food_item || 0}`)]), "success", false, ["progress"]);
            drawTech();
          } else if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 3e6 : 75e7) && global.tech["alien_data"] && global.tech.alien_data === 2) {
            global.tech.alien_data = 3;
            messageQueue(loc("tau_gas2_alien_station_data3"), "success", false, ["progress"]);
            drawTech();
          } else if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 48e5 : 12e8) && global.tech["alien_data"] && global.tech.alien_data === 3) {
            global.tech.alien_data = 4;
            global.race.tau_junk_item = Math.rand(0, 10);
            messageQueue(loc("tau_gas2_alien_station_data4", [loc(`tau_gas2_alien_station_data4_r${global.race.tau_junk_item || 0}`)]), "success", false, ["progress"]);
            drawTech();
          } else if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 6e6 : 15e8) && global.tech["alien_data"] && global.tech.alien_data === 4) {
            global.tech.alien_data = 5;
            messageQueue(loc("tau_gas2_alien_station_data5"), "success", false, ["progress"]);
            drawTech();
          } else if (global.tauceti.alien_space_station.decrypted >= (global.race["lone_survivor"] ? 1e7 : 25e8) && global.tech["alien_data"] && global.tech.alien_data === 5) {
            global.tech.alien_data = 6;
            global.tauceti.alien_space_station.decrypted = 25e8;
            if (global.race["lone_survivor"]) {
              global.settings.tau.star = true;
              global.tech["matrix"] = 2;
              global.tauceti["ringworld"] = { count: 0 };
              messageQueue(loc("tau_gas2_alien_station_data6_alt"), "success", false, ["progress"]);
            } else {
              messageQueue(loc("tau_gas2_alien_station_data6"), "success", false, ["progress"]);
            }
            drawTech();
          }
        }
      }
      if (global.resource.Omniscience.display) {
        if (support_on["research_station"]) {
          let ghost_base = workerScale(global.civic.ghost_trapper.workers, "ghost_trapper");
          ghost_base *= racialTrait(ghost_base, "science");
          ghost_base *= global.race["pompous"] ? 1 - traits.pompous.vars()[0] / 100 : 1;
          let corruptor = 1;
          if (global.race["warlord"] && global.eden["corruptor"]) {
            corruptor = 1 + (p_on["corruptor"] || 0) * 0.04;
          }
          let ghost_gain = support_on["research_station"] * ghost_base * 325e-7 * corruptor;
          breakdown.p["Omniscience"][loc("eden_research_station_title")] = ghost_gain + "v";
          if (corruptor > 1) {
            breakdown.p["Omniscience"][`\u1102${loc("eden_corruptor_title")}`] = (corruptor - 1) * 100 + "%";
          }
          let delta = ghost_gain;
          delta *= hunger * global_multiplier;
          modRes("Omniscience", delta * time_multiplier);
        }
        if (global.tech["science"] && global.tech.science >= 23) {
          let scientist = workerScale(global.civic.scientist.workers, "scientist");
          scientist *= racialTrait(scientist, "science");
          scientist *= global.race["pompous"] ? 1 - traits.pompous.vars()[0] / 100 : 1;
          let sci_gain = scientist * 707e-6;
          breakdown.p["Omniscience"][global.civic.scientist.name] = sci_gain + "v";
          let delta = sci_gain;
          delta *= hunger * global_multiplier;
          modRes("Omniscience", delta * time_multiplier);
        }
      }
      let FactoryMoney = 0;
      if (global.city["factory"]) {
        let on_factories = (p_on["factory"] || 0) + (p_on["red_factory"] || 0) + (p_on["int_factory"] || 0) * 2 + (p_on["hell_factory"] || 0) * actions.portal.prtl_wasteland.hell_factory.lines() + (support_on["tau_factory"] || 0) * (global.tech["isolation"] ? 5 : 3);
        let max_factories = global.city["factory"].on + (global.space["red_factory"] ? global.space["red_factory"].on : 0) + (global.interstellar["int_factory"] ? global.interstellar["int_factory"].on * 2 : 0) + (global.portal["hell_factory"] ? global.portal["hell_factory"].on * actions.portal.prtl_wasteland.hell_factory.lines() : 0) + (global.tauceti["tau_factory"] ? global.tauceti["tau_factory"].on * (global.tech["isolation"] ? 5 : 3) : 0);
        let eff = max_factories > 0 ? on_factories / max_factories : 0;
        let remaining = max_factories;
        ["Lux", "Furs", "Alloy", "Polymer", "Nano", "Stanene"].forEach(function(res) {
          remaining -= global.city.factory[res];
          if (remaining < 0) {
            global.city.factory[res] += remaining;
            remaining = 0;
          }
        });
        let assembly = global.tech["factory"] || 0;
        let tauBonus = global.tech["isolation"] ? 1 + (support_on["colony"] || 0) * 0.5 : 1;
        if (global.city.factory["Lux"] && global.city.factory["Lux"] > 0) {
          let fur_cost = global.city.factory.Lux * f_rate.Lux.fur[assembly] * eff;
          let workDone = global.city.factory.Lux;
          while (fur_cost * time_multiplier > global.resource.Furs.amount && fur_cost > 0) {
            fur_cost -= f_rate.Lux.fur[assembly] * eff;
            workDone--;
          }
          breakdown.p.consume.Furs[loc("city_factory")] = -fur_cost;
          modRes("Furs", -(fur_cost * time_multiplier));
          let demand = highPopAdjust(global.resource[global.race.species].amount) * f_rate.Lux.demand[assembly] * eff;
          demand = luxGoodPrice(demand);
          let delta = workDone * demand;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          FactoryMoney = delta;
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
          }
          modRes("Money", delta * hunger * global_multiplier * time_multiplier);
        }
        if (global.city.factory["Furs"] && global.city.factory["Furs"] > 0) {
          let moneyIncrement = f_rate.Furs.money[assembly] * eff;
          let polymerIncrement = f_rate.Furs.polymer[assembly] * eff;
          let money_cost = global.city.factory.Furs * moneyIncrement;
          let polymer_cost = global.city.factory.Furs * polymerIncrement;
          let workDone = global.city.factory.Furs;
          while (polymer_cost * time_multiplier > global.resource.Polymer.amount && polymer_cost > 0) {
            polymer_cost -= polymerIncrement;
            money_cost -= moneyIncrement;
            workDone--;
          }
          while (money_cost * time_multiplier > global.resource.Money.amount && money_cost > 0) {
            polymer_cost -= polymerIncrement;
            money_cost -= moneyIncrement;
            workDone--;
          }
          breakdown.p.consume.Money[loc("city_factory")] = -money_cost;
          breakdown.p.consume.Polymer[loc("city_factory")] = -polymer_cost;
          modRes("Money", -(money_cost * time_multiplier));
          modRes("Polymer", -(polymer_cost * time_multiplier));
          let factory_output = workDone * f_rate.Furs.output[assembly] * eff * production("psychic_boost", "Furs");
          factory_output = factoryBonus(factory_output);
          let delta = factory_output * tauBonus;
          delta *= hunger * global_multiplier;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          breakdown.p["Furs"][loc("city_factory")] = factory_output + "v";
          if (delta > 0) {
            if (tauBonus > 0) {
              breakdown.p["Furs"][`\u1102${loc("tau_home_colony")}`] = (tauBonus - 1) * 100 + "%";
            }
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              delta *= 0.5;
              breakdown.p["Furs"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            if (global.tech["q_factory"]) {
              let q_bonus = (quantum_level - 1) / 8 + 1;
              delta *= q_bonus;
              breakdown.p["Furs"][`\u1102${loc("quantum")}`] = (q_bonus - 1) * 100 + "%";
            }
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Furs"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
          modRes("Furs", delta * time_multiplier);
        }
        if (global.city.factory["Alloy"] && global.city.factory["Alloy"] > 0) {
          let copper_cost = global.city.factory.Alloy * f_rate.Alloy.copper[assembly] * eff;
          let aluminium_cost = global.city.factory.Alloy * f_rate.Alloy.aluminium[assembly] * eff;
          let workDone = global.city.factory.Alloy;
          while (copper_cost * time_multiplier > global.resource.Copper.amount && copper_cost > 0) {
            copper_cost -= f_rate.Alloy.copper[assembly] * eff;
            aluminium_cost -= f_rate.Alloy.aluminium[assembly] * eff;
            workDone--;
          }
          while (aluminium_cost * time_multiplier > global.resource.Aluminium.amount && aluminium_cost > 0) {
            copper_cost -= f_rate.Alloy.copper[assembly] * eff;
            aluminium_cost -= f_rate.Alloy.aluminium[assembly] * eff;
            workDone--;
          }
          breakdown.p.consume.Copper[loc("city_factory")] = -copper_cost;
          breakdown.p.consume.Aluminium[loc("city_factory")] = -aluminium_cost;
          modRes("Copper", -(copper_cost * time_multiplier));
          modRes("Aluminium", -(aluminium_cost * time_multiplier));
          let factory_output = workDone * f_rate.Alloy.output[assembly] * eff * production("psychic_boost", "Alloy");
          factory_output = factoryBonus(factory_output);
          if (global.tech["alloy"]) {
            factory_output *= 1.37;
          }
          if (global.race["metallurgist"]) {
            factory_output *= 1 + traits.metallurgist.vars()[0] * global.race["metallurgist"] / 100;
          }
          let delta = factory_output * tauBonus;
          delta *= hunger * global_multiplier;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          breakdown.p["Alloy"][loc("city_factory")] = factory_output + "v";
          if (delta > 0) {
            if (tauBonus > 0) {
              breakdown.p["Alloy"][`\u1102${loc("tau_home_colony")}`] = (tauBonus - 1) * 100 + "%";
            }
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              delta *= 0.5;
              breakdown.p["Alloy"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            if (global.tech["q_factory"]) {
              let q_bonus = (quantum_level - 1) / 2 + 1;
              delta *= q_bonus;
              breakdown.p["Alloy"][`\u1102${loc("quantum")}`] = (q_bonus - 1) * 100 + "%";
            }
            breakdown.p["Alloy"][loc("hunger")] = (hunger - 1) * 100 + "%";
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Alloy"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
          modRes("Alloy", delta * time_multiplier);
        } else {
          breakdown.p["Alloy"] = 0;
        }
        if (global.city.factory["Polymer"] && global.city.factory["Polymer"] > 0) {
          let oilIncrement = global.race["kindling_kindred"] || global.race["smoldering"] ? f_rate.Polymer.oil_kk[assembly] * eff : f_rate.Polymer.oil[assembly] * eff;
          let lumberIncrement = global.race["kindling_kindred"] || global.race["smoldering"] ? 0 : f_rate.Polymer.lumber[assembly] * eff;
          let oil_cost = global.city.factory.Polymer * oilIncrement;
          let lumber_cost = global.city.factory.Polymer * lumberIncrement;
          let workDone = global.city.factory.Polymer;
          while (lumber_cost * time_multiplier > global.resource.Lumber.amount && lumber_cost > 0) {
            lumber_cost -= lumberIncrement;
            oil_cost -= oilIncrement;
            workDone--;
          }
          while (oil_cost * time_multiplier > global.resource.Oil.amount && oil_cost > 0) {
            lumber_cost -= lumberIncrement;
            oil_cost -= oilIncrement;
            workDone--;
          }
          breakdown.p.consume.Lumber[loc("city_factory")] = -lumber_cost;
          breakdown.p.consume.Oil[loc("city_factory")] = -oil_cost;
          modRes("Lumber", -(lumber_cost * time_multiplier));
          modRes("Oil", -(oil_cost * time_multiplier));
          let factory_output = workDone * f_rate.Polymer.output[assembly] * eff * production("psychic_boost", "Polymer");
          factory_output = factoryBonus(factory_output);
          if (global.tech["polymer"] >= 2) {
            factory_output *= 1.42;
          }
          let delta = factory_output * tauBonus;
          delta *= hunger * global_multiplier;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          breakdown.p["Polymer"][loc("city_factory")] = factory_output + "v";
          if (delta > 0) {
            if (tauBonus > 0) {
              breakdown.p["Polymer"][`\u1102${loc("tau_home_colony")}`] = (tauBonus - 1) * 100 + "%";
            }
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              delta *= 0.5;
              breakdown.p["Polymer"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            if (global.tech["q_factory"]) {
              let q_bonus = (quantum_level - 1) / 2 + 1;
              delta *= q_bonus;
              breakdown.p["Polymer"][`\u1102${loc("quantum")}`] = (q_bonus - 1) * 100 + "%";
            }
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Polymer"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
          modRes("Polymer", delta * time_multiplier);
        }
        if (p_on["s_gate"] && global.galaxy["raider"] && gal_on["raider"] > 0) {
          let base = gal_on["raider"] * 2.3 * production("psychic_boost", "Polymer");
          let pirate = piracy("gxy_chthonian");
          let delta = base * global_multiplier * pirate * hunger * zigVal;
          breakdown.p["Polymer"][loc("galaxy_raider")] = base + "v";
          if (base > 0) {
            breakdown.p["Polymer"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
            breakdown.p["Polymer"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          }
          modRes("Polymer", delta * time_multiplier);
        }
        breakdown.p["Polymer"][loc("hunger")] = (hunger - 1) * 100 + "%";
        if (global.city.factory["Nano"] && global.city.factory["Nano"] > 0) {
          let coalIncrement = f_rate.Nano_Tube.coal[assembly] * eff;
          let neutroniumIncrement = f_rate.Nano_Tube.neutronium[assembly] * eff;
          let coal_cost = global.city.factory.Nano * coalIncrement;
          let neutronium_cost = global.city.factory.Nano * neutroniumIncrement;
          let workDone = global.city.factory.Nano;
          while (neutronium_cost * time_multiplier > global.resource.Neutronium.amount && neutronium_cost > 0) {
            neutronium_cost -= neutroniumIncrement;
            coal_cost -= coalIncrement;
            workDone--;
          }
          while (coal_cost * time_multiplier > global.resource.Coal.amount && coal_cost > 0) {
            neutronium_cost -= neutroniumIncrement;
            coal_cost -= coalIncrement;
            workDone--;
          }
          breakdown.p.consume.Coal[loc("city_factory")] = -coal_cost;
          breakdown.p.consume.Neutronium[loc("city_factory")] = -neutronium_cost;
          modRes("Neutronium", -(neutronium_cost * time_multiplier));
          modRes("Coal", -(coal_cost * time_multiplier));
          let factory_output = workDone * f_rate.Nano_Tube.output[assembly] * eff * production("psychic_boost", "Nano_Tube");
          factory_output = factoryBonus(factory_output);
          let delta = factory_output * tauBonus;
          delta *= hunger * global_multiplier;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          breakdown.p["Nano_Tube"][loc("city_factory")] = factory_output + "v";
          if (delta > 0) {
            if (tauBonus > 0) {
              breakdown.p["Nano_Tube"][`\u1102${loc("tau_home_colony")}`] = (tauBonus - 1) * 100 + "%";
            }
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              delta *= 0.5;
              breakdown.p["Nano_Tube"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            if (global.tech["q_factory"]) {
              let q_bonus = (quantum_level - 1) / 2 + 1;
              delta *= q_bonus;
              breakdown.p["Nano_Tube"][`\u1102${loc("quantum")}`] = (q_bonus - 1) * 100 + "%";
            }
            breakdown.p["Nano_Tube"][loc("hunger")] = (hunger - 1) * 100 + "%";
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Nano_Tube"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
          modRes("Nano_Tube", delta * time_multiplier);
        } else {
          breakdown.p["Nano_Tube"] = 0;
        }
        if (global.city.factory["Stanene"] && global.city.factory["Stanene"] > 0) {
          let alumIncrement = f_rate.Stanene.aluminium[assembly] * eff;
          let nanoIncrement = f_rate.Stanene.nano[assembly] * eff;
          let alum_cost = global.city.factory.Stanene * alumIncrement;
          let nano_cost = global.city.factory.Stanene * nanoIncrement;
          let workDone = global.city.factory.Stanene;
          while (alum_cost * time_multiplier > global.resource.Aluminium.amount && alum_cost > 0) {
            nano_cost -= nanoIncrement;
            alum_cost -= alumIncrement;
            workDone--;
          }
          while (nano_cost * time_multiplier > global.resource.Nano_Tube.amount && nano_cost > 0) {
            nano_cost -= nanoIncrement;
            alum_cost -= alumIncrement;
            workDone--;
          }
          breakdown.p.consume.Aluminium[loc("city_factory")] = breakdown.p.consume.Aluminium[loc("city_factory")] ? breakdown.p.consume.Aluminium[loc("city_factory")] - alum_cost : -alum_cost;
          breakdown.p.consume.Nano_Tube[loc("city_factory")] = -nano_cost;
          modRes("Aluminium", -(alum_cost * time_multiplier));
          modRes("Nano_Tube", -(nano_cost * time_multiplier));
          let factory_output = workDone * f_rate.Stanene.output[assembly] * eff * production("psychic_boost", "Stanene");
          factory_output = factoryBonus(factory_output);
          let delta = factory_output * tauBonus;
          delta *= hunger * global_multiplier;
          if (global.race["gravity_well"]) {
            delta = teamster(delta);
          }
          breakdown.p["Stanene"][loc("city_factory")] = factory_output + "v";
          if (delta > 0) {
            if (tauBonus > 0) {
              breakdown.p["Stanene"][`\u1102${loc("tau_home_colony")}`] = (tauBonus - 1) * 100 + "%";
            }
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              delta *= 0.5;
              breakdown.p["Stanene"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            if (global.tech["q_factory"]) {
              let q_bonus = (quantum_level - 1) / 2 + 1;
              delta *= q_bonus;
              breakdown.p["Stanene"][`\u1102${loc("quantum")}`] = (q_bonus - 1) * 100 + "%";
            }
            breakdown.p["Stanene"][loc("hunger")] = (hunger - 1) * 100 + "%";
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Stanene"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
          modRes("Stanene", delta * time_multiplier);
        } else {
          breakdown.p["Stanene"] = 0;
        }
      }
      if (global.resource.Furs.display) {
        breakdown.p["Furs"][loc("hunger")] = (hunger - 1) * 100 + "%";
      }
      if (global.resource.Cement.display) {
        let unit_price = global.race["high_pop"] ? 3 / traits.high_pop.vars()[0] : 3;
        if (global.city.biome === "ashland") {
          unit_price *= biomes.ashland.vars()[1];
        }
        let stone_cost = workerScale(global.civic.cement_worker.workers, "cement_worker") * unit_price;
        let workDone = workerScale(global.civic.cement_worker.workers, "cement_worker");
        while (stone_cost * time_multiplier > global.resource.Stone.amount && stone_cost > 0) {
          stone_cost -= unit_price;
          workDone--;
        }
        let tauBonus = global.tech["isolation"] ? 1 + (support_on["colony"] || 0) * 0.5 : 1;
        breakdown.p.consume.Stone[loc(global.tech["isolation"] ? "job_cement_worker_bd" : "city_cement_plant_bd")] = -stone_cost;
        modRes("Stone", -(stone_cost * time_multiplier));
        let cement_base = global.tech["cement"] >= 4 ? global.tech.cement >= 7 ? 1.45 : 1.2 : 1;
        cement_base *= global.civic.cement_worker.impact;
        cement_base *= racialTrait(workerScale(global.civic.cement_worker.workers, "cement_worker"), "factory");
        if (global.city.biome === "ashland") {
          cement_base *= biomes.ashland.vars()[1];
        }
        if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 3) {
          cement_base *= 1.1;
        }
        let factory_output = workDone * cement_base * production("psychic_boost", "Cement");
        if (global.civic.govern.type === "corpocracy") {
          factory_output *= 1 + govEffect.corpocracy()[4] / 100;
        }
        if (global.civic.govern.type === "socialist") {
          factory_output *= 1 + govEffect.socialist()[1] / 100;
        }
        let dirtVal = govActive("dirty_jobs", 2);
        if (dirtVal) {
          factory_output *= 1 + dirtVal / 100;
        }
        let powered_mult = 1;
        let power_single = 1;
        if (global.city.powered && p_on["cement_plant"]) {
          let rate = global.tech["cement"] >= 6 ? 0.08 : 0.05;
          powered_mult += p_on["cement_plant"] * rate;
          power_single += rate;
        }
        let ai_core = 1;
        if (global.tech["ai_core"] && p_on["citadel"] > 0) {
          let ai = +(quantum_level / 1.75).toFixed(1) / 100;
          ai_core += p_on["citadel"] * ai;
        }
        let hell_factory = 1;
        if (global.race["warlord"] && global.portal["hell_factory"] && p_on["hell_factory"] > 0) {
          hell_factory += p_on["hell_factory"] * 8 * (global.portal.hell_factory.rank - 1) / 100;
        }
        let mining_pit = global.tech["isolation"] ? 1 + support_on["mining_pit"] * 0.08 : 1;
        let cq_multiplier = global.tech["isolation"] ? 1 : q_multiplier;
        breakdown.p["Cement"][loc(global.tech["isolation"] ? "job_cement_worker_bd" : "city_cement_plant_bd")] = factory_output + "v";
        if (factory_output > 0) {
          if (global.tech["isolation"]) {
            breakdown.p["Cement"][`\u1102${loc("tau_home_colony")}+0`] = (tauBonus - 1) * 100 + "%";
            breakdown.p["Cement"][`\u1102${loc("tau_home_mining_pit")}+0`] = (mining_pit - 1) * 100 + "%";
          }
          breakdown.p["Cement"][`\u1102${loc("power")}+0`] = (powered_mult - 1) * 100 + "%";
          breakdown.p["Cement"][`\u1102${loc("quarantine")}+0`] = (cq_multiplier - 1) * 100 + "%";
        }
        if (hell_factory > 1) {
          breakdown.p["Cement"][`\u1102${loc("portal_factory_title")}+0`] = (hell_factory - 1) * 100 + "%";
        }
        if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["cement_plant"] > 0) {
          powered_mult = (powered_mult - 1) * 0.5 + 1;
          power_single = (power_single - 1) * 0.5 + 1;
          breakdown.p["Cement"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
        }
        let delta = factory_output * ai_core * tauBonus * mining_pit * hell_factory;
        if (global.city["cement_plant"]) {
          global.city.cement_plant["cnvay"] = +(delta * hunger * cq_multiplier * global_multiplier * (power_single - 1)).toFixed(5);
        }
        delta *= powered_mult * hunger * cq_multiplier * global_multiplier;
        if (global.tech["ai_core"] && p_on["citadel"] > 0) {
          breakdown.p["Cement"][loc("interstellar_citadel_effect_bd")] = (ai_core - 1) * 100 + "%";
        }
        breakdown.p["Cement"][loc("hunger")] = (hunger - 1) * 100 + "%";
        modRes("Cement", delta * time_multiplier);
      }
      let shrineMetal = getShrineBonus("metal");
      let iron_smelter = 0;
      let star_forge = 0;
      let iridium_smelter = 0;
      if (smelterUnlocked()) {
        let capacity = global.city.smelter.count;
        if (p_on["stellar_forge"]) {
          star_forge = p_on["stellar_forge"] * actions.interstellar.int_neutron.stellar_forge.smelting();
          global.city.smelter.Star = Math.max(global.city.smelter.Star, star_forge);
          capacity += star_forge;
        }
        if (p_on["hell_forge"]) {
          capacity += p_on["hell_forge"] * actions.portal.prtl_ruins.hell_forge.smelting();
        }
        if (p_on["demon_forge"]) {
          capacity += p_on["demon_forge"] * actions.portal.prtl_wasteland.demon_forge.smelting();
        }
        if (p_on["sacred_smelter"]) {
          capacity += p_on["sacred_smelter"] * actions.eden.eden_elysium.sacred_smelter.smelting();
        }
        if (p_on["ore_refinery"]) {
          capacity += p_on["ore_refinery"] * actions.tauceti.tau_gas.ore_refinery.smelting();
        }
        if (global.space["hell_smelter"]) {
          capacity += global.space.hell_smelter.count * actions.space.spc_hell.hell_smelter.smelting();
        }
        if (p_on["geothermal"]) {
          capacity += p_on["geothermal"] * actions.space.spc_hell.geothermal.smelting();
        }
        global.city.smelter.cap = capacity;
        global.city.smelter.StarCap = star_forge;
        if (global.race["forge"]) {
          global.city.smelter.Wood = 0;
          global.city.smelter.Coal = 0;
          global.city.smelter.Oil = Math.max(0, global.city.smelter.cap - global.city.smelter.Star - global.city.smelter.Inferno);
        }
        if ((global.race["kindling_kindred"] || global.race["smoldering"]) && !global.race["evil"]) {
          if (global.city.smelter.Wood !== 0) {
            global.city.smelter.Coal += global.city.smelter.Wood;
            global.city.smelter.Wood = 0;
          }
        }
        let total_fuel = 0;
        ["Wood", "Coal", "Oil", "Star", "Inferno"].forEach(function(fuel) {
          if (total_fuel + global.city.smelter[fuel] > global.city.smelter.cap) {
            global.city.smelter[fuel] = global.city.smelter.cap - total_fuel;
          }
          total_fuel += global.city.smelter[fuel];
        });
        if (global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium > total_fuel) {
          let overflow = global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium - total_fuel;
          global.city.smelter.Iron -= overflow;
          if (global.city.smelter.Iron < 0) {
            overflow = global.city.smelter.Iron;
            global.city.smelter.Iron = 0;
            global.city.smelter.Iridium += overflow;
            if (global.city.smelter.Iridium < 0) {
              overflow = global.city.smelter.Iridium;
              global.city.smelter.Iridium = 0;
            } else {
              overflow = 0;
            }
            global.city.smelter.Steel += overflow;
            if (global.city.smelter.Steel < 0) {
              global.city.smelter.Steel = 0;
            }
          }
        } else if (global.city.smelter.Iron + global.city.smelter.Steel + global.city.smelter.Iridium < total_fuel) {
          let irid_smelt = global.tech["irid_smelting"] || global.tech["m_smelting"] && global.tech.m_smelting >= 2 ? true : false;
          if (!(global.resource.Iridium.display && irid_smelt) && !(global.resource.Steel.display && global.tech.smelting >= 2 && !global.race["steelen"])) {
            global.city.smelter.Iron++;
          }
        }
        if (global.city.smelter.Star > global.city.smelter.StarCap) {
          let overflow = global.city.smelter.Star - global.city.smelter.StarCap;
          global.city.smelter.Star = global.city.smelter.StarCap;
          global.city.smelter.Oil += overflow;
        }
        let fuel_config = smelterFuelConfig();
        let consume_wood = global.city.smelter.Wood * fuel_config.l_cost;
        let consume_coal = global.city.smelter.Coal * fuel_config.c_cost;
        let consume_oil = global.city.smelter.Oil * fuel_config.o_cost;
        iron_smelter = global.city.smelter.Iron;
        let steel_smelter = global.city.smelter.Steel;
        iridium_smelter = global.city.smelter.Iridium;
        let oil_bonus = global.city.smelter.Oil;
        let inferno_bonus = global.city.smelter.Inferno;
        if (global.race["steelen"]) {
          iron_smelter += steel_smelter;
          steel_smelter = 0;
        }
        let disable_smelters = Math.max(0, iron_smelter + steel_smelter + iridium_smelter - total_fuel);
        if (consume_wood > 0) {
          let max_operable = Math.max(0, Math.floor(global.resource[fuel_config.l_type].amount / (fuel_config.l_cost * time_multiplier)));
          if (max_operable < global.city.smelter.Wood) {
            disable_smelters += global.city.smelter.Wood - max_operable;
            consume_wood = max_operable * fuel_config.l_cost;
          }
        }
        if (consume_coal > 0) {
          let max_operable = Math.max(0, Math.floor(global.resource.Coal.amount / (fuel_config.c_cost * time_multiplier)));
          if (max_operable < global.city.smelter.Coal) {
            disable_smelters += global.city.smelter.Coal - max_operable;
            consume_coal = max_operable * fuel_config.c_cost;
          }
        }
        if (consume_oil > 0) {
          let max_operable = Math.max(0, Math.floor(global.resource.Oil.amount / (fuel_config.o_cost * time_multiplier)));
          if (max_operable < oil_bonus) {
            disable_smelters += oil_bonus - max_operable;
            consume_oil = max_operable * fuel_config.o_cost;
            oil_bonus = max_operable;
          }
        }
        if (inferno_bonus > 0) {
          let inferno_rate = {
            Oil: 35,
            Coal: 50,
            Infernite: 0.5
          };
          let max_operable_oil = Math.floor((global.resource.Oil.amount - consume_oil) / (inferno_rate.Oil * time_multiplier));
          let max_operable_coal = Math.floor((global.resource.Coal.amount - consume_coal) / (inferno_rate.Coal * time_multiplier));
          let max_operable_infernite = Math.floor(global.resource.Infernite.amount / (inferno_rate.Infernite * time_multiplier));
          let max_operable = Math.max(0, Math.min(max_operable_oil, max_operable_coal, max_operable_infernite));
          if (max_operable < inferno_bonus) {
            disable_smelters += inferno_bonus - max_operable;
            inferno_bonus = max_operable;
          }
          consume_oil += inferno_rate.Oil * inferno_bonus;
          consume_coal += inferno_rate.Coal * inferno_bonus;
          let consume_infernite = inferno_rate.Infernite * inferno_bonus;
          breakdown.p.consume.Infernite[loc("city_smelter")] = -consume_infernite;
          modRes("Infernite", -(consume_infernite * time_multiplier));
        }
        if (disable_smelters > 0) {
          let disable_steel = Math.min(disable_smelters, steel_smelter);
          steel_smelter -= disable_steel;
          disable_smelters -= disable_steel;
          let disable_iron = Math.min(disable_smelters, iron_smelter);
          iron_smelter -= disable_iron;
          disable_smelters -= disable_iron;
          let disable_iridium = Math.min(disable_smelters, iridium_smelter);
          iridium_smelter -= disable_iridium;
          disable_smelters -= disable_iridium;
        }
        iron_smelter *= global.tech["smelting"] >= 3 ? 1.2 : 1;
        iridium_smelter *= 0.05;
        let dirtVal = govActive("dirty_jobs", 2);
        if (dirtVal) {
          iron_smelter *= 1 + dirtVal / 100;
          iridium_smelter *= 1 + dirtVal / 100;
        }
        if (global.tech["smelting"] >= 7) {
          iron_smelter *= 1.25;
          iridium_smelter *= 1.25;
        }
        if (oil_bonus > 0) {
          iron_smelter *= 1 + oil_bonus / 200;
          iridium_smelter *= 1 + oil_bonus / 200;
        }
        if (inferno_bonus > 0) {
          iron_smelter *= 1 + inferno_bonus / 125;
          iridium_smelter *= 1 + inferno_bonus / 125;
        }
        if (star_forge > 0) {
          iron_smelter *= 1 + star_forge / 500;
          iridium_smelter *= 1 + star_forge / 75;
        }
        if (global.race["pyrophobia"]) {
          iron_smelter *= 1 - traits.pyrophobia.vars()[0] / 100;
          iridium_smelter *= 1 - traits.pyrophobia.vars()[0] / 100;
        }
        if (global.race["elemental"] && traits.elemental.vars()[0] === "fire") {
          iron_smelter *= 1 + highPopAdjust(traits.elemental.vars()[3] * global.resource[global.race.species].amount / 100);
          iridium_smelter *= 1 + highPopAdjust(traits.elemental.vars()[3] * global.resource[global.race.species].amount / 100);
        }
        let salFathom = fathomCheck("salamander");
        if (salFathom > 0) {
          iron_smelter *= 1 + 0.2 * salFathom;
          iridium_smelter *= 1 + 0.2 * salFathom;
        }
        breakdown.p.consume[fuel_config.l_type][loc("city_smelter")] = -consume_wood;
        breakdown.p.consume.Coal[loc("city_smelter")] = -consume_coal;
        breakdown.p.consume.Oil[loc("city_smelter")] = -consume_oil;
        modRes(fuel_config.l_type, -(consume_wood * time_multiplier));
        modRes("Coal", -(consume_coal * time_multiplier));
        modRes("Oil", -(consume_oil * time_multiplier));
        if (consume_coal > 0 && global.tech["uranium"] && global.tech["uranium"] >= 3) {
          let ash = consume_coal / 65;
          if (global.city.geology["Uranium"]) {
            ash *= global.city.geology["Uranium"] + 1;
          }
          ash *= production("psychic_boost", "Uranium");
          modRes("Uranium", ash * time_multiplier);
          breakdown.p.consume["Uranium"][loc("city_coal_ash")] = (breakdown.p.consume["Uranium"][loc("city_coal_ash")] ?? 0) + ash;
        }
        if (global.resource.Steel.display) {
          let iron_consume = steel_smelter * 2;
          let coal_consume = steel_smelter * 0.25;
          while (iron_consume * time_multiplier > global.resource.Iron.amount && iron_consume > 0 || coal_consume * time_multiplier > global.resource.Coal.amount && coal_consume > 0) {
            iron_consume -= 2;
            coal_consume -= 0.25;
            steel_smelter--;
          }
          breakdown.p.consume.Coal[loc("city_smelter")] -= coal_consume;
          breakdown.p.consume.Iron[loc("city_smelter")] = -iron_consume;
          modRes("Iron", -(iron_consume * time_multiplier));
          modRes("Coal", -(coal_consume * time_multiplier));
          let steel_base = 1;
          if (global.stats.achieve["steelen"] && global.stats.achieve["steelen"].l >= 1) {
            let steelen_bonus = global.stats.achieve["steelen"].l * 2 / 100;
            steel_base *= 1 + steelen_bonus;
          }
          if (global.stats.achieve["lamentis"] && global.stats.achieve.lamentis.l >= 2) {
            steel_base *= 1.1;
          }
          for (i = 4; i <= 6; i++) {
            if (global.tech["smelting"] >= i) {
              steel_base *= 1.2;
            }
          }
          if (global.tech["smelting"] >= 7) {
            steel_base *= 1.25;
          }
          if (oil_bonus > 0) {
            steel_smelter *= 1 + oil_bonus / 200;
          }
          if (inferno_bonus > 0) {
            steel_smelter *= 1 + inferno_bonus / 125;
          }
          if (star_forge) {
            steel_smelter *= 1 + star_forge / 500;
          }
          if (dirtVal) {
            steel_smelter *= 1 + dirtVal / 100;
          }
          if (global.race["elemental"] && traits.elemental.vars()[0] === "fire") {
            steel_smelter *= 1 + highPopAdjust(traits.elemental.vars()[3] * global.resource[global.race.species].amount / 100);
          }
          if (salFathom > 0) {
            steel_smelter *= 1 + 0.2 * salFathom;
          }
          let smelter_output = steel_smelter * steel_base * production("psychic_boost", "Steel");
          if (global.race["pyrophobia"]) {
            smelter_output *= 1 - traits.pyrophobia.vars()[0] / 100;
          }
          let delta = smelter_output;
          delta *= hunger * global_multiplier * shrineMetal.mult;
          breakdown.p["Steel"][loc("city_smelter")] = smelter_output + "v";
          breakdown.p["Steel"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
          breakdown.p["Steel"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Steel", delta * time_multiplier);
          if (global.tech["titanium"] && global.tech["titanium"] >= 1) {
            let titanium = smelter_output * hunger * production("psychic_boost", "Titanium");
            if (star_forge > 0) {
              delta *= 1 + star_forge / 50;
            }
            if (global.city.geology["Titanium"]) {
              delta *= global.city.geology["Titanium"] + 1;
            }
            if (global.city.biome === "oceanic") {
              delta *= biomes.oceanic.vars()[1];
            }
            delta *= shrineMetal.mult;
            let divisor2 = global.tech["titanium"] >= 3 ? 10 : 25;
            modRes("Titanium", delta * time_multiplier / divisor2);
            breakdown.p["Titanium"][loc("resource_Steel_name")] = titanium / divisor2 + "v";
          }
        }
      }
      let graph_source = global.race["truepath"] ? "space" : "interstellar";
      let graph_struct = "g_factory";
      if (global.race["warlord"]) {
        graph_source = "portal";
        graph_struct = "twisted_lab";
      }
      if (global[graph_source][graph_struct] && global[graph_source][graph_struct].count > 0) {
        let on_graph = global.race["truepath"] ? support_on["g_factory"] : global.race["warlord"] ? p_on["twisted_lab"] : int_on["g_factory"];
        let max_graph = global[graph_source][graph_struct].on;
        let eff = max_graph > 0 ? on_graph / max_graph : 0;
        let remaining = max_graph;
        if (global.race["kindling_kindred"] || global.race["smoldering"]) {
          global[graph_source][graph_struct].Lumber = 0;
        }
        ["Oil", "Coal", "Lumber"].forEach(function(res) {
          remaining -= global[graph_source][graph_struct][res];
          if (remaining < 0) {
            global[graph_source][graph_struct][res] += remaining;
            remaining = 0;
          }
        });
        let graphene_production = global[graph_source][graph_struct].Lumber + global[graph_source][graph_struct].Coal + global[graph_source][graph_struct].Oil;
        if (graphene_production > 0) {
          let consume_wood = global[graph_source][graph_struct].Lumber * 350 * eff;
          let consume_coal = global[graph_source][graph_struct].Coal * 25 * eff;
          let consume_oil = global[graph_source][graph_struct].Oil * 15 * eff;
          while (consume_wood * time_multiplier > global.resource.Lumber.amount && consume_wood > 0) {
            consume_wood -= 350 * eff;
            graphene_production--;
          }
          while (consume_coal * time_multiplier > global.resource.Coal.amount && consume_coal > 0) {
            consume_coal -= 25 * eff;
            graphene_production--;
          }
          while (consume_oil * time_multiplier > global.resource.Oil.amount && consume_oil > 0) {
            consume_oil -= 15 * eff;
            graphene_production--;
          }
          graphene_production *= production("g_factory") * production("psychic_boost", "Graphene");
          breakdown.p.consume.Lumber[global.race["warlord"] ? loc("portal_twisted_lab_title") : loc("interstellar_g_factory_bd")] = -consume_wood;
          breakdown.p.consume.Coal[global.race["warlord"] ? loc("portal_twisted_lab_title") : loc("interstellar_g_factory_bd")] = -consume_coal;
          breakdown.p.consume.Oil[global.race["warlord"] ? loc("portal_twisted_lab_title") : loc("interstellar_g_factory_bd")] = -consume_oil;
          modRes("Lumber", -(consume_wood * time_multiplier));
          modRes("Coal", -(consume_coal * time_multiplier));
          modRes("Oil", -(consume_oil * time_multiplier));
          if (global.civic.govern.type === "corpocracy") {
            graphene_production *= 1 + govEffect.corpocracy()[4] / 100;
          }
          if (global.civic.govern.type === "socialist") {
            graphene_production *= 1 + govEffect.socialist()[1] / 100;
          }
          let ai = 1;
          if (global.tech["ai_core"] >= 3) {
            let graph = +(quantum_level / 5).toFixed(1) / 100;
            ai += graph * p_on["citadel"];
          }
          let incinerator = 1;
          if (global.race["warlord"] && global.portal.hasOwnProperty("incinerator") && global.portal.incinerator.rank > 1) {
            let rank = global.portal.incinerator.rank - 1;
            incinerator += rank * 15 * global.portal.incinerator.on / 100;
          }
          let synd = global.race["truepath"] ? syndicate("spc_titan") : 1;
          let delta = graphene_production * ai * zigVal * hunger * global_multiplier * synd * eff * incinerator;
          breakdown.p["Graphene"][global.race["warlord"] ? loc("portal_twisted_lab_title") : loc("interstellar_g_factory_bd")] = graphene_production + "v";
          if (global.tech["isolation"] && graphene_production > 0) {
            delta *= womling_technician;
            if (womling_technician > 1) {
              breakdown.p["Graphene"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
            }
          }
          if (incinerator > 1) {
            breakdown.p["Graphene"][`\u1102${loc("portal_incinerator_title")}`] = (incinerator - 1) * 100 + "%";
          }
          if (graphene_production > 0) {
            breakdown.p["Graphene"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
            breakdown.p["Graphene"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          }
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            breakdown.p["Graphene"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
          if (p_on["citadel"] > 0) {
            breakdown.p["Graphene"][loc("interstellar_citadel_effect_bd")] = (ai - 1) * 100 + "%";
          }
          breakdown.p["Graphene"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Graphene", delta * time_multiplier);
        } else {
          breakdown.p["Graphene"] = 0;
        }
      }
      if (global.galaxy["vitreloy_plant"] && p_on["vitreloy_plant"] > 0) {
        let consume_money = 5e4;
        let consume_bolognium = 2.5;
        let consume_stanene = 100;
        let vitreloy_production = p_on["vitreloy_plant"];
        vitreloy_production = Math.min(vitreloy_production, Math.floor(global.resource.Money.amount / (consume_money * time_multiplier)));
        vitreloy_production = Math.min(vitreloy_production, Math.floor(global.resource.Bolognium.amount / (consume_bolognium * time_multiplier)));
        vitreloy_production = Math.min(vitreloy_production, Math.floor(global.resource.Stanene.amount / (consume_stanene * time_multiplier)));
        vitreloy_production = Math.max(vitreloy_production, 0);
        if (vitreloy_production > 0) {
          consume_money *= vitreloy_production;
          consume_bolognium *= vitreloy_production;
          consume_stanene *= vitreloy_production;
          vitreloy_production *= production("vitreloy_plant") * production("psychic_boost", "Vitreloy");
          breakdown.p.consume.Money[loc("galaxy_vitreloy_plant_bd")] = -consume_money;
          breakdown.p.consume.Bolognium[loc("galaxy_vitreloy_plant_bd")] = -consume_bolognium;
          breakdown.p.consume.Stanene[loc("galaxy_vitreloy_plant_bd")] = -consume_stanene;
          modRes("Money", -(consume_money * time_multiplier));
          modRes("Bolognium", -(consume_bolognium * time_multiplier));
          modRes("Stanene", -(consume_stanene * time_multiplier));
          let pirate = piracy("gxy_alien1");
          breakdown.p["Vitreloy"][loc("galaxy_vitreloy_plant_bd")] = vitreloy_production + "v";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            vitreloy_production *= 0.5;
            breakdown.p["Vitreloy"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
          if (vitreloy_production > 0) {
            breakdown.p["Vitreloy"][`\u1102${loc("galaxy_piracy")}+0`] = -((1 - pirate) * 100) + "%";
            breakdown.p["Vitreloy"][`\u1102${loc("space_red_ziggurat_title")}+0`] = (zigVal - 1) * 100 + "%";
          }
          modRes("Vitreloy", vitreloy_production * hunger * global_multiplier * pirate * time_multiplier * zigVal);
        }
      }
      if (p_on["shadow_mine"]) {
        let attract = p_on["soul_attractor"] ? 1 + p_on["soul_attractor"] * (global.tech.pitspawn >= 3 ? 0.2 : 0.1) : 1;
        if (global.resource.Vitreloy.display) {
          let rate = production("shadow_mine", "vitreloy");
          let mine_base = p_on["shadow_mine"] * rate * production("psychic_boost", "Vitreloy");
          let mine_delta = mine_base * attract * global_multiplier;
          if (mine_base > 0) {
            breakdown.p["Vitreloy"][loc("portal_shadow_mine_title")] = mine_base + "v";
            breakdown.p["Vitreloy"][`\u1102${loc("portal_soul_attractor_title")}+0`] = (attract - 1) * 100 + "%";
          }
          modRes("Vitreloy", mine_delta * time_multiplier);
        }
        if (global.resource.Elerium.display) {
          let rate = production("shadow_mine", "elerium");
          let mine_base = p_on["shadow_mine"] * rate * production("psychic_boost", "Elerium");
          let mine_delta = mine_base * attract * global_multiplier;
          if (mine_base > 0) {
            breakdown.p["Elerium"][loc("portal_shadow_mine_title")] = mine_base + "v";
            breakdown.p["Elerium"][`\u1102${loc("portal_soul_attractor_title")}+0`] = (attract - 1) * 100 + "%";
          }
          modRes("Elerium", mine_delta * time_multiplier);
        }
        if (global.resource.Infernite.display) {
          let rate = production("shadow_mine", "infernite");
          let mine_base = p_on["shadow_mine"] * rate * production("psychic_boost", "Infernite");
          let mine_delta = mine_base * attract * global_multiplier;
          if (mine_base > 0) {
            breakdown.p["Infernite"][loc("portal_shadow_mine_title")] = mine_base + "v";
            breakdown.p["Infernite"][`\u1102${loc("portal_soul_attractor_title")}+0`] = (attract - 1) * 100 + "%";
          }
          modRes("Infernite", mine_delta * time_multiplier);
        }
      }
      if (p_on["s_gate"] && global.galaxy["raider"] && gal_on["raider"] > 0) {
        let base = gal_on["raider"] * 0.05 * production("psychic_boost", "Vitreloy");
        let pirate = piracy("gxy_chthonian");
        let delta = base * global_multiplier * pirate * hunger * zigVal;
        breakdown.p["Vitreloy"][loc("galaxy_raider")] = base + "v";
        if (base > 0) {
          breakdown.p["Vitreloy"][`\u1102${loc("galaxy_piracy")}+1`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Vitreloy"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Vitreloy", delta * time_multiplier);
      }
      breakdown.p["Vitreloy"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (!global.tech["isolation"] && global.space["lander"] && global.space["crashed_ship"] && global.space.crashed_ship.count === 100) {
        let synd = syndicate("spc_triton");
        let base = support_on["lander"] * production("lander");
        let delta = base * global_multiplier * synd * hunger;
        breakdown.p["Cipher"][loc("space_lander_title")] = base + "v";
        breakdown.p["Cipher"][`\u1102${loc("space_syndicate")}+0`] = -((1 - synd) * 100) + "%";
        breakdown.p["Cipher"][`\u1102${loc("hunger")}`] = (hunger - 1) * 100 + "%";
        modRes("Cipher", delta * time_multiplier);
        if (global.resource.Cipher.display && global.tech["outer"] && global.tech.outer === 2) {
          global.tech.outer = 3;
          drawTech();
        }
      }
      if (!global.tech["isolation"] && global.space["digsite"] && global.space.digsite.count === 100) {
        if (!global.tech["dig_control"]) {
          global.tech["dig_control"] = 1;
          drawTech();
        }
        let synd = syndicate("spc_eris");
        let shock_base = support_on["shock_trooper"] * production("shock_trooper");
        let tank_base = support_on["tank"] * production("tank");
        if (support_on["shock_trooper"]) {
          breakdown.p["Cipher"][loc("space_shock_trooper_title")] = shock_base + "v";
          breakdown.p["Cipher"][`\u1102${loc("space_syndicate")}+1`] = -((1 - synd) * 100) + "%";
        }
        if (support_on["tank"]) {
          breakdown.p["Cipher"][loc("space_tank_title")] = tank_base + "v";
          breakdown.p["Cipher"][`\u1102${loc("space_syndicate")}+2`] = -((1 - synd) * 100) + "%";
        }
        let delta = (shock_base + tank_base) * global_multiplier * synd;
        modRes("Cipher", delta * time_multiplier);
      }
      if (global.portal["oven_complete"] && p_on["oven_complete"] && !global.tech["dish_reset"] && global.portal["devilish_dish"].done >= 100) {
        global.tech["dish_reset"] = 1;
        drawTech();
      }
      if (global.tech["isolation"] && global.tauceti["alien_outpost"] && p_on["alien_outpost"]) {
        let base = production("alien_outpost");
        let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
        breakdown.p["Cipher"][loc("tech_alien_outpost")] = base + "v";
        if (base > 0) {
          breakdown.p["Cipher"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
        }
        let delta = base * global_multiplier * colony_val;
        modRes("Cipher", delta * time_multiplier);
      }
      let e_ship = {};
      if (global.tauceti["ore_refinery"] && global.tauceti["mining_ship"] && global.tech["tau_roid"] && global.tech.tau_roid >= 4) {
        global.tauceti.ore_refinery.max = global.tauceti.ore_refinery.count * 1e3;
        if (global.tauceti.ore_refinery.fill > 0) {
          let raw = p_on["ore_refinery"] * production("ore_refinery");
          if (raw > global.tauceti.ore_refinery.fill) {
            raw = global.tauceti.ore_refinery.fill;
          }
          global.tauceti.ore_refinery.fill -= raw * time_multiplier;
          let c_ratio = global.tech.tau_roid >= 5 ? 0.6 : 0.64;
          let u_ratio = global.tech.tau_roid >= 5 ? 0.35 : 0.36;
          e_ship["iron"] = raw * c_ratio * (100 - global.tauceti.mining_ship.common) / 100 * production("mining_ship_ore", "iron") * production("psychic_boost", "Iron");
          e_ship["aluminium"] = raw * c_ratio * global.tauceti.mining_ship.common / 100 * production("mining_ship_ore", "aluminium") * production("psychic_boost", "Aluminium");
          e_ship["iridium"] = raw * u_ratio * (100 - global.tauceti.mining_ship.uncommon) / 100 * production("mining_ship_ore", "iridium") * production("psychic_boost", "Iridium");
          e_ship["neutronium"] = raw * u_ratio * global.tauceti.mining_ship.uncommon / 100 * production("mining_ship_ore", "neutronium") * production("psychic_boost", "Neutronium");
          if (global.tech.tau_roid >= 5) {
            e_ship["orichalcum"] = raw * 0.05 * (100 - global.tauceti.mining_ship.rare) / 10 * production("mining_ship_ore", "orichalcum") * production("psychic_boost", "Orichalcum");
            e_ship["elerium"] = raw * 0.05 * global.tauceti.mining_ship.rare / 10 * production("mining_ship_ore", "elerium") * production("psychic_boost", "Elerium");
          }
        }
        let ore = support_on["mining_ship"] * production("mining_ship");
        global.tauceti.ore_refinery.fill += ore * time_multiplier;
        if (global.tauceti.ore_refinery.fill > global.tauceti.ore_refinery.max) {
          global.tauceti.ore_refinery.fill = global.tauceti.ore_refinery.max;
        }
      }
      {
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          if (global.tech["mars"] && support_on["biodome"] && !global.race["kindling_kindred"] && !global.race["smoldering"]) {
            let lumber = support_on["biodome"] * workerScale(global.civic.colonist.workers, "colonist") * production("biodome", "lumber") * production("psychic_boost", "Lumber");
            breakdown.p["Lumber"][actions.space.spc_red.biodome.title()] = lumber + "v";
            if (lumber > 0) {
              breakdown.p["Lumber"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            }
            breakdown.p["Lumber"][loc("hunger")] = (hunger - 1) * 100 + "%";
            modRes("Lumber", lumber * hunger * global_multiplier * time_multiplier * zigVal);
          }
        } else if (global.race["soul_eater"] && global.race.species !== "wendigo" && global.race["evil"]) {
          let weapons = weaponTechModifer();
          let hunters = workerScale(global.civic.hunter.workers, "hunter");
          hunters *= racialTrait(hunters, "hunting");
          if (global.race["servants"]) {
            let serve = jobScale(global.race.servants.jobs.hunter);
            serve *= servantTrait(global.race.servants.jobs.hunter, "hunting");
            hunters += highPopAdjust(serve);
          }
          hunters *= weapons / 2;
          hunters *= production("psychic_boost", "Lumber");
          let soldiers = armyRating(garrisonSize(), "hunting") / 3;
          soldiers *= production("psychic_boost", "Lumber");
          breakdown.p["Lumber"][jobName("hunter")] = hunters + "v";
          breakdown.p["Lumber"][loc("soldiers")] = soldiers + "v";
          breakdown.p["Lumber"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Lumber", hunters * hunger * global_multiplier * time_multiplier);
          modRes("Lumber", soldiers * hunger * global_multiplier * time_multiplier);
        } else if (global.race["evil"]) {
          let reclaimers = workerScale(global.civic.lumberjack.workers, "lumberjack");
          reclaimers *= racialTrait(reclaimers, "lumberjack");
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.lumberjack;
            serve *= servantTrait(global.race.servants.jobs.lumberjack, "lumberjack");
            reclaimers += serve;
          }
          reclaimers *= production("psychic_boost", "Lumber");
          let graveyard = 1;
          if (global.city["graveyard"]) {
            graveyard += global.city["graveyard"].count * 0.08;
          }
          let soldiers = armyRating(garrisonSize(), "hunting") / 5;
          soldiers *= production("psychic_boost", "Lumber");
          breakdown.p["Lumber"][jobName("lumberjack")] = reclaimers + "v";
          if (reclaimers > 0) {
            breakdown.p["Lumber"][`\u1102${loc("city_graveyard")}+0`] = (graveyard - 1) * 100 + "%";
            breakdown.p["Lumber"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          breakdown.p["Lumber"][loc("soldiers")] = soldiers + "v";
          if (soldiers > 0) {
            breakdown.p["Lumber"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
          }
          if (global.race["forager"]) {
            let forage = 1;
            let foragers = workerScale(global.civic.forager.workers, "forager");
            foragers *= racialTrait(foragers, "forager");
            if (global.race["servants"]) {
              let serve = global.race.servants.jobs.forager;
              serve *= servantTrait(global.race.servants.jobs.forager, "forager");
              foragers += serve;
            }
            let forage_base = foragers * forage * 0.25;
            breakdown.p["Lumber"][jobName("forager")] = forage_base + "v";
            if (forage_base > 0) {
              breakdown.p["Lumber"][`\u1102${loc("city_graveyard")}+1`] = (graveyard - 1) * 100 + "%";
              breakdown.p["Lumber"][`\u1102${loc("quarantine")}+2`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes("Lumber", forage_base * hunger * graveyard * global_multiplier * q_multiplier * time_multiplier);
          }
          breakdown.p["Lumber"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Lumber", reclaimers * hunger * graveyard * global_multiplier * q_multiplier * time_multiplier);
          modRes("Lumber", soldiers * hunger * global_multiplier * q_multiplier * time_multiplier);
        } else {
          let lumber_base = workerScale(global.civic.lumberjack.workers, "lumberjack");
          lumber_base *= racialTrait(lumber_base, "lumberjack");
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.lumberjack;
            serve *= servantTrait(global.race.servants.jobs.lumberjack, "lumberjack");
            lumber_base += serve;
          }
          lumber_base *= global.city.biome === "forest" ? biomes.forest.vars()[0] : 1;
          lumber_base *= global.city.biome === "savanna" ? biomes.savanna.vars()[2] : 1;
          lumber_base *= global.city.biome === "desert" ? biomes.desert.vars()[2] : 1;
          lumber_base *= global.city.biome === "swamp" ? biomes.swamp.vars()[2] : 1;
          lumber_base *= global.city.biome === "taiga" ? biomes.taiga.vars()[0] : 1;
          lumber_base *= global.civic.lumberjack.impact;
          if (global.race["living_tool"]) {
            lumber_base *= traits.living_tool.vars()[0] * (global.tech["science"] && global.tech.science > 0 ? global.tech.science * 0.25 : 0) + 1;
          } else {
            lumber_base *= (global.tech["axe"] && global.tech.axe > 1 ? (global.tech.axe - 1) * 0.35 : 0) + 1;
          }
          lumber_base *= production("psychic_boost", "Lumber");
          let sawmills = 1;
          if (global.city["sawmill"]) {
            let saw = global.tech["saw"] >= 2 ? 0.08 : 0.05;
            sawmills *= global.city.sawmill.count * saw + 1;
          }
          let power_mult = 1;
          let power_single = 1;
          if (global.city.powered && global.city.sawmill && p_on["sawmill"]) {
            power_mult += p_on["sawmill"] * 0.04;
            power_single += 0.04;
          }
          let lumber_yard = 1;
          if (global.city["lumber_yard"]) {
            lumber_yard += global.city["lumber_yard"].count * 0.02;
          }
          breakdown.p["Lumber"][jobName("lumberjack")] = lumber_base + "v";
          if (lumber_base > 0) {
            breakdown.p["Lumber"][`\u1102${loc("city_lumber_yard")}`] = (lumber_yard - 1) * 100 + "%";
            breakdown.p["Lumber"][`\u1102${loc("city_sawmill")}`] = (sawmills - 1) * 100 + "%";
            breakdown.p["Lumber"][`\u1102${loc("power")}`] = (power_mult - 1) * 100 + "%";
            breakdown.p["Lumber"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["sawmill"] > 0) {
            power_mult = (power_mult - 1) * 0.5 + 1;
            power_single = (power_single - 1) * 0.5 + 1;
            breakdown.p["Lumber"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
          let delta = lumber_base * sawmills * lumber_yard;
          if (global.city["sawmill"]) {
            global.city.sawmill["psaw"] = +(delta * hunger * q_multiplier * global_multiplier * (power_single - 1)).toFixed(5);
          }
          delta *= power_mult * hunger * q_multiplier * global_multiplier;
          if (global.race["forager"]) {
            let forage = 1;
            let foragers = workerScale(global.civic.forager.workers, "forager");
            foragers *= racialTrait(foragers, "forager");
            if (global.race["servants"]) {
              let serve = global.race.servants.jobs.forager;
              serve *= servantTrait(global.race.servants.jobs.forager, "forager");
              foragers += serve;
            }
            let forage_base = foragers * forage * 0.25 * production("psychic_boost", "Lumber");
            breakdown.p["Lumber"][jobName("forager")] = forage_base + "v";
            if (lumber_base > 0) {
              breakdown.p["Lumber"][`\u1102${loc("city_lumber_yard")}`] = (lumber_yard - 1) * 100 + "%";
              breakdown.p["Lumber"][`\u1102${loc("city_sawmill")}`] = (sawmills - 1) * 100 + "%";
              breakdown.p["Lumber"][`\u1102${loc("power")}`] = (power_mult - 1) * 100 + "%";
              breakdown.p["Lumber"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes("Lumber", forage_base * hunger * q_multiplier * sawmills * lumber_yard * power_mult * global_multiplier * time_multiplier);
          }
          breakdown.p["Lumber"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Lumber", delta * time_multiplier);
        }
      }
      let refinery = global.city["metal_refinery"] ? global.city["metal_refinery"].count * 6 : 0;
      refinery *= q_multiplier;
      if (global.race["sappy"]) {
        if (global.tech["mining"] && global.resource[global.race.species].amount > 0) {
          let stone_base = global.resource[global.race.species].amount * traits.sappy.vars()[0] * production("psychic_boost", "Stone");
          if (global.race["high_pop"]) {
            stone_base = highPopAdjust(stone_base);
          }
          let cactiFathom = fathomCheck("cacti");
          if (cactiFathom > 0) {
            stone_base *= 1 + 0.32 * cactiFathom;
          }
          breakdown.p["Stone"][flib("name")] = stone_base + "v";
          if (global.city.hasOwnProperty("basic_housing")) {
            let grove = global.city.basic_housing.count * 0.025;
            stone_base *= 1 + grove;
            breakdown.p["Stone"][`\u1102${housingLabel("small")}`] = grove * 100 + "%";
          }
          let soldiers = 0;
          if (global.civic.hasOwnProperty("garrison")) {
            soldiers = global.civic.garrison.workers * traits.sappy.vars()[0];
            if (global.race["high_pop"]) {
              soldiers = highPopAdjust(soldiers);
            }
            breakdown.p["Stone"][loc("soldiers")] = soldiers + "v";
          }
          let delta = (stone_base + soldiers) * hunger * global_multiplier;
          breakdown.p["Stone"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Stone", delta * time_multiplier);
        }
      } else {
        let quarriers = global.race["warlord"] ? global.civic.miner.workers : global.civic.quarry_worker.workers;
        let stone_prod_name = global.race["warlord"] ? jobName("miner") : loc("workers");
        quarriers = workerScale(quarriers, "quarry_worker");
        let stone_base = quarriers * racialTrait(quarriers, "miner");
        let cactiFathom = fathomCheck("cacti");
        if (cactiFathom > 0) {
          stone_base *= 1 + 0.32 * cactiFathom;
        }
        if (global.race["servants"]) {
          let serve = global.race.servants.jobs.quarry_worker;
          serve *= servantTrait(global.race.servants.jobs.quarry_worker, "miner");
          stone_base += serve;
        }
        stone_base *= global.civic.quarry_worker.impact;
        let asbestos_base = 0;
        let forage_base = 0;
        if (global.race["forager"] && global.resource.Stone.display) {
          let foragers = workerScale(global.civic.forager.workers, "forager");
          forage_base = foragers * racialTrait(foragers, "forager");
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.forager;
            serve *= servantTrait(global.race.servants.jobs.forager, "forager");
            forage_base += serve;
          }
          forage_base *= 0.22;
        }
        if (global.race["living_tool"] || global.race["tusk"]) {
          const balance = global.race["hivemind"] ? traits.hivemind.vars()[0] : 1;
          let tusk = global.race["tusk"] ? 1 + traits.tusk.vars()[0] / 100 * (armyRating(jobScale(balance), "army", 0) / balance / 100) : 1;
          let lt = global.race["living_tool"] ? traits.living_tool.vars()[0] * (global.tech["science"] && global.tech.science > 0 ? global.tech.science * 0.06 : 0) + 1 : 1;
          stone_base *= lt > tusk ? lt : tusk;
        } else {
          stone_base *= (global.tech["hammer"] && global.tech["hammer"] > 0 ? global.tech["hammer"] * 0.4 : 0) + 1;
        }
        let stone_environment = 1;
        if (global.city.biome === "desert") {
          stone_environment *= biomes.desert.vars()[0];
        }
        if (global.city.biome === "swamp") {
          stone_environment *= biomes.swamp.vars()[3];
        }
        if (global.tech["explosives"] && global.tech.explosives >= 2) {
          stone_environment *= 1 + global.tech.explosives * 0.25;
        }
        stone_base *= stone_environment;
        forage_base *= stone_environment;
        let tunneler = 1;
        if (global.race["warlord"] && global.portal["tunneler"]) {
          tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
        }
        let rock_quarry = 1;
        let power_single = 1;
        let power_mult = 1;
        let quarry_discharge = false;
        let zigValStone = 1;
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          stone_prod_name = structName("mine");
          if (global.tech["mars"] && support_on["red_mine"]) {
            let mine_base = support_on["red_mine"] * workerScale(global.civic.colonist.workers, "colonist");
            stone_base = mine_base * production("red_mine", "stone");
            zigValStone = zigVal;
            if (global.race["smoldering"] && global.resource.Chrysotile.display) {
              asbestos_base = mine_base * production("red_mine", "asbestos");
              asbestos_base *= production("psychic_boost", "Chrysotile");
            }
          }
        } else if (global.city["rock_quarry"]) {
          rock_quarry += global.city["rock_quarry"].count * 0.02;
          if (p_on["rock_quarry"]) {
            power_single += 0.04;
            power_mult += p_on["rock_quarry"] * 0.04;
            quarry_discharge = global.race["discharge"] && global.race["discharge"] > 0;
          }
          if (global.race["smoldering"] && global.resource.Chrysotile.display) {
            let asbestos_ratio = global.city.rock_quarry.asbestos / 100;
            asbestos_base = (stone_base + forage_base) * asbestos_ratio;
            asbestos_base *= production("psychic_boost", "Chrysotile");
            let stone_ratio = (100 - global.city.rock_quarry.asbestos) / 100;
            stone_base *= stone_ratio;
            forage_base *= stone_ratio;
          }
        }
        stone_base *= production("psychic_boost", "Stone");
        forage_base *= production("psychic_boost", "Stone");
        breakdown.p["Stone"][stone_prod_name] = stone_base + "v";
        if (stone_base > 0) {
          if (zigValStone > 1) {
            breakdown.p["Stone"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          }
          breakdown.p["Stone"][`\u1102${loc("city_rock_quarry")}`] = (rock_quarry - 1) * 100 + "%";
          breakdown.p["Stone"][`\u1102${loc("power")}`] = (power_mult - 1) * 100 + "%";
          if (quarry_discharge) {
            breakdown.p["Stone"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
          breakdown.p["Stone"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
          breakdown.p["Stone"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
        }
        if (global.race["smoldering"] && global.resource.Chrysotile.display) {
          breakdown.p["Chrysotile"][stone_prod_name] = asbestos_base + "v";
          if (asbestos_base > 0) {
            if (zigValStone > 1) {
              breakdown.p["Chrysotile"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            }
            breakdown.p["Chrysotile"][`\u1102${loc("city_rock_quarry")}`] = (rock_quarry - 1) * 100 + "%";
            breakdown.p["Chrysotile"][`\u1102${loc("power")}`] = (power_mult - 1) * 100 + "%";
            if (quarry_discharge) {
              breakdown.p["Chrysotile"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            breakdown.p["Chrysotile"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Chrysotile"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
        }
        if (forage_base > 0) {
          breakdown.p["Stone"][jobName("forager")] = forage_base + "v";
          if (forage_base > 0) {
            breakdown.p["Stone"][`\u1102${loc("city_rock_quarry")}+1`] = (rock_quarry - 1) * 100 + "%";
            breakdown.p["Stone"][`\u1102${loc("power")}+1`] = (power_mult - 1) * 100 + "%";
            if (quarry_discharge) {
              breakdown.p["Stone"][`\u1102${loc("evo_challenge_discharge")}+1`] = "-50%";
            }
            breakdown.p["Stone"][`\u1102${loc("portal_tunneler_bd")}+1`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Stone"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
          }
        }
        if (quarry_discharge) {
          power_mult = (power_mult - 1) * 0.5 + 1;
          power_single = (power_single - 1) * 0.5 + 1;
        }
        let delta = (stone_base * zigValStone + forage_base) * rock_quarry * tunneler;
        if (global.city["rock_quarry"]) {
          global.city.rock_quarry["cnvay"] = +(delta * hunger * q_multiplier * global_multiplier * (power_single - 1)).toFixed(5);
        }
        delta *= power_mult * hunger * q_multiplier * global_multiplier;
        breakdown.p["Stone"][loc("hunger")] = (hunger - 1) * 100 + "%";
        modRes("Stone", delta * time_multiplier);
        if (global.race["smoldering"] && global.resource.Chrysotile.display) {
          let a_delta = asbestos_base * zigValStone * rock_quarry * tunneler;
          a_delta *= power_mult * hunger * q_multiplier * global_multiplier;
          breakdown.p["Chrysotile"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Chrysotile", a_delta * time_multiplier);
        }
        if (global.city["metal_refinery"] && (global.city["metal_refinery"].count > 0 || global.race["cataclysm"] || global.race["orbit_decayed"] || global.race["warlord"])) {
          let alum_ratio = global.race["cataclysm"] ? 0.16 : 0.08;
          let base = stone_base * alum_ratio;
          if (quarry_discharge) {
            power_mult = (power_mult - 1) * 2 + 1;
            power_single = (power_single - 1) * 2 + 1;
          }
          if (base > 0) {
            if (global.city.geology["Aluminium"]) {
              base *= global.city.geology["Aluminium"] + 1;
            }
            base *= production("psychic_boost", "Aluminium");
            breakdown.p["Aluminium"][stone_prod_name] = base + "v";
            if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
              breakdown.p["Aluminium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            }
            breakdown.p["Aluminium"][`\u1102${loc("city_rock_quarry")}+0`] = (rock_quarry - 1) * 100 + "%";
            breakdown.p["Aluminium"][`\u1102${loc("power")}+0`] = (power_mult - 1) * 100 + "%";
            if (quarry_discharge) {
              breakdown.p["Aluminium"][`\u1102${loc("evo_challenge_discharge")}+0`] = "-50%";
            }
            breakdown.p["Aluminium"][`\u1102${loc("portal_tunneler_bd")}+0`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Aluminium"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          let forage_alum_base = forage_base * alum_ratio;
          if (forage_alum_base > 0) {
            if (global.city.geology["Aluminium"]) {
              forage_alum_base *= global.city.geology["Aluminium"] + 1;
            }
            forage_alum_base *= production("psychic_boost", "Aluminium");
            breakdown.p["Aluminium"][jobName("forager")] = forage_alum_base + "v";
            breakdown.p["Aluminium"][`\u1102${loc("city_rock_quarry")}+1`] = (rock_quarry - 1) * 100 + "%";
            breakdown.p["Aluminium"][`\u1102${loc("power")}+1`] = (power_mult - 1) * 100 + "%";
            if (quarry_discharge) {
              breakdown.p["Aluminium"][`\u1102${loc("evo_challenge_discharge")}+1`] = "-50%";
            }
            breakdown.p["Aluminium"][`\u1102${loc("portal_tunneler_bd")}+1`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Aluminium"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
          }
          if (quarry_discharge) {
            power_mult = (power_mult - 1) * 0.5 + 1;
            power_single = (power_single - 1) * 0.5 + 1;
          }
          let delta2 = base * zigValStone + forage_alum_base;
          delta2 *= rock_quarry * tunneler * shrineMetal.mult * hunger * q_multiplier * global_multiplier;
          global.city.metal_refinery["cnvay"] = +(delta2 * (power_single - 1)).toFixed(5);
          global.city.rock_quarry["almcvy"] = global.city.metal_refinery["cnvay"];
          delta2 *= power_mult;
          if (global.tech["alumina"] >= 2) {
            refinery += p_on["metal_refinery"] * 6 * q_multiplier;
            let ref_single = 6 * q_multiplier / 100;
            global.city.metal_refinery["pwr"] = +(delta2 * ref_single).toFixed(5);
          }
          delta2 *= 1 + refinery / 100;
          breakdown.p["Aluminium"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
          breakdown.p["Aluminium"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Aluminium", delta2 * time_multiplier);
        }
      }
      if (global.race["ocular_power"] && global.race["ocularPowerConfig"] && global.race.ocularPowerConfig.p && global.race.ocularPowerConfig.ds > 0) {
        if (!global.race.ocularPowerConfig.hasOwnProperty("ticks") || global.race.ocularPowerConfig.ticks <= 0) {
          global.race.ocularPowerConfig["dsl"] = Math.round(global.race.ocularPowerConfig.ds / 10);
          global.race.ocularPowerConfig.ds = 0;
          global.race.ocularPowerConfig["ticks"] = Math.round(10 / time_multiplier);
        }
        let base = global.race.ocularPowerConfig.dsl;
        let delta = base * hunger * q_multiplier * global_multiplier;
        global.race.ocularPowerConfig.ticks--;
        breakdown.p["Stone"][loc("ocular_petrification")] = base + "v";
        modRes("Stone", delta * time_multiplier);
      }
      if (global.resource.Water.display) {
        if (support_on["water_freighter"]) {
          let synd = syndicate("spc_enceladus");
          let base = production("water_freighter") * support_on["water_freighter"] * production("psychic_boost", "Water");
          ;
          let delta = base * hunger * global_multiplier * synd * zigVal;
          breakdown.p["Water"][loc("space_water_freighter_title")] = base + "v";
          if (base > 0) {
            breakdown.p["Water"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
            breakdown.p["Water"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            breakdown.p["Water"][`\u1102${loc("hunger")}`] = (hunger - 1) * 100 + "%";
          }
          modRes("Water", delta * time_multiplier);
        }
        if (global.tech["isolation"] && global.tauceti["tau_farm"] && p_on["tau_farm"]) {
          let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
          let base = production("tau_farm", "water") * p_on["tau_farm"] * production("psychic_boost", "Water");
          let delta = base * global_multiplier * colony_val;
          breakdown.p["Water"][loc("tau_home_tau_farm")] = base + "v";
          if (base > 0) {
            breakdown.p["Water"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
          }
          modRes("Water", delta * time_multiplier);
        }
      }
      if (global.eden["palace"] && p_on["spirit_vacuum"] && global.tech["isle"]) {
        let drain = 1653439 * p_on["spirit_vacuum"];
        if (global.tech.isle >= 6 && p_on["spirit_battery"]) {
          let battery = p_on["spirit_battery"] || 0;
          let boost = 0.08;
          if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 13) {
            boost *= 1 + (p_on["corruptor"] || 0) * 0.03;
          }
          drain *= 1 + battery * boost;
        }
        if (global.eden["soul_compactor"] && global.eden.soul_compactor.count === 1) {
          global.eden.soul_compactor.energy += Math.round(drain / 2);
          if (global.eden.soul_compactor.energy >= 1e9) {
            global.eden.soul_compactor.energy -= 1e9;
            global.resource.Soul_Gem.amount++;
            global.eden.soul_compactor.report++;
          }
        }
        if (global.eden.palace.energy > 0) {
          global.eden.palace.rate = drain;
          global.eden.palace.energy -= drain * time_multiplier;
          global.eden.palace.energy = Math.round(global.eden.palace.energy);
          if (global.eden.palace.energy <= 0) {
            global.eden.palace.energy = 0;
            global.tech["palace"] = 1;
            drawTech();
            renderEdenic();
          }
        }
      }
      if (global.resource.Mana.display) {
        if (global.race["casting"]) {
          ritual_types.forEach(function(spell) {
            if (global.race.casting[spell]) {
              if (global.race.casting[spell] > 0) {
                const consume_mana = manaCost(global.race.casting[spell]);
                const consume_mana_dt = consume_mana * time_multiplier;
                if (consume_mana_dt > global.resource.Mana.amount) {
                  active_rituals[spell] = maxRitualNum(global.resource.Mana.amount, time_multiplier);
                } else {
                  active_rituals[spell] = global.race.casting[spell];
                }
                breakdown.p.consume.Mana[loc(`modal_pylon_spell_${spell}`)] = -consume_mana;
                modRes("Mana", -consume_mana_dt);
              } else {
                active_rituals[spell] = 0;
              }
            }
          });
        }
        if (global.city["pylon"] || global.space["pylon"] || global.tauceti["pylon"]) {
          let mana_base = 0;
          let name = "city_pylon";
          if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.space["pylon"]) {
            mana_base = global.space.pylon.count * 5e-3;
            name = "space_red_pylon";
          } else if (global.tech["isolation"] && global.tauceti["pylon"]) {
            mana_base = global.tauceti.pylon.count * 0.0125;
            name = "tau_home_pylon";
          } else if (global.city["pylon"]) {
            mana_base = global.city.pylon.count * 0.01;
          }
          mana_base *= darkEffect("magic");
          let delta = mana_base * hunger * global_multiplier;
          breakdown.p["Mana"][loc(name)] = mana_base + "v";
          if (global.tech["nexus"]) {
            let nexus = global.tech["nexus"] * 5;
            delta *= 1 + nexus / 100;
            breakdown.p["Mana"][`\u1102${loc("arpa_projects_nexus_title")}`] = nexus + "%";
          }
          modRes("Mana", delta * time_multiplier);
        }
        if (global.tech["cleric"] && global.civic.priest.display) {
          let mana_base = workerScale(global.civic.priest.workers, "priest") * 25e-4;
          if (global.race["high_pop"]) {
            mana_base = highPopAdjust(mana_base);
          }
          mana_base *= darkEffect("magic");
          let delta = mana_base * hunger * global_multiplier;
          breakdown.p["Mana"][jobName("priest")] = mana_base + "v";
          modRes("Mana", delta * time_multiplier);
        }
        if (global.race.universe === "magic" && global.civic.scientist.display) {
          let mana_base = workerScale(global.civic.scientist.workers, "scientist") * 0.025;
          if (global.race["high_pop"]) {
            mana_base = highPopAdjust(mana_base);
          }
          mana_base *= darkEffect("magic");
          let delta = mana_base * hunger * global_multiplier;
          breakdown.p["Mana"][jobName("wizard")] = mana_base + "v";
          if (global.civic.govern.type === "magocracy") {
            delta *= 1 + govEffect.magocracy()[0] / 100;
            breakdown.p["Mana"][`\u1102${loc("govern_magocracy")}`] = govEffect.magocracy()[0] + "%";
          }
          modRes("Mana", delta * time_multiplier);
        }
        if (global.race.universe === "magic" && global.tech["syphon"]) {
          let mana_base = global.tech.syphon / 3;
          mana_base *= darkEffect("magic");
          let delta = mana_base * hunger * global_multiplier;
          breakdown.p["Mana"][loc("arpa_syphon_title")] = mana_base + "v";
          modRes("Mana", delta * time_multiplier);
        }
        breakdown.p["Mana"][loc("hunger")] = (hunger - 1) * 100 + "%";
      }
      if (global.resource.Crystal.display) {
        let crystal_base = workerScale(global.civic.crystal_miner.workers, "crystal_miner");
        crystal_base *= racialTrait(crystal_base, "miner");
        if (global.race["servants"]) {
          let serve = global.race.servants.jobs.crystal_miner;
          serve *= servantTrait(global.race.servants.jobs.crystal_miner, "miner");
          crystal_base += serve;
        }
        crystal_base *= global.civic.crystal_miner.impact * production("psychic_boost", "Crystal");
        breakdown.p["Crystal"][jobName("crystal_miner")] = crystal_base + "v";
        if (global.civic.govern.type === "magocracy") {
          let bonus = govEffect.magocracy()[1];
          crystal_base *= 1 + bonus / 100;
          breakdown.p["Crystal"][`\u1102${loc("govern_magocracy")}`] = `${bonus}%`;
        }
        let delta = crystal_base * hunger * global_multiplier;
        breakdown.p["Crystal"][loc("hunger")] = (hunger - 1) * 100 + "%";
        modRes("Crystal", delta * time_multiplier);
      }
      if (global.resource.Copper.display || global.resource.Iron.display) {
        let miner_base = workerScale(global.civic.miner.workers, "miner");
        miner_base *= racialTrait(miner_base, "miner");
        miner_base *= global.civic.miner.impact;
        if (global.race["tough"]) {
          miner_base *= 1 + traits.tough.vars()[0] / 100;
        }
        let ogreFathom = fathomCheck("ogre");
        if (ogreFathom > 0) {
          miner_base *= 1 + traits.tough.vars(1)[0] / 100 * ogreFathom;
        }
        if (global.race["industrious"]) {
          let bonus = 1 + traits.industrious.vars()[0] * global.race["industrious"] / 100;
          miner_base *= bonus;
        }
        if (global.city.ptrait.includes("dense")) {
          miner_base *= planetTraits.dense.vars()[0];
        }
        if (global.city.ptrait.includes("permafrost")) {
          miner_base *= planetTraits.permafrost.vars()[0];
        }
        if (!global.race["living_tool"] && !global.race["tusk"]) {
          miner_base *= (global.tech["pickaxe"] && global.tech.pickaxe > 0 ? global.tech.pickaxe * 0.15 : 0) + 1;
        }
        if (global.tech["explosives"] && global.tech.explosives >= 2) {
          miner_base *= 0.95 + global.tech.explosives * 0.15;
        }
        let power_mult = 1;
        let pow_single = 1;
        if (global.city["mine"]["on"]) {
          power_mult += p_on["mine"] * 0.05;
          pow_single += 1.05;
        }
        let tunneler = 1;
        if (global.race["warlord"] && global.portal["tunneler"]) {
          tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
        }
        if (global.resource.Copper.display) {
          let copper_mult = 1 / 7;
          if (global.tech["copper"]) {
            copper_mult *= 1.2;
          }
          let copper_base = miner_base * copper_mult * production("psychic_boost", "Copper");
          if (global.city.geology["Copper"]) {
            copper_base *= global.city.geology["Copper"] + 1;
          }
          if (global.city.biome === "volcanic") {
            copper_base *= biomes.volcanic.vars()[1];
          } else if (global.city.biome === "ashland") {
            copper_base *= biomes.ashland.vars()[2];
          }
          let copper_power = power_mult;
          let cop_single = pow_single;
          breakdown.p["Copper"][jobName("miner")] = copper_base + "v";
          if (copper_base > 0) {
            breakdown.p["Copper"][`\u1102${loc("power")}`] = (copper_power - 1) * 100 + "%";
            breakdown.p["Copper"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Copper"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
            if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["mine"] > 0) {
              copper_power = (copper_power - 1) * 0.5 + 1;
              cop_single = (cop_single - 1) * 0.5 + 1;
              breakdown.p["Copper"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
          }
          let delta = copper_base * shrineMetal.mult * tunneler * hunger * q_multiplier * global_multiplier;
          global.city.mine["cpow"] = +(delta * (cop_single - 1)).toFixed(5);
          delta *= copper_power;
          modRes("Copper", delta * time_multiplier);
          if (global.race["forager"] && global.tech["dowsing"]) {
            let forage = global.tech.dowsing >= 2 ? 5 : 1;
            let foragers = workerScale(global.civic.forager.workers, "forager");
            foragers *= racialTrait(foragers, "forager");
            if (global.race["servants"]) {
              let serve = global.race.servants.jobs.forager;
              serve *= servantTrait(global.race.servants.jobs.forager, "forager");
              foragers += serve;
            }
            let forage_base = foragers * forage * 0.025 * production("psychic_boost", "Copper");
            if (global.city.geology["Copper"]) {
              forage_base *= global.city.geology["Copper"] + 1;
            }
            if (global.city.biome === "volcanic") {
              forage_base *= biomes.volcanic.vars()[1];
            } else if (global.city.biome === "ashland") {
              forage_base *= biomes.ashland.vars()[2];
            }
            breakdown.p["Copper"][jobName("forager")] = forage_base + "v";
            if (forage_base > 0) {
              breakdown.p["Copper"][`\u1102${loc("quarantine")}+1`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes("Copper", forage_base * hunger * global_multiplier * q_multiplier * time_multiplier);
          }
        }
        if (global.resource.Iron.display) {
          let iron_mult = 1 / 4;
          let iron_base = miner_base * iron_mult * production("psychic_boost", "Iron");
          if (global.race["iron_allergy"]) {
            iron_base *= 1 - traits.iron_allergy.vars()[0] / 100;
          }
          let smelter_mult = 1 + iron_smelter * 0.1;
          if (global.city.geology["Iron"]) {
            iron_base *= global.city.geology["Iron"] + 1;
          }
          if (global.city.biome === "volcanic") {
            iron_base *= biomes.volcanic.vars()[2];
          } else if (global.city.biome === "ashland") {
            iron_base *= biomes.ashland.vars()[2];
          }
          let space_iron = 0;
          let synd = syndicate("spc_belt");
          if (support_on["iron_ship"]) {
            space_iron = support_on["iron_ship"] * production("iron_ship") * production("psychic_boost", "Iron");
            space_iron *= synd;
          }
          let iron_power = power_mult;
          let iron_single = power_mult;
          breakdown.p["Iron"][jobName("miner")] = iron_base + "v";
          if (iron_base > 0) {
            breakdown.p["Iron"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
            breakdown.p["Iron"][`\u1102${loc("power")}`] = (iron_power - 1) * 100 + "%";
            if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["mine"] > 0) {
              iron_power = (iron_power - 1) * 0.5 + 1;
              iron_single = (iron_single - 1) * 0.5 + 1;
              breakdown.p["Iron"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            breakdown.p["Iron"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          let pit_miner = 0;
          let womling = 0;
          if (global.tech["isolation"] && global.race["lone_survivor"]) {
            {
              let miner_base2 = workerScale(global.civic.pit_miner.workers, "pit_miner");
              miner_base2 *= racialTrait(miner_base2, "miner");
              let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
              let pit_base = miner_base2 * production("psychic_boost", "Iron");
              pit_base *= production("mining_pit", "iron");
              pit_miner = pit_base * colony_val;
              breakdown.p["Iron"][jobName("pit_miner")] = pit_base + "v";
              if (pit_base > 0) {
                breakdown.p["Iron"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
              }
            }
            if (global.tauceti.hasOwnProperty("womling_mine") && global.tauceti.hasOwnProperty("overseer")) {
              let prod = global.tauceti.overseer.prod / 100;
              let iron_base2 = global.tauceti.womling_mine.miners * production("womling_mine", "iron") * production("psychic_boost", "Iron");
              breakdown.p["Iron"][loc("tau_red_womlings")] = iron_base2 + "v";
              womling = iron_base2 * prod;
              if (iron_base2 > 0) {
                breakdown.p["Iron"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
              }
            }
          }
          breakdown.p["Iron"][jobName("space_miner")] = space_iron + "v";
          if (space_iron > 0) {
            breakdown.p["Iron"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
            breakdown.p["Iron"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            breakdown.p["Iron"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
          }
          if (global.race["gravity_well"]) {
            space_iron = teamster(space_iron);
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Iron"][`\u1102${loc("evo_challenge_gravity_well")}+1`] = -((1 - teamster(1)) * 100) + "%";
          }
          let eship_iron = e_ship["iron"] ? e_ship.iron * womling_technician : 0;
          let delta = (iron_base * tunneler * iron_power * q_multiplier + space_iron * qs_multiplier * zigVal + eship_iron + pit_miner + womling) * smelter_mult * shrineMetal.mult;
          global.city.mine["ipow"] = +(iron_base * q_multiplier * hunger * global_multiplier * (iron_single - 1)).toFixed(5);
          delta *= hunger * global_multiplier;
          if (e_ship["iron"] && e_ship.iron > 0) {
            breakdown.p["Iron"][loc("tau_roid_mining_ship")] = e_ship.iron + "v";
            if (womling_technician > 1) {
              breakdown.p["Iron"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
            }
          }
          breakdown.p["Iron"][loc("city_smelter")] = (smelter_mult - 1) * 100 + "%";
          breakdown.p["Iron"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
          if (global.race["forager"] && global.tech["dowsing"]) {
            let forage = global.tech.dowsing >= 2 ? 2 : 1;
            let foragers = workerScale(global.civic.forager.workers, "forager");
            foragers *= racialTrait(foragers, "forager");
            if (global.race["servants"]) {
              let serve = global.race.servants.jobs.forager;
              serve *= servantTrait(global.race.servants.jobs.forager, "forager");
              foragers += serve;
            }
            let forage_base = foragers * forage * 0.035 * production("psychic_boost", "Iron");
            ;
            if (global.city.geology["Iron"]) {
              forage_base *= global.city.geology["Iron"] + 1;
            }
            if (global.city.biome === "volcanic") {
              forage_base *= biomes.volcanic.vars()[2];
            } else if (global.city.biome === "ashland") {
              forage_base *= biomes.ashland.vars()[2];
            }
            breakdown.p["Iron"][jobName("forager")] = forage_base + "v";
            if (forage_base > 0) {
              breakdown.p["Iron"][`\u1102${loc("quarantine")}+2`] = (q_multiplier - 1) * 100 + "%";
            }
            modRes("Iron", forage_base * hunger * global_multiplier * q_multiplier * time_multiplier);
          }
          breakdown.p["Iron"][loc("hunger")] = (hunger - 1) * 100 + "%";
          modRes("Iron", delta * time_multiplier);
          if (global.tech["titanium"] && global.tech["titanium"] >= 2) {
            let labor_base = highPopAdjust(workerScale(global.civic.miner.workers, "miner")) / 4;
            if (support_on["iron_ship"]) {
              labor_base += support_on["iron_ship"] / 2;
            }
            let iron = labor_base * iron_smelter * 0.1;
            delta = iron * global_multiplier;
            if (star_forge > 0) {
              delta *= 1 + star_forge / 50;
            }
            if (global.city.geology["Titanium"]) {
              delta *= global.city.geology["Titanium"] + 1;
            }
            if (global.city.biome === "oceanic") {
              delta *= biomes.oceanic.vars()[0];
            }
            delta *= shrineMetal.mult * production("psychic_boost", "Titanium");
            let divisor2 = global.tech["titanium"] >= 3 ? 10 : 25;
            modRes("Titanium", delta * time_multiplier / divisor2);
            breakdown.p["Titanium"][loc("resource_Iron_name")] = iron / divisor2 + "v";
          }
        }
        if (global.race["sappy"]) {
          if (global.city["metal_refinery"] && global.city["metal_refinery"].count > 0 || global.race["cataclysm"] || global.race["orbit_decayed"]) {
            let base = 0;
            if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
              if (global.tech["mars"] && support_on["red_mine"]) {
                base = support_on["red_mine"] * workerScale(global.civic.colonist.workers, "colonist") * production("red_mine", "aluminium");
              }
            } else {
              base = miner_base * power_mult * 0.088;
            }
            if (global.city.geology["Aluminium"]) {
              base *= global.city.geology["Aluminium"] + 1;
            }
            base *= production("psychic_boost", "Aluminium");
            let delta = base * shrineMetal.mult * hunger * global_multiplier;
            if (global.tech["alumina"] >= 2) {
              refinery += p_on["metal_refinery"] * 6;
            }
            delta *= 1 + refinery / 100;
            breakdown.p["Aluminium"][`${global.race["cataclysm"] || global.race["orbit_decayed"] ? structName("mine") : jobName("miner")}+2`] = base + "v";
            if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && base > 0 && zigVal > 0) {
              delta *= zigVal;
              breakdown.p["Aluminium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            }
            breakdown.p["Aluminium"][loc("city_shrine")] = (shrineMetal.mult - 1) * 100 + "%";
            breakdown.p["Aluminium"][loc("hunger")] = (hunger - 1) * 100 + "%";
            modRes("Aluminium", delta * time_multiplier);
          }
          if (global.race["smoldering"] && global.resource.Chrysotile.display) {
            let cry_base = miner_base / 2 * production("psychic_boost", "Chrysotile");
            let cry_power = power_mult;
            breakdown.p["Chrysotile"][jobName("miner")] = cry_base + "v";
            if (cry_base > 0) {
              breakdown.p["Chrysotile"][`\u1102${loc("power")}`] = (cry_power - 1) * 100 + "%";
              if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["mine"] > 0) {
                cry_power = (cry_power - 1) * 0.5 + 1;
                breakdown.p["Chrysotile"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
              }
            }
            let delta = cry_base * cry_power;
            delta *= hunger * global_multiplier;
            breakdown.p["Chrysotile"][loc("hunger")] = (hunger - 1) * 100 + "%";
            modRes("Chrysotile", delta * time_multiplier);
          }
        }
      }
      {
        if (global.interstellar["mining_droid"] && miner_droids["alum"] > 0) {
          let base = miner_droids["alum"] * 2.75 * production("psychic_boost", "Aluminium");
          let delta = base * shrineMetal.mult * global_multiplier * zigVal;
          delta *= 1 + refinery / 100;
          breakdown.p["Aluminium"][loc("interstellar_mining_droid_title")] = base + "v";
          if (base > 0) {
            breakdown.p["Aluminium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          }
          modRes("Aluminium", delta * time_multiplier);
        }
        if (global.resource.Aluminium.display && global.space["titan_mine"]) {
          let synd = syndicate("spc_titan");
          let titan_colonists = p_on["ai_colonist"] ? workerScale(global.civic.titan_colonist.workers, "titan_colonist") + jobScale(p_on["ai_colonist"]) : workerScale(global.civic.titan_colonist.workers, "titan_colonist");
          let alum_base = production("titan_mine", "aluminium") * support_on["titan_mine"] * titan_colonists * production("psychic_boost", "Aluminium");
          let alum_delta = alum_base * shrineMetal.mult * global_multiplier * qs_multiplier * synd * zigVal;
          alum_delta *= 1 + refinery / 100;
          breakdown.p["Aluminium"][`${loc("city_mine")}+0`] = +alum_base.toFixed(3) + "v";
          if (alum_base > 0) {
            breakdown.p["Aluminium"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
            breakdown.p["Aluminium"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
            breakdown.p["Aluminium"][`\u1102${loc("quarantine")}+2`] = (qs_multiplier - 1) * 100 + "%";
          }
          modRes("Aluminium", alum_delta * time_multiplier);
        }
        if (global.resource.Aluminium.display && e_ship["aluminium"] && e_ship.aluminium > 0) {
          let alum_delta = e_ship.aluminium * shrineMetal.mult * global_multiplier * womling_technician;
          alum_delta *= 1 + refinery / 100;
          breakdown.p["Aluminium"][loc("tau_roid_mining_ship")] = e_ship.aluminium + "v";
          if (womling_technician > 1) {
            breakdown.p["Aluminium"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
          }
          modRes("Aluminium", alum_delta * time_multiplier);
        }
        if (refinery > 0) {
          breakdown.p["Aluminium"][loc("city_metal_refinery")] = refinery + "%";
          breakdown.p["Aluminium"][`\u1102${loc("quarantine")}+3`] = (q_multiplier - 1) * 100 + "%";
        }
      }
      if (support_on["red_mine"] && support_on["red_mine"] > 0) {
        let synd = syndicate("spc_red");
        let copper_base = support_on["red_mine"] * workerScale(global.civic.colonist.workers, "colonist") * production("red_mine", "copper").f;
        copper_base *= production("psychic_boost", "Copper");
        breakdown.p["Copper"][loc("space_red_mine_desc_bd", [planetName().red])] = copper_base + "v";
        if (copper_base > 0) {
          breakdown.p["Copper"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Copper"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Copper"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Copper", copper_base * shrineMetal.mult * time_multiplier * global_multiplier * qs_multiplier * hunger * synd * zigVal);
        let titanium_base = support_on["red_mine"] * workerScale(global.civic.colonist.workers, "colonist") * hunger * production("red_mine", "titanium").f;
        titanium_base *= production("psychic_boost", "Titanium");
        breakdown.p["Titanium"][loc("space_red_mine_desc_bd", [planetName().red])] = titanium_base + "v";
        if (titanium_base > 0) {
          breakdown.p["Titanium"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Titanium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Titanium"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Titanium", titanium_base * shrineMetal.mult * time_multiplier * global_multiplier * qs_multiplier * synd * zigVal);
      }
      if (shrineBonusActive()) {
        breakdown.p["Copper"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
        breakdown.p["Titanium"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
      }
      breakdown.p["Copper"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (breakdown.p["Uranium"].hasOwnProperty(loc("city_coal_ash"))) {
        breakdown.p["Uranium"][loc("city_coal_ash")] = breakdown.p["Uranium"][loc("city_coal_ash")] + "v";
      }
      if (global.resource.Coal.display) {
        let coal_base = workerScale(global.race["warlord"] ? global.civic.miner.workers : global.civic.coal_miner.workers, "coal_miner");
        coal_base *= racialTrait(coal_base, "miner");
        if (global.race["tough"]) {
          coal_base *= 1 + traits.tough.vars()[0] / 100;
        }
        let ogreFathom = fathomCheck("ogre");
        if (ogreFathom > 0) {
          coal_base *= 1 + traits.tough.vars(1)[0] / 100 * ogreFathom;
        }
        if (global.race["resilient"]) {
          let bonus = 1 + traits.resilient.vars()[0] * global.race["resilient"] / 100;
          coal_base *= bonus;
        }
        if (!global.race["living_tool"] && !global.race["tusk"]) {
          coal_base *= (global.tech["pickaxe"] && global.tech.pickaxe > 0 ? global.tech.pickaxe * 0.12 : 0) + 1;
        }
        if (global.tech["explosives"] && global.tech.explosives >= 2) {
          coal_base *= 0.95 + global.tech.explosives * 0.15;
        }
        if (global.city.geology["Coal"]) {
          coal_base *= global.city.geology["Coal"] + 1;
        }
        let power_mult = 1;
        let coal_single = 1;
        if (global.city["coal_mine"]["on"]) {
          power_mult += p_on["coal_mine"] * 0.05;
          coal_single += 0.05;
        }
        let tunneler = 1;
        if (global.race["warlord"] && global.portal["tunneler"]) {
          tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
        }
        coal_base *= global.civic.coal_miner.impact * production("psychic_boost", "Coal");
        breakdown.p["Coal"][global.race["warlord"] ? jobName("miner") : jobName("coal_miner")] = coal_base + "v";
        if (coal_base > 0) {
          breakdown.p["Coal"][`\u1102${loc("power")}`] = (power_mult - 1) * 100 + "%";
          breakdown.p["Coal"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
          breakdown.p["Coal"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
        }
        if (global.race["discharge"] && global.race["discharge"] > 0 && p_on["coal_mine"] > 0) {
          power_mult = (power_mult - 1) * 0.5 + 1;
          coal_single = (coal_single - 1) * 0.5 + 1;
          breakdown.p["Coal"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
        }
        if (global.race["cataclysm"] && support_on["iridium_mine"]) {
          coal_base = support_on["iridium_mine"] * production("iridium_mine", "coal");
          coal_base *= production("psychic_boost", "Coal");
          breakdown.p["Coal"][loc("space_moon_iridium_mine_title")] = coal_base + "v";
          if (coal_base > 0) {
            breakdown.p["Coal"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
            breakdown.p["Coal"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
          }
          power_mult = 1 * zigVal;
        }
        let delta = coal_base * tunneler * hunger * q_multiplier * global_multiplier;
        global.city.coal_mine["cpow"] = +(delta * (coal_single - 1)).toFixed(5);
        delta *= power_mult;
        breakdown.p["Coal"][loc("hunger")] = (hunger - 1) * 100 + "%";
        if (global.interstellar["mining_droid"] && miner_droids["coal"] > 0) {
          let driod_base = miner_droids["coal"] * 3.75 * production("psychic_boost", "Coal");
          let driod_delta = driod_base * global_multiplier * zigVal;
          breakdown.p["Coal"][loc("interstellar_mining_droid_title")] = driod_base + "v";
          if (driod_base > 0) {
            breakdown.p["Coal"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          }
          modRes("Coal", driod_delta * time_multiplier);
        }
        modRes("Coal", delta * time_multiplier);
        if (global.resource.Uranium.display) {
          let uranium = delta / (global.race["cataclysm"] ? 48 : 115) * production("psychic_boost", "Uranium");
          global.city.coal_mine["upow"] = +(global.city.coal_mine["cpow"] / (global.race["cataclysm"] ? 48 : 115)).toFixed(5);
          if (global.city.geology["Uranium"]) {
            uranium *= global.city.geology["Uranium"] + 1;
          }
          breakdown.p["Uranium"][global.race["cataclysm"] ? loc("space_moon_iridium_mine_title") : global.race["warlord"] ? jobName("miner") : jobName("coal_miner")] = uranium / global_multiplier + "v";
          let u_delta = uranium * tunneler;
          if (u_delta > 0) {
            breakdown.p["Uranium"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
          }
          modRes("Uranium", u_delta * time_multiplier);
        }
      }
      if (global.race["warlord"] && global.portal["tunneler"] && global.portal.tunneler.count > 0) {
        let res_base = workerScale(global.civic.miner.workers, "miner");
        res_base *= racialTrait(res_base, "miner");
        if (global.race["tough"]) {
          res_base *= 1 + traits.tough.vars()[0] / 100;
        }
        let ogreFathom = fathomCheck("ogre");
        if (ogreFathom > 0) {
          res_base *= 1 + traits.tough.vars(1)[0] / 100 * ogreFathom;
        }
        if (global.race["resilient"]) {
          let bonus = 1 + traits.resilient.vars()[0] * global.race["resilient"] / 100;
          res_base *= bonus;
        }
        if (!global.race["living_tool"] && !global.race["tusk"]) {
          res_base *= (global.tech["pickaxe"] && global.tech.pickaxe > 0 ? global.tech.pickaxe * 0.12 : 0) + 1;
        }
        if (global.tech["explosives"] && global.tech.explosives >= 2) {
          res_base *= 0.95 + global.tech.explosives * 0.15;
        }
        let tunneler = 1;
        if (global.race["warlord"] && global.portal["tunneler"]) {
          tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
        }
        ["Neutronium", "Adamantite", "Bolognium", "Orichalcum"].forEach(function(res) {
          let cur_base = res_base;
          cur_base *= production("psychic_boost", res);
          switch (res) {
            case "Neutronium":
              cur_base /= 10;
              break;
            case "Adamantite":
              cur_base /= 5;
              break;
            case "Bolognium":
              cur_base /= 8;
              break;
            case "Orichalcum":
              cur_base /= 6;
              break;
          }
          breakdown.p[res][jobName("miner")] = cur_base + "v";
          if (cur_base > 0) {
            breakdown.p[res][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
            breakdown.p[res][loc("hunger")] = (hunger - 1) * 100 + "%";
          }
          let delta = cur_base * tunneler;
          delta *= hunger * q_multiplier * global_multiplier;
          modRes(res, delta * time_multiplier);
        });
      }
      if (global.interstellar["mining_droid"] && miner_droids["uran"] > 0) {
        let driod_base = miner_droids["uran"] * 0.12 * production("psychic_boost", "Uranium");
        let driod_delta = driod_base * global_multiplier * zigVal;
        breakdown.p["Uranium"][loc("interstellar_mining_droid_title")] = driod_base + "v";
        if (driod_base > 0) {
          breakdown.p["Uranium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Uranium", driod_delta * time_multiplier);
      }
      if (global.space["uranium_mine"] && p_on["uranium_mine"]) {
        let synd = syndicate("spc_kuiper");
        let mine_base = p_on["uranium_mine"] * production("uranium_mine") * production("psychic_boost", "Uranium");
        let mine_delta = mine_base * global_multiplier * qs_multiplier * synd * zigVal;
        breakdown.p["Uranium"][loc("space_kuiper_mine", [global.resource.Uranium.name])] = mine_base + "v";
        if (mine_base > 0) {
          breakdown.p["Uranium"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Uranium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Uranium"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Uranium", mine_delta * time_multiplier);
      }
      if (global.resource.Oil.display) {
        let whale_oil = 0;
        if (global.tauceti["whaling_station"] && global.tauceti["whaling_ship"]) {
          global.tauceti.whaling_station.max = global.tauceti.whaling_station.count * 750;
          if (global.tauceti.whaling_station.fill > 0) {
            let raw = p_on["whaling_station"] * production("whaling_station");
            if (raw > global.tauceti.whaling_station.fill) {
              raw = global.tauceti.whaling_station.fill;
            }
            global.tauceti.whaling_station.fill -= raw * time_multiplier;
            whale_oil = raw * production("whaling_ship_oil") * production("psychic_boost", "Oil");
          }
          let blubber = support_on["whaling_ship"] * production("whaling_ship");
          global.tauceti.whaling_station.fill += blubber * time_multiplier;
          if (global.tauceti.whaling_station.fill > global.tauceti.whaling_station.max) {
            global.tauceti.whaling_station.fill = global.tauceti.whaling_station.max;
          }
        }
        let synd = syndicate("spc_gas_moon");
        let fueled_oil_wells = global.race["warlord"] ? global.portal.pumpjack.count : global.city.oil_well.count;
        let fueled_oil_extractor = p_on["oil_extractor"];
        let oil_prod = global.city["oil_well"] ? production("oil_well") : 0;
        let oil_prod_mod = q_multiplier;
        let extract_prod = global.space["oil_extractor"] ? production("oil_extractor") : 0;
        let extract_prod_mod = qs_multiplier * synd * zigVal;
        if (global.race["blubber"]) {
          let tick = traits.blubber.vars()[0] * time_multiplier / 5;
          let check_dead = function(amount) {
            if (amount > 0) {
              if (global.city.oil_well.dead < amount * tick) {
                amount = Math.floor(global.city.oil_well.dead / tick);
              }
              global.city.oil_well.dead -= amount * tick;
              if (global.city.oil_well.dead < tick) {
                global.city.oil_well.dead = 0;
              }
            }
            return amount;
          };
          if (oil_prod * oil_prod_mod >= extract_prod * extract_prod_mod) {
            fueled_oil_wells = check_dead(fueled_oil_wells);
            fueled_oil_extractor = check_dead(fueled_oil_extractor);
          } else {
            fueled_oil_extractor = check_dead(fueled_oil_extractor);
            fueled_oil_wells = check_dead(fueled_oil_wells);
          }
        }
        let oil_well = oil_prod * fueled_oil_wells;
        let oil_extractor = extract_prod * fueled_oil_extractor;
        oil_extractor *= production("psychic_boost", "Oil");
        oil_well *= production("psychic_boost", "Oil");
        let delta = oil_well * oil_prod_mod + oil_extractor * extract_prod_mod + whale_oil * womling_technician;
        delta *= hunger * global_multiplier;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        if (global.space["oil_extractor"]) {
          global.space.oil_extractor["lpmod"] = production("oil_extractor") * qs_multiplier * synd * zigVal;
        }
        breakdown.p["Oil"][global.race["warlord"] ? loc("portal_pumpjack_title") : loc("city_oil_well")] = oil_well + "v";
        if (oil_well > 0) {
          breakdown.p["Oil"][`\u1102${loc("quarantine")}+0`] = (q_multiplier - 1) * 100 + "%";
        }
        breakdown.p["Oil"][loc("space_gas_moon_oil_extractor_title")] = oil_extractor + "v";
        if (oil_extractor > 0) {
          breakdown.p["Oil"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Oil"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Oil"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
        }
        breakdown.p["Oil"][loc("tau_roid_whaling_ship")] = whale_oil + "v";
        if (womling_technician > 1) {
          breakdown.p["Oil"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        if (global.race["gravity_well"]) {
          breakdown.p["Oil"][`${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
        }
        breakdown.p["Oil"][loc("hunger")] = (hunger - 1) * 100 + "%";
        modRes("Oil", delta * time_multiplier);
      }
      let iridium_smelter_mult = 1 + iridium_smelter;
      if (support_on["iridium_mine"] || global.race["warlord"]) {
        let iridium_base = 0;
        if (global.race["warlord"]) {
          iridium_base = workerScale(global.civic.miner.workers, "miner");
          iridium_base *= racialTrait(iridium_base, "miner");
          iridium_base *= 0.45;
        } else {
          iridium_base = support_on["iridium_mine"] * production("iridium_mine", "iridium").f;
        }
        let tunneler = 1;
        if (global.race["warlord"] && global.portal["tunneler"]) {
          tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
        }
        iridium_base *= production("psychic_boost", "Iridium");
        let synd = syndicate("spc_moon");
        let delta = iridium_base * tunneler * hunger * shrineMetal.mult * global_multiplier * synd * qs_multiplier * iridium_smelter_mult * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Iridium"][global.race["warlord"] ? jobName("miner") : loc("space_moon_iridium_mine_title")] = iridium_base + "v";
        if (iridium_base > 0) {
          breakdown.p["Iridium"][`\u1102${loc("city_smelter")}+0`] = iridium_smelter * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("portal_tunneler_bd")}+0`] = (tunneler - 1) * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("space_syndicate")}+0`] = -((1 - synd) * 100) + "%";
          breakdown.p["Iridium"][`\u1102${loc("space_red_ziggurat_title")}+0`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["gravity_well"]) {
            breakdown.p["Iridium"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Iridium", delta * time_multiplier);
      }
      if (support_on["iridium_ship"]) {
        let iridium_base = support_on["iridium_ship"] * production("iridium_ship");
        iridium_base *= production("psychic_boost", "Iridium");
        let synd = syndicate("spc_belt");
        let delta = iridium_base * hunger * shrineMetal.mult * global_multiplier * synd * qs_multiplier * iridium_smelter_mult * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Iridium"][jobName("space_miner")] = iridium_base + "v";
        if (iridium_base > 0) {
          breakdown.p["Iridium"][`\u1102${loc("city_smelter")}+1`] = iridium_smelter * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("space_syndicate")}+1`] = -((1 - synd) * 100) + "%";
          breakdown.p["Iridium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["gravity_well"]) {
            breakdown.p["Iridium"][`\u1102${loc("evo_challenge_gravity_well")}+1`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Iridium", delta * time_multiplier);
      }
      if (p_on["s_gate"] && global.resource.Adamantite.display && global.galaxy["armed_miner"] && gal_on["armed_miner"] > 0) {
        let base = gal_on["armed_miner"] * 0.65 * production("psychic_boost", "Iridium");
        let foothold = 1 + (gal_on["ore_processor"] ?? 0) * 0.1;
        let pirate = piracy("gxy_alien2");
        let delta = base * global_multiplier * pirate * foothold * hunger * shrineMetal.mult * iridium_smelter_mult * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Iridium"][loc("galaxy_armed_miner_bd")] = base + "v";
        if (base > 0) {
          breakdown.p["Iridium"][`\u1102${loc("galaxy_ore_processor")}`] = -((1 - foothold) * 100) + "%";
          breakdown.p["Iridium"][`\u1102${loc("city_smelter")}+2`] = iridium_smelter * 100 + "%";
          breakdown.p["Iridium"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Iridium"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
          if (global.race["gravity_well"]) {
            breakdown.p["Iridium"][`\u1102${loc("evo_challenge_gravity_well")}+2`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Iridium", delta * time_multiplier);
      }
      if (global.resource.Iridium.display && e_ship["iridium"] && e_ship.iridium > 0) {
        let iridium_delta = e_ship.iridium * shrineMetal.mult * global_multiplier * iridium_smelter_mult * hunger * womling_technician;
        if (global.race["gravity_well"]) {
          iridium_delta = teamster(iridium_delta);
        }
        breakdown.p["Iridium"][loc("tau_roid_mining_ship")] = e_ship.iridium + "v";
        breakdown.p["Iridium"][`\u1102${loc("city_smelter")}+3`] = iridium_smelter * 100 + "%";
        if (womling_technician > 1) {
          breakdown.p["Iridium"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        if (global.race["gravity_well"]) {
          breakdown.p["Iridium"][`\u1102${loc("evo_challenge_gravity_well")}+3`] = -((1 - teamster(1)) * 100) + "%";
        }
        modRes("Iridium", iridium_delta * time_multiplier);
      }
      if (global.space["moon_base"] && support_on["helium_mine"] || global.race["warlord"]) {
        let helium_base = (global.race["warlord"] ? global.portal.pumpjack.count : support_on["helium_mine"]) * production("helium_mine").f;
        helium_base *= production("psychic_boost", "Helium_3");
        let synd = syndicate("spc_moon");
        let delta = helium_base * hunger * global_multiplier * synd * qs_multiplier * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Helium_3"][global.race["warlord"] ? loc("portal_pumpjack_title") : loc("space_moon_helium_mine_title")] = helium_base + "v";
        if (helium_base > 0) {
          breakdown.p["Helium_3"][`\u1102${loc("space_syndicate")}+0`] = -((1 - synd) * 100) + "%";
          breakdown.p["Helium_3"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Helium_3"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["gravity_well"]) {
            breakdown.p["Helium_3"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Helium_3", delta * time_multiplier);
      }
      if (global.space["gas_mining"] && p_on["gas_mining"]) {
        let gas_mining = p_on["gas_mining"] * production("gas_mining");
        gas_mining *= production("psychic_boost", "Helium_3");
        let synd = syndicate("spc_gas");
        let delta = gas_mining * hunger * global_multiplier * synd * qs_multiplier * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Helium_3"][loc("space_gas_mining_title")] = gas_mining + "v";
        if (gas_mining > 0) {
          breakdown.p["Helium_3"][`\u1102${loc("space_syndicate")}+1`] = -((1 - synd) * 100) + "%";
          breakdown.p["Helium_3"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Helium_3"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["gravity_well"]) {
            breakdown.p["Helium_3"][`\u1102${loc("evo_challenge_gravity_well")}+1`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Helium_3", delta * time_multiplier);
      }
      if (p_on["refueling_station"]) {
        let gas_mining = p_on["refueling_station"] * production("refueling_station");
        gas_mining *= production("psychic_boost", "Helium_3");
        let delta = gas_mining * hunger * global_multiplier * womling_technician;
        breakdown.p["Helium_3"][loc("tau_gas_refueling_station_title")] = gas_mining + "v";
        if (womling_technician > 1) {
          breakdown.p["Helium_3"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        modRes("Helium_3", delta * time_multiplier);
      }
      if (global.interstellar["harvester"] && int_on["harvester"]) {
        let gas_mining = int_on["harvester"] * production("harvester", "helium");
        gas_mining *= production("psychic_boost", "Helium_3");
        let delta = gas_mining * hunger * global_multiplier * zigVal;
        breakdown.p["Helium_3"][loc("interstellar_harvester_title")] = gas_mining + "v";
        if (gas_mining > 0) {
          breakdown.p["Helium_3"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            breakdown.p["Helium_3"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
        }
        modRes("Helium_3", delta * time_multiplier);
        if (global.tech["ram_scoop"]) {
          let deut_mining = int_on["harvester"] * production("harvester", "deuterium");
          deut_mining *= production("psychic_boost", "Deuterium");
          let deut_delta = deut_mining * hunger * global_multiplier * zigVal;
          breakdown.p["Deuterium"][loc("interstellar_harvester_title")] = deut_mining + "v";
          if (deut_mining > 0) {
            breakdown.p["Deuterium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          }
          modRes("Deuterium", deut_delta * time_multiplier);
        }
      }
      if (p_on["s_gate"] && global.galaxy["raider"] && gal_on["raider"] > 0) {
        let base = gal_on["raider"] * 0.65 * production("psychic_boost", "Deuterium");
        let pirate = piracy("gxy_chthonian");
        let delta = base * global_multiplier * pirate * hunger * zigVal;
        breakdown.p["Deuterium"][loc("galaxy_raider")] = base + "v";
        if (base > 0) {
          breakdown.p["Deuterium"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Deuterium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Deuterium", delta * time_multiplier);
      }
      breakdown.p["Helium_3"][loc("hunger")] = (hunger - 1) * 100 + "%";
      breakdown.p["Deuterium"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (p_on["outpost"]) {
        let p_values = production("outpost");
        let psy = production("psychic_boost", "Neutronium");
        breakdown.p["Neutronium"][loc("space_gas_moon_outpost_bd")] = p_values.b * psy * p_on["outpost"] + "v";
        if (global.tech["drone"]) {
          breakdown.p["Neutronium"][`\u1102${loc("tech_worker_drone")}`] = p_values.d * 100 + "%";
        }
        let synd = syndicate("spc_gas_moon");
        let delta = p_on["outpost"] * p_values.n * psy * hunger * global_multiplier * qs_multiplier * synd * zigVal;
        global.space.outpost["lpmod"] = p_values.n * psy * hunger * global_multiplier * qs_multiplier * synd * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        if (p_values.b > 0) {
          breakdown.p["Neutronium"][`\u1102${loc("space_syndicate")}+0`] = -((1 - synd) * 100) + "%";
          breakdown.p["Neutronium"][`\u1102${loc("space_red_ziggurat_title")}+0`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Neutronium"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            global.space.outpost["lpmod"] *= 0.5;
            breakdown.p["Neutronium"][`\u1102${loc("evo_challenge_discharge")}+0`] = "-50%";
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Neutronium"][`\u1102${loc("evo_challenge_gravity_well")}+0`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Neutronium", delta * time_multiplier);
      }
      if (p_on["neutron_miner"]) {
        let n_base = p_on["neutron_miner"] * production("neutron_miner") * production("psychic_boost", "Neutronium");
        let delta = n_base * hunger * global_multiplier * zigVal;
        breakdown.p["Neutronium"][loc("interstellar_neutron_miner_bd")] = n_base + "v";
        global.interstellar.neutron_miner["lpmod"] = production("neutron_miner") * hunger * global_multiplier * zigVal;
        if (n_base > 0) {
          breakdown.p["Neutronium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            global.interstellar.neutron_miner["lpmod"] *= 0.5;
            breakdown.p["Neutronium"][`\u1102${loc("evo_challenge_discharge")}+1`] = "-50%";
          }
        }
        modRes("Neutronium", delta * time_multiplier);
      }
      if (p_on["s_gate"] && global.galaxy["raider"] && gal_on["raider"] > 0) {
        let base = gal_on["raider"] * 0.8 * production("psychic_boost", "Neutronium");
        let pirate = piracy("gxy_chthonian");
        let delta = base * global_multiplier * pirate * hunger * zigVal;
        breakdown.p["Neutronium"][loc("galaxy_raider")] = base + "v";
        if (base > 0) {
          breakdown.p["Neutronium"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Neutronium"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Neutronium", delta * time_multiplier);
      }
      if (global.space["neutronium_mine"] && p_on["neutronium_mine"]) {
        let synd = syndicate("spc_kuiper");
        let mine_base = p_on["neutronium_mine"] * production("neutronium_mine") * production("psychic_boost", "Neutronium");
        let mine_delta = mine_base * global_multiplier * qs_multiplier * synd * zigVal;
        breakdown.p["Neutronium"][loc("space_kuiper_mine", [global.resource.Neutronium.name])] = mine_base + "v";
        if (mine_base > 0) {
          breakdown.p["Neutronium"][`\u1102${loc("space_syndicate")}+1`] = -((1 - synd) * 100) + "%";
          breakdown.p["Neutronium"][`\u1102${loc("space_red_ziggurat_title")}+3`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Neutronium"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Neutronium", mine_delta * time_multiplier);
      }
      if (global.resource.Neutronium.display && e_ship["neutronium"] && e_ship.neutronium > 0) {
        let neutronium_delta = e_ship.neutronium * global_multiplier * womling_technician;
        breakdown.p["Neutronium"][loc("tau_roid_mining_ship")] = e_ship.neutronium + "v";
        if (womling_technician > 1) {
          breakdown.p["Neutronium"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        modRes("Neutronium", neutronium_delta * time_multiplier);
      }
      if (support_on["elerium_ship"]) {
        let elerium_base = support_on["elerium_ship"] * production("elerium_ship") * production("psychic_boost", "Elerium");
        let synd = syndicate("spc_belt");
        let delta = elerium_base * hunger * global_multiplier * qs_multiplier * synd * zigVal;
        if (global.race["gravity_well"]) {
          delta = teamster(delta);
        }
        breakdown.p["Elerium"][jobName("space_miner")] = elerium_base + "v";
        if (elerium_base > 0) {
          breakdown.p["Elerium"][`\u1102${loc("space_syndicate")}+0`] = -((1 - synd) * 100) + "%";
          breakdown.p["Elerium"][`\u1102${loc("space_red_ziggurat_title")}+0`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Elerium"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.75;
            breakdown.p["Elerium"][`\u1102${loc("evo_challenge_discharge")}`] = "-25%";
          }
          if (global.race["gravity_well"]) {
            breakdown.p["Elerium"][`\u1102${loc("evo_challenge_gravity_well")}+1`] = -((1 - teamster(1)) * 100) + "%";
          }
        }
        modRes("Elerium", delta * time_multiplier);
      }
      if (int_on["elerium_prospector"]) {
        let elerium_base = int_on["elerium_prospector"] * production("elerium_prospector") * production("psychic_boost", "Elerium");
        let delta = elerium_base * hunger * global_multiplier * zigVal;
        breakdown.p["Elerium"][loc("interstellar_elerium_prospector_bd")] = elerium_base + "v";
        if (elerium_base > 0) {
          breakdown.p["Elerium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Elerium", delta * time_multiplier);
      }
      if (global.space["elerium_mine"] && p_on["elerium_mine"]) {
        let synd = syndicate("spc_kuiper");
        let mine_base = p_on["elerium_mine"] * production("elerium_mine") * production("psychic_boost", "Elerium");
        let mine_delta = mine_base * global_multiplier * qs_multiplier * synd * hunger * zigVal;
        breakdown.p["Elerium"][loc("space_kuiper_mine", [global.resource.Elerium.name])] = mine_base + "v";
        if (mine_base > 0) {
          breakdown.p["Elerium"][`\u1102${loc("space_syndicate")}+1`] = -((1 - synd) * 100) + "%";
          breakdown.p["Elerium"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Elerium"][`\u1102${loc("quarantine")}+1`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Elerium", mine_delta * time_multiplier);
      }
      if (global.resource.Elerium.display && e_ship["elerium"] && e_ship.elerium > 0) {
        let elerium_delta = e_ship.elerium * global_multiplier * womling_technician;
        breakdown.p["Elerium"][loc("tau_roid_mining_ship")] = e_ship.elerium + "v";
        if (womling_technician > 1) {
          breakdown.p["Elerium"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        modRes("Elerium", elerium_delta * time_multiplier);
      }
      breakdown.p["Elerium"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (global.resource.Adamantite.display && global.interstellar["mining_droid"] && miner_droids["adam"] > 0) {
        let driod_base = miner_droids["adam"] * 0.075 * production("psychic_boost", "Adamantite");
        let driod_delta = driod_base * shrineMetal.mult * global_multiplier * zigVal;
        breakdown.p["Adamantite"][loc("interstellar_mining_droid_title")] = driod_base + "v";
        if (driod_base > 0) {
          if (global.interstellar["processing"] && int_on["processing"]) {
            let rate = 0.12;
            if (global.tech["ai_core"] && global.tech["ai_core"] >= 2 && p_on["citadel"] > 0) {
              rate += p_on["citadel"] * 0.02;
            }
            let bonus = int_on["processing"] * rate;
            breakdown.p["Adamantite"][`\u1102${loc("interstellar_processing_title")}`] = bonus * 100 + "%";
            if (global.race["discharge"] && global.race["discharge"] > 0) {
              bonus *= 0.5;
              breakdown.p["Adamantite"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
            }
            driod_delta *= 1 + bonus;
          }
          breakdown.p["Adamantite"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Adamantite", driod_delta * time_multiplier);
      }
      if (p_on["s_gate"] && global.resource.Adamantite.display && global.galaxy["armed_miner"] && gal_on["armed_miner"] > 0) {
        let base = gal_on["armed_miner"] * 0.23 * production("psychic_boost", "Adamantite");
        let foothold = 1 + (gal_on["ore_processor"] ?? 0) * 0.1;
        let pirate = piracy("gxy_alien2");
        let delta = base * global_multiplier * pirate * foothold * shrineMetal.mult * zigVal;
        breakdown.p["Adamantite"][loc("galaxy_armed_miner_bd")] = base + "v";
        if (base > 0) {
          breakdown.p["Adamantite"][`\u1102${loc("galaxy_ore_processor")}`] = -((1 - foothold) * 100) + "%";
          breakdown.p["Adamantite"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Adamantite"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
        }
        modRes("Adamantite", delta * time_multiplier);
      }
      if (global.resource.Adamantite.display && global.space["titan_mine"]) {
        let synd = syndicate("spc_titan");
        let titan_colonists = p_on["ai_colonist"] ? workerScale(global.civic.titan_colonist.workers, "titan_colonist") + jobScale(p_on["ai_colonist"]) : workerScale(global.civic.titan_colonist.workers, "titan_colonist");
        let adam_base = production("titan_mine", "adamantite") * support_on["titan_mine"] * titan_colonists * production("psychic_boost", "Adamantite");
        let adam_delta = adam_base * shrineMetal.mult * global_multiplier * qs_multiplier * synd * zigVal;
        breakdown.p["Adamantite"][loc("city_mine")] = adam_base + "v";
        if (adam_base > 0) {
          breakdown.p["Adamantite"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Adamantite"][`\u1102${loc("space_red_ziggurat_title")}+2`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Adamantite"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Adamantite", adam_delta * time_multiplier);
      }
      if (global.resource.Infernite.display) {
        let workers = global.race["warlord"] ? global.tech?.hellspawn >= 2 && global.portal?.tunneler?.count >= 1 ? global.civic.miner.workers : 0 : global.civic.hell_surveyor.workers;
        if (workers > 0) {
          let rate = global.tech.infernite >= 3 ? 0.015 : 0.01;
          if (global.race["warlord"]) {
            rate = 75e-4;
          }
          let surveyor_base = workerScale(highPopAdjust(workers), "hell_surveyor") * rate * production("psychic_boost", "Infernite");
          let sensors = 1;
          if (global.tech["infernite"] >= 2 && p_on["sensor_drone"]) {
            let drone_rate = global.tech.infernite >= 4 ? global.tech.infernite >= 6 ? 0.5 : 0.2 : 0.1;
            sensors = 1 + p_on["sensor_drone"] * drone_rate;
          }
          let runner = govActive("runner", 1);
          let runBonus = 1;
          if (runner) {
            runBonus = 1 + runner / 100;
          }
          let tunneler = 1;
          if (global.race["warlord"] && global.portal["tunneler"]) {
            tunneler = 1 + (global.portal.tunneler.rank + 3) / 100 * global.portal.tunneler.count;
          }
          let surveyor_delta = surveyor_base * tunneler * sensors * runBonus * global_multiplier;
          breakdown.p["Infernite"][global.race["warlord"] ? jobName("miner") : jobName("hell_surveyor")] = surveyor_base + "v";
          breakdown.p["Infernite"][`\u1102${loc("portal_sensor_drone_title")}`] = (sensors - 1) * 100 + "%";
          breakdown.p["Infernite"][`\u1102${loc("portal_tunneler_bd")}`] = (tunneler - 1) * 100 + "%";
          modRes("Infernite", surveyor_delta * time_multiplier);
        }
        if (p_on["infernite_mine"]) {
          let rate = production("infernite_mine");
          let mine_base = p_on["infernite_mine"] * rate * production("psychic_boost", "Infernite");
          let mine_delta = mine_base * global_multiplier;
          global.portal.infernite_mine["lpmod"] = rate * global_multiplier;
          breakdown.p["Infernite"][loc("city_mine")] = mine_base + "v";
          modRes("Infernite", mine_delta * time_multiplier);
        }
      }
      if (p_on["s_gate"] && global.resource.Bolognium.display && global.galaxy["bolognium_ship"] && gal_on["bolognium_ship"] > 0) {
        let base = gal_on["bolognium_ship"] * production("bolognium_ship") * production("psychic_boost", "Bolognium");
        let pirate = piracy("gxy_gateway");
        let delta = base * global_multiplier * pirate * zigVal;
        breakdown.p["Bolognium"][loc("galaxy_bolognium_ship")] = base + "v";
        if (base > 0) {
          breakdown.p["Bolognium"][`\u1102${loc("galaxy_piracy")}+0`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Bolognium"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            breakdown.p["Bolognium"][`\u1102${loc("evo_challenge_discharge")}+0`] = "-50%";
          }
        }
        modRes("Bolognium", delta * time_multiplier);
      }
      if (global.eden["asphodel_harvester"] && support_on["asphodel_harvester"]) {
        let powder_base = support_on["asphodel_harvester"] * production("asphodel_harvester", "powder");
        powder_base *= production("psychic_boost", "Asphodel_Powder");
        let delta = powder_base * hunger * global_multiplier;
        breakdown.p["Asphodel_Powder"][loc("eden_asphodel_harvester_title")] = powder_base + "v";
        if (global.tech.asphodel >= 5) {
          let penalty = asphodelResist();
          delta *= penalty;
          if (penalty <= 1) {
            breakdown.p["Asphodel_Powder"][`\u1102${loc("eden_asphodel_hostility")}+0`] = -((1 - penalty) * 100) + "%";
          } else {
            breakdown.p["Asphodel_Powder"][`\u1102${loc("eden_mech_station_overkill")}+0`] = (penalty - 1) * 100 + "%";
          }
        }
        modRes("Asphodel_Powder", delta * time_multiplier);
      }
      if (global.resource.Elysanite.display) {
        if (global.civic.elysium_miner.display) {
          let miner_base = workerScale(global.civic.elysium_miner.workers, "elysium_miner");
          miner_base *= racialTrait(miner_base, "miner") * 0.36;
          if (!global.race["living_tool"] && !global.race["tusk"]) {
            miner_base *= (global.tech["pickaxe"] && global.tech.pickaxe > 0 ? global.tech.pickaxe * 0.15 : 0) + 1;
          }
          if (global.tech["explosives"] && global.tech.explosives >= 2) {
            miner_base *= 0.95 + global.tech.explosives * 0.15;
          }
          if (global.race["tough"]) {
            miner_base *= 1 + traits.tough.vars()[0] / 100;
          }
          let ogreFathom = fathomCheck("ogre");
          if (ogreFathom > 0) {
            miner_base *= 1 + traits.tough.vars(1)[0] / 100 * ogreFathom;
          }
          miner_base *= production("psychic_boost", "Elysanite");
          breakdown.p["Elysanite"][jobName("elysium_miner")] = miner_base + "v";
          let delta = miner_base;
          delta *= hunger * global_multiplier;
          modRes("Elysanite", delta * time_multiplier);
        }
      }
      if (global.civic.pit_miner.display) {
        if (tauEnabled()) {
          let miner_base = workerScale(global.civic.pit_miner.workers, "pit_miner");
          miner_base *= racialTrait(miner_base, "miner");
          let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
          {
            let bol_base = miner_base * production("psychic_boost", "Bolognium");
            bol_base *= production("mining_pit", "bolognium");
            let delta = bol_base * global_multiplier * colony_val;
            breakdown.p["Bolognium"][jobName("pit_miner")] = bol_base + "v";
            if (bol_base > 0) {
              breakdown.p["Bolognium"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
            }
            modRes("Bolognium", delta * time_multiplier);
          }
          {
            let stone_base = miner_base * production("psychic_boost", "Stone");
            stone_base *= production("mining_pit", "stone");
            let delta = stone_base * global_multiplier * colony_val;
            breakdown.p["Stone"][jobName("pit_miner")] = stone_base + "v";
            if (stone_base > 0) {
              breakdown.p["Stone"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
            }
            modRes("Stone", delta * time_multiplier);
          }
          if (global.race["smoldering"]) {
            let cry_base = miner_base * production("psychic_boost", "Chrysotile");
            cry_base *= production("mining_pit", "chrysotile");
            let delta = cry_base * global_multiplier * colony_val * hunger;
            breakdown.p["Chrysotile"][jobName("pit_miner")] = cry_base + "v";
            if (cry_base > 0) {
              breakdown.p["Chrysotile"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
              breakdown.p["Chrysotile"][loc("hunger")] = (hunger - 1) * 100 + "%";
            }
            modRes("Chrysotile", delta * time_multiplier);
          }
          {
            let adam_base = miner_base * production("psychic_boost", "Adamantite");
            adam_base *= production("mining_pit", "adamantite");
            let delta = adam_base * shrineMetal.mult * global_multiplier * colony_val;
            breakdown.p["Adamantite"][jobName("pit_miner")] = adam_base + "v";
            if (adam_base > 0) {
              breakdown.p["Adamantite"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
            }
            modRes("Adamantite", delta * time_multiplier);
          }
          if (global.tech["isolation"]) {
            {
              let copper_base = miner_base * production("psychic_boost", "Copper");
              copper_base *= production("mining_pit", "copper");
              let delta = copper_base * shrineMetal.mult * global_multiplier * colony_val;
              breakdown.p["Copper"][jobName("pit_miner")] = copper_base + "v";
              if (copper_base > 0) {
                breakdown.p["Copper"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
              }
              modRes("Copper", delta * time_multiplier);
            }
            {
              let coal_base = miner_base * production("psychic_boost", "Coal");
              coal_base *= production("mining_pit", "coal");
              let delta = coal_base * global_multiplier * colony_val;
              breakdown.p["Coal"][jobName("pit_miner")] = coal_base + "v";
              if (coal_base > 0) {
                breakdown.p["Coal"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
              }
              modRes("Coal", delta * time_multiplier);
            }
            if (global.race["lone_survivor"]) {
              let alum_base = miner_base * production("psychic_boost", "Aluminium");
              alum_base *= production("mining_pit", "aluminium");
              let delta = alum_base * shrineMetal.mult * global_multiplier * colony_val;
              breakdown.p["Aluminium"][jobName("pit_miner")] = alum_base + "v";
              if (alum_base > 0) {
                breakdown.p["Aluminium"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
              }
              modRes("Aluminium", delta * time_multiplier);
            }
          }
        } else {
          let materials_bd = {};
          let miner_base = workerScale(global.civic.pit_miner.workers, "pit_miner");
          miner_base *= racialTrait(miner_base, "miner");
          miner_base *= production("mining_pit", "materials");
          let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
          let delta = miner_base * global_multiplier * colony_val;
          materials_bd[jobName("pit_miner")] = miner_base + "v";
          if (miner_base > 0) {
            materials_bd[`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
          }
          breakdown.p["Materials"] = materials_bd;
          modRes("Materials", delta * time_multiplier);
        }
      }
      if (global.tauceti["tau_farm"] && p_on["tau_farm"]) {
        let colony_val = 1 + (support_on["colony"] || 0) * 0.5;
        if (!global.race["kindling_kindred"] && !global.race["smoldering"]) {
          let lumber_base = production("tau_farm", "lumber") * p_on["tau_farm"] * production("psychic_boost", "Lumber");
          let delta = lumber_base * global_multiplier * colony_val;
          breakdown.p["Lumber"][loc("tau_home_tau_farm")] = lumber_base + "v";
          if (lumber_base > 0) {
            breakdown.p["Lumber"][`\u1102${loc("tau_home_colony")}`] = (colony_val - 1) * 100 + "%";
          }
          modRes("Lumber", delta * time_multiplier);
        }
      }
      if (shrineBonusActive()) {
        breakdown.p["Adamantite"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
      }
      if (p_on["s_gate"] && global.resource.Bolognium.display && global.galaxy["armed_miner"] && gal_on["armed_miner"] > 0) {
        let base = gal_on["armed_miner"] * 0.032 * production("psychic_boost", "Bolognium");
        let foothold = 1 + (gal_on["ore_processor"] ?? 0) * 0.1;
        let pirate = piracy("gxy_alien2");
        let delta = base * global_multiplier * pirate * foothold * zigVal;
        breakdown.p["Bolognium"][loc("galaxy_armed_miner_bd")] = base + "v";
        if (base > 0) {
          breakdown.p["Bolognium"][`\u1102${loc("galaxy_ore_processor")}`] = -((1 - foothold) * 100) + "%";
          breakdown.p["Bolognium"][`\u1102${loc("galaxy_piracy")}+1`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Bolognium"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            breakdown.p["Bolognium"][`\u1102${loc("evo_challenge_discharge")}+1`] = "-50%";
          }
        }
        modRes("Bolognium", delta * time_multiplier);
      }
      if (p_on["s_gate"] && global.resource.Orichalcum.display && global.galaxy["excavator"] && p_on["excavator"] > 0) {
        let base = p_on["excavator"] * production("excavator") * production("psychic_boost", "Orichalcum");
        let pirate = piracy("gxy_chthonian");
        let delta = base * global_multiplier * pirate * zigVal;
        global.galaxy.excavator["lpmod"] = production("excavator") * global_multiplier * pirate * zigVal;
        breakdown.p["Orichalcum"][loc("galaxy_excavator")] = base + "v";
        if (base > 0) {
          breakdown.p["Orichalcum"][`\u1102${loc("galaxy_piracy")}`] = -((1 - pirate) * 100) + "%";
          breakdown.p["Orichalcum"][`\u1102${loc("space_red_ziggurat_title")}`] = (zigVal - 1) * 100 + "%";
          if (global.race["discharge"] && global.race["discharge"] > 0) {
            delta *= 0.5;
            global.galaxy.excavator["lpmod"] *= 0.5;
            breakdown.p["Orichalcum"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
          }
        }
        modRes("Orichalcum", delta * time_multiplier);
      }
      if (global.space["orichalcum_mine"] && p_on["orichalcum_mine"]) {
        let synd = syndicate("spc_kuiper");
        let mine_base = p_on["orichalcum_mine"] * production("orichalcum_mine") * production("psychic_boost", "Orichalcum");
        let mine_delta = mine_base * global_multiplier * qs_multiplier * synd * zigVal;
        breakdown.p["Orichalcum"][loc("space_kuiper_mine", [global.resource.Orichalcum.name])] = mine_base + "v";
        if (mine_base > 0) {
          breakdown.p["Orichalcum"][`\u1102${loc("space_syndicate")}`] = -((1 - synd) * 100) + "%";
          breakdown.p["Orichalcum"][`\u1102${loc("space_red_ziggurat_title")}+1`] = (zigVal - 1) * 100 + "%";
          breakdown.p["Orichalcum"][`\u1102${loc("quarantine")}+0`] = (qs_multiplier - 1) * 100 + "%";
        }
        modRes("Orichalcum", mine_delta * time_multiplier);
      }
      if (global.resource.Orichalcum.display && e_ship["orichalcum"] && e_ship.orichalcum > 0) {
        let orichalcum_delta = e_ship.orichalcum * global_multiplier * womling_technician;
        breakdown.p["Orichalcum"][loc("tau_roid_mining_ship")] = e_ship.orichalcum + "v";
        if (womling_technician > 1) {
          breakdown.p["Orichalcum"][`\u1102${loc("tau_red_womlings")}+0`] = (womling_technician - 1) * 100 + "%";
        }
        modRes("Orichalcum", orichalcum_delta * time_multiplier);
      }
      if (global.race["truepath"] && global.tech["tau_red"] && global.tech.tau_red >= 5) {
        if (global.tauceti["womling_mine"] && global.tauceti["overseer"]) {
          let miner_base = global.tauceti.womling_mine.miners * production("womling_mine", "unobtainium") * production("psychic_boost", "Unobtainium");
          let prod = global.tauceti.overseer.prod / 100;
          let miner_delta = miner_base * prod * global_multiplier;
          breakdown.p["Unobtainium"][loc("tau_red_womlings")] = miner_base + "v";
          if (miner_base > 0) {
            breakdown.p["Unobtainium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
          }
          modRes("Unobtainium", miner_delta * time_multiplier);
          if (global.tech["isolation"]) {
            let uranium_base = global.tauceti.womling_mine.miners * production("womling_mine", "uranium") * production("psychic_boost", "Uranium");
            breakdown.p["Uranium"][loc("tau_red_womlings")] = uranium_base + "v";
            let uranium_delta = uranium_base * prod * global_multiplier;
            if (uranium_base > 0) {
              breakdown.p["Uranium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
            }
            modRes("Uranium", uranium_delta * time_multiplier);
            let titanium_base = global.tauceti.womling_mine.miners * production("womling_mine", "titanium") * production("psychic_boost", "Titanium");
            breakdown.p["Titanium"][loc("tau_red_womlings")] = titanium_base + "v";
            let titanium_delta = titanium_base * prod * shrineMetal.mult * global_multiplier;
            if (titanium_base > 0) {
              breakdown.p["Titanium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
            }
            modRes("Titanium", titanium_delta * time_multiplier);
            if (global.race["lone_survivor"]) {
              let copper_base = global.tauceti.womling_mine.miners * production("womling_mine", "copper") * production("psychic_boost", "Copper");
              breakdown.p["Copper"][loc("tau_red_womlings")] = copper_base + "v";
              let copper_delta = copper_base * prod * shrineMetal.mult * global_multiplier;
              if (copper_delta > 0) {
                breakdown.p["Copper"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
              }
              modRes("Copper", copper_delta * time_multiplier);
              let alumina_base = global.tauceti.womling_mine.miners * production("womling_mine", "aluminium") * production("psychic_boost", "Aluminium");
              breakdown.p["Aluminium"][loc("tau_red_womlings")] = alumina_base + "v";
              let alumina_delta = alumina_base * prod * shrineMetal.mult * global_multiplier;
              if (alumina_base > 0) {
                breakdown.p["Aluminium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
              }
              modRes("Aluminium", alumina_delta * time_multiplier);
              let iridium_base = global.tauceti.womling_mine.miners * production("womling_mine", "iridium") * production("psychic_boost", "Iridium");
              breakdown.p["Iridium"][loc("tau_red_womlings")] = iridium_base + "v";
              let iridium_delta = iridium_base * prod * hunger * shrineMetal.mult * global_multiplier;
              if (iridium_base > 0) {
                breakdown.p["Iridium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
              }
              modRes("Iridium", iridium_delta * time_multiplier);
              let neutronium_base = global.tauceti.womling_mine.miners * production("womling_mine", "neutronium") * production("psychic_boost", "Neutronium");
              breakdown.p["Neutronium"][loc("tau_red_womlings")] = neutronium_base + "v";
              let neutronium_delta = neutronium_base * prod * hunger * global_multiplier;
              if (neutronium_base > 0) {
                breakdown.p["Neutronium"][`\u1102${loc("tau_red_womling_prod_label")}`] = -((1 - prod) * 100) + "%";
              }
              modRes("Neutronium", neutronium_delta * time_multiplier);
            }
          }
        }
      }
      breakdown.p["Neutronium"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (shrineBonusActive()) {
        breakdown.p["Iridium"][loc("city_shrine")] = ((shrineMetal.mult - 1) * 100).toFixed(1) + "%";
      }
      breakdown.p["Iridium"][loc("hunger")] = (hunger - 1) * 100 + "%";
      let rawCash = FactoryMoney ? FactoryMoney * global_multiplier * hunger : 0;
      if (FactoryMoney && global.race["discharge"] && global.race["discharge"] > 0) {
        rawCash *= 0.5;
      }
      if (global.tech["currency"] >= 1) {
        let citizens = global.resource[global.race.species].amount + global.civic.garrison.workers - global.civic.unemployed.workers;
        let income_base = citizens;
        if (global.race["high_pop"]) {
          income_base = highPopAdjust(income_base);
        }
        income_base *= global.race["truepath"] ? 0.2 : 0.4;
        if (global.race["greedy"]) {
          income_base *= 1 - traits.greedy.vars()[0] / 100;
        }
        if (global.tech["isolation"]) {
          income_base *= 15;
        }
        income_base *= production("psychic_cash");
        if (fed && global.tech["banking"] && global.tech["banking"] >= 2) {
          let impact = +workerScale(global.civic.banker.impact, "banker");
          if (global.tech["banking"] >= 10) {
            impact += 0.02 * global.tech["stock_exchange"];
          }
          if (global.race["truthful"]) {
            impact *= 1 - traits.truthful.vars()[0] / 100;
          }
          if (global.civic.govern.type === "republic") {
            impact *= 1 + govEffect.republic()[0] / 100;
          }
          if (global.race["high_pop"]) {
            impact = highPopAdjust(impact);
          }
          income_base *= 1 + global.civic.banker.workers * impact;
        }
        let extra_income = 0;
        if (govActive("extravagant", 0) && global.city["apartment"]) {
          let mult = income_base / citizens;
          let pop = p_on["apartment"] * actions.city.apartment.citizens();
          pop = Math.min(citizens, pop);
          extra_income = pop * mult * (govCivics("tax_cap") / 20);
          income_base -= pop * mult;
        }
        income_base *= global.civic.taxes.tax_rate / 20;
        income_base += extra_income;
        if (global.civic.govern.type === "oligarchy") {
          income_base *= 1 - govEffect.oligarchy()[0] / 100;
        }
        if (global.civic.govern.type === "corpocracy") {
          income_base *= 0.5;
        }
        if (global.civic.govern.type === "socialist") {
          income_base *= 1 - govEffect.socialist()[3] / 100;
        }
        if (global.race["banana"]) {
          income_base *= 0.05;
        }
        let temple_mult = 1;
        if (global.tech["anthropology"] && global.tech["anthropology"] >= 4 && !global.race["truepath"]) {
          temple_mult += faithTempleCount() * 0.025;
        }
        let upkeep = 0;
        if (!global.tech["world_control"] && global.civic.govern.type !== "federation") {
          for (let i2 = 0; i2 < 3; i2++) {
            if (global.civic.foreign[`gov${i2}`].buy) {
              upkeep += income_base * 0.2;
            }
          }
        }
        let getShrineResult = getShrineBonus("tax");
        let delta = (income_base - upkeep) * temple_mult * hunger * getShrineResult.mult;
        delta *= global_multiplier;
        breakdown.p["Money"][loc("morale_tax")] = income_base + "v";
        if (income_base > 0) {
          breakdown.p["Money"][`\u1102${loc("civics_spy_purchase_bd")}`] = -upkeep + "v";
          breakdown.p["Money"][global.race["cataclysm"] || global.race["orbit_decayed"] ? `\u1102${loc("space_red_ziggurat_title")}` : `\u1102${structName("temple")}`] = (temple_mult - 1) * 100 + "%";
          breakdown.p["Money"][`\u1102${loc("city_shrine")}`] = (getShrineResult.mult - 1) * 100 + "%";
        }
        breakdown.p["Money"][loc("city_factory")] = FactoryMoney + "v";
        if (global.race["discharge"] && global.race["discharge"] > 0 && FactoryMoney > 0) {
          breakdown.p["Money"][`\u1102${loc("evo_challenge_discharge")}`] = "-50%";
        }
        modRes("Money", +(delta * time_multiplier).toFixed(2));
        rawCash += delta;
      }
      if (global.tech["gambling"] && (p_on["casino"] || p_on["spc_casino"] || p_on["tauceti_casino"] || p_on["hell_casino"])) {
        let casinos = 0;
        if (p_on["casino"]) {
          casinos += p_on["casino"];
        }
        if (p_on["spc_casino"]) {
          casinos += p_on["spc_casino"];
        }
        if (p_on["tauceti_casino"]) {
          casinos += p_on["tauceti_casino"];
        }
        if (p_on["hell_casino"]) {
          casinos += p_on["hell_casino"];
        }
        let cash = casinos * casinoEarn();
        breakdown.p["Money"][structName("casino")] = cash + "v";
        modRes("Money", +(cash * time_multiplier * global_multiplier * hunger).toFixed(2));
        rawCash += cash * global_multiplier * hunger;
      }
      if (global.city["tourist_center"] && global.city["tourist_center"].on && !global.race["fasting"] && !global.race["warlord"]) {
        let tourism = 0;
        let amp = global.tech["monument"] && global.tech.monument >= 3 && p_on["s_gate"] ? 3 : 1;
        if (global.city["amphitheatre"]) {
          tourism += global.city["tourist_center"].on * global.city.amphitheatre.count * amp;
        }
        if (global.city["casino"]) {
          tourism += global.city["tourist_center"].on * global.city.casino.count * 5 * amp;
        }
        if (global.space["spc_casino"]) {
          tourism += global.city["tourist_center"].on * global.space.spc_casino.count * 5 * amp;
        }
        if (global.tech["monuments"]) {
          let monuments = global.tech.monuments;
          if (global.race["wish"] && global.race["wishStats"]) {
            if (global.city["wonder_lighthouse"]) {
              monuments += 5;
            }
            if (global.city["wonder_pyramid"]) {
              monuments += 5;
            }
            if (global.space["wonder_statue"]) {
              monuments += 5;
            }
            if (global.interstellar["wonder_gardens"] || global.space["wonder_gardens"]) {
              monuments += 5;
            }
          }
          tourism += global.city["tourist_center"].on * monuments * 2 * amp;
        }
        if (global.city["trade"] && global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 4) {
          tourism += global.city["tourist_center"].on * global.city.trade.count * 3 * amp;
        }
        let piousVal = govActive("pious", 1);
        if (piousVal && global.city["temple"]) {
          tourism += global.city["tourist_center"].on * templeCount() * piousVal * amp;
        }
        if (global.civic.govern.type === "corpocracy") {
          tourism *= 1 + govEffect.corpocracy()[2] / 100;
        }
        if (global.civic.govern.type === "socialist") {
          tourism *= 1 - govEffect.socialist()[3] / 100;
        }
        if (astroSign2 === "aquarius") {
          tourism *= 1 + astroVal2("aquarius")[0] / 100;
        }
        tourism *= production("psychic_cash");
        breakdown.p["Money"][loc("tech_tourism")] = Math.round(tourism) + "v";
        if (astroSign2 === "aquarius") {
          breakdown.p["Money"][`\u1102${loc("sign_aquarius")}`] = astroVal2("aquarius")[0] + "%";
        }
        modRes("Money", +(tourism * time_multiplier * global_multiplier * hunger).toFixed(2));
        rawCash += tourism * global_multiplier * hunger;
      }
      if (global.portal["bazaar"] && global.portal["spire"] && global.tech["monuments"]) {
        let monuments = global.tech.monuments;
        if (global.race["wish"] && global.race["wishStats"] && global.portal["wonder_gardens"]) {
          monuments += 5;
        }
        let revenue = global.portal.bazaar.count * monuments * global.portal.spire.count;
        revenue *= production("psychic_cash");
        breakdown.p["Money"][loc("portal_bazaar_title")] = Math.round(revenue) + "v";
        if (astroSign2 === "aquarius") {
          revenue *= 1 + astroVal2("aquarius")[0] / 100;
          breakdown.p["Money"][`\u1102${loc("sign_aquarius")}`] = astroVal2("aquarius")[0] + "%";
        }
        modRes("Money", +(revenue * time_multiplier * global_multiplier * hunger).toFixed(2));
        rawCash += revenue * global_multiplier * hunger;
      }
      if (global.tauceti["tau_cultural_center"]) {
        let revenue = 0;
        if (global.tauceti["tauceti_casino"]) {
          revenue += p_on["tau_cultural_center"] * p_on["tauceti_casino"] * 20;
        }
        if (global.tech["monuments"]) {
          let monuments = global.tech.monuments;
          if (global.race["wish"] && global.race["wishStats"]) {
            if (global.city["wonder_lighthouse"]) {
              monuments += 5;
            }
            if (global.city["wonder_pyramid"]) {
              monuments += 5;
            }
            if (global.space["wonder_statue"]) {
              monuments += 5;
            }
            if (global.interstellar["wonder_gardens"] || global.space["wonder_gardens"]) {
              monuments += 5;
            }
          }
          revenue += p_on["tau_cultural_center"] * monuments * 5;
        }
        if (global.tech["tau_culture"] && global.tech.tau_culture >= 2) {
          revenue += p_on["tau_cultural_center"] * support_on["colony"] * 15;
        }
        if (global.civic.govern.type === "corpocracy") {
          revenue *= 1 + govEffect.corpocracy()[2] / 100;
        } else if (global.civic.govern.type === "socialist") {
          revenue *= 1 - govEffect.socialist()[3] / 100;
        }
        revenue *= production("psychic_cash");
        breakdown.p["Money"][loc("tech_cultural_center")] = Math.round(revenue) + "v";
        if (astroSign2 === "aquarius") {
          revenue *= 1 + astroVal2("aquarius")[0] / 100;
          breakdown.p["Money"][`\u1102${loc("sign_aquarius")}`] = astroVal2("aquarius")[0] + "%";
        }
        modRes("Money", +(revenue * time_multiplier * global_multiplier * hunger).toFixed(2));
        rawCash += revenue * global_multiplier * hunger;
      }
      if (global.tech["tau_junksale"]) {
        let revenue = support_on["womling_village"] * 40;
        let culture = p_on["tau_cultural_center"] ? 1 + p_on["tau_cultural_center"] * 0.08 : 1;
        breakdown.p["Money"][loc("tau_red_womling_village")] = Math.round(revenue) + "v";
        breakdown.p["Money"][`\u1102${loc("tech_cultural_center")}+1`] = (culture - 1) * 100 + "%";
        modRes("Money", +(revenue * culture * time_multiplier * global_multiplier * hunger).toFixed(2));
        rawCash += revenue * culture * global_multiplier * hunger;
      }
      if (global.race["gravity_well"] && global.tech["teamster"] && global.tech.teamster >= 2) {
        let teamsters = global.civic.teamster.workers;
        let revenue = teamsters * rawCash * 0.01;
        breakdown.p["Money"][jobName("teamster")] = Math.round(revenue / global_multiplier) + "v";
        modRes("Money", +(revenue * time_multiplier * hunger).toFixed(2));
        rawCash += revenue * hunger;
      }
      breakdown.p["Money"][loc("hunger")] = (hunger - 1) * 100 + "%";
      if (global.tech["anthropology"] && global.tech["anthropology"] >= 4 && global.race["truepath"]) {
        let merchsales = global.resource[global.race.species].amount * templeCount() * 0.08;
        breakdown.p["Money"][structName("temple")] = merchsales + "v";
        modRes("Money", +(merchsales * global_multiplier * time_multiplier).toFixed(2));
        rawCash += merchsales * global_multiplier;
      }
      if (global.race["truepath"] && global.tauceti["overseer"]) {
        let rate = (global.tauceti.overseer.loyal + global.tauceti.overseer.morale) / 200;
        let pop = global.tauceti.overseer.pop;
        if (p_on["womling_station"]) {
          pop += p_on["womling_station"] * 2;
        }
        let base = pop * rate * (global.tech["isolation"] ? 25 : 12);
        let culture = p_on["tau_cultural_center"] ? 1 + p_on["tau_cultural_center"] * 0.08 : 1;
        let delta = base * global_multiplier * culture;
        breakdown.p["Money"][loc("tau_red_womlings")] = base + "v";
        breakdown.p["Money"][`\u1102${loc("tech_cultural_center")}`] = (culture - 1) * 100 + "%";
        modRes("Money", +(delta * time_multiplier).toFixed(2));
        rawCash += delta;
      }
      {
        let racVal = govActive("racketeer", 0);
        if (racVal) {
          let theft = -Math.round(rawCash * (racVal / 100));
          breakdown.p.consume.Money[loc("gov_trait_racketeer_bd")] = theft;
          modRes("Money", +(theft * time_multiplier).toFixed(2));
        }
      }
      {
        let psVal = govActive("pious", 0);
        if (psVal) {
          let tithe = -Math.round(rawCash * (psVal / 100));
          breakdown.p.consume.Money[loc("gov_trait_pious_bd")] = tithe;
          modRes("Money", +(tithe * time_multiplier).toFixed(2));
        }
      }
      if (global.tech["foundry"]) {
        let craft_costs = global.race["resourceful"] ? 1 - traits.resourceful.vars()[0] / 100 : 1;
        let arraakFathom = fathomCheck("arraak");
        if (arraakFathom > 0) {
          craft_costs -= traits.resourceful.vars(1)[0] / 100 * arraakFathom;
        }
        let crafting_costs = craftCost();
        let crafting_usage = {};
        craftingRatio("", "", true);
        Object.keys(crafting_costs).forEach(function(craft) {
          if (craft === "Thermite" && !eventActive("summer")) {
            return;
          }
          breakdown.p[craft] = {};
          let num = workerScale(global.city.foundry[craft], "craftsman");
          if (global.race["servants"] && global.race.servants.hasOwnProperty("sjobs") && global.race.servants.sjobs.hasOwnProperty(craft)) {
            num += jobScale(global.race.servants.sjobs[craft]);
          }
          let craft_ratio = craftingRatio(craft, "auto").multiplier;
          let speed = global.genes["crafty"] ? 2 : 1;
          let volume = Math.floor(global.resource[crafting_costs[craft][0].r].amount / (crafting_costs[craft][0].a * speed * craft_costs / 140));
          for (let i2 = 1; i2 < crafting_costs[craft].length; i2++) {
            let temp = Math.floor(global.resource[crafting_costs[craft][i2].r].amount / (crafting_costs[craft][i2].a * speed * craft_costs / 140));
            if (temp < volume) {
              volume = temp;
            }
          }
          if (num < volume) {
            volume = num;
          }
          for (let i2 = 0; i2 < crafting_costs[craft].length; i2++) {
            let final = volume * crafting_costs[craft][i2].a * craft_costs * speed * time_multiplier / 140;
            modRes(crafting_costs[craft][i2].r, -final);
            if (typeof crafting_usage[crafting_costs[craft][i2].r] === "undefined") {
              crafting_usage[crafting_costs[craft][i2].r] = final / time_multiplier;
            } else {
              crafting_usage[crafting_costs[craft][i2].r] += final / time_multiplier;
            }
          }
          if (global.race["high_pop"]) {
            volume = highPopAdjust(volume);
          }
          breakdown.p[craft][jobName("craftsman")] = volume * speed / 140 + "v";
          modRes(craft, craft_ratio * volume * speed * time_multiplier / 140 * production("psychic_boost", craft));
        });
        Object.keys(crafting_usage).forEach(function(used) {
          if (crafting_usage[used] > 0) {
            breakdown.p.consume[used][jobName("craftsman")] = -crafting_usage[used];
          }
        });
      }
      if (!global.settings.showResearch && (global.resource.Lumber.amount >= 5 || global.resource.Stone.amount >= 6)) {
        global.settings.showResearch = true;
      }
      global.city.power_total = -max_power;
      global.city.power = power_grid;
      if (global.city.power < 0) {
        $("#powerMeter").addClass("low");
        $("#powerMeter").removeClass("neutral");
        $("#powerMeter").removeClass("high");
      } else if (global.city.power > 0) {
        $("#powerMeter").removeClass("low");
        $("#powerMeter").removeClass("neutral");
        $("#powerMeter").addClass("high");
      } else {
        $("#powerMeter").removeClass("low");
        $("#powerMeter").addClass("neutral");
        $("#powerMeter").removeClass("high");
      }
      if (p_on["world_controller"] && p_on["world_controller"] > 0) {
        if (global.tech["wsc"] === 0) {
          global.tech["wsc"] = 1;
          drawTech();
        }
      } else if (global.tech["wsc"] !== 0) {
        global.tech["wsc"] = 0;
        drawTech();
      }
      if (global.tech["portal"] >= 2) {
        if (global.portal.fortress.garrison > 0) {
          global.tech["portal_guard"] = 1;
        } else {
          global.tech["portal_guard"] = 0;
        }
      }
      if (global.race["decay"]) {
        Object.keys(tradeRatio).forEach(function(res) {
          if (global.resource[res].amount > 50) {
            let decay = +((global.resource[res].amount - 50) * (1e-3 * tradeRatio[res])).toFixed(3);
            modRes(res, -(decay * time_multiplier));
            breakdown.p.consume[res][loc("evo_challenge_decay")] = -decay;
          } else {
            delete breakdown.p.consume[res][loc("evo_challenge_decay")];
          }
        });
      }
      if (global.resource.Asphodel_Powder.display) {
        if (global.resource.Asphodel_Powder.amount > 0) {
          let decay = +(global.resource.Asphodel_Powder.amount * 45e-4).toFixed(3);
          let stabilize = 0.92;
          if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
            let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
            heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
            if (heatSink > 0) {
              let coefficent = 0.08 * (1 + heatSink / 17500);
              stabilize = 1 - coefficent;
            }
          }
          if (global.race["warlord"] && global.eden["corruptor"] && p_on["corruptor"]) {
            stabilize -= 4e-3 * p_on["corruptor"];
          }
          if (stabilize < 0.01) {
            stabilize = 0.01;
          }
          if (global.eden["stabilizer"]) {
            decay *= stabilize ** global.eden.stabilizer.count;
          }
          modRes("Asphodel_Powder", -(decay * time_multiplier));
          breakdown.p.consume.Asphodel_Powder[loc("evo_challenge_decay")] = -decay;
        } else {
          delete breakdown.p.consume.Asphodel_Powder[loc("evo_challenge_decay")];
        }
      }
      if (firstRun) {
        if (global.tech["piracy"]) {
          renderSpace();
        }
        if (global.settings.portal.ruins) {
          vBind({ el: `#srprtl_ruins` }, "update");
          vBind({ el: `#foundry` }, "update");
        }
        if (global.settings.portal.gate) {
          vBind({ el: `#srprtl_gate` }, "update");
        }
      }
    }
    if (global.civic["garrison"] && global.civic.garrison.workers < global.civic.garrison.max) {
      let rate = 2.5;
      if (global.race["high_pop"]) {
        rate *= traits.high_pop.vars()[2];
      }
      if (global.race["diverse"]) {
        rate /= 1 + traits.diverse.vars()[0] / 100;
      }
      if (global.city["boot_camp"]) {
        let train = global.tech["boot_camp"] >= 2 ? 0.08 : 0.05;
        if (global.blood["lust"]) {
          train += global.blood.lust * 2e-3;
        }
        let milVal = govActive("militant", 0);
        if (milVal) {
          train *= 1 + milVal / 100;
        }
        rate *= 1 + (global.race["orbit_decayed"] && global.space["space_barracks"] ? global.space.space_barracks.on : global.city.boot_camp.count) * train;
      }
      if (global.tech["celestial_warfare"] && global.tech.celestial_warfare >= 5 && global.eden["bunker"]) {
        let train = 0.1;
        if (global.blood["lust"]) {
          train += global.blood.lust * 2e-3;
        }
        let milVal = govActive("militant", 0);
        if (milVal) {
          train *= 1 + milVal / 100;
        }
        rate *= 1 + global.eden.bunker.count * train;
      }
      if (global.race["beast"]) {
        rate *= 1 + traits.beast.vars()[2] / 100;
      }
      global.civic.garrison.rate = rate * time_multiplier;
      if (global.race["brute"]) {
        global.civic.garrison.rate += traits.brute.vars()[1] / 40 * time_multiplier;
      }
      let fathom = fathomCheck("orc");
      if (fathom > 0) {
        global.civic.garrison.rate += traits.brute.vars(1)[1] / 40 * fathom * time_multiplier;
      }
      global.civic.garrison.progress += global.civic.garrison.rate;
      while (global.civic.garrison.progress >= 100) {
        global.civic.garrison.progress -= 100;
        global.civic.garrison.workers++;
        if (global.portal["fortress"] && global.portal.fortress["assigned"] && global.portal.fortress.garrison < global.portal.fortress.assigned) {
          global.portal.fortress.garrison++;
        }
        ;
      }
    }
    if (global.portal["carport"]) {
      if (global.portal.carport.damaged > 0) {
        if (!$("#portal-carport .count").hasClass("has-text-alert")) {
          $("#portal-carport .count").addClass("has-text-alert");
        }
        global.portal.carport.repair += turboSpeed;
        const need = actions.portal.prtl_fortress.carport.repair();
        if (global.portal.carport.repair >= need) {
          const original = global.portal.carport.damaged;
          const addition = global.portal.carport.repair / need;
          const fixedAddition = Math.floor(addition);
          global.portal.carport.damaged = Math.max(0, original - fixedAddition);
          const diff = original - global.portal.carport.damaged;
          global.portal.carport.repair -= diff * need;
        }
        global.portal.carport.damaged = Math.min(global.portal.carport.damaged, jobScale(global.portal.carport.count));
      } else {
        if ($("#portal-carport .count").hasClass("has-text-alert")) {
          $("#portal-carport .count").removeClass("has-text-alert");
        }
      }
    }
    Object.keys(global.resource).forEach(function(res) {
      if (global.resource[res].amount > global.resource[res].max && global.resource[res].max >= 0) {
        global.resource[res].amount = global.resource[res].max;
      }
      if (global["resource"][res].rate > 0 || global["resource"][res].rate === 0 && global["resource"][res].max === -1) {
        diffCalc(res, webWorker.mt);
      }
    });
    if (global.race["fasting"]) {
      diffCalc(global.race.species, webWorker.mt);
    }
    if (global.settings.expose) {
      if (!window["evolve"]) {
        enableDebug();
      }
      updateDebugData();
    }
    let easter2 = eventActive("easter");
    if (easter2.active) {
      for (i = 1; i <= 18; i++) {
        if ($(`#egg${i}`).length > 0 && !$(`#egg${i}`).hasClass("binded")) {
          easterEggBind(i);
          $(`#egg${i}`).addClass("binded");
        }
      }
    }
    let halloween = eventActive("halloween");
    if (halloween.active) {
      for (i = 1; i <= 8; i++) {
        if ($(`#treat${i}`).length > 0 && !$(`#treat${i}`).hasClass("binded")) {
          trickOrTreatBind(i, false);
          $(`#treat${i}`).addClass("binded");
        }
      }
      for (i = 1; i <= 8; i++) {
        if ($(`#trick${i}`).length > 0 && !$(`#trick${i}`).hasClass("binded")) {
          trickOrTreatBind(i, true);
          $(`#trick${i}`).addClass("binded");
        }
      }
    }
    if (global.race["carnivore"] && !global.race["herbivore"] && !global.race["soul_eater"] && !global.race["artifical"]) {
      if (global.resource["Food"].amount > 10) {
        debugger;
        const curFood = global.resource["Food"].amount;
        cacheRes("Food", true);
        const production2 = (global.resource["Food"].amount - curFood) / time_multiplier;
        let rotPercent = traits.carnivore.vars()[0] / 100;
        let rot = rotPercent;
        if (global.city["smokehouse"]) {
          rot *= 0.9 ** global.city.smokehouse.count;
        }
        const decay = Math.exp(-rot * time_multiplier);
        const newFood = Math.max(0, curFood * decay + production2 / rot * (1 - decay));
        modRes("Food", newFood - curFood);
        breakdown.p.consume["Food"][loc("spoilage")] = newFood - curFood;
      }
    }
    firstRun = false;
  }
  function midLoop() {
    const astroSign2 = astrologySign();
    if (global.race.species === "protoplasm") {
      let base = 100;
      if (global.stats.achieve["mass_extinction"] && global.stats.achieve["mass_extinction"].l > 1) {
        base += 50 * (global.stats.achieve["mass_extinction"].l - 1);
      }
      var caps = {
        RNA: base,
        DNA: base
      };
      if (global.evolution["membrane"]) {
        let effect = global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 5 + 5 : 5;
        caps["RNA"] += global.evolution["membrane"].count * effect;
      }
      if (global.evolution["eukaryotic_cell"]) {
        let effect = global.evolution["mitochondria"] ? global.evolution["mitochondria"].count * 10 + 10 : 10;
        caps["DNA"] += global.evolution["eukaryotic_cell"].count * effect;
      }
      global.resource.RNA.max = caps["RNA"];
      global.resource.DNA.max = caps["DNA"];
      Object.keys(actions.evolution).forEach(function(action) {
        if (actions.evolution[action] && actions.evolution[action].cost) {
          let c_action = actions.evolution[action];
          let element = $("#" + c_action.id);
          if (element.length > 0) {
            if (checkAffordable(c_action, true)) {
              if (element.hasClass("cnam")) {
                element.removeClass("cnam");
              }
              if (checkAffordable(c_action)) {
                if (element.hasClass("cna")) {
                  element.removeClass("cna");
                }
              } else if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            } else {
              if (!element.hasClass("cnam")) {
                element.addClass("cnam");
              }
              if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            }
          }
        }
      });
    } else {
      var caps = {
        Money: 1e3,
        Slave: 0,
        Authority: global.race["cataclysm"] || global.race["orbit_decayed"] ? 90 : global.race["lone_survivor"] ? 100 : 80,
        Mana: 0,
        Energy: 100,
        Sus: 100,
        Knowledge: global.stats.achieve["extinct_junker"] && global.stats.achieve["extinct_junker"].l >= 1 ? 1e3 : 100,
        Omniscience: 0,
        Zen: 0,
        Food: 1e3,
        Crates: 0,
        Containers: 0,
        Lumber: 200,
        Stone: 200,
        Chrysotile: 200,
        Crystal: 10,
        Furs: 100,
        Copper: 100,
        Iron: 100,
        Cement: 100,
        Coal: 50,
        Oil: 0,
        Uranium: 10,
        Aluminium: 50,
        Steel: 50,
        Titanium: 50,
        Alloy: 50,
        Polymer: 50,
        Iridium: 0,
        Helium_3: 0,
        Water: 0,
        Deuterium: 0,
        Neutronium: 0,
        Adamantite: 0,
        Infernite: 0,
        Elerium: 1,
        Nano_Tube: 0,
        Graphene: 0,
        Stanene: 0,
        Bolognium: 0,
        Vitreloy: 0,
        Orichalcum: 0,
        Asphodel_Powder: 0,
        Elysanite: 0,
        Unobtainium: 0,
        Cipher: 0,
        Nanite: 0,
        Materials: 0
      };
      var lCaps = {
        unemployed: -1,
        hunter: -1,
        forager: -1,
        farmer: -1,
        lumberjack: -1,
        quarry_worker: -1,
        crystal_miner: -1,
        scavenger: -1,
        teamster: -1,
        meditator: -1,
        torturer: 0,
        miner: 0,
        coal_miner: 0,
        craftsman: 0,
        cement_worker: 0,
        banker: 0,
        entertainer: 0,
        priest: 0,
        professor: 0,
        scientist: 0,
        garrison: 0,
        colonist: 0,
        titan_colonist: 0,
        space_miner: 0,
        hell_surveyor: 0,
        archaeologist: 0,
        ghost_trapper: 0,
        elysium_miner: 0,
        pit_miner: 0,
        crew: 0
      };
      if (global.race["cataclysm"]) {
        caps["Money"] += 25e4;
        caps["Knowledge"] += 1e5;
        caps["Lumber"] += 1e5;
        caps["Stone"] += 1e5;
        caps["Chrysotile"] += 1e5;
        caps["Furs"] += 1e5;
        caps["Aluminium"] += 1e5;
        caps["Steel"] += 1e5;
        caps["Copper"] += 1e5;
        caps["Iron"] += 1e5;
        caps["Coal"] += 1e5;
        caps["Cement"] += 1e5;
        caps["Titanium"] += 75e3;
        caps["Alloy"] += 2e4;
        caps["Polymer"] += 2e4;
        caps["Uranium"] += 1e3;
      } else if (global.race["lone_survivor"]) {
        caps["Money"] += 1e9;
        caps["Knowledge"] += 1e5;
        caps["Food"] += 9e3;
        caps["Water"] += 1e4;
        caps["Elerium"] += 999;
      }
      if (global.stats.feat["adept"]) {
        let rank = checkAdept();
        if (global.race["smoldering"]) {
          caps["Chrysotile"] += rank * 60;
        } else {
          caps["Lumber"] += rank * 60;
        }
        caps["Stone"] += rank * 60;
      }
      if (global.race.hasOwnProperty("psychicPowers") && global.race.psychicPowers.hasOwnProperty("channel")) {
        caps["Energy"] -= global.race.psychicPowers.channel.boost;
        caps["Energy"] -= global.race.psychicPowers.channel.assault;
        caps["Energy"] -= global.race.psychicPowers.channel.cash;
        if (caps["Energy"] < 0) {
          caps["Energy"] = 100;
          global.race.psychicPowers.channel.boost = 0;
          global.race.psychicPowers.channel.assault = 0;
          global.race.psychicPowers.channel.cash = 0;
        }
      }
      caps[global.race.species] = 0;
      breakdown.c = {};
      Object.keys(caps).forEach(function(res) {
        breakdown.c[res] = { [loc("base")]: caps[res] + "v" };
      });
      if (global.race.universe === "evil" && global.tech["primitive"] && global.tech.primitive >= 3) {
        global.resource.Authority.display = true;
        let garrison = garrisonSize() || 0;
        if (global.civic.govern.type === "autocracy") {
          let gain = 10;
          caps.Authority += gain;
          breakdown.c.Authority[loc("govern_autocracy")] = gain + "v";
        } else if (global.civic.govern.type === "oligarchy") {
          let gain = 20;
          caps.Authority += gain;
          breakdown.c.Authority[loc("govern_oligarchy")] = gain + "v";
        }
        if (global.city["garrison"]) {
          let gain = global.city.garrison.on * 0.5;
          caps.Authority += gain;
          breakdown.c.Authority[actions.city.garrison.title()] = gain + "v";
        }
        if (global.city["temple"] && !global.race["warlord"]) {
          let gain = templeCount() * 0.5;
          caps.Authority += gain;
          breakdown.c.Authority[structName("temple")] = gain + "v";
        }
        if (global.space["space_barracks"]) {
          let gain = global.space.space_barracks.on * (global.race["cataclysm"] ? 2 : 1);
          caps.Authority += gain;
          breakdown.c.Authority[loc("space_red_space_barracks_title")] = gain + "v";
        }
        if (global.interstellar["cruiser"] && int_on["cruiser"]) {
          let gain = int_on["cruiser"];
          caps.Authority += gain;
          breakdown.c.Authority[loc("interstellar_cruiser_title")] = gain + "v";
        }
        if (global.race["warlord"]) {
          let gain = global.race?.absorbed?.length || 1;
          caps.Authority += gain;
          breakdown.c.Authority[loc("portal_throne_of_evil_title")] = gain + "v";
        }
        if (global.portal["brute"]) {
          let gain = global.portal.brute.on;
          caps.Authority += gain;
          breakdown.c.Authority[loc("portal_brute_bd")] = gain + "v";
        }
        if (global.portal["minions"]) {
          let gain = global.portal.minions.on;
          caps.Authority += gain;
          breakdown.c.Authority[loc("portal_minions_bd")] = gain + "v";
        }
        if (global.race["warlord"] && global.eden["bunker"] && support_on["bunker"]) {
          let gain = support_on["bunker"];
          caps.Authority += gain;
          breakdown.c.Authority[loc("eden_bunker_title")] = gain + "v";
        }
        if (global.race["lone_survivor"] || global.tech["isolation"]) {
          let gain = p_on["orbital_station"];
          caps.Authority += gain;
          breakdown.c.Authority[loc("tau_home_orbital_station")] = gain + "v";
        }
        let pet = 0;
        if (global.race["pet"]) {
          pet = 1;
          if (global.race["pet"]) {
            if (global.race.pet.event > 0) {
              pet++;
            }
            if (global.race.pet.pet > 0) {
              pet += global.race.pet.type === "cat" ? 2 : 1;
            } else if (global.race.pet.pet < 0) {
              pet -= global.race.pet.type === "cat" ? 2 : 1;
            }
          }
          caps.Authority += pet;
          breakdown.c.Authority[loc(`event_pet_${global.race.pet.type}_owner`)] = pet + "v";
        }
        global.resource.Authority.amount = global.race["cataclysm"] || global.race["orbit_decayed"] ? 90 : global.race["lone_survivor"] ? 100 : 80;
        if (global.city.morale.current > 100) {
          let excess = global.city.morale.current - 100;
          if (global.civic.govern.type === "democracy") {
            excess *= 0.9;
          }
          global.resource.Authority.amount -= excess;
        }
        if (global.civic["garrison"]) {
          let adjust = 0.7;
          if (global.tech["evil"]) {
            adjust += 0.1 * global.tech.evil;
          }
          if (global.portal["fortress"]) {
            garrison += global.portal.fortress.garrison - global.portal.fortress.patrols * global.portal.fortress.patrol_size;
          }
          let gain = highPopAdjust(garrison) * adjust;
          if (global.race["grenadier"]) {
            gain *= 1.75;
          }
          if (global.civic.govern.type === "autocracy") {
            gain *= 1.08;
          } else if (global.civic.govern.type === "dictator") {
            gain *= 1.12;
          }
          global.resource.Authority.amount += gain;
        }
        if (pet !== 0) {
          global.resource.Authority.amount += pet;
        }
        if ((global.race["lone_survivor"] || global.tech["isolation"]) && global.tauceti["colony"] && support_on["colony"]) {
          global.resource.Authority.amount += support_on["colony"] * 5;
        }
        global.resource.Authority.amount = Math.floor(global.resource.Authority.amount);
        if (global.resource.Authority.amount < 0) {
          global.resource.Authority.amount = 0;
        }
      } else {
        global.resource.Authority.display = false;
      }
      const loops = Math.min(1, Math.floor(turboSpeed));
      for (let i = 0; i < loops; i++) {
        if (global.race["unfathomable"] && global.city["captive_housing"]) {
          let strength = weaponTechModifer();
          let hunt = workerScale(global.civic.hunter.workers, "hunter");
          hunt *= racialTrait(hunt, "hunting") * strength;
          if (global.race["swift"]) {
            hunt *= 1 + traits.swift.vars()[1] / 100;
          }
          if (global.race["servants"]) {
            let serve = global.race.servants.jobs.hunter * strength;
            serve *= servantTrait(global.race.servants.jobs.hunter, "hunting");
            hunt += serve;
          }
          let usedCap = 0;
          let thralls = 0;
          let imprisoned = [];
          if (global.city.hasOwnProperty("surfaceDwellers")) {
            for (let i2 = 0; i2 < global.city.surfaceDwellers.length; i2++) {
              let mindbreak = global.city.captive_housing[`race${i2}`];
              let jailed = global.city.captive_housing[`jailrace${i2}`];
              usedCap += mindbreak + jailed;
              thralls += mindbreak;
              if (jailed > 0) {
                imprisoned.push(i2);
              }
            }
          }
          let catchVar = Math.round(40 / traits.unfathomable.vars()[1]);
          if (usedCap < global.city.captive_housing.raceCap && Math.rand(0, catchVar * usedCap - hunt) <= 0) {
            let k = Math.rand(0, global.city.surfaceDwellers.length);
            global.city.captive_housing[`jailrace${k}`]++;
          }
          if (global.tech["unfathomable"] && global.tech.unfathomable >= 2 && global.civic.torturer.workers > 0 && imprisoned.length > 0) {
            if (Math.rand(0, Math.ceil((thralls + 1) ** 1.45)) < global.civic.torturer.workers / 2 * (1 + traits.psychic.vars()[0])) {
              let k = imprisoned[Math.rand(0, imprisoned.length)];
              global.city.captive_housing[`jailrace${k}`]--;
              global.city.captive_housing[`race${k}`]++;
            }
          }
        }
        if (global.race["psychic"]) {
          if (global.race["psychicPowers"] && global.race.psychicPowers.boostTime > 0) {
            global.race.psychicPowers.boostTime--;
            if (global.race.psychicPowers.boostTime < 0 || global.race.psychicPowers.boostTime > 360) {
              global.race.psychicPowers.boostTime = 0;
            }
          }
          if (global.race["psychicPowers"] && global.race.psychicPowers["assaultTime"] && global.race.psychicPowers.assaultTime > 0) {
            global.race.psychicPowers.assaultTime--;
            if (global.race.psychicPowers.assaultTime < 0 || global.race.psychicPowers.assaultTime > 360) {
              global.race.psychicPowers.assaultTime = 0;
            }
          }
          if (global.race["psychicPowers"] && global.race.psychicPowers["cash"] && global.race.psychicPowers.cash > 0) {
            global.race.psychicPowers.cash--;
            if (global.race.psychicPowers.cash < 0 || global.race.psychicPowers.cash > 360) {
              global.race.psychicPowers.cash = 0;
            }
          }
        }
      }
      if (global.city["nanite_factory"]) {
        let gain = global.city.nanite_factory.count * spatialReasoning(2500);
        caps["Nanite"] += gain;
        breakdown.c.Nanite[loc("city_nanite_factory")] = gain + "v";
      }
      if (p_on["transmitter"] && global.race["artifical"]) {
        let gain = p_on["transmitter"] * spatialReasoning(100);
        caps["Food"] += gain;
        breakdown.c.Food[loc("city_transmitter")] = gain + "v";
      }
      if (global.city["pylon"] || global.space["pylon"] || global.tauceti["pylon"]) {
        let gain = 0;
        let name = "city_pylon";
        if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.space["pylon"]) {
          gain = spatialReasoning(2) * global.space.pylon.count;
          name = "space_red_pylon";
        } else if (global.tech["isolation"] && global.tauceti["pylon"]) {
          gain = spatialReasoning(2) * global.tauceti.pylon.count;
          ;
          name = "tau_home_pylon";
        } else if (global.city["pylon"]) {
          gain = spatialReasoning(5) * global.city.pylon.count;
          ;
        }
        caps["Mana"] += gain;
        breakdown.c.Mana[loc(name)] = gain + "v";
      }
      if (global.city["captive_housing"]) {
        let houses = global.city.captive_housing.count;
        global.city.captive_housing.raceCap = houses * (global.tech["unfathomable"] && global.tech.unfathomable >= 3 ? 3 : 2);
        global.city.captive_housing.cattleCap = houses * 5;
      }
      if (global.city["farm"]) {
        if (global.tech["farm"]) {
          let pop = global.city.farm.count * actions.city.farm.citizens();
          caps[global.race.species] += pop;
          breakdown.c[global.race.species][loc("city_farm")] = pop + "v";
        }
      }
      if (global.city["wharf"]) {
        let vol = global.tech["world_control"] ? 15 : 10;
        if (global.tech["particles"] && global.tech["particles"] >= 2) {
          vol *= 2;
        }
        caps["Crates"] += global.city.wharf.count * vol;
        breakdown.c.Crates[loc("city_wharf")] = global.city.wharf.count * vol + "v";
        caps["Containers"] += global.city.wharf.count * vol;
        breakdown.c.Containers[loc("city_wharf")] = global.city.wharf.count * vol + "v";
      }
      if (global.space["munitions_depot"]) {
        let vol = 25;
        caps["Crates"] += global.space.munitions_depot.count * vol;
        breakdown.c.Crates[loc("tech_munitions_depot")] = global.space.munitions_depot.count * vol + "v";
        caps["Containers"] += global.space.munitions_depot.count * vol;
        breakdown.c.Containers[loc("tech_munitions_depot")] = global.space.munitions_depot.count * vol + "v";
      }
      if (global.interstellar["cargo_yard"]) {
        caps["Crates"] += global.interstellar.cargo_yard.count * 50;
        breakdown.c.Crates[loc("interstellar_cargo_yard_title")] = global.interstellar.cargo_yard.count * 50 + "v";
        caps["Containers"] += global.interstellar.cargo_yard.count * 50;
        breakdown.c.Containers[loc("interstellar_cargo_yard_title")] = global.interstellar.cargo_yard.count * 50 + "v";
        let gain = global.interstellar.cargo_yard.count * spatialReasoning(200);
        caps["Neutronium"] += gain;
        breakdown.c.Neutronium[loc("interstellar_cargo_yard_title")] = gain + "v";
        gain = global.interstellar.cargo_yard.count * spatialReasoning(150);
        caps["Infernite"] += gain;
        breakdown.c.Infernite[loc("interstellar_cargo_yard_title")] = gain + "v";
      }
      if (global.interstellar["neutron_miner"] && p_on["neutron_miner"]) {
        let gain = p_on["neutron_miner"] * spatialReasoning(500);
        caps["Neutronium"] += gain;
        breakdown.c.Neutronium[loc("interstellar_neutron_miner_title")] = gain + "v";
      }
      if (global.city["storage_yard"]) {
        let size = global.tech.container >= 3 ? 20 : 10;
        if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 1) {
          size += 10;
        }
        if (global.tech["world_control"]) {
          size += 10;
        }
        if (global.tech["particles"] && global.tech["particles"] >= 2) {
          size *= 2;
        }
        caps["Crates"] += global.city["storage_yard"].count * size;
        breakdown.c.Crates[loc("city_storage_yard")] = global.city["storage_yard"].count * size + "v";
      }
      if (global.space["garage"]) {
        let g_vol = global.tech["particles"] >= 4 ? 20 + global.tech["supercollider"] : 20;
        if (global.tech["world_control"] || global.race["cataclysm"]) {
          g_vol += 10;
        }
        caps["Containers"] += global.space.garage.count * g_vol;
        breakdown.c.Containers[loc("space_red_garage_title")] = global.space.garage.count * g_vol + "v";
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          caps["Crates"] += global.space.garage.count * g_vol;
          breakdown.c.Crates[loc("space_red_garage_title")] = global.space.garage.count * g_vol + "v";
        }
      }
      if (global.tech["tp_depot"]) {
        caps["Containers"] += global.tech.tp_depot * 50;
        breakdown.c.Containers[loc("galaxy_gateway_depot")] = global.tech.tp_depot * 50 + "v";
        caps["Crates"] += global.tech.tp_depot * 50;
        breakdown.c.Crates[loc("galaxy_gateway_depot")] = global.tech.tp_depot * 50 + "v";
      }
      if (global.city["warehouse"]) {
        let volume = global.tech["steel_container"] >= 2 ? 20 : 10;
        if (global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 2) {
          volume += 10;
        }
        if (global.tech["world_control"]) {
          volume += 10;
        }
        if (global.tech["particles"] && global.tech["particles"] >= 2) {
          volume *= 2;
        }
        caps["Containers"] += global.city["warehouse"].count * volume;
        breakdown.c.Containers[loc("city_warehouse")] = global.city["warehouse"].count * volume + "v";
      }
      if (global.city["rock_quarry"]) {
        let gain = BHStorageMulti(global.city.rock_quarry.count * spatialReasoning(100));
        caps["Stone"] += gain;
        breakdown.c.Stone[loc("city_rock_quarry")] = gain + "v";
        caps["Chrysotile"] += gain;
        breakdown.c.Chrysotile[loc("city_rock_quarry")] = gain + "v";
      }
      if (global.city["lumber_yard"]) {
        let gain = BHStorageMulti(global.city.lumber_yard.count * spatialReasoning(100));
        caps["Lumber"] += gain;
        breakdown.c.Lumber[loc("city_lumber_yard")] = gain + "v";
      } else if (global.city["graveyard"]) {
        let gain = BHStorageMulti(global.city.graveyard.count * spatialReasoning(100));
        caps["Lumber"] += gain;
        breakdown.c.Lumber[loc("city_graveyard")] = gain + "v";
      }
      if (global.city["sawmill"]) {
        let gain = BHStorageMulti(global.city.sawmill.count * spatialReasoning(200));
        caps["Lumber"] += gain;
        breakdown.c.Lumber[loc("city_sawmill")] = gain + "v";
      }
      if (global.city["mine"]) {
        lCaps["miner"] += jobScale(global.city.mine.count);
      }
      if (global.portal["dig_demon"] && global.race["warlord"]) {
        let demons = global.portal.dig_demon.on * actions.portal.prtl_wasteland.dig_demon.citizens();
        caps[global.race.species] += demons;
        breakdown.c[global.race.species][loc("portal_dig_demon_title")] = demons + "v";
        lCaps["miner"] += demons;
        global.civic.miner.max = demons;
        global.civic.miner.workers = demons;
        global.civic.miner.assigned = demons;
      }
      if (global.city["coal_mine"]) {
        lCaps["coal_miner"] += jobScale(global.city.coal_mine.count);
      }
      if (global.city["bank"]) {
        lCaps["banker"] += jobScale(global.city.bank.count);
      }
      if (global.city["amphitheatre"]) {
        let athVal = govActive("athleticism", 1);
        lCaps["entertainer"] += jobScale(athVal ? global.city.amphitheatre.count * athVal : global.city.amphitheatre.count);
      }
      if (global.city["casino"]) {
        if (global.tech["theatre"] && !global.race["joyless"]) {
          lCaps["entertainer"] += jobScale(global.city.casino.count);
        }
      }
      if (global.space["spc_casino"]) {
        if (global.tech["theatre"] && !global.race["joyless"]) {
          lCaps["entertainer"] += jobScale(global.space.spc_casino.count);
        }
        if (global.race["orbit_decayed"]) {
          lCaps["banker"] += jobScale(global.space.spc_casino.count);
        }
      }
      if (global.portal["hell_casino"]) {
        if (global.tech["theatre"] && !global.race["joyless"]) {
          lCaps["entertainer"] += jobScale(global.portal.hell_casino.count * 3);
        }
        lCaps["banker"] += jobScale(global.portal.hell_casino.count);
      }
      if (global.tauceti["tauceti_casino"]) {
        if (global.tech["theatre"] && !global.race["joyless"]) {
          lCaps["entertainer"] += jobScale(global.tauceti.tauceti_casino.count);
        }
        if (global.tech["isolation"]) {
          lCaps["banker"] += jobScale(global.tauceti.tauceti_casino.count);
          let pop = p_on["tauceti_casino"] * actions.tauceti.tau_home.tauceti_casino.citizens();
          caps[global.race.species] += pop;
          breakdown.c[global.race.species][structName("casino")] = pop + "v";
        }
      }
      if (global.galaxy["resort"]) {
        if (global.tech["theatre"] && !global.race["joyless"]) {
          lCaps["entertainer"] += jobScale(p_on["resort"] * 2);
        }
      }
      if (global.city["cement_plant"]) {
        lCaps["cement_worker"] += jobScale(global.city.cement_plant.count * 2);
      }
      if (global.eden["eden_cement"]) {
        let ec = p_on["eden_cement"] || 0;
        lCaps["cement_worker"] += jobScale(ec * 5);
      }
      if (global.race["orbit_decayed"] && p_on["red_factory"]) {
        lCaps["cement_worker"] += jobScale(p_on["red_factory"]);
      }
      if (global.race["parasite"] && !global.tech["isolation"]) {
        lCaps["garrison"] += jobScale(traits.parasite.vars()[0]);
      }
      if (global.city["garrison"]) {
        lCaps["garrison"] += global.city.garrison.on * actions.city.garrison.soldiers();
      }
      if (global.space["space_barracks"] && !global.race["fasting"]) {
        let soldiers = actions.space.spc_red.space_barracks.soldiers();
        lCaps["garrison"] += Math.round(global.space.space_barracks.on * soldiers);
      }
      if (global.interstellar["cruiser"]) {
        let soldiers = actions.interstellar.int_proxima.cruiser.soldiers();
        lCaps["garrison"] += int_on["cruiser"] * soldiers;
      }
      if (global.portal["brute"]) {
        let soldiers = actions.portal.prtl_wasteland.brute.soldiers();
        lCaps["garrison"] += global.portal.brute.on * soldiers;
      }
      if (global.race["wish"] && global.race["wishStats"]) {
        lCaps["garrison"] += jobScale(global.race.wishStats.troop);
      }
      if (p_on["s_gate"] && global.galaxy["starbase"]) {
        let soldiers = actions.galaxy.gxy_gateway.starbase.soldiers();
        lCaps["garrison"] += p_on["starbase"] * soldiers;
      }
      if (global.eden["bunker"]) {
        let soldiers = actions.eden.eden_asphodel.bunker.soldiers();
        lCaps["garrison"] += support_on["bunker"] * soldiers;
      }
      if (global.eden["fire_support_base"] && global.eden.fire_support_base.count === 100) {
        lCaps["garrison"] += actions.eden.eden_elysium.fire_support_base.soldiers();
      }
      if (global.race["orbit_decayed"] && global.space.hasOwnProperty("red_mine")) {
        lCaps["miner"] += jobScale(support_on["red_mine"]);
        lCaps["coal_miner"] += jobScale(support_on["red_mine"]);
      }
      if (!global.tech["world_control"]) {
        let occ_amount = jobScale(global.civic.govern.type === "federation" ? 15 : 20);
        for (let i = 2; i >= 0; i--) {
          if (global.civic.foreign[`gov${i}`].occ) {
            lCaps["garrison"] -= occ_amount;
            if (lCaps["garrison"] < 0) {
              global.civic.foreign[`gov${i}`].occ = false;
              lCaps["garrison"] += occ_amount;
              global.civic.garrison.workers += occ_amount;
              messageQueue(loc("civics_garrison_autodeoccupy_desc", [govTitle(i)]), "danger", false, ["spy"]);
            }
          }
        }
      }
      if (global.race["slaver"] && global.tech["slaves"] && global.city["slave_pen"]) {
        caps["Slave"] = global.city.slave_pen.count * 4;
        breakdown.c.Slave[loc("city_slave_housing", [global.resource.Slave.name])] = global.city.slave_pen.count * 4 + "v";
        if (caps["Slave"] < global.resource.Slave.amount) {
          global.resource.Slave.amount = caps["Slave"];
        }
      }
      if (global.race["calm"] && global.city["meditation"]) {
        caps["Zen"] = global.city.meditation.count * traits.calm.vars()[0];
        breakdown.c.Zen[loc("city_meditation")] = global.city.meditation.count * traits.calm.vars()[0] + "v";
        global.resource.Zen.amount = global.resource[global.race.species].amount * 2 + global.civic.garrison.workers;
        if (global.resource.Zen.amount > global.resource.Zen.max) {
          global.resource.Zen.amount = global.resource.Zen.max;
        }
        let zen = global.resource.Zen.amount / (global.resource.Zen.amount + 5e3);
        breakdown.c.Zen[loc("trait_calm_desc")] = `+${(zen * 100).toFixed(2)}%`;
      }
      if (global.city["basic_housing"]) {
        let pop = global.city.basic_housing.count * actions.city.basic_housing.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][housingLabel("small")] = pop + "v";
      }
      if (global.tauceti["tau_housing"] && global.tech["isolation"]) {
        let pop = global.tauceti.tau_housing.count * actions.tauceti.tau_home.tau_housing.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][housingLabel("small")] = pop + "v";
      }
      if (global.city["cottage"]) {
        let pop = global.city.cottage.count * actions.city.cottage.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][housingLabel("medium")] = pop + "v";
        if (global.tech["home_safe"]) {
          let gain = global.city["cottage"].count * spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? 5e3 : 2e3 : 1e3);
          caps["Money"] += gain;
          breakdown.c.Money[housingLabel("medium")] = gain + "v";
        }
      }
      if (global.city["apartment"]) {
        let pop = p_on["apartment"] * actions.city.apartment.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][housingLabel("large")] = pop + "v";
        if (global.tech["home_safe"]) {
          let gain = p_on["apartment"] * spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? 1e4 : 5e3 : 2e3);
          caps["Money"] += gain;
          breakdown.c.Money[housingLabel("large")] = gain + "v";
        }
      }
      if (global.eden["rectory"]) {
        let pop = p_on["rectory"] * actions.eden.eden_asphodel.rectory.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc(`eden_rectory_title`)] = pop + "v";
      }
      if (p_on["s_gate"] && global.galaxy["consulate"] && global.galaxy.consulate.count >= 1) {
        let pop = actions.galaxy.gxy_alien1.consulate.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("galaxy_consulate")] = pop + "v";
      }
      if (p_on["s_gate"] && p_on["embassy"] && global.tech.xeno >= 11) {
        let pop = actions.galaxy.gxy_gorddon.embassy.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("galaxy_embassy")] = pop + "v";
      }
      if (p_on["s_gate"] && p_on["embassy"] && global.galaxy["dormitory"]) {
        let pop = p_on["dormitory"] * actions.galaxy.gxy_gorddon.dormitory.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("galaxy_dormitory")] = pop + "v";
      }
      if (p_on["arcology"]) {
        let pop = p_on["arcology"] * actions.portal.prtl_ruins.arcology.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("portal_arcology_title")] = pop + "v";
        lCaps["garrison"] += p_on["arcology"] * actions.portal.prtl_ruins.arcology.soldiers();
        caps["Containers"] += p_on["arcology"] * Math.round(quantum_level) * 10;
        breakdown.c.Containers[loc("portal_arcology_title")] = p_on["arcology"] * Math.round(quantum_level) * 10 + "v";
        caps["Crates"] += p_on["arcology"] * Math.round(quantum_level) * 10;
        breakdown.c.Crates[loc("portal_arcology_title")] = p_on["arcology"] * Math.round(quantum_level) * 10 + "v";
        let sup = hellSupression("ruins");
        let money = p_on["arcology"] * spatialReasoning(bank_vault() * 8 * sup.supress);
        caps["Money"] += money;
        breakdown.c.Money[loc("portal_arcology_title")] = money + "v";
      }
      if (global.portal["bazaar"] && global.portal["spire"]) {
        let containers = global.portal.bazaar.count * global.portal.spire.count * 8;
        caps["Containers"] += containers;
        breakdown.c.Containers[loc("portal_bazaar_title")] = containers + "v";
        caps["Crates"] += containers;
        breakdown.c.Crates[loc("portal_bazaar_title")] = containers + "v";
        let money = spatialReasoning(bank_vault() * global.portal.spire.count * global.portal.bazaar.count / 3);
        caps["Money"] += money;
        breakdown.c.Money[loc("portal_bazaar_title")] = money + "v";
      }
      if (support_on["colony"]) {
        let containers = global.tech["isolation"] ? 900 : 250;
        caps["Containers"] += support_on["colony"] * containers;
        breakdown.c.Containers[loc("tau_home_colony")] = support_on["colony"] * containers + "v";
        caps["Crates"] += support_on["colony"] * containers;
        breakdown.c.Crates[loc("tau_home_colony")] = support_on["colony"] * containers + "v";
        let pop = support_on["colony"] * actions.tauceti.tau_home.colony.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("tau_home_colony")] = pop + "v";
      }
      if (p_on["operating_base"]) {
        lCaps["garrison"] += Math.min(support_on["operating_base"], p_on["operating_base"]) * actions.space.spc_enceladus.operating_base.soldiers();
      }
      if (p_on["fob"]) {
        lCaps["garrison"] += actions.space.spc_triton.fob.soldiers();
      }
      if (global.space["living_quarters"]) {
        let gain = Math.round(support_on["living_quarters"] * actions.space.spc_red.living_quarters.citizens());
        caps[global.race.species] += gain;
        lCaps["colonist"] += jobScale(support_on["living_quarters"]);
        breakdown.c[global.race.species][`${planetName().red}`] = gain + "v";
        if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.tech["home_safe"]) {
          let gain2 = support_on["living_quarters"] * spatialReasoning(global.tech.home_safe >= 2 ? global.tech.home_safe >= 3 ? 1e5 : 5e4 : 25e3);
          caps["Money"] += gain2;
          breakdown.c.Money[loc("space_red_living_quarters_title")] = gain2 + "v";
        }
      }
      if (support_on["biodome"] && (global.race["artifical"] || global.race["orbit_decayed"])) {
        let gain = support_on["biodome"] * spatialReasoning(global.race["artifical"] ? 500 : 100);
        caps["Food"] += gain;
        breakdown.c.Food[loc("space_red_signal_tower_title")] = gain + "v";
      }
      if (global.space["titan_quarters"]) {
        let gain = Math.round(support_on["titan_quarters"] * actions.space.spc_titan.titan_quarters.citizens());
        caps[global.race.species] += gain;
        lCaps["titan_colonist"] += jobScale(support_on["titan_quarters"]);
        breakdown.c[global.race.species][`${planetName().titan}`] = gain + "v";
      }
      if (global.interstellar["habitat"] && p_on["habitat"]) {
        let pop = p_on["habitat"] * actions.interstellar.int_alpha.habitat.citizens();
        caps[global.race.species] += pop;
        breakdown.c[global.race.species][loc("interstellar_habitat_title")] = pop + "v";
      }
      if (global.interstellar["luxury_condo"] && p_on["luxury_condo"]) {
        let cit = p_on["luxury_condo"] * actions.interstellar.int_alpha.luxury_condo.citizens();
        caps[global.race.species] += cit;
        breakdown.c[global.race.species][loc("tech_luxury_condo")] = cit + "v";
        let gain = p_on["luxury_condo"] * spatialReasoning(75e4);
        caps["Money"] += gain;
        breakdown.c.Money[loc("tech_luxury_condo")] = gain + "v";
      }
      if (global.city["lodge"]) {
        let cit = global.city.lodge.count * actions.city.lodge.citizens();
        caps[global.race.species] += cit;
        breakdown.c[global.race.species][loc("city_lodge")] = cit + "v";
      }
      if (global.portal["hovel"]) {
        let cit = global.portal.hovel.count * actions.portal.prtl_wasteland.hovel.citizens();
        caps[global.race.species] += cit;
        breakdown.c[global.race.species][loc("portal_hovel_title")] = cit + "v";
      }
      if (global.space["outpost"]) {
        let gain = global.space["outpost"].count * spatialReasoning(500);
        caps["Neutronium"] += gain;
        breakdown.c.Neutronium[loc("space_gas_moon_outpost_title")] = gain + "v";
      }
      if (global.city["shed"]) {
        var multiplier = storageMultipler();
        let label = global.tech["storage"] <= 2 ? loc("city_shed_title1") : global.tech["storage"] >= 4 ? loc("city_shed_title3") : loc("city_shed_title2");
        for (const res of actions.city.shed.res()) {
          if (global.resource[res].display) {
            let gain = global.city.shed.count * spatialReasoning(actions.city.shed.val(res) * multiplier);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.race["lone_survivor"]) {
        breakdown.c[global.race.species][loc("base")] = "1v";
        caps[global.race.species] = 1;
      }
      if (global.interstellar["warehouse"]) {
        var multiplier = storageMultipler();
        let label = loc("interstellar_alpha_name");
        for (const res of actions.interstellar.int_alpha.warehouse.res()) {
          if (global.resource[res].display) {
            let gain = global.interstellar.warehouse.count * spatialReasoning(actions.interstellar.int_alpha.warehouse.val(res) * multiplier);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.eden["warehouse"]) {
        var multiplier = storageMultipler(global.race["warlord"] ? 1 : 0.2);
        if (global.race["warlord"] && global.eden["corruptor"]) {
          multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 12 ? global.tech.asphodel >= 13 ? 0.16 : 0.12 : 0.08);
        }
        let label = loc("eden_asphodel_name");
        for (const res of actions.eden.eden_asphodel.warehouse.res()) {
          if (global.resource[res].display) {
            let gain = global.eden.warehouse.count * spatialReasoning(actions.eden.eden_asphodel.warehouse.val(res) * multiplier);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.portal["warehouse"]) {
        var multiplier = storageMultipler();
        if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
          multiplier *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 13 ? 0.16 : 0.12);
        }
        let label = global.tech["storage"] <= 2 ? loc("city_shed_title1") : global.tech["storage"] >= 4 ? loc("city_shed_title3") : loc("city_shed_title2");
        for (const res of actions.portal.prtl_wasteland.warehouse.res()) {
          if (global.resource[res].display) {
            let gain = global.portal.warehouse.count * spatialReasoning(actions.portal.prtl_wasteland.warehouse.val(res) * multiplier);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
        let cc_gain = global.portal.warehouse.count * (65 + global.portal.warehouse.rank * 35);
        caps["Crates"] += cc_gain;
        breakdown.c["Crates"][label] = cc_gain + "v";
        caps["Containers"] += cc_gain;
        breakdown.c["Containers"][label] = cc_gain + "v";
      }
      if (global.space["storehouse"]) {
        var multiplier = tpStorageMultiplier("storehouse", false);
        var h_multiplier = tpStorageMultiplier("storehouse", true);
        let label = loc("space_storehouse_title");
        for (const res of actions.space.spc_titan.storehouse.res()) {
          if (global.resource[res].display) {
            let heavy = actions.space.spc_titan.storehouse.heavy(res);
            let gain = global.space.storehouse.count * spatialReasoning(actions.space.spc_titan.storehouse.val(res) * (heavy ? h_multiplier : multiplier));
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.tauceti["repository"]) {
        var multiplier = tpStorageMultiplier("repository");
        let label = loc("tech_repository");
        for (const res of actions.tauceti.tau_home.repository.res()) {
          if (global.resource[res].display) {
            let gain = global.tauceti.repository.count * spatialReasoning(actions.tauceti.tau_home.repository.val(res) * multiplier);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
        if (global.tech["isolation"]) {
          let containers = 250;
          caps["Containers"] += global.tauceti.repository.count * containers;
          breakdown.c.Containers[loc("tech_repository")] = global.tauceti.repository.count * containers + "v";
          caps["Crates"] += global.tauceti.repository.count * containers;
          breakdown.c.Crates[loc("tech_repository")] = global.tauceti.repository.count * containers + "v";
        }
      }
      if (global.tech["isolation"] && p_on["tau_farm"] && global.race["artifical"]) {
        let gain = p_on["tau_farm"] * spatialReasoning(350);
        caps["Food"] += gain;
        breakdown.c.Food[loc("tau_home_tau_farm")] = gain + "v";
      }
      if (global.galaxy["gateway_depot"]) {
        let containers = global.tech["world_control"] ? 150 : 100;
        caps["Crates"] += global.galaxy.gateway_depot.count * containers;
        breakdown.c.Crates[loc("galaxy_gateway_depot")] = global.galaxy.gateway_depot.count * containers + "v";
        caps["Containers"] += global.galaxy.gateway_depot.count * containers;
        breakdown.c.Containers[loc("galaxy_gateway_depot")] = global.galaxy.gateway_depot.count * containers + "v";
        let label = loc("galaxy_gateway_depot");
        let multiplier2 = gatewayStorage();
        if (global.resource.Uranium.display) {
          let gain = global.galaxy.gateway_depot.count * spatialReasoning(3e3 * multiplier2);
          caps["Uranium"] += gain;
          breakdown.c.Uranium[label] = gain + "v";
        }
        if (global.resource.Nano_Tube.display) {
          let gain = global.galaxy.gateway_depot.count * spatialReasoning(25e4 * multiplier2);
          caps["Nano_Tube"] += gain;
          breakdown.c.Nano_Tube[label] = gain + "v";
        }
        if (global.resource.Neutronium.display) {
          let gain = global.galaxy.gateway_depot.count * spatialReasoning(9001 * multiplier2);
          caps["Neutronium"] += gain;
          breakdown.c.Neutronium[label] = gain + "v";
        }
        if (global.resource.Infernite.display) {
          let gain = global.galaxy.gateway_depot.count * spatialReasoning(6660 * multiplier2);
          caps["Infernite"] += gain;
          breakdown.c.Infernite[label] = gain + "v";
        }
        if (global.resource.Elerium.display && p_on["gateway_depot"] && p_on["s_gate"]) {
          let gain = p_on["gateway_depot"] * spatialReasoning(200);
          caps["Elerium"] += gain;
          breakdown.c.Elerium[label] = gain + "v";
        }
      }
      if (global.resource.Infernite.display && global.portal["fortress"] && !global.race["warlord"]) {
        let gain = spatialReasoning(1e3);
        caps["Infernite"] += gain;
        breakdown.c.Infernite[loc("portal_fortress_name")] = gain + "v";
      }
      if (global.space["garage"]) {
        var multiplier = actions.space.spc_red.garage.multiplier(false);
        var h_multiplier = actions.space.spc_red.garage.multiplier(true);
        let label = loc("space_red_garage_title");
        for (const res of actions.space.spc_red.garage.res()) {
          if (global.resource[res].display) {
            let heavy = actions.space.spc_red.garage.heavy(res);
            let gain = global.space.garage.count * spatialReasoning(actions.space.spc_red.garage.val(res) * (heavy ? h_multiplier : multiplier));
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.portal["harbor"] && p_on["harbor"]) {
        let multiplier2 = 1;
        if (global.race["warlord"] && global.eden["corruptor"] && global.tech?.asphodel >= 12) {
          multiplier2 *= 1 + (p_on["corruptor"] || 0) * (global.tech.asphodel >= 13 ? 0.12 : 0.1);
        }
        let label = loc("portal_harbor_title");
        for (const res of actions.portal.prtl_lake.harbor.res()) {
          if (global.resource[res].display) {
            let gain = p_on["harbor"] * spatialReasoning(actions.portal.prtl_lake.harbor.val(res) * multiplier2);
            caps[res] += gain;
            breakdown.c[res][label] = gain + "v";
          }
        }
        ;
      }
      if (global.city["silo"]) {
        let gain = BHStorageMulti(global.city["silo"].count * spatialReasoning(500));
        caps["Food"] += gain;
        breakdown.c.Food[loc("city_silo")] = gain + "v";
      }
      if (global.city["compost"]) {
        let gain = BHStorageMulti(global.city["compost"].count * spatialReasoning(200));
        caps["Food"] += gain;
        breakdown.c.Food[loc("city_compost_heap")] = gain + "v";
      }
      if (global.city["soul_well"]) {
        let gain = BHStorageMulti(global.city["soul_well"].count * spatialReasoning(500));
        caps["Food"] += gain;
        breakdown.c.Food[loc("city_soul_well")] = gain + "v";
      }
      if (global.city["smokehouse"]) {
        let gain = BHStorageMulti(global.city["smokehouse"].count * spatialReasoning(100));
        caps["Food"] += gain;
        breakdown.c.Food[loc("city_smokehouse")] = gain + "v";
      }
      if (global.city["oil_well"]) {
        let gain = global.city["oil_well"].count * spatialReasoning(500);
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("city_oil_well")] = gain + "v";
      }
      if (global.city["oil_depot"]) {
        let gain = global.city["oil_depot"].count * spatialReasoning(1e3);
        gain *= global.tech["world_control"] ? 1.5 : 1;
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("city_oil_depot")] = gain + "v";
        if (global.tech["uranium"] >= 2) {
          gain = global.city["oil_depot"].count * spatialReasoning(250);
          gain *= global.tech["world_control"] ? 1.5 : 1;
          caps["Uranium"] += gain;
          breakdown.c.Uranium[loc("city_oil_depot")] = gain + "v";
        }
        if (global.resource["Helium_3"].display) {
          gain = global.city["oil_depot"].count * spatialReasoning(400);
          gain *= global.tech["world_control"] ? 1.5 : 1;
          caps["Helium_3"] += gain;
          breakdown.c.Helium_3[loc("city_oil_depot")] = gain + "v";
        }
      }
      if (global.space["propellant_depot"]) {
        let gain = global.space["propellant_depot"].count * spatialReasoning(1250);
        gain *= global.tech["world_control"] ? 1.5 : 1;
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("space_home_propellant_depot_title")] = gain + "v";
        if (global.resource["Helium_3"].display) {
          gain = global.space["propellant_depot"].count * spatialReasoning(1e3);
          gain *= global.tech["world_control"] ? 1.5 : 1;
          caps["Helium_3"] += gain;
          breakdown.c.Helium_3[loc("space_home_propellant_depot_title")] = gain + "v";
        }
      }
      if (p_on["orbital_station"]) {
        let gain = p_on["orbital_station"] * spatialReasoning(15e3);
        caps["Helium_3"] += gain;
        breakdown.c.Helium_3[loc("tau_home_orbital_station")] = gain + "v";
      }
      if (p_on["refueling_station"]) {
        let h_gain = p_on["refueling_station"] * spatialReasoning(1e4);
        caps["Helium_3"] += h_gain;
        breakdown.c.Helium_3[loc("tau_gas_refueling_station_title")] = h_gain + "v";
        if (global.tech["tau_whale"] >= 2) {
          let o_gain = p_on["refueling_station"] * spatialReasoning(6500);
          caps["Oil"] += o_gain;
          breakdown.c.Oil[loc("tau_gas_refueling_station_title")] = o_gain + "v";
        }
      }
      if (p_on["orbital_platform"]) {
        let gain = p_on["orbital_platform"] * spatialReasoning(17500);
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("tau_red_orbital_platform")] = gain + "v";
      }
      if (global.space["gas_storage"]) {
        let gain = global.space["gas_storage"].count * spatialReasoning(3500);
        gain *= global.tech["world_control"] ? 1.5 : 1;
        caps["Oil"] += gain;
        breakdown.c.Oil[`${planetName().gas} ${loc("depot")}`] = gain + "v";
        gain = global.space["gas_storage"].count * spatialReasoning(2500);
        gain *= global.tech["world_control"] ? 1.5 : 1;
        caps["Helium_3"] += gain;
        breakdown.c.Helium_3[`${planetName().gas} ${loc("depot")}`] = gain + "v";
        gain = global.space["gas_storage"].count * spatialReasoning(1e3);
        gain *= global.tech["world_control"] ? 1.5 : 1;
        caps["Uranium"] += gain;
        breakdown.c.Uranium[`${planetName().gas} ${loc("depot")}`] = gain + "v";
      }
      if (p_on["xfer_station"]) {
        let gain = p_on["xfer_station"] * spatialReasoning(5e3);
        caps["Helium_3"] += gain;
        breakdown.c.Helium_3[loc("interstellar_xfer_station_title")] = gain + "v";
        gain = p_on["xfer_station"] * spatialReasoning(4e3);
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("interstellar_xfer_station_title")] = gain + "v";
        gain = p_on["xfer_station"] * spatialReasoning(2500);
        caps["Uranium"] += gain;
        breakdown.c.Uranium[loc("interstellar_xfer_station_title")] = gain + "v";
        if (global.resource.Deuterium.display) {
          let deuterium_gain = p_on["xfer_station"] * spatialReasoning(2e3);
          caps["Deuterium"] += deuterium_gain;
          breakdown.c.Deuterium[loc("interstellar_xfer_station_title")] = deuterium_gain + "v";
        }
      }
      if (global.space["helium_mine"]) {
        let gain = global.space["helium_mine"].count * spatialReasoning(100);
        caps["Helium_3"] += gain;
        breakdown.c.Helium_3[loc("space_moon_helium_mine_title")] = gain + "v";
      }
      if (global.portal["pumpjack"]) {
        let gain = global.portal.pumpjack.count * spatialReasoning(500);
        caps["Oil"] += gain;
        breakdown.c.Oil[loc("portal_pumpjack_title")] = gain + "v";
      }
      if (global.portal["pumpjack"]) {
        let gain = global.portal.pumpjack.count * spatialReasoning(250);
        caps["Helium_3"] += gain;
        breakdown.c.Helium_3[loc("portal_pumpjack_title")] = gain + "v";
      }
      if (shrineBonusActive()) {
        let getShrineResult = getShrineBonus("know");
        caps["Knowledge"] += getShrineResult.add;
        breakdown.c.Knowledge[loc("city_shrine")] = getShrineResult.add + "v";
      }
      if (global.city["temple"] && global.genes["ancients"] && global.genes["ancients"] >= 2) {
        lCaps["priest"] += jobScale(templeCount());
      }
      if (global.space["ziggurat"] && global.genes["ancients"] && global.genes["ancients"] >= 4) {
        lCaps["priest"] += jobScale(templeCount(true));
      }
      if (global.eden["rectory"] && global.genes["ancients"] && global.genes["ancients"] >= 2 && p_on["rectory"]) {
        lCaps["priest"] += jobScale(p_on["rectory"]);
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.priest) {
        lCaps["priest"] += jobScale(global.race.wishStats.priest);
      }
      let pirate_alien2 = piracy("gxy_alien2");
      if (global.city["university"]) {
        let gain = actions.city.university.knowVal() * global.city.university.count;
        lCaps["professor"] += jobScale(global.city.university.count);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("city_university")] = gain + "v";
      }
      if (global.race["lone_survivor"] && global.tauceti["alien_outpost"]) {
        lCaps["professor"] += jobScale(global.tauceti.alien_outpost.count);
      }
      if (global.city["library"]) {
        let shelving = 125;
        if (global.race["nearsighted"]) {
          shelving *= 1 - traits.nearsighted.vars()[0] / 100;
        }
        if (global.race["studious"]) {
          shelving *= 1 + traits.studious.vars()[1] / 100;
        }
        let fathom = fathomCheck("elven");
        if (fathom > 0) {
          shelving *= 1 + traits.studious.vars(1)[1] / 100 * fathom;
        }
        if (global.tech["science"] && global.tech["science"] >= 8) {
          shelving *= 1.4;
        }
        if (global.tech["science"] && global.tech["science"] >= 5) {
          let sci_val = workerScale(global.civic.scientist.workers, "scientist");
          if (global.race["high_pop"]) {
            sci_val = highPopAdjust(sci_val);
          }
          shelving *= 1 + sci_val * 0.12;
        }
        if (global.tech["anthropology"] && global.tech["anthropology"] >= 2) {
          shelving *= 1 + faithTempleCount() * 0.05;
        }
        let teachVal = govActive("teacher", 0);
        if (teachVal) {
          shelving *= 1 + teachVal / 100;
        }
        let athVal = govActive("athleticism", 2);
        if (athVal) {
          shelving *= 1 - athVal / 100;
        }
        let muckVal = govActive("muckraker", 1);
        if (muckVal) {
          shelving *= 1 + muckVal / 100;
        }
        let gain = Math.round(global.city.library.count * shelving);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("city_library")] = gain + "v";
        if (global.tech["science"] && global.tech["science"] >= 3) {
          global.civic.professor.impact = 0.5 + global.city.library.count * 0.01;
        }
      }
      if (global.city["wardenclyffe"]) {
        let gain_base = 1e3;
        if (global.city.ptrait.includes("magnetic")) {
          gain_base += planetTraits.magnetic.vars()[1];
        }
        let gain = global.city["wardenclyffe"].count * gain_base;
        lCaps["scientist"] += jobScale(global.city["wardenclyffe"].count);
        let powered_gain = global.tech["science"] >= 7 ? 1500 : 1e3;
        gain += p_on["wardenclyffe"] * powered_gain;
        if (global.tech["supercollider"]) {
          let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
          gain *= global.tech["supercollider"] / ratio + 1;
        }
        if (global.space["satellite"]) {
          gain *= 1 + global.space.satellite.count * 0.04;
        }
        let athVal = govActive("athleticism", 2);
        if (athVal) {
          gain *= 1 - athVal / 100;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[wardenLabel()] = gain + "v";
        if (global.race.universe === "magic") {
          let mana = global.city.wardenclyffe.count * spatialReasoning(8);
          caps["Mana"] += mana;
          breakdown.c.Mana[wardenLabel()] = mana + "v";
        }
        if (global.race["artifical"]) {
          let gain2 = p_on["wardenclyffe"] * spatialReasoning(250);
          caps["Food"] += gain2;
          breakdown.c.Food[wardenLabel()] = gain2 + "v";
        }
      }
      if (global.race["logical"]) {
        let factor = global.tech.hasOwnProperty("high_tech") ? global.tech.high_tech : 0;
        factor += global.tech.hasOwnProperty("science") ? global.tech.science : 0;
        let gain = global.resource[global.race.species].amount * traits.logical.vars()[1] * factor;
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[races[global.race.species].name] = gain + "v";
      }
      if (global.portal["sensor_drone"]) {
        let gain = p_on["sensor_drone"] * (global.tech.infernite >= 6 ? 2500 : 1e3);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("portal_sensor_drone_title")] = gain + "v";
      }
      if (global.space["satellite"]) {
        let gain = global.space.satellite.count * (global.race["cataclysm"] || global.race["orbit_decayed"] ? 2e3 : 750);
        if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.tech["supercollider"]) {
          let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 5 : 10;
          gain *= global.tech["supercollider"] / ratio + 1;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("space_home_satellite_title")] = gain + "v";
      }
      if (global.space["observatory"] && global.space.observatory.count > 0) {
        let gain = support_on["observatory"] * 5e3;
        if (global.race["cataclysm"] && global.space["satellite"] && global.space.satellite.count > 0) {
          gain *= 1 + global.space.satellite.count * 0.25;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("space_moon_observatory_title")] = gain + "v";
        if (global.race["cataclysm"]) {
          lCaps["professor"] += jobScale(support_on["observatory"]);
        }
      }
      if (global.interstellar["laboratory"] && int_on["laboratory"] > 0) {
        if (global.tech.science >= 16) {
          lCaps["scientist"] += jobScale(int_on["laboratory"]);
        }
        let gain = int_on["laboratory"] * 1e4;
        if (global.tech.science >= 15) {
          gain *= 1 + (global.race["cataclysm"] ? support_on["exotic_lab"] : global.city.wardenclyffe.count) * 0.02;
        }
        if (global.race["cataclysm"] && p_on["s_gate"] && gal_on["scavenger"]) {
          gain *= 1 + gal_on["scavenger"] * piracy("gxy_alien2") * 0.75;
        }
        if (global.tech["science"] >= 21) {
          gain *= 1.45;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc(global.race.universe === "magic" ? "tech_sanctum" : "interstellar_laboratory_title")] = gain + "v";
        if (global.race.universe === "magic") {
          let mana = int_on["laboratory"] * spatialReasoning(12);
          caps["Mana"] += mana;
          breakdown.c.Mana[loc(global.race.universe === "magic" ? "tech_sanctum" : "interstellar_laboratory_title")] = mana + "v";
        }
      }
      if (global.city["biolab"]) {
        let gain = 3e3;
        if (global.portal["sensor_drone"] && global.tech["science"] >= 14) {
          gain *= 1 + p_on["sensor_drone"] * 0.02;
        }
        if (global.tech["science"] >= 20) {
          gain *= 3;
        }
        if (global.tech["science"] >= 21) {
          gain *= 1.45;
        }
        if (global.tech["biotech"] >= 1) {
          gain *= 2.5;
        }
        if (global.race["elemental"] && traits.elemental.vars()[0] === "frost") {
          gain *= 1 + highPopAdjust(traits.elemental.vars()[4] * global.resource[global.race.species].amount / 100);
        }
        caps["Knowledge"] += p_on["biolab"] * gain;
        breakdown.c.Knowledge[loc("city_biolab")] = p_on["biolab"] * gain + "v";
      }
      if (global.space["zero_g_lab"] && Math.min(support_on["zero_g_lab"], p_on["zero_g_lab"]) > 0) {
        let using = Math.min(support_on["zero_g_lab"], p_on["zero_g_lab"]);
        let synd = syndicate("spc_enceladus");
        let gain = Math.round(using * 1e4 * synd);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("tech_zero_g_lab")] = gain + "v";
        if (global.resource.Cipher.display) {
          let cipher = 1e4 * using;
          caps["Cipher"] += cipher;
          breakdown.c.Cipher[loc("tech_zero_g_lab")] = cipher + "v";
        }
      }
      if (global.race["warlord"]) {
        let gain = (global.race?.absorbed?.length || 1) * 5e5;
        if (shrineBonusActive()) {
          let shrineBonus = getShrineBonus("know");
          gain *= shrineBonus.mult;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("portal_throne_of_evil_title")] = gain + "v";
        caps["Crates"] += 500;
        breakdown.c.Crates[loc("portal_throne_of_evil_title")] = "500v";
        caps["Containers"] += 500;
        breakdown.c.Containers[loc("portal_throne_of_evil_title")] = "500v";
      }
      if (global.portal["twisted_lab"] && global.portal.twisted_lab.count > 0 && global.race["absorbed"]) {
        let baseVal = 6e3 + global.portal.twisted_lab.rank * 2e3;
        let gain = p_on["twisted_lab"] * baseVal * global.race.absorbed.length;
        if (global.tech["supercollider"] && global.race["warlord"]) {
          let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
          gain *= global.tech["supercollider"] / ratio + 1;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("portal_twisted_lab_title")] = gain + "v";
      }
      if (global.resource.Omniscience.display) {
        if (global.eden["research_station"]) {
          let corruptor = 1;
          if (global.race["warlord"] && global.eden["corruptor"]) {
            corruptor = 1 + (p_on["corruptor"] || 0) * 0.04;
          }
          let gain = (support_on["research_station"] || 0) * Math.round(777 * corruptor);
          caps["Omniscience"] += gain;
          breakdown.c.Omniscience[loc("eden_research_station_title")] = gain + "v";
        }
        if (global.race["warlord"] && global.portal["mortuary"] && global.portal["corpse_pile"]) {
          let gain = global.portal.corpse_pile.count * (p_on["mortuary"] || 0) * (p_on["encampment"] || 0) * 2;
          caps["Omniscience"] += gain;
          breakdown.c.Omniscience[loc("eden_encampment_title")] = gain + "v";
        } else if (p_on["ascension_trigger"] && global.eden.hasOwnProperty("encampment") && global.eden.encampment.asc) {
          let heatSink = actions.interstellar.int_sirius.ascension_trigger.heatSink();
          heatSink = heatSink < 0 ? Math.abs(heatSink) : 0;
          let omniscience = +(150 + heatSink ** 0.95 / 10).toFixed(0);
          let gain = (p_on["encampment"] || 0) * omniscience;
          caps["Omniscience"] += gain;
          breakdown.c.Omniscience[loc("eden_encampment_title")] = gain + "v";
        }
        if (global.eden["archive"]) {
          let gain = (p_on["archive"] || 0) * 1013;
          caps["Omniscience"] += gain;
          breakdown.c.Omniscience[loc("eden_archive_bd")] = gain + "v";
        }
      }
      if (global.tech["isolation"] && global.tauceti["alien_outpost"] && global.resource.Cipher.display) {
        let cipher = 2e5;
        caps["Cipher"] += cipher;
        breakdown.c.Cipher[loc("tech_alien_outpost")] = cipher + "v";
      }
      if (global.portal["archaeology"]) {
        let sup = hellSupression("ruins");
        let value = 25e4;
        if (global.race["high_pop"]) {
          value = highPopAdjust(value);
        }
        let gain = Math.round(value * sup.supress);
        caps["Knowledge"] += workerScale(global.civic.archaeologist.workers, "archaeologist") * gain;
        breakdown.c.Knowledge[loc("portal_archaeology_bd")] = workerScale(global.civic.archaeologist.workers, "archaeologist") * gain + "v";
      }
      if (p_on["embassy"] && global.galaxy["symposium"]) {
        let dorm = 1750 * p_on["dormitory"];
        let gtrade = 650 * global.galaxy.trade.cur;
        let leave = 0;
        if (global.tech.xeno >= 7) {
          for (let j = 0; j < galaxy_ship_types.length; j++) {
            const area = galaxy_ship_types[j].area;
            const region = galaxy_ship_types[j].region;
            if (area !== "galaxy") {
              continue;
            }
            let crew = 0;
            for (const ship of gatewayArmada) {
              crew += global.galaxy.defense[region][ship] * (actions[area]["gxy_gateway"][ship].ship.civ() + actions[area]["gxy_gateway"][ship].ship.mil());
            }
            for (let i = 0; i < galaxy_ship_types[j].ships.length; i++) {
              const ship = galaxy_ship_types[j].ships[i];
              if (!gatewayArmada.includes(ship) && actions[area][region][ship].hasOwnProperty("ship") && gal_on[ship]) {
                crew += gal_on[ship] * (actions[area][region][ship].ship.civ() + actions[area][region][ship].ship.mil());
              }
            }
            if (region === "gxy_gorddon") {
              leave += +highPopAdjust(crew).toFixed(2) * 300;
            } else {
              leave += +highPopAdjust(crew).toFixed(2) * 100 * piracy(region);
            }
          }
        }
        let pirate = piracy("gxy_gorddon");
        let know = (dorm + gtrade + leave) * pirate * p_on["symposium"];
        caps["Knowledge"] += know;
        breakdown.c.Knowledge[loc("galaxy_symposium")] = know + "v";
      }
      if (global.city["bank"] || global.race["cataclysm"] && p_on["spaceport"]) {
        let vault = global.race["cataclysm"] || global.race["orbit_decayed"] ? bank_vault() * 4 : bank_vault();
        let banks = global.race["cataclysm"] || global.race["orbit_decayed"] ? p_on["spaceport"] : global.city["bank"].count;
        let gain = banks * spatialReasoning(vault);
        caps["Money"] += gain;
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          breakdown.c.Money[loc("space_red_spaceport_title")] = gain + "v";
        } else {
          breakdown.c.Money[loc("city_bank")] = gain + "v";
        }
        if (global.interstellar["exchange"]) {
          if (global.eden["eternal_bank"]) {
            banks += global.eden.eternal_bank.count * 2;
          }
          let g_vault = spatialReasoning(int_on["exchange"] * (vault * banks / 18));
          if (global.race["inflation"]) {
            g_vault *= 2;
          }
          if (global.tech.banking >= 13) {
            if (global.galaxy["freighter"]) {
              g_vault *= 1 + gal_on["freighter"] * 0.03;
            }
            if (global.galaxy["super_freighter"]) {
              g_vault *= 1 + gal_on["super_freighter"] * 0.08;
            }
          }
          g_vault = Math.round(g_vault);
          caps["Money"] += g_vault;
          breakdown.c.Money[loc("interstellar_exchange_bd")] = g_vault + "v";
        }
      }
      if (global.eden["eternal_bank"]) {
        let vault = bank_vault() * (global.race["warlord"] ? 20 : 10);
        if (global.race["warlord"] && global.eden["corruptor"] && global.tech.asphodel >= 12) {
          vault *= 1 + (p_on["corruptor"] || 0) * 0.08;
        }
        let banks = global.eden.eternal_bank.count;
        let gain = banks * spatialReasoning(vault);
        caps["Money"] += gain;
        breakdown.c.Money[loc("eden_eternal_bank_title")] = gain + "v";
      }
      if (global.space["titan_bank"]) {
        let vault = bank_vault() * 2;
        let banks = global.space.titan_bank.count;
        let gain = banks * spatialReasoning(vault);
        caps["Money"] += gain;
        breakdown.c.Money[`${planetName().titan} ${loc("city_bank")}`] = gain + "v";
      }
      if (global.tauceti["colony"] && global.tech["isolation"]) {
        let vault = bank_vault() * 25;
        let gain = global.tauceti.colony.count * spatialReasoning(vault);
        caps["Money"] += gain;
        breakdown.c.Money[loc("tau_home_colony")] = gain + "v";
      }
      if (global.city["casino"] || global.space["spc_casino"] || global.tauceti["tauceti_casino"] || global.portal["hell_casino"]) {
        let casinos = 0;
        if (global.city["casino"] && global.city.casino.count > 0) {
          casinos += global.city.casino.count;
        }
        if (global.space["spc_casino"] && global.space.spc_casino.count > 0) {
          casinos += global.space.spc_casino.count;
        }
        if (global.tauceti["tauceti_casino"] && global.tauceti.tauceti_casino.count > 0) {
          casinos += global.tauceti.tauceti_casino.count;
        }
        if (global.portal["hell_casino"] && global.portal.hell_casino.count > 0) {
          casinos += global.portal.hell_casino.count;
        }
        let vault = casinos * casino_vault();
        caps["Money"] += vault;
        breakdown.c.Money[structName("casino")] = vault + "v";
      }
      if (global.galaxy["resort"]) {
        let vault = p_on["resort"] * spatialReasoning(global.tech["world_control"] ? 1875e3 : 15e5);
        caps["Money"] += vault;
        breakdown.c.Money[loc("galaxy_resort")] = vault + "v";
      }
      if (global.tech["banking"] >= 4) {
        let cm = 250;
        if (global.tech.banking >= 14) {
          cm = 1e6;
        } else if (global.tech.banking >= 11) {
          cm = 1e3;
        } else if (global.tech.banking >= 6) {
          cm = 600;
        }
        let gain = cm * (global.resource[global.race.species].amount + global.civic.garrison.workers);
        if (global.race["high_pop"]) {
          gain = highPopAdjust(gain);
        }
        caps["Money"] += gain;
        breakdown.c.Money[global.tech.banking >= 14 ? loc("tech_crypto_currency") : loc("tech_bonds")] = gain + "v";
      }
      if (p_on["moon_base"]) {
        let gain = p_on["moon_base"] * spatialReasoning(500);
        caps["Iridium"] += gain;
        breakdown.c.Iridium[loc("space_moon_base_title")] = gain + "v";
      }
      if (p_on["space_station"]) {
        lCaps["space_miner"] += jobScale(p_on["space_station"] * 3);
        if (global.tech["asteroid"] >= 5) {
          let gain = p_on["space_station"] * spatialReasoning(5);
          caps["Elerium"] += gain;
          breakdown.c.Elerium[loc("space_belt_station_title")] = gain + "v";
        }
      }
      if (support_on["exotic_lab"]) {
        let el_gain = support_on["exotic_lab"] * spatialReasoning(10);
        caps["Elerium"] += el_gain;
        breakdown.c.Elerium[loc("space_red_exotic_lab_bd")] = el_gain + "v";
        let sci = 500;
        if (global.tech["science"] >= 13 && global.interstellar["laboratory"]) {
          sci += int_on["laboratory"] * 25;
        }
        if (global.tech["ancient_study"] && global.tech["ancient_study"] >= 2) {
          sci += templeCount(true) * 15;
        }
        if (global.tech.mass >= 2) {
          let brain = workerScale(global.civic.scientist.workers, "scientist");
          if (global.race["high_pop"]) {
            brain = highPopAdjust(brain);
          }
          sci += p_on["mass_driver"] * brain;
        }
        if (global.race["cataclysm"] && support_on["observatory"]) {
          sci *= 1 + support_on["observatory"] * 0.25;
        }
        if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.portal["sensor_drone"] && global.tech["science"] >= 14) {
          sci *= 1 + p_on["sensor_drone"] * 0.02;
        }
        if (global.tech["science"] >= 21) {
          sci *= 1.45;
        }
        if (global.race["high_pop"]) {
          sci = highPopAdjust(sci);
        }
        let gain = support_on["exotic_lab"] * workerScale(global.civic.colonist.workers, "colonist") * sci;
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("tech_exotic_bd")] = gain + "v";
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          lCaps["scientist"] += jobScale(support_on["exotic_lab"]);
        }
      }
      if (support_on["research_station"]) {
        let attact = global.blood["attract"] ? global.blood.attract * 5 : 0;
        let sci = 200 + attact;
        if (global.tech["science"] && global.tech.science >= 22 && p_on["embassy"] && p_on["symposium"]) {
          sci *= 1 + p_on["symposium"] * piracy("gxy_gorddon");
        }
        let gain = support_on["research_station"] * highPopAdjust(global.civic.ghost_trapper.workers) * sci;
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("eden_research_station_title")] = gain + "v";
      }
      if (global.tech["isolation"] && support_on["infectious_disease_lab"]) {
        lCaps["professor"] += jobScale(support_on["infectious_disease_lab"] * 2);
        lCaps["scientist"] += jobScale(support_on["infectious_disease_lab"]);
      }
      if (global.race["warlord"] && p_on["twisted_lab"]) {
        lCaps["professor"] += jobScale(p_on["twisted_lab"] * 3);
        lCaps["scientist"] += jobScale(p_on["twisted_lab"] * 2);
      }
      if (global.race["wish"] && global.race["wishStats"] && global.race.wishStats.prof) {
        lCaps["scientist"] += jobScale(global.race.wishStats.prof);
      }
      if (support_on["decoder"]) {
        let titan_colonists = p_on["ai_colonist"] ? workerScale(global.civic.titan_colonist.workers, "titan_colonist") + jobScale(p_on["ai_colonist"]) : workerScale(global.civic.titan_colonist.workers, "titan_colonist");
        let gain = support_on["decoder"] * titan_colonists * 2500;
        if (global.race["high_pop"]) {
          gain = highPopAdjust(gain);
        }
        if (p_on["ai_core2"]) {
          gain *= 1.25;
        }
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("space_decoder_title")] = gain + "v";
      }
      if (p_on["elerium_contain"]) {
        let el_gain = p_on["elerium_contain"] * spatialReasoning(100);
        caps["Elerium"] += el_gain;
        breakdown.c.Elerium[loc("space_dwarf_elerium_contain_title")] = el_gain + "v";
      }
      if (p_on["elerium_containment"]) {
        let el_gain = p_on["elerium_containment"] * spatialReasoning(1e3);
        caps["Elerium"] += el_gain;
        breakdown.c.Elerium[loc("eden_elerium_containment", [global.resource.Elerium.name])] = el_gain + "v";
      }
      if (p_on["shadow_mine"]) {
        let el_gain = p_on["shadow_mine"] * spatialReasoning(200);
        caps["Elerium"] += el_gain;
        breakdown.c.Elerium[loc("portal_shadow_mine_title")] = el_gain + "v";
      }
      if (p_on["corruptor"]) {
        let el_gain = p_on["corruptor"] * spatialReasoning(200);
        caps["Elerium"] += el_gain;
        breakdown.c.Elerium[loc("eden_corruptor_title")] = el_gain + "v";
      }
      if (global.city["foundry"]) {
        lCaps["craftsman"] += jobScale(global.city["foundry"].count);
      }
      if (support_on["fabrication"]) {
        lCaps["craftsman"] += jobScale(support_on["fabrication"]);
        if (global.race["cataclysm"]) {
          lCaps["cement_worker"] += jobScale(support_on["fabrication"]);
        }
      }
      if (global.tech["isolation"] && support_on["tau_factory"]) {
        lCaps["craftsman"] += jobScale(support_on["tau_factory"] * 5);
        lCaps["cement_worker"] += jobScale(support_on["tau_factory"] * 2);
      }
      if (global.race["warlord"] && p_on["hell_factory"]) {
        lCaps["cement_worker"] += jobScale(p_on["hell_factory"] * 5);
      }
      if (p_on["womling_station"]) {
        lCaps["craftsman"] += jobScale(p_on["womling_station"] * 1);
        lCaps["cement_worker"] += jobScale(p_on["womling_station"] * 1);
      }
      if (p_on["stellar_forge"]) {
        lCaps["craftsman"] += jobScale(p_on["stellar_forge"] * 2);
      }
      if (p_on["demon_forge"]) {
        lCaps["craftsman"] += jobScale(p_on["demon_forge"] * actions.portal.prtl_wasteland.demon_forge.crafters());
      }
      if (global.tech["elysium"] && global.tech.elysium >= 18 && p_on["sacred_smelter"]) {
        lCaps["craftsman"] += jobScale(p_on["sacred_smelter"] * 3);
      }
      if (global.portal["carport"]) {
        lCaps["hell_surveyor"] += jobScale(global.portal.carport.count) - global.portal.carport.damaged;
      }
      if (p_on["archaeology"]) {
        lCaps["archaeologist"] += jobScale(p_on["archaeology"] * 2);
      }
      if (support_on["ectoplasm_processor"]) {
        lCaps["ghost_trapper"] += jobScale(support_on["ectoplasm_processor"] * 5);
      }
      if (p_on["elysanite_mine"]) {
        lCaps["elysium_miner"] += jobScale(p_on["elysanite_mine"] * 2);
      }
      if (p_on["nexus"]) {
        let helium_gain = p_on["nexus"] * spatialReasoning(4e3);
        caps["Helium_3"] += helium_gain;
        breakdown.c.Helium_3[loc("interstellar_nexus_title")] = helium_gain + "v";
        let oil_gain = p_on["nexus"] * spatialReasoning(3500);
        caps["Oil"] += oil_gain;
        breakdown.c.Oil[loc("interstellar_nexus_title")] = oil_gain + "v";
        let deuterium_gain = p_on["nexus"] * spatialReasoning(3e3);
        caps["Deuterium"] += deuterium_gain;
        breakdown.c.Deuterium[loc("interstellar_nexus_title")] = deuterium_gain + "v";
        let elerium_gain = p_on["nexus"] * spatialReasoning(25);
        caps["Elerium"] += elerium_gain;
        breakdown.c.Elerium[loc("interstellar_nexus_title")] = elerium_gain + "v";
      }
      if (p_on["s_gate"] && global.galaxy["gateway_station"]) {
        let helium_gain = p_on["gateway_station"] * spatialReasoning(2e3);
        caps["Helium_3"] += helium_gain;
        breakdown.c.Helium_3[loc("galaxy_gateway_station")] = helium_gain + "v";
        let deuterium_gain = p_on["gateway_station"] * spatialReasoning(4500);
        caps["Deuterium"] += deuterium_gain;
        breakdown.c.Deuterium[loc("galaxy_gateway_station")] = deuterium_gain + "v";
        let gain = p_on["gateway_station"] * spatialReasoning(50);
        caps["Elerium"] += gain;
        breakdown.c.Elerium[loc("galaxy_gateway_station")] = gain + "v";
      }
      if (p_on["s_gate"] && p_on["telemetry_beacon"]) {
        let base_val = global.tech["telemetry"] ? 1200 : 800;
        if (global.tech.science >= 17) {
          base_val += gal_on["scout_ship"] * 25;
        }
        let gain = p_on["telemetry_beacon"] ** 2 * base_val;
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("galaxy_telemetry_beacon_bd")] = gain + "v";
      }
      if (p_on["s_gate"] && gal_on["scavenger"]) {
        let gain = gal_on["scavenger"] * Math.round(pirate_alien2 * 25e3);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("galaxy_scavenger")] = gain + "v";
      }
      if (global.eden["encampment"]) {
        let powder = global.eden.encampment.count * spatialReasoning(250);
        caps["Asphodel_Powder"] += powder;
        breakdown.c.Asphodel_Powder[loc("eden_encampment_title")] = powder + "v";
      }
      breakdown["t_route"] = {};
      global.city.market.mtrade = 0;
      if (global.race["banana"]) {
        global.city.market.mtrade++;
        breakdown.t_route[loc("base")] = 1;
      }
      if (global.city["trade"]) {
        let routes = global.race["nomadic"] || global.race["xenophobic"] ? global.tech.trade : global.tech.trade + 1;
        if (global.tech["trade"] && global.tech["trade"] >= 3) {
          routes--;
        }
        if (global.race["flier"]) {
          routes += traits.flier.vars()[1];
        }
        global.city.market.mtrade += routes * global.city.trade.count;
        breakdown.t_route[loc("city_trade")] = routes * global.city.trade.count;
        if (global.tech["fanaticism"] && global.tech["fanaticism"] >= 3) {
          let r_count = faithTempleCount();
          global.city.market.mtrade += r_count;
          breakdown.t_route[global.race["cataclysm"] ? loc("space_red_ziggurat_title") : structName("temple")] = r_count;
        }
      }
      if (global.city["wharf"]) {
        let r_count = global.city.wharf.count * 2;
        global.city.market.mtrade += r_count;
        breakdown.t_route[loc("city_wharf")] = r_count;
      }
      if (global.space["gps"] && global.space.gps.count >= 4) {
        let r_count = global.space.gps.count * 2;
        global.city.market.mtrade += global.space.gps.count * 2;
        breakdown.t_route[loc("space_home_gps_title")] = r_count;
      }
      if (global.city["storage_yard"] && global.tech["trade"] && global.tech["trade"] >= 3) {
        let r_count = global.city.storage_yard.count;
        global.city.market.mtrade += r_count;
        breakdown.t_route[loc("city_storage_yard")] = r_count;
      }
      if (global.portal["bazaar"] && global.portal["spire"]) {
        let r_count = global.portal.bazaar.count * global.portal.spire.count;
        global.city.market.mtrade += r_count;
        breakdown.t_route[loc("portal_bazaar_title")] = r_count;
      }
      if (global.tech["railway"]) {
        let routes = 0;
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          routes = global.space["gps"] ? Math.floor(global.space.gps.count / 3) : 0;
        } else if (global.race["warlord"]) {
          routes = 5;
        } else {
          routes = global.city["storage_yard"] ? Math.floor(global.city.storage_yard.count / 6) : 0;
        }
        if (global.stats.achieve["banana"] && global.stats.achieve.banana.l >= 2) {
          routes++;
        }
        global.city.market.mtrade += global.tech["railway"] * routes;
        breakdown.t_route[loc("arpa_projects_railway_title")] = global.tech["railway"] * routes;
      }
      if (p_on["titan_spaceport"]) {
        let water = p_on["titan_spaceport"] * spatialReasoning(250);
        caps["Water"] += water;
        breakdown.c.Water[loc("space_red_spaceport_title")] = water + "v";
      }
      if (global.tauceti["mining_pit"]) {
        lCaps["pit_miner"] += jobScale(support_on["mining_pit"] * (global.tech["isolation"] ? 6 : 8));
        caps["Materials"] += support_on["mining_pit"] * 1e6;
      }
      if (global.civic.torturer.display && global.tech["unfathomable"] && global.tech.unfathomable >= 2) {
        lCaps["torturer"] = global.city.captive_housing.count;
      }
      if (global.race["universe"] === "magic" && global.race["witch_hunter"]) {
        let sus = 0;
        if (global.city["wardenclyffe"]) {
          let wiz = global.city.wardenclyffe.count;
          wiz += p_on["wardenclyffe"];
          if (global.tech["roguemagic"] && global.tech.roguemagic >= 6) {
            wiz /= 2;
          }
          breakdown.c.Sus[wardenLabel()] = wiz + "v";
          sus += wiz;
        }
        if (global.civic.scientist.workers > 0) {
          let wiz = global.civic.scientist.workers;
          if (global.civic.govern.type === "magocracy") {
            wiz /= 2;
          }
          wiz = highPopAdjust(wiz);
          breakdown.c.Sus[jobName("wizard")] = wiz + "v";
          sus += wiz;
        }
        if (global.city["coal_power"] && !global.race["environmentalist"]) {
          let mana_engine = p_on["coal_power"];
          if (global.tech["roguemagic"] && global.tech.roguemagic >= 6) {
            mana_engine /= 2;
          }
          breakdown.c.Sus[loc("city_mana_engine")] = mana_engine + "v";
          sus += mana_engine;
        }
        if (global.city["pylon"] || global.space["pylon"] || global.tauceti["pylon"]) {
          let p_count = 0;
          let name = "city_pylon";
          if ((global.race["cataclysm"] || global.race["orbit_decayed"]) && global.space["pylon"]) {
            p_count = global.space.pylon.count;
            name = "space_red_pylon";
          } else if (global.tech["isolation"] && global.tauceti["pylon"]) {
            p_count = global.tauceti.pylon.count;
            name = "tau_home_pylon";
          } else if (global.city["pylon"]) {
            p_count = global.city.pylon.count;
          }
          if (global.tech["roguemagic"] && global.tech.roguemagic >= 5) {
            p_count /= 3;
          }
          breakdown.c.Sus[loc(name)] = p_count + "v";
          sus += p_count;
        }
        if (global.race["casting"]) {
          let ritual = global.race.casting.total;
          if (global.tech["roguemagic"] && global.tech.roguemagic >= 2) {
            if (global.tech.roguemagic >= 4) {
              ritual /= 4;
            }
            ritual -= highPopAdjust(global.civic.priest.workers);
            if (ritual < 0) {
              ritual = 0;
            }
          }
          breakdown.c.Sus[loc("tech_rituals")] = ritual + "v";
          sus += ritual;
        }
        if (global.race["totTransmute"] && global.race.totTransmute > 0) {
          let transmute = global.race.totTransmute / 5;
          breakdown.c.Sus[loc("tech_alchemy")] = transmute + "v";
          sus += transmute;
        }
        let mtech = 0;
        if (global.tech["explosives"]) {
          mtech += 4;
        }
        if (global.tech["military"]) {
          if (global.tech.military >= 10) {
            mtech += 28;
          } else if (global.tech.military >= 9) {
            mtech += 24;
          } else if (global.tech.military >= 8) {
            mtech += 20;
          } else if (global.tech.military >= 7) {
            mtech += 16;
          } else if (global.tech.military >= 6) {
            mtech += 12;
          } else if (global.tech.military >= 4) {
            mtech += 8;
          } else if (global.tech.military >= 3) {
            mtech += 4;
          }
        }
        breakdown.c.Sus[loc("witch_hunter_magic_tech")] = mtech + "v";
        sus += mtech;
        if (!global.tech["roguemagic"]) {
          breakdown.c.Sus[loc("overt")] = sus * 5 - sus + "v";
          sus *= 5;
        }
        if (global.tech["nexus"]) {
          let nexus = global.tech["nexus"] * 0.15;
          breakdown.c.Sus[loc("arpa_projects_nexus_title")] = nexus + "v";
          sus += nexus;
        }
        if (global.tech["syphon"]) {
          let syphon = global.tech["syphon"] * 2.5;
          breakdown.c.Sus[loc("arpa_syphon_title")] = syphon + "v";
          sus += syphon;
        }
        if (global.portal.hasOwnProperty("soul_capacitor")) {
          let capacitors = p_on["soul_capacitor"] || 0;
          global.portal.soul_capacitor["ecap"] = 25e5 * capacitors;
          breakdown.c.Sus[loc("portal_soul_capacitor_title")] = capacitors / 3 + "v";
          sus += capacitors / 3;
        }
        if (global.tech["roguemagic"] && global.tech.roguemagic >= 3 && global.city["conceal_ward"]) {
          let wards = global.city.conceal_ward.count;
          if (global.tech.roguemagic >= 8) {
            wards *= 1.25;
          }
          breakdown.c.Sus[loc("city_conceal_ward")] = -wards + "v";
          sus -= wards;
        }
        if (sus < 0) {
          sus = 0;
        }
        sus = Math.floor(sus);
        global.resource.Sus.amount = sus;
        if (sus >= 50 && !global.race["witch_hunter_warned"]) {
          global.race["witch_hunter_warned"] = 1;
          messageQueue(loc("witch_hunter_warning"), "danger", false, ["progress"]);
        } else if (sus >= 80 && global.race["witch_hunter_warned"] && global.race.witch_hunter_warned === 1) {
          global.race.witch_hunter_warned = 2;
          messageQueue(loc("witch_hunter_warning2"), "danger", false, ["progress"]);
        }
        if (sus >= 100) {
          global.civic.foreign.gov0.hstl = 100;
          global.civic.foreign.gov1.hstl = 100;
          global.civic.foreign.gov2.hstl = 100;
          if (global.race["truepath"]) {
            global.civic.foreign.gov3.hstl = 100;
          }
        }
      }
      breakdown["gt_route"] = {};
      if (global.galaxy["freighter"]) {
        breakdown.gt_route[loc("galaxy_freighter")] = gal_on["freighter"] * 2;
      }
      if (global.galaxy["super_freighter"]) {
        breakdown.gt_route[loc("galaxy_super_freighter")] = gal_on["super_freighter"] * 5;
      }
      if (global.galaxy["bolognium_ship"]) {
        lCaps["crew"] += global.galaxy.bolognium_ship.on * actions.galaxy.gxy_gateway.bolognium_ship.ship.civ();
      }
      if (global.galaxy["scout_ship"]) {
        lCaps["crew"] += global.galaxy.scout_ship.on * actions.galaxy.gxy_gateway.scout_ship.ship.civ();
      }
      if (global.galaxy["corvette_ship"]) {
        lCaps["crew"] += global.galaxy.corvette_ship.on * actions.galaxy.gxy_gateway.corvette_ship.ship.civ();
      }
      if (global.galaxy["frigate_ship"]) {
        lCaps["crew"] += global.galaxy.frigate_ship.on * actions.galaxy.gxy_gateway.frigate_ship.ship.civ();
      }
      if (global.galaxy["cruiser_ship"]) {
        lCaps["crew"] += global.galaxy.cruiser_ship.on * actions.galaxy.gxy_gateway.cruiser_ship.ship.civ();
      }
      if (global.galaxy["dreadnought"]) {
        lCaps["crew"] += global.galaxy.dreadnought.on * actions.galaxy.gxy_gateway.dreadnought.ship.civ();
      }
      if (global.galaxy["freighter"]) {
        lCaps["crew"] += global.galaxy.freighter.on * actions.galaxy.gxy_gorddon.freighter.ship.civ();
      }
      if (global.galaxy["super_freighter"]) {
        lCaps["crew"] += global.galaxy.super_freighter.on * actions.galaxy.gxy_alien1.super_freighter.ship.civ();
      }
      if (global.galaxy["armed_miner"]) {
        lCaps["crew"] += global.galaxy.armed_miner.on * actions.galaxy.gxy_alien2.armed_miner.ship.civ();
      }
      if (global.galaxy["scavenger"]) {
        lCaps["crew"] += global.galaxy.scavenger.on * actions.galaxy.gxy_alien2.scavenger.ship.civ();
      }
      if (global.portal["transport"]) {
        lCaps["crew"] += global.portal.transport.on * actions.portal.prtl_lake.transport.ship.civ();
      }
      if (global.tauceti["infectious_disease_lab"]) {
        let gain = 39616;
        if (global.tech["supercollider"] && global.tech["isolation"]) {
          let ratio = global.tech["tp_particles"] || global.tech["particles"] && global.tech["particles"] >= 3 ? 12.5 : 25;
          gain *= global.tech["supercollider"] / ratio + 1;
        }
        caps["Knowledge"] += p_on["infectious_disease_lab"] * Math.round(gain);
        breakdown.c.Knowledge[actions.tauceti.tau_home.infectious_disease_lab.title()] = p_on["infectious_disease_lab"] * gain + "v";
        if (global.tech["isolation"]) {
          let el_gain = support_on["infectious_disease_lab"] * spatialReasoning(375);
          caps["Elerium"] += el_gain;
          breakdown.c.Elerium[actions.tauceti.tau_home.infectious_disease_lab.title()] = el_gain + "v";
        }
      }
      if (global.race["truepath"] && global.tauceti["overseer"] && global.tech["tau_red"] && global.tech.tau_red >= 5) {
        let pop = 0;
        let injured = global.tauceti.overseer.injured;
        let morale = 0;
        let loyal = 0;
        let prod = 0;
        if (global.race["womling_friend"]) {
          loyal += 25 + support_on["overseer"] * actions.tauceti.tau_red.overseer.val();
          morale += 75 + support_on["womling_fun"] * actions.tauceti.tau_red.womling_fun.val();
        } else if (global.race["womling_god"]) {
          loyal += 75 + support_on["overseer"] * actions.tauceti.tau_red.overseer.val();
          morale += 40 + support_on["womling_fun"] * actions.tauceti.tau_red.womling_fun.val();
        } else if (global.race["womling_lord"]) {
          loyal += support_on["overseer"] * actions.tauceti.tau_red.overseer.val();
          morale += 30 + support_on["womling_fun"] * actions.tauceti.tau_red.womling_fun.val();
        }
        let vil_pop = global.tech["womling_pop"] && global.tech.womling_pop >= 2 ? 6 : 5;
        pop = support_on["womling_village"] * vil_pop;
        let farmers = support_on["womling_farm"] * 2;
        if (farmers > pop) {
          farmers = pop;
        }
        let crop_per_farmer = global.tech["womling_pop"] ? 8 : 6;
        if (global.tech["womling_gene"]) {
          crop_per_farmer += 2;
        }
        if (pop > farmers * crop_per_farmer) {
          pop = farmers * crop_per_farmer;
        }
        let unemployed = pop - farmers - injured;
        let scientist = 0;
        if (support_on["womling_lab"]) {
          scientist = support_on["womling_lab"];
          if (scientist > unemployed) {
            scientist = unemployed;
          }
          unemployed -= scientist;
          let gain = scientist * Math.round(25e3 * global.tauceti.overseer.prod / 100);
          caps["Knowledge"] += gain;
          breakdown.c.Knowledge[loc("interstellar_laboratory_title")] = gain + "v";
          if (Math.rand(0, 10) < global.tauceti.womling_lab.scientist) {
            global.tauceti.womling_lab.tech += Math.rand(0, global.tauceti.womling_lab.scientist + 1);
            let expo = global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5 ? 4.9 : 5;
            if (global.race["lone_survivor"]) {
              expo -= 0.1;
            }
            if (global.tauceti.womling_lab.tech >= Math.round((global.tech.womling_tech + 2) ** expo)) {
              global.tech.womling_tech++;
              global.tauceti.womling_lab.tech = 0;
              messageQueue(loc("tau_red_womling_advancement", [global.tech.womling_tech]), "advanced", false, ["progress"]);
              drawTech();
            }
          }
        }
        let miners = support_on["womling_mine"] * 6;
        if (miners > unemployed) {
          miners = unemployed;
        }
        unemployed -= miners;
        let heal_chance = global.tech["tech_womling_firstaid"] ? 3 : 4;
        if (Math.rand(0, 10) === 0) {
          let raw = Math.rand(0, miners + scientist);
          if (raw > injured) {
            injured = raw;
          }
        } else if (injured > 0 && Math.rand(0, heal_chance) === 0) {
          injured--;
        }
        if (global.tauceti.hasOwnProperty("womling_farm")) {
          global.tauceti.womling_farm.farmers = farmers;
        }
        if (global.tauceti.hasOwnProperty("womling_mine")) {
          global.tauceti.womling_mine.miners = miners;
        }
        if (global.tauceti.hasOwnProperty("womling_lab")) {
          global.tauceti.womling_lab.scientist = scientist;
        }
        loyal -= miners;
        morale -= miners;
        morale -= farmers;
        morale -= injured;
        if (loyal > 100) {
          loyal = 100;
        } else if (loyal < 0) {
          loyal = 0;
        }
        if (morale > 100) {
          morale = 100;
        } else if (morale < 0) {
          morale = 0;
        }
        prod = Math.round((loyal + morale) / 2);
        global.tauceti.overseer.loyal = loyal;
        global.tauceti.overseer.morale = morale;
        global.tauceti.overseer.pop = pop;
        global.tauceti.overseer.working = farmers + miners + scientist;
        global.tauceti.overseer.injured = injured;
        global.tauceti.overseer.prod = prod;
      }
      ["inspired", "distracted", "stimulated", "motivated"].forEach(function(t) {
        if (global.race[t]) {
          global.race[t]--;
          if (global.race[t] <= 0) {
            delete global.race[t];
          }
        }
      });
      let pop_loss = global.resource[global.race.species].amount - caps[global.race.species];
      if (pop_loss > 0) {
        if (global.race["orbit_decayed"] && global.stats.days === global.race["orbit_decay"]) {
          messageQueue(loc("tragic_death", [pop_loss]), "danger");
        } else {
          messageQueue(loc(pop_loss === 1 ? "abandon1" : "abandon2", [pop_loss]), "danger");
          global.civic.homeless += pop_loss;
        }
      }
      if (p_on["world_controller"]) {
        let boost = 0.25;
        if (global.interstellar["far_reach"] && p_on["far_reach"] > 0) {
          boost += p_on["far_reach"] * 0.01;
        }
        if (global.tech.science >= 19) {
          boost += 0.15;
        }
        let gain = Math.round(caps["Knowledge"] * boost);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("space_dwarf_collider_title")] = gain + "v";
      }
      if (p_on["alien_outpost"]) {
        let iso = 0;
        if (global.tech["isolation"]) {
          iso = global.race["lone_survivor"] ? 35e5 : 65e5;
          caps["Knowledge"] += iso;
        }
        let boost = 0.2;
        let gain = Math.round(caps["Knowledge"] * boost);
        caps["Knowledge"] += gain;
        breakdown.c.Knowledge[loc("tech_alien_outpost")] = gain + iso + "v";
      }
      if (global.eden["fortress"] && global.tech.hasOwnProperty("celestial_warfare")) {
        let warefare_bonus = global.tech.celestial_warfare * 10;
        if (warefare_bonus > 30) {
          warefare_bonus = 30;
        }
        global.eden.fortress.detector = 100 - warefare_bonus;
        if (support_on["bunker"] && global.tech.celestial_warfare >= 4) {
          global.eden.fortress.detector -= support_on["bunker"] * 3;
          if (global.eden.fortress.detector < 0) {
            global.eden.fortress.detector = 0;
          }
        }
      }
      let tempCrates = caps["Crates"], tempContainers = caps["Containers"];
      Object.keys(caps).forEach(function(res) {
        caps["Crates"] -= global.resource[res].crates;
      });
      Object.keys(caps).forEach(function(res) {
        caps["Containers"] -= global.resource[res].containers;
      });
      if (caps["Crates"] < 0) {
        let diff = 0 - caps["Crates"];
        Object.keys(caps).forEach(function(res) {
          if (diff > 0) {
            let subAmount = global.resource[res].crates;
            if (subAmount > diff) {
              subAmount = diff;
            }
            caps["Crates"] += subAmount;
            global.resource[res].crates -= subAmount;
            diff -= subAmount;
          }
        });
      }
      if (caps["Containers"] < 0) {
        let diff = 0 - caps["Containers"];
        Object.keys(caps).forEach(function(res) {
          if (diff > 0) {
            let subAmount = global.resource[res].containers;
            if (subAmount > diff) {
              subAmount = diff;
            }
            caps["Containers"] += subAmount;
            global.resource[res].containers -= subAmount;
            diff -= subAmount;
          }
        });
      }
      breakdown.c.Crates[loc("crates_used")] = caps["Crates"] - tempCrates + "v";
      breakdown.c.Containers[loc("crates_used")] = caps["Containers"] - tempContainers + "v";
      let create_value = crateValue();
      let container_value = containerValue();
      Object.keys(caps).forEach(function(res) {
        let crate = global.resource[res].crates * create_value;
        caps[res] += crate;
        let container = global.resource[res].containers * container_value;
        caps[res] += container;
        if (breakdown.c[res]) {
          breakdown.c[res][loc("resource_Crates_plural")] = crate + "v";
          breakdown.c[res][loc("resource_Containers_plural")] = container + "v";
        }
        global.resource[res].max = caps[res];
        if (global.resource[res].amount > global.resource[res].max && res != "Sus") {
          global.resource[res].amount = global.resource[res].max;
        } else if (global.resource[res].amount < 0) {
        }
        if (global.resource[res].amount >= global.resource[res].max * 0.99) {
          if (!$(`#res${res} .count`).hasClass("has-text-warning")) {
            $(`#res${res} .count`).addClass("has-text-warning");
          }
        } else if ($(`#res${res} .count`).hasClass("has-text-warning")) {
          $(`#res${res} .count`).removeClass("has-text-warning");
        }
      });
      let unlock_servants = false;
      let total_servants = 0;
      let not_scavanger_jobs_avail = 0;
      Object.keys(lCaps).forEach(function(job) {
        if (global.civic[job].max === -1 && global.civic[job].display && job !== "unemployed" && job !== "scavenger") {
          not_scavanger_jobs_avail++;
        }
      });
      ["Scarletite", "Quantium"].forEach(function(res) {
        limitCraftsmen(res);
      });
      Object.keys(lCaps).forEach(function(job) {
        global.civic[job].max = lCaps[job];
        if (global.civic[job].workers > global.civic[job].max && global.civic[job].max !== -1) {
          global.civic[job].workers = global.civic[job].max;
        } else if (!global.civic[job].display || global.civic[job].workers < 0) {
          global.civic[job].workers = 0;
        }
        if (global.race["servants"]) {
          if (global.civic[job].max === -1 && !global.race.servants.jobs.hasOwnProperty(job)) {
            global.race.servants.jobs[job] = 0;
            unlock_servants = true;
          }
          if (global.race.servants.jobs.hasOwnProperty(job)) {
            if (!global.civic[job].display && (job !== "scavenger" || not_scavanger_jobs_avail > 0)) {
              global.race.servants.jobs[job] = 0;
            } else {
              total_servants += global.race.servants.jobs[job];
            }
            if (total_servants > global.race.servants.max && global.race.servants.jobs[job] > 0) {
              global.race.servants.jobs[job]--;
              total_servants--;
            }
          }
        }
      });
      if (unlock_servants) {
        loadServants();
      } else if (global.race["servants"]) {
        global.race.servants["force_scavenger"] = not_scavanger_jobs_avail === 0 ? true : false;
        global.race.servants.used = total_servants;
      }
      if (global.race["servants"] && global.race.servants.hasOwnProperty("smax") && global.race.servants.smax > 0) {
        let used = 0;
        Object.keys(global.race.servants.sjobs).forEach(function(res) {
          if (!global.resource[res].display) {
            global.race.servants.sjobs[res] = 0;
          }
          used += global.race.servants.sjobs[res];
          if (used > global.race.servants.smax) {
            global.race.servants.sjobs[res] -= used - global.race.servants.smax;
          }
          if (global.race.servants.sjobs[res] < 0) {
            global.race.servants.sjobs[res] = 0;
          }
        });
        global.race.servants.sused = used;
      }
      if (global.race["gravity_well"]) {
        let teamster2 = 0;
        [
          "hunter",
          "forager",
          "farmer",
          "lumberjack",
          "quarry_worker",
          "crystal_miner",
          "scavenger",
          "miner",
          "coal_miner",
          "craftsman",
          "cement_worker",
          "space_miner",
          "hell_surveyor",
          "pit_miner"
        ].forEach(function(job) {
          teamster2 += global.civic[job].workers;
          if (global.race["servants"] && global.race.servants.jobs[job]) {
            teamster2 += global.race.servants.jobs[job];
          }
        });
        if (global.city["oil_well"]) {
          teamster2 += global.city.oil_well.count * (global.tech["teamster"] && global.tech.teamster >= 3 ? 0 : 2);
        }
        if (global.city["factory"] && p_on["factory"]) {
          teamster2 += p_on["factory"] * 2;
        }
        if (global.space["red_factory"] && p_on["red_factory"]) {
          teamster2 += p_on["red_factory"] * 2;
        }
        if (global.space["moon_base"] && support_on["iridium_mine"]) {
          teamster2 += support_on["iridium_mine"] * 2;
        }
        if (global.space["moon_base"] && support_on["helium_mine"]) {
          teamster2 += support_on["helium_mine"];
        }
        if (global.tech["mars"] && support_on["red_mine"]) {
          teamster2 += support_on["red_mine"] * 3;
        }
        if (p_on["outpost"]) {
          teamster2 += p_on["outpost"] * 3;
        }
        if (global.race["servants"] && global.race.servants.hasOwnProperty("smax") && global.race.servants.smax > 0) {
          teamster2 += global.race.servants.sused;
        }
        global.race["teamster"] = teamster2;
      }
      if (global.civic.space_miner.display && global.space["space_station"]) {
        global.space.space_station.s_max = workerScale(global.civic.space_miner.workers, "space_miner");
      }
      if (global.portal.hasOwnProperty("transport")) {
        let max = 0;
        if (gal_on["transport"]) {
          max = gal_on["transport"] * (global.stats.achieve["what_is_best"] && global.stats.achieve.what_is_best.e >= 4 ? 8 : 5);
        }
        global.portal.transport.cargo.max = max;
      }
      if (global.portal.hasOwnProperty("purifier")) {
        let max = 100;
        let port_value = 1e4;
        if (spire_on["base_camp"]) {
          port_value *= 1 + spire_on["base_camp"] * 0.4;
        }
        if (spire_on["port"]) {
          max += spire_on["port"] * port_value;
        }
        global.portal.purifier.sup_max = Math.round(max);
      }
      let espEnd = global.race["truepath"] ? 5 : 3;
      let spyCatchMod = global.race["blurry"] ? 2 : 0;
      let yetiFathom = fathomCheck("yeti");
      if (yetiFathom >= 0.25) {
        spyCatchMod += yetiFathom >= 0.5 ? 2 : 1;
      }
      for (let i = 0; i < espEnd; i++) {
        if (global.civic.foreign[`gov${i}`].trn > 0) {
          global.civic.foreign[`gov${i}`].trn = Math.max(0, global.civic.foreign[`gov${i}`].trn - turboSpeed);
          if (global.civic.foreign[`gov${i}`].trn <= 0) {
            global.civic.foreign[`gov${i}`].trn = 0;
            global.civic.foreign[`gov${i}`].spy++;
          }
        }
        if (global.civic.foreign[`gov${i}`].sab > 0) {
          global.civic.foreign[`gov${i}`].sab = Math.max(0, global.civic.foreign[`gov${i}`].sab - turboSpeed);
          if (global.civic.foreign[`gov${i}`].sab <= 0) {
            global.civic.foreign[`gov${i}`].sab = 0;
            switch (global.civic.foreign[`gov${i}`].act) {
              case "influence":
                if (Math.floor(seededRandom(0, 4 + spyCatchMod)) === 0) {
                  spyCaught(i);
                } else {
                  let covert = Math.floor(seededRandom(global.tech["spy"] >= 5 ? 2 : 1, global.tech["spy"] >= 5 ? 8 : 6));
                  if (astroSign2 === "scorpio") {
                    covert += astroVal2("scorpio")[1];
                  }
                  global.civic.foreign[`gov${i}`].hstl -= covert;
                  if (global.civic.foreign[`gov${i}`].hstl < 0) {
                    global.civic.foreign[`gov${i}`].hstl = 0;
                  }
                  messageQueue(loc("civics_spy_influence_success", [govTitle(i), covert]), "success", false, ["spy"]);
                }
                break;
              case "sabotage":
                if (Math.floor(seededRandom(0, 3 + spyCatchMod)) === 0) {
                  spyCaught(i);
                } else {
                  let covert = Math.floor(seededRandom(global.tech["spy"] >= 5 ? 2 : 1, global.tech["spy"] >= 5 ? 8 : 6));
                  if (astroSign2 === "scorpio") {
                    covert += astroVal2("scorpio")[1];
                  }
                  global.civic.foreign[`gov${i}`].mil -= covert;
                  if (global.civic.foreign[`gov${i}`].mil < 50) {
                    global.civic.foreign[`gov${i}`].mil = 50;
                  }
                  messageQueue(loc("civics_spy_sabotage_success", [govTitle(i), covert]), "success", false, ["spy"]);
                }
                break;
              case "incite":
                if (Math.floor(seededRandom(0, 2 + Math.floor(spyCatchMod / 2))) === 0) {
                  spyCaught(i);
                } else {
                  let covert = Math.floor(seededRandom(global.tech["spy"] >= 5 ? 2 : 1, global.tech["spy"] >= 5 ? 8 : 6));
                  if (astroSign2 === "scorpio") {
                    covert += astroVal2("scorpio")[1];
                  }
                  global.civic.foreign[`gov${i}`].unrest += covert;
                  if (global.civic.foreign[`gov${i}`].unrest > 100) {
                    global.civic.foreign[`gov${i}`].unrest = 100;
                  }
                  messageQueue(loc("civics_spy_incite_success", [govTitle(i), covert]), "success", false, ["spy"]);
                }
                break;
              case "annex":
                if (i >= 3) {
                  break;
                }
                let drawTechs = !global.tech["gov_fed"] && !checkControlling();
                global.civic.foreign[`gov${i}`].anx = true;
                messageQueue(loc("civics_spy_annex_success", [govTitle(i)]), "success", false, ["spy"]);
                if (drawTechs) {
                  drawTech();
                }
                break;
              case "purchase":
                if (i >= 3) {
                  break;
                }
                let drawTechsAlt = !global.tech["gov_fed"] && !checkControlling();
                global.civic.foreign[`gov${i}`].buy = true;
                messageQueue(loc("civics_spy_purchase_success", [govTitle(i)]), "success", false, ["spy"]);
                if (drawTechsAlt) {
                  drawTech();
                }
                break;
            }
          }
        }
      }
      if (global.race["banana"]) {
        let exporting = false;
        let importing = 0;
        Object.keys(global.resource).forEach(function(res) {
          if (global.resource[res].hasOwnProperty("trade") && global.resource[res].trade < 0) {
            if (exporting) {
              global.resource[res].trade = 0;
            } else {
              exporting = res;
            }
          }
          if (global.resource[res].hasOwnProperty("trade") && global.resource[res].trade > 0) {
            importing += global.resource[res].trade;
          }
        });
        if (global.resource[exporting] && global.resource[exporting].trade <= -500) {
          let affix = universeAffix();
          global.stats.banana.b4[affix] = true;
          if (affix !== "m" && affix !== "l") {
            global.stats.banana.b4.l = true;
          }
          if (importing >= 500) {
            unlockFeat("banana");
          }
        }
      }
      if (global.galaxy["defense"]) {
        for (let i = gatewayArmada.length - 1; i >= 0; i--) {
          let ship = gatewayArmada[i];
          let count = 0;
          for (let j = galaxyRegions.length - 1; j >= 0; j--) {
            let region = galaxyRegions[j];
            if (global.galaxy.defense.hasOwnProperty(region)) {
              count += global.galaxy.defense[region][ship];
              if (isNaN(global.galaxy.defense[region][ship])) {
                global.galaxy.defense[region][ship] = 0;
              }
              if (count > gal_on[ship]) {
                let overflow = count - gal_on[ship];
                global.galaxy.defense[region][ship] -= overflow;
              }
              if (global.galaxy.defense[region][ship] < 0) {
                global.galaxy.defense[region][ship] = 0;
              }
            }
          }
          if (count < gal_on[ship]) {
            let underflow = gal_on[ship] - count;
            global.galaxy.defense.gxy_gateway[ship] += underflow;
          }
        }
      }
      let cityList = Object.keys(global.city);
      if (global.race["hooved"]) {
        cityList.push("horseshoe");
      }
      if (global.tech["slaves"] && global.tech["slaves"] >= 2) {
        cityList.push("slave_market");
      }
      cityList.forEach(function(action) {
        if (actions.city[action] && actions.city[action].cost) {
          let c_action = actions.city[action];
          let element = $("#" + c_action.id);
          if (element.length > 0) {
            if (checkAffordable(c_action, true)) {
              if (element.hasClass("cnam")) {
                element.removeClass("cnam");
              }
              if (checkAffordable(c_action)) {
                if (element.hasClass("cna")) {
                  element.removeClass("cna");
                }
              } else if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            } else {
              if (!element.hasClass("cnam")) {
                element.addClass("cnam");
              }
              if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            }
          }
          if (global.city[action]) {
            let tc = timeCheck(c_action, false, true);
            global.city[action]["time"] = timeFormat(tc.t);
            global.city[action]["bn"] = tc.r;
          }
        }
      });
      Object.keys(actions.tech).forEach(function(action) {
        if (actions.tech[action] && actions.tech[action].cost) {
          let c_action = actions.tech[action];
          let element = $("#" + c_action.id);
          if (element.length > 0) {
            if (checkAffordable(c_action, true)) {
              if (element.hasClass("cnam")) {
                element.removeClass("cnam");
              }
              if (checkAffordable(c_action)) {
                if (element.hasClass("cna")) {
                  element.removeClass("cna");
                }
              } else if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            } else {
              if (!element.hasClass("cnam")) {
                element.addClass("cnam");
              }
              if (!element.hasClass("cna")) {
                element.addClass("cna");
              }
            }
          }
        }
      });
      let spc_locations = ["space", "interstellar", "galaxy", "portal", "tauceti", "eden"];
      for (let i = 0; i < spc_locations.length; i++) {
        let location = spc_locations[i];
        Object.keys(actions[location]).forEach(function(region) {
          Object.keys(actions[location][region]).forEach(function(action) {
            let s_region = actions[location][region][action] && actions[location][region][action].hasOwnProperty("region") ? actions[location][region][action].region : location;
            if ((global[s_region][action] || actions[location][region][action].grant) && actions[location][region][action] && actions[location][region][action].cost) {
              let c_action = actions[location][region][action];
              let element = $("#" + c_action.id);
              if (element.length > 0) {
                if (checkAffordable(c_action, true)) {
                  if (element.hasClass("cnam")) {
                    element.removeClass("cnam");
                  }
                  if (checkAffordable(c_action)) {
                    if (element.hasClass("cna")) {
                      element.removeClass("cna");
                    }
                  } else if (!element.hasClass("cna")) {
                    element.addClass("cna");
                  }
                } else {
                  if (!element.hasClass("cnam")) {
                    element.addClass("cnam");
                  }
                  if (!element.hasClass("cna")) {
                    element.addClass("cna");
                  }
                }
              }
              if (global[s_region][action]) {
                global[s_region][action]["time"] = timeFormat(timeCheck(c_action));
              }
            }
          });
        });
      }
      if (global.space["swarm_control"]) {
        global.space.swarm_control.s_max = global.space.swarm_control.count * actions.space.spc_sun.swarm_control.support();
      }
      if (global.arpa["sequence"] && global.arpa.sequence.on && gene_sequence) {
        let labs = sequenceLabs();
        global.arpa.sequence.labs = labs;
        global.arpa.sequence.time -= (global.arpa.sequence.boost ? labs * 2 : labs) * turboSpeed;
        global.arpa.sequence.progress = global.arpa.sequence.max - global.arpa.sequence.time;
        if (global.arpa.sequence.time <= 0) {
          global.arpa.sequence.max = 5e4 * (1 + global.race.mutation ** 2);
          if (global.race["adaptable"]) {
            let adapt = 1 - traits.adaptable.vars()[0] / 100;
            global.arpa.sequence.max = Math.floor(global.arpa.sequence.max * adapt);
          }
          global.arpa.sequence.progress = 0;
          global.arpa.sequence.time = global.arpa.sequence.max;
          if (global.tech["genetics"] === 2) {
            messageQueue(loc("genome", [flib("name")]), "success", false, ["progress"]);
            global.tech["genetics"] = 3;
          } else {
            global.race.mutation++;
            let trait = randomMinorTrait(1);
            let gene_multi = 1 + (global.genes["synthesis"] ? global.genes["synthesis"] : 0);
            let gene = 2 ** (global.race.mutation - 1) * gene_multi;
            if (global.stats.achieve["creator"]) {
              gene = Math.round(gene * (1 + global.stats.achieve["creator"].l * 0.5));
            }
            global.resource.Genes.amount += gene;
            global.resource.Genes.display = true;
            let plasma = global.genes["plasma"] ? global.race.mutation : 1;
            if (global.genes["plasma"] && plasma > 3) {
              if (global.genes["plasma"] >= 2) {
                plasma = plasma > 5 ? 5 : plasma;
              } else {
                plasma = 3;
              }
            }
            let plasmid_type = plasma > 1 ? "_plural" : "";
            if (global.race["universe"] === "antimatter") {
              plasmid_type = loc("resource_AntiPlasmid" + plasmid_type + "_name");
              global.stats.antiplasmid += plasma;
              global.prestige.AntiPlasmid.count += plasma;
              unlockAchieve("cross");
            } else {
              plasmid_type = loc("resource_Plasmid" + plasmid_type + "_name");
              global.stats.plasmid += plasma;
              global.prestige.Plasmid.count += plasma;
            }
            arpa("Crispr");
            messageQueue(loc("gene_therapy", [loc("trait_" + trait + "_name"), gene, plasma, plasmid_type]), "success", false, ["progress"]);
          }
          arpa("Genetics");
          drawTech();
        }
      }
      if (global.city["foundry"]) {
        let fworkers = global.civic.craftsman.workers;
        if ((global.race["kindling_kindred"] || global.race["smoldering"]) && global.city.foundry["Plywood"] > 0) {
          global.civic.craftsman.workers -= global.city.foundry["Plywood"];
          global.city.foundry.crafting -= global.city.foundry["Plywood"];
          global.city.foundry["Plywood"] = 0;
        }
        let craft_costs = craftCost();
        Object.keys(craft_costs).forEach(function(craft) {
          while (global.city.foundry[craft] > fworkers && global.city.foundry[craft] > 0) {
            global.city.foundry[craft]--;
            global.city.foundry.crafting--;
          }
          fworkers -= global.city.foundry[craft];
        });
      }
      if (global.tech["foundry"] === 3 && (global.race["kindling_kindred"] || global.race["smoldering"])) {
        global.tech["foundry"] = 4;
        drawTech();
      }
      if (global.race["kindling_kindred"] || global.race["smoldering"]) {
        global.civic.lumberjack.workers = 0;
        global.civic.lumberjack.assigned = 0;
        global.resource.Lumber.crates = 0;
        global.resource.Lumber.containers = 0;
        global.resource.Lumber.trade = 0;
      }
      if ((global.race["kindling_kindred"] || global.race["smoldering"]) && global.city["foundry"] && global.city.foundry["Plywood"]) {
        global.city.foundry["Plywood"] = 0;
      }
      if (eventActive("fool", 2023) && !global.race["hooved"]) {
        global.resource.Horseshoe.display = true;
      } else if (!global.race["hooved"]) {
        global.resource.Horseshoe.display = false;
      }
      set_qlevel(calcQuantumLevel(false));
      let belt_mining = support_on["iron_ship"] + support_on["iridium_ship"];
      if (belt_mining > 0 && global.tech["asteroid"] && global.tech["asteroid"] === 3) {
        if (Math.rand(0, 250) <= belt_mining) {
          global.tech["asteroid"] = 4;
          global.resource.Elerium.display = true;
          modRes("Elerium", 1, true);
          drawTech();
          messageQueue(loc("discover_elerium"), "info", false, ["progress"]);
        }
      }
      if (global.tech["asteroid"] && global.tech.asteroid === 4 && global.resource.Elerium.amount === 0) {
        modRes("Elerium", 1, true);
      }
      if (p_on["outpost"] > 0 && global.tech["gas_moon"] && global.tech["gas_moon"] === 1) {
        if (Math.rand(0, 100) <= p_on["outpost"]) {
          initStruct(actions.space.spc_gas_moon.oil_extractor);
          global.tech["gas_moon"] = 2;
          messageQueue(loc("discover_oil", [planetName().gas_moon]), "info", false, ["progress"]);
          renderSpace();
        }
      }
      if (global.portal.hasOwnProperty("mechbay") && global.tech["hell_spire"] && global.tech.hell_spire >= 9) {
        if (!global.portal.spire["boss"]) {
          genSpireFloor();
        }
        updateMechbay();
        if (global.portal.hasOwnProperty("spire") && global.portal.spire.count >= 50 && !global.tech["edenic"] && Object.keys(global.pillars).length >= 10) {
          messageQueue(loc("eden_purify_well_msg", [50]), "info", false, ["progress"]);
          global.tech["edenic"] = 1;
          drawTech();
        }
        let progress = 0;
        let mechSkips = global.eden["mech_station"] ? global.eden.mech_station.mechs : 0;
        for (let i = 0; i < global.portal.mechbay.active; i++) {
          let mech = global.portal.mechbay.mechs[i];
          if (mechSkips > 0 && mech.size !== "collector") {
            mechSkips--;
          } else {
            if (global.portal.hasOwnProperty("waygate") && global.tech.hasOwnProperty("waygate") && global.portal.waygate.on === 1 && global.tech.waygate >= 2 && global.portal.waygate.progress < 100) {
              progress += mechRating(mech, true) * turboSpeed;
            } else {
              progress += mechRating(mech, false) * turboSpeed;
            }
          }
        }
        if (global.portal.hasOwnProperty("waygate") && global.tech.hasOwnProperty("waygate") && global.portal.waygate.on === 1 && global.tech.waygate >= 2 && global.portal.waygate.progress < 100) {
          global.portal.waygate.progress += progress;
          global.portal.waygate.time = progress === 0 ? timeFormat(-1) : timeFormat((100 - global.portal.waygate.progress) / progress);
          global.portal.spire.time = timeFormat(-1);
        } else {
          global.portal.spire.progress += progress;
          global.portal.spire.time = progress === 0 ? timeFormat(-1) : timeFormat((100 - global.portal.spire.progress) / progress);
          if (global.tech["waygate"] && global.tech.waygate >= 2) {
            global.portal.waygate.time = timeFormat(-1);
          }
        }
        if (global.portal.hasOwnProperty("waygate") && global.portal.waygate.on === 1 && global.portal.waygate.progress >= 100) {
          global.portal.waygate.progress = 100;
          global.portal.waygate.on = 0;
          global.tech.waygate = 3;
          global.resource.Demonic_Essence.display = true;
          global.resource.Demonic_Essence.amount = 1;
          drawTech();
        }
        if (global.portal.spire.progress >= 100) {
          global.portal.spire.progress = 0;
          let rank = Number(alevel());
          let stones = rank;
          if (global.genes["blood"] && global.genes["blood"] >= 2) {
            stones *= 2;
          }
          global.prestige.Blood_Stone.count += stones;
          global.stats.blood += stones;
          arpa("Blood");
          if (!global.tech.hasOwnProperty("b_stone")) {
            global.tech["b_stone"] = 1;
            drawTech();
          }
          messageQueue(
            `${loc("portal_spire_conquest", [loc(`portal_mech_boss_${global.portal.spire.boss}`), global.portal.spire.count])} ${loc(stones === 1 ? "portal_spire_conquest_stone" : "portal_spire_conquest_stones", [stones])}`,
            "info",
            false,
            ["progress", "hell"]
          );
          global.portal.spire.count++;
          if (global.portal.spire.count > 10 && global.tech["hell_spire"] && global.tech.hell_spire < 10) {
            global.tech["hell_spire"] = 10;
            drawTech();
          }
          let affix = universeAffix();
          if (!global.stats.spire.hasOwnProperty(affix)) {
            global.stats.spire[affix] = { s0: 0, s1: 0, s2: 0, s3: 0, s4: 0 };
          }
          if (global.portal.spire.count > global.stats.spire[affix][`s${rank - 1}`]) {
            global.stats.spire[affix][`s${rank - 1}`] = global.portal.spire.count;
          }
          if (!global.stats.spire[affix].hasOwnProperty(global.portal.spire.boss) || rank > global.stats.spire[affix][global.portal.spire.boss]) {
            global.stats.spire[affix][global.portal.spire.boss] = rank;
          }
          if (global.portal.spire.boss === "djinni" && global.race.species === "djinn" || global.portal.spire.boss === global.race.species) {
            unlockAchieve("doppelganger");
          }
          genSpireFloor();
          renderFortress();
        }
      }
      if (global.race["fasting"] && global.portal["oven_complete"]) {
        let progress = 0;
        if (p_on["oven_complete"]) {
          progress = 25e-5 * turboSpeed;
          if (global.portal["dish_life_infuser"] && global.portal["dish_life_infuser"].on) {
            progress *= 1 + 0.15 * global.portal["dish_life_infuser"].on;
          }
          if (global.portal["dish_soul_steeper"] && global.portal["dish_soul_steeper"].on && global.portal["spire"]) {
            let hunger = 0.5;
            if (global.race["angry"]) {
              hunger -= traits.angry.vars()[0] / 100;
            }
            if (global.race["malnutrition"]) {
              hunger += traits.malnutrition.vars()[0] / 100;
            }
            let mult = 0.03 + (global.race["malnutrition"] ? 0.01 : 0) + (global.race["angry"] ? -0.01 : 0);
            let working = Math.min(global.portal["dish_soul_steeper"].on, Math.floor(hunger / mult));
            progress *= 1 + 0.05 * (global.portal["spire"].count - 1) * working;
          }
          global.portal["devilish_dish"].done += progress;
          global.portal["devilish_dish"].done = Math.min(global.portal["devilish_dish"].done, 100);
          global.portal["devilish_dish"].count = Math.floor(global.portal["devilish_dish"].done);
          if (global.portal["devilish_dish"].done >= 0.05 && global.tech["dish"] === 3) {
            messageQueue(loc("dish_progress"), "info", false, ["progress"]);
            global.tech["dish"] = 4;
            drawTech();
          }
        }
        global.portal["devilish_dish"].time = progress === 0 ? timeFormat(-1) : timeFormat((100 - global.portal["devilish_dish"].done) / progress);
      }
      if (global.tech["asphodel"] && global.tech.asphodel === 4 && Math.rand(0, 25) === 0) {
        global.tech["asphodel"] = 5;
        drawTech();
        messageQueue(loc("eden_asphodel_hostile"), "info", false, ["progress"]);
      }
      if (global.race["cannibalize"] && global.city["s_alter"]) {
        if (global.city.s_alter.rage > 0) {
          global.city.s_alter.rage--;
        }
        if (global.city.s_alter.regen > 0) {
          global.city.s_alter.regen--;
        }
        if (global.city.s_alter.mind > 0) {
          global.city.s_alter.mind--;
        }
        if (global.city.s_alter.mine > 0) {
          global.city.s_alter.mine--;
        }
        if (global.city.s_alter.harvest > 0) {
          global.city.s_alter.harvest--;
        }
        if ($(`#popper[data-id="city-s_alter"]`).length > 0) {
          updateDesc(actions.city.s_alter, "city", "s_alter");
        }
      }
      if (global.race["casting"]) {
        let total = 0;
        ritual_types.forEach(function(spell) {
          if (global.race.casting[spell]) {
            total += global.race.casting[spell];
          }
        });
        global.race.casting.total = total;
      }
      let blockGeneBuffer = false;
      if (global.tech["r_queue"] && global.r_queue.display) {
        let idx = -1;
        let c_action = false;
        let stop = false;
        let time = 0;
        let untime = 0;
        let spent = { t: { t: 0, rt: 0 }, r: {}, rr: {}, id: {} };
        for (let i = 0; i < global.r_queue.queue.length; i++) {
          let struct = global.r_queue.queue[i];
          let t_action = actions[struct.action][struct.type];
          time = global.settings.qAny_res ? 0 : time;
          untime = global.settings.qAny_res ? 0 : untime;
          if (t_action["grant"] && global.tech[t_action.grant[0]] && global.tech[t_action.grant[0]] >= t_action.grant[1]) {
            global.r_queue.queue.splice(i, 1);
            clearPopper(`rq${c_action.id}`);
            break;
          } else {
            if (checkAffordable(t_action, true)) {
              global.r_queue.queue[i].cna = false;
              let reqMet = checkTechRequirements(struct.type, false);
              let t_time = global.settings.qAny_res ? timeCheck(t_action) : timeCheck(t_action, spent, false, reqMet);
              if (t_time >= 0) {
                if (!stop && checkAffordable(t_action) && reqMet) {
                  c_action = t_action;
                  idx = i;
                  if (global.settings.qAny_res) {
                    stop = true;
                  }
                } else {
                  if (reqMet) {
                    if (!stop && t_time <= 1) {
                      blockGeneBuffer = true;
                    }
                    time += t_time;
                  }
                  untime += t_time;
                }
                if (!global.settings.qAny_res && reqMet) {
                  stop = true;
                }
                global.r_queue.queue[i]["time"] = reqMet ? time : untime;
              } else {
                global.r_queue.queue[i]["time"] = t_time;
              }
              global.r_queue.queue[i]["req"] = reqMet ? true : false;
            } else {
              global.r_queue.queue[i].cna = true;
              global.r_queue.queue[i]["time"] = -1;
            }
          }
          global.r_queue.queue[i].qa = global.settings.qAny_res ? true : false;
        }
        if (idx >= 0 && c_action && !global.r_queue.pause) {
          if (c_action.action({ isQueue: true })) {
            messageQueue(loc("research_success", [global.r_queue.queue[idx].label]), "success", false, ["queue", "research_queue"]);
            gainTech(global.r_queue.queue[idx].type);
            if (c_action["post"]) {
              c_action.post();
            }
            global.r_queue.queue.splice(idx, 1);
            clearPopper(`rq${c_action.id}`);
            resQueue();
          }
        }
        if (global.r_queue.queue.length > global.r_queue.max) {
          global.r_queue.queue.splice(global.r_queue.max);
        }
        let q_techs = {};
        let remove = [];
        checkTechRequirements("club", q_techs);
        for (let i = 0; i < global.r_queue.queue.length; i++) {
          Object.keys(actions.tech[global.r_queue.queue[i].type].reqs).forEach(function(req) {
            if (skipRequirement(req, global.tech[req] || 0)) {
              return;
            }
            if ((!global.tech[req] || global.tech[req] < actions.tech[global.r_queue.queue[i].type].reqs[req]) && (!q_techs[req] || q_techs[req] && q_techs[req].v < actions.tech[global.r_queue.queue[i].type].reqs[req])) {
              remove.push(i);
            }
          });
        }
        if (remove.length > 0) {
          for (let i = remove.length - 1; i >= 0; i--) {
            global.r_queue.queue.splice(remove[i], 1);
          }
        }
      }
      if (global.arpa.sequence && global.arpa.sequence["auto"] && global.tech["genetics"] && global.tech["genetics"] >= 8) {
        buildGene(blockGeneBuffer);
      }
      if (p_on["soul_forge"]) {
        vBind({ el: `#fort` }, "update");
      }
      checkAchievements();
    }
    if (global.tech["queue"] && global.queue.display) {
      let idx = -1;
      let c_action = false;
      let stop = false;
      let deepScan = ["space", "interstellar", "galaxy", "portal", "tauceti", "eden"];
      let time = 0;
      let spent = { t: { t: 0, rt: 0 }, r: {}, rr: {}, id: {} };
      let arpa2 = false;
      for (let i = 0; i < global.queue.queue.length; i++) {
        if (global.settings.qAny) {
          spent = { t: { t: 0, rt: 0 }, r: {}, rr: {}, id: {} };
          time = 0;
        }
        let struct = global.queue.queue[i];
        let t_action = false;
        if (struct.action === "tp-ship") {
          let raw = shipCosts(struct.type);
          let costs = {};
          Object.keys(raw).forEach(function(res) {
            costs[res] = function() {
              return raw[res];
            };
          });
          t_action = {
            id: struct.id,
            cost: costs,
            type: "tp-ship",
            bp: struct.type,
            doNotAdjustCost: true
          };
        } else if (struct.action === "hell-mech") {
          let costs = mechCost(struct.type.size, struct.type.infernal, true);
          t_action = {
            id: struct.id,
            cost: costs,
            type: "hell-mech",
            bp: struct.type,
            doNotAdjustCost: true
          };
        } else if (deepScan.includes(struct.action)) {
          for (let region in actions[struct.action]) {
            if (actions[struct.action][region][struct.type]) {
              t_action = actions[struct.action][region][struct.type];
              break;
            }
          }
        } else {
          t_action = actions[struct.action][struct.type];
        }
        if (struct.action === "arpa") {
          let remain = (100 - global.arpa[struct.type].complete) / 100;
          let t_time = arpaTimeCheck(t_action, remain, spent);
          struct["bres"] = false;
          if (t_time >= 0) {
            time += t_time;
            struct["time"] = time;
            for (let j = 1; j < struct.q; j++) {
              let tc = arpaTimeCheck(t_action, 1, spent, true);
              time += tc.t;
              struct["bres"] = tc.r;
            }
            struct["t_max"] = time;
          } else {
            struct["time"] = -1;
          }
          if (arpaTimeCheck(t_action, 0.01) >= 0) {
            if (global.settings.qAny && !global.queue.pause && struct["time"] > 1) {
              buildArpa(struct.type, 100, true);
            } else if (!stop) {
              c_action = t_action;
              idx = i;
              arpa2 = true;
              stop = true;
            }
          }
        } else {
          if (checkAffordable(t_action, true, t_action["doNotAdjustCost"] ? true : false, true)) {
            struct.cna = false;
            let t_time = timeCheck(t_action, spent);
            struct["bres"] = false;
            if (t_time >= 0) {
              if (!stop && checkAffordable(t_action, false, t_action["doNotAdjustCost"] ? true : false)) {
                c_action = t_action;
                idx = i;
                arpa2 = false;
                if (global.settings.qAny) {
                  stop = true;
                }
              } else {
                time += t_time;
              }
              if (!global.settings.qAny) {
                stop = true;
              }
              struct["time"] = time;
              let br = false;
              for (let j = 1; j < struct.q; j++) {
                let tc = timeCheck(t_action, spent, true);
                time += tc.t;
                br = tc.r;
              }
              struct["t_max"] = time;
              struct["bres"] = br;
            } else {
              struct["time"] = t_time;
            }
          } else {
            struct.cna = true;
            struct["time"] = -1;
          }
        }
        struct.qa = global.settings.qAny ? true : false;
      }
      if (idx >= 0 && c_action && !global.queue.pause) {
        let triggerd = false;
        if (arpa2) {
          let label = global.queue.queue[idx].label;
          if (buildArpa(global.queue.queue[idx].type, 100, true, true)) {
            messageQueue(loc("build_success", [label]), "success", false, ["queue", "building_queue"]);
            if (global.queue.queue[idx].q > 1) {
              global.queue.queue[idx].q--;
            } else {
              clearPopper(`q${c_action.id}${idx}`);
              global.queue.queue.splice(idx, 1);
              buildQueue();
            }
          }
        } else if (c_action.hasOwnProperty("type") && c_action.type === "tp-ship") {
          if (buildTPShipQueue(c_action)) {
            clearPopper(`q${c_action.id}${idx}`);
            global.queue.queue.splice(idx, 1);
            buildQueue();
          }
        } else if (c_action.hasOwnProperty("type") && c_action.type === "hell-mech") {
          if (buildMechQueue(c_action)) {
            clearPopper(`q${c_action.id}${idx}`);
            global.queue.queue.splice(idx, 1);
            buildQueue();
          }
        } else {
          let attempts = global.queue.queue[idx].q;
          let struct = global.queue.queue[idx];
          let report_in = c_action["queue_complete"] ? c_action.queue_complete() : 1;
          for (let i = 0; i < attempts; i++) {
            if (c_action.action({ isQueue: true }) !== false) {
              triggerd = true;
              if (report_in - i <= 1) {
                messageQueue(loc("build_success", [global.queue.queue[idx].label]), "success", false, ["queue", "building_queue"]);
              }
              if (global.queue.queue[idx].q > 1) {
                global.queue.queue[idx].q--;
              } else {
                clearPopper(`q${c_action.id}${idx}`);
                global.queue.queue.splice(idx, 1);
                buildQueue();
              }
              if (global.race["inflation"] && global.tech["primitive"]) {
                if (!c_action.hasOwnProperty("inflation") || c_action.inflation) {
                  global.race.inflation++;
                }
              }
            } else {
              break;
            }
          }
          if (triggerd) {
            postBuild(c_action, struct.action, struct.type);
          }
        }
      }
      let last = false;
      let used_slots = 0;
      let merged_queue = [];
      let update_queue = false;
      for (let i = 0; i < global.queue.queue.length; i++) {
        used_slots += Math.ceil(global.queue.queue[i].q / global.queue.queue[i].qs);
        if (used_slots > global.queue.max) {
          let remaining = Math.ceil(global.queue.queue[i].q / global.queue.queue[i].qs) - (used_slots - global.queue.max);
          if (remaining === 0) {
            global.queue.queue.splice(i);
          } else {
            global.queue.queue[i].q = remaining * global.queue.queue[i].qs;
            global.queue.queue.splice(i + 1);
          }
        }
        if (global.settings.q_merge === "merge_nearby") {
          if (last === global.queue.queue[i].id) {
            clearPopper(`q${global.queue.queue[i].id}${i}`);
            global.queue.queue[i - 1].q += global.queue.queue[i].q;
            global.queue.queue.splice(i, 1);
            buildQueue();
            break;
          }
          last = global.queue.queue[i].id;
        } else if (global.settings.q_merge === "merge_all") {
          let found = false;
          for (let k = 0; k < merged_queue.length; k++) {
            if (merged_queue[k].id === global.queue.queue[i].id) {
              found = true;
              update_queue = true;
              merged_queue[k].q += global.queue.queue[i].q;
              clearPopper(`q${global.queue.queue[i].id}${i}`);
              break;
            }
          }
          if (!found) {
            merged_queue.push(global.queue.queue[i]);
          }
        }
      }
      if (update_queue) {
        for (let i = merged_queue.length; i < global.queue.queue.length; i++) {
          clearPopper(`q${global.queue.queue[i].id}${i}`);
        }
        global.queue.queue = merged_queue;
        buildQueue();
      }
    }
    resourceAlt();
    $(`.costList`).each(function() {
      $(this).children().each(function() {
        let elm = $(this);
        this.className.split(/\s+/).forEach(function(cls) {
          if (cls.startsWith(`res-`)) {
            let res = cls.split(`-`)[1];
            if (global.resource.hasOwnProperty(res)) {
              let res_val = elm.attr(`data-${res}`);
              let fail_max = global.resource[res].max >= 0 && res_val > global.resource[res].max ? true : false;
              let avail = elm.attr(`data-ok`) ? elm.attr(`data-ok`) : "has-text-dark";
              if (global.resource[res].amount + global.resource[res].diff < res_val || fail_max) {
                if (elm.hasClass(avail)) {
                  elm.removeClass(avail);
                  elm.addClass("has-text-danger");
                }
              } else if (elm.hasClass("has-text-danger") || elm.hasClass("has-text-alert")) {
                elm.removeClass("has-text-danger");
                elm.addClass(avail);
              }
            }
          }
        });
      });
    });
    {
      let msgHeight = $(`#msgQueue`).height();
      let buildHeight = $(`#buildQueue`).height();
      let totHeight = $(`.leftColumn`).height();
      let rem = $(`#topBar`).height();
      let min = rem * 5;
      let max = totHeight - 5 * rem;
      if (global.settings.q_resize !== "manual") {
        const buildQueueElement = $(`#buildQueue`).get(0);
        if (["auto", "grow"].includes(global.settings.q_resize) && buildQueueElement.scrollHeight > buildQueueElement.clientHeight) {
          buildHeight += buildQueueElement.scrollHeight - buildQueueElement.clientHeight;
        } else if (["auto", "shrink"].includes(global.settings.q_resize)) {
          let minHeight = rem;
          buildQueueElement.childNodes.forEach(function(e) {
            minHeight += e.clientHeight || 0;
          });
          if (buildQueueElement.clientHeight > minHeight) {
            buildHeight = Math.min(buildHeight, minHeight);
          }
        }
      }
      if (msgHeight < min) {
        if (buildHeight > min) {
          buildHeight -= min - msgHeight;
        }
        msgHeight = min;
      }
      if (buildHeight < min) {
        buildHeight = min;
      }
      if (msgHeight + buildHeight > max) {
        msgHeight -= msgHeight + buildHeight - max;
        if (msgHeight < rem) {
          msgHeight = rem;
        }
        if (msgHeight + buildHeight > max) {
          buildHeight -= msgHeight + buildHeight - max;
          if (buildHeight < rem) {
            buildHeight = rem;
          }
        }
      }
      if ($(`#msgQueue`).hasClass("right")) {
        $(`#resources`).height(`calc(100vh - 5rem)`);
        if ($(`#msgQueue`).hasClass("vscroll")) {
          $(`#msgQueue`).removeClass("vscroll");
          $(`#msgQueue`).addClass("sticky");
        }
        msgHeight = `calc(100vh - ${buildHeight}px - 6rem)`;
      } else {
        $(`#resources`).height(`calc(100vh - 5rem - ${buildHeight}px - ${msgHeight}px)`);
        if ($(`#msgQueue`).hasClass("sticky")) {
          $(`#msgQueue`).removeClass("sticky");
          $(`#msgQueue`).addClass("vscroll");
          msgHeight = 100;
        }
      }
      $(`#msgQueue`).height(msgHeight);
      $(`#buildQueue`).height(buildHeight);
      global.settings.msgQueueHeight = msgHeight;
      global.settings.buildQueueHeight = buildHeight;
    }
    if ($(`#mechList`).length > 0) {
      $(`#mechList`).css("height", `calc(100vh - 11.5rem - ${$(`#mechAssembly`).height()}px)`);
    }
    if ($(`#shipList`).length > 0) {
      $(`#shipList`).css("height", `calc(100vh - 11.5rem - ${$(`#shipPlans`).height()}px)`);
    }
  }
  var sythMap = {
    1: 1.1,
    2: 1.25,
    3: 1.5
  };
  var kplv = 60;
  function longLoop() {
    const date2 = /* @__PURE__ */ new Date();
    const astroSign2 = astrologySign();
    if (global.race.species !== "protoplasm") {
      if (global.settings.tabLoad || global.settings.civTabs === 2 && global.settings.govTabs === 2) {
        let grids = gridDefs();
        let updatePowerGrid = false;
        Object.keys(grids).forEach(function(grid) {
          grids[grid].l.forEach(function(struct) {
            let parts = struct.split(":");
            let space2 = convertSpaceSector(parts[0]);
            let region = parts[0] === "city" ? parts[0] : space2;
            let c_action = parts[0] === "city" ? actions.city[parts[1]] : actions[space2][parts[0]][parts[1]];
            let breaker = $(`#pg${c_action.id}${grid}`);
            if (grids[grid].s && (breaker.length === 0 || gridEnabled(c_action, region, parts[0], parts[1]) && breaker.hasClass("inactive"))) {
              updatePowerGrid = true;
            }
          });
        });
        if (updatePowerGrid) {
          setPowerGrid();
        }
      }
      if (global.tech["syphon"] && global.tech.syphon >= 80) {
        if (webWorker.w) {
          webWorker.w.terminate();
        }
        let bang = $('<div class="bigbang"></div>');
        $("body").append(bang);
        setTimeout(function() {
          bang.addClass("burn");
        }, 125);
        setTimeout(function() {
          bang.addClass("b");
        }, 150);
        setTimeout(function() {
          bang.addClass("c");
        }, 2e3);
        setTimeout(function() {
          vacuumCollapse();
        }, 4e3);
      }
      for (let i = 0; i < turboSpeed; i++) {
        if (global.portal["fortress"] && !global.race["warlord"]) {
          bloodwar();
        } else if (global.race["warlord"] && global.portal["minions"] && global.portal.minions.count > 0) {
          hellguard();
        }
      }
      if (global.civic.govern.rev > 0) {
        global.civic.govern.rev = Math.max(0, global.civic.govern.rev - turboSpeed);
      }
      if (global.civic.govern.fr > 0) {
        global.civic.govern.fr = Math.max(0, global.civic.govern.fr - turboSpeed);
      }
      if (global.city.ptrait.includes("trashed") || global.race["scavenger"]) {
        global.civic.scavenger.display = true;
      } else {
        global.civic.scavenger.display = false;
        global.civic.scavenger.workers = 0;
      }
      if (global.civic.homeless > 0) {
        let railway = global.arpa["railway"] ? global.arpa.railway.rank : 0;
        let abandon_odds = Math.floor(railway / (railway + 25) * 10);
        for (let i = 0; i < turboSpeed; i++) {
          if (Math.rand(0, 10) <= abandon_odds) {
            global.civic.homeless--;
          }
        }
      }
      if (global.race["unstable"]) {
        if (global.resource[global.race.species].amount > 0 && Math.rand(0, 100) < traits.unstable.vars()[0]) {
          for (let i = 0; i < turboSpeed; i++) {
            let bound = Math.ceil(
              global.resource[global.race.species].amount ** 0.9 * traits.unstable.vars()[1] / 100
            );
            let died = Math.rand(0, bound);
            global.resource[global.race.species].amount -= died;
            if (global.resource[global.race.species].amount < 0) {
              global.resource[global.race.species].amount = 0;
            }
            global.stats.uDead += died;
          }
        }
      }
      if (global.race["blubber"] && global.resource[global.race.species].amount >= 50) {
        for (let i = 0; i < turboSpeed; i++) {
          let oldAge = Math.rand(0, 1 + Math.floor(global.resource[global.race.species].amount / 50));
          blubberFill(oldAge);
        }
      }
      if (global.tech["currency"] && global.tech["currency"] >= 2) {
        let fluxVal = govActive("risktaker", 0) ? 2 : 4;
        Object.keys(resource_values).forEach(function(res) {
          let r_val = global.race["truepath"] ? resource_values[res] * 2 : resource_values[res];
          if (res === "Copper" && global.tech["high_tech"] && global.tech["high_tech"] >= 2) {
            r_val *= 2;
          }
          if (res === "Titanium") {
            if (global.tech["titanium"] && global.tech["titanium"] > 0) {
              r_val *= global.resource.Alloy.display ? 1 : 2.5;
            } else {
              r_val *= 5;
            }
          }
          if (global.resource[res].display && Math.rand(0, fluxVal) === 0) {
            let max = r_val * 3;
            let min = r_val / 2;
            let variance = (Math.rand(0, 200) - 100) / 100;
            let new_value = global.resource[res].value + variance;
            if (new_value < min) {
              new_value = r_val;
            } else if (new_value > max) {
              new_value = max - r_val;
            }
            global.resource[res].value = new_value;
          }
        });
      }
      if (global.race["blood_thirst"]) {
        if (!global.race.hasOwnProperty("blood_thirst_count")) {
          global.race["blood_thirst_count"] = 1;
        }
        if (global.race.blood_thirst_count > 1) {
          global.race.blood_thirst_count = Math.max(0, global.race.blood_thirst_count - turboSpeed);
        }
      }
      if (global.race["truepath"] && global.civic.foreign.gov3.mil < 500) {
        for (let i = 0; i < turboSpeed; i++) {
          if (Math.rand(0, 50) === 0) {
            global.civic.foreign.gov3.mil++;
          }
        }
      }
      if (global.race["pet"]) {
        if (global.race.pet.event > 0) {
          global.race.pet.event = Math.min(0, global.race.pet.event - turboSpeed);
        }
        for (let i = 0; i < turboSpeed; i++) {
          if (global.race.pet.pet > 0) {
            global.race.pet.pet--;
          } else if (global.race.pet.pet < 0) {
            global.race.pet.pet++;
          }
          if (global.race.pet.pet === 0) {
            break;
          }
        }
      }
      if (global.civic.garrison.wounded > 0) {
        let healed = global.race["regenerative"] ? traits.regenerative.vars()[0] : 1;
        let hc = global.city["hospital"] ? global.city.hospital.count : 0;
        if (global.race["orbit_decayed"] && global.race["truepath"]) {
          hc = Math.min(support_on["operating_base"], p_on["operating_base"]);
        } else if (global.race["artifical"] && global.city["boot_camp"]) {
          hc = global.city.boot_camp.count;
        }
        if (global.race["rejuvenated"] && global.stats.achieve["lamentis"]) {
          let bonus = global.stats.achieve.lamentis.l;
          if (bonus > 5) {
            bonus = 5;
          }
          hc += bonus;
        }
        if (astroSign2 === "cancer") {
          hc += astroVal2("cancer")[0];
          if (hc < 0) {
            hc = 0;
          }
        }
        if (global.tech["medic"] && global.tech["medic"] >= 2) {
          hc *= global.tech["medic"];
        }
        if (global.race["fibroblast"]) {
          hc += traits.fibroblast.vars()[0] * global.race["fibroblast"];
        }
        if (global.race["cannibalize"] && global.city["s_alter"] && global.city.s_alter.regen > 0) {
          hc >= 20 ? hc *= 1 + traits.cannibalize.vars()[0] / 100 : hc += Math.floor(traits.cannibalize.vars()[0] / 5);
        }
        let mantisFathom = fathomCheck("mantis");
        if (mantisFathom > 0) {
          hc >= 20 ? hc *= 1 + traits.cannibalize.vars(1)[0] / 100 * mantisFathom : hc += Math.floor(traits.cannibalize.vars(1)[0] / 5 * mantisFathom);
        }
        if (global.race["high_pop"]) {
          hc *= traits.high_pop.vars()[2];
        }
        let painVal = govActive("nopain", 0);
        if (painVal) {
          hc *= 1 + painVal / 100;
        }
        if (global.city.banquet && global.city.banquet.on && global.city.banquet.level >= 2) {
          hc *= 1 + global.city.banquet.strength ** 0.65 / 100;
        }
        let fathom = fathomCheck("troll");
        if (fathom > 0) {
          hc += Math.round(20 * traits.regenerative.vars(1)[0] * fathom);
        }
        let max_bound = 20;
        if (global.race["slow_regen"]) {
          max_bound *= 1 + traits.slow_regen.vars()[0] / 100;
        }
        hc = Math.round(hc);
        if (hc > 0) {
          while (hc >= max_bound) {
            healed++;
            hc -= max_bound;
          }
          if (Math.rand(0, max_bound) < hc) {
            healed++;
          }
        }
        global.civic.garrison.wounded -= healed * turboSpeed;
        if (global.civic.garrison.wounded < 0) {
          global.civic.garrison.wounded = 0;
        }
      }
      if (global.civic.garrison["fatigue"] && global.civic.garrison.fatigue > 0) {
        global.civic.garrison.fatigue = Math.max(0, global.civic.garrison.fatigue - turboSpeed);
      }
      if (global.civic.garrison["protest"] && global.civic.garrison.protest > 0) {
        global.civic.garrison.protest = Math.max(0, global.civic.garrison.protest - turboSpeed);
      }
      if (global.civic.garrison["m_use"] && global.civic.garrison.m_use > 0) {
        let merc_bound = global.tech["mercs"] && global.tech["mercs"] >= 2 ? 3 : 4;
        let max_merc_roll = global.race["high_pop"] ? traits.high_pop.vars()[0] : 1;
        let num_restore = 0;
        for (let i = 0; i < turboSpeed; i++) {
          for (let roll_num = 0; roll_num < max_merc_roll; roll_num++) {
            if (Math.rand(0, merc_bound) === 0) {
              num_restore++;
            }
          }
        }
        global.civic.garrison.m_use = Math.max(0, global.civic.garrison.m_use - num_restore);
      }
      if (global.race["rainbow_active"] && global.race["rainbow_active"] > 1) {
        global.race["rainbow_active"] = Math.max(0, global.race["rainbow_active"]);
      }
      if (global.city.calendar.day > 0) {
        const addition = turboSpeed;
        if (global.daysAccumulated == null) {
          global.daysAccumulated = 0;
        }
        global.daysAccumulated += addition - Math.floor(addition);
        const fixedAddition = Math.floor(addition) + Math.floor(global.daysAccumulated);
        global.city.calendar.day += fixedAddition;
        global.stats.days += fixedAddition;
        global.daysAccumulated = global.daysAccumulated - Math.floor(global.daysAccumulated);
        while (global.city.calendar.day > orbitLength()) {
          global.city.calendar.day -= orbitLength();
          global.city.calendar.year++;
        }
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          global.city.calendar.season = -1;
        } else {
          let s_segments = global.city.ptrait.includes("elliptical") ? 6 : 4;
          let season_length = Math.round(orbitLength() / s_segments);
          let days = global.city.calendar.day;
          let season = 0;
          while (days > season_length) {
            days -= season_length;
            season++;
          }
          if (global.city.ptrait.includes("elliptical")) {
            switch (season) {
              case 0:
                global.city.calendar.season = 0;
                break;
              case 1:
              case 2:
                global.city.calendar.season = 1;
                break;
              case 3:
                global.city.calendar.season = 2;
                break;
              default:
                global.city.calendar.season = 3;
                break;
            }
          } else {
            global.city.calendar.season = season;
          }
        }
        if (global.race["cataclysm"] || global.race["orbit_decayed"]) {
          global.city.calendar.wind = 0;
          global.city.calendar.temp = 1;
          global.city.calendar.weather = -1;
        } else if (Math.rand(0, 5) === 0) {
          let temp = Math.rand(0, 3);
          let sky = Math.rand(0, 5);
          let wind = Math.rand(0, 3);
          switch (global.city.biome) {
            case "oceanic":
            case "swamp":
              if (Math.rand(0, 2) === 0 && sky > 0) {
                sky--;
              }
              break;
            case "tundra":
            case "taiga":
              if (global.city.calendar.season === 3) {
                temp = 0;
              } else if (Math.rand(0, 2) === 0 && temp > 0) {
                temp--;
              }
              break;
            case "desert":
              if (Math.rand(0, 2) === 0 && sky < 4) {
                sky++;
              }
              break;
            case "ashland":
              if (Math.rand(0, 2) === 0) {
                if (sky < 1) {
                  sky++;
                } else if (sky > 2) {
                  sky--;
                }
              }
            case "volcanic":
              if (global.city.calendar.season === 1) {
                temp = 2;
              } else if (Math.rand(0, 2) === 0 && temp < 2 && !global.city.ptrait.includes("permafrost")) {
                temp++;
              }
              break;
            default:
              break;
          }
          switch (global.city.calendar.season) {
            case 0:
              if (Math.rand(0, 3) === 0 && sky > 0) {
                sky--;
              }
              break;
            case 1:
              if (Math.rand(0, 3) === 0 && temp < 2) {
                temp++;
              }
              break;
            case 2:
              if (Math.rand(0, 3) === 0 && wind > 0) {
                wind--;
              }
              break;
            case 3:
              if (Math.rand(0, 3) === 0 && temp > 0) {
                temp--;
              }
              break;
            default:
              break;
          }
          if (global.city.ptrait.includes("stormy") && wind > 0) {
            if (global.race["rejuvenated"] || Math.rand(0, 2) === 0) {
              wind--;
            }
          }
          if (sky === 0) {
            if (global.race["rainbow"]) {
              global.race["rainbow_active"] = 1;
            }
            global.city.calendar.weather = 0;
          } else if (sky >= 1 && sky <= 2) {
            if (global.race["rainbow"]) {
              global.race["rainbow_active"] = 1;
            }
            global.city.calendar.weather = 1;
          } else {
            if (global.race["rainbow"] && global.city.calendar.weather === 0) {
              global.race["rainbow_active"] = Math.rand(10, 20);
            }
            global.city.calendar.weather = 2;
            if (global.race["darkness"]) {
              if (Math.rand(0, 7 - traits.darkness.vars()[0]) === 0) {
                global.city.calendar.weather = 1;
              }
            }
          }
          if (temp === 0) {
            let new_temp = global.city.calendar.temp - 1;
            if (new_temp < 0) {
              new_temp = 0;
            }
            if (global.city.calendar.season === 1 && new_temp === 0) {
              new_temp = 1;
            }
            if (new_temp === 0 && global.city.biome === "hellscape" && !global.city.ptrait.includes("permafrost")) {
              new_temp = 1;
            }
            if (new_temp === 0 && global.city.biome === "eden" && global.city.calendar.season !== 3) {
              new_temp = 1;
            }
            global.city.calendar.temp = new_temp;
          } else if (temp === 2) {
            let new_temp = global.city.calendar.temp + 1;
            if (new_temp > 2) {
              new_temp = 2;
            }
            if (global.city.calendar.season === 3 && new_temp === 2) {
              new_temp = 1;
            }
            if (new_temp === 2 && global.city.biome === "eden" && global.city.calendar.season !== 1) {
              new_temp = 1;
            }
            global.city.calendar.temp = new_temp;
          }
          global.city.calendar.wind = wind === 0 ? 1 : 0;
        }
        if (global.city.calendar.weather === 2) {
          global.city.sun++;
        } else {
          global.city.sun = 0;
        }
        if (global.city.calendar.temp === 0) {
          global.city.cold++;
        } else {
          global.city.cold = 0;
        }
        if (global.city.calendar.temp === 2) {
          global.city.hot++;
        } else {
          global.city.hot = 0;
        }
        if (!global.race["orbit_decayed"]) {
          if (global.city.ptrait.includes("retrograde")) {
            global.city.calendar.moon -= Math.floor(turboSpeed);
            if (global.city.calendar.moon < 0) {
              global.city.calendar.moon = 27;
            }
          } else {
            global.city.calendar.moon += Math.floor(turboSpeed);
            if (global.city.calendar.moon > 27) {
              global.city.calendar.moon = 0;
            }
          }
        }
        setWeather();
      }
      if (!global.race["cataclysm"] && !global.race["orbit_decayed"] && !global.race["lone_survivor"] && !global.race["vax"]) {
        let deterioration = Math.floor(5e7 / (1 + global.race.mutation)) - global.stats.days;
        if (global.race.deterioration === 0 && deterioration < 4e7) {
          global.race.deterioration = 1;
          let death_clock = Math.round(deterioration / orbitLength());
          messageQueue(loc("deterioration1", [flib("name"), death_clock]), "danger", false, ["progress"]);
        } else if (global.race.deterioration === 1 && deterioration < 2e7) {
          global.race.deterioration = 2;
          let death_clock = Math.round(deterioration / orbitLength());
          messageQueue(loc("deterioration2", [flib("name"), death_clock]), "danger", false, ["progress"]);
        } else if (global.race.deterioration === 2 && deterioration < 5e6) {
          global.race.deterioration = 3;
          let death_clock = Math.round(deterioration / orbitLength());
          messageQueue(loc("deterioration3", [flib("name"), death_clock]), "danger", false, ["progress"]);
        } else if (global.race.deterioration === 3 && deterioration < 1e6) {
          global.race.deterioration = 4;
          let death_clock = Math.round(deterioration / orbitLength());
          messageQueue(loc("deterioration4", [flib("name"), death_clock]), "danger", false, ["progress"]);
        } else if (global.race.deterioration === 4 && deterioration <= 0) {
          global.race.deterioration = 5;
          global.race["decayed"] = global.stats.days;
          global.tech["decay"] = 1;
          messageQueue(loc("deterioration5", [flib("name")]), "danger", false, ["progress"]);
          drawTech();
        }
      }
      if (global.tech["decay"] && global.tech["decay"] >= 2) {
        let fortify = 0;
        if (global.genes.minor["fortify"]) {
          fortify += global.genes.minor["fortify"];
        }
        if (global.race.minor["fortify"]) {
          fortify += global.race.minor["fortify"];
        }
        if (global.tech["decay"] >= 3) {
          fortify *= 100;
        }
        global.race.gene_fortify = fortify;
      } else {
        global.race.gene_fortify = 0;
      }
      if (!global.tech["genesis"] && global.race.deterioration >= 1 && global.tech["high_tech"] && global.tech["high_tech"] >= 10) {
        global.tech["genesis"] = 1;
        messageQueue(loc("genesis"), "special", false, ["progress"]);
        drawTech();
      }
      if (global.settings["cLabels"] !== cLabels) {
        drawCity();
      }
      if (global.tech["xeno"] && global.tech["xeno"] >= 5 && !global.tech["piracy"]) {
        if (Math.rand(0, 5) === 0) {
          global.tech["piracy"] = 1;
          messageQueue(loc("galaxy_piracy_msg", [races[global.galaxy.alien2.id].name]), "info", false, ["progress"]);
          renderSpace();
        }
      }
      if (global.race["cheese"]) {
        global.race.cheese--;
        if (global.race.cheese <= 0) {
          delete global.race.cheese;
        }
      }
      if (global.tech["piracy"]) {
        if (global.tech.piracy < 1e3) {
          global.tech.piracy++;
        } else if (global.tech.xeno >= 8 && global.tech.piracy < 2500) {
          global.tech.piracy++;
        } else if (global.tech["conflict"] && global.tech.piracy < 5e3) {
          global.tech.piracy++;
        }
      }
      if (global.race["wish"] && global.race["wishStats"]) {
        if (global.race.wishStats.minor > 0) {
          global.race.wishStats.minor--;
        }
        if (global.race.wishStats.major > 0) {
          global.race.wishStats.major--;
        }
        if (global.race.wishStats.bad > 0) {
          global.race.wishStats.bad--;
        }
      }
      if (global.portal["archaeology"] && global.tech.hasOwnProperty("hell_ruins") && global.tech.hell_ruins >= 2 && !global.tech["hell_vault"]) {
        let sup = hellSupression("ruins");
        let value = 25e4;
        if (global.race["high_pop"]) {
          value = highPopAdjust(value);
        }
        value = Math.round(value * sup.supress) * workerScale(global.civic.archaeologist.workers, "archaeologist") / 1e3;
        if (Math.rand(0, 1e4) + 1 <= value) {
          global.tech["hell_vault"] = 1;
          messageQueue(loc("portal_ruins_vault"), "info", false, ["progress"]);
          renderFortress();
        }
      }
      if (global.tech["syndicate"] && global.race["truepath"]) {
        let regions = spaceTech();
        Object.keys(regions).forEach(function(region) {
          if (regions[region].info.hasOwnProperty("syndicate") && regions[region].info.syndicate()) {
            let cap = regions[region].info.hasOwnProperty("syndicate_cap") ? regions[region].info.syndicate_cap() : 500;
            if (!global.space.syndicate.hasOwnProperty(region)) {
              global.space.syndicate[region] = 0;
            }
            let reinforce = region === "spc_triton" ? 5 : 10;
            if (global.space.syndicate[region] < cap && Math.rand(0, reinforce) === 0) {
              global.space.syndicate[region]++;
            }
            if (global.space.syndicate[region] > cap) {
              global.space.syndicate[region] = cap;
            }
          }
        });
        if (global.space.hasOwnProperty("shipyard") && global.space.shipyard.hasOwnProperty("ships")) {
          let eScan = 0;
          let tScan = 0;
          let tShip = false;
          global.space.shipyard.ships.forEach(function(ship) {
            if (ship.transit > 0 && ship.fueled) {
              ship.transit = Math.max(0, ship.transit - turboSpeed);
              let trip = 1 - ship.transit / ship.dist;
              let mx = Math.abs(ship.origin.x - ship.destination.x) * trip;
              let my = Math.abs(ship.origin.y - ship.destination.y) * trip;
              if (ship.origin.x <= ship.destination.x) {
                ship.xy.x = ship.origin.x + mx;
              } else {
                ship.xy.x = ship.origin.x - mx;
              }
              if (ship.origin.y <= ship.destination.y) {
                ship.xy.y = ship.origin.y + my;
              } else {
                ship.xy.y = ship.origin.y - my;
              }
            }
            if (ship.transit === 0) {
              ship.xy = genXYcoord(ship.location);
              ship.origin = deepClone(ship.xy);
              ship.dist = 0;
            }
            if (ship.damage > 0 && p_on["shipyard"]) {
              ship.damage = Math.max(0, ship.damage - turboSpeed);
            }
            for (let i = 0; i < turboSpeed; i++) {
              if (ship.location !== "spc_dwarf" && Math.rand(0, 10) === 0) {
                let dm = ship.location === "spc_triton" ? 2 : 1;
                switch (ship.armor) {
                  case "steel":
                    ship.damage += Math.rand(1, 8 * dm);
                    break;
                  case "alloy":
                    ship.damage += Math.rand(1, 6 * dm);
                    break;
                  case "neutronium":
                    ship.damage += Math.rand(1, 4 * dm);
                    break;
                }
                if (ship.damage > 90) {
                  ship.damage = 90;
                }
              }
            }
            if (global.tech.hasOwnProperty("eris_scan") && ship.location === "spc_eris" && ship.transit === 0) {
              eScan += sensorRange(ship);
            }
            if (global.tech.hasOwnProperty("tauceti") && ship.location === "tauceti" && ship.transit === 0) {
              tScan += sensorRange(ship);
              tShip = ship.name;
            }
          });
          if (global.tech.hasOwnProperty("eris_scan") && global.tech.hasOwnProperty("eris") && global.tech.eris === 1 && eScan > 50) {
            global.tech.eris_scan += (eScan - 50) * turboSpeed;
            if (global.tech.eris_scan >= 100) {
              global.tech.eris_scan = 100;
              global.tech.eris = 2;
              messageQueue(loc("space_eris_scan", [planetName().eris]), "info", false, ["progress"]);
              renderSpace();
            }
          }
          if (global.tech.hasOwnProperty("tauceti") && global.tech.tauceti >= 1 && tScan >= 1) {
            if (global.tech.tauceti === 1) {
              initStruct(actions.tauceti.tau_home.orbital_station);
              initStruct(actions.tauceti.tau_red.orbital_platform);
              global.tech.tauceti = 2;
              global.settings.showTau = true;
              global.settings.tau.home = true;
              global.settings.tau.red = true;
              global.settings.tau.gas = false;
              global.settings.tau.roid = false;
              messageQueue(loc("tau_scan", [tShip]), "info", false, ["progress"]);
              renderTauCeti();
            }
          }
          if (global.space.hasOwnProperty("position")) {
            Object.keys(spacePlanetStats).forEach(function(planet) {
              if (global.space.position.hasOwnProperty(planet)) {
                let orbit = spacePlanetStats[planet].orbit === -1 ? orbitLength() : spacePlanetStats[planet].orbit;
                if (orbit === -2) {
                  return;
                } else if (orbit === 0) {
                  global.space.position[planet] = 0;
                } else {
                  global.space.position[planet] += +(360 / orbit).toFixed(4);
                  if (global.space.position[planet] >= 360) {
                    global.space.position[planet] -= 360;
                  }
                }
              }
            });
          }
          if ($("#mapCanvas").length > 0) {
            drawMap();
          }
        }
        if (global.tech["triton"] && global.tech.triton >= 3) {
          tritonWar();
        }
        if (global.tech["eris"] && global.tech.eris >= 3) {
          erisWar();
        }
      }
      if (!global.race["warlord"] && (global.stats.matrix > 0 || global.stats.retire > 0) && !global.race["servants"] && Math.rand(0, 25) === 0) {
        let womlings = Math.min(global.stats.matrix, 100) + Math.min(global.stats.retire, 100) + Math.min(global.stats.eden, 100);
        let skilled = Math.min(Math.min(global.stats.matrix, global.stats.retire), 100);
        skilled += global.stats.achieve["pathfinder"] && global.stats.achieve.pathfinder.l >= 5 ? 2 : 0;
        if (global.stats.achieve["overlord"] && global.stats.achieve.overlord.l >= 5) {
          universe_affixes.forEach(function(uni) {
            if (global.stats.achieve.overlord[uni] >= 5) {
              skilled++;
              womlings += 2;
            }
          });
        }
        global.race["servants"] = {
          max: womlings,
          used: 0,
          smax: skilled,
          sused: 0,
          jobs: {},
          sjobs: {},
          force_scavenger: false
        };
        messageQueue(womlings + skilled === 1 ? loc("civics_servants_msg1") : loc("civics_servants_msg2", [womlings + skilled]), "caution", false, ["events", "major_events"]);
      }
      if (global.race["truepath"] && global.tech["focus_cure"] && global.tech.focus_cure >= 2 && global.tauceti["infectious_disease_lab"]) {
        if (global.tauceti.infectious_disease_lab.cure < 100) {
          let labs = (support_on["infectious_disease_lab"] || 0) / 100;
          if (labs > 1) {
            labs = 1;
          }
          let gain = +flib("curve", labs).toFixed(5) / 5;
          global.tauceti.infectious_disease_lab.cure += gain * turboSpeed;
          if (global.tauceti.infectious_disease_lab.cure > 100) {
            global.tauceti.infectious_disease_lab.cure = 100;
          }
        } else if (global.tauceti.infectious_disease_lab.cure >= 100 && global.tech.focus_cure === 2) {
          global.tech.focus_cure = 3;
          if (races[global.race.species].type === "synthetic") {
            messageQueue(loc("tech_decode_virus_msg2s"), "info", false, ["progress"]);
          } else {
            messageQueue(loc("tech_decode_virus_msg2"), "info", false, ["progress"]);
          }
        } else if (global.tech.focus_cure >= 4 && global.race.hasOwnProperty("vax")) {
          let med = global.race["artifical"] ? global.city.boot_camp.count : global.city.hospital.count;
          if (global.race["orbit_decayed"]) {
            med = Math.min(support_on["operating_base"], p_on["operating_base"]);
          }
          if (global.tech.focus_cure === 4 && global.race.vax < 25) {
            global.race.vax += med / 150 * turboSpeed;
          } else if (global.tech.focus_cure === 4 && global.race.vax >= 25) {
            global.tech.focus_cure = 5;
            messageQueue(loc("tech_vaccine_campaign_msg1"), "info", false, ["progress"]);
          } else if (global.tech.focus_cure === 5 && global.race.vax < 50) {
            global.race.vax += med / 450 * turboSpeed;
          } else if (global.tech.focus_cure === 5 && global.race.vax < 75) {
            global.race.vax += med / 1200 * turboSpeed;
          } else if (global.tech.focus_cure === 6 && global.race.vax < 100) {
            let div = 1e3;
            if (global.tech["vax_p"]) {
              div = 250;
            } else if (global.tech["vax_s"]) {
              div = 390;
            } else if (global.tech["vax_f"]) {
              div = 25;
            } else if (global.tech["vax_c"]) {
              div = 125;
            }
            global.race.vax += med / div * turboSpeed;
          } else if (global.race.vax >= 100 && global.tech.focus_cure <= 6) {
            global.race.vax = 100;
            global.tech.focus_cure = 7;
            messageQueue(loc("tech_vaccine_campaign_msg2"), "info", false, ["progress"]);
            removeTask("assemble");
            defineGovernor();
          }
        }
      }
      if (global.race["infiltrator"]) {
        let tech_source = global.tech["world_control"] ? `trait_infiltrator_steal_alt` : `trait_infiltrator_steal`;
        let know_adjust = traits.infiltrator.vars()[0] / 100;
        if (global.resource.Knowledge.max >= actions.tech.steel.cost.Knowledge() * know_adjust && !global.race["steelen"] && global.tech["smelting"] && global.tech.smelting === 1) {
          messageQueue(loc(tech_source, [loc("tech_steel")]), "info", false, ["progress"]);
          global.resource.Steel.display = true;
          global.tech.smelting = 2;
          defineIndustry();
          drawTech();
        }
        if (global.resource.Knowledge.max >= actions.tech.electricity.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 1) {
          messageQueue(loc(tech_source, [loc("tech_electricity")]), "info", false, ["progress"]);
          global.tech.high_tech = 2;
          global.city["power"] = 0;
          global.city["powered"] = true;
          initStruct(actions.city.coal_power);
          global.settings.showPowerGrid = true;
          setPowerGrid();
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech.electronics.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 3 && global.tech["titanium"]) {
          messageQueue(loc(tech_source, [loc("tech_electronics")]), "info", false, ["progress"]);
          global.tech.high_tech = 4;
          if (global.race["terrifying"]) {
            global.tech["gambling"] = 1;
            initStruct(actions.city.casino);
            initStruct(actions.space.spc_hell.spc_casino);
          }
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech.fission.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 4 && global.tech["uranium"]) {
          messageQueue(loc(tech_source, [loc("tech_fission")]), "info", false, ["progress"]);
          global.tech.high_tech = 5;
          initStruct(actions.city.fission_power);
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech.rocketry.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 6) {
          messageQueue(loc(tech_source, [loc("tech_rocketry")]), "info", false, ["progress"]);
          global.tech.high_tech = 7;
          if (global.race["truepath"] && !global.tech["rival"]) {
            global.tech["rival"] = 1;
            messageQueue(loc(`civics_rival_unlocked`, [govTitle(3)]), "info", false, ["progress", "combat"]);
          }
          arpa("Physics");
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech.artifical_intelligence.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 9) {
          messageQueue(loc(tech_source, [loc("tech_artificial_intelligence")]), "info", false, ["progress"]);
          global.tech.high_tech = 10;
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech.quantum_computing.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 10 && global.tech["nano"]) {
          messageQueue(loc(tech_source, [loc("tech_quantum_computing")]), "info", false, ["progress"]);
          global.tech.high_tech = 11;
          drawTech();
          drawCity();
        }
        if (global.resource.Knowledge.max >= actions.tech[global.race["truepath"] ? "virtual_reality_tp" : "virtual_reality"].cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 11 && global.tech["stanene"] && (global.tech["infernite"] && global.tech["alpha"] && global.tech["alpha"] >= 2 || global.race["truepath"])) {
          messageQueue(loc(tech_source, [loc("tech_virtual_reality")]), "info", false, ["progress"]);
          global.tech.high_tech = 12;
          drawTech();
          drawCity();
        }
        if (global.race["truepath"]) {
          if (global.resource.Knowledge.max >= actions.tech.quantium.cost.Knowledge() * know_adjust && global.tech["supercollider"] && global.tech.supercollider >= 10 && global.tech["enceladus"] && global.tech.enceladus >= 3 && !global.tech["quantium"]) {
            messageQueue(loc(tech_source, [loc("tech_quantium")]), "info", false, ["progress"]);
            global.tech["quantium"] = 1;
            global.resource.Quantium.display = true;
            drawTech();
            loadFoundry();
          }
          if (global.resource.Knowledge.max >= actions.tech.alien_biotech.cost.Knowledge() * know_adjust && global.tech["genetics"] && global.tech.genetics >= 8 && global.tech["kuiper"] && !global.tech["biotech"]) {
            messageQueue(loc(tech_source, [loc("tech_alien_biotech")]), "info", false, ["progress"]);
            global.tech["biotech"] = 1;
            drawTech();
          }
        } else {
          if (global.resource.Knowledge.max >= actions.tech.shields.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 13) {
            messageQueue(loc(tech_source, [loc("tech_shields")]), "info", false, ["progress"]);
            global.tech.high_tech = 14;
            global.settings.space.neutron = true;
            global.settings.space.blackhole = true;
            drawTech();
            drawCity();
          }
          if (global.resource.Knowledge.max >= actions.tech.ai_core.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 14 && global.tech["blackhole"] && global.tech["blackhole"] >= 3) {
            messageQueue(loc(tech_source, [loc("tech_ai_core")]), "info", false, ["progress"]);
            global.tech.high_tech = 15;
            initStruct(actions.interstellar.int_neutron.citadel);
            drawTech();
            drawCity();
          }
          if (global.resource.Knowledge.max >= actions.tech.graphene_processing.cost.Knowledge() * know_adjust && global.tech["ai_core"] && global.tech.ai_core === 2) {
            messageQueue(loc(tech_source, [loc("tech_graphene_processing")]), "info", false, ["progress"]);
            global.tech.ai_core = 3;
            drawTech();
          }
          if (global.resource.Knowledge.max >= actions.tech.nanoweave.cost.Knowledge() * know_adjust && global.tech["science"] && global.tech.science >= 18 && !global.tech["nanoweave"]) {
            messageQueue(loc(tech_source, [loc("tech_nanoweave")]), "info", false, ["progress"]);
            global.tech["nanoweave"] = 1;
            global.resource.Nanoweave.display = true;
            drawTech();
            loadFoundry();
          }
          if (global.resource.Knowledge.max >= actions.tech.orichalcum_analysis.cost.Knowledge() * know_adjust && global.tech["high_tech"] && global.tech.high_tech === 16 && global.tech["chthonian"] && global.tech["chthonian"] >= 3) {
            messageQueue(loc(tech_source, [loc("tech_orichalcum_analysis")]), "info", false, ["progress"]);
            messageQueue(loc("tech_orichalcum_analysis_result"), "info", false, ["progress"]);
            global.tech.high_tech = 17;
            drawTech();
            drawCity();
          }
          if (global.resource.Knowledge.max >= actions.tech.infernium_fuel.cost.Knowledge() * know_adjust && global.tech["smelting"] && global.tech.smelting === 7 && global.tech["hell_ruins"] && global.tech["hell_ruins"] >= 4) {
            messageQueue(loc(tech_source, [loc("tech_infernium_fuel")]), "info", false, ["progress"]);
            global.tech.smelting = 8;
            defineIndustry();
            drawTech();
          }
        }
      }
      let moldFathom = fathomCheck("moldling");
      if (moldFathom > 0) {
        let tech_source = `trait_infiltrator_thrall`;
        let know_adjust = 1 - (100 - traits.infiltrator.vars(1)[0]) * moldFathom / 100;
        if (moldFathom >= 0.02 && global.resource.Knowledge.max >= actions.tech.smelting.cost.Knowledge() * know_adjust && checkTechRequirements("smelting", false) && !global.tech["smelting"]) {
          messageQueue(loc(tech_source, [loc("tech_smelting")]), "info", false, ["progress"]);
          global.tech["smelting"] = 1;
          initStruct(actions.city.smelter);
          if (global.race["steelen"]) {
            global.tech["smelting"] = 2;
          }
          drawTech();
          drawCity();
        }
        if (moldFathom >= 0.04 && global.resource.Knowledge.max >= actions.tech.dynamite.cost.Knowledge() * know_adjust && checkTechRequirements("dynamite", false) && global.tech["explosives"] && global.tech.explosives === 1) {
          messageQueue(loc(tech_source, [loc("tech_dynamite")]), "info", false, ["progress"]);
          global.tech.explosives = 2;
          drawTech();
        }
        if (moldFathom >= 0.08 && global.resource.Knowledge.max >= actions.tech.portland_cement.cost.Knowledge() * know_adjust && checkTechRequirements("portland_cement", false) && global.tech["cement"] && global.tech.cement === 3) {
          messageQueue(loc(tech_source, [loc("tech_portland_cement")]), "info", false, ["progress"]);
          global.tech.cement = 4;
          drawTech();
        }
        if (moldFathom >= 0.12 && global.resource.Knowledge.max >= actions.tech.oxygen_converter.cost.Knowledge() * know_adjust && checkTechRequirements("oxygen_converter", false) && global.tech["smelting"] && global.tech.smelting === 4) {
          messageQueue(loc(tech_source, [loc("tech_oxygen_converter")]), "info", false, ["progress"]);
          global.tech.smelting = 5;
          drawTech();
        }
        if (moldFathom >= 0.15 && global.resource.Knowledge.max >= actions.tech.machinery.cost.Knowledge() * know_adjust && checkTechRequirements("machinery", false) && global.tech["foundry"] && global.tech.foundry === 6) {
          messageQueue(loc(tech_source, [loc("tech_machinery")]), "info", false, ["progress"]);
          global.tech.foundry = 7;
          drawTech();
        }
        if (moldFathom >= 0.2 && global.resource.Knowledge.max >= actions.tech.uranium_storage.cost.Knowledge() * know_adjust && checkTechRequirements("uranium_storage", false) && global.tech["uranium"] && global.tech.uranium === 1) {
          messageQueue(loc(tech_source, [loc("tech_uranium_storage")]), "info", false, ["progress"]);
          global.tech.uranium = 1;
          drawTech();
        }
        if (moldFathom >= 0.25 && global.resource.Knowledge.max >= actions.tech.synthetic_fur.cost.Knowledge() * know_adjust && checkTechRequirements("synthetic_fur", false) && !global.tech["synthetic_fur"]) {
          messageQueue(loc(tech_source, [actions.tech.synthetic_fur.title()]), "info", false, ["progress"]);
          global.tech["synthetic_fur"] = 1;
          drawTech();
        }
        if (moldFathom >= 0.35 && global.resource.Knowledge.max >= actions.tech.rover.cost.Knowledge() * know_adjust && checkTechRequirements("rover", false) && global.tech["space_explore"] && global.tech.space_explore === 1) {
          messageQueue(loc(tech_source, [loc("tech_rover")]), "info", false, ["progress"]);
          global.tech.space_explore = 2;
          global.settings.space.moon = true;
          global.space["moon_base"] = {
            count: 0,
            on: 0,
            support: 0,
            s_max: 0
          };
          drawTech();
        }
        let late_tech_source = `trait_infiltrator_thrall_alt`;
        if (moldFathom >= 0.4 && global.resource.Knowledge.max >= actions.tech.starcharts.cost.Knowledge() * know_adjust && checkTechRequirements("starcharts", false) && global.tech["space_explore"] && global.tech.space_explore === 3) {
          messageQueue(loc(late_tech_source, [loc("tech_starcharts")]), "info", false, ["progress"]);
          global.tech.space_explore = 4;
          drawTech();
        }
        if (moldFathom >= 0.5 && global.resource.Knowledge.max >= actions.tech.nano_tubes.cost.Knowledge() * know_adjust && checkTechRequirements("nano_tubes", false) && !global.tech["nano"]) {
          messageQueue(loc(late_tech_source, [loc("tech_nano_tubes")]), "info", false, ["progress"]);
          global.tech["nano"] = 1;
          global.resource.Nano_Tube.display = true;
          drawTech();
        }
        if (global.race["truepath"]) {
          if (moldFathom >= 0.65 && global.resource.Knowledge.max >= actions.tech.stanene_tp.cost.Knowledge() * know_adjust && checkTechRequirements("stanene_tp", false) && !global.tech["stanene"]) {
            messageQueue(loc(late_tech_source, [loc("tech_stanene")]), "info", false, ["progress"]);
            global.tech["stanene"] = 1;
            global.resource.Stanene.display = true;
            drawTech();
          }
          if (moldFathom >= 0.8 && global.resource.Knowledge.max >= actions.tech.anitgrav_bunk.cost.Knowledge() * know_adjust && checkTechRequirements("anitgrav_bunk", false) && global.tech["marines"] && global.tech.marines === 1) {
            messageQueue(loc(late_tech_source, [loc("tech_anitgrav_bunk")]), "info", false, ["progress"]);
            global.tech.marines = 2;
            drawTech();
          }
        } else {
          if (moldFathom >= 0.65 && global.resource.Knowledge.max >= actions.tech.stanene.cost.Knowledge() * know_adjust && checkTechRequirements("stanene", false) && !global.tech["stanene"]) {
            messageQueue(loc(late_tech_source, [loc("tech_stanene")]), "info", false, ["progress"]);
            global.tech["stanene"] = 1;
            global.resource.Stanene.display = true;
            drawTech();
          }
          if (moldFathom >= 0.78 && global.resource.Knowledge.max >= actions.tech.hydroponics.cost.Knowledge() * know_adjust && checkTechRequirements("hydroponics", false) && global.tech["mars"] && global.tech.mars === 5) {
            messageQueue(loc(late_tech_source, [loc("tech_hydroponics")]), "info", false, ["progress"]);
            global.tech.mars = 6;
            drawTech();
          }
          if (moldFathom >= 0.92 && global.resource.Knowledge.max >= actions.tech.orichalcum_panels.cost.Knowledge() * know_adjust && checkTechRequirements("orichalcum_panels", false) && global.tech["swarm"] && global.tech.swarm === 5) {
            messageQueue(loc(late_tech_source, [loc("tech_orichalcum_panels")]), "info", false, ["progress"]);
            global.tech.swarm = 6;
            drawTech();
          }
          if (moldFathom >= 1 && global.resource.Knowledge.max >= actions.tech.cybernetics.cost.Knowledge() * know_adjust && checkTechRequirements("cybernetics", false) && global.tech["high_tech"] && global.tech.high_tech === 17) {
            messageQueue(loc(late_tech_source, [loc("tech_cybernetics")]), "info", false, ["progress"]);
            global.tech.high_tech = 18;
            drawTech();
          }
        }
      }
      if (global.race["truepath"] && global.tech["tauceti"] && global.tech.tauceti === 3 && global.space.hasOwnProperty("jump_gate") && global.tauceti.hasOwnProperty("jump_gate") && global.space.jump_gate.count >= 100 && global.tauceti.jump_gate.count >= 100) {
        global.tech.tauceti = 4;
        global.resource.Materials.display = false;
        global.resource.Bolognium.display = true;
        renderSpace();
        renderTauCeti();
        drawTech();
      }
      if (global.race["truepath"] && global.tech["tauceti"] && !global.race["lone_survivor"]) {
        if (global.tech.tauceti === 5 && !global.tech["plague"] && Math.rand(0, 50) === 0) {
          global.tech["plague"] = 1;
          messageQueue(loc("tau_plague", [govTitle(3)]), "info", false, ["progress"]);
        } else if (global.tech["plague"] && global.tech["tau_roid"] && global.tech["tau_whale"]) {
          if (global.tech.plague === 1 && (global.tech.tau_roid >= 4 || global.tech.tau_whale >= 2) && Math.rand(0, 50) === 0) {
            global.tech.plague = 2;
            global.race["quarantine"] = 1;
            global.race["qDays"] = 0;
            messageQueue(loc("tau_plague2", [govTitle(3)]), "info", false, ["progress"]);
          } else if (global.tech.plague === 2 && global.tech.tau_roid >= 5 && global.tech.tau_whale >= 2 && Math.rand(0, 50) === 0) {
            global.tech.plague = 3;
            global.race["quarantine"] = 2;
            global.race["qDays"] = 0;
            messageQueue(loc("tau_plague3", [govTitle(3), races[global.race.species].home]), "info", false, ["progress"]);
          } else if (global.tech["isolation"]) {
            if (global.tech.plague < 5 && Math.rand(0, 50) === 0) {
              global.tech.plague = 5;
              delete global.race["quarantine"];
              delete global.race["qDays"];
              messageQueue(loc("tau_plague5b", [races[global.race.species].home]), "info", false, ["progress"]);
              drawTech();
            }
          } else if (global.tech.plague === 3 && global.tech["disease"] && global.tech.disease >= 2 && Math.rand(0, 50) === 0) {
            global.tech.plague = 4;
            global.race["quarantine"] = 3;
            global.race["qDays"] = 0;
            messageQueue(loc("tau_plague5a", [races[global.race.species].home]), "info", false, ["progress"]);
          } else if (global.tech.plague === 4 && global.tech["disease"] && global.tech.disease >= 3 && Math.rand(0, 50) === 0) {
            global.tech.plague = 5;
            global.race["quarantine"] = 4;
            global.race["qDays"] = 0;
            messageQueue(loc("tau_plague5a", [races[global.race.species].home]), "info", false, ["progress"]);
          }
          if (global.race["quarantine"]) {
            if (!global.race.hasOwnProperty("qDays")) {
              global.race["qDays"] = 0;
            }
            global.race.qDays += turboSpeed;
          }
        }
      } else if (global.tech["tau_gas"] && global.tech.tau_gas >= 4 && !global.tech["plague"] && global.race["lone_survivor"]) {
        global.tech["plague"] = 5;
      }
      if (global.civic.govern["protest"] && global.civic.govern.protest > 0) {
        global.civic.govern.protest--;
      }
      if (global.civic.govern["scandal"] && global.civic.govern.scandal > 0) {
        global.civic.govern.scandal--;
      }
      {
        let tax_cap = govCivics("tax_cap");
        let tax_min = govCivics("tax_cap", true);
        if (global.civic.taxes.tax_rate > tax_cap) {
          global.civic.taxes.tax_rate = tax_cap;
        } else if (global.civic.taxes.tax_rate < tax_min) {
          global.civic.taxes.tax_rate = tax_min;
        }
      }
      if (global.queue.display) {
        calcQueueMax();
      }
      if (global.r_queue.display) {
        calcRQueueMax();
      }
      if (global.race.mutation > 0) {
        let total = 0;
        for (let i = 0; i < global.race.mutation; i++) {
          let mut_level = i + 1;
          let plasma = global.genes["plasma"] ? mut_level : 1;
          if (global.genes["plasma"] && plasma > 3) {
            if (global.genes["plasma"] >= 2) {
              plasma = plasma > 5 ? 5 : plasma;
            } else {
              plasma = 3;
            }
          }
          total += plasma;
        }
        global.race["p_mutation"] = total;
      }
      if (!global.tech["whitehole"] && global.interstellar["stellar_engine"] && global.interstellar.stellar_engine.exotic >= 0.025) {
        global.tech["whitehole"] = 1;
        if (global.tech["stablized"]) {
          delete global.tech["stablized"];
        }
        if (!global.race.governor.config.hasOwnProperty("trash") || global.race.governor.config.hasOwnProperty("trash") && !global.race.governor.config.trash["stab"]) {
          messageQueue(loc("interstellar_blackhole_unstable"), "danger", false, ["progress"]);
        }
        drawTech();
      } else if (global.interstellar["stellar_engine"] && global.interstellar.stellar_engine.exotic >= 0.025) {
        if (global.tech["whitehole"] && global.tech["stablized"]) {
          delete global.tech["stablized"];
          drawTech();
        }
      }
      for (let i = 0; i < turboSpeed; i++) {
        if (!global.tech["xeno"] && global.galaxy["scout_ship"] && gal_on["scout_ship"] > 0 && Math.rand(0, 10) === 0) {
          global.tech["xeno"] = 1;
          global.galaxy.scout_ship.count--;
          global.galaxy.scout_ship.on--;
          let civPerShip = actions.galaxy.gxy_gateway.scout_ship.ship.civ();
          let milPerShip = actions.galaxy.gxy_gateway.scout_ship.ship.mil();
          global.galaxy.scout_ship.crew -= civPerShip;
          global.galaxy.scout_ship.mil -= milPerShip;
          global.resource[global.race.species].amount -= civPerShip;
          global.civic.garrison.workers -= milPerShip;
          global.civic.garrison.crew -= milPerShip;
          messageQueue(loc("galaxy_encounter"), "info", false, ["progress"]);
          drawTech();
          break;
        }
      }
      for (let i = 0; i < turboSpeed; i++) {
        if (global.galaxy["scavenger"] && global.tech["conflict"] && global.tech["conflict"] === 4 && gal_on["scavenger"] > 0 && Math.rand(0, 50) <= gal_on["scavenger"]) {
          global.tech["conflict"] = 5;
          messageQueue(loc("galaxy_scavenger_find"), "info", false, ["progress"]);
          drawTech();
        }
      }
      for (let i = 0; i < turboSpeed; i++) {
        if (!global.tech["syndicate"] && !global.race["lone_survivor"] && global.tech["outer"] && Math.rand(0, 20) === 0) {
          messageQueue(loc("outer_syndicate", [govTitle(4)]), "info", false, ["progress"]);
          global.tech["syndicate"] = 1;
          global.space["syndicate"] = {};
        }
      }
      if (!global.tech["corrupted_ai"] && p_on["ai_core2"] && calcAIDrift() === 100) {
        global.tech["corrupted_ai"] = 1;
        drawTech();
      }
      if (global.arpa.sequence && global.arpa.sequence["auto"] && global.tech["genetics"] && global.tech["genetics"] === 7) {
        buildGene();
      }
      if (global.race["orbit_decay"]) {
        if (!global.race["orbit_decayed"]) {
          $(`#infoTimer`).html(`T-${global.race["orbit_decay"] - global.stats.days}`);
        }
        orbitDecayed();
      }
      if (global.race["truepath"] && global.city.ptrait.includes("kamikaze") && orbitLength() <= 10) {
        global.race["orbit_decay"] = 1;
        global.race["tidal_decay"] = 1;
        orbitDecayed();
      }
      if (global.race["living_materials"]) {
        ["city", "space", "interstellar", "galaxy", "portal", "eden", "tauceti"].forEach(function(sector) {
          Object.keys(global[sector]).forEach(function(struct) {
            if (global[sector][struct].hasOwnProperty("l_m")) {
              global[sector][struct].l_m++;
            }
          });
        });
      }
      govern();
    }
    if (!global.race.seeded || global.race.seeded && global.race["chose"]) {
      for (let i = 0; i < turboSpeed; i++) {
        if (Math.rand(0, global.event.t) === 0) {
          let event_pool = eventList("major");
          if (event_pool.length > 0) {
            let event = event_pool[Math.floor(seededRandom(0, event_pool.length))];
            let msg = events[event].effect();
            messageQueue(msg, "caution", false, ["events", "major_events"]);
            global.event.l = event;
          }
          global.event.t = 999;
          if (astroSign2 === "pisces") {
            global.event.t -= astroVal2("pisces")[0];
          }
        } else {
          global.event.t--;
        }
        if (global.race.species !== "protoplasm") {
          if (Math.rand(0, global.m_event.t) === 0) {
            let event_pool = eventList("minor");
            if (!global.race["pet"] && (global.race["catnip"] && global.race.catnip >= 2 || global.race["anise"] && global.race.anise >= 2)) {
              event_pool = ["pet"];
            }
            if (event_pool.length > 0) {
              let event = event_pool[Math.floor(seededRandom(0, event_pool.length))];
              let msg = events[event].effect();
              messageQueue(msg, false, false, ["events", "minor_events"]);
              global.m_event.l = event;
            }
            global.m_event.t = 850;
            if (astroSign2 === "pisces") {
              global.m_event.t -= astroVal2("pisces")[1];
            }
          } else {
            global.m_event.t--;
          }
        }
        if (global.race["witch_hunter"] && global.resource.Sus.amount >= 100) {
          let odds = 300 - global.resource.Sus.amount;
          if (odds < 1) {
            odds = 1;
          }
          if (Math.rand(0, odds) === 0) {
            let msg = events["witch_hunt_crusade"].effect();
            messageQueue(msg, "caution", false, ["events", "major_events"]);
          }
        }
        if (global.race["witch_hunter"] && global.resource.Sus.amount >= 50 && global.civic.scientist.workers > 0) {
          let odds = 250 - global.resource.Sus.amount * 2;
          if (odds < 50) {
            odds = 50;
          }
          if (Math.rand(0, odds) === 0) {
            let msg = events["witch_hunt"].effect();
            messageQueue(msg, false, false, ["events", "minor_events"]);
          }
        }
      }
      if (global.stats.achieve["endless_hunger"] && global.city.banquet && global.city.banquet.on) {
        global.city.banquet.strength++;
      }
      if (global.eden["mech_station"]) {
        mechStationEffect();
      }
    }
    if (global.race["warlord"] && global.race["shapeshifter"]) {
      cleanRemoveTrait("shapeshifter");
    }
    if (date2.getMonth() === 11 && date2.getDate() >= 17 && date2.getDate() <= 24) {
      global.special.gift[`g${date2.getFullYear()}`] = true;
      global.tech["santa"] = 1;
    } else {
      delete global.tech["santa"];
    }
    if (eventActive("fool")) {
      if (!$(`body`).hasClass("fool")) {
        $(`body`).addClass("fool");
        drawAchieve({ fool: true });
      }
    } else if ($(`body`).hasClass("fool")) {
      $(`body`).removeClass("fool");
      drawAchieve();
    }
    const currentTimestamp = date2.valueOf();
    let restartNeeded = false;
    if (!global.settings.pause && exceededATimeThreshold(currentTimestamp)) {
      addATime(currentTimestamp);
      restartNeeded = true;
    }
    global.stats["current"] = currentTimestamp;
    if (!global.race.hasOwnProperty("geck")) {
      save.setItem("evolved", LZString.compressToUTF16(JSON.stringify(global)));
    }
    if (global.race.species !== "protoplasm" && (global.stats.days + global.stats.tdays) % 1e5 === 99999) {
      messageQueue(loc(`backup_warning`), "advanced", true);
    }
    kplv--;
    if (kplv <= 0) {
      kplv = 60;
      tagEvent("page_view", { page_title: `Game Loop` });
    }
    if (global.settings.pause && webWorker.s) {
      gameLoop("stop");
    }
    if (atrack.t > 0) {
      atrack.t--;
      global.settings.at--;
      if (global.settings.at <= 0 || atrack.t <= 0) {
        global.settings.at = 0;
        restartNeeded = true;
      }
    }
    if (restartNeeded) {
      gameLoop("stop");
      gameLoop("start");
    }
  }
  function buildGene(blockGeneBuffer = false) {
    let buffer = blockGeneBuffer ? 0 : 1e4;
    if (global.resource.Knowledge.amount >= 2e5 && global.resource.Knowledge.amount >= global.resource.Knowledge.max - buffer) {
      global.resource.Knowledge.amount -= 2e5;
      let gene = global.genes["synthesis"] ? sythMap[global.genes["synthesis"]] : 1;
      global.resource.Genes.amount += gene;
    }
  }
  function diffCalc(res, period) {
    let sec = 1e3;
    if (global.race["slow"]) {
      let slow = 1 + traits.slow.vars()[0] / 100;
      sec = Math.floor(sec * slow);
    }
    if (global.race["hyper"]) {
      let fast = 1 - traits.hyper.vars()[0] / 100;
      sec = Math.floor(sec * fast);
    }
    global.resource[res].diff = +(global.resource[res].delta / (period / sec)).toFixed(2);
    global.resource[res].delta = 0;
    if (global.resource[res].hasOwnProperty("gen") && global.resource[res].hasOwnProperty("gen_d")) {
      global.resource[res].gen = +(global.resource[res].gen_d / (period / sec)).toFixed(2);
      global.resource[res].gen_d = 0;
    }
    let el = $(`#res${res} .diff`);
    if (global.race["decay"]) {
      if (global.resource[res].diff < 0) {
        if (global.resource[res].diff >= breakdown.p.consume[res][loc("evo_challenge_decay")]) {
          if (!el.hasClass("has-text-warning")) {
            el.removeClass("has-text-danger");
            el.addClass("has-text-warning");
          }
        } else {
          if (!el.hasClass("has-text-danger")) {
            el.removeClass("has-text-warning");
            el.addClass("has-text-danger");
          }
        }
      } else if (global.resource[res].diff >= 0 && (el.hasClass("has-text-danger") || el.hasClass("has-text-warning"))) {
        el.removeClass("has-text-danger");
        el.removeClass("has-text-warning");
      }
    } else if (res === global.race.species && global.race["fasting"]) {
      if (global.resource[res].diff >= 0 && global.resource[res].diff < 0.75) {
        el.addClass("has-text-warning");
        el.removeClass("has-text-danger");
      } else if (global.resource[res].diff < 0) {
        el.removeClass("has-text-warning");
        el.addClass("has-text-danger");
      } else if (global.resource[res].diff >= 0.75) {
        el.removeClass("has-text-danger");
        el.removeClass("has-text-warning");
      }
    } else {
      if (global.resource[res].diff < 0 && !el.hasClass("has-text-danger")) {
        el.addClass("has-text-danger");
      } else if (global.resource[res].diff >= 0 && el.hasClass("has-text-danger")) {
        el.removeClass("has-text-danger");
      }
    }
  }
  function steelCheck() {
    if (global.resource.Steel.display === false && Math.rand(0, 1250) === 0) {
      global.resource.Steel.display = true;
      modRes("Steel", 1, true);
      messageQueue(loc("steel_sample"), "info", false, ["progress"]);
    }
  }
  function resourceAlt() {
    ["#resources > .resource", ".tab-item > .market-item", "#galaxyTrade > .market-item"].forEach(function(id) {
      let alt = false;
      $(`${id}:visible`).each(function() {
        if (alt) {
          $(this).addClass("alt");
          $(this).removeClass("prime");
          alt = false;
        } else {
          $(this).removeClass("alt");
          $(this).addClass("prime");
          alt = true;
        }
      });
    });
  }
  function spyCaught(i) {
    let escape = global.race["elusive"] || Math.floor(seededRandom(0, 3)) === 0 ? true : false;
    let fathom = fathomCheck("satyr");
    if (fathom > 0 && Math.floor(seededRandom(0, 100)) <= fathom * 100) {
      escape = true;
    }
    if (!escape && global.civic.foreign[`gov${i}`].spy > 0) {
      global.civic.foreign[`gov${i}`].spy -= 1;
    }
    if (!escape && Math.floor(seededRandom(0, 4)) === 0) {
      messageQueue(loc("event_spy_sellout", [govTitle(i)]), "danger", false, ["spy"]);
      let max = global.race["mistrustful"] ? 5 + traits.mistrustful.vars()[0] : 5;
      global.civic.foreign[`gov${i}`].hstl += Math.floor(seededRandom(1, max));
      if (global.civic.foreign[`gov${i}`].hstl > 100) {
        global.civic.foreign[`gov${i}`].hstl = 100;
      }
    } else {
      messageQueue(loc(escape ? "event_spy_fail" : "event_spy", [govTitle(i)]), "danger", false, ["spy"]);
    }
  }
  intervals["version_check"] = setInterval(function() {
    $.ajax({
      url: "https://pmotschmann.github.io/Evolve/package.json",
      type: "GET",
      dataType: "json",
      success: function(res) {
        if (res["version"] && res["version"] != global["version"] && !global["beta"]) {
          $("#topBar .version > a").html(`<span class="has-text-warning">${loc(`update_avail`)}</span> v` + global.version + revision);
        }
      }
    });
  }, 9e5);
  var changeLog = $(`<div class="infoBox"></div>`);
  popover("versionLog", getTopChange(changeLog), { wide: true });
  if (global.race["start_cataclysm"]) {
    start_cataclysm();
  }
})();
//# sourceMappingURL=main.js.map
